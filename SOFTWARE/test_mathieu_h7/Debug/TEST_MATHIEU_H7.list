
TEST_MATHIEU_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011868  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08011b08  08011b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011be8  08011be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011bf0  08011bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011bf4  08011bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08011bf8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000066f8  24000158  08011d50  00013158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006850  08011d50  00013850  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029227  00000000  00000000  00013186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058f3  00000000  00000000  0003c3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d68  00000000  00000000  00041ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001694  00000000  00000000  00043a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d42a  00000000  00000000  0004509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a5d6  00000000  00000000  000824c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170877  00000000  00000000  000aca9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021d313  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d00  00000000  00000000  0021d358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00225058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011af0 	.word	0x08011af0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08011af0 	.word	0x08011af0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <MX_DMA_Init+0x3c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	200b      	movs	r0, #11
 8000636:	f001 f879 	bl	800172c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800063a:	200b      	movs	r0, #11
 800063c:	f001 f890 	bl	8001760 <HAL_NVIC_EnableIRQ>

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a06      	ldr	r2, [pc, #24]	@ (800067c <vApplicationGetIdleTaskMemory+0x30>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	2400017c 	.word	0x2400017c
 800067c:	2400021c 	.word	0x2400021c

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08e      	sub	sp, #56	@ 0x38
 8000684:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of maintask */
  osThreadDef(maintask, Startmaintask, osPriorityNormal, 0, 256);
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_FREERTOS_Init+0x58>)
 8000688:	f107 041c 	add.w	r4, r7, #28
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  maintaskHandle = osThreadCreate(osThread(maintask), NULL);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f00e fee6 	bl	800f472 <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <MX_FREERTOS_Init+0x5c>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of lidarparse */
  osThreadDef(lidarparse, Startlidarparse, osPriorityIdle, 0, 300);
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_FREERTOS_Init+0x60>)
 80006ae:	463c      	mov	r4, r7
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lidarparseHandle = osThreadCreate(osThread(lidarparse), NULL);
 80006be:	463b      	mov	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00e fed5 	bl	800f472 <osThreadCreate>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <MX_FREERTOS_Init+0x64>)
 80006cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006ce:	bf00      	nop
 80006d0:	3738      	adds	r7, #56	@ 0x38
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	08011b14 	.word	0x08011b14
 80006dc:	24000174 	.word	0x24000174
 80006e0:	08011b3c 	.word	0x08011b3c
 80006e4:	24000178 	.word	0x24000178

080006e8 <Startmaintask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmaintask */
void Startmaintask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006f0:	f010 fb62 	bl	8010db8 <MX_USB_DEVICE_Init>
  for(;;)
  {

	 //HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_3);
	 //HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
	CDC_Transmit_FS((uint8_t*) ylidar_finalbuffer, 721*sizeof(uint8_t));
 80006f4:	f240 21d1 	movw	r1, #721	@ 0x2d1
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <Startmaintask+0x24>)
 80006fa:	f010 fc1d 	bl	8010f38 <CDC_Transmit_FS>
    osDelay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000702:	f00e ff02 	bl	800f50a <osDelay>
  {
 8000706:	bf00      	nop
 8000708:	e7f4      	b.n	80006f4 <Startmaintask+0xc>
 800070a:	bf00      	nop
 800070c:	240009c8 	.word	0x240009c8

08000710 <Startlidarparse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlidarparse */
void Startlidarparse(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
//              HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
//              ylidar_fsm();
//              osDelay(10);
//          }

	  while(ylidar_read_index!=ylidar_write_index){
 8000718:	e001      	b.n	800071e <Startlidarparse+0xe>
		  ylidar_fsm();
 800071a:	f000 fcb5 	bl	8001088 <ylidar_fsm>
	  while(ylidar_read_index!=ylidar_write_index){
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <Startlidarparse+0x24>)
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <Startlidarparse+0x28>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d1f7      	bne.n	800071a <Startlidarparse+0xa>

      }

	  osDelay(10);
 800072a:	200a      	movs	r0, #10
 800072c:	f00e feed 	bl	800f50a <osDelay>
	  while(ylidar_read_index!=ylidar_write_index){
 8000730:	e7f5      	b.n	800071e <Startlidarparse+0xe>
 8000732:	bf00      	nop
 8000734:	240005c0 	.word	0x240005c0
 8000738:	240005c2 	.word	0x240005c2

0800073c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000758:	4a27      	ldr	r2, [pc, #156]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000770:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000776:	4a20      	ldr	r2, [pc, #128]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000794:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 8000796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b2:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_GPIO_Init+0xbc>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2118      	movs	r1, #24
 80007ce:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0xc0>)
 80007d0:	f004 f844 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80007d4:	2318      	movs	r3, #24
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_GPIO_Init+0xc0>)
 80007ec:	f003 fe86 	bl	80044fc <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58024400 	.word	0x58024400
 80007fc:	58021000 	.word	0x58021000

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000804:	f000 f8a2 	bl	800094c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fe4c 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f822 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f7ff ff94 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 8000814:	f7ff fefa 	bl	800060c <MX_DMA_Init>
  MX_UART8_Init();
 8000818:	f000 fb0a 	bl	8000e30 <MX_UART8_Init>
  MX_TIM2_Init();
 800081c:	f000 fa56 	bl	8000ccc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000820:	2108      	movs	r1, #8
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <main+0x48>)
 8000824:	f008 faa4 	bl	8008d70 <HAL_TIM_PWM_Start>

  HAL_UART_Abort(&huart8);
 8000828:	4808      	ldr	r0, [pc, #32]	@ (800084c <main+0x4c>)
 800082a:	f009 fad7 	bl	8009ddc <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart8, (uint8_t *)ylidar_circular_buffer, YLIDAR_CIRC_BUF_SIZE);
 800082e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000832:	4907      	ldr	r1, [pc, #28]	@ (8000850 <main+0x50>)
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <main+0x4c>)
 8000836:	f009 fa85 	bl	8009d44 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800083a:	f7ff ff21 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800083e:	f00e fe11 	bl	800f464 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000842:	bf00      	nop
 8000844:	e7fd      	b.n	8000842 <main+0x42>
 8000846:	bf00      	nop
 8000848:	24000468 	.word	0x24000468
 800084c:	240004b4 	.word	0x240004b4
 8000850:	240005c4 	.word	0x240005c4

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09c      	sub	sp, #112	@ 0x70
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085e:	224c      	movs	r2, #76	@ 0x4c
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f010 ffe8 	bl	8011838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2220      	movs	r2, #32
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f010 ffe2 	bl	8011838 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000874:	2002      	movs	r0, #2
 8000876:	f005 faab 	bl	8005dd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <SystemClock_Config+0xf0>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a30      	ldr	r2, [pc, #192]	@ (8000944 <SystemClock_Config+0xf0>)
 8000884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b2e      	ldr	r3, [pc, #184]	@ (8000944 <SystemClock_Config+0xf0>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <SystemClock_Config+0xf4>)
 8000896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000898:	4a2b      	ldr	r2, [pc, #172]	@ (8000948 <SystemClock_Config+0xf4>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008a0:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <SystemClock_Config+0xf4>)
 80008a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ac:	bf00      	nop
 80008ae:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <SystemClock_Config+0xf0>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ba:	d1f8      	bne.n	80008ae <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008bc:	2321      	movs	r3, #33	@ 0x21
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008d6:	2378      	movs	r3, #120	@ 0x78
 80008d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008e6:	230c      	movs	r3, #12
 80008e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fab4 	bl	8005e64 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000902:	f000 f861 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	233f      	movs	r3, #63	@ 0x3f
 8000908:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2303      	movs	r3, #3
 800090c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000912:	2308      	movs	r3, #8
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000916:	2340      	movs	r3, #64	@ 0x40
 8000918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800091a:	2340      	movs	r3, #64	@ 0x40
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800091e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000924:	2340      	movs	r3, #64	@ 0x40
 8000926:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2104      	movs	r1, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fef3 	bl	8006718 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000938:	f000 f846 	bl	80009c8 <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3770      	adds	r7, #112	@ 0x70
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	58024800 	.word	0x58024800
 8000948:	58000400 	.word	0x58000400

0800094c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800095e:	f000 ff0d 	bl	800177c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000962:	2301      	movs	r3, #1
 8000964:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000966:	2300      	movs	r3, #0
 8000968:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800096e:	231f      	movs	r3, #31
 8000970:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000972:	2387      	movs	r3, #135	@ 0x87
 8000974:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000976:	2300      	movs	r3, #0
 8000978:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800097a:	2300      	movs	r3, #0
 800097c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800097e:	2301      	movs	r3, #1
 8000980:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000982:	2301      	movs	r3, #1
 8000984:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800098e:	463b      	mov	r3, r7
 8000990:	4618      	mov	r0, r3
 8000992:	f000 ff2b 	bl	80017ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000996:	2004      	movs	r0, #4
 8000998:	f000 ff08 	bl	80017ac <HAL_MPU_Enable>

}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009b6:	f000 fdb1 	bl	800151c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010000 	.word	0x40010000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_MspInit+0x38>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_MspInit+0x38>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_MspInit+0x38>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	210f      	movs	r1, #15
 80009fc:	f06f 0001 	mvn.w	r0, #1
 8000a00:	f000 fe94 	bl	800172c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58024400 	.word	0x58024400

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	@ 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d844      	bhi.n	8000aa8 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	2019      	movs	r0, #25
 8000a24:	f000 fe82 	bl	800172c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a28:	2019      	movs	r0, #25
 8000a2a:	f000 fe99 	bl	8001760 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000a2e:	4a24      	ldr	r2, [pc, #144]	@ (8000ac0 <HAL_InitTick+0xb0>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <HAL_InitTick+0xb4>)
 8000a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a3a:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <HAL_InitTick+0xb4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <HAL_InitTick+0xb4>)
 8000a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a52:	f107 020c 	add.w	r2, r7, #12
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 f9e7 	bl	8006e30 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a62:	f006 f9cf 	bl	8006e04 <HAL_RCC_GetPCLK2Freq>
 8000a66:	4603      	mov	r3, r0
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <HAL_InitTick+0xb8>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	0c9b      	lsrs	r3, r3, #18
 8000a76:	3b01      	subs	r3, #1
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_InitTick+0xbc>)
 8000a7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <HAL_InitTick+0xc0>)
 8000a7e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0xbc>)
 8000a82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a88:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <HAL_InitTick+0xbc>)
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_InitTick+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <HAL_InitTick+0xbc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a9a:	480c      	ldr	r0, [pc, #48]	@ (8000acc <HAL_InitTick+0xbc>)
 8000a9c:	f008 f836 	bl	8008b0c <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d107      	bne.n	8000ab6 <HAL_InitTick+0xa6>
 8000aa6:	e001      	b.n	8000aac <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e005      	b.n	8000ab8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aac:	4807      	ldr	r0, [pc, #28]	@ (8000acc <HAL_InitTick+0xbc>)
 8000aae:	f008 f88f 	bl	8008bd0 <HAL_TIM_Base_Start_IT>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3738      	adds	r7, #56	@ 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	24000008 	.word	0x24000008
 8000ac4:	58024400 	.word	0x58024400
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	2400041c 	.word	0x2400041c
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <DMA1_Stream0_IRQHandler+0x10>)
 8000b12:	f002 f9d5 	bl	8002ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	24000548 	.word	0x24000548

08000b20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <TIM1_UP_IRQHandler+0x10>)
 8000b26:	f008 fa31 	bl	8008f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2400041c 	.word	0x2400041c

08000b34 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <UART8_IRQHandler+0x10>)
 8000b3a:	f009 fa5d 	bl	8009ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	240004b4 	.word	0x240004b4

08000b48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <OTG_FS_IRQHandler+0x10>)
 8000b4e:	f003 ffdf 	bl	8004b10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2400600c 	.word	0x2400600c

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b60:	4b43      	ldr	r3, [pc, #268]	@ (8000c70 <SystemInit+0x114>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a42      	ldr	r2, [pc, #264]	@ (8000c70 <SystemInit+0x114>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b70:	4b40      	ldr	r3, [pc, #256]	@ (8000c74 <SystemInit+0x118>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 030f 	and.w	r3, r3, #15
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	d807      	bhi.n	8000b8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c74 <SystemInit+0x118>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f023 030f 	bic.w	r3, r3, #15
 8000b84:	4a3b      	ldr	r2, [pc, #236]	@ (8000c74 <SystemInit+0x118>)
 8000b86:	f043 0307 	orr.w	r3, r3, #7
 8000b8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <SystemInit+0x11c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a39      	ldr	r2, [pc, #228]	@ (8000c78 <SystemInit+0x11c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b98:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <SystemInit+0x11c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <SystemInit+0x11c>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4935      	ldr	r1, [pc, #212]	@ (8000c78 <SystemInit+0x11c>)
 8000ba4:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <SystemInit+0x120>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000baa:	4b32      	ldr	r3, [pc, #200]	@ (8000c74 <SystemInit+0x118>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <SystemInit+0x118>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f023 030f 	bic.w	r3, r3, #15
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000c74 <SystemInit+0x118>)
 8000bc0:	f043 0307 	orr.w	r3, r3, #7
 8000bc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c78 <SystemInit+0x11c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8000c78 <SystemInit+0x11c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bd2:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <SystemInit+0x11c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <SystemInit+0x11c>)
 8000bda:	4a29      	ldr	r2, [pc, #164]	@ (8000c80 <SystemInit+0x124>)
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bde:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <SystemInit+0x11c>)
 8000be0:	4a28      	ldr	r2, [pc, #160]	@ (8000c84 <SystemInit+0x128>)
 8000be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000be4:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <SystemInit+0x11c>)
 8000be6:	4a28      	ldr	r2, [pc, #160]	@ (8000c88 <SystemInit+0x12c>)
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bea:	4b23      	ldr	r3, [pc, #140]	@ (8000c78 <SystemInit+0x11c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <SystemInit+0x11c>)
 8000bf2:	4a25      	ldr	r2, [pc, #148]	@ (8000c88 <SystemInit+0x12c>)
 8000bf4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <SystemInit+0x11c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <SystemInit+0x11c>)
 8000bfe:	4a22      	ldr	r2, [pc, #136]	@ (8000c88 <SystemInit+0x12c>)
 8000c00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <SystemInit+0x11c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <SystemInit+0x11c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c78 <SystemInit+0x11c>)
 8000c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <SystemInit+0x11c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <SystemInit+0x130>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <SystemInit+0x134>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c26:	d202      	bcs.n	8000c2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <SystemInit+0x138>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <SystemInit+0x11c>)
 8000c30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d113      	bne.n	8000c64 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <SystemInit+0x11c>)
 8000c3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c42:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <SystemInit+0x11c>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <SystemInit+0x13c>)
 8000c4e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c52:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <SystemInit+0x11c>)
 8000c56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c5a:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <SystemInit+0x11c>)
 8000c5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c60:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	52002000 	.word	0x52002000
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c80:	02020200 	.word	0x02020200
 8000c84:	01ff0000 	.word	0x01ff0000
 8000c88:	01010280 	.word	0x01010280
 8000c8c:	5c001000 	.word	0x5c001000
 8000c90:	ffff0000 	.word	0xffff0000
 8000c94:	51008108 	.word	0x51008108
 8000c98:	52004000 	.word	0x52004000

08000c9c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <ExitRun0Mode+0x2c>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <ExitRun0Mode+0x2c>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000cac:	bf00      	nop
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <ExitRun0Mode+0x2c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	58024800 	.word	0x58024800

08000ccc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000cf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000cfa:	22ef      	movs	r2, #239	@ 0xef
 8000cfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d06:	2263      	movs	r2, #99	@ 0x63
 8000d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d16:	4818      	ldr	r0, [pc, #96]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d18:	f007 ffd2 	bl	8008cc0 <HAL_TIM_PWM_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d22:	f7ff fe51 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4810      	ldr	r0, [pc, #64]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d36:	f008 ff09 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d40:	f7ff fe42 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d44:	2360      	movs	r3, #96	@ 0x60
 8000d46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000d48:	2332      	movs	r3, #50	@ 0x32
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2208      	movs	r2, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d5c:	f008 fa1e 	bl	800919c <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d66:	f7ff fe2f 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d6a:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <MX_TIM2_Init+0xac>)
 8000d6c:	f000 f826 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000468 	.word	0x24000468

08000d7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8c:	d10e      	bne.n	8000dac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d94:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58024400 	.word	0x58024400

08000dbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ddc:	d11f      	bne.n	8000e1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <HAL_TIM_MspPostInit+0x70>)
 8000e1a:	f003 fb6f 	bl	80044fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020400 	.word	0x58020400

08000e30 <MX_UART8_Init>:
UART_HandleTypeDef huart8;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000e34:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e36:	4a23      	ldr	r2, [pc, #140]	@ (8000ec4 <MX_UART8_Init+0x94>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000e78:	4811      	ldr	r0, [pc, #68]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e7a:	f008 ff13 	bl	8009ca4 <HAL_UART_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000e84:	f7ff fda0 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e8c:	f00a fea1 	bl	800bbd2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000e96:	f7ff fd97 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4808      	ldr	r0, [pc, #32]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000e9e:	f00a fed6 	bl	800bc4e <HAL_UARTEx_SetRxFifoThreshold>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000ea8:	f7ff fd8e 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <MX_UART8_Init+0x90>)
 8000eae:	f00a fe57 	bl	800bb60 <HAL_UARTEx_DisableFifoMode>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f7ff fd86 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	240004b4 	.word	0x240004b4
 8000ec4:	40007c00 	.word	0x40007c00

08000ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0ba      	sub	sp, #232	@ 0xe8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	22c0      	movs	r2, #192	@ 0xc0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f010 fca5 	bl	8011838 <memset>
  if(uartHandle->Instance==UART8)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a42      	ldr	r2, [pc, #264]	@ (8000ffc <HAL_UART_MspInit+0x134>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d17d      	bne.n	8000ff4 <HAL_UART_MspInit+0x12c>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000ef8:	f04f 0202 	mov.w	r2, #2
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 ffd0 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f1a:	f7ff fd55 	bl	80009c8 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <HAL_UART_MspInit+0x138>)
 8000f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f24:	4a36      	ldr	r2, [pc, #216]	@ (8001000 <HAL_UART_MspInit+0x138>)
 8000f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f2e:	4b34      	ldr	r3, [pc, #208]	@ (8001000 <HAL_UART_MspInit+0x138>)
 8000f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3c:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <HAL_UART_MspInit+0x138>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f42:	4a2f      	ldr	r2, [pc, #188]	@ (8001000 <HAL_UART_MspInit+0x138>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <HAL_UART_MspInit+0x138>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f72:	2308      	movs	r3, #8
 8000f74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4821      	ldr	r0, [pc, #132]	@ (8001004 <HAL_UART_MspInit+0x13c>)
 8000f80:	f003 fabc 	bl	80044fc <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8000f84:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000f86:	4a21      	ldr	r2, [pc, #132]	@ (800100c <HAL_UART_MspInit+0x144>)
 8000f88:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000f8c:	2251      	movs	r2, #81	@ 0x51
 8000f8e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000f9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa2:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fb6:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fbe:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8000fc6:	4810      	ldr	r0, [pc, #64]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fc8:	f000 fc50 	bl	800186c <HAL_DMA_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000fd2:	f7ff fcf9 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_UART_MspInit+0x140>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	2053      	movs	r0, #83	@ 0x53
 8000fea:	f000 fb9f 	bl	800172c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000fee:	2053      	movs	r0, #83	@ 0x53
 8000ff0:	f000 fbb6 	bl	8001760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	37e8      	adds	r7, #232	@ 0xe8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40007c00 	.word	0x40007c00
 8001000:	58024400 	.word	0x58024400
 8001004:	58021000 	.word	0x58021000
 8001008:	24000548 	.word	0x24000548
 800100c:	40020010 	.word	0x40020010

08001010 <HAL_UART_RxHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    if(huart->Instance==UART8){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_UART_RxHalfCpltCallback+0x30>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d109      	bne.n	8001036 <HAL_UART_RxHalfCpltCallback+0x26>
    	ylidar_write_index=512;
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_UART_RxHalfCpltCallback+0x34>)
 8001024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001028:	801a      	strh	r2, [r3, #0]
    	osSignalSet(lidarparseHandle, SIG_LIDAR_HALF);
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <HAL_UART_RxHalfCpltCallback+0x38>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2101      	movs	r1, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f00e fa7f 	bl	800f534 <osSignalSet>

    }
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40007c00 	.word	0x40007c00
 8001044:	240005c2 	.word	0x240005c2
 8001048:	24000178 	.word	0x24000178

0800104c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART8){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_UART_RxCpltCallback+0x30>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d109      	bne.n	8001072 <HAL_UART_RxCpltCallback+0x26>
    	ylidar_write_index=1023;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_UART_RxCpltCallback+0x34>)
 8001060:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001064:	801a      	strh	r2, [r3, #0]
    	osSignalSet(lidarparseHandle, SIG_LIDAR_HALF);
 8001066:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <HAL_UART_RxCpltCallback+0x38>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f00e fa61 	bl	800f534 <osSignalSet>

	    }
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40007c00 	.word	0x40007c00
 8001080:	240005c2 	.word	0x240005c2
 8001084:	24000178 	.word	0x24000178

08001088 <ylidar_fsm>:
uint16_t CHECKSUM=0;
uint16_t ANGLEINIT=0;


void ylidar_fsm(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
    switch (ydlidarstate)
 800108e:	4b97      	ldr	r3, [pc, #604]	@ (80012ec <ylidar_fsm+0x264>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b03      	cmp	r3, #3
 8001094:	f200 81bc 	bhi.w	8001410 <ylidar_fsm+0x388>
 8001098:	a201      	add	r2, pc, #4	@ (adr r2, 80010a0 <ylidar_fsm+0x18>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	08001119 	.word	0x08001119
 80010a8:	0800116f 	.word	0x0800116f
 80010ac:	08001205 	.word	0x08001205
    {
        case FSM_STATE_0:

        	if((ylidar_circular_buffer[ylidar_read_index]==0xAA)&& (ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]==0x55)){
 80010b0:	4b8f      	ldr	r3, [pc, #572]	@ (80012f0 <ylidar_fsm+0x268>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b8f      	ldr	r3, [pc, #572]	@ (80012f4 <ylidar_fsm+0x26c>)
 80010b8:	5c9b      	ldrb	r3, [r3, r2]
 80010ba:	2baa      	cmp	r3, #170	@ 0xaa
 80010bc:	d11e      	bne.n	80010fc <ylidar_fsm+0x74>
 80010be:	4b8c      	ldr	r3, [pc, #560]	@ (80012f0 <ylidar_fsm+0x268>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	425a      	negs	r2, r3
 80010c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010ce:	bf58      	it	pl
 80010d0:	4253      	negpl	r3, r2
 80010d2:	4a88      	ldr	r2, [pc, #544]	@ (80012f4 <ylidar_fsm+0x26c>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	2b55      	cmp	r3, #85	@ 0x55
 80010d8:	d110      	bne.n	80010fc <ylidar_fsm+0x74>
        		ydlidarstate=FSM_STATE_1;
 80010da:	4b84      	ldr	r3, [pc, #528]	@ (80012ec <ylidar_fsm+0x264>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE;
 80010e0:	4b83      	ldr	r3, [pc, #524]	@ (80012f0 <ylidar_fsm+0x268>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	3302      	adds	r3, #2
 80010e6:	425a      	negs	r2, r3
 80010e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010f0:	bf58      	it	pl
 80010f2:	4253      	negpl	r3, r2
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b7e      	ldr	r3, [pc, #504]	@ (80012f0 <ylidar_fsm+0x268>)
 80010f8:	801a      	strh	r2, [r3, #0]
        	}
        	else{
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
        	}

            break;
 80010fa:	e18d      	b.n	8001418 <ylidar_fsm+0x390>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 80010fc:	4b7c      	ldr	r3, [pc, #496]	@ (80012f0 <ylidar_fsm+0x268>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	425a      	negs	r2, r3
 8001104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001108:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800110c:	bf58      	it	pl
 800110e:	4253      	negpl	r3, r2
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b77      	ldr	r3, [pc, #476]	@ (80012f0 <ylidar_fsm+0x268>)
 8001114:	801a      	strh	r2, [r3, #0]
            break;
 8001116:	e17f      	b.n	8001418 <ylidar_fsm+0x390>

        case FSM_STATE_1:

        	if(!(ylidar_circular_buffer[ylidar_read_index]&0x01)){
 8001118:	4b75      	ldr	r3, [pc, #468]	@ (80012f0 <ylidar_fsm+0x268>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b75      	ldr	r3, [pc, #468]	@ (80012f4 <ylidar_fsm+0x26c>)
 8001120:	5c9b      	ldrb	r3, [r3, r2]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d110      	bne.n	800114c <ylidar_fsm+0xc4>
        		ydlidarstate=FSM_STATE_2;
 800112a:	4b70      	ldr	r3, [pc, #448]	@ (80012ec <ylidar_fsm+0x264>)
 800112c:	2202      	movs	r2, #2
 800112e:	701a      	strb	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 8001130:	4b6f      	ldr	r3, [pc, #444]	@ (80012f0 <ylidar_fsm+0x268>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	425a      	negs	r2, r3
 8001138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800113c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001140:	bf58      	it	pl
 8001142:	4253      	negpl	r3, r2
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b6a      	ldr	r3, [pc, #424]	@ (80012f0 <ylidar_fsm+0x268>)
 8001148:	801a      	strh	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
        		ydlidarstate=FSM_STATE_0;
        	}


            break;
 800114a:	e165      	b.n	8001418 <ylidar_fsm+0x390>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 800114c:	4b68      	ldr	r3, [pc, #416]	@ (80012f0 <ylidar_fsm+0x268>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	425a      	negs	r2, r3
 8001154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001158:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800115c:	bf58      	it	pl
 800115e:	4253      	negpl	r3, r2
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b63      	ldr	r3, [pc, #396]	@ (80012f0 <ylidar_fsm+0x268>)
 8001164:	801a      	strh	r2, [r3, #0]
        		ydlidarstate=FSM_STATE_0;
 8001166:	4b61      	ldr	r3, [pc, #388]	@ (80012ec <ylidar_fsm+0x264>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
            break;
 800116c:	e154      	b.n	8001418 <ylidar_fsm+0x390>

        case FSM_STATE_2:

        	current_point_number=ylidar_circular_buffer[ylidar_read_index];
 800116e:	4b60      	ldr	r3, [pc, #384]	@ (80012f0 <ylidar_fsm+0x268>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4b5f      	ldr	r3, [pc, #380]	@ (80012f4 <ylidar_fsm+0x26c>)
 8001176:	5c9a      	ldrb	r2, [r3, r2]
 8001178:	4b5f      	ldr	r3, [pc, #380]	@ (80012f8 <ylidar_fsm+0x270>)
 800117a:	701a      	strb	r2, [r3, #0]
        	uint16_t available=0;
 800117c:	2300      	movs	r3, #0
 800117e:	82fb      	strh	r3, [r7, #22]

        	if (ylidar_write_index >= ylidar_read_index) {
 8001180:	4b5e      	ldr	r3, [pc, #376]	@ (80012fc <ylidar_fsm+0x274>)
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	4b5a      	ldr	r3, [pc, #360]	@ (80012f0 <ylidar_fsm+0x268>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d306      	bcc.n	800119a <ylidar_fsm+0x112>
        	    available = ylidar_write_index - ylidar_read_index;
 800118c:	4b5b      	ldr	r3, [pc, #364]	@ (80012fc <ylidar_fsm+0x274>)
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	4b57      	ldr	r3, [pc, #348]	@ (80012f0 <ylidar_fsm+0x268>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	82fb      	strh	r3, [r7, #22]
 8001198:	e008      	b.n	80011ac <ylidar_fsm+0x124>
        	} else {
        	    available = (YLIDAR_CIRC_BUF_SIZE - ylidar_read_index) + ylidar_write_index;
 800119a:	4b58      	ldr	r3, [pc, #352]	@ (80012fc <ylidar_fsm+0x274>)
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	4b54      	ldr	r3, [pc, #336]	@ (80012f0 <ylidar_fsm+0x268>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80011aa:	82fb      	strh	r3, [r7, #22]
        	}

        	uint16_t needed=current_point_number*2+7;
 80011ac:	4b52      	ldr	r3, [pc, #328]	@ (80012f8 <ylidar_fsm+0x270>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3307      	adds	r3, #7
 80011b6:	80bb      	strh	r3, [r7, #4]

        	if(needed<=available){
 80011b8:	88ba      	ldrh	r2, [r7, #4]
 80011ba:	8afb      	ldrh	r3, [r7, #22]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d810      	bhi.n	80011e2 <ylidar_fsm+0x15a>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 80011c0:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <ylidar_fsm+0x268>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	425a      	negs	r2, r3
 80011c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011d0:	bf58      	it	pl
 80011d2:	4253      	negpl	r3, r2
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b46      	ldr	r3, [pc, #280]	@ (80012f0 <ylidar_fsm+0x268>)
 80011d8:	801a      	strh	r2, [r3, #0]
        		ydlidarstate=FSM_STATE_0;
 80011da:	4b44      	ldr	r3, [pc, #272]	@ (80012ec <ylidar_fsm+0x264>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
        		ydlidarstate=FSM_STATE_3;
        	}


            break;
 80011e0:	e11a      	b.n	8001418 <ylidar_fsm+0x390>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 80011e2:	4b43      	ldr	r3, [pc, #268]	@ (80012f0 <ylidar_fsm+0x268>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	425a      	negs	r2, r3
 80011ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011f2:	bf58      	it	pl
 80011f4:	4253      	negpl	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <ylidar_fsm+0x268>)
 80011fa:	801a      	strh	r2, [r3, #0]
        		ydlidarstate=FSM_STATE_3;
 80011fc:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <ylidar_fsm+0x264>)
 80011fe:	2203      	movs	r2, #3
 8001200:	701a      	strb	r2, [r3, #0]
            break;
 8001202:	e109      	b.n	8001418 <ylidar_fsm+0x390>

        case FSM_STATE_3:

        	FSA=(float)(((ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[ylidar_read_index])>>1)/64.0;
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <ylidar_fsm+0x268>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	425a      	negs	r2, r3
 800120c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001210:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001214:	bf58      	it	pl
 8001216:	4253      	negpl	r3, r2
 8001218:	4a36      	ldr	r2, [pc, #216]	@ (80012f4 <ylidar_fsm+0x26c>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	4a34      	ldr	r2, [pc, #208]	@ (80012f0 <ylidar_fsm+0x268>)
 8001220:	8812      	ldrh	r2, [r2, #0]
 8001222:	4611      	mov	r1, r2
 8001224:	4a33      	ldr	r2, [pc, #204]	@ (80012f4 <ylidar_fsm+0x26c>)
 8001226:	5c52      	ldrb	r2, [r2, r1]
 8001228:	4313      	orrs	r3, r2
 800122a:	105b      	asrs	r3, r3, #1
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001300 <ylidar_fsm+0x278>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	4b31      	ldr	r3, [pc, #196]	@ (8001304 <ylidar_fsm+0x27c>)
 800123e:	edc3 7a00 	vstr	s15, [r3]
        	LSA=(float)(((ylidar_circular_buffer[(ylidar_read_index+3)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE])>>1)/64.0;
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <ylidar_fsm+0x268>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3303      	adds	r3, #3
 8001248:	425a      	negs	r2, r3
 800124a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800124e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001252:	bf58      	it	pl
 8001254:	4253      	negpl	r3, r2
 8001256:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <ylidar_fsm+0x26c>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	021a      	lsls	r2, r3, #8
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <ylidar_fsm+0x268>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	3302      	adds	r3, #2
 8001262:	4259      	negs	r1, r3
 8001264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001268:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800126c:	bf58      	it	pl
 800126e:	424b      	negpl	r3, r1
 8001270:	4920      	ldr	r1, [pc, #128]	@ (80012f4 <ylidar_fsm+0x26c>)
 8001272:	5ccb      	ldrb	r3, [r1, r3]
 8001274:	4313      	orrs	r3, r2
 8001276:	105b      	asrs	r3, r3, #1
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001280:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001300 <ylidar_fsm+0x278>
 8001284:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <ylidar_fsm+0x280>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
        	CHECKSUM= (uint16_t) (ylidar_circular_buffer[(ylidar_read_index+5)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index+4)%YLIDAR_CIRC_BUF_SIZE];
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <ylidar_fsm+0x268>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	3305      	adds	r3, #5
 8001294:	425a      	negs	r2, r3
 8001296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800129a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800129e:	bf58      	it	pl
 80012a0:	4253      	negpl	r3, r2
 80012a2:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <ylidar_fsm+0x26c>)
 80012a4:	5cd3      	ldrb	r3, [r2, r3]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <ylidar_fsm+0x268>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	3304      	adds	r3, #4
 80012b0:	4259      	negs	r1, r3
 80012b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012b6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80012ba:	bf58      	it	pl
 80012bc:	424b      	negpl	r3, r1
 80012be:	490d      	ldr	r1, [pc, #52]	@ (80012f4 <ylidar_fsm+0x26c>)
 80012c0:	5ccb      	ldrb	r3, [r1, r3]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <ylidar_fsm+0x284>)
 80012c8:	801a      	strh	r2, [r3, #0]
        	ylidar_read_index=(ylidar_read_index+6)%YLIDAR_CIRC_BUF_SIZE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <ylidar_fsm+0x268>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	3306      	adds	r3, #6
 80012d0:	425a      	negs	r2, r3
 80012d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80012da:	bf58      	it	pl
 80012dc:	4253      	negpl	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <ylidar_fsm+0x268>)
 80012e2:	801a      	strh	r2, [r3, #0]

        	for(int i=0;i<current_point_number;i++){
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	e088      	b.n	80013fc <ylidar_fsm+0x374>
 80012ea:	bf00      	nop
 80012ec:	240009c4 	.word	0x240009c4
 80012f0:	240005c0 	.word	0x240005c0
 80012f4:	240005c4 	.word	0x240005c4
 80012f8:	240009c5 	.word	0x240009c5
 80012fc:	240005c2 	.word	0x240005c2
 8001300:	42800000 	.word	0x42800000
 8001304:	24000dc8 	.word	0x24000dc8
 8001308:	24000dcc 	.word	0x24000dcc
 800130c:	24000dd0 	.word	0x24000dd0
        		float angle=(float) (((FSA-LSA)/(current_point_number-1))*(i-1)+FSA);
 8001310:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <ylidar_fsm+0x3a8>)
 8001312:	ed93 7a00 	vldr	s14, [r3]
 8001316:	4b47      	ldr	r3, [pc, #284]	@ (8001434 <ylidar_fsm+0x3ac>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001320:	4b45      	ldr	r3, [pc, #276]	@ (8001438 <ylidar_fsm+0x3b0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	3b01      	subs	r3, #1
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	3b01      	subs	r3, #1
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <ylidar_fsm+0x3a8>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134c:	edc7 7a03 	vstr	s15, [r7, #12]
        		int angleint=floor(angle);
 8001350:	edd7 7a03 	vldr	s15, [r7, #12]
 8001354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001358:	eeb0 0b47 	vmov.f64	d0, d7
 800135c:	f010 fb50 	bl	8011a00 <floor>
 8001360:	eeb0 7b40 	vmov.f64	d7, d0
 8001364:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	60bb      	str	r3, [r7, #8]

        		if(angleint>=0 && angleint<=360){
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db33      	blt.n	80013dc <ylidar_fsm+0x354>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800137a:	dc2f      	bgt.n	80013dc <ylidar_fsm+0x354>

        			uint16_t distance=(uint16_t) floor(((ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index)%YLIDAR_CIRC_BUF_SIZE])/4);
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <ylidar_fsm+0x3b4>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	425a      	negs	r2, r3
 8001384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001388:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800138c:	bf58      	it	pl
 800138e:	4253      	negpl	r3, r2
 8001390:	4a2b      	ldr	r2, [pc, #172]	@ (8001440 <ylidar_fsm+0x3b8>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	4a29      	ldr	r2, [pc, #164]	@ (800143c <ylidar_fsm+0x3b4>)
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800139e:	4928      	ldr	r1, [pc, #160]	@ (8001440 <ylidar_fsm+0x3b8>)
 80013a0:	5c8a      	ldrb	r2, [r1, r2]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da00      	bge.n	80013aa <ylidar_fsm+0x322>
 80013a8:	3303      	adds	r3, #3
 80013aa:	109b      	asrs	r3, r3, #2
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013b8:	ee17 3a90 	vmov	r3, s15
 80013bc:	80fb      	strh	r3, [r7, #6]

        			ylidar_finalbuffer[angleint*2]=distance&0xFF;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	b2d1      	uxtb	r1, r2
 80013c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001444 <ylidar_fsm+0x3bc>)
 80013c8:	54d1      	strb	r1, [r2, r3]
        			ylidar_finalbuffer[angleint*2+1]=(distance>>8)&0xFF;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2d1      	uxtb	r1, r2
 80013d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001444 <ylidar_fsm+0x3bc>)
 80013da:	54d1      	strb	r1, [r2, r3]

        		}
        		ylidar_read_index=(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE;
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <ylidar_fsm+0x3b4>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	3302      	adds	r3, #2
 80013e2:	425a      	negs	r2, r3
 80013e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013ec:	bf58      	it	pl
 80013ee:	4253      	negpl	r3, r2
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <ylidar_fsm+0x3b4>)
 80013f4:	801a      	strh	r2, [r3, #0]
        	for(int i=0;i<current_point_number;i++){
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	3301      	adds	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <ylidar_fsm+0x3b0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4293      	cmp	r3, r2
 8001406:	db83      	blt.n	8001310 <ylidar_fsm+0x288>


        	}
        	ydlidarstate=FSM_STATE_0;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <ylidar_fsm+0x3c0>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]


            break;
 800140e:	e003      	b.n	8001418 <ylidar_fsm+0x390>

        default:
        	ydlidarstate=FSM_STATE_0;
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <ylidar_fsm+0x3c0>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
            break;
 8001416:	bf00      	nop
    }
    ylidar_finalbuffer[720]='\n';
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <ylidar_fsm+0x3bc>)
 800141a:	220a      	movs	r2, #10
 800141c:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
    ylidar_finalbuffer[721]='\r';
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <ylidar_fsm+0x3bc>)
 8001422:	220d      	movs	r2, #13
 8001424:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1

}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	24000dc8 	.word	0x24000dc8
 8001434:	24000dcc 	.word	0x24000dcc
 8001438:	240009c5 	.word	0x240009c5
 800143c:	240005c0 	.word	0x240005c0
 8001440:	240005c4 	.word	0x240005c4
 8001444:	240009c8 	.word	0x240009c8
 8001448:	240009c4 	.word	0x240009c4

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001488 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001450:	f7ff fc24 	bl	8000c9c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001454:	f7ff fb82 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f010 fa41 	bl	8011904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff f9bd 	bl	8000800 <main>
  bx  lr
 8001486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800148c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001490:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8001494:	08011bf8 	.word	0x08011bf8
  ldr r2, =_sbss
 8001498:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 800149c:	24006850 	.word	0x24006850

080014a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC3_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 f933 	bl	8001716 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014b0:	f005 fae8 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_Init+0x68>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	4913      	ldr	r1, [pc, #76]	@ (8001510 <HAL_Init+0x6c>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_Init+0x68>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001510 <HAL_Init+0x6c>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <HAL_Init+0x70>)
 80014e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <HAL_Init+0x74>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ee:	200f      	movs	r0, #15
 80014f0:	f7ff fa8e 	bl	8000a10 <HAL_InitTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e002      	b.n	8001504 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014fe:	f7ff fa69 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	58024400 	.word	0x58024400
 8001510:	08011ba8 	.word	0x08011ba8
 8001514:	24000004 	.word	0x24000004
 8001518:	24000000 	.word	0x24000000

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2400000c 	.word	0x2400000c
 8001540:	24000dd4 	.word	0x24000dd4

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	24000dd4 	.word	0x24000dd4

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_Delay+0x44>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffde 	bl	8001544 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2400000c 	.word	0x2400000c

080015a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_GetREVID+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0c1b      	lsrs	r3, r3, #16
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	5c001000 	.word	0x5c001000

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00
 8001600:	05fa0000 	.word	0x05fa0000

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	@ (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	@ (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	@ (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	@ 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff4c 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800173a:	f7ff ff63 	bl	8001604 <__NVIC_GetPriorityGrouping>
 800173e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f7ff ffb3 	bl	80016b0 <NVIC_EncodePriority>
 800174a:	4602      	mov	r2, r0
 800174c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff82 	bl	800165c <__NVIC_SetPriority>
}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff56 	bl	8001620 <__NVIC_EnableIRQ>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001780:	f3bf 8f5f 	dmb	sy
}
 8001784:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <HAL_MPU_Disable+0x28>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_MPU_Disable+0x28>)
 800178c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001790:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_MPU_Disable+0x2c>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	e000ed90 	.word	0xe000ed90

080017ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017b4:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <HAL_MPU_Enable+0x38>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_MPU_Enable+0x3c>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <HAL_MPU_Enable+0x3c>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017ca:	f3bf 8f4f 	dsb	sy
}
 80017ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017d0:	f3bf 8f6f 	isb	sy
}
 80017d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed90 	.word	0xe000ed90
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	785a      	ldrb	r2, [r3, #1]
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_MPU_ConfigRegion+0x7c>)
 80017fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <HAL_MPU_ConfigRegion+0x7c>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <HAL_MPU_ConfigRegion+0x7c>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001808:	4a17      	ldr	r2, [pc, #92]	@ (8001868 <HAL_MPU_ConfigRegion+0x7c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7b1b      	ldrb	r3, [r3, #12]
 8001814:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7adb      	ldrb	r3, [r3, #11]
 800181a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800181c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7a9b      	ldrb	r3, [r3, #10]
 8001822:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001824:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7b5b      	ldrb	r3, [r3, #13]
 800182a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800182c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7b9b      	ldrb	r3, [r3, #14]
 8001832:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001834:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7bdb      	ldrb	r3, [r3, #15]
 800183a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800183c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7a5b      	ldrb	r3, [r3, #9]
 8001842:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001844:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7a1b      	ldrb	r3, [r3, #8]
 800184a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800184c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001856:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001858:	6113      	str	r3, [r2, #16]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed90 	.word	0xe000ed90

0800186c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fe66 	bl	8001544 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e316      	b.n	8001eb2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a66      	ldr	r2, [pc, #408]	@ (8001a24 <HAL_DMA_Init+0x1b8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d04a      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a65      	ldr	r2, [pc, #404]	@ (8001a28 <HAL_DMA_Init+0x1bc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d045      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a63      	ldr	r2, [pc, #396]	@ (8001a2c <HAL_DMA_Init+0x1c0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d040      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a62      	ldr	r2, [pc, #392]	@ (8001a30 <HAL_DMA_Init+0x1c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d03b      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a60      	ldr	r2, [pc, #384]	@ (8001a34 <HAL_DMA_Init+0x1c8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d036      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001a38 <HAL_DMA_Init+0x1cc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d031      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a3c <HAL_DMA_Init+0x1d0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d02c      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001a40 <HAL_DMA_Init+0x1d4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d027      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a5a      	ldr	r2, [pc, #360]	@ (8001a44 <HAL_DMA_Init+0x1d8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d022      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a59      	ldr	r2, [pc, #356]	@ (8001a48 <HAL_DMA_Init+0x1dc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d01d      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a57      	ldr	r2, [pc, #348]	@ (8001a4c <HAL_DMA_Init+0x1e0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d018      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a56      	ldr	r2, [pc, #344]	@ (8001a50 <HAL_DMA_Init+0x1e4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d013      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a54      	ldr	r2, [pc, #336]	@ (8001a54 <HAL_DMA_Init+0x1e8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00e      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a53      	ldr	r2, [pc, #332]	@ (8001a58 <HAL_DMA_Init+0x1ec>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d009      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a51      	ldr	r2, [pc, #324]	@ (8001a5c <HAL_DMA_Init+0x1f0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d004      	beq.n	8001924 <HAL_DMA_Init+0xb8>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a50      	ldr	r2, [pc, #320]	@ (8001a60 <HAL_DMA_Init+0x1f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_DMA_Init+0xbc>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_DMA_Init+0xbe>
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 813b 	beq.w	8001ba6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a37      	ldr	r2, [pc, #220]	@ (8001a24 <HAL_DMA_Init+0x1b8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d04a      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a36      	ldr	r2, [pc, #216]	@ (8001a28 <HAL_DMA_Init+0x1bc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d045      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a34      	ldr	r2, [pc, #208]	@ (8001a2c <HAL_DMA_Init+0x1c0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d040      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a33      	ldr	r2, [pc, #204]	@ (8001a30 <HAL_DMA_Init+0x1c4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d03b      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a31      	ldr	r2, [pc, #196]	@ (8001a34 <HAL_DMA_Init+0x1c8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d036      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a30      	ldr	r2, [pc, #192]	@ (8001a38 <HAL_DMA_Init+0x1cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d031      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2e      	ldr	r2, [pc, #184]	@ (8001a3c <HAL_DMA_Init+0x1d0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d02c      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a40 <HAL_DMA_Init+0x1d4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d027      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a2b      	ldr	r2, [pc, #172]	@ (8001a44 <HAL_DMA_Init+0x1d8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d022      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2a      	ldr	r2, [pc, #168]	@ (8001a48 <HAL_DMA_Init+0x1dc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d01d      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <HAL_DMA_Init+0x1e0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d018      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <HAL_DMA_Init+0x1e4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a25      	ldr	r2, [pc, #148]	@ (8001a54 <HAL_DMA_Init+0x1e8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00e      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a24      	ldr	r2, [pc, #144]	@ (8001a58 <HAL_DMA_Init+0x1ec>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a22      	ldr	r2, [pc, #136]	@ (8001a5c <HAL_DMA_Init+0x1f0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_DMA_Init+0x174>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <HAL_DMA_Init+0x1f4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d108      	bne.n	80019f2 <HAL_DMA_Init+0x186>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e007      	b.n	8001a02 <HAL_DMA_Init+0x196>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a02:	e02f      	b.n	8001a64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a04:	f7ff fd9e 	bl	8001544 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d928      	bls.n	8001a64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2220      	movs	r2, #32
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e246      	b.n	8001eb2 <HAL_DMA_Init+0x646>
 8001a24:	40020010 	.word	0x40020010
 8001a28:	40020028 	.word	0x40020028
 8001a2c:	40020040 	.word	0x40020040
 8001a30:	40020058 	.word	0x40020058
 8001a34:	40020070 	.word	0x40020070
 8001a38:	40020088 	.word	0x40020088
 8001a3c:	400200a0 	.word	0x400200a0
 8001a40:	400200b8 	.word	0x400200b8
 8001a44:	40020410 	.word	0x40020410
 8001a48:	40020428 	.word	0x40020428
 8001a4c:	40020440 	.word	0x40020440
 8001a50:	40020458 	.word	0x40020458
 8001a54:	40020470 	.word	0x40020470
 8001a58:	40020488 	.word	0x40020488
 8001a5c:	400204a0 	.word	0x400204a0
 8001a60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1c8      	bne.n	8001a04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4b83      	ldr	r3, [pc, #524]	@ (8001c8c <HAL_DMA_Init+0x420>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d107      	bne.n	8001ac8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ac8:	4b71      	ldr	r3, [pc, #452]	@ (8001c90 <HAL_DMA_Init+0x424>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b71      	ldr	r3, [pc, #452]	@ (8001c94 <HAL_DMA_Init+0x428>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad4:	d328      	bcc.n	8001b28 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b28      	cmp	r3, #40	@ 0x28
 8001adc:	d903      	bls.n	8001ae6 <HAL_DMA_Init+0x27a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ae4:	d917      	bls.n	8001b16 <HAL_DMA_Init+0x2aa>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b3e      	cmp	r3, #62	@ 0x3e
 8001aec:	d903      	bls.n	8001af6 <HAL_DMA_Init+0x28a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b42      	cmp	r3, #66	@ 0x42
 8001af4:	d90f      	bls.n	8001b16 <HAL_DMA_Init+0x2aa>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b46      	cmp	r3, #70	@ 0x46
 8001afc:	d903      	bls.n	8001b06 <HAL_DMA_Init+0x29a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b48      	cmp	r3, #72	@ 0x48
 8001b04:	d907      	bls.n	8001b16 <HAL_DMA_Init+0x2aa>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8001b0c:	d905      	bls.n	8001b1a <HAL_DMA_Init+0x2ae>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b52      	cmp	r3, #82	@ 0x52
 8001b14:	d801      	bhi.n	8001b1a <HAL_DMA_Init+0x2ae>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_DMA_Init+0x2b0>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b26:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d117      	bne.n	8001b82 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f002 fb3f 	bl	80041e8 <DMA_CheckFifoParam>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2240      	movs	r2, #64	@ 0x40
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e197      	b.n	8001eb2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f002 fa7a 	bl	8004084 <DMA_CalcBaseAndBitshift>
 8001b90:	4603      	mov	r3, r0
 8001b92:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	223f      	movs	r2, #63	@ 0x3f
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	e0cd      	b.n	8001d42 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a3b      	ldr	r2, [pc, #236]	@ (8001c98 <HAL_DMA_Init+0x42c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d022      	beq.n	8001bf6 <HAL_DMA_Init+0x38a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	@ (8001c9c <HAL_DMA_Init+0x430>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01d      	beq.n	8001bf6 <HAL_DMA_Init+0x38a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a38      	ldr	r2, [pc, #224]	@ (8001ca0 <HAL_DMA_Init+0x434>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d018      	beq.n	8001bf6 <HAL_DMA_Init+0x38a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a36      	ldr	r2, [pc, #216]	@ (8001ca4 <HAL_DMA_Init+0x438>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_DMA_Init+0x38a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a35      	ldr	r2, [pc, #212]	@ (8001ca8 <HAL_DMA_Init+0x43c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00e      	beq.n	8001bf6 <HAL_DMA_Init+0x38a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a33      	ldr	r2, [pc, #204]	@ (8001cac <HAL_DMA_Init+0x440>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d009      	beq.n	8001bf6 <HAL_DMA_Init+0x38a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a32      	ldr	r2, [pc, #200]	@ (8001cb0 <HAL_DMA_Init+0x444>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d004      	beq.n	8001bf6 <HAL_DMA_Init+0x38a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a30      	ldr	r2, [pc, #192]	@ (8001cb4 <HAL_DMA_Init+0x448>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Init+0x38e>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_DMA_Init+0x390>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8097 	beq.w	8001d30 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a24      	ldr	r2, [pc, #144]	@ (8001c98 <HAL_DMA_Init+0x42c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d021      	beq.n	8001c50 <HAL_DMA_Init+0x3e4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <HAL_DMA_Init+0x430>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01c      	beq.n	8001c50 <HAL_DMA_Init+0x3e4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ca0 <HAL_DMA_Init+0x434>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d017      	beq.n	8001c50 <HAL_DMA_Init+0x3e4>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca4 <HAL_DMA_Init+0x438>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d012      	beq.n	8001c50 <HAL_DMA_Init+0x3e4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_DMA_Init+0x43c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00d      	beq.n	8001c50 <HAL_DMA_Init+0x3e4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	@ (8001cac <HAL_DMA_Init+0x440>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d008      	beq.n	8001c50 <HAL_DMA_Init+0x3e4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <HAL_DMA_Init+0x444>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d003      	beq.n	8001c50 <HAL_DMA_Init+0x3e4>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_DMA_Init+0x448>)
 8001c4e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_DMA_Init+0x44c>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d021      	beq.n	8001cbc <HAL_DMA_Init+0x450>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b80      	cmp	r3, #128	@ 0x80
 8001c7e:	d102      	bne.n	8001c86 <HAL_DMA_Init+0x41a>
 8001c80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c84:	e01b      	b.n	8001cbe <HAL_DMA_Init+0x452>
 8001c86:	2300      	movs	r3, #0
 8001c88:	e019      	b.n	8001cbe <HAL_DMA_Init+0x452>
 8001c8a:	bf00      	nop
 8001c8c:	fe10803f 	.word	0xfe10803f
 8001c90:	5c001000 	.word	0x5c001000
 8001c94:	ffff0000 	.word	0xffff0000
 8001c98:	58025408 	.word	0x58025408
 8001c9c:	5802541c 	.word	0x5802541c
 8001ca0:	58025430 	.word	0x58025430
 8001ca4:	58025444 	.word	0x58025444
 8001ca8:	58025458 	.word	0x58025458
 8001cac:	5802546c 	.word	0x5802546c
 8001cb0:	58025480 	.word	0x58025480
 8001cb4:	58025494 	.word	0x58025494
 8001cb8:	fffe000f 	.word	0xfffe000f
 8001cbc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68d2      	ldr	r2, [r2, #12]
 8001cc2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ccc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ce4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b6e      	ldr	r3, [pc, #440]	@ (8001ebc <HAL_DMA_Init+0x650>)
 8001d04:	4413      	add	r3, r2
 8001d06:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec0 <HAL_DMA_Init+0x654>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	009a      	lsls	r2, r3, #2
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f002 f9b5 	bl	8004084 <DMA_CalcBaseAndBitshift>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	e008      	b.n	8001d42 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2240      	movs	r2, #64	@ 0x40
 8001d34:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0b7      	b.n	8001eb2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5f      	ldr	r2, [pc, #380]	@ (8001ec4 <HAL_DMA_Init+0x658>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d072      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec8 <HAL_DMA_Init+0x65c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d06d      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ecc <HAL_DMA_Init+0x660>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d068      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed0 <HAL_DMA_Init+0x664>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d063      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a59      	ldr	r2, [pc, #356]	@ (8001ed4 <HAL_DMA_Init+0x668>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d05e      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a57      	ldr	r2, [pc, #348]	@ (8001ed8 <HAL_DMA_Init+0x66c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d059      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a56      	ldr	r2, [pc, #344]	@ (8001edc <HAL_DMA_Init+0x670>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d054      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a54      	ldr	r2, [pc, #336]	@ (8001ee0 <HAL_DMA_Init+0x674>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d04f      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a53      	ldr	r2, [pc, #332]	@ (8001ee4 <HAL_DMA_Init+0x678>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d04a      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a51      	ldr	r2, [pc, #324]	@ (8001ee8 <HAL_DMA_Init+0x67c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d045      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a50      	ldr	r2, [pc, #320]	@ (8001eec <HAL_DMA_Init+0x680>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d040      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef0 <HAL_DMA_Init+0x684>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d03b      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef4 <HAL_DMA_Init+0x688>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d036      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef8 <HAL_DMA_Init+0x68c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001efc <HAL_DMA_Init+0x690>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d02c      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a48      	ldr	r2, [pc, #288]	@ (8001f00 <HAL_DMA_Init+0x694>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d027      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a47      	ldr	r2, [pc, #284]	@ (8001f04 <HAL_DMA_Init+0x698>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d022      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a45      	ldr	r2, [pc, #276]	@ (8001f08 <HAL_DMA_Init+0x69c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01d      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a44      	ldr	r2, [pc, #272]	@ (8001f0c <HAL_DMA_Init+0x6a0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d018      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a42      	ldr	r2, [pc, #264]	@ (8001f10 <HAL_DMA_Init+0x6a4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a41      	ldr	r2, [pc, #260]	@ (8001f14 <HAL_DMA_Init+0x6a8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a3f      	ldr	r2, [pc, #252]	@ (8001f18 <HAL_DMA_Init+0x6ac>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a3e      	ldr	r2, [pc, #248]	@ (8001f1c <HAL_DMA_Init+0x6b0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d004      	beq.n	8001e32 <HAL_DMA_Init+0x5c6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f20 <HAL_DMA_Init+0x6b4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_Init+0x5ca>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_DMA_Init+0x5cc>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d032      	beq.n	8001ea2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f002 fa4f 	bl	80042e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b80      	cmp	r3, #128	@ 0x80
 8001e48:	d102      	bne.n	8001e50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_DMA_Init+0x624>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d80c      	bhi.n	8001e90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f002 facc 	bl	8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	e008      	b.n	8001ea2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	a7fdabf8 	.word	0xa7fdabf8
 8001ec0:	cccccccd 	.word	0xcccccccd
 8001ec4:	40020010 	.word	0x40020010
 8001ec8:	40020028 	.word	0x40020028
 8001ecc:	40020040 	.word	0x40020040
 8001ed0:	40020058 	.word	0x40020058
 8001ed4:	40020070 	.word	0x40020070
 8001ed8:	40020088 	.word	0x40020088
 8001edc:	400200a0 	.word	0x400200a0
 8001ee0:	400200b8 	.word	0x400200b8
 8001ee4:	40020410 	.word	0x40020410
 8001ee8:	40020428 	.word	0x40020428
 8001eec:	40020440 	.word	0x40020440
 8001ef0:	40020458 	.word	0x40020458
 8001ef4:	40020470 	.word	0x40020470
 8001ef8:	40020488 	.word	0x40020488
 8001efc:	400204a0 	.word	0x400204a0
 8001f00:	400204b8 	.word	0x400204b8
 8001f04:	58025408 	.word	0x58025408
 8001f08:	5802541c 	.word	0x5802541c
 8001f0c:	58025430 	.word	0x58025430
 8001f10:	58025444 	.word	0x58025444
 8001f14:	58025458 	.word	0x58025458
 8001f18:	5802546c 	.word	0x5802546c
 8001f1c:	58025480 	.word	0x58025480
 8001f20:	58025494 	.word	0x58025494

08001f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e226      	b.n	800238e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_DMA_Start_IT+0x2a>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e21f      	b.n	800238e <HAL_DMA_Start_IT+0x46a>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	f040 820a 	bne.w	8002378 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a68      	ldr	r2, [pc, #416]	@ (8002118 <HAL_DMA_Start_IT+0x1f4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04a      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a66      	ldr	r2, [pc, #408]	@ (800211c <HAL_DMA_Start_IT+0x1f8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d045      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a65      	ldr	r2, [pc, #404]	@ (8002120 <HAL_DMA_Start_IT+0x1fc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d040      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a63      	ldr	r2, [pc, #396]	@ (8002124 <HAL_DMA_Start_IT+0x200>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d03b      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a62      	ldr	r2, [pc, #392]	@ (8002128 <HAL_DMA_Start_IT+0x204>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d036      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a60      	ldr	r2, [pc, #384]	@ (800212c <HAL_DMA_Start_IT+0x208>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8002130 <HAL_DMA_Start_IT+0x20c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d02c      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8002134 <HAL_DMA_Start_IT+0x210>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d027      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8002138 <HAL_DMA_Start_IT+0x214>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5a      	ldr	r2, [pc, #360]	@ (800213c <HAL_DMA_Start_IT+0x218>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a59      	ldr	r2, [pc, #356]	@ (8002140 <HAL_DMA_Start_IT+0x21c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a57      	ldr	r2, [pc, #348]	@ (8002144 <HAL_DMA_Start_IT+0x220>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a56      	ldr	r2, [pc, #344]	@ (8002148 <HAL_DMA_Start_IT+0x224>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a54      	ldr	r2, [pc, #336]	@ (800214c <HAL_DMA_Start_IT+0x228>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a53      	ldr	r2, [pc, #332]	@ (8002150 <HAL_DMA_Start_IT+0x22c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_DMA_Start_IT+0xee>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a51      	ldr	r2, [pc, #324]	@ (8002154 <HAL_DMA_Start_IT+0x230>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d108      	bne.n	8002024 <HAL_DMA_Start_IT+0x100>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e007      	b.n	8002034 <HAL_DMA_Start_IT+0x110>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f001 fe76 	bl	8003d2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a34      	ldr	r2, [pc, #208]	@ (8002118 <HAL_DMA_Start_IT+0x1f4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d04a      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a33      	ldr	r2, [pc, #204]	@ (800211c <HAL_DMA_Start_IT+0x1f8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d045      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a31      	ldr	r2, [pc, #196]	@ (8002120 <HAL_DMA_Start_IT+0x1fc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d040      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a30      	ldr	r2, [pc, #192]	@ (8002124 <HAL_DMA_Start_IT+0x200>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d03b      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <HAL_DMA_Start_IT+0x204>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d036      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <HAL_DMA_Start_IT+0x208>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d031      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <HAL_DMA_Start_IT+0x20c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d02c      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2a      	ldr	r2, [pc, #168]	@ (8002134 <HAL_DMA_Start_IT+0x210>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d027      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a28      	ldr	r2, [pc, #160]	@ (8002138 <HAL_DMA_Start_IT+0x214>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d022      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a27      	ldr	r2, [pc, #156]	@ (800213c <HAL_DMA_Start_IT+0x218>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d01d      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <HAL_DMA_Start_IT+0x21c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d018      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <HAL_DMA_Start_IT+0x220>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a22      	ldr	r2, [pc, #136]	@ (8002148 <HAL_DMA_Start_IT+0x224>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00e      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a21      	ldr	r2, [pc, #132]	@ (800214c <HAL_DMA_Start_IT+0x228>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_DMA_Start_IT+0x22c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_DMA_Start_IT+0x1bc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <HAL_DMA_Start_IT+0x230>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_DMA_Start_IT+0x1c0>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_DMA_Start_IT+0x1c2>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 021e 	bic.w	r2, r3, #30
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0216 	orr.w	r2, r2, #22
 80020fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03e      	beq.n	8002184 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0208 	orr.w	r2, r2, #8
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e035      	b.n	8002184 <HAL_DMA_Start_IT+0x260>
 8002118:	40020010 	.word	0x40020010
 800211c:	40020028 	.word	0x40020028
 8002120:	40020040 	.word	0x40020040
 8002124:	40020058 	.word	0x40020058
 8002128:	40020070 	.word	0x40020070
 800212c:	40020088 	.word	0x40020088
 8002130:	400200a0 	.word	0x400200a0
 8002134:	400200b8 	.word	0x400200b8
 8002138:	40020410 	.word	0x40020410
 800213c:	40020428 	.word	0x40020428
 8002140:	40020440 	.word	0x40020440
 8002144:	40020458 	.word	0x40020458
 8002148:	40020470 	.word	0x40020470
 800214c:	40020488 	.word	0x40020488
 8002150:	400204a0 	.word	0x400204a0
 8002154:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 020e 	bic.w	r2, r3, #14
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 020a 	orr.w	r2, r2, #10
 800216a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0204 	orr.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a83      	ldr	r2, [pc, #524]	@ (8002398 <HAL_DMA_Start_IT+0x474>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d072      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a82      	ldr	r2, [pc, #520]	@ (800239c <HAL_DMA_Start_IT+0x478>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d06d      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a80      	ldr	r2, [pc, #512]	@ (80023a0 <HAL_DMA_Start_IT+0x47c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d068      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7f      	ldr	r2, [pc, #508]	@ (80023a4 <HAL_DMA_Start_IT+0x480>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d063      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a7d      	ldr	r2, [pc, #500]	@ (80023a8 <HAL_DMA_Start_IT+0x484>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d05e      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7c      	ldr	r2, [pc, #496]	@ (80023ac <HAL_DMA_Start_IT+0x488>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d059      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a7a      	ldr	r2, [pc, #488]	@ (80023b0 <HAL_DMA_Start_IT+0x48c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d054      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a79      	ldr	r2, [pc, #484]	@ (80023b4 <HAL_DMA_Start_IT+0x490>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d04f      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a77      	ldr	r2, [pc, #476]	@ (80023b8 <HAL_DMA_Start_IT+0x494>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a76      	ldr	r2, [pc, #472]	@ (80023bc <HAL_DMA_Start_IT+0x498>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a74      	ldr	r2, [pc, #464]	@ (80023c0 <HAL_DMA_Start_IT+0x49c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a73      	ldr	r2, [pc, #460]	@ (80023c4 <HAL_DMA_Start_IT+0x4a0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a71      	ldr	r2, [pc, #452]	@ (80023c8 <HAL_DMA_Start_IT+0x4a4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a70      	ldr	r2, [pc, #448]	@ (80023cc <HAL_DMA_Start_IT+0x4a8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6e      	ldr	r2, [pc, #440]	@ (80023d0 <HAL_DMA_Start_IT+0x4ac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6d      	ldr	r2, [pc, #436]	@ (80023d4 <HAL_DMA_Start_IT+0x4b0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a6b      	ldr	r2, [pc, #428]	@ (80023d8 <HAL_DMA_Start_IT+0x4b4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a6a      	ldr	r2, [pc, #424]	@ (80023dc <HAL_DMA_Start_IT+0x4b8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a68      	ldr	r2, [pc, #416]	@ (80023e0 <HAL_DMA_Start_IT+0x4bc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a67      	ldr	r2, [pc, #412]	@ (80023e4 <HAL_DMA_Start_IT+0x4c0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a65      	ldr	r2, [pc, #404]	@ (80023e8 <HAL_DMA_Start_IT+0x4c4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a64      	ldr	r2, [pc, #400]	@ (80023ec <HAL_DMA_Start_IT+0x4c8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a62      	ldr	r2, [pc, #392]	@ (80023f0 <HAL_DMA_Start_IT+0x4cc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Start_IT+0x350>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a61      	ldr	r2, [pc, #388]	@ (80023f4 <HAL_DMA_Start_IT+0x4d0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_DMA_Start_IT+0x354>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_DMA_Start_IT+0x356>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01a      	beq.n	80022b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800229a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a37      	ldr	r2, [pc, #220]	@ (8002398 <HAL_DMA_Start_IT+0x474>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d04a      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a36      	ldr	r2, [pc, #216]	@ (800239c <HAL_DMA_Start_IT+0x478>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d045      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a34      	ldr	r2, [pc, #208]	@ (80023a0 <HAL_DMA_Start_IT+0x47c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d040      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a33      	ldr	r2, [pc, #204]	@ (80023a4 <HAL_DMA_Start_IT+0x480>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d03b      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <HAL_DMA_Start_IT+0x484>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d036      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a30      	ldr	r2, [pc, #192]	@ (80023ac <HAL_DMA_Start_IT+0x488>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2e      	ldr	r2, [pc, #184]	@ (80023b0 <HAL_DMA_Start_IT+0x48c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02c      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <HAL_DMA_Start_IT+0x490>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d027      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2b      	ldr	r2, [pc, #172]	@ (80023b8 <HAL_DMA_Start_IT+0x494>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d022      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <HAL_DMA_Start_IT+0x498>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d01d      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a28      	ldr	r2, [pc, #160]	@ (80023c0 <HAL_DMA_Start_IT+0x49c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d018      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	@ (80023c4 <HAL_DMA_Start_IT+0x4a0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <HAL_DMA_Start_IT+0x4a4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a24      	ldr	r2, [pc, #144]	@ (80023cc <HAL_DMA_Start_IT+0x4a8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a22      	ldr	r2, [pc, #136]	@ (80023d0 <HAL_DMA_Start_IT+0x4ac>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_DMA_Start_IT+0x430>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	@ (80023d4 <HAL_DMA_Start_IT+0x4b0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d108      	bne.n	8002366 <HAL_DMA_Start_IT+0x442>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e012      	b.n	800238c <HAL_DMA_Start_IT+0x468>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e009      	b.n	800238c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800238c:	7dfb      	ldrb	r3, [r7, #23]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40020010 	.word	0x40020010
 800239c:	40020028 	.word	0x40020028
 80023a0:	40020040 	.word	0x40020040
 80023a4:	40020058 	.word	0x40020058
 80023a8:	40020070 	.word	0x40020070
 80023ac:	40020088 	.word	0x40020088
 80023b0:	400200a0 	.word	0x400200a0
 80023b4:	400200b8 	.word	0x400200b8
 80023b8:	40020410 	.word	0x40020410
 80023bc:	40020428 	.word	0x40020428
 80023c0:	40020440 	.word	0x40020440
 80023c4:	40020458 	.word	0x40020458
 80023c8:	40020470 	.word	0x40020470
 80023cc:	40020488 	.word	0x40020488
 80023d0:	400204a0 	.word	0x400204a0
 80023d4:	400204b8 	.word	0x400204b8
 80023d8:	58025408 	.word	0x58025408
 80023dc:	5802541c 	.word	0x5802541c
 80023e0:	58025430 	.word	0x58025430
 80023e4:	58025444 	.word	0x58025444
 80023e8:	58025458 	.word	0x58025458
 80023ec:	5802546c 	.word	0x5802546c
 80023f0:	58025480 	.word	0x58025480
 80023f4:	58025494 	.word	0x58025494

080023f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff f8a0 	bl	8001544 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e2dc      	b.n	80029ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2280      	movs	r2, #128	@ 0x80
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e2cd      	b.n	80029ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a76      	ldr	r2, [pc, #472]	@ (800260c <HAL_DMA_Abort+0x214>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d04a      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a74      	ldr	r2, [pc, #464]	@ (8002610 <HAL_DMA_Abort+0x218>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d045      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a73      	ldr	r2, [pc, #460]	@ (8002614 <HAL_DMA_Abort+0x21c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d040      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a71      	ldr	r2, [pc, #452]	@ (8002618 <HAL_DMA_Abort+0x220>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d03b      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a70      	ldr	r2, [pc, #448]	@ (800261c <HAL_DMA_Abort+0x224>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d036      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6e      	ldr	r2, [pc, #440]	@ (8002620 <HAL_DMA_Abort+0x228>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d031      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6d      	ldr	r2, [pc, #436]	@ (8002624 <HAL_DMA_Abort+0x22c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d02c      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6b      	ldr	r2, [pc, #428]	@ (8002628 <HAL_DMA_Abort+0x230>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d027      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6a      	ldr	r2, [pc, #424]	@ (800262c <HAL_DMA_Abort+0x234>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d022      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a68      	ldr	r2, [pc, #416]	@ (8002630 <HAL_DMA_Abort+0x238>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01d      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a67      	ldr	r2, [pc, #412]	@ (8002634 <HAL_DMA_Abort+0x23c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d018      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <HAL_DMA_Abort+0x240>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a64      	ldr	r2, [pc, #400]	@ (800263c <HAL_DMA_Abort+0x244>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a62      	ldr	r2, [pc, #392]	@ (8002640 <HAL_DMA_Abort+0x248>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a61      	ldr	r2, [pc, #388]	@ (8002644 <HAL_DMA_Abort+0x24c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_DMA_Abort+0xd6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a5f      	ldr	r2, [pc, #380]	@ (8002648 <HAL_DMA_Abort+0x250>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA_Abort+0xda>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_DMA_Abort+0xdc>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 021e 	bic.w	r2, r2, #30
 80024e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e00a      	b.n	8002516 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020e 	bic.w	r2, r2, #14
 800250e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a3c      	ldr	r2, [pc, #240]	@ (800260c <HAL_DMA_Abort+0x214>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d072      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a3a      	ldr	r2, [pc, #232]	@ (8002610 <HAL_DMA_Abort+0x218>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d06d      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a39      	ldr	r2, [pc, #228]	@ (8002614 <HAL_DMA_Abort+0x21c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d068      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a37      	ldr	r2, [pc, #220]	@ (8002618 <HAL_DMA_Abort+0x220>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d063      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a36      	ldr	r2, [pc, #216]	@ (800261c <HAL_DMA_Abort+0x224>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a34      	ldr	r2, [pc, #208]	@ (8002620 <HAL_DMA_Abort+0x228>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d059      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a33      	ldr	r2, [pc, #204]	@ (8002624 <HAL_DMA_Abort+0x22c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d054      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a31      	ldr	r2, [pc, #196]	@ (8002628 <HAL_DMA_Abort+0x230>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04f      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a30      	ldr	r2, [pc, #192]	@ (800262c <HAL_DMA_Abort+0x234>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2e      	ldr	r2, [pc, #184]	@ (8002630 <HAL_DMA_Abort+0x238>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2d      	ldr	r2, [pc, #180]	@ (8002634 <HAL_DMA_Abort+0x23c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2b      	ldr	r2, [pc, #172]	@ (8002638 <HAL_DMA_Abort+0x240>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2a      	ldr	r2, [pc, #168]	@ (800263c <HAL_DMA_Abort+0x244>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a28      	ldr	r2, [pc, #160]	@ (8002640 <HAL_DMA_Abort+0x248>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a27      	ldr	r2, [pc, #156]	@ (8002644 <HAL_DMA_Abort+0x24c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a25      	ldr	r2, [pc, #148]	@ (8002648 <HAL_DMA_Abort+0x250>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a24      	ldr	r2, [pc, #144]	@ (800264c <HAL_DMA_Abort+0x254>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a22      	ldr	r2, [pc, #136]	@ (8002650 <HAL_DMA_Abort+0x258>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	@ (8002654 <HAL_DMA_Abort+0x25c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <HAL_DMA_Abort+0x260>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <HAL_DMA_Abort+0x264>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002660 <HAL_DMA_Abort+0x268>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <HAL_DMA_Abort+0x26c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Abort+0x20e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	@ (8002668 <HAL_DMA_Abort+0x270>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d132      	bne.n	800266c <HAL_DMA_Abort+0x274>
 8002606:	2301      	movs	r3, #1
 8002608:	e031      	b.n	800266e <HAL_DMA_Abort+0x276>
 800260a:	bf00      	nop
 800260c:	40020010 	.word	0x40020010
 8002610:	40020028 	.word	0x40020028
 8002614:	40020040 	.word	0x40020040
 8002618:	40020058 	.word	0x40020058
 800261c:	40020070 	.word	0x40020070
 8002620:	40020088 	.word	0x40020088
 8002624:	400200a0 	.word	0x400200a0
 8002628:	400200b8 	.word	0x400200b8
 800262c:	40020410 	.word	0x40020410
 8002630:	40020428 	.word	0x40020428
 8002634:	40020440 	.word	0x40020440
 8002638:	40020458 	.word	0x40020458
 800263c:	40020470 	.word	0x40020470
 8002640:	40020488 	.word	0x40020488
 8002644:	400204a0 	.word	0x400204a0
 8002648:	400204b8 	.word	0x400204b8
 800264c:	58025408 	.word	0x58025408
 8002650:	5802541c 	.word	0x5802541c
 8002654:	58025430 	.word	0x58025430
 8002658:	58025444 	.word	0x58025444
 800265c:	58025458 	.word	0x58025458
 8002660:	5802546c 	.word	0x5802546c
 8002664:	58025480 	.word	0x58025480
 8002668:	58025494 	.word	0x58025494
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002680:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6d      	ldr	r2, [pc, #436]	@ (800283c <HAL_DMA_Abort+0x444>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04a      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6b      	ldr	r2, [pc, #428]	@ (8002840 <HAL_DMA_Abort+0x448>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d045      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6a      	ldr	r2, [pc, #424]	@ (8002844 <HAL_DMA_Abort+0x44c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d040      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	@ (8002848 <HAL_DMA_Abort+0x450>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d03b      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a67      	ldr	r2, [pc, #412]	@ (800284c <HAL_DMA_Abort+0x454>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d036      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a65      	ldr	r2, [pc, #404]	@ (8002850 <HAL_DMA_Abort+0x458>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a64      	ldr	r2, [pc, #400]	@ (8002854 <HAL_DMA_Abort+0x45c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d02c      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a62      	ldr	r2, [pc, #392]	@ (8002858 <HAL_DMA_Abort+0x460>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d027      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a61      	ldr	r2, [pc, #388]	@ (800285c <HAL_DMA_Abort+0x464>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002860 <HAL_DMA_Abort+0x468>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002864 <HAL_DMA_Abort+0x46c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002868 <HAL_DMA_Abort+0x470>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5b      	ldr	r2, [pc, #364]	@ (800286c <HAL_DMA_Abort+0x474>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a59      	ldr	r2, [pc, #356]	@ (8002870 <HAL_DMA_Abort+0x478>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a58      	ldr	r2, [pc, #352]	@ (8002874 <HAL_DMA_Abort+0x47c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMA_Abort+0x32a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a56      	ldr	r2, [pc, #344]	@ (8002878 <HAL_DMA_Abort+0x480>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <HAL_DMA_Abort+0x33c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e007      	b.n	8002744 <HAL_DMA_Abort+0x34c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002744:	e013      	b.n	800276e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002746:	f7fe fefd 	bl	8001544 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b05      	cmp	r3, #5
 8002752:	d90c      	bls.n	800276e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2203      	movs	r2, #3
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e12d      	b.n	80029ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2f      	ldr	r2, [pc, #188]	@ (800283c <HAL_DMA_Abort+0x444>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <HAL_DMA_Abort+0x422>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2d      	ldr	r2, [pc, #180]	@ (8002840 <HAL_DMA_Abort+0x448>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <HAL_DMA_Abort+0x422>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2c      	ldr	r2, [pc, #176]	@ (8002844 <HAL_DMA_Abort+0x44c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_Abort+0x422>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2a      	ldr	r2, [pc, #168]	@ (8002848 <HAL_DMA_Abort+0x450>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a29      	ldr	r2, [pc, #164]	@ (800284c <HAL_DMA_Abort+0x454>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a27      	ldr	r2, [pc, #156]	@ (8002850 <HAL_DMA_Abort+0x458>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a26      	ldr	r2, [pc, #152]	@ (8002854 <HAL_DMA_Abort+0x45c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a24      	ldr	r2, [pc, #144]	@ (8002858 <HAL_DMA_Abort+0x460>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a23      	ldr	r2, [pc, #140]	@ (800285c <HAL_DMA_Abort+0x464>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a21      	ldr	r2, [pc, #132]	@ (8002860 <HAL_DMA_Abort+0x468>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a20      	ldr	r2, [pc, #128]	@ (8002864 <HAL_DMA_Abort+0x46c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002868 <HAL_DMA_Abort+0x470>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_DMA_Abort+0x474>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Abort+0x422>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1b      	ldr	r2, [pc, #108]	@ (8002870 <HAL_DMA_Abort+0x478>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_Abort+0x422>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1a      	ldr	r2, [pc, #104]	@ (8002874 <HAL_DMA_Abort+0x47c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Abort+0x422>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <HAL_DMA_Abort+0x480>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_DMA_Abort+0x426>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_DMA_Abort+0x428>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02b      	beq.n	800287c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	223f      	movs	r2, #63	@ 0x3f
 8002834:	409a      	lsls	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	e02a      	b.n	8002892 <HAL_DMA_Abort+0x49a>
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a4f      	ldr	r2, [pc, #316]	@ (80029d4 <HAL_DMA_Abort+0x5dc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d072      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a4d      	ldr	r2, [pc, #308]	@ (80029d8 <HAL_DMA_Abort+0x5e0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d06d      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a4c      	ldr	r2, [pc, #304]	@ (80029dc <HAL_DMA_Abort+0x5e4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d068      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4a      	ldr	r2, [pc, #296]	@ (80029e0 <HAL_DMA_Abort+0x5e8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d063      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a49      	ldr	r2, [pc, #292]	@ (80029e4 <HAL_DMA_Abort+0x5ec>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d05e      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a47      	ldr	r2, [pc, #284]	@ (80029e8 <HAL_DMA_Abort+0x5f0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d059      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a46      	ldr	r2, [pc, #280]	@ (80029ec <HAL_DMA_Abort+0x5f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d054      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a44      	ldr	r2, [pc, #272]	@ (80029f0 <HAL_DMA_Abort+0x5f8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d04f      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a43      	ldr	r2, [pc, #268]	@ (80029f4 <HAL_DMA_Abort+0x5fc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d04a      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a41      	ldr	r2, [pc, #260]	@ (80029f8 <HAL_DMA_Abort+0x600>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d045      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a40      	ldr	r2, [pc, #256]	@ (80029fc <HAL_DMA_Abort+0x604>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d040      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3e      	ldr	r2, [pc, #248]	@ (8002a00 <HAL_DMA_Abort+0x608>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d03b      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a04 <HAL_DMA_Abort+0x60c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d036      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <HAL_DMA_Abort+0x610>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d031      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a3a      	ldr	r2, [pc, #232]	@ (8002a0c <HAL_DMA_Abort+0x614>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d02c      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a38      	ldr	r2, [pc, #224]	@ (8002a10 <HAL_DMA_Abort+0x618>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d027      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a37      	ldr	r2, [pc, #220]	@ (8002a14 <HAL_DMA_Abort+0x61c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a35      	ldr	r2, [pc, #212]	@ (8002a18 <HAL_DMA_Abort+0x620>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01d      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a34      	ldr	r2, [pc, #208]	@ (8002a1c <HAL_DMA_Abort+0x624>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d018      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a32      	ldr	r2, [pc, #200]	@ (8002a20 <HAL_DMA_Abort+0x628>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a31      	ldr	r2, [pc, #196]	@ (8002a24 <HAL_DMA_Abort+0x62c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00e      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2f      	ldr	r2, [pc, #188]	@ (8002a28 <HAL_DMA_Abort+0x630>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2e      	ldr	r2, [pc, #184]	@ (8002a2c <HAL_DMA_Abort+0x634>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_DMA_Abort+0x58a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a30 <HAL_DMA_Abort+0x638>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Abort+0x58e>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_DMA_Abort+0x590>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002994:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00c      	beq.n	80029b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40020010 	.word	0x40020010
 80029d8:	40020028 	.word	0x40020028
 80029dc:	40020040 	.word	0x40020040
 80029e0:	40020058 	.word	0x40020058
 80029e4:	40020070 	.word	0x40020070
 80029e8:	40020088 	.word	0x40020088
 80029ec:	400200a0 	.word	0x400200a0
 80029f0:	400200b8 	.word	0x400200b8
 80029f4:	40020410 	.word	0x40020410
 80029f8:	40020428 	.word	0x40020428
 80029fc:	40020440 	.word	0x40020440
 8002a00:	40020458 	.word	0x40020458
 8002a04:	40020470 	.word	0x40020470
 8002a08:	40020488 	.word	0x40020488
 8002a0c:	400204a0 	.word	0x400204a0
 8002a10:	400204b8 	.word	0x400204b8
 8002a14:	58025408 	.word	0x58025408
 8002a18:	5802541c 	.word	0x5802541c
 8002a1c:	58025430 	.word	0x58025430
 8002a20:	58025444 	.word	0x58025444
 8002a24:	58025458 	.word	0x58025458
 8002a28:	5802546c 	.word	0x5802546c
 8002a2c:	58025480 	.word	0x58025480
 8002a30:	58025494 	.word	0x58025494

08002a34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e237      	b.n	8002eb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e22c      	b.n	8002eb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1a0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d04a      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1a4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d045      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a59      	ldr	r2, [pc, #356]	@ (8002bdc <HAL_DMA_Abort_IT+0x1a8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d040      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a58      	ldr	r2, [pc, #352]	@ (8002be0 <HAL_DMA_Abort_IT+0x1ac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d03b      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a56      	ldr	r2, [pc, #344]	@ (8002be4 <HAL_DMA_Abort_IT+0x1b0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d036      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a55      	ldr	r2, [pc, #340]	@ (8002be8 <HAL_DMA_Abort_IT+0x1b4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d031      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a53      	ldr	r2, [pc, #332]	@ (8002bec <HAL_DMA_Abort_IT+0x1b8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d02c      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a52      	ldr	r2, [pc, #328]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d027      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a50      	ldr	r2, [pc, #320]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1c0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d022      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1c4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d01d      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a4d      	ldr	r2, [pc, #308]	@ (8002bfc <HAL_DMA_Abort_IT+0x1c8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d018      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a4c      	ldr	r2, [pc, #304]	@ (8002c00 <HAL_DMA_Abort_IT+0x1cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8002c04 <HAL_DMA_Abort_IT+0x1d0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00e      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a49      	ldr	r2, [pc, #292]	@ (8002c08 <HAL_DMA_Abort_IT+0x1d4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a47      	ldr	r2, [pc, #284]	@ (8002c0c <HAL_DMA_Abort_IT+0x1d8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d004      	beq.n	8002afc <HAL_DMA_Abort_IT+0xc8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a46      	ldr	r2, [pc, #280]	@ (8002c10 <HAL_DMA_Abort_IT+0x1dc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_DMA_Abort_IT+0xcc>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_DMA_Abort_IT+0xce>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8086 	beq.w	8002c14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1a0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04a      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1a4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d045      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2c      	ldr	r2, [pc, #176]	@ (8002bdc <HAL_DMA_Abort_IT+0x1a8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d040      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2b      	ldr	r2, [pc, #172]	@ (8002be0 <HAL_DMA_Abort_IT+0x1ac>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03b      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a29      	ldr	r2, [pc, #164]	@ (8002be4 <HAL_DMA_Abort_IT+0x1b0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d036      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a28      	ldr	r2, [pc, #160]	@ (8002be8 <HAL_DMA_Abort_IT+0x1b4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d031      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a26      	ldr	r2, [pc, #152]	@ (8002bec <HAL_DMA_Abort_IT+0x1b8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02c      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a25      	ldr	r2, [pc, #148]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1bc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d027      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a23      	ldr	r2, [pc, #140]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1c0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a22      	ldr	r2, [pc, #136]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1c4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01d      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a20      	ldr	r2, [pc, #128]	@ (8002bfc <HAL_DMA_Abort_IT+0x1c8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1f      	ldr	r2, [pc, #124]	@ (8002c00 <HAL_DMA_Abort_IT+0x1cc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <HAL_DMA_Abort_IT+0x1d0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_DMA_Abort_IT+0x1d4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c0c <HAL_DMA_Abort_IT+0x1d8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x17c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <HAL_DMA_Abort_IT+0x1dc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <HAL_DMA_Abort_IT+0x18e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e178      	b.n	8002eb4 <HAL_DMA_Abort_IT+0x480>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e16f      	b.n	8002eb4 <HAL_DMA_Abort_IT+0x480>
 8002bd4:	40020010 	.word	0x40020010
 8002bd8:	40020028 	.word	0x40020028
 8002bdc:	40020040 	.word	0x40020040
 8002be0:	40020058 	.word	0x40020058
 8002be4:	40020070 	.word	0x40020070
 8002be8:	40020088 	.word	0x40020088
 8002bec:	400200a0 	.word	0x400200a0
 8002bf0:	400200b8 	.word	0x400200b8
 8002bf4:	40020410 	.word	0x40020410
 8002bf8:	40020428 	.word	0x40020428
 8002bfc:	40020440 	.word	0x40020440
 8002c00:	40020458 	.word	0x40020458
 8002c04:	40020470 	.word	0x40020470
 8002c08:	40020488 	.word	0x40020488
 8002c0c:	400204a0 	.word	0x400204a0
 8002c10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 020e 	bic.w	r2, r2, #14
 8002c22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6c      	ldr	r2, [pc, #432]	@ (8002ddc <HAL_DMA_Abort_IT+0x3a8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d04a      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6b      	ldr	r2, [pc, #428]	@ (8002de0 <HAL_DMA_Abort_IT+0x3ac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d045      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a69      	ldr	r2, [pc, #420]	@ (8002de4 <HAL_DMA_Abort_IT+0x3b0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d040      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a68      	ldr	r2, [pc, #416]	@ (8002de8 <HAL_DMA_Abort_IT+0x3b4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d03b      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a66      	ldr	r2, [pc, #408]	@ (8002dec <HAL_DMA_Abort_IT+0x3b8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d036      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a65      	ldr	r2, [pc, #404]	@ (8002df0 <HAL_DMA_Abort_IT+0x3bc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d031      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a63      	ldr	r2, [pc, #396]	@ (8002df4 <HAL_DMA_Abort_IT+0x3c0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02c      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a62      	ldr	r2, [pc, #392]	@ (8002df8 <HAL_DMA_Abort_IT+0x3c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d027      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a60      	ldr	r2, [pc, #384]	@ (8002dfc <HAL_DMA_Abort_IT+0x3c8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d022      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5f      	ldr	r2, [pc, #380]	@ (8002e00 <HAL_DMA_Abort_IT+0x3cc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d01d      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e04 <HAL_DMA_Abort_IT+0x3d0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d018      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5c      	ldr	r2, [pc, #368]	@ (8002e08 <HAL_DMA_Abort_IT+0x3d4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e0c <HAL_DMA_Abort_IT+0x3d8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00e      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a59      	ldr	r2, [pc, #356]	@ (8002e10 <HAL_DMA_Abort_IT+0x3dc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d009      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_DMA_Abort_IT+0x3e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x290>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a56      	ldr	r2, [pc, #344]	@ (8002e18 <HAL_DMA_Abort_IT+0x3e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d108      	bne.n	8002cd6 <HAL_DMA_Abort_IT+0x2a2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e007      	b.n	8002ce6 <HAL_DMA_Abort_IT+0x2b2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a3c      	ldr	r2, [pc, #240]	@ (8002ddc <HAL_DMA_Abort_IT+0x3a8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d072      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3a      	ldr	r2, [pc, #232]	@ (8002de0 <HAL_DMA_Abort_IT+0x3ac>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d06d      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a39      	ldr	r2, [pc, #228]	@ (8002de4 <HAL_DMA_Abort_IT+0x3b0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d068      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a37      	ldr	r2, [pc, #220]	@ (8002de8 <HAL_DMA_Abort_IT+0x3b4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d063      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a36      	ldr	r2, [pc, #216]	@ (8002dec <HAL_DMA_Abort_IT+0x3b8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d05e      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a34      	ldr	r2, [pc, #208]	@ (8002df0 <HAL_DMA_Abort_IT+0x3bc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d059      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a33      	ldr	r2, [pc, #204]	@ (8002df4 <HAL_DMA_Abort_IT+0x3c0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d054      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a31      	ldr	r2, [pc, #196]	@ (8002df8 <HAL_DMA_Abort_IT+0x3c4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04f      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a30      	ldr	r2, [pc, #192]	@ (8002dfc <HAL_DMA_Abort_IT+0x3c8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04a      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2e      	ldr	r2, [pc, #184]	@ (8002e00 <HAL_DMA_Abort_IT+0x3cc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d045      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e04 <HAL_DMA_Abort_IT+0x3d0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d040      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2b      	ldr	r2, [pc, #172]	@ (8002e08 <HAL_DMA_Abort_IT+0x3d4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d03b      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2a      	ldr	r2, [pc, #168]	@ (8002e0c <HAL_DMA_Abort_IT+0x3d8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d036      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a28      	ldr	r2, [pc, #160]	@ (8002e10 <HAL_DMA_Abort_IT+0x3dc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a27      	ldr	r2, [pc, #156]	@ (8002e14 <HAL_DMA_Abort_IT+0x3e0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d02c      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a25      	ldr	r2, [pc, #148]	@ (8002e18 <HAL_DMA_Abort_IT+0x3e4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d027      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a24      	ldr	r2, [pc, #144]	@ (8002e1c <HAL_DMA_Abort_IT+0x3e8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a22      	ldr	r2, [pc, #136]	@ (8002e20 <HAL_DMA_Abort_IT+0x3ec>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	@ (8002e24 <HAL_DMA_Abort_IT+0x3f0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d018      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e28 <HAL_DMA_Abort_IT+0x3f4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e2c <HAL_DMA_Abort_IT+0x3f8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e30 <HAL_DMA_Abort_IT+0x3fc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e34 <HAL_DMA_Abort_IT+0x400>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x3a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	@ (8002e38 <HAL_DMA_Abort_IT+0x404>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d132      	bne.n	8002e3c <HAL_DMA_Abort_IT+0x408>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e031      	b.n	8002e3e <HAL_DMA_Abort_IT+0x40a>
 8002dda:	bf00      	nop
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
 8002e1c:	58025408 	.word	0x58025408
 8002e20:	5802541c 	.word	0x5802541c
 8002e24:	58025430 	.word	0x58025430
 8002e28:	58025444 	.word	0x58025444
 8002e2c:	58025458 	.word	0x58025458
 8002e30:	5802546c 	.word	0x5802546c
 8002e34:	58025480 	.word	0x58025480
 8002e38:	58025494 	.word	0x58025494
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d028      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2201      	movs	r2, #1
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop

08002ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	@ 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ecc:	4b67      	ldr	r3, [pc, #412]	@ (800306c <HAL_DMA_IRQHandler+0x1ac>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a67      	ldr	r2, [pc, #412]	@ (8003070 <HAL_DMA_IRQHandler+0x1b0>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a5f      	ldr	r2, [pc, #380]	@ (8003074 <HAL_DMA_IRQHandler+0x1b4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d04a      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a5d      	ldr	r2, [pc, #372]	@ (8003078 <HAL_DMA_IRQHandler+0x1b8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d045      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800307c <HAL_DMA_IRQHandler+0x1bc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d040      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5a      	ldr	r2, [pc, #360]	@ (8003080 <HAL_DMA_IRQHandler+0x1c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d03b      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a59      	ldr	r2, [pc, #356]	@ (8003084 <HAL_DMA_IRQHandler+0x1c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d036      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a57      	ldr	r2, [pc, #348]	@ (8003088 <HAL_DMA_IRQHandler+0x1c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d031      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a56      	ldr	r2, [pc, #344]	@ (800308c <HAL_DMA_IRQHandler+0x1cc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d02c      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a54      	ldr	r2, [pc, #336]	@ (8003090 <HAL_DMA_IRQHandler+0x1d0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d027      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a53      	ldr	r2, [pc, #332]	@ (8003094 <HAL_DMA_IRQHandler+0x1d4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d022      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a51      	ldr	r2, [pc, #324]	@ (8003098 <HAL_DMA_IRQHandler+0x1d8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01d      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a50      	ldr	r2, [pc, #320]	@ (800309c <HAL_DMA_IRQHandler+0x1dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d018      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a4e      	ldr	r2, [pc, #312]	@ (80030a0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a4d      	ldr	r2, [pc, #308]	@ (80030a4 <HAL_DMA_IRQHandler+0x1e4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4b      	ldr	r2, [pc, #300]	@ (80030a8 <HAL_DMA_IRQHandler+0x1e8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4a      	ldr	r2, [pc, #296]	@ (80030ac <HAL_DMA_IRQHandler+0x1ec>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a48      	ldr	r2, [pc, #288]	@ (80030b0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_DMA_IRQHandler+0xd6>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_DMA_IRQHandler+0xd8>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 842b 	beq.w	80037f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80a2 	beq.w	80030f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8003074 <HAL_DMA_IRQHandler+0x1b4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d04a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8003078 <HAL_DMA_IRQHandler+0x1b8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d045      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800307c <HAL_DMA_IRQHandler+0x1bc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d040      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003080 <HAL_DMA_IRQHandler+0x1c0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d03b      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	@ (8003084 <HAL_DMA_IRQHandler+0x1c4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d036      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a27      	ldr	r2, [pc, #156]	@ (8003088 <HAL_DMA_IRQHandler+0x1c8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d031      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	@ (800308c <HAL_DMA_IRQHandler+0x1cc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02c      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	@ (8003090 <HAL_DMA_IRQHandler+0x1d0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d027      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <HAL_DMA_IRQHandler+0x1d4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a21      	ldr	r2, [pc, #132]	@ (8003098 <HAL_DMA_IRQHandler+0x1d8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01d      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <HAL_DMA_IRQHandler+0x1dc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d018      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1e      	ldr	r2, [pc, #120]	@ (80030a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1c      	ldr	r2, [pc, #112]	@ (80030a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00e      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1b      	ldr	r2, [pc, #108]	@ (80030a8 <HAL_DMA_IRQHandler+0x1e8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <HAL_DMA_IRQHandler+0x1ec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a18      	ldr	r2, [pc, #96]	@ (80030b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d12f      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x1f4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e02e      	b.n	80030c8 <HAL_DMA_IRQHandler+0x208>
 800306a:	bf00      	nop
 800306c:	24000000 	.word	0x24000000
 8003070:	1b4e81b5 	.word	0x1b4e81b5
 8003074:	40020010 	.word	0x40020010
 8003078:	40020028 	.word	0x40020028
 800307c:	40020040 	.word	0x40020040
 8003080:	40020058 	.word	0x40020058
 8003084:	40020070 	.word	0x40020070
 8003088:	40020088 	.word	0x40020088
 800308c:	400200a0 	.word	0x400200a0
 8003090:	400200b8 	.word	0x400200b8
 8003094:	40020410 	.word	0x40020410
 8003098:	40020428 	.word	0x40020428
 800309c:	40020440 	.word	0x40020440
 80030a0:	40020458 	.word	0x40020458
 80030a4:	40020470 	.word	0x40020470
 80030a8:	40020488 	.word	0x40020488
 80030ac:	400204a0 	.word	0x400204a0
 80030b0:	400204b8 	.word	0x400204b8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2208      	movs	r2, #8
 80030e6:	409a      	lsls	r2, r3
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d06e      	beq.n	80031ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a69      	ldr	r2, [pc, #420]	@ (80032b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04a      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a67      	ldr	r2, [pc, #412]	@ (80032bc <HAL_DMA_IRQHandler+0x3fc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d045      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a66      	ldr	r2, [pc, #408]	@ (80032c0 <HAL_DMA_IRQHandler+0x400>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d040      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a64      	ldr	r2, [pc, #400]	@ (80032c4 <HAL_DMA_IRQHandler+0x404>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d03b      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a63      	ldr	r2, [pc, #396]	@ (80032c8 <HAL_DMA_IRQHandler+0x408>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d036      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a61      	ldr	r2, [pc, #388]	@ (80032cc <HAL_DMA_IRQHandler+0x40c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a60      	ldr	r2, [pc, #384]	@ (80032d0 <HAL_DMA_IRQHandler+0x410>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d02c      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5e      	ldr	r2, [pc, #376]	@ (80032d4 <HAL_DMA_IRQHandler+0x414>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d027      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5d      	ldr	r2, [pc, #372]	@ (80032d8 <HAL_DMA_IRQHandler+0x418>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5b      	ldr	r2, [pc, #364]	@ (80032dc <HAL_DMA_IRQHandler+0x41c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5a      	ldr	r2, [pc, #360]	@ (80032e0 <HAL_DMA_IRQHandler+0x420>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a58      	ldr	r2, [pc, #352]	@ (80032e4 <HAL_DMA_IRQHandler+0x424>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a57      	ldr	r2, [pc, #348]	@ (80032e8 <HAL_DMA_IRQHandler+0x428>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a55      	ldr	r2, [pc, #340]	@ (80032ec <HAL_DMA_IRQHandler+0x42c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a54      	ldr	r2, [pc, #336]	@ (80032f0 <HAL_DMA_IRQHandler+0x430>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a52      	ldr	r2, [pc, #328]	@ (80032f4 <HAL_DMA_IRQHandler+0x434>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10a      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x304>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e003      	b.n	80031cc <HAL_DMA_IRQHandler+0x30c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	f043 0202 	orr.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2204      	movs	r2, #4
 80031f6:	409a      	lsls	r2, r3
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 808f 	beq.w	8003320 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2c      	ldr	r2, [pc, #176]	@ (80032b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04a      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <HAL_DMA_IRQHandler+0x3fc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d045      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a29      	ldr	r2, [pc, #164]	@ (80032c0 <HAL_DMA_IRQHandler+0x400>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a27      	ldr	r2, [pc, #156]	@ (80032c4 <HAL_DMA_IRQHandler+0x404>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d03b      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a26      	ldr	r2, [pc, #152]	@ (80032c8 <HAL_DMA_IRQHandler+0x408>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d036      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a24      	ldr	r2, [pc, #144]	@ (80032cc <HAL_DMA_IRQHandler+0x40c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <HAL_DMA_IRQHandler+0x410>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d02c      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a21      	ldr	r2, [pc, #132]	@ (80032d4 <HAL_DMA_IRQHandler+0x414>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a20      	ldr	r2, [pc, #128]	@ (80032d8 <HAL_DMA_IRQHandler+0x418>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_DMA_IRQHandler+0x41c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1d      	ldr	r2, [pc, #116]	@ (80032e0 <HAL_DMA_IRQHandler+0x420>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <HAL_DMA_IRQHandler+0x424>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1a      	ldr	r2, [pc, #104]	@ (80032e8 <HAL_DMA_IRQHandler+0x428>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <HAL_DMA_IRQHandler+0x42c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a17      	ldr	r2, [pc, #92]	@ (80032f0 <HAL_DMA_IRQHandler+0x430>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a15      	ldr	r2, [pc, #84]	@ (80032f4 <HAL_DMA_IRQHandler+0x434>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d12a      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x438>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e023      	b.n	8003300 <HAL_DMA_IRQHandler+0x440>
 80032b8:	40020010 	.word	0x40020010
 80032bc:	40020028 	.word	0x40020028
 80032c0:	40020040 	.word	0x40020040
 80032c4:	40020058 	.word	0x40020058
 80032c8:	40020070 	.word	0x40020070
 80032cc:	40020088 	.word	0x40020088
 80032d0:	400200a0 	.word	0x400200a0
 80032d4:	400200b8 	.word	0x400200b8
 80032d8:	40020410 	.word	0x40020410
 80032dc:	40020428 	.word	0x40020428
 80032e0:	40020440 	.word	0x40020440
 80032e4:	40020458 	.word	0x40020458
 80032e8:	40020470 	.word	0x40020470
 80032ec:	40020488 	.word	0x40020488
 80032f0:	400204a0 	.word	0x400204a0
 80032f4:	400204b8 	.word	0x400204b8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2204      	movs	r2, #4
 800330e:	409a      	lsls	r2, r3
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2210      	movs	r2, #16
 800332a:	409a      	lsls	r2, r3
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a6 	beq.w	8003482 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a85      	ldr	r2, [pc, #532]	@ (8003550 <HAL_DMA_IRQHandler+0x690>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d04a      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a83      	ldr	r2, [pc, #524]	@ (8003554 <HAL_DMA_IRQHandler+0x694>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d045      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a82      	ldr	r2, [pc, #520]	@ (8003558 <HAL_DMA_IRQHandler+0x698>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d040      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a80      	ldr	r2, [pc, #512]	@ (800355c <HAL_DMA_IRQHandler+0x69c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d03b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7f      	ldr	r2, [pc, #508]	@ (8003560 <HAL_DMA_IRQHandler+0x6a0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d036      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7d      	ldr	r2, [pc, #500]	@ (8003564 <HAL_DMA_IRQHandler+0x6a4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7c      	ldr	r2, [pc, #496]	@ (8003568 <HAL_DMA_IRQHandler+0x6a8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d02c      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7a      	ldr	r2, [pc, #488]	@ (800356c <HAL_DMA_IRQHandler+0x6ac>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d027      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a79      	ldr	r2, [pc, #484]	@ (8003570 <HAL_DMA_IRQHandler+0x6b0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a77      	ldr	r2, [pc, #476]	@ (8003574 <HAL_DMA_IRQHandler+0x6b4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01d      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a76      	ldr	r2, [pc, #472]	@ (8003578 <HAL_DMA_IRQHandler+0x6b8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a74      	ldr	r2, [pc, #464]	@ (800357c <HAL_DMA_IRQHandler+0x6bc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a73      	ldr	r2, [pc, #460]	@ (8003580 <HAL_DMA_IRQHandler+0x6c0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a71      	ldr	r2, [pc, #452]	@ (8003584 <HAL_DMA_IRQHandler+0x6c4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a70      	ldr	r2, [pc, #448]	@ (8003588 <HAL_DMA_IRQHandler+0x6c8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	@ (800358c <HAL_DMA_IRQHandler+0x6cc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10a      	bne.n	80033ec <HAL_DMA_IRQHandler+0x52c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e009      	b.n	8003400 <HAL_DMA_IRQHandler+0x540>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03e      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2210      	movs	r2, #16
 800340e:	409a      	lsls	r2, r3
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d024      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e01f      	b.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01b      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e016      	b.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2220      	movs	r2, #32
 800348c:	409a      	lsls	r2, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8110 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2c      	ldr	r2, [pc, #176]	@ (8003550 <HAL_DMA_IRQHandler+0x690>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d04a      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003554 <HAL_DMA_IRQHandler+0x694>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d045      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a29      	ldr	r2, [pc, #164]	@ (8003558 <HAL_DMA_IRQHandler+0x698>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d040      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a28      	ldr	r2, [pc, #160]	@ (800355c <HAL_DMA_IRQHandler+0x69c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d03b      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a26      	ldr	r2, [pc, #152]	@ (8003560 <HAL_DMA_IRQHandler+0x6a0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d036      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a25      	ldr	r2, [pc, #148]	@ (8003564 <HAL_DMA_IRQHandler+0x6a4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d031      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	@ (8003568 <HAL_DMA_IRQHandler+0x6a8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d02c      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a22      	ldr	r2, [pc, #136]	@ (800356c <HAL_DMA_IRQHandler+0x6ac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d027      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <HAL_DMA_IRQHandler+0x6b0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003574 <HAL_DMA_IRQHandler+0x6b4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	@ (8003578 <HAL_DMA_IRQHandler+0x6b8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1c      	ldr	r2, [pc, #112]	@ (800357c <HAL_DMA_IRQHandler+0x6bc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <HAL_DMA_IRQHandler+0x6c0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a19      	ldr	r2, [pc, #100]	@ (8003584 <HAL_DMA_IRQHandler+0x6c4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <HAL_DMA_IRQHandler+0x6c8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a16      	ldr	r2, [pc, #88]	@ (800358c <HAL_DMA_IRQHandler+0x6cc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d12b      	bne.n	8003590 <HAL_DMA_IRQHandler+0x6d0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e02a      	b.n	80035a4 <HAL_DMA_IRQHandler+0x6e4>
 800354e:	bf00      	nop
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8087 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2220      	movs	r2, #32
 80035b4:	409a      	lsls	r2, r3
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d139      	bne.n	800363a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0216 	bic.w	r2, r2, #22
 80035d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <HAL_DMA_IRQHandler+0x736>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0208 	bic.w	r2, r2, #8
 8003604:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	223f      	movs	r2, #63	@ 0x3f
 8003610:	409a      	lsls	r2, r3
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 834a 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
          }
          return;
 8003638:	e344      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d018      	beq.n	800367a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d108      	bne.n	8003668 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02c      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
 8003666:	e027      	b.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e01e      	b.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10f      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0210 	bic.w	r2, r2, #16
 8003696:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8306 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8088 	beq.w	80037e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2204      	movs	r2, #4
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7a      	ldr	r2, [pc, #488]	@ (80038c8 <HAL_DMA_IRQHandler+0xa08>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d04a      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a79      	ldr	r2, [pc, #484]	@ (80038cc <HAL_DMA_IRQHandler+0xa0c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d045      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a77      	ldr	r2, [pc, #476]	@ (80038d0 <HAL_DMA_IRQHandler+0xa10>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d040      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a76      	ldr	r2, [pc, #472]	@ (80038d4 <HAL_DMA_IRQHandler+0xa14>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d03b      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a74      	ldr	r2, [pc, #464]	@ (80038d8 <HAL_DMA_IRQHandler+0xa18>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d036      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a73      	ldr	r2, [pc, #460]	@ (80038dc <HAL_DMA_IRQHandler+0xa1c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d031      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a71      	ldr	r2, [pc, #452]	@ (80038e0 <HAL_DMA_IRQHandler+0xa20>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02c      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a70      	ldr	r2, [pc, #448]	@ (80038e4 <HAL_DMA_IRQHandler+0xa24>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d027      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6e      	ldr	r2, [pc, #440]	@ (80038e8 <HAL_DMA_IRQHandler+0xa28>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d022      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6d      	ldr	r2, [pc, #436]	@ (80038ec <HAL_DMA_IRQHandler+0xa2c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d01d      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6b      	ldr	r2, [pc, #428]	@ (80038f0 <HAL_DMA_IRQHandler+0xa30>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6a      	ldr	r2, [pc, #424]	@ (80038f4 <HAL_DMA_IRQHandler+0xa34>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a68      	ldr	r2, [pc, #416]	@ (80038f8 <HAL_DMA_IRQHandler+0xa38>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a67      	ldr	r2, [pc, #412]	@ (80038fc <HAL_DMA_IRQHandler+0xa3c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a65      	ldr	r2, [pc, #404]	@ (8003900 <HAL_DMA_IRQHandler+0xa40>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a64      	ldr	r2, [pc, #400]	@ (8003904 <HAL_DMA_IRQHandler+0xa44>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d108      	bne.n	800378a <HAL_DMA_IRQHandler+0x8ca>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e007      	b.n	800379a <HAL_DMA_IRQHandler+0x8da>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d307      	bcc.n	80037b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f2      	bne.n	800379a <HAL_DMA_IRQHandler+0x8da>
 80037b4:	e000      	b.n	80037b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80037ce:	e003      	b.n	80037d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8272 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e26c      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a43      	ldr	r2, [pc, #268]	@ (8003908 <HAL_DMA_IRQHandler+0xa48>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a42      	ldr	r2, [pc, #264]	@ (800390c <HAL_DMA_IRQHandler+0xa4c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a40      	ldr	r2, [pc, #256]	@ (8003910 <HAL_DMA_IRQHandler+0xa50>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3f      	ldr	r2, [pc, #252]	@ (8003914 <HAL_DMA_IRQHandler+0xa54>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3d      	ldr	r2, [pc, #244]	@ (8003918 <HAL_DMA_IRQHandler+0xa58>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3c      	ldr	r2, [pc, #240]	@ (800391c <HAL_DMA_IRQHandler+0xa5c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3a      	ldr	r2, [pc, #232]	@ (8003920 <HAL_DMA_IRQHandler+0xa60>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a39      	ldr	r2, [pc, #228]	@ (8003924 <HAL_DMA_IRQHandler+0xa64>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_DMA_IRQHandler+0x988>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_DMA_IRQHandler+0x98a>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 823f 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2204      	movs	r2, #4
 8003862:	409a      	lsls	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80cd 	beq.w	8003a08 <HAL_DMA_IRQHandler+0xb48>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80c7 	beq.w	8003a08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2204      	movs	r2, #4
 8003884:	409a      	lsls	r2, r3
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d049      	beq.n	8003928 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8210 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b0:	e20a      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8206 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c4:	e200      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe08>
 80038c6:	bf00      	nop
 80038c8:	40020010 	.word	0x40020010
 80038cc:	40020028 	.word	0x40020028
 80038d0:	40020040 	.word	0x40020040
 80038d4:	40020058 	.word	0x40020058
 80038d8:	40020070 	.word	0x40020070
 80038dc:	40020088 	.word	0x40020088
 80038e0:	400200a0 	.word	0x400200a0
 80038e4:	400200b8 	.word	0x400200b8
 80038e8:	40020410 	.word	0x40020410
 80038ec:	40020428 	.word	0x40020428
 80038f0:	40020440 	.word	0x40020440
 80038f4:	40020458 	.word	0x40020458
 80038f8:	40020470 	.word	0x40020470
 80038fc:	40020488 	.word	0x40020488
 8003900:	400204a0 	.word	0x400204a0
 8003904:	400204b8 	.word	0x400204b8
 8003908:	58025408 	.word	0x58025408
 800390c:	5802541c 	.word	0x5802541c
 8003910:	58025430 	.word	0x58025430
 8003914:	58025444 	.word	0x58025444
 8003918:	58025458 	.word	0x58025458
 800391c:	5802546c 	.word	0x5802546c
 8003920:	58025480 	.word	0x58025480
 8003924:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d160      	bne.n	80039f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7f      	ldr	r2, [pc, #508]	@ (8003b34 <HAL_DMA_IRQHandler+0xc74>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d04a      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a7d      	ldr	r2, [pc, #500]	@ (8003b38 <HAL_DMA_IRQHandler+0xc78>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d045      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b3c <HAL_DMA_IRQHandler+0xc7c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d040      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7a      	ldr	r2, [pc, #488]	@ (8003b40 <HAL_DMA_IRQHandler+0xc80>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d03b      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a79      	ldr	r2, [pc, #484]	@ (8003b44 <HAL_DMA_IRQHandler+0xc84>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d036      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a77      	ldr	r2, [pc, #476]	@ (8003b48 <HAL_DMA_IRQHandler+0xc88>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d031      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a76      	ldr	r2, [pc, #472]	@ (8003b4c <HAL_DMA_IRQHandler+0xc8c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d02c      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a74      	ldr	r2, [pc, #464]	@ (8003b50 <HAL_DMA_IRQHandler+0xc90>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d027      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a73      	ldr	r2, [pc, #460]	@ (8003b54 <HAL_DMA_IRQHandler+0xc94>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a71      	ldr	r2, [pc, #452]	@ (8003b58 <HAL_DMA_IRQHandler+0xc98>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01d      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a70      	ldr	r2, [pc, #448]	@ (8003b5c <HAL_DMA_IRQHandler+0xc9c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b60 <HAL_DMA_IRQHandler+0xca0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003b64 <HAL_DMA_IRQHandler+0xca4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003b68 <HAL_DMA_IRQHandler+0xca8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6a      	ldr	r2, [pc, #424]	@ (8003b6c <HAL_DMA_IRQHandler+0xcac>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a68      	ldr	r2, [pc, #416]	@ (8003b70 <HAL_DMA_IRQHandler+0xcb0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <HAL_DMA_IRQHandler+0xb24>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0208 	bic.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e007      	b.n	80039f4 <HAL_DMA_IRQHandler+0xb34>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8165 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a06:	e15f      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2202      	movs	r2, #2
 8003a12:	409a      	lsls	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80c5 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xce8>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80bf 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2202      	movs	r2, #2
 8003a34:	409a      	lsls	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d018      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 813a 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a60:	e134      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8130 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a74:	e12a      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f040 8089 	bne.w	8003b94 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2b      	ldr	r2, [pc, #172]	@ (8003b34 <HAL_DMA_IRQHandler+0xc74>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d04a      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a29      	ldr	r2, [pc, #164]	@ (8003b38 <HAL_DMA_IRQHandler+0xc78>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d045      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a28      	ldr	r2, [pc, #160]	@ (8003b3c <HAL_DMA_IRQHandler+0xc7c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d040      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a26      	ldr	r2, [pc, #152]	@ (8003b40 <HAL_DMA_IRQHandler+0xc80>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d03b      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a25      	ldr	r2, [pc, #148]	@ (8003b44 <HAL_DMA_IRQHandler+0xc84>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d036      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a23      	ldr	r2, [pc, #140]	@ (8003b48 <HAL_DMA_IRQHandler+0xc88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d031      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a22      	ldr	r2, [pc, #136]	@ (8003b4c <HAL_DMA_IRQHandler+0xc8c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d02c      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a20      	ldr	r2, [pc, #128]	@ (8003b50 <HAL_DMA_IRQHandler+0xc90>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d027      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <HAL_DMA_IRQHandler+0xc94>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b58 <HAL_DMA_IRQHandler+0xc98>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01d      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <HAL_DMA_IRQHandler+0xc9c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b60 <HAL_DMA_IRQHandler+0xca0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a19      	ldr	r2, [pc, #100]	@ (8003b64 <HAL_DMA_IRQHandler+0xca4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <HAL_DMA_IRQHandler+0xca8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a16      	ldr	r2, [pc, #88]	@ (8003b6c <HAL_DMA_IRQHandler+0xcac>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xc62>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a14      	ldr	r2, [pc, #80]	@ (8003b70 <HAL_DMA_IRQHandler+0xcb0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d128      	bne.n	8003b74 <HAL_DMA_IRQHandler+0xcb4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0214 	bic.w	r2, r2, #20
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e027      	b.n	8003b84 <HAL_DMA_IRQHandler+0xcc4>
 8003b34:	40020010 	.word	0x40020010
 8003b38:	40020028 	.word	0x40020028
 8003b3c:	40020040 	.word	0x40020040
 8003b40:	40020058 	.word	0x40020058
 8003b44:	40020070 	.word	0x40020070
 8003b48:	40020088 	.word	0x40020088
 8003b4c:	400200a0 	.word	0x400200a0
 8003b50:	400200b8 	.word	0x400200b8
 8003b54:	40020410 	.word	0x40020410
 8003b58:	40020428 	.word	0x40020428
 8003b5c:	40020440 	.word	0x40020440
 8003b60:	40020458 	.word	0x40020458
 8003b64:	40020470 	.word	0x40020470
 8003b68:	40020488 	.word	0x40020488
 8003b6c:	400204a0 	.word	0x400204a0
 8003b70:	400204b8 	.word	0x400204b8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 020a 	bic.w	r2, r2, #10
 8003b82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8097 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba6:	e091      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8088 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8082 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a41      	ldr	r2, [pc, #260]	@ (8003cd4 <HAL_DMA_IRQHandler+0xe14>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d04a      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd8 <HAL_DMA_IRQHandler+0xe18>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d045      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cdc <HAL_DMA_IRQHandler+0xe1c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d040      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce0 <HAL_DMA_IRQHandler+0xe20>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d03b      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce4 <HAL_DMA_IRQHandler+0xe24>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d036      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a39      	ldr	r2, [pc, #228]	@ (8003ce8 <HAL_DMA_IRQHandler+0xe28>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d031      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a38      	ldr	r2, [pc, #224]	@ (8003cec <HAL_DMA_IRQHandler+0xe2c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d02c      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a36      	ldr	r2, [pc, #216]	@ (8003cf0 <HAL_DMA_IRQHandler+0xe30>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d027      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a35      	ldr	r2, [pc, #212]	@ (8003cf4 <HAL_DMA_IRQHandler+0xe34>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a33      	ldr	r2, [pc, #204]	@ (8003cf8 <HAL_DMA_IRQHandler+0xe38>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01d      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a32      	ldr	r2, [pc, #200]	@ (8003cfc <HAL_DMA_IRQHandler+0xe3c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a30      	ldr	r2, [pc, #192]	@ (8003d00 <HAL_DMA_IRQHandler+0xe40>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2f      	ldr	r2, [pc, #188]	@ (8003d04 <HAL_DMA_IRQHandler+0xe44>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <HAL_DMA_IRQHandler+0xe48>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d0c <HAL_DMA_IRQHandler+0xe4c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	@ (8003d10 <HAL_DMA_IRQHandler+0xe50>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <HAL_DMA_IRQHandler+0xdbc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 021c 	bic.w	r2, r2, #28
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e007      	b.n	8003c8c <HAL_DMA_IRQHandler+0xdcc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 020e 	bic.w	r2, r2, #14
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2201      	movs	r2, #1
 8003c96:	409a      	lsls	r2, r3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e004      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003cc4:	bf00      	nop
 8003cc6:	e002      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ccc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cce:	3728      	adds	r7, #40	@ 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40020010 	.word	0x40020010
 8003cd8:	40020028 	.word	0x40020028
 8003cdc:	40020040 	.word	0x40020040
 8003ce0:	40020058 	.word	0x40020058
 8003ce4:	40020070 	.word	0x40020070
 8003ce8:	40020088 	.word	0x40020088
 8003cec:	400200a0 	.word	0x400200a0
 8003cf0:	400200b8 	.word	0x400200b8
 8003cf4:	40020410 	.word	0x40020410
 8003cf8:	40020428 	.word	0x40020428
 8003cfc:	40020440 	.word	0x40020440
 8003d00:	40020458 	.word	0x40020458
 8003d04:	40020470 	.word	0x40020470
 8003d08:	40020488 	.word	0x40020488
 8003d0c:	400204a0 	.word	0x400204a0
 8003d10:	400204b8 	.word	0x400204b8

08003d14 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7f      	ldr	r2, [pc, #508]	@ (8003f48 <DMA_SetConfig+0x21c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d072      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7d      	ldr	r2, [pc, #500]	@ (8003f4c <DMA_SetConfig+0x220>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d06d      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f50 <DMA_SetConfig+0x224>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d068      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a7a      	ldr	r2, [pc, #488]	@ (8003f54 <DMA_SetConfig+0x228>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d063      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a79      	ldr	r2, [pc, #484]	@ (8003f58 <DMA_SetConfig+0x22c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d05e      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a77      	ldr	r2, [pc, #476]	@ (8003f5c <DMA_SetConfig+0x230>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d059      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a76      	ldr	r2, [pc, #472]	@ (8003f60 <DMA_SetConfig+0x234>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d054      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a74      	ldr	r2, [pc, #464]	@ (8003f64 <DMA_SetConfig+0x238>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04f      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a73      	ldr	r2, [pc, #460]	@ (8003f68 <DMA_SetConfig+0x23c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d04a      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a71      	ldr	r2, [pc, #452]	@ (8003f6c <DMA_SetConfig+0x240>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d045      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a70      	ldr	r2, [pc, #448]	@ (8003f70 <DMA_SetConfig+0x244>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d040      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f74 <DMA_SetConfig+0x248>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d03b      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6d      	ldr	r2, [pc, #436]	@ (8003f78 <DMA_SetConfig+0x24c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d036      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8003f7c <DMA_SetConfig+0x250>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d031      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a6a      	ldr	r2, [pc, #424]	@ (8003f80 <DMA_SetConfig+0x254>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d02c      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a68      	ldr	r2, [pc, #416]	@ (8003f84 <DMA_SetConfig+0x258>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d027      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a67      	ldr	r2, [pc, #412]	@ (8003f88 <DMA_SetConfig+0x25c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d022      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a65      	ldr	r2, [pc, #404]	@ (8003f8c <DMA_SetConfig+0x260>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01d      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a64      	ldr	r2, [pc, #400]	@ (8003f90 <DMA_SetConfig+0x264>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a62      	ldr	r2, [pc, #392]	@ (8003f94 <DMA_SetConfig+0x268>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a61      	ldr	r2, [pc, #388]	@ (8003f98 <DMA_SetConfig+0x26c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5f      	ldr	r2, [pc, #380]	@ (8003f9c <DMA_SetConfig+0x270>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa0 <DMA_SetConfig+0x274>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <DMA_SetConfig+0x10a>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a5c      	ldr	r2, [pc, #368]	@ (8003fa4 <DMA_SetConfig+0x278>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <DMA_SetConfig+0x10e>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <DMA_SetConfig+0x110>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a39      	ldr	r2, [pc, #228]	@ (8003f48 <DMA_SetConfig+0x21c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d04a      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a38      	ldr	r2, [pc, #224]	@ (8003f4c <DMA_SetConfig+0x220>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d045      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a36      	ldr	r2, [pc, #216]	@ (8003f50 <DMA_SetConfig+0x224>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d040      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a35      	ldr	r2, [pc, #212]	@ (8003f54 <DMA_SetConfig+0x228>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d03b      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a33      	ldr	r2, [pc, #204]	@ (8003f58 <DMA_SetConfig+0x22c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d036      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a32      	ldr	r2, [pc, #200]	@ (8003f5c <DMA_SetConfig+0x230>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d031      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a30      	ldr	r2, [pc, #192]	@ (8003f60 <DMA_SetConfig+0x234>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02c      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8003f64 <DMA_SetConfig+0x238>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d027      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f68 <DMA_SetConfig+0x23c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	@ (8003f6c <DMA_SetConfig+0x240>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d01d      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f70 <DMA_SetConfig+0x244>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a29      	ldr	r2, [pc, #164]	@ (8003f74 <DMA_SetConfig+0x248>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a27      	ldr	r2, [pc, #156]	@ (8003f78 <DMA_SetConfig+0x24c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a26      	ldr	r2, [pc, #152]	@ (8003f7c <DMA_SetConfig+0x250>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a24      	ldr	r2, [pc, #144]	@ (8003f80 <DMA_SetConfig+0x254>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <DMA_SetConfig+0x1d0>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a23      	ldr	r2, [pc, #140]	@ (8003f84 <DMA_SetConfig+0x258>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <DMA_SetConfig+0x1d4>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <DMA_SetConfig+0x1d6>
 8003f00:	2300      	movs	r3, #0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d059      	beq.n	8003fba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	223f      	movs	r2, #63	@ 0x3f
 8003f10:	409a      	lsls	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d138      	bne.n	8003fa8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f46:	e086      	b.n	8004056 <DMA_SetConfig+0x32a>
 8003f48:	40020010 	.word	0x40020010
 8003f4c:	40020028 	.word	0x40020028
 8003f50:	40020040 	.word	0x40020040
 8003f54:	40020058 	.word	0x40020058
 8003f58:	40020070 	.word	0x40020070
 8003f5c:	40020088 	.word	0x40020088
 8003f60:	400200a0 	.word	0x400200a0
 8003f64:	400200b8 	.word	0x400200b8
 8003f68:	40020410 	.word	0x40020410
 8003f6c:	40020428 	.word	0x40020428
 8003f70:	40020440 	.word	0x40020440
 8003f74:	40020458 	.word	0x40020458
 8003f78:	40020470 	.word	0x40020470
 8003f7c:	40020488 	.word	0x40020488
 8003f80:	400204a0 	.word	0x400204a0
 8003f84:	400204b8 	.word	0x400204b8
 8003f88:	58025408 	.word	0x58025408
 8003f8c:	5802541c 	.word	0x5802541c
 8003f90:	58025430 	.word	0x58025430
 8003f94:	58025444 	.word	0x58025444
 8003f98:	58025458 	.word	0x58025458
 8003f9c:	5802546c 	.word	0x5802546c
 8003fa0:	58025480 	.word	0x58025480
 8003fa4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	60da      	str	r2, [r3, #12]
}
 8003fb8:	e04d      	b.n	8004056 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <DMA_SetConfig+0x338>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <DMA_SetConfig+0x2de>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a27      	ldr	r2, [pc, #156]	@ (8004068 <DMA_SetConfig+0x33c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <DMA_SetConfig+0x2de>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	@ (800406c <DMA_SetConfig+0x340>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <DMA_SetConfig+0x2de>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a24      	ldr	r2, [pc, #144]	@ (8004070 <DMA_SetConfig+0x344>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <DMA_SetConfig+0x2de>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a23      	ldr	r2, [pc, #140]	@ (8004074 <DMA_SetConfig+0x348>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <DMA_SetConfig+0x2de>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <DMA_SetConfig+0x34c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <DMA_SetConfig+0x2de>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a20      	ldr	r2, [pc, #128]	@ (800407c <DMA_SetConfig+0x350>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <DMA_SetConfig+0x2de>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1e      	ldr	r2, [pc, #120]	@ (8004080 <DMA_SetConfig+0x354>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <DMA_SetConfig+0x2e2>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <DMA_SetConfig+0x2e4>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	2201      	movs	r2, #1
 800401e:	409a      	lsls	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	d108      	bne.n	8004046 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	60da      	str	r2, [r3, #12]
}
 8004044:	e007      	b.n	8004056 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	60da      	str	r2, [r3, #12]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	58025408 	.word	0x58025408
 8004068:	5802541c 	.word	0x5802541c
 800406c:	58025430 	.word	0x58025430
 8004070:	58025444 	.word	0x58025444
 8004074:	58025458 	.word	0x58025458
 8004078:	5802546c 	.word	0x5802546c
 800407c:	58025480 	.word	0x58025480
 8004080:	58025494 	.word	0x58025494

08004084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a42      	ldr	r2, [pc, #264]	@ (800419c <DMA_CalcBaseAndBitshift+0x118>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d04a      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a41      	ldr	r2, [pc, #260]	@ (80041a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d045      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a3f      	ldr	r2, [pc, #252]	@ (80041a4 <DMA_CalcBaseAndBitshift+0x120>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d040      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a3e      	ldr	r2, [pc, #248]	@ (80041a8 <DMA_CalcBaseAndBitshift+0x124>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d03b      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a3c      	ldr	r2, [pc, #240]	@ (80041ac <DMA_CalcBaseAndBitshift+0x128>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d036      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a3b      	ldr	r2, [pc, #236]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d031      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a39      	ldr	r2, [pc, #228]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x130>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d02c      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a38      	ldr	r2, [pc, #224]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x134>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d027      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a36      	ldr	r2, [pc, #216]	@ (80041bc <DMA_CalcBaseAndBitshift+0x138>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d022      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a35      	ldr	r2, [pc, #212]	@ (80041c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d01d      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a33      	ldr	r2, [pc, #204]	@ (80041c4 <DMA_CalcBaseAndBitshift+0x140>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a32      	ldr	r2, [pc, #200]	@ (80041c8 <DMA_CalcBaseAndBitshift+0x144>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a30      	ldr	r2, [pc, #192]	@ (80041cc <DMA_CalcBaseAndBitshift+0x148>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2f      	ldr	r2, [pc, #188]	@ (80041d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a2d      	ldr	r2, [pc, #180]	@ (80041d4 <DMA_CalcBaseAndBitshift+0x150>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <DMA_CalcBaseAndBitshift+0xa8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a2c      	ldr	r2, [pc, #176]	@ (80041d8 <DMA_CalcBaseAndBitshift+0x154>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <DMA_CalcBaseAndBitshift+0xac>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <DMA_CalcBaseAndBitshift+0xae>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d024      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	3b10      	subs	r3, #16
 800413e:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <DMA_CalcBaseAndBitshift+0x158>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	4a24      	ldr	r2, [pc, #144]	@ (80041e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d908      	bls.n	8004170 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004166:	4013      	ands	r3, r2
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	659a      	str	r2, [r3, #88]	@ 0x58
 800416e:	e00d      	b.n	800418c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6593      	str	r3, [r2, #88]	@ 0x58
 800417e:	e005      	b.n	800418c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40020010 	.word	0x40020010
 80041a0:	40020028 	.word	0x40020028
 80041a4:	40020040 	.word	0x40020040
 80041a8:	40020058 	.word	0x40020058
 80041ac:	40020070 	.word	0x40020070
 80041b0:	40020088 	.word	0x40020088
 80041b4:	400200a0 	.word	0x400200a0
 80041b8:	400200b8 	.word	0x400200b8
 80041bc:	40020410 	.word	0x40020410
 80041c0:	40020428 	.word	0x40020428
 80041c4:	40020440 	.word	0x40020440
 80041c8:	40020458 	.word	0x40020458
 80041cc:	40020470 	.word	0x40020470
 80041d0:	40020488 	.word	0x40020488
 80041d4:	400204a0 	.word	0x400204a0
 80041d8:	400204b8 	.word	0x400204b8
 80041dc:	aaaaaaab 	.word	0xaaaaaaab
 80041e0:	08011bb8 	.word	0x08011bb8
 80041e4:	fffffc00 	.word	0xfffffc00

080041e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d120      	bne.n	800423e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004200:	2b03      	cmp	r3, #3
 8004202:	d858      	bhi.n	80042b6 <DMA_CheckFifoParam+0xce>
 8004204:	a201      	add	r2, pc, #4	@ (adr r2, 800420c <DMA_CheckFifoParam+0x24>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	0800421d 	.word	0x0800421d
 8004210:	0800422f 	.word	0x0800422f
 8004214:	0800421d 	.word	0x0800421d
 8004218:	080042b7 	.word	0x080042b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d048      	beq.n	80042ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800422c:	e045      	b.n	80042ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004236:	d142      	bne.n	80042be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800423c:	e03f      	b.n	80042be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004246:	d123      	bne.n	8004290 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	2b03      	cmp	r3, #3
 800424e:	d838      	bhi.n	80042c2 <DMA_CheckFifoParam+0xda>
 8004250:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <DMA_CheckFifoParam+0x70>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	08004269 	.word	0x08004269
 800425c:	0800426f 	.word	0x0800426f
 8004260:	08004269 	.word	0x08004269
 8004264:	08004281 	.word	0x08004281
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
        break;
 800426c:	e030      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d025      	beq.n	80042c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800427e:	e022      	b.n	80042c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004288:	d11f      	bne.n	80042ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800428e:	e01c      	b.n	80042ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	2b02      	cmp	r3, #2
 8004296:	d902      	bls.n	800429e <DMA_CheckFifoParam+0xb6>
 8004298:	2b03      	cmp	r3, #3
 800429a:	d003      	beq.n	80042a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800429c:	e018      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
        break;
 80042a2:	e015      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
    break;
 80042b4:	e00b      	b.n	80042ce <DMA_CheckFifoParam+0xe6>
        break;
 80042b6:	bf00      	nop
 80042b8:	e00a      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e008      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
        break;
 80042be:	bf00      	nop
 80042c0:	e006      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
        break;
 80042c2:	bf00      	nop
 80042c4:	e004      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
        break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
        break;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
    break;
 80042ce:	bf00      	nop
    }
  }

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop

080042e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a38      	ldr	r2, [pc, #224]	@ (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d022      	beq.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a36      	ldr	r2, [pc, #216]	@ (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01d      	beq.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a35      	ldr	r2, [pc, #212]	@ (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a30      	ldr	r2, [pc, #192]	@ (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2f      	ldr	r2, [pc, #188]	@ (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2d      	ldr	r2, [pc, #180]	@ (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01a      	beq.n	800437e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3b08      	subs	r3, #8
 8004350:	4a28      	ldr	r2, [pc, #160]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4b26      	ldr	r3, [pc, #152]	@ (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a24      	ldr	r2, [pc, #144]	@ (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800436c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2201      	movs	r2, #1
 8004376:	409a      	lsls	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800437c:	e024      	b.n	80043c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	3b10      	subs	r3, #16
 8004386:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d806      	bhi.n	80043a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4a1b      	ldr	r2, [pc, #108]	@ (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d902      	bls.n	80043a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3308      	adds	r3, #8
 80043a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4b18      	ldr	r3, [pc, #96]	@ (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2201      	movs	r2, #1
 80043c2:	409a      	lsls	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	58025408 	.word	0x58025408
 80043d8:	5802541c 	.word	0x5802541c
 80043dc:	58025430 	.word	0x58025430
 80043e0:	58025444 	.word	0x58025444
 80043e4:	58025458 	.word	0x58025458
 80043e8:	5802546c 	.word	0x5802546c
 80043ec:	58025480 	.word	0x58025480
 80043f0:	58025494 	.word	0x58025494
 80043f4:	cccccccd 	.word	0xcccccccd
 80043f8:	16009600 	.word	0x16009600
 80043fc:	58025880 	.word	0x58025880
 8004400:	aaaaaaab 	.word	0xaaaaaaab
 8004404:	400204b8 	.word	0x400204b8
 8004408:	4002040f 	.word	0x4002040f
 800440c:	10008200 	.word	0x10008200
 8004410:	40020880 	.word	0x40020880

08004414 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d04a      	beq.n	80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d847      	bhi.n	80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a25      	ldr	r2, [pc, #148]	@ (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d022      	beq.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d01d      	beq.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a22      	ldr	r2, [pc, #136]	@ (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a21      	ldr	r2, [pc, #132]	@ (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1f      	ldr	r2, [pc, #124]	@ (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1e      	ldr	r2, [pc, #120]	@ (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1c      	ldr	r2, [pc, #112]	@ (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1b      	ldr	r2, [pc, #108]	@ (80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4b17      	ldr	r3, [pc, #92]	@ (80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800449c:	671a      	str	r2, [r3, #112]	@ 0x70
 800449e:	e009      	b.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4b14      	ldr	r3, [pc, #80]	@ (80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a11      	ldr	r2, [pc, #68]	@ (80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	2201      	movs	r2, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	58025408 	.word	0x58025408
 80044d0:	5802541c 	.word	0x5802541c
 80044d4:	58025430 	.word	0x58025430
 80044d8:	58025444 	.word	0x58025444
 80044dc:	58025458 	.word	0x58025458
 80044e0:	5802546c 	.word	0x5802546c
 80044e4:	58025480 	.word	0x58025480
 80044e8:	58025494 	.word	0x58025494
 80044ec:	1600963f 	.word	0x1600963f
 80044f0:	58025940 	.word	0x58025940
 80044f4:	1000823f 	.word	0x1000823f
 80044f8:	40020940 	.word	0x40020940

080044fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	@ 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800450a:	4b89      	ldr	r3, [pc, #548]	@ (8004730 <HAL_GPIO_Init+0x234>)
 800450c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800450e:	e194      	b.n	800483a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8186 	beq.w	8004834 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d005      	beq.n	8004540 <HAL_GPIO_Init+0x44>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d130      	bne.n	80045a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004576:	2201      	movs	r2, #1
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4013      	ands	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0201 	and.w	r2, r3, #1
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d017      	beq.n	80045de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	2203      	movs	r2, #3
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d123      	bne.n	8004632 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	08da      	lsrs	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3208      	adds	r2, #8
 80045f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	220f      	movs	r2, #15
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	08da      	lsrs	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3208      	adds	r2, #8
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80e0 	beq.w	8004834 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004674:	4b2f      	ldr	r3, [pc, #188]	@ (8004734 <HAL_GPIO_Init+0x238>)
 8004676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800467a:	4a2e      	ldr	r2, [pc, #184]	@ (8004734 <HAL_GPIO_Init+0x238>)
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004684:	4b2b      	ldr	r3, [pc, #172]	@ (8004734 <HAL_GPIO_Init+0x238>)
 8004686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004692:	4a29      	ldr	r2, [pc, #164]	@ (8004738 <HAL_GPIO_Init+0x23c>)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	220f      	movs	r2, #15
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a20      	ldr	r2, [pc, #128]	@ (800473c <HAL_GPIO_Init+0x240>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d052      	beq.n	8004764 <HAL_GPIO_Init+0x268>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004740 <HAL_GPIO_Init+0x244>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_GPIO_Init+0x22e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_GPIO_Init+0x248>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02b      	beq.n	8004726 <HAL_GPIO_Init+0x22a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004748 <HAL_GPIO_Init+0x24c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d025      	beq.n	8004722 <HAL_GPIO_Init+0x226>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1c      	ldr	r2, [pc, #112]	@ (800474c <HAL_GPIO_Init+0x250>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01f      	beq.n	800471e <HAL_GPIO_Init+0x222>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004750 <HAL_GPIO_Init+0x254>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d019      	beq.n	800471a <HAL_GPIO_Init+0x21e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004754 <HAL_GPIO_Init+0x258>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_GPIO_Init+0x21a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <HAL_GPIO_Init+0x25c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00d      	beq.n	8004712 <HAL_GPIO_Init+0x216>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a18      	ldr	r2, [pc, #96]	@ (800475c <HAL_GPIO_Init+0x260>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <HAL_GPIO_Init+0x212>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <HAL_GPIO_Init+0x264>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_GPIO_Init+0x20e>
 8004706:	2309      	movs	r3, #9
 8004708:	e02d      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 800470a:	230a      	movs	r3, #10
 800470c:	e02b      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 800470e:	2308      	movs	r3, #8
 8004710:	e029      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 8004712:	2307      	movs	r3, #7
 8004714:	e027      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 8004716:	2306      	movs	r3, #6
 8004718:	e025      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 800471a:	2305      	movs	r3, #5
 800471c:	e023      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 800471e:	2304      	movs	r3, #4
 8004720:	e021      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 8004722:	2303      	movs	r3, #3
 8004724:	e01f      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 8004726:	2302      	movs	r3, #2
 8004728:	e01d      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 800472a:	2301      	movs	r3, #1
 800472c:	e01b      	b.n	8004766 <HAL_GPIO_Init+0x26a>
 800472e:	bf00      	nop
 8004730:	58000080 	.word	0x58000080
 8004734:	58024400 	.word	0x58024400
 8004738:	58000400 	.word	0x58000400
 800473c:	58020000 	.word	0x58020000
 8004740:	58020400 	.word	0x58020400
 8004744:	58020800 	.word	0x58020800
 8004748:	58020c00 	.word	0x58020c00
 800474c:	58021000 	.word	0x58021000
 8004750:	58021400 	.word	0x58021400
 8004754:	58021800 	.word	0x58021800
 8004758:	58021c00 	.word	0x58021c00
 800475c:	58022000 	.word	0x58022000
 8004760:	58022400 	.word	0x58022400
 8004764:	2300      	movs	r3, #0
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	f002 0203 	and.w	r2, r2, #3
 800476c:	0092      	lsls	r2, r2, #2
 800476e:	4093      	lsls	r3, r2
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004776:	4938      	ldr	r1, [pc, #224]	@ (8004858 <HAL_GPIO_Init+0x35c>)
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	3302      	adds	r3, #2
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	3301      	adds	r3, #1
 8004838:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f ae63 	bne.w	8004510 <HAL_GPIO_Init+0x14>
  }
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	3724      	adds	r7, #36	@ 0x24
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	58000400 	.word	0x58000400

0800485c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
 8004868:	4613      	mov	r3, r2
 800486a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800486c:	787b      	ldrb	r3, [r7, #1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004878:	e003      	b.n	8004882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800487a:	887b      	ldrh	r3, [r7, #2]
 800487c:	041a      	lsls	r2, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	619a      	str	r2, [r3, #24]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af02      	add	r7, sp, #8
 8004894:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0fe      	b.n	8004a9e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f00c fc87 	bl	80111c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2203      	movs	r2, #3
 80048be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f007 fb73 	bl	800bfb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7c1a      	ldrb	r2, [r3, #16]
 80048d4:	f88d 2000 	strb.w	r2, [sp]
 80048d8:	3304      	adds	r3, #4
 80048da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048dc:	f007 fa44 	bl	800bd68 <USB_CoreInit>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e0d5      	b.n	8004a9e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f007 fb6b 	bl	800bfd4 <USB_SetCurrentMode>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0c6      	b.n	8004a9e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	e04a      	b.n	80049ac <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004916:	7bfa      	ldrb	r2, [r7, #15]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3315      	adds	r3, #21
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	3314      	adds	r3, #20
 800493a:	7bfa      	ldrb	r2, [r7, #15]
 800493c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	b298      	uxth	r0, r3
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	332e      	adds	r3, #46	@ 0x2e
 8004952:	4602      	mov	r2, r0
 8004954:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	3318      	adds	r3, #24
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	331c      	adds	r3, #28
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3320      	adds	r3, #32
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3324      	adds	r3, #36	@ 0x24
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	3301      	adds	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	7bfa      	ldrb	r2, [r7, #15]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d3af      	bcc.n	8004916 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e044      	b.n	8004a46 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049bc:	7bfa      	ldrb	r2, [r7, #15]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80049e4:	7bfa      	ldrb	r2, [r7, #15]
 80049e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	3301      	adds	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	791b      	ldrb	r3, [r3, #4]
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3b5      	bcc.n	80049bc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7c1a      	ldrb	r2, [r3, #16]
 8004a58:	f88d 2000 	strb.w	r2, [sp]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a60:	f007 fb04 	bl	800c06c <USB_DevInit>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e013      	b.n	8004a9e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7b1b      	ldrb	r3, [r3, #12]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d102      	bne.n	8004a92 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 f96f 	bl	8005d70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f008 fb47 	bl	800d12a <USB_DevDisconnect>

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_PCD_Start+0x1c>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e022      	b.n	8004b08 <HAL_PCD_Start+0x62>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f007 fa4e 	bl	800bf90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f008 faf5 	bl	800d0e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b08d      	sub	sp, #52	@ 0x34
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f008 fbb3 	bl	800d292 <USB_GetMode>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 84b9 	bne.w	80054a6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f008 fb17 	bl	800d16c <USB_ReadInterrupts>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 84af 	beq.w	80054a4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f008 fb04 	bl	800d16c <USB_ReadInterrupts>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d107      	bne.n	8004b7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f002 0202 	and.w	r2, r2, #2
 8004b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f008 faf2 	bl	800d16c <USB_ReadInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d161      	bne.n	8004c56 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0210 	bic.w	r2, r2, #16
 8004ba0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f003 020f 	and.w	r2, r3, #15
 8004bae:	4613      	mov	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004bc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bcc:	d124      	bne.n	8004c18 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d035      	beq.n	8004c46 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	6a38      	ldr	r0, [r7, #32]
 8004bee:	f008 f929 	bl	800ce44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bfe:	441a      	add	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c10:	441a      	add	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	615a      	str	r2, [r3, #20]
 8004c16:	e016      	b.n	8004c46 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004c1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c22:	d110      	bne.n	8004c46 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6a38      	ldr	r0, [r7, #32]
 8004c30:	f008 f908 	bl	800ce44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c40:	441a      	add	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0210 	orr.w	r2, r2, #16
 8004c54:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f008 fa86 	bl	800d16c <USB_ReadInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c66:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c6a:	f040 80a7 	bne.w	8004dbc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f008 fa8b 	bl	800d192 <USB_ReadDevAllOutEpInterrupt>
 8004c7c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004c7e:	e099      	b.n	8004db4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 808e 	beq.w	8004da8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f008 faaf 	bl	800d1fa <USB_ReadDevOutEPInterrupt>
 8004c9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00c      	beq.n	8004cc2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fed1 	bl	8005a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2308      	movs	r3, #8
 8004cdc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004cde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 ffa7 	bl	8005c34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2310      	movs	r3, #16
 8004d00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d030      	beq.n	8004d6e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d14:	2b80      	cmp	r3, #128	@ 0x80
 8004d16:	d109      	bne.n	8004d2c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d2a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3304      	adds	r3, #4
 8004d40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	78db      	ldrb	r3, [r3, #3]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d108      	bne.n	8004d5c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f00c fb5c 	bl	8011414 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d68:	461a      	mov	r2, r3
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d84:	461a      	mov	r2, r3
 8004d86:	2320      	movs	r3, #32
 8004d88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d009      	beq.n	8004da8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004da6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	3301      	adds	r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f47f af62 	bne.w	8004c80 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f008 f9d3 	bl	800d16c <USB_ReadInterrupts>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dd0:	f040 80db 	bne.w	8004f8a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f008 f9f4 	bl	800d1c6 <USB_ReadDevAllInEpInterrupt>
 8004dde:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004de4:	e0cd      	b.n	8004f82 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80c2 	beq.w	8004f76 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f008 fa1a 	bl	800d236 <USB_ReadDevInEPInterrupt>
 8004e02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d057      	beq.n	8004ebe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2201      	movs	r2, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69f9      	ldr	r1, [r7, #28]
 8004e2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e2e:	4013      	ands	r3, r2
 8004e30:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2301      	movs	r3, #1
 8004e42:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	799b      	ldrb	r3, [r3, #6]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d132      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3320      	adds	r3, #32
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4403      	add	r3, r0
 8004e6c:	331c      	adds	r3, #28
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4419      	add	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4403      	add	r3, r0
 8004e80:	3320      	adds	r3, #32
 8004e82:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d113      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x3a2>
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8e:	4613      	mov	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	3324      	adds	r3, #36	@ 0x24
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d108      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2101      	movs	r1, #1
 8004eae:	f008 fa23 	bl	800d2f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f00c fa26 	bl	801130a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2340      	movs	r3, #64	@ 0x40
 8004f10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d023      	beq.n	8004f64 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f1e:	6a38      	ldr	r0, [r7, #32]
 8004f20:	f007 fa02 	bl	800c328 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3310      	adds	r3, #16
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	78db      	ldrb	r3, [r3, #3]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d108      	bne.n	8004f52 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2200      	movs	r2, #0
 8004f44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f00c fa73 	bl	8011438 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2302      	movs	r3, #2
 8004f62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fcea 	bl	800594a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	3301      	adds	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f af2e 	bne.w	8004de6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f008 f8ec 	bl	800d16c <USB_ReadInterrupts>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f9e:	d122      	bne.n	8004fe6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d108      	bne.n	8004fd0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fef5 	bl	8005db8 <HAL_PCDEx_LPM_Callback>
 8004fce:	e002      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f00c fa11 	bl	80113f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f008 f8be 	bl	800d16c <USB_ReadInterrupts>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ffa:	d112      	bne.n	8005022 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d102      	bne.n	8005012 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f00c f9cd 	bl	80113ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005020:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f008 f8a0 	bl	800d16c <USB_ReadInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005036:	d121      	bne.n	800507c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005046:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800504e:	2b00      	cmp	r3, #0
 8005050:	d111      	bne.n	8005076 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005060:	089b      	lsrs	r3, r3, #2
 8005062:	f003 020f 	and.w	r2, r3, #15
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800506c:	2101      	movs	r1, #1
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fea2 	bl	8005db8 <HAL_PCDEx_LPM_Callback>
 8005074:	e002      	b.n	800507c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f00c f998 	bl	80113ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f008 f873 	bl	800d16c <USB_ReadInterrupts>
 8005086:	4603      	mov	r3, r0
 8005088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800508c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005090:	f040 80b7 	bne.w	8005202 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2110      	movs	r1, #16
 80050ae:	4618      	mov	r0, r3
 80050b0:	f007 f93a 	bl	800c328 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b8:	e046      	b.n	8005148 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c6:	461a      	mov	r2, r3
 80050c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fa:	461a      	mov	r2, r3
 80050fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005100:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	440a      	add	r2, r1
 8005118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800511c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005120:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800513c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005140:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	3301      	adds	r3, #1
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	791b      	ldrb	r3, [r3, #4]
 800514c:	461a      	mov	r2, r3
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	4293      	cmp	r3, r2
 8005152:	d3b2      	bcc.n	80050ba <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005162:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005166:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7bdb      	ldrb	r3, [r3, #15]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d016      	beq.n	800519e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005180:	f043 030b 	orr.w	r3, r3, #11
 8005184:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005196:	f043 030b 	orr.w	r3, r3, #11
 800519a:	6453      	str	r3, [r2, #68]	@ 0x44
 800519c:	e015      	b.n	80051ca <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ac:	4619      	mov	r1, r3
 80051ae:	f242 032b 	movw	r3, #8235	@ 0x202b
 80051b2:	4313      	orrs	r3, r2
 80051b4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051c4:	f043 030b 	orr.w	r3, r3, #11
 80051c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051d8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80051dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051ec:	461a      	mov	r2, r3
 80051ee:	f008 f883 	bl	800d2f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f007 ffb0 	bl	800d16c <USB_ReadInterrupts>
 800520c:	4603      	mov	r3, r0
 800520e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005216:	d123      	bne.n	8005260 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f008 f847 	bl	800d2b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f007 f8f7 	bl	800c41a <USB_GetDevSpeed>
 800522c:	4603      	mov	r3, r0
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681c      	ldr	r4, [r3, #0]
 8005238:	f001 fd9e 	bl	8006d78 <HAL_RCC_GetHCLKFreq>
 800523c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005242:	461a      	mov	r2, r3
 8005244:	4620      	mov	r0, r4
 8005246:	f006 fe01 	bl	800be4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f00c f885 	bl	801135a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800525e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f007 ff81 	bl	800d16c <USB_ReadInterrupts>
 800526a:	4603      	mov	r3, r0
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d10a      	bne.n	800528a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f00c f862 	bl	801133e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f002 0208 	and.w	r2, r2, #8
 8005288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f007 ff6c 	bl	800d16c <USB_ReadInterrupts>
 8005294:	4603      	mov	r3, r0
 8005296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529a:	2b80      	cmp	r3, #128	@ 0x80
 800529c:	d123      	bne.n	80052e6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052aa:	2301      	movs	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ae:	e014      	b.n	80052da <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fb0a 	bl	80058e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	3301      	adds	r3, #1
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	791b      	ldrb	r3, [r3, #4]
 80052de:	461a      	mov	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d3e4      	bcc.n	80052b0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f007 ff3e 	bl	800d16c <USB_ReadInterrupts>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052fa:	d13c      	bne.n	8005376 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052fc:	2301      	movs	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005300:	e02b      	b.n	800535a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005316:	4613      	mov	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	3318      	adds	r3, #24
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d115      	bne.n	8005354 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005328:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800532a:	2b00      	cmp	r3, #0
 800532c:	da12      	bge.n	8005354 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3317      	adds	r3, #23
 800533e:	2201      	movs	r2, #1
 8005340:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 faca 	bl	80058e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	3301      	adds	r3, #1
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	791b      	ldrb	r3, [r3, #4]
 800535e:	461a      	mov	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	4293      	cmp	r3, r2
 8005364:	d3cd      	bcc.n	8005302 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f007 fef6 	bl	800d16c <USB_ReadInterrupts>
 8005380:	4603      	mov	r3, r0
 8005382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800538a:	d156      	bne.n	800543a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800538c:	2301      	movs	r3, #1
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005390:	e045      	b.n	800541e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d12e      	bne.n	8005418 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80053ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da2b      	bge.n	8005418 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	0c1a      	lsrs	r2, r3, #16
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80053ca:	4053      	eors	r3, r2
 80053cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d121      	bne.n	8005418 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005410:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005414:	6053      	str	r3, [r2, #4]
            break;
 8005416:	e008      	b.n	800542a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	3301      	adds	r3, #1
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	791b      	ldrb	r3, [r3, #4]
 8005422:	461a      	mov	r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	4293      	cmp	r3, r2
 8005428:	d3b3      	bcc.n	8005392 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f007 fe94 	bl	800d16c <USB_ReadInterrupts>
 8005444:	4603      	mov	r3, r0
 8005446:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544e:	d10a      	bne.n	8005466 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f00c f803 	bl	801145c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f007 fe7e 	bl	800d16c <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d115      	bne.n	80054a6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f00b fff3 	bl	8011478 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6859      	ldr	r1, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	e000      	b.n	80054a6 <HAL_PCD_IRQHandler+0x996>
      return;
 80054a4:	bf00      	nop
    }
  }
}
 80054a6:	3734      	adds	r7, #52	@ 0x34
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}

080054ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_PCD_SetAddress+0x1a>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e012      	b.n	80054ec <HAL_PCD_SetAddress+0x40>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	78fa      	ldrb	r2, [r7, #3]
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f007 fddd 	bl	800d09c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	461a      	mov	r2, r3
 8005502:	4603      	mov	r3, r0
 8005504:	70fb      	strb	r3, [r7, #3]
 8005506:	460b      	mov	r3, r1
 8005508:	803b      	strh	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	da0f      	bge.n	800553a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	3310      	adds	r3, #16
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	3304      	adds	r3, #4
 8005530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	705a      	strb	r2, [r3, #1]
 8005538:	e00f      	b.n	800555a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	3304      	adds	r3, #4
 8005552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005566:	883b      	ldrh	r3, [r7, #0]
 8005568:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	78ba      	ldrb	r2, [r7, #2]
 8005574:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005588:	78bb      	ldrb	r3, [r7, #2]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d102      	bne.n	8005594 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_PCD_EP_Open+0xae>
 800559e:	2302      	movs	r3, #2
 80055a0:	e00e      	b.n	80055c0 <HAL_PCD_EP_Open+0xcc>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f006 ff57 	bl	800c464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80055be:	7afb      	ldrb	r3, [r7, #11]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da0f      	bge.n	80055fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	f003 020f 	and.w	r2, r3, #15
 80055e2:	4613      	mov	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	3310      	adds	r3, #16
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4413      	add	r3, r2
 80055f0:	3304      	adds	r3, #4
 80055f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	705a      	strb	r2, [r3, #1]
 80055fa:	e00f      	b.n	800561c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	3304      	adds	r3, #4
 8005614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_PCD_EP_Close+0x6e>
 8005632:	2302      	movs	r3, #2
 8005634:	e00e      	b.n	8005654 <HAL_PCD_EP_Close+0x8c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	4618      	mov	r0, r3
 8005646:	f006 ff95 	bl	800c574 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	460b      	mov	r3, r1
 800566a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800566c:	7afb      	ldrb	r3, [r7, #11]
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	3304      	adds	r3, #4
 8005684:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800569e:	7afb      	ldrb	r3, [r7, #11]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	799b      	ldrb	r3, [r3, #6]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d102      	bne.n	80056b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	799b      	ldrb	r3, [r3, #6]
 80056c0:	461a      	mov	r2, r3
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	f007 f832 	bl	800c72c <USB_EPStartXfer>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	f003 020f 	and.w	r2, r3, #15
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80056f4:	681b      	ldr	r3, [r3, #0]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	460b      	mov	r3, r1
 8005710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	f003 020f 	and.w	r2, r3, #15
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	3310      	adds	r3, #16
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	3304      	adds	r3, #4
 8005728:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2201      	movs	r2, #1
 8005740:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	b2da      	uxtb	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	799b      	ldrb	r3, [r3, #6]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d102      	bne.n	800575c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	799b      	ldrb	r3, [r3, #6]
 8005764:	461a      	mov	r2, r3
 8005766:	6979      	ldr	r1, [r7, #20]
 8005768:	f006 ffe0 	bl	800c72c <USB_EPStartXfer>

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	7912      	ldrb	r2, [r2, #4]
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e04f      	b.n	8005834 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005798:	2b00      	cmp	r3, #0
 800579a:	da0f      	bge.n	80057bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	3310      	adds	r3, #16
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	4413      	add	r3, r2
 80057b0:	3304      	adds	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	705a      	strb	r2, [r3, #1]
 80057ba:	e00d      	b.n	80057d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	3304      	adds	r3, #4
 80057d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_PCD_EP_SetStall+0x82>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e01d      	b.n	8005834 <HAL_PCD_EP_SetStall+0xbe>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68f9      	ldr	r1, [r7, #12]
 8005806:	4618      	mov	r0, r3
 8005808:	f007 fb74 	bl	800cef4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7999      	ldrb	r1, [r3, #6]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005824:	461a      	mov	r2, r3
 8005826:	f007 fd67 	bl	800d2f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	7912      	ldrb	r2, [r2, #4]
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e042      	b.n	80058e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800585a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800585e:	2b00      	cmp	r3, #0
 8005860:	da0f      	bge.n	8005882 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	3310      	adds	r3, #16
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	705a      	strb	r2, [r3, #1]
 8005880:	e00f      	b.n	80058a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_PCD_EP_ClrStall+0x86>
 80058be:	2302      	movs	r3, #2
 80058c0:	e00e      	b.n	80058e0 <HAL_PCD_EP_ClrStall+0xa4>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f007 fb7d 	bl	800cfd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80058f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da0c      	bge.n	8005916 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	3310      	adds	r3, #16
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	3304      	adds	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e00c      	b.n	8005930 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	f003 020f 	and.w	r2, r3, #15
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	3304      	adds	r3, #4
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	4618      	mov	r0, r3
 8005938:	f007 f99c 	bl	800cc74 <USB_EPStopXfer>
 800593c:	4603      	mov	r3, r0
 800593e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005940:	7afb      	ldrb	r3, [r7, #11]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b08a      	sub	sp, #40	@ 0x28
 800594e:	af02      	add	r7, sp, #8
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	3310      	adds	r3, #16
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	3304      	adds	r3, #4
 8005970:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	429a      	cmp	r2, r3
 800597c:	d901      	bls.n	8005982 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e06b      	b.n	8005a5a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	429a      	cmp	r2, r3
 8005996:	d902      	bls.n	800599e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3303      	adds	r3, #3
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059a6:	e02a      	b.n	80059fe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d902      	bls.n	80059c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3303      	adds	r3, #3
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68d9      	ldr	r1, [r3, #12]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	4603      	mov	r3, r0
 80059e0:	6978      	ldr	r0, [r7, #20]
 80059e2:	f007 f9f1 	bl	800cdc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	441a      	add	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	441a      	add	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d809      	bhi.n	8005a28 <PCD_WriteEmptyTxFifo+0xde>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d203      	bcs.n	8005a28 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1bf      	bne.n	80059a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d811      	bhi.n	8005a58 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	6939      	ldr	r1, [r7, #16]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a54:	4013      	ands	r3, r2
 8005a56:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	333c      	adds	r3, #60	@ 0x3c
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	799b      	ldrb	r3, [r3, #6]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d17b      	bne.n	8005b92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4a61      	ldr	r2, [pc, #388]	@ (8005c2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	f240 80b9 	bls.w	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80b3 	beq.w	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005acc:	6093      	str	r3, [r2, #8]
 8005ace:	e0a7      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2320      	movs	r3, #32
 8005aea:	6093      	str	r3, [r2, #8]
 8005aec:	e098      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 8093 	bne.w	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	4a4b      	ldr	r2, [pc, #300]	@ (8005c2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d90f      	bls.n	8005b22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b1e:	6093      	str	r3, [r2, #8]
 8005b20:	e07e      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	3304      	adds	r3, #4
 8005b36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	0159      	lsls	r1, r3, #5
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	440b      	add	r3, r1
 8005b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d114      	bne.n	8005b84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2101      	movs	r1, #1
 8005b70:	f007 fbc2 	bl	800d2f8 <USB_EP0_OutStart>
 8005b74:	e006      	b.n	8005b84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	441a      	add	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f00b fba2 	bl	80112d4 <HAL_PCD_DataOutStageCallback>
 8005b90:	e046      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4a26      	ldr	r2, [pc, #152]	@ (8005c30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d124      	bne.n	8005be4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb6:	6093      	str	r3, [r2, #8]
 8005bb8:	e032      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f00b fb79 	bl	80112d4 <HAL_PCD_DataOutStageCallback>
 8005be2:	e01d      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d114      	bne.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d108      	bne.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2100      	movs	r1, #0
 8005c10:	f007 fb72 	bl	800d2f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f00b fb5a 	bl	80112d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	4f54300a 	.word	0x4f54300a
 8005c30:	4f54310a 	.word	0x4f54310a

08005c34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	333c      	adds	r3, #60	@ 0x3c
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a15      	ldr	r2, [pc, #84]	@ (8005cbc <PCD_EP_OutSetupPacket_int+0x88>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d90e      	bls.n	8005c88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c80:	461a      	mov	r2, r3
 8005c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f00b fb11 	bl	80112b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <PCD_EP_OutSetupPacket_int+0x88>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d90c      	bls.n	8005cb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	799b      	ldrb	r3, [r3, #6]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d108      	bne.n	8005cb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2101      	movs	r1, #1
 8005cac:	f007 fb24 	bl	800d2f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	4f54300a 	.word	0x4f54300a

08005cc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d107      	bne.n	8005cee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005cde:	883b      	ldrh	r3, [r7, #0]
 8005ce0:	0419      	lsls	r1, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cec:	e028      	b.n	8005d40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	e00d      	b.n	8005d1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	3340      	adds	r3, #64	@ 0x40
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4413      	add	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	73fb      	strb	r3, [r7, #15]
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d3ec      	bcc.n	8005d02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d28:	883b      	ldrh	r3, [r7, #0]
 8005d2a:	0418      	lsls	r0, r3, #16
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	4302      	orrs	r2, r0
 8005d38:	3340      	adds	r3, #64	@ 0x40
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	887a      	ldrh	r2, [r7, #2]
 8005d60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d9e:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	10000003 	.word	0x10000003

08005db8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005dd8:	4b19      	ldr	r3, [pc, #100]	@ (8005e40 <HAL_PWREx_ConfigSupply+0x70>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d00a      	beq.n	8005dfa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005de4:	4b16      	ldr	r3, [pc, #88]	@ (8005e40 <HAL_PWREx_ConfigSupply+0x70>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e01f      	b.n	8005e36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e01d      	b.n	8005e36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dfa:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <HAL_PWREx_ConfigSupply+0x70>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f023 0207 	bic.w	r2, r3, #7
 8005e02:	490f      	ldr	r1, [pc, #60]	@ (8005e40 <HAL_PWREx_ConfigSupply+0x70>)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e0a:	f7fb fb9b 	bl	8001544 <HAL_GetTick>
 8005e0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e10:	e009      	b.n	8005e26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e12:	f7fb fb97 	bl	8001544 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e20:	d901      	bls.n	8005e26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e007      	b.n	8005e36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <HAL_PWREx_ConfigSupply+0x70>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e32:	d1ee      	bne.n	8005e12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	58024800 	.word	0x58024800

08005e44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e48:	4b05      	ldr	r3, [pc, #20]	@ (8005e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a04      	ldr	r2, [pc, #16]	@ (8005e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e52:	60d3      	str	r3, [r2, #12]
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	58024800 	.word	0x58024800

08005e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	@ 0x30
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f000 bc48 	b.w	8006708 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8088 	beq.w	8005f96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e86:	4b99      	ldr	r3, [pc, #612]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e90:	4b96      	ldr	r3, [pc, #600]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d007      	beq.n	8005eac <HAL_RCC_OscConfig+0x48>
 8005e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9e:	2b18      	cmp	r3, #24
 8005ea0:	d111      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x62>
 8005ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d10c      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eac:	4b8f      	ldr	r3, [pc, #572]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d06d      	beq.n	8005f94 <HAL_RCC_OscConfig+0x130>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d169      	bne.n	8005f94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f000 bc21 	b.w	8006708 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ece:	d106      	bne.n	8005ede <HAL_RCC_OscConfig+0x7a>
 8005ed0:	4b86      	ldr	r3, [pc, #536]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a85      	ldr	r2, [pc, #532]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	e02e      	b.n	8005f3c <HAL_RCC_OscConfig+0xd8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10c      	bne.n	8005f00 <HAL_RCC_OscConfig+0x9c>
 8005ee6:	4b81      	ldr	r3, [pc, #516]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a80      	ldr	r2, [pc, #512]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	4b7e      	ldr	r3, [pc, #504]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a7d      	ldr	r2, [pc, #500]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005ef8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	e01d      	b.n	8005f3c <HAL_RCC_OscConfig+0xd8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f08:	d10c      	bne.n	8005f24 <HAL_RCC_OscConfig+0xc0>
 8005f0a:	4b78      	ldr	r3, [pc, #480]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a77      	ldr	r2, [pc, #476]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	4b75      	ldr	r3, [pc, #468]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a74      	ldr	r2, [pc, #464]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e00b      	b.n	8005f3c <HAL_RCC_OscConfig+0xd8>
 8005f24:	4b71      	ldr	r3, [pc, #452]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a70      	ldr	r2, [pc, #448]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4b6e      	ldr	r3, [pc, #440]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6d      	ldr	r2, [pc, #436]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d013      	beq.n	8005f6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fb fafe 	bl	8001544 <HAL_GetTick>
 8005f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f4c:	f7fb fafa 	bl	8001544 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b64      	cmp	r3, #100	@ 0x64
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e3d4      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f5e:	4b63      	ldr	r3, [pc, #396]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0f0      	beq.n	8005f4c <HAL_RCC_OscConfig+0xe8>
 8005f6a:	e014      	b.n	8005f96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fb faea 	bl	8001544 <HAL_GetTick>
 8005f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f74:	f7fb fae6 	bl	8001544 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b64      	cmp	r3, #100	@ 0x64
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e3c0      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f86:	4b59      	ldr	r3, [pc, #356]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x110>
 8005f92:	e000      	b.n	8005f96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80ca 	beq.w	8006138 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa4:	4b51      	ldr	r3, [pc, #324]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fae:	4b4f      	ldr	r3, [pc, #316]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_RCC_OscConfig+0x166>
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	2b18      	cmp	r3, #24
 8005fbe:	d156      	bne.n	800606e <HAL_RCC_OscConfig+0x20a>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d151      	bne.n	800606e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fca:	4b48      	ldr	r3, [pc, #288]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x17e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e392      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fe2:	4b42      	ldr	r3, [pc, #264]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 0219 	bic.w	r2, r3, #25
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	493f      	ldr	r1, [pc, #252]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fb faa6 	bl	8001544 <HAL_GetTick>
 8005ff8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ffc:	f7fb faa2 	bl	8001544 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e37c      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800600e:	4b37      	ldr	r3, [pc, #220]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0f0      	beq.n	8005ffc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601a:	f7fb fac3 	bl	80015a4 <HAL_GetREVID>
 800601e:	4603      	mov	r3, r0
 8006020:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006024:	4293      	cmp	r3, r2
 8006026:	d817      	bhi.n	8006058 <HAL_RCC_OscConfig+0x1f4>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b40      	cmp	r3, #64	@ 0x40
 800602e:	d108      	bne.n	8006042 <HAL_RCC_OscConfig+0x1de>
 8006030:	4b2e      	ldr	r3, [pc, #184]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006038:	4a2c      	ldr	r2, [pc, #176]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 800603a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800603e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006040:	e07a      	b.n	8006138 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006042:	4b2a      	ldr	r3, [pc, #168]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	031b      	lsls	r3, r3, #12
 8006050:	4926      	ldr	r1, [pc, #152]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8006052:	4313      	orrs	r3, r2
 8006054:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006056:	e06f      	b.n	8006138 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006058:	4b24      	ldr	r3, [pc, #144]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	4921      	ldr	r1, [pc, #132]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8006068:	4313      	orrs	r3, r2
 800606a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800606c:	e064      	b.n	8006138 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d047      	beq.n	8006106 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006076:	4b1d      	ldr	r3, [pc, #116]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 0219 	bic.w	r2, r3, #25
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	491a      	ldr	r1, [pc, #104]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006088:	f7fb fa5c 	bl	8001544 <HAL_GetTick>
 800608c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006090:	f7fb fa58 	bl	8001544 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e332      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060a2:	4b12      	ldr	r3, [pc, #72]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ae:	f7fb fa79 	bl	80015a4 <HAL_GetREVID>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d819      	bhi.n	80060f0 <HAL_RCC_OscConfig+0x28c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b40      	cmp	r3, #64	@ 0x40
 80060c2:	d108      	bne.n	80060d6 <HAL_RCC_OscConfig+0x272>
 80060c4:	4b09      	ldr	r3, [pc, #36]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80060cc:	4a07      	ldr	r2, [pc, #28]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d2:	6053      	str	r3, [r2, #4]
 80060d4:	e030      	b.n	8006138 <HAL_RCC_OscConfig+0x2d4>
 80060d6:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	031b      	lsls	r3, r3, #12
 80060e4:	4901      	ldr	r1, [pc, #4]	@ (80060ec <HAL_RCC_OscConfig+0x288>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	604b      	str	r3, [r1, #4]
 80060ea:	e025      	b.n	8006138 <HAL_RCC_OscConfig+0x2d4>
 80060ec:	58024400 	.word	0x58024400
 80060f0:	4b9a      	ldr	r3, [pc, #616]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	061b      	lsls	r3, r3, #24
 80060fe:	4997      	ldr	r1, [pc, #604]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006100:	4313      	orrs	r3, r2
 8006102:	604b      	str	r3, [r1, #4]
 8006104:	e018      	b.n	8006138 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006106:	4b95      	ldr	r3, [pc, #596]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a94      	ldr	r2, [pc, #592]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fb fa17 	bl	8001544 <HAL_GetTick>
 8006116:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800611a:	f7fb fa13 	bl	8001544 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e2ed      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800612c:	4b8b      	ldr	r3, [pc, #556]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a9 	beq.w	8006298 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006146:	4b85      	ldr	r3, [pc, #532]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800614e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006150:	4b82      	ldr	r3, [pc, #520]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b08      	cmp	r3, #8
 800615a:	d007      	beq.n	800616c <HAL_RCC_OscConfig+0x308>
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b18      	cmp	r3, #24
 8006160:	d13a      	bne.n	80061d8 <HAL_RCC_OscConfig+0x374>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d135      	bne.n	80061d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800616c:	4b7b      	ldr	r3, [pc, #492]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_RCC_OscConfig+0x320>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	2b80      	cmp	r3, #128	@ 0x80
 800617e:	d001      	beq.n	8006184 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e2c1      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006184:	f7fb fa0e 	bl	80015a4 <HAL_GetREVID>
 8006188:	4603      	mov	r3, r0
 800618a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800618e:	4293      	cmp	r3, r2
 8006190:	d817      	bhi.n	80061c2 <HAL_RCC_OscConfig+0x35e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	2b20      	cmp	r3, #32
 8006198:	d108      	bne.n	80061ac <HAL_RCC_OscConfig+0x348>
 800619a:	4b70      	ldr	r3, [pc, #448]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061a2:	4a6e      	ldr	r2, [pc, #440]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80061a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061aa:	e075      	b.n	8006298 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061ac:	4b6b      	ldr	r3, [pc, #428]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	069b      	lsls	r3, r3, #26
 80061ba:	4968      	ldr	r1, [pc, #416]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061c0:	e06a      	b.n	8006298 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061c2:	4b66      	ldr	r3, [pc, #408]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	061b      	lsls	r3, r3, #24
 80061d0:	4962      	ldr	r1, [pc, #392]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061d6:	e05f      	b.n	8006298 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d042      	beq.n	8006266 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061e0:	4b5e      	ldr	r3, [pc, #376]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a5d      	ldr	r2, [pc, #372]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80061e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fb f9aa 	bl	8001544 <HAL_GetTick>
 80061f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061f4:	f7fb f9a6 	bl	8001544 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e280      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006206:	4b55      	ldr	r3, [pc, #340]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006212:	f7fb f9c7 	bl	80015a4 <HAL_GetREVID>
 8006216:	4603      	mov	r3, r0
 8006218:	f241 0203 	movw	r2, #4099	@ 0x1003
 800621c:	4293      	cmp	r3, r2
 800621e:	d817      	bhi.n	8006250 <HAL_RCC_OscConfig+0x3ec>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	2b20      	cmp	r3, #32
 8006226:	d108      	bne.n	800623a <HAL_RCC_OscConfig+0x3d6>
 8006228:	4b4c      	ldr	r3, [pc, #304]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006230:	4a4a      	ldr	r2, [pc, #296]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006232:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006236:	6053      	str	r3, [r2, #4]
 8006238:	e02e      	b.n	8006298 <HAL_RCC_OscConfig+0x434>
 800623a:	4b48      	ldr	r3, [pc, #288]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	069b      	lsls	r3, r3, #26
 8006248:	4944      	ldr	r1, [pc, #272]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800624a:	4313      	orrs	r3, r2
 800624c:	604b      	str	r3, [r1, #4]
 800624e:	e023      	b.n	8006298 <HAL_RCC_OscConfig+0x434>
 8006250:	4b42      	ldr	r3, [pc, #264]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	493f      	ldr	r1, [pc, #252]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006260:	4313      	orrs	r3, r2
 8006262:	60cb      	str	r3, [r1, #12]
 8006264:	e018      	b.n	8006298 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006266:	4b3d      	ldr	r3, [pc, #244]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a3c      	ldr	r2, [pc, #240]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800626c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006272:	f7fb f967 	bl	8001544 <HAL_GetTick>
 8006276:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800627a:	f7fb f963 	bl	8001544 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e23d      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800628c:	4b33      	ldr	r3, [pc, #204]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f0      	bne.n	800627a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d036      	beq.n	8006312 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d019      	beq.n	80062e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ac:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80062ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b0:	4a2a      	ldr	r2, [pc, #168]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b8:	f7fb f944 	bl	8001544 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c0:	f7fb f940 	bl	8001544 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e21a      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062d2:	4b22      	ldr	r3, [pc, #136]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80062d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0x45c>
 80062de:	e018      	b.n	8006312 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062e0:	4b1e      	ldr	r3, [pc, #120]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80062e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e4:	4a1d      	ldr	r2, [pc, #116]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fb f92a 	bl	8001544 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f4:	f7fb f926 	bl	8001544 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e200      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006306:	4b15      	ldr	r3, [pc, #84]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d039      	beq.n	8006392 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01c      	beq.n	8006360 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a0c      	ldr	r2, [pc, #48]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800632c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006330:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006332:	f7fb f907 	bl	8001544 <HAL_GetTick>
 8006336:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800633a:	f7fb f903 	bl	8001544 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e1dd      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800634c:	4b03      	ldr	r3, [pc, #12]	@ (800635c <HAL_RCC_OscConfig+0x4f8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f0      	beq.n	800633a <HAL_RCC_OscConfig+0x4d6>
 8006358:	e01b      	b.n	8006392 <HAL_RCC_OscConfig+0x52e>
 800635a:	bf00      	nop
 800635c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006360:	4b9b      	ldr	r3, [pc, #620]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a9a      	ldr	r2, [pc, #616]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800636a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800636c:	f7fb f8ea 	bl	8001544 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006374:	f7fb f8e6 	bl	8001544 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1c0      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006386:	4b92      	ldr	r3, [pc, #584]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8081 	beq.w	80064a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063a0:	4b8c      	ldr	r3, [pc, #560]	@ (80065d4 <HAL_RCC_OscConfig+0x770>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a8b      	ldr	r2, [pc, #556]	@ (80065d4 <HAL_RCC_OscConfig+0x770>)
 80063a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ac:	f7fb f8ca 	bl	8001544 <HAL_GetTick>
 80063b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063b4:	f7fb f8c6 	bl	8001544 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	@ 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e1a0      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c6:	4b83      	ldr	r3, [pc, #524]	@ (80065d4 <HAL_RCC_OscConfig+0x770>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d106      	bne.n	80063e8 <HAL_RCC_OscConfig+0x584>
 80063da:	4b7d      	ldr	r3, [pc, #500]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063de:	4a7c      	ldr	r2, [pc, #496]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e6:	e02d      	b.n	8006444 <HAL_RCC_OscConfig+0x5e0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10c      	bne.n	800640a <HAL_RCC_OscConfig+0x5a6>
 80063f0:	4b77      	ldr	r3, [pc, #476]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f4:	4a76      	ldr	r2, [pc, #472]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80063fc:	4b74      	ldr	r3, [pc, #464]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006400:	4a73      	ldr	r2, [pc, #460]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006402:	f023 0304 	bic.w	r3, r3, #4
 8006406:	6713      	str	r3, [r2, #112]	@ 0x70
 8006408:	e01c      	b.n	8006444 <HAL_RCC_OscConfig+0x5e0>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b05      	cmp	r3, #5
 8006410:	d10c      	bne.n	800642c <HAL_RCC_OscConfig+0x5c8>
 8006412:	4b6f      	ldr	r3, [pc, #444]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006416:	4a6e      	ldr	r2, [pc, #440]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006418:	f043 0304 	orr.w	r3, r3, #4
 800641c:	6713      	str	r3, [r2, #112]	@ 0x70
 800641e:	4b6c      	ldr	r3, [pc, #432]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006422:	4a6b      	ldr	r2, [pc, #428]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006424:	f043 0301 	orr.w	r3, r3, #1
 8006428:	6713      	str	r3, [r2, #112]	@ 0x70
 800642a:	e00b      	b.n	8006444 <HAL_RCC_OscConfig+0x5e0>
 800642c:	4b68      	ldr	r3, [pc, #416]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006430:	4a67      	ldr	r2, [pc, #412]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	6713      	str	r3, [r2, #112]	@ 0x70
 8006438:	4b65      	ldr	r3, [pc, #404]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643c:	4a64      	ldr	r2, [pc, #400]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800643e:	f023 0304 	bic.w	r3, r3, #4
 8006442:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d015      	beq.n	8006478 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644c:	f7fb f87a 	bl	8001544 <HAL_GetTick>
 8006450:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006452:	e00a      	b.n	800646a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006454:	f7fb f876 	bl	8001544 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006462:	4293      	cmp	r3, r2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e14e      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800646a:	4b59      	ldr	r3, [pc, #356]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0ee      	beq.n	8006454 <HAL_RCC_OscConfig+0x5f0>
 8006476:	e014      	b.n	80064a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006478:	f7fb f864 	bl	8001544 <HAL_GetTick>
 800647c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800647e:	e00a      	b.n	8006496 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006480:	f7fb f860 	bl	8001544 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800648e:	4293      	cmp	r3, r2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e138      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006496:	4b4e      	ldr	r3, [pc, #312]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1ee      	bne.n	8006480 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 812d 	beq.w	8006706 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064ac:	4b48      	ldr	r3, [pc, #288]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064b4:	2b18      	cmp	r3, #24
 80064b6:	f000 80bd 	beq.w	8006634 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064be:	2b02      	cmp	r3, #2
 80064c0:	f040 809e 	bne.w	8006600 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c4:	4b42      	ldr	r3, [pc, #264]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a41      	ldr	r2, [pc, #260]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80064ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fb f838 	bl	8001544 <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d8:	f7fb f834 	bl	8001544 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e10e      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ea:	4b39      	ldr	r3, [pc, #228]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f0      	bne.n	80064d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064f6:	4b36      	ldr	r3, [pc, #216]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80064f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064fa:	4b37      	ldr	r3, [pc, #220]	@ (80065d8 <HAL_RCC_OscConfig+0x774>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006506:	0112      	lsls	r2, r2, #4
 8006508:	430a      	orrs	r2, r1
 800650a:	4931      	ldr	r1, [pc, #196]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800650c:	4313      	orrs	r3, r2
 800650e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006514:	3b01      	subs	r3, #1
 8006516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651e:	3b01      	subs	r3, #1
 8006520:	025b      	lsls	r3, r3, #9
 8006522:	b29b      	uxth	r3, r3
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652a:	3b01      	subs	r3, #1
 800652c:	041b      	lsls	r3, r3, #16
 800652e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	3b01      	subs	r3, #1
 800653a:	061b      	lsls	r3, r3, #24
 800653c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006540:	4923      	ldr	r1, [pc, #140]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006546:	4b22      	ldr	r3, [pc, #136]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	4a21      	ldr	r2, [pc, #132]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006552:	4b1f      	ldr	r3, [pc, #124]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006556:	4b21      	ldr	r3, [pc, #132]	@ (80065dc <HAL_RCC_OscConfig+0x778>)
 8006558:	4013      	ands	r3, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800655e:	00d2      	lsls	r2, r2, #3
 8006560:	491b      	ldr	r1, [pc, #108]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006562:	4313      	orrs	r3, r2
 8006564:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006566:	4b1a      	ldr	r3, [pc, #104]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	f023 020c 	bic.w	r2, r3, #12
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	4917      	ldr	r1, [pc, #92]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006574:	4313      	orrs	r3, r2
 8006576:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006578:	4b15      	ldr	r3, [pc, #84]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	f023 0202 	bic.w	r2, r3, #2
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006584:	4912      	ldr	r1, [pc, #72]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006586:	4313      	orrs	r3, r2
 8006588:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800658a:	4b11      	ldr	r3, [pc, #68]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800658c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658e:	4a10      	ldr	r2, [pc, #64]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006596:	4b0e      	ldr	r3, [pc, #56]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 8006598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659a:	4a0d      	ldr	r2, [pc, #52]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 800659c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065a2:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	4a0a      	ldr	r2, [pc, #40]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80065a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065ae:	4b08      	ldr	r3, [pc, #32]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	4a07      	ldr	r2, [pc, #28]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ba:	4b05      	ldr	r3, [pc, #20]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a04      	ldr	r2, [pc, #16]	@ (80065d0 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c6:	f7fa ffbd 	bl	8001544 <HAL_GetTick>
 80065ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065cc:	e011      	b.n	80065f2 <HAL_RCC_OscConfig+0x78e>
 80065ce:	bf00      	nop
 80065d0:	58024400 	.word	0x58024400
 80065d4:	58024800 	.word	0x58024800
 80065d8:	fffffc0c 	.word	0xfffffc0c
 80065dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fa ffb0 	bl	8001544 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e08a      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065f2:	4b47      	ldr	r3, [pc, #284]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCC_OscConfig+0x77c>
 80065fe:	e082      	b.n	8006706 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006600:	4b43      	ldr	r3, [pc, #268]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a42      	ldr	r2, [pc, #264]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800660a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fa ff9a 	bl	8001544 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fa ff96 	bl	8001544 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e070      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006626:	4b3a      	ldr	r3, [pc, #232]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x7b0>
 8006632:	e068      	b.n	8006706 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006634:	4b36      	ldr	r3, [pc, #216]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800663a:	4b35      	ldr	r3, [pc, #212]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 800663c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	2b01      	cmp	r3, #1
 8006646:	d031      	beq.n	80066ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f003 0203 	and.w	r2, r3, #3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006652:	429a      	cmp	r2, r3
 8006654:	d12a      	bne.n	80066ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	091b      	lsrs	r3, r3, #4
 800665a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d122      	bne.n	80066ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006670:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d11a      	bne.n	80066ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	0a5b      	lsrs	r3, r3, #9
 800667a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006682:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d111      	bne.n	80066ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d108      	bne.n	80066ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d001      	beq.n	80066b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e02b      	b.n	8006708 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066b0:	4b17      	ldr	r3, [pc, #92]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 80066b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d01f      	beq.n	8006706 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80066c6:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	4a11      	ldr	r2, [pc, #68]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 80066cc:	f023 0301 	bic.w	r3, r3, #1
 80066d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066d2:	f7fa ff37 	bl	8001544 <HAL_GetTick>
 80066d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80066d8:	bf00      	nop
 80066da:	f7fa ff33 	bl	8001544 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d0f9      	beq.n	80066da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 80066e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <HAL_RCC_OscConfig+0x8b0>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066f2:	00d2      	lsls	r2, r2, #3
 80066f4:	4906      	ldr	r1, [pc, #24]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066fa:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	4a04      	ldr	r2, [pc, #16]	@ (8006710 <HAL_RCC_OscConfig+0x8ac>)
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3730      	adds	r7, #48	@ 0x30
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	58024400 	.word	0x58024400
 8006714:	ffff0007 	.word	0xffff0007

08006718 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e19c      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800672c:	4b8a      	ldr	r3, [pc, #552]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d910      	bls.n	800675c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673a:	4b87      	ldr	r3, [pc, #540]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f023 020f 	bic.w	r2, r3, #15
 8006742:	4985      	ldr	r1, [pc, #532]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4313      	orrs	r3, r2
 8006748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800674a:	4b83      	ldr	r3, [pc, #524]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e184      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d010      	beq.n	800678a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	4b7b      	ldr	r3, [pc, #492]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006774:	429a      	cmp	r2, r3
 8006776:	d908      	bls.n	800678a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006778:	4b78      	ldr	r3, [pc, #480]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	4975      	ldr	r1, [pc, #468]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006786:	4313      	orrs	r3, r2
 8006788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d010      	beq.n	80067b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695a      	ldr	r2, [r3, #20]
 800679a:	4b70      	ldr	r3, [pc, #448]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d908      	bls.n	80067b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067a6:	4b6d      	ldr	r3, [pc, #436]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	496a      	ldr	r1, [pc, #424]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	4b64      	ldr	r3, [pc, #400]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d908      	bls.n	80067e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067d4:	4b61      	ldr	r3, [pc, #388]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	495e      	ldr	r1, [pc, #376]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d010      	beq.n	8006814 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	4b59      	ldr	r3, [pc, #356]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067fe:	429a      	cmp	r2, r3
 8006800:	d908      	bls.n	8006814 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006802:	4b56      	ldr	r3, [pc, #344]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	4953      	ldr	r1, [pc, #332]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006810:	4313      	orrs	r3, r2
 8006812:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	4b4d      	ldr	r3, [pc, #308]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	429a      	cmp	r2, r3
 800682e:	d908      	bls.n	8006842 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006830:	4b4a      	ldr	r3, [pc, #296]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f023 020f 	bic.w	r2, r3, #15
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4947      	ldr	r1, [pc, #284]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800683e:	4313      	orrs	r3, r2
 8006840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d055      	beq.n	80068fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800684e:	4b43      	ldr	r3, [pc, #268]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	4940      	ldr	r1, [pc, #256]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800685c:	4313      	orrs	r3, r2
 800685e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d107      	bne.n	8006878 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006868:	4b3c      	ldr	r3, [pc, #240]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d121      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0f6      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b03      	cmp	r3, #3
 800687e:	d107      	bne.n	8006890 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006880:	4b36      	ldr	r3, [pc, #216]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d115      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e0ea      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d107      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006898:	4b30      	ldr	r3, [pc, #192]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0de      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068a8:	4b2c      	ldr	r3, [pc, #176]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0d6      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068b8:	4b28      	ldr	r3, [pc, #160]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f023 0207 	bic.w	r2, r3, #7
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4925      	ldr	r1, [pc, #148]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ca:	f7fa fe3b 	bl	8001544 <HAL_GetTick>
 80068ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068d0:	e00a      	b.n	80068e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d2:	f7fa fe37 	bl	8001544 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e0be      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e8:	4b1c      	ldr	r3, [pc, #112]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d1eb      	bne.n	80068d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d010      	beq.n	8006928 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	4b14      	ldr	r3, [pc, #80]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	429a      	cmp	r2, r3
 8006914:	d208      	bcs.n	8006928 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006916:	4b11      	ldr	r3, [pc, #68]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f023 020f 	bic.w	r2, r3, #15
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	490e      	ldr	r1, [pc, #56]	@ (800695c <HAL_RCC_ClockConfig+0x244>)
 8006924:	4313      	orrs	r3, r2
 8006926:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006928:	4b0b      	ldr	r3, [pc, #44]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d214      	bcs.n	8006960 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006936:	4b08      	ldr	r3, [pc, #32]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 020f 	bic.w	r2, r3, #15
 800693e:	4906      	ldr	r1, [pc, #24]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006946:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <HAL_RCC_ClockConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d005      	beq.n	8006960 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e086      	b.n	8006a66 <HAL_RCC_ClockConfig+0x34e>
 8006958:	52002000 	.word	0x52002000
 800695c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d010      	beq.n	800698e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	4b3f      	ldr	r3, [pc, #252]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006978:	429a      	cmp	r2, r3
 800697a:	d208      	bcs.n	800698e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800697c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	4939      	ldr	r1, [pc, #228]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 800698a:	4313      	orrs	r3, r2
 800698c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	4b34      	ldr	r3, [pc, #208]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d208      	bcs.n	80069bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069aa:	4b31      	ldr	r3, [pc, #196]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	492e      	ldr	r1, [pc, #184]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	4b28      	ldr	r3, [pc, #160]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d208      	bcs.n	80069ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069d8:	4b25      	ldr	r3, [pc, #148]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	4922      	ldr	r1, [pc, #136]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d208      	bcs.n	8006a18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a06:	4b1a      	ldr	r3, [pc, #104]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	4917      	ldr	r1, [pc, #92]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a18:	f000 f834 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4b14      	ldr	r3, [pc, #80]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	4912      	ldr	r1, [pc, #72]	@ (8006a74 <HAL_RCC_ClockConfig+0x35c>)
 8006a2a:	5ccb      	ldrb	r3, [r1, r3]
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a36:	4b0e      	ldr	r3, [pc, #56]	@ (8006a70 <HAL_RCC_ClockConfig+0x358>)
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8006a74 <HAL_RCC_ClockConfig+0x35c>)
 8006a40:	5cd3      	ldrb	r3, [r2, r3]
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a78 <HAL_RCC_ClockConfig+0x360>)
 8006a4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a50:	4a0a      	ldr	r2, [pc, #40]	@ (8006a7c <HAL_RCC_ClockConfig+0x364>)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a56:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <HAL_RCC_ClockConfig+0x368>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7f9 ffd8 	bl	8000a10 <HAL_InitTick>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	58024400 	.word	0x58024400
 8006a74:	08011ba8 	.word	0x08011ba8
 8006a78:	24000004 	.word	0x24000004
 8006a7c:	24000000 	.word	0x24000000
 8006a80:	24000008 	.word	0x24000008

08006a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	@ 0x24
 8006a88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a8a:	4bb3      	ldr	r3, [pc, #716]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a92:	2b18      	cmp	r3, #24
 8006a94:	f200 8155 	bhi.w	8006d42 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a98:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006b05 	.word	0x08006b05
 8006aa4:	08006d43 	.word	0x08006d43
 8006aa8:	08006d43 	.word	0x08006d43
 8006aac:	08006d43 	.word	0x08006d43
 8006ab0:	08006d43 	.word	0x08006d43
 8006ab4:	08006d43 	.word	0x08006d43
 8006ab8:	08006d43 	.word	0x08006d43
 8006abc:	08006d43 	.word	0x08006d43
 8006ac0:	08006b2b 	.word	0x08006b2b
 8006ac4:	08006d43 	.word	0x08006d43
 8006ac8:	08006d43 	.word	0x08006d43
 8006acc:	08006d43 	.word	0x08006d43
 8006ad0:	08006d43 	.word	0x08006d43
 8006ad4:	08006d43 	.word	0x08006d43
 8006ad8:	08006d43 	.word	0x08006d43
 8006adc:	08006d43 	.word	0x08006d43
 8006ae0:	08006b31 	.word	0x08006b31
 8006ae4:	08006d43 	.word	0x08006d43
 8006ae8:	08006d43 	.word	0x08006d43
 8006aec:	08006d43 	.word	0x08006d43
 8006af0:	08006d43 	.word	0x08006d43
 8006af4:	08006d43 	.word	0x08006d43
 8006af8:	08006d43 	.word	0x08006d43
 8006afc:	08006d43 	.word	0x08006d43
 8006b00:	08006b37 	.word	0x08006b37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b04:	4b94      	ldr	r3, [pc, #592]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d009      	beq.n	8006b24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b10:	4b91      	ldr	r3, [pc, #580]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	4a90      	ldr	r2, [pc, #576]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b22:	e111      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b24:	4b8d      	ldr	r3, [pc, #564]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b26:	61bb      	str	r3, [r7, #24]
      break;
 8006b28:	e10e      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006d60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b2c:	61bb      	str	r3, [r7, #24]
      break;
 8006b2e:	e10b      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b30:	4b8c      	ldr	r3, [pc, #560]	@ (8006d64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b32:	61bb      	str	r3, [r7, #24]
      break;
 8006b34:	e108      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b36:	4b88      	ldr	r3, [pc, #544]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b40:	4b85      	ldr	r3, [pc, #532]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b4c:	4b82      	ldr	r3, [pc, #520]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b56:	4b80      	ldr	r3, [pc, #512]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b5a:	08db      	lsrs	r3, r3, #3
 8006b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80e1 	beq.w	8006d3c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	f000 8083 	beq.w	8006c88 <HAL_RCC_GetSysClockFreq+0x204>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	f200 80a1 	bhi.w	8006ccc <HAL_RCC_GetSysClockFreq+0x248>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_RCC_GetSysClockFreq+0x114>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d056      	beq.n	8006c44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b96:	e099      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b98:	4b6f      	ldr	r3, [pc, #444]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d02d      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	4a6b      	ldr	r2, [pc, #428]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	ee07 3a90 	vmov	s15, r3
 8006bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b62      	ldr	r3, [pc, #392]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bfe:	e087      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c12:	4b51      	ldr	r3, [pc, #324]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c42:	e065      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c56:	4b40      	ldr	r3, [pc, #256]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c86:	e043      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cca:	e021      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cde:	4b1e      	ldr	r3, [pc, #120]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cf2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d10:	4b11      	ldr	r3, [pc, #68]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	0a5b      	lsrs	r3, r3, #9
 8006d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	ee07 3a90 	vmov	s15, r3
 8006d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d34:	ee17 3a90 	vmov	r3, s15
 8006d38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d3a:	e005      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	61bb      	str	r3, [r7, #24]
      break;
 8006d40:	e002      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d42:	4b07      	ldr	r3, [pc, #28]	@ (8006d60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d44:	61bb      	str	r3, [r7, #24]
      break;
 8006d46:	bf00      	nop
  }

  return sysclockfreq;
 8006d48:	69bb      	ldr	r3, [r7, #24]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3724      	adds	r7, #36	@ 0x24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	03d09000 	.word	0x03d09000
 8006d60:	003d0900 	.word	0x003d0900
 8006d64:	007a1200 	.word	0x007a1200
 8006d68:	46000000 	.word	0x46000000
 8006d6c:	4c742400 	.word	0x4c742400
 8006d70:	4a742400 	.word	0x4a742400
 8006d74:	4af42400 	.word	0x4af42400

08006d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d7e:	f7ff fe81 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b10      	ldr	r3, [pc, #64]	@ (8006dc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	490f      	ldr	r1, [pc, #60]	@ (8006dcc <HAL_RCC_GetHCLKFreq+0x54>)
 8006d90:	5ccb      	ldrb	r3, [r1, r3]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	4a09      	ldr	r2, [pc, #36]	@ (8006dcc <HAL_RCC_GetHCLKFreq+0x54>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	fa22 f303 	lsr.w	r3, r2, r3
 8006db2:	4a07      	ldr	r2, [pc, #28]	@ (8006dd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006db4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006db6:	4a07      	ldr	r2, [pc, #28]	@ (8006dd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dbc:	4b04      	ldr	r3, [pc, #16]	@ (8006dd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	08011ba8 	.word	0x08011ba8
 8006dd0:	24000004 	.word	0x24000004
 8006dd4:	24000000 	.word	0x24000000

08006dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ddc:	f7ff ffcc 	bl	8006d78 <HAL_RCC_GetHCLKFreq>
 8006de0:	4602      	mov	r2, r0
 8006de2:	4b06      	ldr	r3, [pc, #24]	@ (8006dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	091b      	lsrs	r3, r3, #4
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	4904      	ldr	r1, [pc, #16]	@ (8006e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dee:	5ccb      	ldrb	r3, [r1, r3]
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	08011ba8 	.word	0x08011ba8

08006e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e08:	f7ff ffb6 	bl	8006d78 <HAL_RCC_GetHCLKFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	4904      	ldr	r1, [pc, #16]	@ (8006e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e1a:	5ccb      	ldrb	r3, [r1, r3]
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	58024400 	.word	0x58024400
 8006e2c:	08011ba8 	.word	0x08011ba8

08006e30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	223f      	movs	r2, #63	@ 0x3f
 8006e3e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e40:	4b1a      	ldr	r3, [pc, #104]	@ (8006eac <HAL_RCC_GetClockConfig+0x7c>)
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f003 0207 	and.w	r2, r3, #7
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006e4c:	4b17      	ldr	r3, [pc, #92]	@ (8006eac <HAL_RCC_GetClockConfig+0x7c>)
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006e58:	4b14      	ldr	r3, [pc, #80]	@ (8006eac <HAL_RCC_GetClockConfig+0x7c>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006e64:	4b11      	ldr	r3, [pc, #68]	@ (8006eac <HAL_RCC_GetClockConfig+0x7c>)
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006e70:	4b0e      	ldr	r3, [pc, #56]	@ (8006eac <HAL_RCC_GetClockConfig+0x7c>)
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006eac <HAL_RCC_GetClockConfig+0x7c>)
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006e88:	4b08      	ldr	r3, [pc, #32]	@ (8006eac <HAL_RCC_GetClockConfig+0x7c>)
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e94:	4b06      	ldr	r3, [pc, #24]	@ (8006eb0 <HAL_RCC_GetClockConfig+0x80>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	601a      	str	r2, [r3, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	52002000 	.word	0x52002000

08006eb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb8:	b0ca      	sub	sp, #296	@ 0x128
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006ed8:	2500      	movs	r5, #0
 8006eda:	ea54 0305 	orrs.w	r3, r4, r5
 8006ede:	d049      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ee6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006eea:	d02f      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006eec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ef0:	d828      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ef6:	d01a      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006efc:	d822      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f06:	d007      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f08:	e01c      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0a:	4bb8      	ldr	r3, [pc, #736]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0e:	4ab7      	ldr	r2, [pc, #732]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f16:	e01a      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	2102      	movs	r1, #2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fc8f 	bl	8008844 <RCCEx_PLL2_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f2c:	e00f      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f32:	3328      	adds	r3, #40	@ 0x28
 8006f34:	2102      	movs	r1, #2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fd36 	bl	80089a8 <RCCEx_PLL3_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f42:	e004      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f4a:	e000      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f56:	4ba5      	ldr	r3, [pc, #660]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f64:	4aa1      	ldr	r2, [pc, #644]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f66:	430b      	orrs	r3, r1
 8006f68:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f6a:	e003      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f80:	f04f 0900 	mov.w	r9, #0
 8006f84:	ea58 0309 	orrs.w	r3, r8, r9
 8006f88:	d047      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d82a      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f94:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fb1 	.word	0x08006fb1
 8006fa0:	08006fbf 	.word	0x08006fbf
 8006fa4:	08006fd5 	.word	0x08006fd5
 8006fa8:	08006ff3 	.word	0x08006ff3
 8006fac:	08006ff3 	.word	0x08006ff3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb0:	4b8e      	ldr	r3, [pc, #568]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	4a8d      	ldr	r2, [pc, #564]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fbc:	e01a      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 fc3c 	bl	8008844 <RCCEx_PLL2_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fd2:	e00f      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	3328      	adds	r3, #40	@ 0x28
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 fce3 	bl	80089a8 <RCCEx_PLL3_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fe8:	e004      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ff0:	e000      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007000:	f023 0107 	bic.w	r1, r3, #7
 8007004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700a:	4a78      	ldr	r2, [pc, #480]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800700c:	430b      	orrs	r3, r1
 800700e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007010:	e003      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007026:	f04f 0b00 	mov.w	fp, #0
 800702a:	ea5a 030b 	orrs.w	r3, sl, fp
 800702e:	d04c      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800703a:	d030      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800703c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007040:	d829      	bhi.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007042:	2bc0      	cmp	r3, #192	@ 0xc0
 8007044:	d02d      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007046:	2bc0      	cmp	r3, #192	@ 0xc0
 8007048:	d825      	bhi.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800704a:	2b80      	cmp	r3, #128	@ 0x80
 800704c:	d018      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800704e:	2b80      	cmp	r3, #128	@ 0x80
 8007050:	d821      	bhi.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007056:	2b40      	cmp	r3, #64	@ 0x40
 8007058:	d007      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800705a:	e01c      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705c:	4b63      	ldr	r3, [pc, #396]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	4a62      	ldr	r2, [pc, #392]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007068:	e01c      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706e:	3308      	adds	r3, #8
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f001 fbe6 	bl	8008844 <RCCEx_PLL2_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800707e:	e011      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007084:	3328      	adds	r3, #40	@ 0x28
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fc8d 	bl	80089a8 <RCCEx_PLL3_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007094:	e006      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800709c:	e002      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800709e:	bf00      	nop
 80070a0:	e000      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80070a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070ac:	4b4f      	ldr	r3, [pc, #316]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ba:	4a4c      	ldr	r2, [pc, #304]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070bc:	430b      	orrs	r3, r1
 80070be:	6513      	str	r3, [r2, #80]	@ 0x50
 80070c0:	e003      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80070d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80070da:	2300      	movs	r3, #0
 80070dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80070e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80070e4:	460b      	mov	r3, r1
 80070e6:	4313      	orrs	r3, r2
 80070e8:	d053      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070f6:	d035      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80070f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070fc:	d82e      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007102:	d031      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007104:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007108:	d828      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800710a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800710e:	d01a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007114:	d822      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800711a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800711e:	d007      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007120:	e01c      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007122:	4b32      	ldr	r3, [pc, #200]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	4a31      	ldr	r2, [pc, #196]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800712c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800712e:	e01c      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007134:	3308      	adds	r3, #8
 8007136:	2100      	movs	r1, #0
 8007138:	4618      	mov	r0, r3
 800713a:	f001 fb83 	bl	8008844 <RCCEx_PLL2_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007144:	e011      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	3328      	adds	r3, #40	@ 0x28
 800714c:	2100      	movs	r1, #0
 800714e:	4618      	mov	r0, r3
 8007150:	f001 fc2a 	bl	80089a8 <RCCEx_PLL3_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800715a:	e006      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007162:	e002      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007164:	bf00      	nop
 8007166:	e000      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007172:	4b1e      	ldr	r3, [pc, #120]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007176:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007182:	4a1a      	ldr	r2, [pc, #104]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007184:	430b      	orrs	r3, r1
 8007186:	6593      	str	r3, [r2, #88]	@ 0x58
 8007188:	e003      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800718e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800719e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80071a2:	2300      	movs	r3, #0
 80071a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80071ac:	460b      	mov	r3, r1
 80071ae:	4313      	orrs	r3, r2
 80071b0:	d056      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071be:	d038      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80071c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071c4:	d831      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071ca:	d034      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80071cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071d0:	d82b      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071d6:	d01d      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80071d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071dc:	d825      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d006      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80071e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071e6:	d00a      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80071e8:	e01f      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071ea:	bf00      	nop
 80071ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f0:	4ba2      	ldr	r3, [pc, #648]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	4aa1      	ldr	r2, [pc, #644]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071fc:	e01c      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007202:	3308      	adds	r3, #8
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fb1c 	bl	8008844 <RCCEx_PLL2_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007212:	e011      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	3328      	adds	r3, #40	@ 0x28
 800721a:	2100      	movs	r1, #0
 800721c:	4618      	mov	r0, r3
 800721e:	f001 fbc3 	bl	80089a8 <RCCEx_PLL3_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007228:	e006      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007230:	e002      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007232:	bf00      	nop
 8007234:	e000      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007240:	4b8e      	ldr	r3, [pc, #568]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007244:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007250:	4a8a      	ldr	r2, [pc, #552]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007252:	430b      	orrs	r3, r1
 8007254:	6593      	str	r3, [r2, #88]	@ 0x58
 8007256:	e003      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800726c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007270:	2300      	movs	r3, #0
 8007272:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007276:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800727a:	460b      	mov	r3, r1
 800727c:	4313      	orrs	r3, r2
 800727e:	d03a      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007286:	2b30      	cmp	r3, #48	@ 0x30
 8007288:	d01f      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800728a:	2b30      	cmp	r3, #48	@ 0x30
 800728c:	d819      	bhi.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800728e:	2b20      	cmp	r3, #32
 8007290:	d00c      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d815      	bhi.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d019      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800729a:	2b10      	cmp	r3, #16
 800729c:	d111      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729e:	4b77      	ldr	r3, [pc, #476]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	4a76      	ldr	r2, [pc, #472]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80072aa:	e011      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	3308      	adds	r3, #8
 80072b2:	2102      	movs	r1, #2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 fac5 	bl	8008844 <RCCEx_PLL2_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80072c0:	e006      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072c8:	e002      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80072ca:	bf00      	nop
 80072cc:	e000      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80072ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072d8:	4b68      	ldr	r3, [pc, #416]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e6:	4a65      	ldr	r2, [pc, #404]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072e8:	430b      	orrs	r3, r1
 80072ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007302:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007306:	2300      	movs	r3, #0
 8007308:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800730c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007310:	460b      	mov	r3, r1
 8007312:	4313      	orrs	r3, r2
 8007314:	d051      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007320:	d035      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007326:	d82e      	bhi.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007328:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800732c:	d031      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800732e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007332:	d828      	bhi.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007338:	d01a      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800733a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733e:	d822      	bhi.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007348:	d007      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800734a:	e01c      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734c:	4b4b      	ldr	r3, [pc, #300]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	4a4a      	ldr	r2, [pc, #296]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007358:	e01c      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735e:	3308      	adds	r3, #8
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f001 fa6e 	bl	8008844 <RCCEx_PLL2_Config>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800736e:	e011      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007374:	3328      	adds	r3, #40	@ 0x28
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f001 fb15 	bl	80089a8 <RCCEx_PLL3_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007384:	e006      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800738c:	e002      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800739c:	4b37      	ldr	r3, [pc, #220]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800739e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073aa:	4a34      	ldr	r2, [pc, #208]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80073b0:	e003      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80073c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073ca:	2300      	movs	r3, #0
 80073cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80073d4:	460b      	mov	r3, r1
 80073d6:	4313      	orrs	r3, r2
 80073d8:	d056      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073e4:	d033      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80073e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073ea:	d82c      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073f0:	d02f      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80073f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073f6:	d826      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073fc:	d02b      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80073fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007402:	d820      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007408:	d012      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800740a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800740e:	d81a      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007410:	2b00      	cmp	r3, #0
 8007412:	d022      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007418:	d115      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741e:	3308      	adds	r3, #8
 8007420:	2101      	movs	r1, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fa0e 	bl	8008844 <RCCEx_PLL2_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800742e:	e015      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007434:	3328      	adds	r3, #40	@ 0x28
 8007436:	2101      	movs	r1, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fab5 	bl	80089a8 <RCCEx_PLL3_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007444:	e00a      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800744c:	e006      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800744e:	bf00      	nop
 8007450:	e004      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007452:	bf00      	nop
 8007454:	e002      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007456:	bf00      	nop
 8007458:	e000      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800745a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10d      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007468:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007472:	4a02      	ldr	r2, [pc, #8]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007474:	430b      	orrs	r3, r1
 8007476:	6513      	str	r3, [r2, #80]	@ 0x50
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800747a:	bf00      	nop
 800747c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007498:	2300      	movs	r3, #0
 800749a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800749e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4313      	orrs	r3, r2
 80074a6:	d055      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074b4:	d033      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80074b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074ba:	d82c      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c0:	d02f      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c6:	d826      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074cc:	d02b      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80074ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074d2:	d820      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074d8:	d012      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80074da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074de:	d81a      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d022      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80074e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074e8:	d115      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ee:	3308      	adds	r3, #8
 80074f0:	2101      	movs	r1, #1
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 f9a6 	bl	8008844 <RCCEx_PLL2_Config>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074fe:	e015      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	3328      	adds	r3, #40	@ 0x28
 8007506:	2101      	movs	r1, #1
 8007508:	4618      	mov	r0, r3
 800750a:	f001 fa4d 	bl	80089a8 <RCCEx_PLL3_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007514:	e00a      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800751c:	e006      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800751e:	bf00      	nop
 8007520:	e004      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007522:	bf00      	nop
 8007524:	e002      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007526:	bf00      	nop
 8007528:	e000      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800752a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007534:	4ba3      	ldr	r3, [pc, #652]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007538:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007544:	4a9f      	ldr	r2, [pc, #636]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007546:	430b      	orrs	r3, r1
 8007548:	6593      	str	r3, [r2, #88]	@ 0x58
 800754a:	e003      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007564:	2300      	movs	r3, #0
 8007566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800756a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800756e:	460b      	mov	r3, r1
 8007570:	4313      	orrs	r3, r2
 8007572:	d037      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800757e:	d00e      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007584:	d816      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d018      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800758a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800758e:	d111      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4b8c      	ldr	r3, [pc, #560]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	4a8b      	ldr	r2, [pc, #556]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800759a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800759c:	e00f      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	3308      	adds	r3, #8
 80075a4:	2101      	movs	r1, #1
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 f94c 	bl	8008844 <RCCEx_PLL2_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075ba:	e000      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80075bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075c6:	4b7f      	ldr	r3, [pc, #508]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d4:	4a7b      	ldr	r2, [pc, #492]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80075da:	e003      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80075f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075f4:	2300      	movs	r3, #0
 80075f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80075fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d039      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800760a:	2b03      	cmp	r3, #3
 800760c:	d81c      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800760e:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007651 	.word	0x08007651
 8007618:	08007625 	.word	0x08007625
 800761c:	08007633 	.word	0x08007633
 8007620:	08007651 	.word	0x08007651
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007624:	4b67      	ldr	r3, [pc, #412]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4a66      	ldr	r2, [pc, #408]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007630:	e00f      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007636:	3308      	adds	r3, #8
 8007638:	2102      	movs	r1, #2
 800763a:	4618      	mov	r0, r3
 800763c:	f001 f902 	bl	8008844 <RCCEx_PLL2_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800765a:	4b5a      	ldr	r3, [pc, #360]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800765c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800765e:	f023 0103 	bic.w	r1, r3, #3
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007668:	4a56      	ldr	r2, [pc, #344]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800766a:	430b      	orrs	r3, r1
 800766c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007688:	2300      	movs	r3, #0
 800768a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800768e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007692:	460b      	mov	r3, r1
 8007694:	4313      	orrs	r3, r2
 8007696:	f000 809f 	beq.w	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800769a:	4b4b      	ldr	r3, [pc, #300]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a4a      	ldr	r2, [pc, #296]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076a6:	f7f9 ff4d 	bl	8001544 <HAL_GetTick>
 80076aa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076ae:	e00b      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076b0:	f7f9 ff48 	bl	8001544 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b64      	cmp	r3, #100	@ 0x64
 80076be:	d903      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076c6:	e005      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076c8:	4b3f      	ldr	r3, [pc, #252]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ed      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80076d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d179      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80076dc:	4b39      	ldr	r3, [pc, #228]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076e8:	4053      	eors	r3, r2
 80076ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d015      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076f2:	4b34      	ldr	r3, [pc, #208]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076fe:	4b31      	ldr	r3, [pc, #196]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007702:	4a30      	ldr	r2, [pc, #192]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007708:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800770a:	4b2e      	ldr	r3, [pc, #184]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	4a2d      	ldr	r2, [pc, #180]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007714:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007716:	4a2b      	ldr	r2, [pc, #172]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800771c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800772a:	d118      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772c:	f7f9 ff0a 	bl	8001544 <HAL_GetTick>
 8007730:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007734:	e00d      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007736:	f7f9 ff05 	bl	8001544 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007740:	1ad2      	subs	r2, r2, r3
 8007742:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007746:	429a      	cmp	r2, r3
 8007748:	d903      	bls.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007750:	e005      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007752:	4b1c      	ldr	r3, [pc, #112]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0eb      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800775e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007762:	2b00      	cmp	r3, #0
 8007764:	d129      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800776e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007776:	d10e      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007778:	4b12      	ldr	r3, [pc, #72]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007788:	091a      	lsrs	r2, r3, #4
 800778a:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800778c:	4013      	ands	r3, r2
 800778e:	4a0d      	ldr	r2, [pc, #52]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007790:	430b      	orrs	r3, r1
 8007792:	6113      	str	r3, [r2, #16]
 8007794:	e005      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007796:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	4a0a      	ldr	r2, [pc, #40]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800779c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077a0:	6113      	str	r3, [r2, #16]
 80077a2:	4b08      	ldr	r3, [pc, #32]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077b2:	4a04      	ldr	r2, [pc, #16]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b4:	430b      	orrs	r3, r1
 80077b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80077b8:	e00e      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80077c2:	e009      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80077c4:	58024400 	.word	0x58024400
 80077c8:	58024800 	.word	0x58024800
 80077cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f002 0301 	and.w	r3, r2, #1
 80077e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f000 8089 	beq.w	800790c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007800:	2b28      	cmp	r3, #40	@ 0x28
 8007802:	d86b      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007804:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	080078e5 	.word	0x080078e5
 8007810:	080078dd 	.word	0x080078dd
 8007814:	080078dd 	.word	0x080078dd
 8007818:	080078dd 	.word	0x080078dd
 800781c:	080078dd 	.word	0x080078dd
 8007820:	080078dd 	.word	0x080078dd
 8007824:	080078dd 	.word	0x080078dd
 8007828:	080078dd 	.word	0x080078dd
 800782c:	080078b1 	.word	0x080078b1
 8007830:	080078dd 	.word	0x080078dd
 8007834:	080078dd 	.word	0x080078dd
 8007838:	080078dd 	.word	0x080078dd
 800783c:	080078dd 	.word	0x080078dd
 8007840:	080078dd 	.word	0x080078dd
 8007844:	080078dd 	.word	0x080078dd
 8007848:	080078dd 	.word	0x080078dd
 800784c:	080078c7 	.word	0x080078c7
 8007850:	080078dd 	.word	0x080078dd
 8007854:	080078dd 	.word	0x080078dd
 8007858:	080078dd 	.word	0x080078dd
 800785c:	080078dd 	.word	0x080078dd
 8007860:	080078dd 	.word	0x080078dd
 8007864:	080078dd 	.word	0x080078dd
 8007868:	080078dd 	.word	0x080078dd
 800786c:	080078e5 	.word	0x080078e5
 8007870:	080078dd 	.word	0x080078dd
 8007874:	080078dd 	.word	0x080078dd
 8007878:	080078dd 	.word	0x080078dd
 800787c:	080078dd 	.word	0x080078dd
 8007880:	080078dd 	.word	0x080078dd
 8007884:	080078dd 	.word	0x080078dd
 8007888:	080078dd 	.word	0x080078dd
 800788c:	080078e5 	.word	0x080078e5
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078dd 	.word	0x080078dd
 8007898:	080078dd 	.word	0x080078dd
 800789c:	080078dd 	.word	0x080078dd
 80078a0:	080078dd 	.word	0x080078dd
 80078a4:	080078dd 	.word	0x080078dd
 80078a8:	080078dd 	.word	0x080078dd
 80078ac:	080078e5 	.word	0x080078e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	3308      	adds	r3, #8
 80078b6:	2101      	movs	r1, #1
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 ffc3 	bl	8008844 <RCCEx_PLL2_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80078c4:	e00f      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	3328      	adds	r3, #40	@ 0x28
 80078cc:	2101      	movs	r1, #1
 80078ce:	4618      	mov	r0, r3
 80078d0:	f001 f86a 	bl	80089a8 <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80078ee:	4bbf      	ldr	r3, [pc, #764]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078fc:	4abb      	ldr	r2, [pc, #748]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078fe:	430b      	orrs	r3, r1
 8007900:	6553      	str	r3, [r2, #84]	@ 0x54
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 0302 	and.w	r3, r2, #2
 8007918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007922:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	d041      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800792c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007932:	2b05      	cmp	r3, #5
 8007934:	d824      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007936:	a201      	add	r2, pc, #4	@ (adr r2, 800793c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007989 	.word	0x08007989
 8007940:	08007955 	.word	0x08007955
 8007944:	0800796b 	.word	0x0800796b
 8007948:	08007989 	.word	0x08007989
 800794c:	08007989 	.word	0x08007989
 8007950:	08007989 	.word	0x08007989
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007958:	3308      	adds	r3, #8
 800795a:	2101      	movs	r1, #1
 800795c:	4618      	mov	r0, r3
 800795e:	f000 ff71 	bl	8008844 <RCCEx_PLL2_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007968:	e00f      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796e:	3328      	adds	r3, #40	@ 0x28
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f001 f818 	bl	80089a8 <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800797e:	e004      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007986:	e000      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007992:	4b96      	ldr	r3, [pc, #600]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	f023 0107 	bic.w	r1, r3, #7
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079a0:	4a92      	ldr	r2, [pc, #584]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079a2:	430b      	orrs	r3, r1
 80079a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80079a6:	e003      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f002 0304 	and.w	r3, r2, #4
 80079bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079c0:	2300      	movs	r3, #0
 80079c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4313      	orrs	r3, r2
 80079ce:	d044      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079d8:	2b05      	cmp	r3, #5
 80079da:	d825      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80079dc:	a201      	add	r2, pc, #4	@ (adr r2, 80079e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a31 	.word	0x08007a31
 80079e8:	080079fd 	.word	0x080079fd
 80079ec:	08007a13 	.word	0x08007a13
 80079f0:	08007a31 	.word	0x08007a31
 80079f4:	08007a31 	.word	0x08007a31
 80079f8:	08007a31 	.word	0x08007a31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a00:	3308      	adds	r3, #8
 8007a02:	2101      	movs	r1, #1
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 ff1d 	bl	8008844 <RCCEx_PLL2_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a10:	e00f      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	3328      	adds	r3, #40	@ 0x28
 8007a18:	2101      	movs	r1, #1
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 ffc4 	bl	80089a8 <RCCEx_PLL3_Config>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a26:	e004      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a2e:	e000      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a3a:	4b6c      	ldr	r3, [pc, #432]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3e:	f023 0107 	bic.w	r1, r3, #7
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a4a:	4a68      	ldr	r2, [pc, #416]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a50:	e003      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f002 0320 	and.w	r3, r2, #32
 8007a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a74:	460b      	mov	r3, r1
 8007a76:	4313      	orrs	r3, r2
 8007a78:	d055      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a86:	d033      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a8c:	d82c      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a92:	d02f      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a98:	d826      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a9e:	d02b      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007aa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007aa4:	d820      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aaa:	d012      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ab0:	d81a      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d022      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aba:	d115      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 febd 	bl	8008844 <RCCEx_PLL2_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ad0:	e015      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	3328      	adds	r3, #40	@ 0x28
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 ff64 	bl	80089a8 <RCCEx_PLL3_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ae6:	e00a      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aee:	e006      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007af0:	bf00      	nop
 8007af2:	e004      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007af4:	bf00      	nop
 8007af6:	e002      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007af8:	bf00      	nop
 8007afa:	e000      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10b      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b06:	4b39      	ldr	r3, [pc, #228]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b16:	4a35      	ldr	r2, [pc, #212]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b1c:	e003      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b36:	2300      	movs	r3, #0
 8007b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4313      	orrs	r3, r2
 8007b44:	d058      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b52:	d033      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007b54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b58:	d82c      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b5e:	d02f      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b64:	d826      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b6a:	d02b      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007b6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b70:	d820      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b76:	d012      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b7c:	d81a      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d022      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b86:	d115      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fe57 	bl	8008844 <RCCEx_PLL2_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b9c:	e015      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	3328      	adds	r3, #40	@ 0x28
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fefe 	bl	80089a8 <RCCEx_PLL3_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007bb2:	e00a      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bba:	e006      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bbc:	bf00      	nop
 8007bbe:	e004      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bc0:	bf00      	nop
 8007bc2:	e002      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bc4:	bf00      	nop
 8007bc6:	e000      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bd2:	4b06      	ldr	r3, [pc, #24]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007be2:	4a02      	ldr	r2, [pc, #8]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007be4:	430b      	orrs	r3, r1
 8007be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007be8:	e006      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007bea:	bf00      	nop
 8007bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c12:	460b      	mov	r3, r1
 8007c14:	4313      	orrs	r3, r2
 8007c16:	d055      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c24:	d033      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007c26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c2a:	d82c      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c30:	d02f      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c36:	d826      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c3c:	d02b      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007c3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c42:	d820      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c48:	d012      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c4e:	d81a      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d022      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c58:	d115      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	3308      	adds	r3, #8
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fdee 	bl	8008844 <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e015      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	3328      	adds	r3, #40	@ 0x28
 8007c76:	2102      	movs	r1, #2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fe95 	bl	80089a8 <RCCEx_PLL3_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c84:	e00a      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c8c:	e006      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c8e:	bf00      	nop
 8007c90:	e004      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10b      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ca4:	4ba1      	ldr	r3, [pc, #644]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cb4:	4a9d      	ldr	r2, [pc, #628]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cba:	e003      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f002 0308 	and.w	r3, r2, #8
 8007cd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d01e      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf0:	d10c      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf6:	3328      	adds	r3, #40	@ 0x28
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fe54 	bl	80089a8 <RCCEx_PLL3_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d0c:	4b87      	ldr	r3, [pc, #540]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d1c:	4a83      	ldr	r2, [pc, #524]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f002 0310 	and.w	r3, r2, #16
 8007d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d32:	2300      	movs	r3, #0
 8007d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	d01e      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d4e:	d10c      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d54:	3328      	adds	r3, #40	@ 0x28
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fe25 	bl	80089a8 <RCCEx_PLL3_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d6a:	4b70      	ldr	r3, [pc, #448]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d7a:	4a6c      	ldr	r2, [pc, #432]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	d03e      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dac:	d022      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007db2:	d81b      	bhi.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007dbe:	e015      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fd3b 	bl	8008844 <RCCEx_PLL2_Config>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007dd4:	e00f      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dda:	3328      	adds	r3, #40	@ 0x28
 8007ddc:	2102      	movs	r1, #2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fde2 	bl	80089a8 <RCCEx_PLL3_Config>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007dea:	e004      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007df2:	e000      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e0e:	4a47      	ldr	r2, [pc, #284]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e14:	e003      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e34:	460b      	mov	r3, r1
 8007e36:	4313      	orrs	r3, r2
 8007e38:	d03b      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e46:	d01f      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007e48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e4c:	d818      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e52:	d003      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007e54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e58:	d007      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007e5a:	e011      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5c:	4b33      	ldr	r3, [pc, #204]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e60:	4a32      	ldr	r2, [pc, #200]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e68:	e00f      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6e:	3328      	adds	r3, #40	@ 0x28
 8007e70:	2101      	movs	r1, #1
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fd98 	bl	80089a8 <RCCEx_PLL3_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e7e:	e004      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e86:	e000      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e92:	4b26      	ldr	r3, [pc, #152]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea2:	4a22      	ldr	r2, [pc, #136]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ea8:	e003      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ec4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	d034      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007edc:	d007      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007ede:	e011      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee0:	4b12      	ldr	r3, [pc, #72]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	4a11      	ldr	r2, [pc, #68]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007eec:	e00e      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	2102      	movs	r1, #2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fca4 	bl	8008844 <RCCEx_PLL2_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10d      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f14:	4b05      	ldr	r3, [pc, #20]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f22:	4a02      	ldr	r2, [pc, #8]	@ (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f24:	430b      	orrs	r3, r1
 8007f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f28:	e006      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007f2a:	bf00      	nop
 8007f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f46:	2300      	movs	r3, #0
 8007f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4313      	orrs	r3, r2
 8007f52:	d00c      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	3328      	adds	r3, #40	@ 0x28
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fd23 	bl	80089a8 <RCCEx_PLL3_Config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007f84:	460b      	mov	r3, r1
 8007f86:	4313      	orrs	r3, r2
 8007f88:	d038      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f96:	d018      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f9c:	d811      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa2:	d014      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa8:	d80b      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d011      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb2:	d106      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb4:	4bc3      	ldr	r3, [pc, #780]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb8:	4ac2      	ldr	r2, [pc, #776]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fc8:	e004      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fdc:	4bb9      	ldr	r3, [pc, #740]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fec:	4ab5      	ldr	r2, [pc, #724]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ff2:	e003      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008008:	65bb      	str	r3, [r7, #88]	@ 0x58
 800800a:	2300      	movs	r3, #0
 800800c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800800e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d009      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008018:	4baa      	ldr	r3, [pc, #680]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800801a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008026:	4aa7      	ldr	r2, [pc, #668]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008028:	430b      	orrs	r3, r1
 800802a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008038:	653b      	str	r3, [r7, #80]	@ 0x50
 800803a:	2300      	movs	r3, #0
 800803c:	657b      	str	r3, [r7, #84]	@ 0x54
 800803e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008042:	460b      	mov	r3, r1
 8008044:	4313      	orrs	r3, r2
 8008046:	d00a      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008048:	4b9e      	ldr	r3, [pc, #632]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008054:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008058:	4a9a      	ldr	r2, [pc, #616]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805a:	430b      	orrs	r3, r1
 800805c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800806a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800806c:	2300      	movs	r3, #0
 800806e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008070:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008074:	460b      	mov	r3, r1
 8008076:	4313      	orrs	r3, r2
 8008078:	d009      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800807a:	4b92      	ldr	r3, [pc, #584]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800807c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800807e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008088:	4a8e      	ldr	r2, [pc, #568]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800808a:	430b      	orrs	r3, r1
 800808c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800809a:	643b      	str	r3, [r7, #64]	@ 0x40
 800809c:	2300      	movs	r3, #0
 800809e:	647b      	str	r3, [r7, #68]	@ 0x44
 80080a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80080a4:	460b      	mov	r3, r1
 80080a6:	4313      	orrs	r3, r2
 80080a8:	d00e      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080aa:	4b86      	ldr	r3, [pc, #536]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	4a85      	ldr	r2, [pc, #532]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080b4:	6113      	str	r3, [r2, #16]
 80080b6:	4b83      	ldr	r3, [pc, #524]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080b8:	6919      	ldr	r1, [r3, #16]
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80080c2:	4a80      	ldr	r2, [pc, #512]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80080d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80080de:	460b      	mov	r3, r1
 80080e0:	4313      	orrs	r3, r2
 80080e2:	d009      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080e4:	4b77      	ldr	r3, [pc, #476]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f2:	4a74      	ldr	r2, [pc, #464]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008104:	633b      	str	r3, [r7, #48]	@ 0x30
 8008106:	2300      	movs	r3, #0
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
 800810a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800810e:	460b      	mov	r3, r1
 8008110:	4313      	orrs	r3, r2
 8008112:	d00a      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008114:	4b6b      	ldr	r3, [pc, #428]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008118:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008124:	4a67      	ldr	r2, [pc, #412]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008126:	430b      	orrs	r3, r1
 8008128:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800812a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	2100      	movs	r1, #0
 8008134:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800813c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008140:	460b      	mov	r3, r1
 8008142:	4313      	orrs	r3, r2
 8008144:	d011      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	3308      	adds	r3, #8
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fb78 	bl	8008844 <RCCEx_PLL2_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800815a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	2100      	movs	r1, #0
 8008174:	6239      	str	r1, [r7, #32]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	627b      	str	r3, [r7, #36]	@ 0x24
 800817c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008180:	460b      	mov	r3, r1
 8008182:	4313      	orrs	r3, r2
 8008184:	d011      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818a:	3308      	adds	r3, #8
 800818c:	2101      	movs	r1, #1
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fb58 	bl	8008844 <RCCEx_PLL2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800819a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	2100      	movs	r1, #0
 80081b4:	61b9      	str	r1, [r7, #24]
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80081c0:	460b      	mov	r3, r1
 80081c2:	4313      	orrs	r3, r2
 80081c4:	d011      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ca:	3308      	adds	r3, #8
 80081cc:	2102      	movs	r1, #2
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fb38 	bl	8008844 <RCCEx_PLL2_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	2100      	movs	r1, #0
 80081f4:	6139      	str	r1, [r7, #16]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008200:	460b      	mov	r3, r1
 8008202:	4313      	orrs	r3, r2
 8008204:	d011      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820a:	3328      	adds	r3, #40	@ 0x28
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fbca 	bl	80089a8 <RCCEx_PLL3_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800821a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	2100      	movs	r1, #0
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	f003 0310 	and.w	r3, r3, #16
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008240:	460b      	mov	r3, r1
 8008242:	4313      	orrs	r3, r2
 8008244:	d011      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824a:	3328      	adds	r3, #40	@ 0x28
 800824c:	2101      	movs	r1, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fbaa 	bl	80089a8 <RCCEx_PLL3_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800825a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	2100      	movs	r1, #0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008280:	460b      	mov	r3, r1
 8008282:	4313      	orrs	r3, r2
 8008284:	d011      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	3328      	adds	r3, #40	@ 0x28
 800828c:	2102      	movs	r1, #2
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fb8a 	bl	80089a8 <RCCEx_PLL3_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800829a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80082aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e000      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80082be:	46bd      	mov	sp, r7
 80082c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082c4:	58024400 	.word	0x58024400

080082c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082cc:	f7fe fd54 	bl	8006d78 <HAL_RCC_GetHCLKFreq>
 80082d0:	4602      	mov	r2, r0
 80082d2:	4b06      	ldr	r3, [pc, #24]	@ (80082ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	091b      	lsrs	r3, r3, #4
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	4904      	ldr	r1, [pc, #16]	@ (80082f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082de:	5ccb      	ldrb	r3, [r1, r3]
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	58024400 	.word	0x58024400
 80082f0:	08011ba8 	.word	0x08011ba8

080082f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b089      	sub	sp, #36	@ 0x24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082fc:	4ba1      	ldr	r3, [pc, #644]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008306:	4b9f      	ldr	r3, [pc, #636]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830a:	0b1b      	lsrs	r3, r3, #12
 800830c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008310:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008312:	4b9c      	ldr	r3, [pc, #624]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008316:	091b      	lsrs	r3, r3, #4
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800831e:	4b99      	ldr	r3, [pc, #612]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008322:	08db      	lsrs	r3, r3, #3
 8008324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	fb02 f303 	mul.w	r3, r2, r3
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8111 	beq.w	8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b02      	cmp	r3, #2
 8008346:	f000 8083 	beq.w	8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b02      	cmp	r3, #2
 800834e:	f200 80a1 	bhi.w	8008494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d056      	beq.n	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800835e:	e099      	b.n	8008494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008360:	4b88      	ldr	r3, [pc, #544]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b00      	cmp	r3, #0
 800836a:	d02d      	beq.n	80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800836c:	4b85      	ldr	r3, [pc, #532]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	08db      	lsrs	r3, r3, #3
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	4a84      	ldr	r2, [pc, #528]	@ (8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
 800837c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	ee07 3a90 	vmov	s15, r3
 8008384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008396:	4b7b      	ldr	r3, [pc, #492]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083c6:	e087      	b.n	80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008590 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083da:	4b6a      	ldr	r3, [pc, #424]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800840a:	e065      	b.n	80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008416:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800841a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841e:	4b59      	ldr	r3, [pc, #356]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800842e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008432:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800843a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800844a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800844e:	e043      	b.n	80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800845e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008462:	4b48      	ldr	r3, [pc, #288]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008472:	ed97 6a03 	vldr	s12, [r7, #12]
 8008476:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800847a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800847e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800848a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800848e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008492:	e021      	b.n	80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a6:	4b37      	ldr	r3, [pc, #220]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80084d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084dc:	0a5b      	lsrs	r3, r3, #9
 80084de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084fe:	ee17 2a90 	vmov	r2, s15
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008506:	4b1f      	ldr	r3, [pc, #124]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008510:	ee07 3a90 	vmov	s15, r3
 8008514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008518:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800851c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008520:	edd7 6a07 	vldr	s13, [r7, #28]
 8008524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800852c:	ee17 2a90 	vmov	r2, s15
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008534:	4b13      	ldr	r3, [pc, #76]	@ (8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008538:	0e1b      	lsrs	r3, r3, #24
 800853a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800854a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800854e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800855a:	ee17 2a90 	vmov	r2, s15
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008562:	e008      	b.n	8008576 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	609a      	str	r2, [r3, #8]
}
 8008576:	bf00      	nop
 8008578:	3724      	adds	r7, #36	@ 0x24
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	58024400 	.word	0x58024400
 8008588:	03d09000 	.word	0x03d09000
 800858c:	46000000 	.word	0x46000000
 8008590:	4c742400 	.word	0x4c742400
 8008594:	4a742400 	.word	0x4a742400
 8008598:	4af42400 	.word	0x4af42400

0800859c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800859c:	b480      	push	{r7}
 800859e:	b089      	sub	sp, #36	@ 0x24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085a4:	4ba1      	ldr	r3, [pc, #644]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	f003 0303 	and.w	r3, r3, #3
 80085ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80085ae:	4b9f      	ldr	r3, [pc, #636]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	0d1b      	lsrs	r3, r3, #20
 80085b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80085ba:	4b9c      	ldr	r3, [pc, #624]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80085c6:	4b99      	ldr	r3, [pc, #612]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ca:	08db      	lsrs	r3, r3, #3
 80085cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	fb02 f303 	mul.w	r3, r2, r3
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8111 	beq.w	800880c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	f000 8083 	beq.w	80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	f200 80a1 	bhi.w	800873c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d056      	beq.n	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008606:	e099      	b.n	800873c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008608:	4b88      	ldr	r3, [pc, #544]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d02d      	beq.n	8008670 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008614:	4b85      	ldr	r3, [pc, #532]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	08db      	lsrs	r3, r3, #3
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	4a84      	ldr	r2, [pc, #528]	@ (8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008620:	fa22 f303 	lsr.w	r3, r2, r3
 8008624:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863e:	4b7b      	ldr	r3, [pc, #492]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008652:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800866e:	e087      	b.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008838 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800867e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008682:	4b6a      	ldr	r3, [pc, #424]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008692:	ed97 6a03 	vldr	s12, [r7, #12]
 8008696:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800869a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b2:	e065      	b.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800883c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c6:	4b59      	ldr	r3, [pc, #356]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086f6:	e043      	b.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870a:	4b48      	ldr	r3, [pc, #288]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871a:	ed97 6a03 	vldr	s12, [r7, #12]
 800871e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800872a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800872e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800873a:	e021      	b.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008746:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800883c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800874a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874e:	4b37      	ldr	r3, [pc, #220]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008762:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800877e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008780:	4b2a      	ldr	r3, [pc, #168]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008784:	0a5b      	lsrs	r3, r3, #9
 8008786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879a:	edd7 6a07 	vldr	s13, [r7, #28]
 800879e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a6:	ee17 2a90 	vmov	r2, s15
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80087ae:	4b1f      	ldr	r3, [pc, #124]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b2:	0c1b      	lsrs	r3, r3, #16
 80087b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d4:	ee17 2a90 	vmov	r2, s15
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80087dc:	4b13      	ldr	r3, [pc, #76]	@ (800882c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e0:	0e1b      	lsrs	r3, r3, #24
 80087e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008802:	ee17 2a90 	vmov	r2, s15
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800880a:	e008      	b.n	800881e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	609a      	str	r2, [r3, #8]
}
 800881e:	bf00      	nop
 8008820:	3724      	adds	r7, #36	@ 0x24
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	58024400 	.word	0x58024400
 8008830:	03d09000 	.word	0x03d09000
 8008834:	46000000 	.word	0x46000000
 8008838:	4c742400 	.word	0x4c742400
 800883c:	4a742400 	.word	0x4a742400
 8008840:	4af42400 	.word	0x4af42400

08008844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008852:	4b53      	ldr	r3, [pc, #332]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d101      	bne.n	8008862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e099      	b.n	8008996 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008862:	4b4f      	ldr	r3, [pc, #316]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a4e      	ldr	r2, [pc, #312]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008868:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800886c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886e:	f7f8 fe69 	bl	8001544 <HAL_GetTick>
 8008872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008874:	e008      	b.n	8008888 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008876:	f7f8 fe65 	bl	8001544 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d901      	bls.n	8008888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e086      	b.n	8008996 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008888:	4b45      	ldr	r3, [pc, #276]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1f0      	bne.n	8008876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008894:	4b42      	ldr	r3, [pc, #264]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008898:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	031b      	lsls	r3, r3, #12
 80088a2:	493f      	ldr	r1, [pc, #252]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	025b      	lsls	r3, r3, #9
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088d8:	4931      	ldr	r1, [pc, #196]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088de:	4b30      	ldr	r3, [pc, #192]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	492d      	ldr	r1, [pc, #180]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088f0:	4b2b      	ldr	r3, [pc, #172]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	f023 0220 	bic.w	r2, r3, #32
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	4928      	ldr	r1, [pc, #160]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008902:	4b27      	ldr	r3, [pc, #156]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	4a26      	ldr	r2, [pc, #152]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008908:	f023 0310 	bic.w	r3, r3, #16
 800890c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800890e:	4b24      	ldr	r3, [pc, #144]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008912:	4b24      	ldr	r3, [pc, #144]	@ (80089a4 <RCCEx_PLL2_Config+0x160>)
 8008914:	4013      	ands	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	69d2      	ldr	r2, [r2, #28]
 800891a:	00d2      	lsls	r2, r2, #3
 800891c:	4920      	ldr	r1, [pc, #128]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008922:	4b1f      	ldr	r3, [pc, #124]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	4a1e      	ldr	r2, [pc, #120]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008928:	f043 0310 	orr.w	r3, r3, #16
 800892c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008934:	4b1a      	ldr	r3, [pc, #104]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008938:	4a19      	ldr	r2, [pc, #100]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800893a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800893e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008940:	e00f      	b.n	8008962 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d106      	bne.n	8008956 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008948:	4b15      	ldr	r3, [pc, #84]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800894a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894c:	4a14      	ldr	r2, [pc, #80]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800894e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008952:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008954:	e005      	b.n	8008962 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008956:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	4a11      	ldr	r2, [pc, #68]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800895c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008960:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008962:	4b0f      	ldr	r3, [pc, #60]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a0e      	ldr	r2, [pc, #56]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008968:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800896c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896e:	f7f8 fde9 	bl	8001544 <HAL_GetTick>
 8008972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008974:	e008      	b.n	8008988 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008976:	f7f8 fde5 	bl	8001544 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e006      	b.n	8008996 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008988:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	58024400 	.word	0x58024400
 80089a4:	ffff0007 	.word	0xffff0007

080089a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089b6:	4b53      	ldr	r3, [pc, #332]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	2b03      	cmp	r3, #3
 80089c0:	d101      	bne.n	80089c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e099      	b.n	8008afa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a4e      	ldr	r2, [pc, #312]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d2:	f7f8 fdb7 	bl	8001544 <HAL_GetTick>
 80089d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089d8:	e008      	b.n	80089ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089da:	f7f8 fdb3 	bl	8001544 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e086      	b.n	8008afa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089ec:	4b45      	ldr	r3, [pc, #276]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1f0      	bne.n	80089da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089f8:	4b42      	ldr	r3, [pc, #264]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	051b      	lsls	r3, r3, #20
 8008a06:	493f      	ldr	r1, [pc, #252]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	025b      	lsls	r3, r3, #9
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	041b      	lsls	r3, r3, #16
 8008a2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	061b      	lsls	r3, r3, #24
 8008a38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a3c:	4931      	ldr	r1, [pc, #196]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a42:	4b30      	ldr	r3, [pc, #192]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	492d      	ldr	r1, [pc, #180]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a54:	4b2b      	ldr	r3, [pc, #172]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	4928      	ldr	r1, [pc, #160]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a66:	4b27      	ldr	r3, [pc, #156]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6a:	4a26      	ldr	r2, [pc, #152]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a72:	4b24      	ldr	r3, [pc, #144]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a76:	4b24      	ldr	r3, [pc, #144]	@ (8008b08 <RCCEx_PLL3_Config+0x160>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	69d2      	ldr	r2, [r2, #28]
 8008a7e:	00d2      	lsls	r2, r2, #3
 8008a80:	4920      	ldr	r1, [pc, #128]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a86:	4b1f      	ldr	r3, [pc, #124]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a98:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9c:	4a19      	ldr	r2, [pc, #100]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008aa4:	e00f      	b.n	8008ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d106      	bne.n	8008aba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008aac:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab0:	4a14      	ldr	r2, [pc, #80]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008ab2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ab8:	e005      	b.n	8008ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008aba:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	4a11      	ldr	r2, [pc, #68]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a0e      	ldr	r2, [pc, #56]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad2:	f7f8 fd37 	bl	8001544 <HAL_GetTick>
 8008ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ad8:	e008      	b.n	8008aec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ada:	f7f8 fd33 	bl	8001544 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e006      	b.n	8008afa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008aec:	4b05      	ldr	r3, [pc, #20]	@ (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	58024400 	.word	0x58024400
 8008b08:	ffff0007 	.word	0xffff0007

08008b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e049      	b.n	8008bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f841 	bl	8008bba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f000 fc62 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
	...

08008bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d001      	beq.n	8008be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e054      	b.n	8008c92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0201 	orr.w	r2, r2, #1
 8008bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a26      	ldr	r2, [pc, #152]	@ (8008ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d022      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x80>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c12:	d01d      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x80>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a22      	ldr	r2, [pc, #136]	@ (8008ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d018      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x80>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a21      	ldr	r2, [pc, #132]	@ (8008ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d013      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x80>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008cac <HAL_TIM_Base_Start_IT+0xdc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00e      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x80>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a1e      	ldr	r2, [pc, #120]	@ (8008cb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d009      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x80>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x80>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008cb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d115      	bne.n	8008c7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	4b19      	ldr	r3, [pc, #100]	@ (8008cbc <HAL_TIM_Base_Start_IT+0xec>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d015      	beq.n	8008c8e <HAL_TIM_Base_Start_IT+0xbe>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c68:	d011      	beq.n	8008c8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0201 	orr.w	r2, r2, #1
 8008c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c7a:	e008      	b.n	8008c8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e000      	b.n	8008c90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40000400 	.word	0x40000400
 8008ca8:	40000800 	.word	0x40000800
 8008cac:	40000c00 	.word	0x40000c00
 8008cb0:	40010400 	.word	0x40010400
 8008cb4:	40001800 	.word	0x40001800
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	00010007 	.word	0x00010007

08008cc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e049      	b.n	8008d66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d106      	bne.n	8008cec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7f8 f848 	bl	8000d7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f000 fb88 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <HAL_TIM_PWM_Start+0x24>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	bf14      	ite	ne
 8008d8c:	2301      	movne	r3, #1
 8008d8e:	2300      	moveq	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	e03c      	b.n	8008e0e <HAL_TIM_PWM_Start+0x9e>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d109      	bne.n	8008dae <HAL_TIM_PWM_Start+0x3e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	bf14      	ite	ne
 8008da6:	2301      	movne	r3, #1
 8008da8:	2300      	moveq	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	e02f      	b.n	8008e0e <HAL_TIM_PWM_Start+0x9e>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d109      	bne.n	8008dc8 <HAL_TIM_PWM_Start+0x58>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	bf14      	ite	ne
 8008dc0:	2301      	movne	r3, #1
 8008dc2:	2300      	moveq	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	e022      	b.n	8008e0e <HAL_TIM_PWM_Start+0x9e>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b0c      	cmp	r3, #12
 8008dcc:	d109      	bne.n	8008de2 <HAL_TIM_PWM_Start+0x72>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	bf14      	ite	ne
 8008dda:	2301      	movne	r3, #1
 8008ddc:	2300      	moveq	r3, #0
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	e015      	b.n	8008e0e <HAL_TIM_PWM_Start+0x9e>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b10      	cmp	r3, #16
 8008de6:	d109      	bne.n	8008dfc <HAL_TIM_PWM_Start+0x8c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e008      	b.n	8008e0e <HAL_TIM_PWM_Start+0x9e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	bf14      	ite	ne
 8008e08:	2301      	movne	r3, #1
 8008e0a:	2300      	moveq	r3, #0
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e0a1      	b.n	8008f5a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d104      	bne.n	8008e26 <HAL_TIM_PWM_Start+0xb6>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e24:	e023      	b.n	8008e6e <HAL_TIM_PWM_Start+0xfe>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d104      	bne.n	8008e36 <HAL_TIM_PWM_Start+0xc6>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e34:	e01b      	b.n	8008e6e <HAL_TIM_PWM_Start+0xfe>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d104      	bne.n	8008e46 <HAL_TIM_PWM_Start+0xd6>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e44:	e013      	b.n	8008e6e <HAL_TIM_PWM_Start+0xfe>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b0c      	cmp	r3, #12
 8008e4a:	d104      	bne.n	8008e56 <HAL_TIM_PWM_Start+0xe6>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e54:	e00b      	b.n	8008e6e <HAL_TIM_PWM_Start+0xfe>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	d104      	bne.n	8008e66 <HAL_TIM_PWM_Start+0xf6>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e64:	e003      	b.n	8008e6e <HAL_TIM_PWM_Start+0xfe>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2201      	movs	r2, #1
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fe42 	bl	8009b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a38      	ldr	r2, [pc, #224]	@ (8008f64 <HAL_TIM_PWM_Start+0x1f4>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <HAL_TIM_PWM_Start+0x13e>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a37      	ldr	r2, [pc, #220]	@ (8008f68 <HAL_TIM_PWM_Start+0x1f8>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00e      	beq.n	8008eae <HAL_TIM_PWM_Start+0x13e>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a35      	ldr	r2, [pc, #212]	@ (8008f6c <HAL_TIM_PWM_Start+0x1fc>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d009      	beq.n	8008eae <HAL_TIM_PWM_Start+0x13e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a34      	ldr	r2, [pc, #208]	@ (8008f70 <HAL_TIM_PWM_Start+0x200>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <HAL_TIM_PWM_Start+0x13e>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a32      	ldr	r2, [pc, #200]	@ (8008f74 <HAL_TIM_PWM_Start+0x204>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d101      	bne.n	8008eb2 <HAL_TIM_PWM_Start+0x142>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <HAL_TIM_PWM_Start+0x144>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d007      	beq.n	8008ec8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a25      	ldr	r2, [pc, #148]	@ (8008f64 <HAL_TIM_PWM_Start+0x1f4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d022      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1a8>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eda:	d01d      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1a8>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a25      	ldr	r2, [pc, #148]	@ (8008f78 <HAL_TIM_PWM_Start+0x208>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d018      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1a8>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a24      	ldr	r2, [pc, #144]	@ (8008f7c <HAL_TIM_PWM_Start+0x20c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d013      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1a8>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a22      	ldr	r2, [pc, #136]	@ (8008f80 <HAL_TIM_PWM_Start+0x210>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00e      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1a8>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a1a      	ldr	r2, [pc, #104]	@ (8008f68 <HAL_TIM_PWM_Start+0x1f8>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d009      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1a8>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1e      	ldr	r2, [pc, #120]	@ (8008f84 <HAL_TIM_PWM_Start+0x214>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d004      	beq.n	8008f18 <HAL_TIM_PWM_Start+0x1a8>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <HAL_TIM_PWM_Start+0x1fc>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d115      	bne.n	8008f44 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f88 <HAL_TIM_PWM_Start+0x218>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b06      	cmp	r3, #6
 8008f28:	d015      	beq.n	8008f56 <HAL_TIM_PWM_Start+0x1e6>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f30:	d011      	beq.n	8008f56 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0201 	orr.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f42:	e008      	b.n	8008f56 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e000      	b.n	8008f58 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	40010000 	.word	0x40010000
 8008f68:	40010400 	.word	0x40010400
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	40014400 	.word	0x40014400
 8008f74:	40014800 	.word	0x40014800
 8008f78:	40000400 	.word	0x40000400
 8008f7c:	40000800 	.word	0x40000800
 8008f80:	40000c00 	.word	0x40000c00
 8008f84:	40001800 	.word	0x40001800
 8008f88:	00010007 	.word	0x00010007

08008f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d020      	beq.n	8008ff0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01b      	beq.n	8008ff0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0202 	mvn.w	r2, #2
 8008fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9fe 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 8008fdc:	e005      	b.n	8008fea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9f0 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fa01 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d020      	beq.n	800903c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01b      	beq.n	800903c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f06f 0204 	mvn.w	r2, #4
 800900c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f9d8 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 8009028:	e005      	b.n	8009036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f9ca 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f9db 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f003 0308 	and.w	r3, r3, #8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d020      	beq.n	8009088 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01b      	beq.n	8009088 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f06f 0208 	mvn.w	r2, #8
 8009058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2204      	movs	r2, #4
 800905e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f9b2 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 8009074:	e005      	b.n	8009082 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f9a4 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f9b5 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f003 0310 	and.w	r3, r3, #16
 800908e:	2b00      	cmp	r3, #0
 8009090:	d020      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f003 0310 	and.w	r3, r3, #16
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01b      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f06f 0210 	mvn.w	r2, #16
 80090a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2208      	movs	r2, #8
 80090aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f98c 	bl	80093d8 <HAL_TIM_IC_CaptureCallback>
 80090c0:	e005      	b.n	80090ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f97e 	bl	80093c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f98f 	bl	80093ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00c      	beq.n	80090f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0201 	mvn.w	r2, #1
 80090f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7f7 fc56 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00c      	beq.n	8009126 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800911e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fdab 	bl	8009c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00c      	beq.n	800914a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009136:	2b00      	cmp	r3, #0
 8009138:	d007      	beq.n	800914a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fda3 	bl	8009c90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00c      	beq.n	800916e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f949 	bl	8009400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f003 0320 	and.w	r3, r3, #32
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f06f 0220 	mvn.w	r2, #32
 800918a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fd6b 	bl	8009c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d101      	bne.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e0ff      	b.n	80093ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b14      	cmp	r3, #20
 80091c6:	f200 80f0 	bhi.w	80093aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80091ca:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d0:	08009225 	.word	0x08009225
 80091d4:	080093ab 	.word	0x080093ab
 80091d8:	080093ab 	.word	0x080093ab
 80091dc:	080093ab 	.word	0x080093ab
 80091e0:	08009265 	.word	0x08009265
 80091e4:	080093ab 	.word	0x080093ab
 80091e8:	080093ab 	.word	0x080093ab
 80091ec:	080093ab 	.word	0x080093ab
 80091f0:	080092a7 	.word	0x080092a7
 80091f4:	080093ab 	.word	0x080093ab
 80091f8:	080093ab 	.word	0x080093ab
 80091fc:	080093ab 	.word	0x080093ab
 8009200:	080092e7 	.word	0x080092e7
 8009204:	080093ab 	.word	0x080093ab
 8009208:	080093ab 	.word	0x080093ab
 800920c:	080093ab 	.word	0x080093ab
 8009210:	08009329 	.word	0x08009329
 8009214:	080093ab 	.word	0x080093ab
 8009218:	080093ab 	.word	0x080093ab
 800921c:	080093ab 	.word	0x080093ab
 8009220:	08009369 	.word	0x08009369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f992 	bl	8009554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	699a      	ldr	r2, [r3, #24]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0208 	orr.w	r2, r2, #8
 800923e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699a      	ldr	r2, [r3, #24]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0204 	bic.w	r2, r2, #4
 800924e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6999      	ldr	r1, [r3, #24]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	619a      	str	r2, [r3, #24]
      break;
 8009262:	e0a5      	b.n	80093b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68b9      	ldr	r1, [r7, #8]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fa02 	bl	8009674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699a      	ldr	r2, [r3, #24]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800927e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800928e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6999      	ldr	r1, [r3, #24]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	021a      	lsls	r2, r3, #8
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	619a      	str	r2, [r3, #24]
      break;
 80092a4:	e084      	b.n	80093b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fa6b 	bl	8009788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69da      	ldr	r2, [r3, #28]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0208 	orr.w	r2, r2, #8
 80092c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69da      	ldr	r2, [r3, #28]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0204 	bic.w	r2, r2, #4
 80092d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69d9      	ldr	r1, [r3, #28]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	61da      	str	r2, [r3, #28]
      break;
 80092e4:	e064      	b.n	80093b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fad3 	bl	8009898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69da      	ldr	r2, [r3, #28]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69da      	ldr	r2, [r3, #28]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69d9      	ldr	r1, [r3, #28]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	021a      	lsls	r2, r3, #8
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	61da      	str	r2, [r3, #28]
      break;
 8009326:	e043      	b.n	80093b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68b9      	ldr	r1, [r7, #8]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fb1c 	bl	800996c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0208 	orr.w	r2, r2, #8
 8009342:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 0204 	bic.w	r2, r2, #4
 8009352:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	691a      	ldr	r2, [r3, #16]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009366:	e023      	b.n	80093b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68b9      	ldr	r1, [r7, #8]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fb60 	bl	8009a34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009382:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009392:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	021a      	lsls	r2, r3, #8
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	430a      	orrs	r2, r1
 80093a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80093a8:	e002      	b.n	80093b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	75fb      	strb	r3, [r7, #23]
      break;
 80093ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop

080093c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a43      	ldr	r2, [pc, #268]	@ (8009534 <TIM_Base_SetConfig+0x120>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d013      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009432:	d00f      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a40      	ldr	r2, [pc, #256]	@ (8009538 <TIM_Base_SetConfig+0x124>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00b      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a3f      	ldr	r2, [pc, #252]	@ (800953c <TIM_Base_SetConfig+0x128>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d007      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a3e      	ldr	r2, [pc, #248]	@ (8009540 <TIM_Base_SetConfig+0x12c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a3d      	ldr	r2, [pc, #244]	@ (8009544 <TIM_Base_SetConfig+0x130>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d108      	bne.n	8009466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800945a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a32      	ldr	r2, [pc, #200]	@ (8009534 <TIM_Base_SetConfig+0x120>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01f      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009474:	d01b      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a2f      	ldr	r2, [pc, #188]	@ (8009538 <TIM_Base_SetConfig+0x124>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d017      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a2e      	ldr	r2, [pc, #184]	@ (800953c <TIM_Base_SetConfig+0x128>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d013      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a2d      	ldr	r2, [pc, #180]	@ (8009540 <TIM_Base_SetConfig+0x12c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d00f      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a2c      	ldr	r2, [pc, #176]	@ (8009544 <TIM_Base_SetConfig+0x130>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d00b      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a2b      	ldr	r2, [pc, #172]	@ (8009548 <TIM_Base_SetConfig+0x134>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d007      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a2a      	ldr	r2, [pc, #168]	@ (800954c <TIM_Base_SetConfig+0x138>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d003      	beq.n	80094ae <TIM_Base_SetConfig+0x9a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a29      	ldr	r2, [pc, #164]	@ (8009550 <TIM_Base_SetConfig+0x13c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d108      	bne.n	80094c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a14      	ldr	r2, [pc, #80]	@ (8009534 <TIM_Base_SetConfig+0x120>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00f      	beq.n	8009506 <TIM_Base_SetConfig+0xf2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a16      	ldr	r2, [pc, #88]	@ (8009544 <TIM_Base_SetConfig+0x130>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d00b      	beq.n	8009506 <TIM_Base_SetConfig+0xf2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a15      	ldr	r2, [pc, #84]	@ (8009548 <TIM_Base_SetConfig+0x134>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d007      	beq.n	8009506 <TIM_Base_SetConfig+0xf2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a14      	ldr	r2, [pc, #80]	@ (800954c <TIM_Base_SetConfig+0x138>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d003      	beq.n	8009506 <TIM_Base_SetConfig+0xf2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a13      	ldr	r2, [pc, #76]	@ (8009550 <TIM_Base_SetConfig+0x13c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d103      	bne.n	800950e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	691a      	ldr	r2, [r3, #16]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f043 0204 	orr.w	r2, r3, #4
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	601a      	str	r2, [r3, #0]
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	40010000 	.word	0x40010000
 8009538:	40000400 	.word	0x40000400
 800953c:	40000800 	.word	0x40000800
 8009540:	40000c00 	.word	0x40000c00
 8009544:	40010400 	.word	0x40010400
 8009548:	40014000 	.word	0x40014000
 800954c:	40014400 	.word	0x40014400
 8009550:	40014800 	.word	0x40014800

08009554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	f023 0201 	bic.w	r2, r3, #1
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4b37      	ldr	r3, [pc, #220]	@ (800965c <TIM_OC1_SetConfig+0x108>)
 8009580:	4013      	ands	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f023 0302 	bic.w	r3, r3, #2
 800959c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009660 <TIM_OC1_SetConfig+0x10c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00f      	beq.n	80095d0 <TIM_OC1_SetConfig+0x7c>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009664 <TIM_OC1_SetConfig+0x110>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00b      	beq.n	80095d0 <TIM_OC1_SetConfig+0x7c>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009668 <TIM_OC1_SetConfig+0x114>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d007      	beq.n	80095d0 <TIM_OC1_SetConfig+0x7c>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a2a      	ldr	r2, [pc, #168]	@ (800966c <TIM_OC1_SetConfig+0x118>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d003      	beq.n	80095d0 <TIM_OC1_SetConfig+0x7c>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a29      	ldr	r2, [pc, #164]	@ (8009670 <TIM_OC1_SetConfig+0x11c>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d10c      	bne.n	80095ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f023 0308 	bic.w	r3, r3, #8
 80095d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	4313      	orrs	r3, r2
 80095e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f023 0304 	bic.w	r3, r3, #4
 80095e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009660 <TIM_OC1_SetConfig+0x10c>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00f      	beq.n	8009612 <TIM_OC1_SetConfig+0xbe>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009664 <TIM_OC1_SetConfig+0x110>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00b      	beq.n	8009612 <TIM_OC1_SetConfig+0xbe>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009668 <TIM_OC1_SetConfig+0x114>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d007      	beq.n	8009612 <TIM_OC1_SetConfig+0xbe>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a19      	ldr	r2, [pc, #100]	@ (800966c <TIM_OC1_SetConfig+0x118>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d003      	beq.n	8009612 <TIM_OC1_SetConfig+0xbe>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a18      	ldr	r2, [pc, #96]	@ (8009670 <TIM_OC1_SetConfig+0x11c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d111      	bne.n	8009636 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	4313      	orrs	r3, r2
 800962a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	621a      	str	r2, [r3, #32]
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	fffeff8f 	.word	0xfffeff8f
 8009660:	40010000 	.word	0x40010000
 8009664:	40010400 	.word	0x40010400
 8009668:	40014000 	.word	0x40014000
 800966c:	40014400 	.word	0x40014400
 8009670:	40014800 	.word	0x40014800

08009674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	f023 0210 	bic.w	r2, r3, #16
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	4b34      	ldr	r3, [pc, #208]	@ (8009770 <TIM_OC2_SetConfig+0xfc>)
 80096a0:	4013      	ands	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f023 0320 	bic.w	r3, r3, #32
 80096be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a29      	ldr	r2, [pc, #164]	@ (8009774 <TIM_OC2_SetConfig+0x100>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d003      	beq.n	80096dc <TIM_OC2_SetConfig+0x68>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a28      	ldr	r2, [pc, #160]	@ (8009778 <TIM_OC2_SetConfig+0x104>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d10d      	bne.n	80096f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009774 <TIM_OC2_SetConfig+0x100>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00f      	beq.n	8009720 <TIM_OC2_SetConfig+0xac>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a1d      	ldr	r2, [pc, #116]	@ (8009778 <TIM_OC2_SetConfig+0x104>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00b      	beq.n	8009720 <TIM_OC2_SetConfig+0xac>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a1c      	ldr	r2, [pc, #112]	@ (800977c <TIM_OC2_SetConfig+0x108>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d007      	beq.n	8009720 <TIM_OC2_SetConfig+0xac>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a1b      	ldr	r2, [pc, #108]	@ (8009780 <TIM_OC2_SetConfig+0x10c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d003      	beq.n	8009720 <TIM_OC2_SetConfig+0xac>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a1a      	ldr	r2, [pc, #104]	@ (8009784 <TIM_OC2_SetConfig+0x110>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d113      	bne.n	8009748 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800972e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4313      	orrs	r3, r2
 800973a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	621a      	str	r2, [r3, #32]
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	feff8fff 	.word	0xfeff8fff
 8009774:	40010000 	.word	0x40010000
 8009778:	40010400 	.word	0x40010400
 800977c:	40014000 	.word	0x40014000
 8009780:	40014400 	.word	0x40014400
 8009784:	40014800 	.word	0x40014800

08009788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4b33      	ldr	r3, [pc, #204]	@ (8009880 <TIM_OC3_SetConfig+0xf8>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0303 	bic.w	r3, r3, #3
 80097be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	021b      	lsls	r3, r3, #8
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	4313      	orrs	r3, r2
 80097dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a28      	ldr	r2, [pc, #160]	@ (8009884 <TIM_OC3_SetConfig+0xfc>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d003      	beq.n	80097ee <TIM_OC3_SetConfig+0x66>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a27      	ldr	r2, [pc, #156]	@ (8009888 <TIM_OC3_SetConfig+0x100>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d10d      	bne.n	800980a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a1d      	ldr	r2, [pc, #116]	@ (8009884 <TIM_OC3_SetConfig+0xfc>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00f      	beq.n	8009832 <TIM_OC3_SetConfig+0xaa>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a1c      	ldr	r2, [pc, #112]	@ (8009888 <TIM_OC3_SetConfig+0x100>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00b      	beq.n	8009832 <TIM_OC3_SetConfig+0xaa>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a1b      	ldr	r2, [pc, #108]	@ (800988c <TIM_OC3_SetConfig+0x104>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d007      	beq.n	8009832 <TIM_OC3_SetConfig+0xaa>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a1a      	ldr	r2, [pc, #104]	@ (8009890 <TIM_OC3_SetConfig+0x108>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d003      	beq.n	8009832 <TIM_OC3_SetConfig+0xaa>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a19      	ldr	r2, [pc, #100]	@ (8009894 <TIM_OC3_SetConfig+0x10c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d113      	bne.n	800985a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	011b      	lsls	r3, r3, #4
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4313      	orrs	r3, r2
 800984c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4313      	orrs	r3, r2
 8009858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	621a      	str	r2, [r3, #32]
}
 8009874:	bf00      	nop
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	fffeff8f 	.word	0xfffeff8f
 8009884:	40010000 	.word	0x40010000
 8009888:	40010400 	.word	0x40010400
 800988c:	40014000 	.word	0x40014000
 8009890:	40014400 	.word	0x40014400
 8009894:	40014800 	.word	0x40014800

08009898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4b24      	ldr	r3, [pc, #144]	@ (8009954 <TIM_OC4_SetConfig+0xbc>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	031b      	lsls	r3, r3, #12
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a19      	ldr	r2, [pc, #100]	@ (8009958 <TIM_OC4_SetConfig+0xc0>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d00f      	beq.n	8009918 <TIM_OC4_SetConfig+0x80>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a18      	ldr	r2, [pc, #96]	@ (800995c <TIM_OC4_SetConfig+0xc4>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d00b      	beq.n	8009918 <TIM_OC4_SetConfig+0x80>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a17      	ldr	r2, [pc, #92]	@ (8009960 <TIM_OC4_SetConfig+0xc8>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d007      	beq.n	8009918 <TIM_OC4_SetConfig+0x80>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a16      	ldr	r2, [pc, #88]	@ (8009964 <TIM_OC4_SetConfig+0xcc>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d003      	beq.n	8009918 <TIM_OC4_SetConfig+0x80>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a15      	ldr	r2, [pc, #84]	@ (8009968 <TIM_OC4_SetConfig+0xd0>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d109      	bne.n	800992c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800991e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	019b      	lsls	r3, r3, #6
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	621a      	str	r2, [r3, #32]
}
 8009946:	bf00      	nop
 8009948:	371c      	adds	r7, #28
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	feff8fff 	.word	0xfeff8fff
 8009958:	40010000 	.word	0x40010000
 800995c:	40010400 	.word	0x40010400
 8009960:	40014000 	.word	0x40014000
 8009964:	40014400 	.word	0x40014400
 8009968:	40014800 	.word	0x40014800

0800996c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4b21      	ldr	r3, [pc, #132]	@ (8009a1c <TIM_OC5_SetConfig+0xb0>)
 8009998:	4013      	ands	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80099ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a18      	ldr	r2, [pc, #96]	@ (8009a20 <TIM_OC5_SetConfig+0xb4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00f      	beq.n	80099e2 <TIM_OC5_SetConfig+0x76>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a17      	ldr	r2, [pc, #92]	@ (8009a24 <TIM_OC5_SetConfig+0xb8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00b      	beq.n	80099e2 <TIM_OC5_SetConfig+0x76>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a16      	ldr	r2, [pc, #88]	@ (8009a28 <TIM_OC5_SetConfig+0xbc>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d007      	beq.n	80099e2 <TIM_OC5_SetConfig+0x76>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a15      	ldr	r2, [pc, #84]	@ (8009a2c <TIM_OC5_SetConfig+0xc0>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d003      	beq.n	80099e2 <TIM_OC5_SetConfig+0x76>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a14      	ldr	r2, [pc, #80]	@ (8009a30 <TIM_OC5_SetConfig+0xc4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d109      	bne.n	80099f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	021b      	lsls	r3, r3, #8
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	621a      	str	r2, [r3, #32]
}
 8009a10:	bf00      	nop
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	fffeff8f 	.word	0xfffeff8f
 8009a20:	40010000 	.word	0x40010000
 8009a24:	40010400 	.word	0x40010400
 8009a28:	40014000 	.word	0x40014000
 8009a2c:	40014400 	.word	0x40014400
 8009a30:	40014800 	.word	0x40014800

08009a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4b22      	ldr	r3, [pc, #136]	@ (8009ae8 <TIM_OC6_SetConfig+0xb4>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	021b      	lsls	r3, r3, #8
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	051b      	lsls	r3, r3, #20
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a19      	ldr	r2, [pc, #100]	@ (8009aec <TIM_OC6_SetConfig+0xb8>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00f      	beq.n	8009aac <TIM_OC6_SetConfig+0x78>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a18      	ldr	r2, [pc, #96]	@ (8009af0 <TIM_OC6_SetConfig+0xbc>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00b      	beq.n	8009aac <TIM_OC6_SetConfig+0x78>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a17      	ldr	r2, [pc, #92]	@ (8009af4 <TIM_OC6_SetConfig+0xc0>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d007      	beq.n	8009aac <TIM_OC6_SetConfig+0x78>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a16      	ldr	r2, [pc, #88]	@ (8009af8 <TIM_OC6_SetConfig+0xc4>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d003      	beq.n	8009aac <TIM_OC6_SetConfig+0x78>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a15      	ldr	r2, [pc, #84]	@ (8009afc <TIM_OC6_SetConfig+0xc8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d109      	bne.n	8009ac0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	029b      	lsls	r3, r3, #10
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	621a      	str	r2, [r3, #32]
}
 8009ada:	bf00      	nop
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	feff8fff 	.word	0xfeff8fff
 8009aec:	40010000 	.word	0x40010000
 8009af0:	40010400 	.word	0x40010400
 8009af4:	40014000 	.word	0x40014000
 8009af8:	40014400 	.word	0x40014400
 8009afc:	40014800 	.word	0x40014800

08009b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f003 031f 	and.w	r3, r3, #31
 8009b12:	2201      	movs	r2, #1
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a1a      	ldr	r2, [r3, #32]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	43db      	mvns	r3, r3
 8009b22:	401a      	ands	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6a1a      	ldr	r2, [r3, #32]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f003 031f 	and.w	r3, r3, #31
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	fa01 f303 	lsl.w	r3, r1, r3
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e06d      	b.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a30      	ldr	r2, [pc, #192]	@ (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d004      	beq.n	8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a2f      	ldr	r2, [pc, #188]	@ (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d108      	bne.n	8009baa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a20      	ldr	r2, [pc, #128]	@ (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d022      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd6:	d01d      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d018      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a1c      	ldr	r2, [pc, #112]	@ (8009c58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d013      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8009c5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00e      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a15      	ldr	r2, [pc, #84]	@ (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d009      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a16      	ldr	r2, [pc, #88]	@ (8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d004      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d10c      	bne.n	8009c2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40010400 	.word	0x40010400
 8009c54:	40000400 	.word	0x40000400
 8009c58:	40000800 	.word	0x40000800
 8009c5c:	40000c00 	.word	0x40000c00
 8009c60:	40001800 	.word	0x40001800
 8009c64:	40014000 	.word	0x40014000

08009c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e042      	b.n	8009d3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d106      	bne.n	8009cce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7f7 f8fd 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2224      	movs	r2, #36	@ 0x24
 8009cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f022 0201 	bic.w	r2, r2, #1
 8009ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 fae0 	bl	800b2b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fd75 	bl	800a7e4 <UART_SetConfig>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d101      	bne.n	8009d04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e01b      	b.n	8009d3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f042 0201 	orr.w	r2, r2, #1
 8009d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fb5f 	bl	800b3f8 <UART_CheckIdleState>
 8009d3a:	4603      	mov	r3, r0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08a      	sub	sp, #40	@ 0x28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	d137      	bne.n	8009dcc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <HAL_UART_Receive_DMA+0x24>
 8009d62:	88fb      	ldrh	r3, [r7, #6]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e030      	b.n	8009dce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a18      	ldr	r2, [pc, #96]	@ (8009dd8 <HAL_UART_Receive_DMA+0x94>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d01f      	beq.n	8009dbc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d018      	beq.n	8009dbc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	e853 3f00 	ldrex	r3, [r3]
 8009d96:	613b      	str	r3, [r7, #16]
   return(result);
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dac:	69f9      	ldr	r1, [r7, #28]
 8009dae:	6a3a      	ldr	r2, [r7, #32]
 8009db0:	e841 2300 	strex	r3, r2, [r1]
 8009db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1e6      	bne.n	8009d8a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009dbc:	88fb      	ldrh	r3, [r7, #6]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	68b9      	ldr	r1, [r7, #8]
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f001 fc30 	bl	800b628 <UART_Start_Receive_DMA>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	e000      	b.n	8009dce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009dcc:	2302      	movs	r3, #2
  }
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3728      	adds	r7, #40	@ 0x28
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	58000c00 	.word	0x58000c00

08009ddc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b0a0      	sub	sp, #128	@ 0x80
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009df4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8009df8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e04:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e06:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009e08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e0a:	e841 2300 	strex	r3, r2, [r1]
 8009e0e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e6      	bne.n	8009de4 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e28:	4b72      	ldr	r3, [pc, #456]	@ (8009ff4 <HAL_UART_Abort+0x218>)
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009e36:	657a      	str	r2, [r7, #84]	@ 0x54
 8009e38:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e5      	bne.n	8009e16 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d118      	bne.n	8009e84 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e62:	f023 0310 	bic.w	r3, r3, #16
 8009e66:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e6      	bne.n	8009e52 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8e:	2b80      	cmp	r3, #128	@ 0x80
 8009e90:	d137      	bne.n	8009f02 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ea8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3308      	adds	r3, #8
 8009eb0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e5      	bne.n	8009e92 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d019      	beq.n	8009f02 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7f8 fa8c 	bl	80023f8 <HAL_DMA_Abort>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00d      	beq.n	8009f02 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f9 ff12 	bl	8003d14 <HAL_DMA_GetError>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b20      	cmp	r3, #32
 8009ef4:	d105      	bne.n	8009f02 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2210      	movs	r2, #16
 8009efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e073      	b.n	8009fea <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0c:	2b40      	cmp	r3, #64	@ 0x40
 8009f0e:	d13b      	bne.n	8009f88 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3308      	adds	r3, #8
 8009f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f30:	61ba      	str	r2, [r7, #24]
 8009f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e5      	bne.n	8009f10 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d01c      	beq.n	8009f88 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f54:	2200      	movs	r2, #0
 8009f56:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f8 fa4a 	bl	80023f8 <HAL_DMA_Abort>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00e      	beq.n	8009f88 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7f9 fecf 	bl	8003d14 <HAL_DMA_GetError>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	d105      	bne.n	8009f88 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2210      	movs	r2, #16
 8009f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e030      	b.n	8009fea <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	220f      	movs	r2, #15
 8009f9e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fa8:	d107      	bne.n	8009fba <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699a      	ldr	r2, [r3, #24]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0210 	orr.w	r2, r2, #16
 8009fb8:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	699a      	ldr	r2, [r3, #24]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f042 0208 	orr.w	r2, r2, #8
 8009fc8:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3780      	adds	r7, #128	@ 0x80
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	ef7ffffe 	.word	0xef7ffffe

08009ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a01e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a022:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a026:	4013      	ands	r3, r2
 800a028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a02c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a030:	2b00      	cmp	r3, #0
 800a032:	d11b      	bne.n	800a06c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d015      	beq.n	800a06c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a044:	f003 0320 	and.w	r3, r3, #32
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d105      	bne.n	800a058 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a04c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d009      	beq.n	800a06c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 8393 	beq.w	800a788 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
      }
      return;
 800a06a:	e38d      	b.n	800a788 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a06c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 8123 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a076:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a07a:	4b8d      	ldr	r3, [pc, #564]	@ (800a2b0 <HAL_UART_IRQHandler+0x2b8>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a086:	4b8b      	ldr	r3, [pc, #556]	@ (800a2b4 <HAL_UART_IRQHandler+0x2bc>)
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 8116 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d011      	beq.n	800a0c0 <HAL_UART_IRQHandler+0xc8>
 800a09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00b      	beq.n	800a0c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0b6:	f043 0201 	orr.w	r2, r3, #1
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d011      	beq.n	800a0f0 <HAL_UART_IRQHandler+0xf8>
 800a0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0e6:	f043 0204 	orr.w	r2, r3, #4
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d011      	beq.n	800a120 <HAL_UART_IRQHandler+0x128>
 800a0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2204      	movs	r2, #4
 800a10e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a116:	f043 0202 	orr.w	r2, r3, #2
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a124:	f003 0308 	and.w	r3, r3, #8
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d017      	beq.n	800a15c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a130:	f003 0320 	and.w	r3, r3, #32
 800a134:	2b00      	cmp	r3, #0
 800a136:	d105      	bne.n	800a144 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a13c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2b0 <HAL_UART_IRQHandler+0x2b8>)
 800a13e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2208      	movs	r2, #8
 800a14a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a152:	f043 0208 	orr.w	r2, r3, #8
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a164:	2b00      	cmp	r3, #0
 800a166:	d012      	beq.n	800a18e <HAL_UART_IRQHandler+0x196>
 800a168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a16c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00c      	beq.n	800a18e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a17c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a184:	f043 0220 	orr.w	r2, r3, #32
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 82f9 	beq.w	800a78c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d013      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1aa:	f003 0320 	and.w	r3, r3, #32
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d105      	bne.n	800a1be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e2:	2b40      	cmp	r3, #64	@ 0x40
 800a1e4:	d005      	beq.n	800a1f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a1ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d054      	beq.n	800a29c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 fb00 	bl	800b7f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a202:	2b40      	cmp	r3, #64	@ 0x40
 800a204:	d146      	bne.n	800a294 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3308      	adds	r3, #8
 800a20c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a21c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3308      	adds	r3, #8
 800a22e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a23e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a24a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1d9      	bne.n	800a206 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d017      	beq.n	800a28c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a262:	4a15      	ldr	r2, [pc, #84]	@ (800a2b8 <HAL_UART_IRQHandler+0x2c0>)
 800a264:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7f8 fbe1 	bl	8002a34 <HAL_DMA_Abort_IT>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d019      	beq.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a286:	4610      	mov	r0, r2
 800a288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28a:	e00f      	b.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fa93 	bl	800a7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a292:	e00b      	b.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fa8f 	bl	800a7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29a:	e007      	b.n	800a2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fa8b 	bl	800a7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a2aa:	e26f      	b.n	800a78c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ac:	bf00      	nop
    return;
 800a2ae:	e26d      	b.n	800a78c <HAL_UART_IRQHandler+0x794>
 800a2b0:	10000001 	.word	0x10000001
 800a2b4:	04000120 	.word	0x04000120
 800a2b8:	0800baab 	.word	0x0800baab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 8203 	bne.w	800a6cc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 81fc 	beq.w	800a6cc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 81f5 	beq.w	800a6cc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2210      	movs	r2, #16
 800a2e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f4:	2b40      	cmp	r3, #64	@ 0x40
 800a2f6:	f040 816d 	bne.w	800a5d4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4aa4      	ldr	r2, [pc, #656]	@ (800a594 <HAL_UART_IRQHandler+0x59c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d068      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4aa1      	ldr	r2, [pc, #644]	@ (800a598 <HAL_UART_IRQHandler+0x5a0>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d061      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a9f      	ldr	r2, [pc, #636]	@ (800a59c <HAL_UART_IRQHandler+0x5a4>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d05a      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a9c      	ldr	r2, [pc, #624]	@ (800a5a0 <HAL_UART_IRQHandler+0x5a8>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d053      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a9a      	ldr	r2, [pc, #616]	@ (800a5a4 <HAL_UART_IRQHandler+0x5ac>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d04c      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a97      	ldr	r2, [pc, #604]	@ (800a5a8 <HAL_UART_IRQHandler+0x5b0>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d045      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a95      	ldr	r2, [pc, #596]	@ (800a5ac <HAL_UART_IRQHandler+0x5b4>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d03e      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a92      	ldr	r2, [pc, #584]	@ (800a5b0 <HAL_UART_IRQHandler+0x5b8>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d037      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a90      	ldr	r2, [pc, #576]	@ (800a5b4 <HAL_UART_IRQHandler+0x5bc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d030      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a8d      	ldr	r2, [pc, #564]	@ (800a5b8 <HAL_UART_IRQHandler+0x5c0>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d029      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a8b      	ldr	r2, [pc, #556]	@ (800a5bc <HAL_UART_IRQHandler+0x5c4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d022      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a88      	ldr	r2, [pc, #544]	@ (800a5c0 <HAL_UART_IRQHandler+0x5c8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d01b      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a86      	ldr	r2, [pc, #536]	@ (800a5c4 <HAL_UART_IRQHandler+0x5cc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d014      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a83      	ldr	r2, [pc, #524]	@ (800a5c8 <HAL_UART_IRQHandler+0x5d0>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d00d      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a81      	ldr	r2, [pc, #516]	@ (800a5cc <HAL_UART_IRQHandler+0x5d4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d006      	beq.n	800a3da <HAL_UART_IRQHandler+0x3e2>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a7e      	ldr	r2, [pc, #504]	@ (800a5d0 <HAL_UART_IRQHandler+0x5d8>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d106      	bne.n	800a3e8 <HAL_UART_IRQHandler+0x3f0>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	e005      	b.n	800a3f4 <HAL_UART_IRQHandler+0x3fc>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 80ad 	beq.w	800a55c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a40c:	429a      	cmp	r2, r3
 800a40e:	f080 80a5 	bcs.w	800a55c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a418:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a428:	f000 8087 	beq.w	800a53a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a45a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a46e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1da      	bne.n	800a42c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3308      	adds	r3, #8
 800a47c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a488:	f023 0301 	bic.w	r3, r3, #1
 800a48c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a49a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a49e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a4a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a4ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e1      	bne.n	800a476 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a4c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a4d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a4d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a4dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a4e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e3      	bne.n	800a4b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a508:	f023 0310 	bic.w	r3, r3, #16
 800a50c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a51a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a51c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e4      	bne.n	800a4f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a534:	4618      	mov	r0, r3
 800a536:	f7f7 ff5f 	bl	80023f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2202      	movs	r2, #2
 800a53e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	b29b      	uxth	r3, r3
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f939 	bl	800a7cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a55a:	e119      	b.n	800a790 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a566:	429a      	cmp	r2, r3
 800a568:	f040 8112 	bne.w	800a790 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a578:	f040 810a 	bne.w	800a790 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f91e 	bl	800a7cc <HAL_UARTEx_RxEventCallback>
      return;
 800a590:	e0fe      	b.n	800a790 <HAL_UART_IRQHandler+0x798>
 800a592:	bf00      	nop
 800a594:	40020010 	.word	0x40020010
 800a598:	40020028 	.word	0x40020028
 800a59c:	40020040 	.word	0x40020040
 800a5a0:	40020058 	.word	0x40020058
 800a5a4:	40020070 	.word	0x40020070
 800a5a8:	40020088 	.word	0x40020088
 800a5ac:	400200a0 	.word	0x400200a0
 800a5b0:	400200b8 	.word	0x400200b8
 800a5b4:	40020410 	.word	0x40020410
 800a5b8:	40020428 	.word	0x40020428
 800a5bc:	40020440 	.word	0x40020440
 800a5c0:	40020458 	.word	0x40020458
 800a5c4:	40020470 	.word	0x40020470
 800a5c8:	40020488 	.word	0x40020488
 800a5cc:	400204a0 	.word	0x400204a0
 800a5d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 80cf 	beq.w	800a794 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800a5f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 80ca 	beq.w	800a794 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a614:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	461a      	mov	r2, r3
 800a61e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a622:	647b      	str	r3, [r7, #68]	@ 0x44
 800a624:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e4      	bne.n	800a600 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3308      	adds	r3, #8
 800a63c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	623b      	str	r3, [r7, #32]
   return(result);
 800a646:	6a3a      	ldr	r2, [r7, #32]
 800a648:	4b55      	ldr	r3, [pc, #340]	@ (800a7a0 <HAL_UART_IRQHandler+0x7a8>)
 800a64a:	4013      	ands	r3, r2
 800a64c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a65a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a65c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e3      	bne.n	800a636 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	e853 3f00 	ldrex	r3, [r3]
 800a68e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0310 	bic.w	r3, r3, #16
 800a696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a6a4:	61fb      	str	r3, [r7, #28]
 800a6a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a8:	69b9      	ldr	r1, [r7, #24]
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	e841 2300 	strex	r3, r2, [r1]
 800a6b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1e4      	bne.n	800a682 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f881 	bl	800a7cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6ca:	e063      	b.n	800a794 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00e      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x6fe>
 800a6d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d008      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a6ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f001 fa18 	bl	800bb24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6f4:	e051      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d014      	beq.n	800a72c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d105      	bne.n	800a71a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a70e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d008      	beq.n	800a72c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d03a      	beq.n	800a798 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	4798      	blx	r3
    }
    return;
 800a72a:	e035      	b.n	800a798 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	d009      	beq.n	800a74c <HAL_UART_IRQHandler+0x754>
 800a738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f001 f9c2 	bl	800bace <UART_EndTransmit_IT>
    return;
 800a74a:	e026      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a750:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d009      	beq.n	800a76c <HAL_UART_IRQHandler+0x774>
 800a758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a75c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 f9f1 	bl	800bb4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a76a:	e016      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d010      	beq.n	800a79a <HAL_UART_IRQHandler+0x7a2>
 800a778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	da0c      	bge.n	800a79a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f001 f9d9 	bl	800bb38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a786:	e008      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a788:	bf00      	nop
 800a78a:	e006      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
    return;
 800a78c:	bf00      	nop
 800a78e:	e004      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a790:	bf00      	nop
 800a792:	e002      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
      return;
 800a794:	bf00      	nop
 800a796:	e000      	b.n	800a79a <HAL_UART_IRQHandler+0x7a2>
    return;
 800a798:	bf00      	nop
  }
}
 800a79a:	37e8      	adds	r7, #232	@ 0xe8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	effffffe 	.word	0xeffffffe

0800a7a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7e8:	b092      	sub	sp, #72	@ 0x48
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	431a      	orrs	r2, r3
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	4313      	orrs	r3, r2
 800a80a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	4bbe      	ldr	r3, [pc, #760]	@ (800ab0c <UART_SetConfig+0x328>)
 800a814:	4013      	ands	r3, r2
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a81c:	430b      	orrs	r3, r1
 800a81e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4ab3      	ldr	r2, [pc, #716]	@ (800ab10 <UART_SetConfig+0x32c>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d004      	beq.n	800a850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a84c:	4313      	orrs	r3, r2
 800a84e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689a      	ldr	r2, [r3, #8]
 800a856:	4baf      	ldr	r3, [pc, #700]	@ (800ab14 <UART_SetConfig+0x330>)
 800a858:	4013      	ands	r3, r2
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	6812      	ldr	r2, [r2, #0]
 800a85e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a860:	430b      	orrs	r3, r1
 800a862:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	f023 010f 	bic.w	r1, r3, #15
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4aa6      	ldr	r2, [pc, #664]	@ (800ab18 <UART_SetConfig+0x334>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d177      	bne.n	800a974 <UART_SetConfig+0x190>
 800a884:	4ba5      	ldr	r3, [pc, #660]	@ (800ab1c <UART_SetConfig+0x338>)
 800a886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a888:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a88c:	2b28      	cmp	r3, #40	@ 0x28
 800a88e:	d86d      	bhi.n	800a96c <UART_SetConfig+0x188>
 800a890:	a201      	add	r2, pc, #4	@ (adr r2, 800a898 <UART_SetConfig+0xb4>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a93d 	.word	0x0800a93d
 800a89c:	0800a96d 	.word	0x0800a96d
 800a8a0:	0800a96d 	.word	0x0800a96d
 800a8a4:	0800a96d 	.word	0x0800a96d
 800a8a8:	0800a96d 	.word	0x0800a96d
 800a8ac:	0800a96d 	.word	0x0800a96d
 800a8b0:	0800a96d 	.word	0x0800a96d
 800a8b4:	0800a96d 	.word	0x0800a96d
 800a8b8:	0800a945 	.word	0x0800a945
 800a8bc:	0800a96d 	.word	0x0800a96d
 800a8c0:	0800a96d 	.word	0x0800a96d
 800a8c4:	0800a96d 	.word	0x0800a96d
 800a8c8:	0800a96d 	.word	0x0800a96d
 800a8cc:	0800a96d 	.word	0x0800a96d
 800a8d0:	0800a96d 	.word	0x0800a96d
 800a8d4:	0800a96d 	.word	0x0800a96d
 800a8d8:	0800a94d 	.word	0x0800a94d
 800a8dc:	0800a96d 	.word	0x0800a96d
 800a8e0:	0800a96d 	.word	0x0800a96d
 800a8e4:	0800a96d 	.word	0x0800a96d
 800a8e8:	0800a96d 	.word	0x0800a96d
 800a8ec:	0800a96d 	.word	0x0800a96d
 800a8f0:	0800a96d 	.word	0x0800a96d
 800a8f4:	0800a96d 	.word	0x0800a96d
 800a8f8:	0800a955 	.word	0x0800a955
 800a8fc:	0800a96d 	.word	0x0800a96d
 800a900:	0800a96d 	.word	0x0800a96d
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a96d 	.word	0x0800a96d
 800a90c:	0800a96d 	.word	0x0800a96d
 800a910:	0800a96d 	.word	0x0800a96d
 800a914:	0800a96d 	.word	0x0800a96d
 800a918:	0800a95d 	.word	0x0800a95d
 800a91c:	0800a96d 	.word	0x0800a96d
 800a920:	0800a96d 	.word	0x0800a96d
 800a924:	0800a96d 	.word	0x0800a96d
 800a928:	0800a96d 	.word	0x0800a96d
 800a92c:	0800a96d 	.word	0x0800a96d
 800a930:	0800a96d 	.word	0x0800a96d
 800a934:	0800a96d 	.word	0x0800a96d
 800a938:	0800a965 	.word	0x0800a965
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e222      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a944:	2304      	movs	r3, #4
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94a:	e21e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a94c:	2308      	movs	r3, #8
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e21a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a954:	2310      	movs	r3, #16
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e216      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a95c:	2320      	movs	r3, #32
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a962:	e212      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a964:	2340      	movs	r3, #64	@ 0x40
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96a:	e20e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a96c:	2380      	movs	r3, #128	@ 0x80
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a972:	e20a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a69      	ldr	r2, [pc, #420]	@ (800ab20 <UART_SetConfig+0x33c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d130      	bne.n	800a9e0 <UART_SetConfig+0x1fc>
 800a97e:	4b67      	ldr	r3, [pc, #412]	@ (800ab1c <UART_SetConfig+0x338>)
 800a980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a982:	f003 0307 	and.w	r3, r3, #7
 800a986:	2b05      	cmp	r3, #5
 800a988:	d826      	bhi.n	800a9d8 <UART_SetConfig+0x1f4>
 800a98a:	a201      	add	r2, pc, #4	@ (adr r2, 800a990 <UART_SetConfig+0x1ac>)
 800a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a990:	0800a9a9 	.word	0x0800a9a9
 800a994:	0800a9b1 	.word	0x0800a9b1
 800a998:	0800a9b9 	.word	0x0800a9b9
 800a99c:	0800a9c1 	.word	0x0800a9c1
 800a9a0:	0800a9c9 	.word	0x0800a9c9
 800a9a4:	0800a9d1 	.word	0x0800a9d1
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e1ec      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9b0:	2304      	movs	r3, #4
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b6:	e1e8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9b8:	2308      	movs	r3, #8
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9be:	e1e4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c6:	e1e0      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9c8:	2320      	movs	r3, #32
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ce:	e1dc      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9d0:	2340      	movs	r3, #64	@ 0x40
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d6:	e1d8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9d8:	2380      	movs	r3, #128	@ 0x80
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9de:	e1d4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a4f      	ldr	r2, [pc, #316]	@ (800ab24 <UART_SetConfig+0x340>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d130      	bne.n	800aa4c <UART_SetConfig+0x268>
 800a9ea:	4b4c      	ldr	r3, [pc, #304]	@ (800ab1c <UART_SetConfig+0x338>)
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	2b05      	cmp	r3, #5
 800a9f4:	d826      	bhi.n	800aa44 <UART_SetConfig+0x260>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <UART_SetConfig+0x218>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa15 	.word	0x0800aa15
 800aa00:	0800aa1d 	.word	0x0800aa1d
 800aa04:	0800aa25 	.word	0x0800aa25
 800aa08:	0800aa2d 	.word	0x0800aa2d
 800aa0c:	0800aa35 	.word	0x0800aa35
 800aa10:	0800aa3d 	.word	0x0800aa3d
 800aa14:	2300      	movs	r3, #0
 800aa16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa1a:	e1b6      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa22:	e1b2      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa24:	2308      	movs	r3, #8
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa2a:	e1ae      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa32:	e1aa      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa34:	2320      	movs	r3, #32
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3a:	e1a6      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa3c:	2340      	movs	r3, #64	@ 0x40
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e1a2      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa44:	2380      	movs	r3, #128	@ 0x80
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e19e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a35      	ldr	r2, [pc, #212]	@ (800ab28 <UART_SetConfig+0x344>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d130      	bne.n	800aab8 <UART_SetConfig+0x2d4>
 800aa56:	4b31      	ldr	r3, [pc, #196]	@ (800ab1c <UART_SetConfig+0x338>)
 800aa58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	d826      	bhi.n	800aab0 <UART_SetConfig+0x2cc>
 800aa62:	a201      	add	r2, pc, #4	@ (adr r2, 800aa68 <UART_SetConfig+0x284>)
 800aa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa68:	0800aa81 	.word	0x0800aa81
 800aa6c:	0800aa89 	.word	0x0800aa89
 800aa70:	0800aa91 	.word	0x0800aa91
 800aa74:	0800aa99 	.word	0x0800aa99
 800aa78:	0800aaa1 	.word	0x0800aaa1
 800aa7c:	0800aaa9 	.word	0x0800aaa9
 800aa80:	2300      	movs	r3, #0
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa86:	e180      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa88:	2304      	movs	r3, #4
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa8e:	e17c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa90:	2308      	movs	r3, #8
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa96:	e178      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa9e:	e174      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aaa0:	2320      	movs	r3, #32
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaa6:	e170      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aaa8:	2340      	movs	r3, #64	@ 0x40
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaae:	e16c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aab0:	2380      	movs	r3, #128	@ 0x80
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab6:	e168      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1b      	ldr	r2, [pc, #108]	@ (800ab2c <UART_SetConfig+0x348>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d142      	bne.n	800ab48 <UART_SetConfig+0x364>
 800aac2:	4b16      	ldr	r3, [pc, #88]	@ (800ab1c <UART_SetConfig+0x338>)
 800aac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	d838      	bhi.n	800ab40 <UART_SetConfig+0x35c>
 800aace:	a201      	add	r2, pc, #4	@ (adr r2, 800aad4 <UART_SetConfig+0x2f0>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800aaed 	.word	0x0800aaed
 800aad8:	0800aaf5 	.word	0x0800aaf5
 800aadc:	0800aafd 	.word	0x0800aafd
 800aae0:	0800ab05 	.word	0x0800ab05
 800aae4:	0800ab31 	.word	0x0800ab31
 800aae8:	0800ab39 	.word	0x0800ab39
 800aaec:	2300      	movs	r3, #0
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf2:	e14a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aaf4:	2304      	movs	r3, #4
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafa:	e146      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aafc:	2308      	movs	r3, #8
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab02:	e142      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab04:	2310      	movs	r3, #16
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0a:	e13e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab0c:	cfff69f3 	.word	0xcfff69f3
 800ab10:	58000c00 	.word	0x58000c00
 800ab14:	11fff4ff 	.word	0x11fff4ff
 800ab18:	40011000 	.word	0x40011000
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	40004400 	.word	0x40004400
 800ab24:	40004800 	.word	0x40004800
 800ab28:	40004c00 	.word	0x40004c00
 800ab2c:	40005000 	.word	0x40005000
 800ab30:	2320      	movs	r3, #32
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e128      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab38:	2340      	movs	r3, #64	@ 0x40
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e124      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab40:	2380      	movs	r3, #128	@ 0x80
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e120      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4acb      	ldr	r2, [pc, #812]	@ (800ae7c <UART_SetConfig+0x698>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d176      	bne.n	800ac40 <UART_SetConfig+0x45c>
 800ab52:	4bcb      	ldr	r3, [pc, #812]	@ (800ae80 <UART_SetConfig+0x69c>)
 800ab54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab5a:	2b28      	cmp	r3, #40	@ 0x28
 800ab5c:	d86c      	bhi.n	800ac38 <UART_SetConfig+0x454>
 800ab5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <UART_SetConfig+0x380>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800ac09 	.word	0x0800ac09
 800ab68:	0800ac39 	.word	0x0800ac39
 800ab6c:	0800ac39 	.word	0x0800ac39
 800ab70:	0800ac39 	.word	0x0800ac39
 800ab74:	0800ac39 	.word	0x0800ac39
 800ab78:	0800ac39 	.word	0x0800ac39
 800ab7c:	0800ac39 	.word	0x0800ac39
 800ab80:	0800ac39 	.word	0x0800ac39
 800ab84:	0800ac11 	.word	0x0800ac11
 800ab88:	0800ac39 	.word	0x0800ac39
 800ab8c:	0800ac39 	.word	0x0800ac39
 800ab90:	0800ac39 	.word	0x0800ac39
 800ab94:	0800ac39 	.word	0x0800ac39
 800ab98:	0800ac39 	.word	0x0800ac39
 800ab9c:	0800ac39 	.word	0x0800ac39
 800aba0:	0800ac39 	.word	0x0800ac39
 800aba4:	0800ac19 	.word	0x0800ac19
 800aba8:	0800ac39 	.word	0x0800ac39
 800abac:	0800ac39 	.word	0x0800ac39
 800abb0:	0800ac39 	.word	0x0800ac39
 800abb4:	0800ac39 	.word	0x0800ac39
 800abb8:	0800ac39 	.word	0x0800ac39
 800abbc:	0800ac39 	.word	0x0800ac39
 800abc0:	0800ac39 	.word	0x0800ac39
 800abc4:	0800ac21 	.word	0x0800ac21
 800abc8:	0800ac39 	.word	0x0800ac39
 800abcc:	0800ac39 	.word	0x0800ac39
 800abd0:	0800ac39 	.word	0x0800ac39
 800abd4:	0800ac39 	.word	0x0800ac39
 800abd8:	0800ac39 	.word	0x0800ac39
 800abdc:	0800ac39 	.word	0x0800ac39
 800abe0:	0800ac39 	.word	0x0800ac39
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	0800ac39 	.word	0x0800ac39
 800abec:	0800ac39 	.word	0x0800ac39
 800abf0:	0800ac39 	.word	0x0800ac39
 800abf4:	0800ac39 	.word	0x0800ac39
 800abf8:	0800ac39 	.word	0x0800ac39
 800abfc:	0800ac39 	.word	0x0800ac39
 800ac00:	0800ac39 	.word	0x0800ac39
 800ac04:	0800ac31 	.word	0x0800ac31
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e0bc      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac10:	2304      	movs	r3, #4
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e0b8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac18:	2308      	movs	r3, #8
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e0b4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e0b0      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac28:	2320      	movs	r3, #32
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e0ac      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac30:	2340      	movs	r3, #64	@ 0x40
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac36:	e0a8      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac38:	2380      	movs	r3, #128	@ 0x80
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3e:	e0a4      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a8f      	ldr	r2, [pc, #572]	@ (800ae84 <UART_SetConfig+0x6a0>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d130      	bne.n	800acac <UART_SetConfig+0x4c8>
 800ac4a:	4b8d      	ldr	r3, [pc, #564]	@ (800ae80 <UART_SetConfig+0x69c>)
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	d826      	bhi.n	800aca4 <UART_SetConfig+0x4c0>
 800ac56:	a201      	add	r2, pc, #4	@ (adr r2, 800ac5c <UART_SetConfig+0x478>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac75 	.word	0x0800ac75
 800ac60:	0800ac7d 	.word	0x0800ac7d
 800ac64:	0800ac85 	.word	0x0800ac85
 800ac68:	0800ac8d 	.word	0x0800ac8d
 800ac6c:	0800ac95 	.word	0x0800ac95
 800ac70:	0800ac9d 	.word	0x0800ac9d
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e086      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac82:	e082      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac84:	2308      	movs	r3, #8
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8a:	e07e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e07a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac94:	2320      	movs	r3, #32
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9a:	e076      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ac9c:	2340      	movs	r3, #64	@ 0x40
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e072      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800aca4:	2380      	movs	r3, #128	@ 0x80
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e06e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a75      	ldr	r2, [pc, #468]	@ (800ae88 <UART_SetConfig+0x6a4>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d130      	bne.n	800ad18 <UART_SetConfig+0x534>
 800acb6:	4b72      	ldr	r3, [pc, #456]	@ (800ae80 <UART_SetConfig+0x69c>)
 800acb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acba:	f003 0307 	and.w	r3, r3, #7
 800acbe:	2b05      	cmp	r3, #5
 800acc0:	d826      	bhi.n	800ad10 <UART_SetConfig+0x52c>
 800acc2:	a201      	add	r2, pc, #4	@ (adr r2, 800acc8 <UART_SetConfig+0x4e4>)
 800acc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc8:	0800ace1 	.word	0x0800ace1
 800accc:	0800ace9 	.word	0x0800ace9
 800acd0:	0800acf1 	.word	0x0800acf1
 800acd4:	0800acf9 	.word	0x0800acf9
 800acd8:	0800ad01 	.word	0x0800ad01
 800acdc:	0800ad09 	.word	0x0800ad09
 800ace0:	2300      	movs	r3, #0
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e050      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ace8:	2304      	movs	r3, #4
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acee:	e04c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800acf0:	2308      	movs	r3, #8
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e048      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800acf8:	2310      	movs	r3, #16
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e044      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad00:	2320      	movs	r3, #32
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e040      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad08:	2340      	movs	r3, #64	@ 0x40
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e03c      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad10:	2380      	movs	r3, #128	@ 0x80
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e038      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a5b      	ldr	r2, [pc, #364]	@ (800ae8c <UART_SetConfig+0x6a8>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d130      	bne.n	800ad84 <UART_SetConfig+0x5a0>
 800ad22:	4b57      	ldr	r3, [pc, #348]	@ (800ae80 <UART_SetConfig+0x69c>)
 800ad24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b05      	cmp	r3, #5
 800ad2c:	d826      	bhi.n	800ad7c <UART_SetConfig+0x598>
 800ad2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad34 <UART_SetConfig+0x550>)
 800ad30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad34:	0800ad4d 	.word	0x0800ad4d
 800ad38:	0800ad55 	.word	0x0800ad55
 800ad3c:	0800ad5d 	.word	0x0800ad5d
 800ad40:	0800ad65 	.word	0x0800ad65
 800ad44:	0800ad6d 	.word	0x0800ad6d
 800ad48:	0800ad75 	.word	0x0800ad75
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e01a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad54:	2304      	movs	r3, #4
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	e016      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e012      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad64:	2310      	movs	r3, #16
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e00e      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad6c:	2320      	movs	r3, #32
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e00a      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad74:	2340      	movs	r3, #64	@ 0x40
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e006      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad7c:	2380      	movs	r3, #128	@ 0x80
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e002      	b.n	800ad8a <UART_SetConfig+0x5a6>
 800ad84:	2380      	movs	r3, #128	@ 0x80
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a3f      	ldr	r2, [pc, #252]	@ (800ae8c <UART_SetConfig+0x6a8>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	f040 80f8 	bne.w	800af86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	2b20      	cmp	r3, #32
 800ad9c:	dc46      	bgt.n	800ae2c <UART_SetConfig+0x648>
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	f2c0 8082 	blt.w	800aea8 <UART_SetConfig+0x6c4>
 800ada4:	3b02      	subs	r3, #2
 800ada6:	2b1e      	cmp	r3, #30
 800ada8:	d87e      	bhi.n	800aea8 <UART_SetConfig+0x6c4>
 800adaa:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <UART_SetConfig+0x5cc>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800ae33 	.word	0x0800ae33
 800adb4:	0800aea9 	.word	0x0800aea9
 800adb8:	0800ae3b 	.word	0x0800ae3b
 800adbc:	0800aea9 	.word	0x0800aea9
 800adc0:	0800aea9 	.word	0x0800aea9
 800adc4:	0800aea9 	.word	0x0800aea9
 800adc8:	0800ae4b 	.word	0x0800ae4b
 800adcc:	0800aea9 	.word	0x0800aea9
 800add0:	0800aea9 	.word	0x0800aea9
 800add4:	0800aea9 	.word	0x0800aea9
 800add8:	0800aea9 	.word	0x0800aea9
 800addc:	0800aea9 	.word	0x0800aea9
 800ade0:	0800aea9 	.word	0x0800aea9
 800ade4:	0800aea9 	.word	0x0800aea9
 800ade8:	0800ae5b 	.word	0x0800ae5b
 800adec:	0800aea9 	.word	0x0800aea9
 800adf0:	0800aea9 	.word	0x0800aea9
 800adf4:	0800aea9 	.word	0x0800aea9
 800adf8:	0800aea9 	.word	0x0800aea9
 800adfc:	0800aea9 	.word	0x0800aea9
 800ae00:	0800aea9 	.word	0x0800aea9
 800ae04:	0800aea9 	.word	0x0800aea9
 800ae08:	0800aea9 	.word	0x0800aea9
 800ae0c:	0800aea9 	.word	0x0800aea9
 800ae10:	0800aea9 	.word	0x0800aea9
 800ae14:	0800aea9 	.word	0x0800aea9
 800ae18:	0800aea9 	.word	0x0800aea9
 800ae1c:	0800aea9 	.word	0x0800aea9
 800ae20:	0800aea9 	.word	0x0800aea9
 800ae24:	0800aea9 	.word	0x0800aea9
 800ae28:	0800ae9b 	.word	0x0800ae9b
 800ae2c:	2b40      	cmp	r3, #64	@ 0x40
 800ae2e:	d037      	beq.n	800aea0 <UART_SetConfig+0x6bc>
 800ae30:	e03a      	b.n	800aea8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae32:	f7fd fa49 	bl	80082c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae38:	e03c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fd fa58 	bl	80082f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae48:	e034      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4a:	f107 0318 	add.w	r3, r7, #24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fd fba4 	bl	800859c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae58:	e02c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae5a:	4b09      	ldr	r3, [pc, #36]	@ (800ae80 <UART_SetConfig+0x69c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0320 	and.w	r3, r3, #32
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d016      	beq.n	800ae94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae66:	4b06      	ldr	r3, [pc, #24]	@ (800ae80 <UART_SetConfig+0x69c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	08db      	lsrs	r3, r3, #3
 800ae6c:	f003 0303 	and.w	r3, r3, #3
 800ae70:	4a07      	ldr	r2, [pc, #28]	@ (800ae90 <UART_SetConfig+0x6ac>)
 800ae72:	fa22 f303 	lsr.w	r3, r2, r3
 800ae76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae78:	e01c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
 800ae7a:	bf00      	nop
 800ae7c:	40011400 	.word	0x40011400
 800ae80:	58024400 	.word	0x58024400
 800ae84:	40007800 	.word	0x40007800
 800ae88:	40007c00 	.word	0x40007c00
 800ae8c:	58000c00 	.word	0x58000c00
 800ae90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ae94:	4b9d      	ldr	r3, [pc, #628]	@ (800b10c <UART_SetConfig+0x928>)
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae98:	e00c      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae9a:	4b9d      	ldr	r3, [pc, #628]	@ (800b110 <UART_SetConfig+0x92c>)
 800ae9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae9e:	e009      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aea0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea6:	e005      	b.n	800aeb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aeb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aeb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 81de 	beq.w	800b278 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec0:	4a94      	ldr	r2, [pc, #592]	@ (800b114 <UART_SetConfig+0x930>)
 800aec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aec6:	461a      	mov	r2, r3
 800aec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeca:	fbb3 f3f2 	udiv	r3, r3, r2
 800aece:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	4613      	mov	r3, r2
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	4413      	add	r3, r2
 800aeda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aedc:	429a      	cmp	r2, r3
 800aede:	d305      	bcc.n	800aeec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d903      	bls.n	800aef4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aef2:	e1c1      	b.n	800b278 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aef6:	2200      	movs	r2, #0
 800aef8:	60bb      	str	r3, [r7, #8]
 800aefa:	60fa      	str	r2, [r7, #12]
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	4a84      	ldr	r2, [pc, #528]	@ (800b114 <UART_SetConfig+0x930>)
 800af02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af06:	b29b      	uxth	r3, r3
 800af08:	2200      	movs	r2, #0
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	607a      	str	r2, [r7, #4]
 800af0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af16:	f7f5 f9e3 	bl	80002e0 <__aeabi_uldivmod>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4610      	mov	r0, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	f04f 0300 	mov.w	r3, #0
 800af2a:	020b      	lsls	r3, r1, #8
 800af2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af30:	0202      	lsls	r2, r0, #8
 800af32:	6979      	ldr	r1, [r7, #20]
 800af34:	6849      	ldr	r1, [r1, #4]
 800af36:	0849      	lsrs	r1, r1, #1
 800af38:	2000      	movs	r0, #0
 800af3a:	460c      	mov	r4, r1
 800af3c:	4605      	mov	r5, r0
 800af3e:	eb12 0804 	adds.w	r8, r2, r4
 800af42:	eb43 0905 	adc.w	r9, r3, r5
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	469a      	mov	sl, r3
 800af4e:	4693      	mov	fp, r2
 800af50:	4652      	mov	r2, sl
 800af52:	465b      	mov	r3, fp
 800af54:	4640      	mov	r0, r8
 800af56:	4649      	mov	r1, r9
 800af58:	f7f5 f9c2 	bl	80002e0 <__aeabi_uldivmod>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4613      	mov	r3, r2
 800af62:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af6a:	d308      	bcc.n	800af7e <UART_SetConfig+0x79a>
 800af6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af72:	d204      	bcs.n	800af7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af7a:	60da      	str	r2, [r3, #12]
 800af7c:	e17c      	b.n	800b278 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af84:	e178      	b.n	800b278 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af8e:	f040 80c5 	bne.w	800b11c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800af92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af96:	2b20      	cmp	r3, #32
 800af98:	dc48      	bgt.n	800b02c <UART_SetConfig+0x848>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	db7b      	blt.n	800b096 <UART_SetConfig+0x8b2>
 800af9e:	2b20      	cmp	r3, #32
 800afa0:	d879      	bhi.n	800b096 <UART_SetConfig+0x8b2>
 800afa2:	a201      	add	r2, pc, #4	@ (adr r2, 800afa8 <UART_SetConfig+0x7c4>)
 800afa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa8:	0800b033 	.word	0x0800b033
 800afac:	0800b03b 	.word	0x0800b03b
 800afb0:	0800b097 	.word	0x0800b097
 800afb4:	0800b097 	.word	0x0800b097
 800afb8:	0800b043 	.word	0x0800b043
 800afbc:	0800b097 	.word	0x0800b097
 800afc0:	0800b097 	.word	0x0800b097
 800afc4:	0800b097 	.word	0x0800b097
 800afc8:	0800b053 	.word	0x0800b053
 800afcc:	0800b097 	.word	0x0800b097
 800afd0:	0800b097 	.word	0x0800b097
 800afd4:	0800b097 	.word	0x0800b097
 800afd8:	0800b097 	.word	0x0800b097
 800afdc:	0800b097 	.word	0x0800b097
 800afe0:	0800b097 	.word	0x0800b097
 800afe4:	0800b097 	.word	0x0800b097
 800afe8:	0800b063 	.word	0x0800b063
 800afec:	0800b097 	.word	0x0800b097
 800aff0:	0800b097 	.word	0x0800b097
 800aff4:	0800b097 	.word	0x0800b097
 800aff8:	0800b097 	.word	0x0800b097
 800affc:	0800b097 	.word	0x0800b097
 800b000:	0800b097 	.word	0x0800b097
 800b004:	0800b097 	.word	0x0800b097
 800b008:	0800b097 	.word	0x0800b097
 800b00c:	0800b097 	.word	0x0800b097
 800b010:	0800b097 	.word	0x0800b097
 800b014:	0800b097 	.word	0x0800b097
 800b018:	0800b097 	.word	0x0800b097
 800b01c:	0800b097 	.word	0x0800b097
 800b020:	0800b097 	.word	0x0800b097
 800b024:	0800b097 	.word	0x0800b097
 800b028:	0800b089 	.word	0x0800b089
 800b02c:	2b40      	cmp	r3, #64	@ 0x40
 800b02e:	d02e      	beq.n	800b08e <UART_SetConfig+0x8aa>
 800b030:	e031      	b.n	800b096 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b032:	f7fb fed1 	bl	8006dd8 <HAL_RCC_GetPCLK1Freq>
 800b036:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b038:	e033      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b03a:	f7fb fee3 	bl	8006e04 <HAL_RCC_GetPCLK2Freq>
 800b03e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b040:	e02f      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b046:	4618      	mov	r0, r3
 800b048:	f7fd f954 	bl	80082f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b050:	e027      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b052:	f107 0318 	add.w	r3, r7, #24
 800b056:	4618      	mov	r0, r3
 800b058:	f7fd faa0 	bl	800859c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b060:	e01f      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b062:	4b2d      	ldr	r3, [pc, #180]	@ (800b118 <UART_SetConfig+0x934>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0320 	and.w	r3, r3, #32
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d009      	beq.n	800b082 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b06e:	4b2a      	ldr	r3, [pc, #168]	@ (800b118 <UART_SetConfig+0x934>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	08db      	lsrs	r3, r3, #3
 800b074:	f003 0303 	and.w	r3, r3, #3
 800b078:	4a24      	ldr	r2, [pc, #144]	@ (800b10c <UART_SetConfig+0x928>)
 800b07a:	fa22 f303 	lsr.w	r3, r2, r3
 800b07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b080:	e00f      	b.n	800b0a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b082:	4b22      	ldr	r3, [pc, #136]	@ (800b10c <UART_SetConfig+0x928>)
 800b084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b086:	e00c      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b088:	4b21      	ldr	r3, [pc, #132]	@ (800b110 <UART_SetConfig+0x92c>)
 800b08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b08c:	e009      	b.n	800b0a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b08e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b094:	e005      	b.n	800b0a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 80e7 	beq.w	800b278 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ae:	4a19      	ldr	r2, [pc, #100]	@ (800b114 <UART_SetConfig+0x930>)
 800b0b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0bc:	005a      	lsls	r2, r3, #1
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	441a      	add	r2, r3
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d2:	2b0f      	cmp	r3, #15
 800b0d4:	d916      	bls.n	800b104 <UART_SetConfig+0x920>
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0dc:	d212      	bcs.n	800b104 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f023 030f 	bic.w	r3, r3, #15
 800b0e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ea:	085b      	lsrs	r3, r3, #1
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b100:	60da      	str	r2, [r3, #12]
 800b102:	e0b9      	b.n	800b278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b10a:	e0b5      	b.n	800b278 <UART_SetConfig+0xa94>
 800b10c:	03d09000 	.word	0x03d09000
 800b110:	003d0900 	.word	0x003d0900
 800b114:	08011bc0 	.word	0x08011bc0
 800b118:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b11c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b120:	2b20      	cmp	r3, #32
 800b122:	dc49      	bgt.n	800b1b8 <UART_SetConfig+0x9d4>
 800b124:	2b00      	cmp	r3, #0
 800b126:	db7c      	blt.n	800b222 <UART_SetConfig+0xa3e>
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d87a      	bhi.n	800b222 <UART_SetConfig+0xa3e>
 800b12c:	a201      	add	r2, pc, #4	@ (adr r2, 800b134 <UART_SetConfig+0x950>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b1bf 	.word	0x0800b1bf
 800b138:	0800b1c7 	.word	0x0800b1c7
 800b13c:	0800b223 	.word	0x0800b223
 800b140:	0800b223 	.word	0x0800b223
 800b144:	0800b1cf 	.word	0x0800b1cf
 800b148:	0800b223 	.word	0x0800b223
 800b14c:	0800b223 	.word	0x0800b223
 800b150:	0800b223 	.word	0x0800b223
 800b154:	0800b1df 	.word	0x0800b1df
 800b158:	0800b223 	.word	0x0800b223
 800b15c:	0800b223 	.word	0x0800b223
 800b160:	0800b223 	.word	0x0800b223
 800b164:	0800b223 	.word	0x0800b223
 800b168:	0800b223 	.word	0x0800b223
 800b16c:	0800b223 	.word	0x0800b223
 800b170:	0800b223 	.word	0x0800b223
 800b174:	0800b1ef 	.word	0x0800b1ef
 800b178:	0800b223 	.word	0x0800b223
 800b17c:	0800b223 	.word	0x0800b223
 800b180:	0800b223 	.word	0x0800b223
 800b184:	0800b223 	.word	0x0800b223
 800b188:	0800b223 	.word	0x0800b223
 800b18c:	0800b223 	.word	0x0800b223
 800b190:	0800b223 	.word	0x0800b223
 800b194:	0800b223 	.word	0x0800b223
 800b198:	0800b223 	.word	0x0800b223
 800b19c:	0800b223 	.word	0x0800b223
 800b1a0:	0800b223 	.word	0x0800b223
 800b1a4:	0800b223 	.word	0x0800b223
 800b1a8:	0800b223 	.word	0x0800b223
 800b1ac:	0800b223 	.word	0x0800b223
 800b1b0:	0800b223 	.word	0x0800b223
 800b1b4:	0800b215 	.word	0x0800b215
 800b1b8:	2b40      	cmp	r3, #64	@ 0x40
 800b1ba:	d02e      	beq.n	800b21a <UART_SetConfig+0xa36>
 800b1bc:	e031      	b.n	800b222 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1be:	f7fb fe0b 	bl	8006dd8 <HAL_RCC_GetPCLK1Freq>
 800b1c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1c4:	e033      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1c6:	f7fb fe1d 	bl	8006e04 <HAL_RCC_GetPCLK2Freq>
 800b1ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1cc:	e02f      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fd f88e 	bl	80082f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1dc:	e027      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1de:	f107 0318 	add.w	r3, r7, #24
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fd f9da 	bl	800859c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ec:	e01f      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ee:	4b2d      	ldr	r3, [pc, #180]	@ (800b2a4 <UART_SetConfig+0xac0>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d009      	beq.n	800b20e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1fa:	4b2a      	ldr	r3, [pc, #168]	@ (800b2a4 <UART_SetConfig+0xac0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	08db      	lsrs	r3, r3, #3
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	4a28      	ldr	r2, [pc, #160]	@ (800b2a8 <UART_SetConfig+0xac4>)
 800b206:	fa22 f303 	lsr.w	r3, r2, r3
 800b20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b20c:	e00f      	b.n	800b22e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b20e:	4b26      	ldr	r3, [pc, #152]	@ (800b2a8 <UART_SetConfig+0xac4>)
 800b210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b212:	e00c      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b214:	4b25      	ldr	r3, [pc, #148]	@ (800b2ac <UART_SetConfig+0xac8>)
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b218:	e009      	b.n	800b22e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b220:	e005      	b.n	800b22e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b22c:	bf00      	nop
    }

    if (pclk != 0U)
 800b22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d021      	beq.n	800b278 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b238:	4a1d      	ldr	r2, [pc, #116]	@ (800b2b0 <UART_SetConfig+0xacc>)
 800b23a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b23e:	461a      	mov	r2, r3
 800b240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b242:	fbb3 f2f2 	udiv	r2, r3, r2
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	085b      	lsrs	r3, r3, #1
 800b24c:	441a      	add	r2, r3
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	fbb2 f3f3 	udiv	r3, r2, r3
 800b256:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	2b0f      	cmp	r3, #15
 800b25c:	d909      	bls.n	800b272 <UART_SetConfig+0xa8e>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b264:	d205      	bcs.n	800b272 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	b29a      	uxth	r2, r3
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	60da      	str	r2, [r3, #12]
 800b270:	e002      	b.n	800b278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2201      	movs	r2, #1
 800b284:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2200      	movs	r2, #0
 800b28c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2200      	movs	r2, #0
 800b292:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b294:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3748      	adds	r7, #72	@ 0x48
 800b29c:	46bd      	mov	sp, r7
 800b29e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2a2:	bf00      	nop
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	03d09000 	.word	0x03d09000
 800b2ac:	003d0900 	.word	0x003d0900
 800b2b0:	08011bc0 	.word	0x08011bc0

0800b2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c0:	f003 0308 	and.w	r3, r3, #8
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00a      	beq.n	800b2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01a      	beq.n	800b3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3b2:	d10a      	bne.n	800b3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	605a      	str	r2, [r3, #4]
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b098      	sub	sp, #96	@ 0x60
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b408:	f7f6 f89c 	bl	8001544 <HAL_GetTick>
 800b40c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d12f      	bne.n	800b47c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b41c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b424:	2200      	movs	r2, #0
 800b426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f88e 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d022      	beq.n	800b47c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43e:	e853 3f00 	ldrex	r3, [r3]
 800b442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b44a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b454:	647b      	str	r3, [r7, #68]	@ 0x44
 800b456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b45a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e6      	bne.n	800b436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e063      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b04      	cmp	r3, #4
 800b488:	d149      	bne.n	800b51e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b492:	2200      	movs	r2, #0
 800b494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f857 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d03c      	beq.n	800b51e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e6      	bne.n	800b4a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f6:	61fa      	str	r2, [r7, #28]
 800b4f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	69b9      	ldr	r1, [r7, #24]
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	617b      	str	r3, [r7, #20]
   return(result);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e5      	bne.n	800b4d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e012      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2220      	movs	r2, #32
 800b522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3758      	adds	r7, #88	@ 0x58
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	4613      	mov	r3, r2
 800b55a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b55c:	e04f      	b.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d04b      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b566:	f7f5 ffed 	bl	8001544 <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	429a      	cmp	r2, r3
 800b574:	d302      	bcc.n	800b57c <UART_WaitOnFlagUntilTimeout+0x30>
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e04e      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d037      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b80      	cmp	r3, #128	@ 0x80
 800b592:	d034      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b40      	cmp	r3, #64	@ 0x40
 800b598:	d031      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	f003 0308 	and.w	r3, r3, #8
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d110      	bne.n	800b5ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 f921 	bl	800b7f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2208      	movs	r2, #8
 800b5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e029      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5d8:	d111      	bne.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f907 	bl	800b7f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e00f      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69da      	ldr	r2, [r3, #28]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4013      	ands	r3, r2
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	bf0c      	ite	eq
 800b60e:	2301      	moveq	r3, #1
 800b610:	2300      	movne	r3, #0
 800b612:	b2db      	uxtb	r3, r3
 800b614:	461a      	mov	r2, r3
 800b616:	79fb      	ldrb	r3, [r7, #7]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d0a0      	beq.n	800b55e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b096      	sub	sp, #88	@ 0x58
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2222      	movs	r2, #34	@ 0x22
 800b650:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d02d      	beq.n	800b6ba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b664:	4a40      	ldr	r2, [pc, #256]	@ (800b768 <UART_Start_Receive_DMA+0x140>)
 800b666:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b66e:	4a3f      	ldr	r2, [pc, #252]	@ (800b76c <UART_Start_Receive_DMA+0x144>)
 800b670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b678:	4a3d      	ldr	r2, [pc, #244]	@ (800b770 <UART_Start_Receive_DMA+0x148>)
 800b67a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b682:	2200      	movs	r2, #0
 800b684:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3324      	adds	r3, #36	@ 0x24
 800b692:	4619      	mov	r1, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b698:	461a      	mov	r2, r3
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	f7f6 fc42 	bl	8001f24 <HAL_DMA_Start_IT>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d009      	beq.n	800b6ba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e051      	b.n	800b75e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d018      	beq.n	800b6f4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ca:	e853 3f00 	ldrex	r3, [r3]
 800b6ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6e2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b6ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e6      	bne.n	800b6c2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fe:	e853 3f00 	ldrex	r3, [r3]
 800b702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	f043 0301 	orr.w	r3, r3, #1
 800b70a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3308      	adds	r3, #8
 800b712:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b714:	637a      	str	r2, [r7, #52]	@ 0x34
 800b716:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b718:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b71a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b71c:	e841 2300 	strex	r3, r2, [r1]
 800b720:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e5      	bne.n	800b6f4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3308      	adds	r3, #8
 800b72e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	e853 3f00 	ldrex	r3, [r3]
 800b736:	613b      	str	r3, [r7, #16]
   return(result);
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b748:	623a      	str	r2, [r7, #32]
 800b74a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	69f9      	ldr	r1, [r7, #28]
 800b74e:	6a3a      	ldr	r2, [r7, #32]
 800b750:	e841 2300 	strex	r3, r2, [r1]
 800b754:	61bb      	str	r3, [r7, #24]
   return(result);
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e5      	bne.n	800b728 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3758      	adds	r7, #88	@ 0x58
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	0800b8c5 	.word	0x0800b8c5
 800b76c:	0800b9ed 	.word	0x0800b9ed
 800b770:	0800ba2b 	.word	0x0800ba2b

0800b774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b08f      	sub	sp, #60	@ 0x3c
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	61fb      	str	r3, [r7, #28]
   return(result);
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b790:	637b      	str	r3, [r7, #52]	@ 0x34
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b79c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e6      	bne.n	800b77c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b7c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ce:	61ba      	str	r2, [r7, #24]
 800b7d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	6979      	ldr	r1, [r7, #20]
 800b7d4:	69ba      	ldr	r2, [r7, #24]
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	613b      	str	r3, [r7, #16]
   return(result);
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e5      	bne.n	800b7ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b7ea:	bf00      	nop
 800b7ec:	373c      	adds	r7, #60	@ 0x3c
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b095      	sub	sp, #84	@ 0x54
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b808:	e853 3f00 	ldrex	r3, [r3]
 800b80c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b814:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b81e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b820:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b822:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b824:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b826:	e841 2300 	strex	r3, r2, [r1]
 800b82a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1e6      	bne.n	800b800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3308      	adds	r3, #8
 800b838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	61fb      	str	r3, [r7, #28]
   return(result);
 800b842:	69fa      	ldr	r2, [r7, #28]
 800b844:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c0 <UART_EndRxTransfer+0xc8>)
 800b846:	4013      	ands	r3, r2
 800b848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3308      	adds	r3, #8
 800b850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b854:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e5      	bne.n	800b832 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d118      	bne.n	800b8a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	e853 3f00 	ldrex	r3, [r3]
 800b87a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f023 0310 	bic.w	r3, r3, #16
 800b882:	647b      	str	r3, [r7, #68]	@ 0x44
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
 800b88a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b890:	6979      	ldr	r1, [r7, #20]
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	e841 2300 	strex	r3, r2, [r1]
 800b898:	613b      	str	r3, [r7, #16]
   return(result);
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e6      	bne.n	800b86e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b8b4:	bf00      	nop
 800b8b6:	3754      	adds	r7, #84	@ 0x54
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	effffffe 	.word	0xeffffffe

0800b8c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b09c      	sub	sp, #112	@ 0x70
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8da:	d071      	beq.n	800b9c0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b8dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ec:	e853 3f00 	ldrex	r3, [r3]
 800b8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	461a      	mov	r2, r3
 800b900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b902:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b904:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b908:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b90a:	e841 2300 	strex	r3, r2, [r1]
 800b90e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1e6      	bne.n	800b8e4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3308      	adds	r3, #8
 800b91c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b920:	e853 3f00 	ldrex	r3, [r3]
 800b924:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b928:	f023 0301 	bic.w	r3, r3, #1
 800b92c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b92e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3308      	adds	r3, #8
 800b934:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b936:	647a      	str	r2, [r7, #68]	@ 0x44
 800b938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b93c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b93e:	e841 2300 	strex	r3, r2, [r1]
 800b942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1e5      	bne.n	800b916 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b94a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3308      	adds	r3, #8
 800b950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b954:	e853 3f00 	ldrex	r3, [r3]
 800b958:	623b      	str	r3, [r7, #32]
   return(result);
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b960:	663b      	str	r3, [r7, #96]	@ 0x60
 800b962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b96a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b972:	e841 2300 	strex	r3, r2, [r1]
 800b976:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1e5      	bne.n	800b94a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b97e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b980:	2220      	movs	r2, #32
 800b982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d118      	bne.n	800b9c0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b98e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0310 	bic.w	r3, r3, #16
 800b9a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	69b9      	ldr	r1, [r7, #24]
 800b9b2:	69fa      	ldr	r2, [r7, #28]
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e6      	bne.n	800b98e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d107      	bne.n	800b9de <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b9d8:	f7fe fef8 	bl	800a7cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9dc:	e002      	b.n	800b9e4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b9de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b9e0:	f7f5 fb34 	bl	800104c <HAL_UART_RxCpltCallback>
}
 800b9e4:	bf00      	nop
 800b9e6:	3770      	adds	r7, #112	@ 0x70
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d109      	bne.n	800ba1c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba0e:	085b      	lsrs	r3, r3, #1
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	4619      	mov	r1, r3
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f7fe fed9 	bl	800a7cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba1a:	e002      	b.n	800ba22 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7f5 faf7 	bl	8001010 <HAL_UART_RxHalfCpltCallback>
}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b086      	sub	sp, #24
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba52:	2b80      	cmp	r3, #128	@ 0x80
 800ba54:	d109      	bne.n	800ba6a <UART_DMAError+0x40>
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	2b21      	cmp	r3, #33	@ 0x21
 800ba5a:	d106      	bne.n	800ba6a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ba64:	6978      	ldr	r0, [r7, #20]
 800ba66:	f7ff fe85 	bl	800b774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba74:	2b40      	cmp	r3, #64	@ 0x40
 800ba76:	d109      	bne.n	800ba8c <UART_DMAError+0x62>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b22      	cmp	r3, #34	@ 0x22
 800ba7c:	d106      	bne.n	800ba8c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ba86:	6978      	ldr	r0, [r7, #20]
 800ba88:	f7ff feb6 	bl	800b7f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba92:	f043 0210 	orr.w	r2, r3, #16
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba9c:	6978      	ldr	r0, [r7, #20]
 800ba9e:	f7fe fe8b 	bl	800a7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baa2:	bf00      	nop
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f7fe fe79 	bl	800a7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bac6:	bf00      	nop
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b088      	sub	sp, #32
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	e853 3f00 	ldrex	r3, [r3]
 800bae2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800baea:	61fb      	str	r3, [r7, #28]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	461a      	mov	r2, r3
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	61bb      	str	r3, [r7, #24]
 800baf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf8:	6979      	ldr	r1, [r7, #20]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	e841 2300 	strex	r3, r2, [r1]
 800bb00:	613b      	str	r3, [r7, #16]
   return(result);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e6      	bne.n	800bad6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7fe fe44 	bl	800a7a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb1c:	bf00      	nop
 800bb1e:	3720      	adds	r7, #32
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d101      	bne.n	800bb76 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb72:	2302      	movs	r3, #2
 800bb74:	e027      	b.n	800bbc6 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2224      	movs	r2, #36	@ 0x24
 800bb82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f022 0201 	bic.w	r2, r2, #1
 800bb9c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d101      	bne.n	800bbea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e02d      	b.n	800bc46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2224      	movs	r2, #36	@ 0x24
 800bbf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f022 0201 	bic.w	r2, r2, #1
 800bc10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	430a      	orrs	r2, r1
 800bc24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f850 	bl	800bccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2220      	movs	r2, #32
 800bc38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d101      	bne.n	800bc66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc62:	2302      	movs	r3, #2
 800bc64:	e02d      	b.n	800bcc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2224      	movs	r2, #36	@ 0x24
 800bc72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0201 	bic.w	r2, r2, #1
 800bc8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	683a      	ldr	r2, [r7, #0]
 800bc9e:	430a      	orrs	r2, r1
 800bca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f812 	bl	800bccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2220      	movs	r2, #32
 800bcb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d108      	bne.n	800bcee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcec:	e031      	b.n	800bd52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcee:	2310      	movs	r3, #16
 800bcf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcf2:	2310      	movs	r3, #16
 800bcf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	0e5b      	lsrs	r3, r3, #25
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	f003 0307 	and.w	r3, r3, #7
 800bd04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	0f5b      	lsrs	r3, r3, #29
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	f003 0307 	and.w	r3, r3, #7
 800bd14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	7b3a      	ldrb	r2, [r7, #12]
 800bd1a:	4911      	ldr	r1, [pc, #68]	@ (800bd60 <UARTEx_SetNbDataToProcess+0x94>)
 800bd1c:	5c8a      	ldrb	r2, [r1, r2]
 800bd1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd22:	7b3a      	ldrb	r2, [r7, #12]
 800bd24:	490f      	ldr	r1, [pc, #60]	@ (800bd64 <UARTEx_SetNbDataToProcess+0x98>)
 800bd26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd28:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	7b7a      	ldrb	r2, [r7, #13]
 800bd38:	4909      	ldr	r1, [pc, #36]	@ (800bd60 <UARTEx_SetNbDataToProcess+0x94>)
 800bd3a:	5c8a      	ldrb	r2, [r1, r2]
 800bd3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd40:	7b7a      	ldrb	r2, [r7, #13]
 800bd42:	4908      	ldr	r1, [pc, #32]	@ (800bd64 <UARTEx_SetNbDataToProcess+0x98>)
 800bd44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd46:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd52:	bf00      	nop
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	08011bd8 	.word	0x08011bd8
 800bd64:	08011be0 	.word	0x08011be0

0800bd68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd68:	b084      	sub	sp, #16
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	f107 001c 	add.w	r0, r7, #28
 800bd76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d121      	bne.n	800bdc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68da      	ldr	r2, [r3, #12]
 800bd92:	4b2c      	ldr	r3, [pc, #176]	@ (800be44 <USB_CoreInit+0xdc>)
 800bd94:	4013      	ands	r3, r2
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bda6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d105      	bne.n	800bdba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f001 fafa 	bl	800d3b4 <USB_CoreReset>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
 800bdc4:	e01b      	b.n	800bdfe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 faee 	bl	800d3b4 <USB_CoreReset>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bddc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d106      	bne.n	800bdf2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	639a      	str	r2, [r3, #56]	@ 0x38
 800bdf0:	e005      	b.n	800bdfe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bdfe:	7fbb      	ldrb	r3, [r7, #30]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d116      	bne.n	800be32 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be08:	b29a      	uxth	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800be12:	4b0d      	ldr	r3, [pc, #52]	@ (800be48 <USB_CoreInit+0xe0>)
 800be14:	4313      	orrs	r3, r2
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	f043 0206 	orr.w	r2, r3, #6
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f043 0220 	orr.w	r2, r3, #32
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be32:	7bfb      	ldrb	r3, [r7, #15]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be3e:	b004      	add	sp, #16
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	ffbdffbf 	.word	0xffbdffbf
 800be48:	03ee0000 	.word	0x03ee0000

0800be4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	4613      	mov	r3, r2
 800be58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be5a:	79fb      	ldrb	r3, [r7, #7]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d165      	bne.n	800bf2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	4a41      	ldr	r2, [pc, #260]	@ (800bf68 <USB_SetTurnaroundTime+0x11c>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d906      	bls.n	800be76 <USB_SetTurnaroundTime+0x2a>
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	4a40      	ldr	r2, [pc, #256]	@ (800bf6c <USB_SetTurnaroundTime+0x120>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d202      	bcs.n	800be76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be70:	230f      	movs	r3, #15
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	e062      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	4a3c      	ldr	r2, [pc, #240]	@ (800bf6c <USB_SetTurnaroundTime+0x120>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d306      	bcc.n	800be8c <USB_SetTurnaroundTime+0x40>
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	4a3b      	ldr	r2, [pc, #236]	@ (800bf70 <USB_SetTurnaroundTime+0x124>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d202      	bcs.n	800be8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be86:	230e      	movs	r3, #14
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	e057      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4a38      	ldr	r2, [pc, #224]	@ (800bf70 <USB_SetTurnaroundTime+0x124>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d306      	bcc.n	800bea2 <USB_SetTurnaroundTime+0x56>
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	4a37      	ldr	r2, [pc, #220]	@ (800bf74 <USB_SetTurnaroundTime+0x128>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d202      	bcs.n	800bea2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be9c:	230d      	movs	r3, #13
 800be9e:	617b      	str	r3, [r7, #20]
 800bea0:	e04c      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	4a33      	ldr	r2, [pc, #204]	@ (800bf74 <USB_SetTurnaroundTime+0x128>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d306      	bcc.n	800beb8 <USB_SetTurnaroundTime+0x6c>
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	4a32      	ldr	r2, [pc, #200]	@ (800bf78 <USB_SetTurnaroundTime+0x12c>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d802      	bhi.n	800beb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800beb2:	230c      	movs	r3, #12
 800beb4:	617b      	str	r3, [r7, #20]
 800beb6:	e041      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	4a2f      	ldr	r2, [pc, #188]	@ (800bf78 <USB_SetTurnaroundTime+0x12c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d906      	bls.n	800bece <USB_SetTurnaroundTime+0x82>
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	4a2e      	ldr	r2, [pc, #184]	@ (800bf7c <USB_SetTurnaroundTime+0x130>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d802      	bhi.n	800bece <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bec8:	230b      	movs	r3, #11
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	e036      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	4a2a      	ldr	r2, [pc, #168]	@ (800bf7c <USB_SetTurnaroundTime+0x130>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d906      	bls.n	800bee4 <USB_SetTurnaroundTime+0x98>
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	4a29      	ldr	r2, [pc, #164]	@ (800bf80 <USB_SetTurnaroundTime+0x134>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d802      	bhi.n	800bee4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bede:	230a      	movs	r3, #10
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	e02b      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	4a26      	ldr	r2, [pc, #152]	@ (800bf80 <USB_SetTurnaroundTime+0x134>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d906      	bls.n	800befa <USB_SetTurnaroundTime+0xae>
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	4a25      	ldr	r2, [pc, #148]	@ (800bf84 <USB_SetTurnaroundTime+0x138>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d202      	bcs.n	800befa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bef4:	2309      	movs	r3, #9
 800bef6:	617b      	str	r3, [r7, #20]
 800bef8:	e020      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	4a21      	ldr	r2, [pc, #132]	@ (800bf84 <USB_SetTurnaroundTime+0x138>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d306      	bcc.n	800bf10 <USB_SetTurnaroundTime+0xc4>
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	4a20      	ldr	r2, [pc, #128]	@ (800bf88 <USB_SetTurnaroundTime+0x13c>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d802      	bhi.n	800bf10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf0a:	2308      	movs	r3, #8
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	e015      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	4a1d      	ldr	r2, [pc, #116]	@ (800bf88 <USB_SetTurnaroundTime+0x13c>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d906      	bls.n	800bf26 <USB_SetTurnaroundTime+0xda>
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4a1c      	ldr	r2, [pc, #112]	@ (800bf8c <USB_SetTurnaroundTime+0x140>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d202      	bcs.n	800bf26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf20:	2307      	movs	r3, #7
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	e00a      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf26:	2306      	movs	r3, #6
 800bf28:	617b      	str	r3, [r7, #20]
 800bf2a:	e007      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d102      	bne.n	800bf38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf32:	2309      	movs	r3, #9
 800bf34:	617b      	str	r3, [r7, #20]
 800bf36:	e001      	b.n	800bf3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf38:	2309      	movs	r3, #9
 800bf3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	68da      	ldr	r2, [r3, #12]
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	029b      	lsls	r3, r3, #10
 800bf50:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bf54:	431a      	orrs	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	00d8acbf 	.word	0x00d8acbf
 800bf6c:	00e4e1c0 	.word	0x00e4e1c0
 800bf70:	00f42400 	.word	0x00f42400
 800bf74:	01067380 	.word	0x01067380
 800bf78:	011a499f 	.word	0x011a499f
 800bf7c:	01312cff 	.word	0x01312cff
 800bf80:	014ca43f 	.word	0x014ca43f
 800bf84:	016e3600 	.word	0x016e3600
 800bf88:	01a6ab1f 	.word	0x01a6ab1f
 800bf8c:	01e84800 	.word	0x01e84800

0800bf90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f043 0201 	orr.w	r2, r3, #1
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f023 0201 	bic.w	r2, r3, #1
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	460b      	mov	r3, r1
 800bfde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d115      	bne.n	800c022 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c002:	200a      	movs	r0, #10
 800c004:	f7f5 faaa 	bl	800155c <HAL_Delay>
      ms += 10U;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	330a      	adds	r3, #10
 800c00c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f001 f93f 	bl	800d292 <USB_GetMode>
 800c014:	4603      	mov	r3, r0
 800c016:	2b01      	cmp	r3, #1
 800c018:	d01e      	beq.n	800c058 <USB_SetCurrentMode+0x84>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2bc7      	cmp	r3, #199	@ 0xc7
 800c01e:	d9f0      	bls.n	800c002 <USB_SetCurrentMode+0x2e>
 800c020:	e01a      	b.n	800c058 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d115      	bne.n	800c054 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c034:	200a      	movs	r0, #10
 800c036:	f7f5 fa91 	bl	800155c <HAL_Delay>
      ms += 10U;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	330a      	adds	r3, #10
 800c03e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f001 f926 	bl	800d292 <USB_GetMode>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d005      	beq.n	800c058 <USB_SetCurrentMode+0x84>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2bc7      	cmp	r3, #199	@ 0xc7
 800c050:	d9f0      	bls.n	800c034 <USB_SetCurrentMode+0x60>
 800c052:	e001      	b.n	800c058 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e005      	b.n	800c064 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2bc8      	cmp	r3, #200	@ 0xc8
 800c05c:	d101      	bne.n	800c062 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e000      	b.n	800c064 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c06c:	b084      	sub	sp, #16
 800c06e:	b580      	push	{r7, lr}
 800c070:	b086      	sub	sp, #24
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c07a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c086:	2300      	movs	r3, #0
 800c088:	613b      	str	r3, [r7, #16]
 800c08a:	e009      	b.n	800c0a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	3340      	adds	r3, #64	@ 0x40
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4413      	add	r3, r2
 800c096:	2200      	movs	r2, #0
 800c098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	3301      	adds	r3, #1
 800c09e:	613b      	str	r3, [r7, #16]
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2b0e      	cmp	r3, #14
 800c0a4:	d9f2      	bls.n	800c08c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c0a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d11c      	bne.n	800c0e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0bc:	f043 0302 	orr.w	r3, r3, #2
 800c0c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	e005      	b.n	800c0f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c100:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c104:	2b01      	cmp	r3, #1
 800c106:	d10d      	bne.n	800c124 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c110:	2100      	movs	r1, #0
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f968 	bl	800c3e8 <USB_SetDevSpeed>
 800c118:	e008      	b.n	800c12c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c11a:	2101      	movs	r1, #1
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f963 	bl	800c3e8 <USB_SetDevSpeed>
 800c122:	e003      	b.n	800c12c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c124:	2103      	movs	r1, #3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f95e 	bl	800c3e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c12c:	2110      	movs	r1, #16
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f8fa 	bl	800c328 <USB_FlushTxFifo>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f924 	bl	800c38c <USB_FlushRxFifo>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c154:	461a      	mov	r2, r3
 800c156:	2300      	movs	r3, #0
 800c158:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c160:	461a      	mov	r2, r3
 800c162:	2300      	movs	r3, #0
 800c164:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c16c:	461a      	mov	r2, r3
 800c16e:	2300      	movs	r3, #0
 800c170:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c172:	2300      	movs	r3, #0
 800c174:	613b      	str	r3, [r7, #16]
 800c176:	e043      	b.n	800c200 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	015a      	lsls	r2, r3, #5
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	4413      	add	r3, r2
 800c180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c18a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c18e:	d118      	bne.n	800c1c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10a      	bne.n	800c1ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	015a      	lsls	r2, r3, #5
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	4413      	add	r3, r2
 800c19e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	e013      	b.n	800c1d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	e008      	b.n	800c1d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c1f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	613b      	str	r3, [r7, #16]
 800c200:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c204:	461a      	mov	r2, r3
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	4293      	cmp	r3, r2
 800c20a:	d3b5      	bcc.n	800c178 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c20c:	2300      	movs	r3, #0
 800c20e:	613b      	str	r3, [r7, #16]
 800c210:	e043      	b.n	800c29a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	015a      	lsls	r2, r3, #5
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	4413      	add	r3, r2
 800c21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c228:	d118      	bne.n	800c25c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	015a      	lsls	r2, r3, #5
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	4413      	add	r3, r2
 800c238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c23c:	461a      	mov	r2, r3
 800c23e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c242:	6013      	str	r3, [r2, #0]
 800c244:	e013      	b.n	800c26e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	015a      	lsls	r2, r3, #5
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c252:	461a      	mov	r2, r3
 800c254:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c258:	6013      	str	r3, [r2, #0]
 800c25a:	e008      	b.n	800c26e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	015a      	lsls	r2, r3, #5
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	4413      	add	r3, r2
 800c264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c268:	461a      	mov	r2, r3
 800c26a:	2300      	movs	r3, #0
 800c26c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c27a:	461a      	mov	r2, r3
 800c27c:	2300      	movs	r3, #0
 800c27e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	015a      	lsls	r2, r3, #5
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4413      	add	r3, r2
 800c288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c28c:	461a      	mov	r2, r3
 800c28e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	3301      	adds	r3, #1
 800c298:	613b      	str	r3, [r7, #16]
 800c29a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c29e:	461a      	mov	r2, r3
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d3b5      	bcc.n	800c212 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c2c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d105      	bne.n	800c2dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	f043 0210 	orr.w	r2, r3, #16
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	699a      	ldr	r2, [r3, #24]
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c320 <USB_DevInit+0x2b4>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c2e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d005      	beq.n	800c2fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	f043 0208 	orr.w	r2, r3, #8
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c300:	2b01      	cmp	r3, #1
 800c302:	d105      	bne.n	800c310 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	699a      	ldr	r2, [r3, #24]
 800c308:	4b06      	ldr	r3, [pc, #24]	@ (800c324 <USB_DevInit+0x2b8>)
 800c30a:	4313      	orrs	r3, r2
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c310:	7dfb      	ldrb	r3, [r7, #23]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c31c:	b004      	add	sp, #16
 800c31e:	4770      	bx	lr
 800c320:	803c3800 	.word	0x803c3800
 800c324:	40000004 	.word	0x40000004

0800c328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3301      	adds	r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c342:	d901      	bls.n	800c348 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c344:	2303      	movs	r3, #3
 800c346:	e01b      	b.n	800c380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	daf2      	bge.n	800c336 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c350:	2300      	movs	r3, #0
 800c352:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	019b      	lsls	r3, r3, #6
 800c358:	f043 0220 	orr.w	r2, r3, #32
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c36c:	d901      	bls.n	800c372 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e006      	b.n	800c380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b20      	cmp	r3, #32
 800c37c:	d0f0      	beq.n	800c360 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c394:	2300      	movs	r3, #0
 800c396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3a4:	d901      	bls.n	800c3aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e018      	b.n	800c3dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	daf2      	bge.n	800c398 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2210      	movs	r2, #16
 800c3ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3c8:	d901      	bls.n	800c3ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e006      	b.n	800c3dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	f003 0310 	and.w	r3, r3, #16
 800c3d6:	2b10      	cmp	r3, #16
 800c3d8:	d0f0      	beq.n	800c3bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	78fb      	ldrb	r3, [r7, #3]
 800c402:	68f9      	ldr	r1, [r7, #12]
 800c404:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c408:	4313      	orrs	r3, r2
 800c40a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3714      	adds	r7, #20
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr

0800c41a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b087      	sub	sp, #28
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f003 0306 	and.w	r3, r3, #6
 800c432:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d102      	bne.n	800c440 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75fb      	strb	r3, [r7, #23]
 800c43e:	e00a      	b.n	800c456 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b02      	cmp	r3, #2
 800c444:	d002      	beq.n	800c44c <USB_GetDevSpeed+0x32>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b06      	cmp	r3, #6
 800c44a:	d102      	bne.n	800c452 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c44c:	2302      	movs	r3, #2
 800c44e:	75fb      	strb	r3, [r7, #23]
 800c450:	e001      	b.n	800c456 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c452:	230f      	movs	r3, #15
 800c454:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c456:	7dfb      	ldrb	r3, [r7, #23]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	371c      	adds	r7, #28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d139      	bne.n	800c4f4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c486:	69da      	ldr	r2, [r3, #28]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	f003 030f 	and.w	r3, r3, #15
 800c490:	2101      	movs	r1, #1
 800c492:	fa01 f303 	lsl.w	r3, r1, r3
 800c496:	b29b      	uxth	r3, r3
 800c498:	68f9      	ldr	r1, [r7, #12]
 800c49a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d153      	bne.n	800c560 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	791b      	ldrb	r3, [r3, #4]
 800c4d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	059b      	lsls	r3, r3, #22
 800c4da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	0159      	lsls	r1, r3, #5
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	440b      	add	r3, r1
 800c4e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4b20      	ldr	r3, [pc, #128]	@ (800c570 <USB_ActivateEndpoint+0x10c>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	600b      	str	r3, [r1, #0]
 800c4f2:	e035      	b.n	800c560 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4fa:	69da      	ldr	r2, [r3, #28]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	f003 030f 	and.w	r3, r3, #15
 800c504:	2101      	movs	r1, #1
 800c506:	fa01 f303 	lsl.w	r3, r1, r3
 800c50a:	041b      	lsls	r3, r3, #16
 800c50c:	68f9      	ldr	r1, [r7, #12]
 800c50e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c512:	4313      	orrs	r3, r2
 800c514:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	015a      	lsls	r2, r3, #5
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4413      	add	r3, r2
 800c51e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d119      	bne.n	800c560 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	791b      	ldrb	r3, [r3, #4]
 800c546:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c548:	430b      	orrs	r3, r1
 800c54a:	431a      	orrs	r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	0159      	lsls	r1, r3, #5
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	440b      	add	r3, r1
 800c554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c558:	4619      	mov	r1, r3
 800c55a:	4b05      	ldr	r3, [pc, #20]	@ (800c570 <USB_ActivateEndpoint+0x10c>)
 800c55c:	4313      	orrs	r3, r2
 800c55e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	10008000 	.word	0x10008000

0800c574 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d161      	bne.n	800c654 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5a6:	d11f      	bne.n	800c5e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	015a      	lsls	r2, r3, #5
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	0151      	lsls	r1, r2, #5
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	440a      	add	r2, r1
 800c5be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c5c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	0151      	lsls	r1, r2, #5
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c5e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	f003 030f 	and.w	r3, r3, #15
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	43db      	mvns	r3, r3
 800c602:	68f9      	ldr	r1, [r7, #12]
 800c604:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c608:	4013      	ands	r3, r2
 800c60a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c612:	69da      	ldr	r2, [r3, #28]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	f003 030f 	and.w	r3, r3, #15
 800c61c:	2101      	movs	r1, #1
 800c61e:	fa01 f303 	lsl.w	r3, r1, r3
 800c622:	b29b      	uxth	r3, r3
 800c624:	43db      	mvns	r3, r3
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c62c:	4013      	ands	r3, r2
 800c62e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	0159      	lsls	r1, r3, #5
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	440b      	add	r3, r1
 800c646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c64a:	4619      	mov	r1, r3
 800c64c:	4b35      	ldr	r3, [pc, #212]	@ (800c724 <USB_DeactivateEndpoint+0x1b0>)
 800c64e:	4013      	ands	r3, r2
 800c650:	600b      	str	r3, [r1, #0]
 800c652:	e060      	b.n	800c716 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	015a      	lsls	r2, r3, #5
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	4413      	add	r3, r2
 800c65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c66a:	d11f      	bne.n	800c6ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	015a      	lsls	r2, r3, #5
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	4413      	add	r3, r2
 800c674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	0151      	lsls	r1, r2, #5
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	440a      	add	r2, r1
 800c682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c686:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c68a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	015a      	lsls	r2, r3, #5
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4413      	add	r3, r2
 800c694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	0151      	lsls	r1, r2, #5
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	440a      	add	r2, r1
 800c6a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c6a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	f003 030f 	and.w	r3, r3, #15
 800c6bc:	2101      	movs	r1, #1
 800c6be:	fa01 f303 	lsl.w	r3, r1, r3
 800c6c2:	041b      	lsls	r3, r3, #16
 800c6c4:	43db      	mvns	r3, r3
 800c6c6:	68f9      	ldr	r1, [r7, #12]
 800c6c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6d6:	69da      	ldr	r2, [r3, #28]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	f003 030f 	and.w	r3, r3, #15
 800c6e0:	2101      	movs	r1, #1
 800c6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c6e6:	041b      	lsls	r3, r3, #16
 800c6e8:	43db      	mvns	r3, r3
 800c6ea:	68f9      	ldr	r1, [r7, #12]
 800c6ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	015a      	lsls	r2, r3, #5
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	0159      	lsls	r1, r3, #5
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	440b      	add	r3, r1
 800c70a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c70e:	4619      	mov	r1, r3
 800c710:	4b05      	ldr	r3, [pc, #20]	@ (800c728 <USB_DeactivateEndpoint+0x1b4>)
 800c712:	4013      	ands	r3, r2
 800c714:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	ec337800 	.word	0xec337800
 800c728:	eff37800 	.word	0xeff37800

0800c72c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	@ 0x28
 800c730:	af02      	add	r7, sp, #8
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	f040 8185 	bne.w	800ca58 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d132      	bne.n	800c7bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	015a      	lsls	r2, r3, #5
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	4413      	add	r3, r2
 800c75e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c762:	691a      	ldr	r2, [r3, #16]
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	0159      	lsls	r1, r3, #5
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	440b      	add	r3, r1
 800c76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c770:	4619      	mov	r1, r3
 800c772:	4ba7      	ldr	r3, [pc, #668]	@ (800ca10 <USB_EPStartXfer+0x2e4>)
 800c774:	4013      	ands	r3, r2
 800c776:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	69ba      	ldr	r2, [r7, #24]
 800c788:	0151      	lsls	r1, r2, #5
 800c78a:	69fa      	ldr	r2, [r7, #28]
 800c78c:	440a      	add	r2, r1
 800c78e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c792:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a4:	691a      	ldr	r2, [r3, #16]
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	0159      	lsls	r1, r3, #5
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	440b      	add	r3, r1
 800c7ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	4b97      	ldr	r3, [pc, #604]	@ (800ca14 <USB_EPStartXfer+0x2e8>)
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	610b      	str	r3, [r1, #16]
 800c7ba:	e097      	b.n	800c8ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7c8:	691a      	ldr	r2, [r3, #16]
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	0159      	lsls	r1, r3, #5
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	440b      	add	r3, r1
 800c7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4b8e      	ldr	r3, [pc, #568]	@ (800ca14 <USB_EPStartXfer+0x2e8>)
 800c7da:	4013      	ands	r3, r2
 800c7dc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	015a      	lsls	r2, r3, #5
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ea:	691a      	ldr	r2, [r3, #16]
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	0159      	lsls	r1, r3, #5
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	440b      	add	r3, r1
 800c7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4b85      	ldr	r3, [pc, #532]	@ (800ca10 <USB_EPStartXfer+0x2e4>)
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d11a      	bne.n	800c83c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	691a      	ldr	r2, [r3, #16]
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d903      	bls.n	800c81a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	689a      	ldr	r2, [r3, #8]
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	015a      	lsls	r2, r3, #5
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	4413      	add	r3, r2
 800c822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	69ba      	ldr	r2, [r7, #24]
 800c82a:	0151      	lsls	r1, r2, #5
 800c82c:	69fa      	ldr	r2, [r7, #28]
 800c82e:	440a      	add	r2, r1
 800c830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c838:	6113      	str	r3, [r2, #16]
 800c83a:	e044      	b.n	800c8c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	691a      	ldr	r2, [r3, #16]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	4413      	add	r3, r2
 800c846:	1e5a      	subs	r2, r3, #1
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c850:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c85e:	691a      	ldr	r2, [r3, #16]
 800c860:	8afb      	ldrh	r3, [r7, #22]
 800c862:	04d9      	lsls	r1, r3, #19
 800c864:	4b6c      	ldr	r3, [pc, #432]	@ (800ca18 <USB_EPStartXfer+0x2ec>)
 800c866:	400b      	ands	r3, r1
 800c868:	69b9      	ldr	r1, [r7, #24]
 800c86a:	0148      	lsls	r0, r1, #5
 800c86c:	69f9      	ldr	r1, [r7, #28]
 800c86e:	4401      	add	r1, r0
 800c870:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c874:	4313      	orrs	r3, r2
 800c876:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	791b      	ldrb	r3, [r3, #4]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d122      	bne.n	800c8c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	015a      	lsls	r2, r3, #5
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	4413      	add	r3, r2
 800c888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	0151      	lsls	r1, r2, #5
 800c892:	69fa      	ldr	r2, [r7, #28]
 800c894:	440a      	add	r2, r1
 800c896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c89a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c89e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	015a      	lsls	r2, r3, #5
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8ac:	691a      	ldr	r2, [r3, #16]
 800c8ae:	8afb      	ldrh	r3, [r7, #22]
 800c8b0:	075b      	lsls	r3, r3, #29
 800c8b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c8b6:	69b9      	ldr	r1, [r7, #24]
 800c8b8:	0148      	lsls	r0, r1, #5
 800c8ba:	69f9      	ldr	r1, [r7, #28]
 800c8bc:	4401      	add	r1, r0
 800c8be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	015a      	lsls	r2, r3, #5
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8d2:	691a      	ldr	r2, [r3, #16]
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8dc:	69b9      	ldr	r1, [r7, #24]
 800c8de:	0148      	lsls	r0, r1, #5
 800c8e0:	69f9      	ldr	r1, [r7, #28]
 800c8e2:	4401      	add	r1, r0
 800c8e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c8ec:	79fb      	ldrb	r3, [r7, #7]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d14b      	bne.n	800c98a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	69db      	ldr	r3, [r3, #28]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d009      	beq.n	800c90e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c906:	461a      	mov	r2, r3
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	69db      	ldr	r3, [r3, #28]
 800c90c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	791b      	ldrb	r3, [r3, #4]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d128      	bne.n	800c968 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c922:	2b00      	cmp	r3, #0
 800c924:	d110      	bne.n	800c948 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	015a      	lsls	r2, r3, #5
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	4413      	add	r3, r2
 800c92e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	0151      	lsls	r1, r2, #5
 800c938:	69fa      	ldr	r2, [r7, #28]
 800c93a:	440a      	add	r2, r1
 800c93c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c940:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	e00f      	b.n	800c968 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	015a      	lsls	r2, r3, #5
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	4413      	add	r3, r2
 800c950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	0151      	lsls	r1, r2, #5
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	440a      	add	r2, r1
 800c95e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c966:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	015a      	lsls	r2, r3, #5
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	4413      	add	r3, r2
 800c970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	69ba      	ldr	r2, [r7, #24]
 800c978:	0151      	lsls	r1, r2, #5
 800c97a:	69fa      	ldr	r2, [r7, #28]
 800c97c:	440a      	add	r2, r1
 800c97e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c982:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	e169      	b.n	800cc5e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	015a      	lsls	r2, r3, #5
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	4413      	add	r3, r2
 800c992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	0151      	lsls	r1, r2, #5
 800c99c:	69fa      	ldr	r2, [r7, #28]
 800c99e:	440a      	add	r2, r1
 800c9a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c9a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	791b      	ldrb	r3, [r3, #4]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d015      	beq.n	800c9de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8151 	beq.w	800cc5e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	f003 030f 	and.w	r3, r3, #15
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d2:	69f9      	ldr	r1, [r7, #28]
 800c9d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	634b      	str	r3, [r1, #52]	@ 0x34
 800c9dc:	e13f      	b.n	800cc5e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d116      	bne.n	800ca1c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	015a      	lsls	r2, r3, #5
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	69ba      	ldr	r2, [r7, #24]
 800c9fe:	0151      	lsls	r1, r2, #5
 800ca00:	69fa      	ldr	r2, [r7, #28]
 800ca02:	440a      	add	r2, r1
 800ca04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ca0c:	6013      	str	r3, [r2, #0]
 800ca0e:	e015      	b.n	800ca3c <USB_EPStartXfer+0x310>
 800ca10:	e007ffff 	.word	0xe007ffff
 800ca14:	fff80000 	.word	0xfff80000
 800ca18:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	015a      	lsls	r2, r3, #5
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	4413      	add	r3, r2
 800ca24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	69ba      	ldr	r2, [r7, #24]
 800ca2c:	0151      	lsls	r1, r2, #5
 800ca2e:	69fa      	ldr	r2, [r7, #28]
 800ca30:	440a      	add	r2, r1
 800ca32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	68d9      	ldr	r1, [r3, #12]
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	781a      	ldrb	r2, [r3, #0]
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	b298      	uxth	r0, r3
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	4603      	mov	r3, r0
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f000 f9b9 	bl	800cdc8 <USB_WritePacket>
 800ca56:	e102      	b.n	800cc5e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	015a      	lsls	r2, r3, #5
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca64:	691a      	ldr	r2, [r3, #16]
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	0159      	lsls	r1, r3, #5
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	440b      	add	r3, r1
 800ca6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca72:	4619      	mov	r1, r3
 800ca74:	4b7c      	ldr	r3, [pc, #496]	@ (800cc68 <USB_EPStartXfer+0x53c>)
 800ca76:	4013      	ands	r3, r2
 800ca78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca86:	691a      	ldr	r2, [r3, #16]
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	0159      	lsls	r1, r3, #5
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	440b      	add	r3, r1
 800ca90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca94:	4619      	mov	r1, r3
 800ca96:	4b75      	ldr	r3, [pc, #468]	@ (800cc6c <USB_EPStartXfer+0x540>)
 800ca98:	4013      	ands	r3, r2
 800ca9a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d12f      	bne.n	800cb02 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	689a      	ldr	r2, [r3, #8]
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	689a      	ldr	r2, [r3, #8]
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	015a      	lsls	r2, r3, #5
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	4413      	add	r3, r2
 800cac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cac6:	691a      	ldr	r2, [r3, #16]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cad0:	69b9      	ldr	r1, [r7, #24]
 800cad2:	0148      	lsls	r0, r1, #5
 800cad4:	69f9      	ldr	r1, [r7, #28]
 800cad6:	4401      	add	r1, r0
 800cad8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cadc:	4313      	orrs	r3, r2
 800cade:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	015a      	lsls	r2, r3, #5
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	69ba      	ldr	r2, [r7, #24]
 800caf0:	0151      	lsls	r1, r2, #5
 800caf2:	69fa      	ldr	r2, [r7, #28]
 800caf4:	440a      	add	r2, r1
 800caf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cafa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cafe:	6113      	str	r3, [r2, #16]
 800cb00:	e05f      	b.n	800cbc2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d123      	bne.n	800cb52 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	015a      	lsls	r2, r3, #5
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	4413      	add	r3, r2
 800cb12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb16:	691a      	ldr	r2, [r3, #16]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb20:	69b9      	ldr	r1, [r7, #24]
 800cb22:	0148      	lsls	r0, r1, #5
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	4401      	add	r1, r0
 800cb28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	015a      	lsls	r2, r3, #5
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	4413      	add	r3, r2
 800cb38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	69ba      	ldr	r2, [r7, #24]
 800cb40:	0151      	lsls	r1, r2, #5
 800cb42:	69fa      	ldr	r2, [r7, #28]
 800cb44:	440a      	add	r2, r1
 800cb46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cb4e:	6113      	str	r3, [r2, #16]
 800cb50:	e037      	b.n	800cbc2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	691a      	ldr	r2, [r3, #16]
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	1e5a      	subs	r2, r3, #1
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	8afa      	ldrh	r2, [r7, #22]
 800cb6e:	fb03 f202 	mul.w	r2, r3, r2
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	015a      	lsls	r2, r3, #5
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb82:	691a      	ldr	r2, [r3, #16]
 800cb84:	8afb      	ldrh	r3, [r7, #22]
 800cb86:	04d9      	lsls	r1, r3, #19
 800cb88:	4b39      	ldr	r3, [pc, #228]	@ (800cc70 <USB_EPStartXfer+0x544>)
 800cb8a:	400b      	ands	r3, r1
 800cb8c:	69b9      	ldr	r1, [r7, #24]
 800cb8e:	0148      	lsls	r0, r1, #5
 800cb90:	69f9      	ldr	r1, [r7, #28]
 800cb92:	4401      	add	r1, r0
 800cb94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	015a      	lsls	r2, r3, #5
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	4413      	add	r3, r2
 800cba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cba8:	691a      	ldr	r2, [r3, #16]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbb2:	69b9      	ldr	r1, [r7, #24]
 800cbb4:	0148      	lsls	r0, r1, #5
 800cbb6:	69f9      	ldr	r1, [r7, #28]
 800cbb8:	4401      	add	r1, r0
 800cbba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d10d      	bne.n	800cbe4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d009      	beq.n	800cbe4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	68d9      	ldr	r1, [r3, #12]
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbe0:	460a      	mov	r2, r1
 800cbe2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	791b      	ldrb	r3, [r3, #4]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d128      	bne.n	800cc3e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d110      	bne.n	800cc1e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	69ba      	ldr	r2, [r7, #24]
 800cc0c:	0151      	lsls	r1, r2, #5
 800cc0e:	69fa      	ldr	r2, [r7, #28]
 800cc10:	440a      	add	r2, r1
 800cc12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cc1a:	6013      	str	r3, [r2, #0]
 800cc1c:	e00f      	b.n	800cc3e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	69ba      	ldr	r2, [r7, #24]
 800cc2e:	0151      	lsls	r1, r2, #5
 800cc30:	69fa      	ldr	r2, [r7, #28]
 800cc32:	440a      	add	r2, r1
 800cc34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cc3c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	015a      	lsls	r2, r3, #5
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	4413      	add	r3, r2
 800cc46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	69ba      	ldr	r2, [r7, #24]
 800cc4e:	0151      	lsls	r1, r2, #5
 800cc50:	69fa      	ldr	r2, [r7, #28]
 800cc52:	440a      	add	r2, r1
 800cc54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cc5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3720      	adds	r7, #32
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	fff80000 	.word	0xfff80000
 800cc6c:	e007ffff 	.word	0xe007ffff
 800cc70:	1ff80000 	.word	0x1ff80000

0800cc74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	785b      	ldrb	r3, [r3, #1]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d14a      	bne.n	800cd28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cca6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ccaa:	f040 8086 	bne.w	800cdba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	7812      	ldrb	r2, [r2, #0]
 800ccc2:	0151      	lsls	r1, r2, #5
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	440a      	add	r2, r1
 800ccc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cccc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ccd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	015a      	lsls	r2, r3, #5
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	683a      	ldr	r2, [r7, #0]
 800cce4:	7812      	ldrb	r2, [r2, #0]
 800cce6:	0151      	lsls	r1, r2, #5
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	440a      	add	r2, r1
 800ccec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ccf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ccf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d902      	bls.n	800cd0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	75fb      	strb	r3, [r7, #23]
          break;
 800cd0a:	e056      	b.n	800cdba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	015a      	lsls	r2, r3, #5
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	4413      	add	r3, r2
 800cd16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd24:	d0e7      	beq.n	800ccf6 <USB_EPStopXfer+0x82>
 800cd26:	e048      	b.n	800cdba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd40:	d13b      	bne.n	800cdba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	7812      	ldrb	r2, [r2, #0]
 800cd56:	0151      	lsls	r1, r2, #5
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	440a      	add	r2, r1
 800cd5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cd64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	015a      	lsls	r2, r3, #5
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	4413      	add	r3, r2
 800cd70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	7812      	ldrb	r2, [r2, #0]
 800cd7a:	0151      	lsls	r1, r2, #5
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	440a      	add	r2, r1
 800cd80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d902      	bls.n	800cda0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	75fb      	strb	r3, [r7, #23]
          break;
 800cd9e:	e00c      	b.n	800cdba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	015a      	lsls	r2, r3, #5
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cdb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cdb8:	d0e7      	beq.n	800cd8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	371c      	adds	r7, #28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b089      	sub	sp, #36	@ 0x24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	71fb      	strb	r3, [r7, #7]
 800cdda:	4613      	mov	r3, r2
 800cddc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cde6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d123      	bne.n	800ce36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cdee:	88bb      	ldrh	r3, [r7, #4]
 800cdf0:	3303      	adds	r3, #3
 800cdf2:	089b      	lsrs	r3, r3, #2
 800cdf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	61bb      	str	r3, [r7, #24]
 800cdfa:	e018      	b.n	800ce2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cdfc:	79fb      	ldrb	r3, [r7, #7]
 800cdfe:	031a      	lsls	r2, r3, #12
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	4413      	add	r3, r2
 800ce04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce08:	461a      	mov	r2, r3
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	3301      	adds	r3, #1
 800ce14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	3301      	adds	r3, #1
 800ce26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	61bb      	str	r3, [r7, #24]
 800ce2e:	69ba      	ldr	r2, [r7, #24]
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d3e2      	bcc.n	800cdfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3724      	adds	r7, #36	@ 0x24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b08b      	sub	sp, #44	@ 0x2c
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ce5a:	88fb      	ldrh	r3, [r7, #6]
 800ce5c:	089b      	lsrs	r3, r3, #2
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ce62:	88fb      	ldrh	r3, [r7, #6]
 800ce64:	f003 0303 	and.w	r3, r3, #3
 800ce68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	623b      	str	r3, [r7, #32]
 800ce6e:	e014      	b.n	800ce9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7e:	3301      	adds	r3, #1
 800ce80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ce82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce84:	3301      	adds	r3, #1
 800ce86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce90:	3301      	adds	r3, #1
 800ce92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	3301      	adds	r3, #1
 800ce98:	623b      	str	r3, [r7, #32]
 800ce9a:	6a3a      	ldr	r2, [r7, #32]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d3e6      	bcc.n	800ce70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cea2:	8bfb      	ldrh	r3, [r7, #30]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01e      	beq.n	800cee6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	f107 0310 	add.w	r3, r7, #16
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	fa22 f303 	lsr.w	r3, r2, r3
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	701a      	strb	r2, [r3, #0]
      i++;
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	3301      	adds	r3, #1
 800ced2:	623b      	str	r3, [r7, #32]
      pDest++;
 800ced4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced6:	3301      	adds	r3, #1
 800ced8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ceda:	8bfb      	ldrh	r3, [r7, #30]
 800cedc:	3b01      	subs	r3, #1
 800cede:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cee0:	8bfb      	ldrh	r3, [r7, #30]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1ea      	bne.n	800cebc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	372c      	adds	r7, #44	@ 0x2c
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	785b      	ldrb	r3, [r3, #1]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d12c      	bne.n	800cf6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	015a      	lsls	r2, r3, #5
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	4413      	add	r3, r2
 800cf18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	db12      	blt.n	800cf48 <USB_EPSetStall+0x54>
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00f      	beq.n	800cf48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	015a      	lsls	r2, r3, #5
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4413      	add	r3, r2
 800cf30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	0151      	lsls	r1, r2, #5
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	440a      	add	r2, r1
 800cf3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cf46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	015a      	lsls	r2, r3, #5
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	0151      	lsls	r1, r2, #5
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	440a      	add	r2, r1
 800cf5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	e02b      	b.n	800cfc2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	015a      	lsls	r2, r3, #5
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	4413      	add	r3, r2
 800cf72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	db12      	blt.n	800cfa2 <USB_EPSetStall+0xae>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00f      	beq.n	800cfa2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	015a      	lsls	r2, r3, #5
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4413      	add	r3, r2
 800cf8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	0151      	lsls	r1, r2, #5
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	440a      	add	r2, r1
 800cf98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cfa0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	015a      	lsls	r2, r3, #5
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	0151      	lsls	r1, r2, #5
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	440a      	add	r2, r1
 800cfb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cfc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	785b      	ldrb	r3, [r3, #1]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d128      	bne.n	800d03e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	0151      	lsls	r1, r2, #5
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	440a      	add	r2, r1
 800d002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d006:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d00a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	791b      	ldrb	r3, [r3, #4]
 800d010:	2b03      	cmp	r3, #3
 800d012:	d003      	beq.n	800d01c <USB_EPClearStall+0x4c>
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	791b      	ldrb	r3, [r3, #4]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d138      	bne.n	800d08e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	015a      	lsls	r2, r3, #5
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4413      	add	r3, r2
 800d024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	0151      	lsls	r1, r2, #5
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	440a      	add	r2, r1
 800d032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	e027      	b.n	800d08e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	0151      	lsls	r1, r2, #5
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	440a      	add	r2, r1
 800d054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d058:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d05c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	791b      	ldrb	r3, [r3, #4]
 800d062:	2b03      	cmp	r3, #3
 800d064:	d003      	beq.n	800d06e <USB_EPClearStall+0x9e>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	791b      	ldrb	r3, [r3, #4]
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d10f      	bne.n	800d08e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	015a      	lsls	r2, r3, #5
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4413      	add	r3, r2
 800d076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	0151      	lsls	r1, r2, #5
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	440a      	add	r2, r1
 800d084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d08c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d0ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d0be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	78fb      	ldrb	r3, [r7, #3]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d0d0:	68f9      	ldr	r1, [r7, #12]
 800d0d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d116:	f023 0302 	bic.w	r3, r3, #2
 800d11a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b085      	sub	sp, #20
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d144:	f023 0303 	bic.w	r3, r3, #3
 800d148:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d158:	f043 0302 	orr.w	r3, r3, #2
 800d15c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	695b      	ldr	r3, [r3, #20]
 800d178:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	4013      	ands	r3, r2
 800d182:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d184:	68fb      	ldr	r3, [r7, #12]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d192:	b480      	push	{r7}
 800d194:	b085      	sub	sp, #20
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1ae:	69db      	ldr	r3, [r3, #28]
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	0c1b      	lsrs	r3, r3, #16
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b085      	sub	sp, #20
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1e2:	69db      	ldr	r3, [r3, #28]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	b29b      	uxth	r3, r3
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3714      	adds	r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	b085      	sub	sp, #20
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d20a:	78fb      	ldrb	r3, [r7, #3]
 800d20c:	015a      	lsls	r2, r3, #5
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	4413      	add	r3, r2
 800d212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	4013      	ands	r3, r2
 800d226:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d228:	68bb      	ldr	r3, [r7, #8]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d236:	b480      	push	{r7}
 800d238:	b087      	sub	sp, #28
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	460b      	mov	r3, r1
 800d240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d258:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d25a:	78fb      	ldrb	r3, [r7, #3]
 800d25c:	f003 030f 	and.w	r3, r3, #15
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	fa22 f303 	lsr.w	r3, r2, r3
 800d266:	01db      	lsls	r3, r3, #7
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	4313      	orrs	r3, r2
 800d26e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	015a      	lsls	r2, r3, #5
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	4413      	add	r3, r2
 800d278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	4013      	ands	r3, r2
 800d282:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d284:	68bb      	ldr	r3, [r7, #8]
}
 800d286:	4618      	mov	r0, r3
 800d288:	371c      	adds	r7, #28
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d292:	b480      	push	{r7}
 800d294:	b083      	sub	sp, #12
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	f003 0301 	and.w	r3, r3, #1
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4b09      	ldr	r3, [pc, #36]	@ (800d2f4 <USB_ActivateSetup+0x44>)
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d2e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	fffff800 	.word	0xfffff800

0800d2f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	460b      	mov	r3, r1
 800d302:	607a      	str	r2, [r7, #4]
 800d304:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	333c      	adds	r3, #60	@ 0x3c
 800d30e:	3304      	adds	r3, #4
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	4a26      	ldr	r2, [pc, #152]	@ (800d3b0 <USB_EP0_OutStart+0xb8>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d90a      	bls.n	800d332 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d32c:	d101      	bne.n	800d332 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	e037      	b.n	800d3a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d338:	461a      	mov	r2, r3
 800d33a:	2300      	movs	r3, #0
 800d33c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d34c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	697a      	ldr	r2, [r7, #20]
 800d35c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d360:	f043 0318 	orr.w	r3, r3, #24
 800d364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d374:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d378:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d37a:	7afb      	ldrb	r3, [r7, #11]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d10f      	bne.n	800d3a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d386:	461a      	mov	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d39a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d39e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	371c      	adds	r7, #28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	4f54300a 	.word	0x4f54300a

0800d3b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d3cc:	d901      	bls.n	800d3d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	e01b      	b.n	800d40a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	daf2      	bge.n	800d3c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	f043 0201 	orr.w	r2, r3, #1
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d3f6:	d901      	bls.n	800d3fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e006      	b.n	800d40a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	691b      	ldr	r3, [r3, #16]
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b01      	cmp	r3, #1
 800d406:	d0f0      	beq.n	800d3ea <USB_CoreReset+0x36>

  return HAL_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
	...

0800d418 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d424:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d428:	f004 f9c2 	bl	80117b0 <USBD_static_malloc>
 800d42c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d109      	bne.n	800d448 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	32b0      	adds	r2, #176	@ 0xb0
 800d43e:	2100      	movs	r1, #0
 800d440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d444:	2302      	movs	r3, #2
 800d446:	e0d4      	b.n	800d5f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d448:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d44c:	2100      	movs	r1, #0
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f004 f9f2 	bl	8011838 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	32b0      	adds	r2, #176	@ 0xb0
 800d45e:	68f9      	ldr	r1, [r7, #12]
 800d460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	32b0      	adds	r2, #176	@ 0xb0
 800d46e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	7c1b      	ldrb	r3, [r3, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d138      	bne.n	800d4f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d480:	4b5e      	ldr	r3, [pc, #376]	@ (800d5fc <USBD_CDC_Init+0x1e4>)
 800d482:	7819      	ldrb	r1, [r3, #0]
 800d484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d488:	2202      	movs	r2, #2
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f004 f86d 	bl	801156a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d490:	4b5a      	ldr	r3, [pc, #360]	@ (800d5fc <USBD_CDC_Init+0x1e4>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	f003 020f 	and.w	r2, r3, #15
 800d498:	6879      	ldr	r1, [r7, #4]
 800d49a:	4613      	mov	r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4413      	add	r3, r2
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	440b      	add	r3, r1
 800d4a4:	3324      	adds	r3, #36	@ 0x24
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d4aa:	4b55      	ldr	r3, [pc, #340]	@ (800d600 <USBD_CDC_Init+0x1e8>)
 800d4ac:	7819      	ldrb	r1, [r3, #0]
 800d4ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f004 f858 	bl	801156a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d4ba:	4b51      	ldr	r3, [pc, #324]	@ (800d600 <USBD_CDC_Init+0x1e8>)
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f003 020f 	and.w	r2, r3, #15
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	4413      	add	r3, r2
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	440b      	add	r3, r1
 800d4ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d4d6:	4b4b      	ldr	r3, [pc, #300]	@ (800d604 <USBD_CDC_Init+0x1ec>)
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	f003 020f 	and.w	r2, r3, #15
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4413      	add	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	440b      	add	r3, r1
 800d4ea:	3326      	adds	r3, #38	@ 0x26
 800d4ec:	2210      	movs	r2, #16
 800d4ee:	801a      	strh	r2, [r3, #0]
 800d4f0:	e035      	b.n	800d55e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d4f2:	4b42      	ldr	r3, [pc, #264]	@ (800d5fc <USBD_CDC_Init+0x1e4>)
 800d4f4:	7819      	ldrb	r1, [r3, #0]
 800d4f6:	2340      	movs	r3, #64	@ 0x40
 800d4f8:	2202      	movs	r2, #2
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f004 f835 	bl	801156a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d500:	4b3e      	ldr	r3, [pc, #248]	@ (800d5fc <USBD_CDC_Init+0x1e4>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	f003 020f 	and.w	r2, r3, #15
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	4613      	mov	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4413      	add	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	440b      	add	r3, r1
 800d514:	3324      	adds	r3, #36	@ 0x24
 800d516:	2201      	movs	r2, #1
 800d518:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d51a:	4b39      	ldr	r3, [pc, #228]	@ (800d600 <USBD_CDC_Init+0x1e8>)
 800d51c:	7819      	ldrb	r1, [r3, #0]
 800d51e:	2340      	movs	r3, #64	@ 0x40
 800d520:	2202      	movs	r2, #2
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f004 f821 	bl	801156a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d528:	4b35      	ldr	r3, [pc, #212]	@ (800d600 <USBD_CDC_Init+0x1e8>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	f003 020f 	and.w	r2, r3, #15
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	4613      	mov	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	440b      	add	r3, r1
 800d53c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d540:	2201      	movs	r2, #1
 800d542:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d544:	4b2f      	ldr	r3, [pc, #188]	@ (800d604 <USBD_CDC_Init+0x1ec>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	f003 020f 	and.w	r2, r3, #15
 800d54c:	6879      	ldr	r1, [r7, #4]
 800d54e:	4613      	mov	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4413      	add	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	440b      	add	r3, r1
 800d558:	3326      	adds	r3, #38	@ 0x26
 800d55a:	2210      	movs	r2, #16
 800d55c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d55e:	4b29      	ldr	r3, [pc, #164]	@ (800d604 <USBD_CDC_Init+0x1ec>)
 800d560:	7819      	ldrb	r1, [r3, #0]
 800d562:	2308      	movs	r3, #8
 800d564:	2203      	movs	r2, #3
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f003 ffff 	bl	801156a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d56c:	4b25      	ldr	r3, [pc, #148]	@ (800d604 <USBD_CDC_Init+0x1ec>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	f003 020f 	and.w	r2, r3, #15
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	4613      	mov	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	440b      	add	r3, r1
 800d580:	3324      	adds	r3, #36	@ 0x24
 800d582:	2201      	movs	r2, #1
 800d584:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2200      	movs	r2, #0
 800d58a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	33b0      	adds	r3, #176	@ 0xb0
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d5bc:	2302      	movs	r3, #2
 800d5be:	e018      	b.n	800d5f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	7c1b      	ldrb	r3, [r3, #16]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10a      	bne.n	800d5de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5c8:	4b0d      	ldr	r3, [pc, #52]	@ (800d600 <USBD_CDC_Init+0x1e8>)
 800d5ca:	7819      	ldrb	r1, [r3, #0]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f004 f8b6 	bl	8011748 <USBD_LL_PrepareReceive>
 800d5dc:	e008      	b.n	800d5f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5de:	4b08      	ldr	r3, [pc, #32]	@ (800d600 <USBD_CDC_Init+0x1e8>)
 800d5e0:	7819      	ldrb	r1, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5e8:	2340      	movs	r3, #64	@ 0x40
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f004 f8ac 	bl	8011748 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	24000097 	.word	0x24000097
 800d600:	24000098 	.word	0x24000098
 800d604:	24000099 	.word	0x24000099

0800d608 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	460b      	mov	r3, r1
 800d612:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d614:	4b3a      	ldr	r3, [pc, #232]	@ (800d700 <USBD_CDC_DeInit+0xf8>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f003 ffcb 	bl	80115b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d620:	4b37      	ldr	r3, [pc, #220]	@ (800d700 <USBD_CDC_DeInit+0xf8>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f003 020f 	and.w	r2, r3, #15
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	4613      	mov	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	440b      	add	r3, r1
 800d634:	3324      	adds	r3, #36	@ 0x24
 800d636:	2200      	movs	r2, #0
 800d638:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d63a:	4b32      	ldr	r3, [pc, #200]	@ (800d704 <USBD_CDC_DeInit+0xfc>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f003 ffb8 	bl	80115b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d646:	4b2f      	ldr	r3, [pc, #188]	@ (800d704 <USBD_CDC_DeInit+0xfc>)
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	f003 020f 	and.w	r2, r3, #15
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	4613      	mov	r3, r2
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	4413      	add	r3, r2
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	440b      	add	r3, r1
 800d65a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d65e:	2200      	movs	r2, #0
 800d660:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d662:	4b29      	ldr	r3, [pc, #164]	@ (800d708 <USBD_CDC_DeInit+0x100>)
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f003 ffa4 	bl	80115b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d66e:	4b26      	ldr	r3, [pc, #152]	@ (800d708 <USBD_CDC_DeInit+0x100>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	f003 020f 	and.w	r2, r3, #15
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	440b      	add	r3, r1
 800d682:	3324      	adds	r3, #36	@ 0x24
 800d684:	2200      	movs	r2, #0
 800d686:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d688:	4b1f      	ldr	r3, [pc, #124]	@ (800d708 <USBD_CDC_DeInit+0x100>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	f003 020f 	and.w	r2, r3, #15
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	4613      	mov	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	4413      	add	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	440b      	add	r3, r1
 800d69c:	3326      	adds	r3, #38	@ 0x26
 800d69e:	2200      	movs	r2, #0
 800d6a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	32b0      	adds	r2, #176	@ 0xb0
 800d6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d01f      	beq.n	800d6f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	33b0      	adds	r3, #176	@ 0xb0
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	32b0      	adds	r2, #176	@ 0xb0
 800d6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f004 f878 	bl	80117cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	32b0      	adds	r2, #176	@ 0xb0
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	24000097 	.word	0x24000097
 800d704:	24000098 	.word	0x24000098
 800d708:	24000099 	.word	0x24000099

0800d70c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	32b0      	adds	r2, #176	@ 0xb0
 800d720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d724:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d72a:	2300      	movs	r3, #0
 800d72c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d738:	2303      	movs	r3, #3
 800d73a:	e0bf      	b.n	800d8bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d744:	2b00      	cmp	r3, #0
 800d746:	d050      	beq.n	800d7ea <USBD_CDC_Setup+0xde>
 800d748:	2b20      	cmp	r3, #32
 800d74a:	f040 80af 	bne.w	800d8ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	88db      	ldrh	r3, [r3, #6]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d03a      	beq.n	800d7cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	b25b      	sxtb	r3, r3
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	da1b      	bge.n	800d798 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	33b0      	adds	r3, #176	@ 0xb0
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d776:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	88d2      	ldrh	r2, [r2, #6]
 800d77c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	88db      	ldrh	r3, [r3, #6]
 800d782:	2b07      	cmp	r3, #7
 800d784:	bf28      	it	cs
 800d786:	2307      	movcs	r3, #7
 800d788:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	89fa      	ldrh	r2, [r7, #14]
 800d78e:	4619      	mov	r1, r3
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f001 fdbd 	bl	800f310 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d796:	e090      	b.n	800d8ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	785a      	ldrb	r2, [r3, #1]
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	88db      	ldrh	r3, [r3, #6]
 800d7a6:	2b3f      	cmp	r3, #63	@ 0x3f
 800d7a8:	d803      	bhi.n	800d7b2 <USBD_CDC_Setup+0xa6>
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	88db      	ldrh	r3, [r3, #6]
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	e000      	b.n	800d7b4 <USBD_CDC_Setup+0xa8>
 800d7b2:	2240      	movs	r2, #64	@ 0x40
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d7ba:	6939      	ldr	r1, [r7, #16]
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f001 fdcf 	bl	800f368 <USBD_CtlPrepareRx>
      break;
 800d7ca:	e076      	b.n	800d8ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	33b0      	adds	r3, #176	@ 0xb0
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	7850      	ldrb	r0, [r2, #1]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	4798      	blx	r3
      break;
 800d7e8:	e067      	b.n	800d8ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	785b      	ldrb	r3, [r3, #1]
 800d7ee:	2b0b      	cmp	r3, #11
 800d7f0:	d851      	bhi.n	800d896 <USBD_CDC_Setup+0x18a>
 800d7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d7f8 <USBD_CDC_Setup+0xec>)
 800d7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f8:	0800d829 	.word	0x0800d829
 800d7fc:	0800d8a5 	.word	0x0800d8a5
 800d800:	0800d897 	.word	0x0800d897
 800d804:	0800d897 	.word	0x0800d897
 800d808:	0800d897 	.word	0x0800d897
 800d80c:	0800d897 	.word	0x0800d897
 800d810:	0800d897 	.word	0x0800d897
 800d814:	0800d897 	.word	0x0800d897
 800d818:	0800d897 	.word	0x0800d897
 800d81c:	0800d897 	.word	0x0800d897
 800d820:	0800d853 	.word	0x0800d853
 800d824:	0800d87d 	.word	0x0800d87d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b03      	cmp	r3, #3
 800d832:	d107      	bne.n	800d844 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d834:	f107 030a 	add.w	r3, r7, #10
 800d838:	2202      	movs	r2, #2
 800d83a:	4619      	mov	r1, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f001 fd67 	bl	800f310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d842:	e032      	b.n	800d8aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d844:	6839      	ldr	r1, [r7, #0]
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f001 fce5 	bl	800f216 <USBD_CtlError>
            ret = USBD_FAIL;
 800d84c:	2303      	movs	r3, #3
 800d84e:	75fb      	strb	r3, [r7, #23]
          break;
 800d850:	e02b      	b.n	800d8aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d107      	bne.n	800d86e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d85e:	f107 030d 	add.w	r3, r7, #13
 800d862:	2201      	movs	r2, #1
 800d864:	4619      	mov	r1, r3
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f001 fd52 	bl	800f310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d86c:	e01d      	b.n	800d8aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f001 fcd0 	bl	800f216 <USBD_CtlError>
            ret = USBD_FAIL;
 800d876:	2303      	movs	r3, #3
 800d878:	75fb      	strb	r3, [r7, #23]
          break;
 800d87a:	e016      	b.n	800d8aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b03      	cmp	r3, #3
 800d886:	d00f      	beq.n	800d8a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d888:	6839      	ldr	r1, [r7, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f001 fcc3 	bl	800f216 <USBD_CtlError>
            ret = USBD_FAIL;
 800d890:	2303      	movs	r3, #3
 800d892:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d894:	e008      	b.n	800d8a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f001 fcbc 	bl	800f216 <USBD_CtlError>
          ret = USBD_FAIL;
 800d89e:	2303      	movs	r3, #3
 800d8a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d8a2:	e002      	b.n	800d8aa <USBD_CDC_Setup+0x19e>
          break;
 800d8a4:	bf00      	nop
 800d8a6:	e008      	b.n	800d8ba <USBD_CDC_Setup+0x1ae>
          break;
 800d8a8:	bf00      	nop
      }
      break;
 800d8aa:	e006      	b.n	800d8ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f001 fcb1 	bl	800f216 <USBD_CtlError>
      ret = USBD_FAIL;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	75fb      	strb	r3, [r7, #23]
      break;
 800d8b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3718      	adds	r7, #24
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	32b0      	adds	r2, #176	@ 0xb0
 800d8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d101      	bne.n	800d8ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	e065      	b.n	800d9ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	32b0      	adds	r2, #176	@ 0xb0
 800d8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d8fe:	78fb      	ldrb	r3, [r7, #3]
 800d900:	f003 020f 	and.w	r2, r3, #15
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	440b      	add	r3, r1
 800d910:	3318      	adds	r3, #24
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d02f      	beq.n	800d978 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d918:	78fb      	ldrb	r3, [r7, #3]
 800d91a:	f003 020f 	and.w	r2, r3, #15
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	4613      	mov	r3, r2
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	4413      	add	r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	440b      	add	r3, r1
 800d92a:	3318      	adds	r3, #24
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	78fb      	ldrb	r3, [r7, #3]
 800d930:	f003 010f 	and.w	r1, r3, #15
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	460b      	mov	r3, r1
 800d938:	00db      	lsls	r3, r3, #3
 800d93a:	440b      	add	r3, r1
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4403      	add	r3, r0
 800d940:	331c      	adds	r3, #28
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	fbb2 f1f3 	udiv	r1, r2, r3
 800d948:	fb01 f303 	mul.w	r3, r1, r3
 800d94c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d112      	bne.n	800d978 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d952:	78fb      	ldrb	r3, [r7, #3]
 800d954:	f003 020f 	and.w	r2, r3, #15
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	4613      	mov	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	440b      	add	r3, r1
 800d964:	3318      	adds	r3, #24
 800d966:	2200      	movs	r2, #0
 800d968:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d96a:	78f9      	ldrb	r1, [r7, #3]
 800d96c:	2300      	movs	r3, #0
 800d96e:	2200      	movs	r2, #0
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f003 fec8 	bl	8011706 <USBD_LL_Transmit>
 800d976:	e01f      	b.n	800d9b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	33b0      	adds	r3, #176	@ 0xb0
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d010      	beq.n	800d9b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	33b0      	adds	r3, #176	@ 0xb0
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4413      	add	r3, r2
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d9b4:	78fa      	ldrb	r2, [r7, #3]
 800d9b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b084      	sub	sp, #16
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	32b0      	adds	r2, #176	@ 0xb0
 800d9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	32b0      	adds	r2, #176	@ 0xb0
 800d9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d101      	bne.n	800d9f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e01a      	b.n	800da2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d9f4:	78fb      	ldrb	r3, [r7, #3]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f003 fec6 	bl	801178a <USBD_LL_GetRxDataSize>
 800d9fe:	4602      	mov	r2, r0
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	33b0      	adds	r3, #176	@ 0xb0
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800da24:	4611      	mov	r1, r2
 800da26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b084      	sub	sp, #16
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	32b0      	adds	r2, #176	@ 0xb0
 800da44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da50:	2303      	movs	r3, #3
 800da52:	e024      	b.n	800da9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	33b0      	adds	r3, #176	@ 0xb0
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	4413      	add	r3, r2
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d019      	beq.n	800da9c <USBD_CDC_EP0_RxReady+0x6a>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800da6e:	2bff      	cmp	r3, #255	@ 0xff
 800da70:	d014      	beq.n	800da9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	33b0      	adds	r3, #176	@ 0xb0
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4413      	add	r3, r2
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800da8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800da92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	22ff      	movs	r2, #255	@ 0xff
 800da98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
	...

0800daa8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b086      	sub	sp, #24
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dab0:	2182      	movs	r1, #130	@ 0x82
 800dab2:	4818      	ldr	r0, [pc, #96]	@ (800db14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dab4:	f000 fd4f 	bl	800e556 <USBD_GetEpDesc>
 800dab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800daba:	2101      	movs	r1, #1
 800dabc:	4815      	ldr	r0, [pc, #84]	@ (800db14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dabe:	f000 fd4a 	bl	800e556 <USBD_GetEpDesc>
 800dac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dac4:	2181      	movs	r1, #129	@ 0x81
 800dac6:	4813      	ldr	r0, [pc, #76]	@ (800db14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dac8:	f000 fd45 	bl	800e556 <USBD_GetEpDesc>
 800dacc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	2210      	movs	r2, #16
 800dad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d006      	beq.n	800daee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dae8:	711a      	strb	r2, [r3, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d006      	beq.n	800db02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dafc:	711a      	strb	r2, [r3, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2243      	movs	r2, #67	@ 0x43
 800db06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db08:	4b02      	ldr	r3, [pc, #8]	@ (800db14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	24000054 	.word	0x24000054

0800db18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db20:	2182      	movs	r1, #130	@ 0x82
 800db22:	4818      	ldr	r0, [pc, #96]	@ (800db84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db24:	f000 fd17 	bl	800e556 <USBD_GetEpDesc>
 800db28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db2a:	2101      	movs	r1, #1
 800db2c:	4815      	ldr	r0, [pc, #84]	@ (800db84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db2e:	f000 fd12 	bl	800e556 <USBD_GetEpDesc>
 800db32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db34:	2181      	movs	r1, #129	@ 0x81
 800db36:	4813      	ldr	r0, [pc, #76]	@ (800db84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db38:	f000 fd0d 	bl	800e556 <USBD_GetEpDesc>
 800db3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2210      	movs	r2, #16
 800db48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d006      	beq.n	800db5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	2200      	movs	r2, #0
 800db54:	711a      	strb	r2, [r3, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f042 0202 	orr.w	r2, r2, #2
 800db5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	711a      	strb	r2, [r3, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f042 0202 	orr.w	r2, r2, #2
 800db70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2243      	movs	r2, #67	@ 0x43
 800db76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db78:	4b02      	ldr	r3, [pc, #8]	@ (800db84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	24000054 	.word	0x24000054

0800db88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db90:	2182      	movs	r1, #130	@ 0x82
 800db92:	4818      	ldr	r0, [pc, #96]	@ (800dbf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db94:	f000 fcdf 	bl	800e556 <USBD_GetEpDesc>
 800db98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db9a:	2101      	movs	r1, #1
 800db9c:	4815      	ldr	r0, [pc, #84]	@ (800dbf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db9e:	f000 fcda 	bl	800e556 <USBD_GetEpDesc>
 800dba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dba4:	2181      	movs	r1, #129	@ 0x81
 800dba6:	4813      	ldr	r0, [pc, #76]	@ (800dbf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dba8:	f000 fcd5 	bl	800e556 <USBD_GetEpDesc>
 800dbac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2210      	movs	r2, #16
 800dbb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d006      	beq.n	800dbce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbc8:	711a      	strb	r2, [r3, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d006      	beq.n	800dbe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbdc:	711a      	strb	r2, [r3, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2243      	movs	r2, #67	@ 0x43
 800dbe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dbe8:	4b02      	ldr	r3, [pc, #8]	@ (800dbf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	24000054 	.word	0x24000054

0800dbf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	220a      	movs	r2, #10
 800dc04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc06:	4b03      	ldr	r3, [pc, #12]	@ (800dc14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr
 800dc14:	24000010 	.word	0x24000010

0800dc18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	e009      	b.n	800dc40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	33b0      	adds	r3, #176	@ 0xb0
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4413      	add	r3, r2
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b087      	sub	sp, #28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	32b0      	adds	r2, #176	@ 0xb0
 800dc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	e008      	b.n	800dc84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	371c      	adds	r7, #28
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	32b0      	adds	r2, #176	@ 0xb0
 800dca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dca8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e004      	b.n	800dcbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3714      	adds	r7, #20
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
	...

0800dccc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	32b0      	adds	r2, #176	@ 0xb0
 800dcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dce4:	2301      	movs	r3, #1
 800dce6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dcee:	2303      	movs	r3, #3
 800dcf0:	e025      	b.n	800dd3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d11f      	bne.n	800dd3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dd04:	4b10      	ldr	r3, [pc, #64]	@ (800dd48 <USBD_CDC_TransmitPacket+0x7c>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	f003 020f 	and.w	r2, r3, #15
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	4613      	mov	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4403      	add	r3, r0
 800dd1e:	3318      	adds	r3, #24
 800dd20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dd22:	4b09      	ldr	r3, [pc, #36]	@ (800dd48 <USBD_CDC_TransmitPacket+0x7c>)
 800dd24:	7819      	ldrb	r1, [r3, #0]
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f003 fce7 	bl	8011706 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	24000097 	.word	0x24000097

0800dd4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	32b0      	adds	r2, #176	@ 0xb0
 800dd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	32b0      	adds	r2, #176	@ 0xb0
 800dd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dd76:	2303      	movs	r3, #3
 800dd78:	e018      	b.n	800ddac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	7c1b      	ldrb	r3, [r3, #16]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10a      	bne.n	800dd98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd82:	4b0c      	ldr	r3, [pc, #48]	@ (800ddb4 <USBD_CDC_ReceivePacket+0x68>)
 800dd84:	7819      	ldrb	r1, [r3, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f003 fcd9 	bl	8011748 <USBD_LL_PrepareReceive>
 800dd96:	e008      	b.n	800ddaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd98:	4b06      	ldr	r3, [pc, #24]	@ (800ddb4 <USBD_CDC_ReceivePacket+0x68>)
 800dd9a:	7819      	ldrb	r1, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dda2:	2340      	movs	r3, #64	@ 0x40
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f003 fccf 	bl	8011748 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	24000098 	.word	0x24000098

0800ddb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d101      	bne.n	800ddd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	e01f      	b.n	800de10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	79fa      	ldrb	r2, [r7, #7]
 800de02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f003 fb45 	bl	8011494 <USBD_LL_Init>
 800de0a:	4603      	mov	r3, r0
 800de0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de22:	2300      	movs	r3, #0
 800de24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e025      	b.n	800de7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	32ae      	adds	r2, #174	@ 0xae
 800de42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00f      	beq.n	800de6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	32ae      	adds	r2, #174	@ 0xae
 800de56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de5c:	f107 020e 	add.w	r2, r7, #14
 800de60:	4610      	mov	r0, r2
 800de62:	4798      	blx	r3
 800de64:	4602      	mov	r2, r0
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f003 fb51 	bl	8011534 <USBD_LL_Start>
 800de92:	4603      	mov	r3, r0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dea4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
 800deba:	460b      	mov	r3, r1
 800debc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800debe:	2300      	movs	r3, #0
 800dec0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d009      	beq.n	800dee0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	78fa      	ldrb	r2, [r7, #3]
 800ded6:	4611      	mov	r1, r2
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	4798      	blx	r3
 800dedc:	4603      	mov	r3, r0
 800dede:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800deea:	b580      	push	{r7, lr}
 800deec:	b084      	sub	sp, #16
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	460b      	mov	r3, r1
 800def4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800def6:	2300      	movs	r3, #0
 800def8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	78fa      	ldrb	r2, [r7, #3]
 800df04:	4611      	mov	r1, r2
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	4798      	blx	r3
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800df10:	2303      	movs	r3, #3
 800df12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df14:	7bfb      	ldrb	r3, [r7, #15]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b084      	sub	sp, #16
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f001 f936 	bl	800f1a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2201      	movs	r2, #1
 800df3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800df44:	461a      	mov	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800df52:	f003 031f 	and.w	r3, r3, #31
 800df56:	2b02      	cmp	r3, #2
 800df58:	d01a      	beq.n	800df90 <USBD_LL_SetupStage+0x72>
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d822      	bhi.n	800dfa4 <USBD_LL_SetupStage+0x86>
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d002      	beq.n	800df68 <USBD_LL_SetupStage+0x4a>
 800df62:	2b01      	cmp	r3, #1
 800df64:	d00a      	beq.n	800df7c <USBD_LL_SetupStage+0x5e>
 800df66:	e01d      	b.n	800dfa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df6e:	4619      	mov	r1, r3
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fb63 	bl	800e63c <USBD_StdDevReq>
 800df76:	4603      	mov	r3, r0
 800df78:	73fb      	strb	r3, [r7, #15]
      break;
 800df7a:	e020      	b.n	800dfbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df82:	4619      	mov	r1, r3
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fbcb 	bl	800e720 <USBD_StdItfReq>
 800df8a:	4603      	mov	r3, r0
 800df8c:	73fb      	strb	r3, [r7, #15]
      break;
 800df8e:	e016      	b.n	800dfbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fc2d 	bl	800e7f8 <USBD_StdEPReq>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	73fb      	strb	r3, [r7, #15]
      break;
 800dfa2:	e00c      	b.n	800dfbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dfaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f003 fb1e 	bl	80115f4 <USBD_LL_StallEP>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	73fb      	strb	r3, [r7, #15]
      break;
 800dfbc:	bf00      	nop
  }

  return ret;
 800dfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dfda:	7afb      	ldrb	r3, [r7, #11]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d16e      	bne.n	800e0be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dfe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dfee:	2b03      	cmp	r3, #3
 800dff0:	f040 8098 	bne.w	800e124 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	689a      	ldr	r2, [r3, #8]
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d913      	bls.n	800e028 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	689a      	ldr	r2, [r3, #8]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	1ad2      	subs	r2, r2, r3
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	68da      	ldr	r2, [r3, #12]
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	4293      	cmp	r3, r2
 800e018:	bf28      	it	cs
 800e01a:	4613      	movcs	r3, r2
 800e01c:	461a      	mov	r2, r3
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f001 f9be 	bl	800f3a2 <USBD_CtlContinueRx>
 800e026:	e07d      	b.n	800e124 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e02e:	f003 031f 	and.w	r3, r3, #31
 800e032:	2b02      	cmp	r3, #2
 800e034:	d014      	beq.n	800e060 <USBD_LL_DataOutStage+0x98>
 800e036:	2b02      	cmp	r3, #2
 800e038:	d81d      	bhi.n	800e076 <USBD_LL_DataOutStage+0xae>
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d002      	beq.n	800e044 <USBD_LL_DataOutStage+0x7c>
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d003      	beq.n	800e04a <USBD_LL_DataOutStage+0x82>
 800e042:	e018      	b.n	800e076 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e044:	2300      	movs	r3, #0
 800e046:	75bb      	strb	r3, [r7, #22]
            break;
 800e048:	e018      	b.n	800e07c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e050:	b2db      	uxtb	r3, r3
 800e052:	4619      	mov	r1, r3
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f000 fa64 	bl	800e522 <USBD_CoreFindIF>
 800e05a:	4603      	mov	r3, r0
 800e05c:	75bb      	strb	r3, [r7, #22]
            break;
 800e05e:	e00d      	b.n	800e07c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e066:	b2db      	uxtb	r3, r3
 800e068:	4619      	mov	r1, r3
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f000 fa66 	bl	800e53c <USBD_CoreFindEP>
 800e070:	4603      	mov	r3, r0
 800e072:	75bb      	strb	r3, [r7, #22]
            break;
 800e074:	e002      	b.n	800e07c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e076:	2300      	movs	r3, #0
 800e078:	75bb      	strb	r3, [r7, #22]
            break;
 800e07a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e07c:	7dbb      	ldrb	r3, [r7, #22]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d119      	bne.n	800e0b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d113      	bne.n	800e0b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e08e:	7dba      	ldrb	r2, [r7, #22]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	32ae      	adds	r2, #174	@ 0xae
 800e094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00b      	beq.n	800e0b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e09e:	7dba      	ldrb	r2, [r7, #22]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e0a6:	7dba      	ldrb	r2, [r7, #22]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	32ae      	adds	r2, #174	@ 0xae
 800e0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f001 f984 	bl	800f3c4 <USBD_CtlSendStatus>
 800e0bc:	e032      	b.n	800e124 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e0be:	7afb      	ldrb	r3, [r7, #11]
 800e0c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f000 fa37 	bl	800e53c <USBD_CoreFindEP>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0d2:	7dbb      	ldrb	r3, [r7, #22]
 800e0d4:	2bff      	cmp	r3, #255	@ 0xff
 800e0d6:	d025      	beq.n	800e124 <USBD_LL_DataOutStage+0x15c>
 800e0d8:	7dbb      	ldrb	r3, [r7, #22]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d122      	bne.n	800e124 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d117      	bne.n	800e11a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e0ea:	7dba      	ldrb	r2, [r7, #22]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	32ae      	adds	r2, #174	@ 0xae
 800e0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00f      	beq.n	800e11a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e0fa:	7dba      	ldrb	r2, [r7, #22]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e102:	7dba      	ldrb	r2, [r7, #22]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	32ae      	adds	r2, #174	@ 0xae
 800e108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e10c:	699b      	ldr	r3, [r3, #24]
 800e10e:	7afa      	ldrb	r2, [r7, #11]
 800e110:	4611      	mov	r1, r2
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	4798      	blx	r3
 800e116:	4603      	mov	r3, r0
 800e118:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e120:	7dfb      	ldrb	r3, [r7, #23]
 800e122:	e000      	b.n	800e126 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b086      	sub	sp, #24
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	460b      	mov	r3, r1
 800e138:	607a      	str	r2, [r7, #4]
 800e13a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e13c:	7afb      	ldrb	r3, [r7, #11]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d16f      	bne.n	800e222 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3314      	adds	r3, #20
 800e146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d15a      	bne.n	800e208 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d914      	bls.n	800e188 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	689a      	ldr	r2, [r3, #8]
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	1ad2      	subs	r2, r2, r3
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	461a      	mov	r2, r3
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f001 f8e6 	bl	800f346 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e17a:	2300      	movs	r3, #0
 800e17c:	2200      	movs	r2, #0
 800e17e:	2100      	movs	r1, #0
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f003 fae1 	bl	8011748 <USBD_LL_PrepareReceive>
 800e186:	e03f      	b.n	800e208 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	68da      	ldr	r2, [r3, #12]
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	429a      	cmp	r2, r3
 800e192:	d11c      	bne.n	800e1ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	685a      	ldr	r2, [r3, #4]
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d316      	bcc.n	800e1ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d20f      	bcs.n	800e1ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f001 f8c7 	bl	800f346 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f003 fabe 	bl	8011748 <USBD_LL_PrepareReceive>
 800e1cc:	e01c      	b.n	800e208 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b03      	cmp	r3, #3
 800e1d8:	d10f      	bne.n	800e1fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d009      	beq.n	800e1fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1fa:	2180      	movs	r1, #128	@ 0x80
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f003 f9f9 	bl	80115f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f001 f8f1 	bl	800f3ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d03a      	beq.n	800e288 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f7ff fe42 	bl	800de9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e220:	e032      	b.n	800e288 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e222:	7afb      	ldrb	r3, [r7, #11]
 800e224:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	4619      	mov	r1, r3
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f000 f985 	bl	800e53c <USBD_CoreFindEP>
 800e232:	4603      	mov	r3, r0
 800e234:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e236:	7dfb      	ldrb	r3, [r7, #23]
 800e238:	2bff      	cmp	r3, #255	@ 0xff
 800e23a:	d025      	beq.n	800e288 <USBD_LL_DataInStage+0x15a>
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d122      	bne.n	800e288 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b03      	cmp	r3, #3
 800e24c:	d11c      	bne.n	800e288 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e24e:	7dfa      	ldrb	r2, [r7, #23]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	32ae      	adds	r2, #174	@ 0xae
 800e254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e258:	695b      	ldr	r3, [r3, #20]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d014      	beq.n	800e288 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e25e:	7dfa      	ldrb	r2, [r7, #23]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e266:	7dfa      	ldrb	r2, [r7, #23]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	32ae      	adds	r2, #174	@ 0xae
 800e26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e270:	695b      	ldr	r3, [r3, #20]
 800e272:	7afa      	ldrb	r2, [r7, #11]
 800e274:	4611      	mov	r1, r2
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	4798      	blx	r3
 800e27a:	4603      	mov	r3, r0
 800e27c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e27e:	7dbb      	ldrb	r3, [r7, #22]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d001      	beq.n	800e288 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e284:	7dbb      	ldrb	r3, [r7, #22]
 800e286:	e000      	b.n	800e28a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d014      	beq.n	800e2f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00e      	beq.n	800e2f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	6852      	ldr	r2, [r2, #4]
 800e2e6:	b2d2      	uxtb	r2, r2
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	4798      	blx	r3
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e2f8:	2340      	movs	r3, #64	@ 0x40
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f003 f933 	bl	801156a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2240      	movs	r2, #64	@ 0x40
 800e310:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e314:	2340      	movs	r3, #64	@ 0x40
 800e316:	2200      	movs	r2, #0
 800e318:	2180      	movs	r1, #128	@ 0x80
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f003 f925 	bl	801156a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2240      	movs	r2, #64	@ 0x40
 800e32a:	621a      	str	r2, [r3, #32]

  return ret;
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e336:	b480      	push	{r7}
 800e338:	b083      	sub	sp, #12
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	460b      	mov	r3, r1
 800e340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	78fa      	ldrb	r2, [r7, #3]
 800e346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	370c      	adds	r7, #12
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e356:	b480      	push	{r7}
 800e358:	b083      	sub	sp, #12
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b04      	cmp	r3, #4
 800e368:	d006      	beq.n	800e378 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e370:	b2da      	uxtb	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2204      	movs	r2, #4
 800e37c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e38e:	b480      	push	{r7}
 800e390:	b083      	sub	sp, #12
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d106      	bne.n	800e3b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	370c      	adds	r7, #12
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b082      	sub	sp, #8
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	2b03      	cmp	r3, #3
 800e3d0:	d110      	bne.n	800e3f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00b      	beq.n	800e3f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3e2:	69db      	ldr	r3, [r3, #28]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d005      	beq.n	800e3f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3ee:	69db      	ldr	r3, [r3, #28]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b082      	sub	sp, #8
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	460b      	mov	r3, r1
 800e408:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	32ae      	adds	r2, #174	@ 0xae
 800e414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e41c:	2303      	movs	r3, #3
 800e41e:	e01c      	b.n	800e45a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b03      	cmp	r3, #3
 800e42a:	d115      	bne.n	800e458 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32ae      	adds	r2, #174	@ 0xae
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	6a1b      	ldr	r3, [r3, #32]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00b      	beq.n	800e458 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	32ae      	adds	r2, #174	@ 0xae
 800e44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e44e:	6a1b      	ldr	r3, [r3, #32]
 800e450:	78fa      	ldrb	r2, [r7, #3]
 800e452:	4611      	mov	r1, r2
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b082      	sub	sp, #8
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	460b      	mov	r3, r1
 800e46c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	32ae      	adds	r2, #174	@ 0xae
 800e478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e480:	2303      	movs	r3, #3
 800e482:	e01c      	b.n	800e4be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	2b03      	cmp	r3, #3
 800e48e:	d115      	bne.n	800e4bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	32ae      	adds	r2, #174	@ 0xae
 800e49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00b      	beq.n	800e4bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	32ae      	adds	r2, #174	@ 0xae
 800e4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b4:	78fa      	ldrb	r2, [r7, #3]
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e4c6:	b480      	push	{r7}
 800e4c8:	b083      	sub	sp, #12
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00e      	beq.n	800e518 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	6852      	ldr	r2, [r2, #4]
 800e506:	b2d2      	uxtb	r2, r2
 800e508:	4611      	mov	r1, r2
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	4798      	blx	r3
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e514:	2303      	movs	r3, #3
 800e516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e518:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e522:	b480      	push	{r7}
 800e524:	b083      	sub	sp, #12
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
 800e52a:	460b      	mov	r3, r1
 800e52c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e52e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e530:	4618      	mov	r0, r3
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e548:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b086      	sub	sp, #24
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	460b      	mov	r3, r1
 800e560:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e56a:	2300      	movs	r3, #0
 800e56c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	885b      	ldrh	r3, [r3, #2]
 800e572:	b29b      	uxth	r3, r3
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	7812      	ldrb	r2, [r2, #0]
 800e578:	4293      	cmp	r3, r2
 800e57a:	d91f      	bls.n	800e5bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e582:	e013      	b.n	800e5ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e584:	f107 030a 	add.w	r3, r7, #10
 800e588:	4619      	mov	r1, r3
 800e58a:	6978      	ldr	r0, [r7, #20]
 800e58c:	f000 f81b 	bl	800e5c6 <USBD_GetNextDesc>
 800e590:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	785b      	ldrb	r3, [r3, #1]
 800e596:	2b05      	cmp	r3, #5
 800e598:	d108      	bne.n	800e5ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	789b      	ldrb	r3, [r3, #2]
 800e5a2:	78fa      	ldrb	r2, [r7, #3]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d008      	beq.n	800e5ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	885b      	ldrh	r3, [r3, #2]
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	897b      	ldrh	r3, [r7, #10]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d8e5      	bhi.n	800e584 <USBD_GetEpDesc+0x2e>
 800e5b8:	e000      	b.n	800e5bc <USBD_GetEpDesc+0x66>
          break;
 800e5ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e5bc:	693b      	ldr	r3, [r7, #16]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3718      	adds	r7, #24
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e5c6:	b480      	push	{r7}
 800e5c8:	b085      	sub	sp, #20
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	881b      	ldrh	r3, [r3, #0]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	7812      	ldrb	r2, [r2, #0]
 800e5dc:	4413      	add	r3, r2
 800e5de:	b29a      	uxth	r2, r3
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b087      	sub	sp, #28
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	3301      	adds	r3, #1
 800e614:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e61c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e620:	021b      	lsls	r3, r3, #8
 800e622:	b21a      	sxth	r2, r3
 800e624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e628:	4313      	orrs	r3, r2
 800e62a:	b21b      	sxth	r3, r3
 800e62c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e62e:	89fb      	ldrh	r3, [r7, #14]
}
 800e630:	4618      	mov	r0, r3
 800e632:	371c      	adds	r7, #28
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e652:	2b40      	cmp	r3, #64	@ 0x40
 800e654:	d005      	beq.n	800e662 <USBD_StdDevReq+0x26>
 800e656:	2b40      	cmp	r3, #64	@ 0x40
 800e658:	d857      	bhi.n	800e70a <USBD_StdDevReq+0xce>
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00f      	beq.n	800e67e <USBD_StdDevReq+0x42>
 800e65e:	2b20      	cmp	r3, #32
 800e660:	d153      	bne.n	800e70a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	32ae      	adds	r2, #174	@ 0xae
 800e66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	4798      	blx	r3
 800e678:	4603      	mov	r3, r0
 800e67a:	73fb      	strb	r3, [r7, #15]
      break;
 800e67c:	e04a      	b.n	800e714 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	785b      	ldrb	r3, [r3, #1]
 800e682:	2b09      	cmp	r3, #9
 800e684:	d83b      	bhi.n	800e6fe <USBD_StdDevReq+0xc2>
 800e686:	a201      	add	r2, pc, #4	@ (adr r2, 800e68c <USBD_StdDevReq+0x50>)
 800e688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e68c:	0800e6e1 	.word	0x0800e6e1
 800e690:	0800e6f5 	.word	0x0800e6f5
 800e694:	0800e6ff 	.word	0x0800e6ff
 800e698:	0800e6eb 	.word	0x0800e6eb
 800e69c:	0800e6ff 	.word	0x0800e6ff
 800e6a0:	0800e6bf 	.word	0x0800e6bf
 800e6a4:	0800e6b5 	.word	0x0800e6b5
 800e6a8:	0800e6ff 	.word	0x0800e6ff
 800e6ac:	0800e6d7 	.word	0x0800e6d7
 800e6b0:	0800e6c9 	.word	0x0800e6c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e6b4:	6839      	ldr	r1, [r7, #0]
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 fa3c 	bl	800eb34 <USBD_GetDescriptor>
          break;
 800e6bc:	e024      	b.n	800e708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fbcb 	bl	800ee5c <USBD_SetAddress>
          break;
 800e6c6:	e01f      	b.n	800e708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fc0a 	bl	800eee4 <USBD_SetConfig>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73fb      	strb	r3, [r7, #15]
          break;
 800e6d4:	e018      	b.n	800e708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e6d6:	6839      	ldr	r1, [r7, #0]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fcad 	bl	800f038 <USBD_GetConfig>
          break;
 800e6de:	e013      	b.n	800e708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fcde 	bl	800f0a4 <USBD_GetStatus>
          break;
 800e6e8:	e00e      	b.n	800e708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fd0d 	bl	800f10c <USBD_SetFeature>
          break;
 800e6f2:	e009      	b.n	800e708 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e6f4:	6839      	ldr	r1, [r7, #0]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fd31 	bl	800f15e <USBD_ClrFeature>
          break;
 800e6fc:	e004      	b.n	800e708 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e6fe:	6839      	ldr	r1, [r7, #0]
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 fd88 	bl	800f216 <USBD_CtlError>
          break;
 800e706:	bf00      	nop
      }
      break;
 800e708:	e004      	b.n	800e714 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e70a:	6839      	ldr	r1, [r7, #0]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 fd82 	bl	800f216 <USBD_CtlError>
      break;
 800e712:	bf00      	nop
  }

  return ret;
 800e714:	7bfb      	ldrb	r3, [r7, #15]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop

0800e720 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e736:	2b40      	cmp	r3, #64	@ 0x40
 800e738:	d005      	beq.n	800e746 <USBD_StdItfReq+0x26>
 800e73a:	2b40      	cmp	r3, #64	@ 0x40
 800e73c:	d852      	bhi.n	800e7e4 <USBD_StdItfReq+0xc4>
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <USBD_StdItfReq+0x26>
 800e742:	2b20      	cmp	r3, #32
 800e744:	d14e      	bne.n	800e7e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	3b01      	subs	r3, #1
 800e750:	2b02      	cmp	r3, #2
 800e752:	d840      	bhi.n	800e7d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	889b      	ldrh	r3, [r3, #4]
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d836      	bhi.n	800e7cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	889b      	ldrh	r3, [r3, #4]
 800e762:	b2db      	uxtb	r3, r3
 800e764:	4619      	mov	r1, r3
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7ff fedb 	bl	800e522 <USBD_CoreFindIF>
 800e76c:	4603      	mov	r3, r0
 800e76e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e770:	7bbb      	ldrb	r3, [r7, #14]
 800e772:	2bff      	cmp	r3, #255	@ 0xff
 800e774:	d01d      	beq.n	800e7b2 <USBD_StdItfReq+0x92>
 800e776:	7bbb      	ldrb	r3, [r7, #14]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d11a      	bne.n	800e7b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e77c:	7bba      	ldrb	r2, [r7, #14]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	32ae      	adds	r2, #174	@ 0xae
 800e782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00f      	beq.n	800e7ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e78c:	7bba      	ldrb	r2, [r7, #14]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e794:	7bba      	ldrb	r2, [r7, #14]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	32ae      	adds	r2, #174	@ 0xae
 800e79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	6839      	ldr	r1, [r7, #0]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	4798      	blx	r3
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e7aa:	e004      	b.n	800e7b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e7b0:	e001      	b.n	800e7b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	88db      	ldrh	r3, [r3, #6]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d110      	bne.n	800e7e0 <USBD_StdItfReq+0xc0>
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d10d      	bne.n	800e7e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fdfd 	bl	800f3c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e7ca:	e009      	b.n	800e7e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 fd21 	bl	800f216 <USBD_CtlError>
          break;
 800e7d4:	e004      	b.n	800e7e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fd1c 	bl	800f216 <USBD_CtlError>
          break;
 800e7de:	e000      	b.n	800e7e2 <USBD_StdItfReq+0xc2>
          break;
 800e7e0:	bf00      	nop
      }
      break;
 800e7e2:	e004      	b.n	800e7ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e7e4:	6839      	ldr	r1, [r7, #0]
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 fd15 	bl	800f216 <USBD_CtlError>
      break;
 800e7ec:	bf00      	nop
  }

  return ret;
 800e7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	889b      	ldrh	r3, [r3, #4]
 800e80a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e814:	2b40      	cmp	r3, #64	@ 0x40
 800e816:	d007      	beq.n	800e828 <USBD_StdEPReq+0x30>
 800e818:	2b40      	cmp	r3, #64	@ 0x40
 800e81a:	f200 817f 	bhi.w	800eb1c <USBD_StdEPReq+0x324>
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d02a      	beq.n	800e878 <USBD_StdEPReq+0x80>
 800e822:	2b20      	cmp	r3, #32
 800e824:	f040 817a 	bne.w	800eb1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e828:	7bbb      	ldrb	r3, [r7, #14]
 800e82a:	4619      	mov	r1, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff fe85 	bl	800e53c <USBD_CoreFindEP>
 800e832:	4603      	mov	r3, r0
 800e834:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e836:	7b7b      	ldrb	r3, [r7, #13]
 800e838:	2bff      	cmp	r3, #255	@ 0xff
 800e83a:	f000 8174 	beq.w	800eb26 <USBD_StdEPReq+0x32e>
 800e83e:	7b7b      	ldrb	r3, [r7, #13]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f040 8170 	bne.w	800eb26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e846:	7b7a      	ldrb	r2, [r7, #13]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e84e:	7b7a      	ldrb	r2, [r7, #13]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	32ae      	adds	r2, #174	@ 0xae
 800e854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 8163 	beq.w	800eb26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e860:	7b7a      	ldrb	r2, [r7, #13]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	32ae      	adds	r2, #174	@ 0xae
 800e866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	6839      	ldr	r1, [r7, #0]
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	4798      	blx	r3
 800e872:	4603      	mov	r3, r0
 800e874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e876:	e156      	b.n	800eb26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	785b      	ldrb	r3, [r3, #1]
 800e87c:	2b03      	cmp	r3, #3
 800e87e:	d008      	beq.n	800e892 <USBD_StdEPReq+0x9a>
 800e880:	2b03      	cmp	r3, #3
 800e882:	f300 8145 	bgt.w	800eb10 <USBD_StdEPReq+0x318>
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 809b 	beq.w	800e9c2 <USBD_StdEPReq+0x1ca>
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d03c      	beq.n	800e90a <USBD_StdEPReq+0x112>
 800e890:	e13e      	b.n	800eb10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	d002      	beq.n	800e8a4 <USBD_StdEPReq+0xac>
 800e89e:	2b03      	cmp	r3, #3
 800e8a0:	d016      	beq.n	800e8d0 <USBD_StdEPReq+0xd8>
 800e8a2:	e02c      	b.n	800e8fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e8a4:	7bbb      	ldrb	r3, [r7, #14]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00d      	beq.n	800e8c6 <USBD_StdEPReq+0xce>
 800e8aa:	7bbb      	ldrb	r3, [r7, #14]
 800e8ac:	2b80      	cmp	r3, #128	@ 0x80
 800e8ae:	d00a      	beq.n	800e8c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e8b0:	7bbb      	ldrb	r3, [r7, #14]
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f002 fe9d 	bl	80115f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8ba:	2180      	movs	r1, #128	@ 0x80
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f002 fe99 	bl	80115f4 <USBD_LL_StallEP>
 800e8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e8c4:	e020      	b.n	800e908 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e8c6:	6839      	ldr	r1, [r7, #0]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 fca4 	bl	800f216 <USBD_CtlError>
              break;
 800e8ce:	e01b      	b.n	800e908 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	885b      	ldrh	r3, [r3, #2]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d10e      	bne.n	800e8f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e8d8:	7bbb      	ldrb	r3, [r7, #14]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00b      	beq.n	800e8f6 <USBD_StdEPReq+0xfe>
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
 800e8e0:	2b80      	cmp	r3, #128	@ 0x80
 800e8e2:	d008      	beq.n	800e8f6 <USBD_StdEPReq+0xfe>
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	88db      	ldrh	r3, [r3, #6]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d104      	bne.n	800e8f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e8ec:	7bbb      	ldrb	r3, [r7, #14]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f002 fe7f 	bl	80115f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 fd64 	bl	800f3c4 <USBD_CtlSendStatus>

              break;
 800e8fc:	e004      	b.n	800e908 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e8fe:	6839      	ldr	r1, [r7, #0]
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 fc88 	bl	800f216 <USBD_CtlError>
              break;
 800e906:	bf00      	nop
          }
          break;
 800e908:	e107      	b.n	800eb1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e910:	b2db      	uxtb	r3, r3
 800e912:	2b02      	cmp	r3, #2
 800e914:	d002      	beq.n	800e91c <USBD_StdEPReq+0x124>
 800e916:	2b03      	cmp	r3, #3
 800e918:	d016      	beq.n	800e948 <USBD_StdEPReq+0x150>
 800e91a:	e04b      	b.n	800e9b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00d      	beq.n	800e93e <USBD_StdEPReq+0x146>
 800e922:	7bbb      	ldrb	r3, [r7, #14]
 800e924:	2b80      	cmp	r3, #128	@ 0x80
 800e926:	d00a      	beq.n	800e93e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e928:	7bbb      	ldrb	r3, [r7, #14]
 800e92a:	4619      	mov	r1, r3
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f002 fe61 	bl	80115f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e932:	2180      	movs	r1, #128	@ 0x80
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f002 fe5d 	bl	80115f4 <USBD_LL_StallEP>
 800e93a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e93c:	e040      	b.n	800e9c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e93e:	6839      	ldr	r1, [r7, #0]
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 fc68 	bl	800f216 <USBD_CtlError>
              break;
 800e946:	e03b      	b.n	800e9c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	885b      	ldrh	r3, [r3, #2]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d136      	bne.n	800e9be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e950:	7bbb      	ldrb	r3, [r7, #14]
 800e952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e956:	2b00      	cmp	r3, #0
 800e958:	d004      	beq.n	800e964 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
 800e95c:	4619      	mov	r1, r3
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f002 fe67 	bl	8011632 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 fd2d 	bl	800f3c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e96a:	7bbb      	ldrb	r3, [r7, #14]
 800e96c:	4619      	mov	r1, r3
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7ff fde4 	bl	800e53c <USBD_CoreFindEP>
 800e974:	4603      	mov	r3, r0
 800e976:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e978:	7b7b      	ldrb	r3, [r7, #13]
 800e97a:	2bff      	cmp	r3, #255	@ 0xff
 800e97c:	d01f      	beq.n	800e9be <USBD_StdEPReq+0x1c6>
 800e97e:	7b7b      	ldrb	r3, [r7, #13]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d11c      	bne.n	800e9be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e984:	7b7a      	ldrb	r2, [r7, #13]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e98c:	7b7a      	ldrb	r2, [r7, #13]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	32ae      	adds	r2, #174	@ 0xae
 800e992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d010      	beq.n	800e9be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e99c:	7b7a      	ldrb	r2, [r7, #13]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	32ae      	adds	r2, #174	@ 0xae
 800e9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	6839      	ldr	r1, [r7, #0]
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	4798      	blx	r3
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e9b2:	e004      	b.n	800e9be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e9b4:	6839      	ldr	r1, [r7, #0]
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fc2d 	bl	800f216 <USBD_CtlError>
              break;
 800e9bc:	e000      	b.n	800e9c0 <USBD_StdEPReq+0x1c8>
              break;
 800e9be:	bf00      	nop
          }
          break;
 800e9c0:	e0ab      	b.n	800eb1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d002      	beq.n	800e9d4 <USBD_StdEPReq+0x1dc>
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	d032      	beq.n	800ea38 <USBD_StdEPReq+0x240>
 800e9d2:	e097      	b.n	800eb04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9d4:	7bbb      	ldrb	r3, [r7, #14]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <USBD_StdEPReq+0x1f2>
 800e9da:	7bbb      	ldrb	r3, [r7, #14]
 800e9dc:	2b80      	cmp	r3, #128	@ 0x80
 800e9de:	d004      	beq.n	800e9ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e9e0:	6839      	ldr	r1, [r7, #0]
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 fc17 	bl	800f216 <USBD_CtlError>
                break;
 800e9e8:	e091      	b.n	800eb0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e9ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	da0b      	bge.n	800ea0a <USBD_StdEPReq+0x212>
 800e9f2:	7bbb      	ldrb	r3, [r7, #14]
 800e9f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	3310      	adds	r3, #16
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	4413      	add	r3, r2
 800ea06:	3304      	adds	r3, #4
 800ea08:	e00b      	b.n	800ea22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ea0a:	7bbb      	ldrb	r3, [r7, #14]
 800ea0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea10:	4613      	mov	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	4413      	add	r3, r2
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	4413      	add	r3, r2
 800ea20:	3304      	adds	r3, #4
 800ea22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2202      	movs	r2, #2
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 fc6d 	bl	800f310 <USBD_CtlSendData>
              break;
 800ea36:	e06a      	b.n	800eb0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ea38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	da11      	bge.n	800ea64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
 800ea42:	f003 020f 	and.w	r2, r3, #15
 800ea46:	6879      	ldr	r1, [r7, #4]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4413      	add	r3, r2
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	440b      	add	r3, r1
 800ea52:	3324      	adds	r3, #36	@ 0x24
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d117      	bne.n	800ea8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 fbda 	bl	800f216 <USBD_CtlError>
                  break;
 800ea62:	e054      	b.n	800eb0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ea64:	7bbb      	ldrb	r3, [r7, #14]
 800ea66:	f003 020f 	and.w	r2, r3, #15
 800ea6a:	6879      	ldr	r1, [r7, #4]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	440b      	add	r3, r1
 800ea76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d104      	bne.n	800ea8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fbc7 	bl	800f216 <USBD_CtlError>
                  break;
 800ea88:	e041      	b.n	800eb0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	da0b      	bge.n	800eaaa <USBD_StdEPReq+0x2b2>
 800ea92:	7bbb      	ldrb	r3, [r7, #14]
 800ea94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea98:	4613      	mov	r3, r2
 800ea9a:	009b      	lsls	r3, r3, #2
 800ea9c:	4413      	add	r3, r2
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	3310      	adds	r3, #16
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	e00b      	b.n	800eac2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eaaa:	7bbb      	ldrb	r3, [r7, #14]
 800eaac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eab0:	4613      	mov	r3, r2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	4413      	add	r3, r2
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	4413      	add	r3, r2
 800eac0:	3304      	adds	r3, #4
 800eac2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eac4:	7bbb      	ldrb	r3, [r7, #14]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <USBD_StdEPReq+0x2d8>
 800eaca:	7bbb      	ldrb	r3, [r7, #14]
 800eacc:	2b80      	cmp	r3, #128	@ 0x80
 800eace:	d103      	bne.n	800ead8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	e00e      	b.n	800eaf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ead8:	7bbb      	ldrb	r3, [r7, #14]
 800eada:	4619      	mov	r1, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f002 fdc7 	bl	8011670 <USBD_LL_IsStallEP>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d003      	beq.n	800eaf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	2201      	movs	r2, #1
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	e002      	b.n	800eaf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2202      	movs	r2, #2
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fc07 	bl	800f310 <USBD_CtlSendData>
              break;
 800eb02:	e004      	b.n	800eb0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fb85 	bl	800f216 <USBD_CtlError>
              break;
 800eb0c:	bf00      	nop
          }
          break;
 800eb0e:	e004      	b.n	800eb1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fb7f 	bl	800f216 <USBD_CtlError>
          break;
 800eb18:	bf00      	nop
      }
      break;
 800eb1a:	e005      	b.n	800eb28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fb79 	bl	800f216 <USBD_CtlError>
      break;
 800eb24:	e000      	b.n	800eb28 <USBD_StdEPReq+0x330>
      break;
 800eb26:	bf00      	nop
  }

  return ret;
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
	...

0800eb34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eb46:	2300      	movs	r3, #0
 800eb48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	885b      	ldrh	r3, [r3, #2]
 800eb4e:	0a1b      	lsrs	r3, r3, #8
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	3b01      	subs	r3, #1
 800eb54:	2b0e      	cmp	r3, #14
 800eb56:	f200 8152 	bhi.w	800edfe <USBD_GetDescriptor+0x2ca>
 800eb5a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb60 <USBD_GetDescriptor+0x2c>)
 800eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb60:	0800ebd1 	.word	0x0800ebd1
 800eb64:	0800ebe9 	.word	0x0800ebe9
 800eb68:	0800ec29 	.word	0x0800ec29
 800eb6c:	0800edff 	.word	0x0800edff
 800eb70:	0800edff 	.word	0x0800edff
 800eb74:	0800ed9f 	.word	0x0800ed9f
 800eb78:	0800edcb 	.word	0x0800edcb
 800eb7c:	0800edff 	.word	0x0800edff
 800eb80:	0800edff 	.word	0x0800edff
 800eb84:	0800edff 	.word	0x0800edff
 800eb88:	0800edff 	.word	0x0800edff
 800eb8c:	0800edff 	.word	0x0800edff
 800eb90:	0800edff 	.word	0x0800edff
 800eb94:	0800edff 	.word	0x0800edff
 800eb98:	0800eb9d 	.word	0x0800eb9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eba2:	69db      	ldr	r3, [r3, #28]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00b      	beq.n	800ebc0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebae:	69db      	ldr	r3, [r3, #28]
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	7c12      	ldrb	r2, [r2, #16]
 800ebb4:	f107 0108 	add.w	r1, r7, #8
 800ebb8:	4610      	mov	r0, r2
 800ebba:	4798      	blx	r3
 800ebbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebbe:	e126      	b.n	800ee0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fb27 	bl	800f216 <USBD_CtlError>
        err++;
 800ebc8:	7afb      	ldrb	r3, [r7, #11]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	72fb      	strb	r3, [r7, #11]
      break;
 800ebce:	e11e      	b.n	800ee0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	7c12      	ldrb	r2, [r2, #16]
 800ebdc:	f107 0108 	add.w	r1, r7, #8
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	4798      	blx	r3
 800ebe4:	60f8      	str	r0, [r7, #12]
      break;
 800ebe6:	e112      	b.n	800ee0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	7c1b      	ldrb	r3, [r3, #16]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10d      	bne.n	800ec0c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebf8:	f107 0208 	add.w	r2, r7, #8
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	4798      	blx	r3
 800ec00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	3301      	adds	r3, #1
 800ec06:	2202      	movs	r2, #2
 800ec08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ec0a:	e100      	b.n	800ee0e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec14:	f107 0208 	add.w	r2, r7, #8
 800ec18:	4610      	mov	r0, r2
 800ec1a:	4798      	blx	r3
 800ec1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3301      	adds	r3, #1
 800ec22:	2202      	movs	r2, #2
 800ec24:	701a      	strb	r2, [r3, #0]
      break;
 800ec26:	e0f2      	b.n	800ee0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	885b      	ldrh	r3, [r3, #2]
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b05      	cmp	r3, #5
 800ec30:	f200 80ac 	bhi.w	800ed8c <USBD_GetDescriptor+0x258>
 800ec34:	a201      	add	r2, pc, #4	@ (adr r2, 800ec3c <USBD_GetDescriptor+0x108>)
 800ec36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3a:	bf00      	nop
 800ec3c:	0800ec55 	.word	0x0800ec55
 800ec40:	0800ec89 	.word	0x0800ec89
 800ec44:	0800ecbd 	.word	0x0800ecbd
 800ec48:	0800ecf1 	.word	0x0800ecf1
 800ec4c:	0800ed25 	.word	0x0800ed25
 800ec50:	0800ed59 	.word	0x0800ed59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00b      	beq.n	800ec78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	7c12      	ldrb	r2, [r2, #16]
 800ec6c:	f107 0108 	add.w	r1, r7, #8
 800ec70:	4610      	mov	r0, r2
 800ec72:	4798      	blx	r3
 800ec74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec76:	e091      	b.n	800ed9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 facb 	bl	800f216 <USBD_CtlError>
            err++;
 800ec80:	7afb      	ldrb	r3, [r7, #11]
 800ec82:	3301      	adds	r3, #1
 800ec84:	72fb      	strb	r3, [r7, #11]
          break;
 800ec86:	e089      	b.n	800ed9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00b      	beq.n	800ecac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	7c12      	ldrb	r2, [r2, #16]
 800eca0:	f107 0108 	add.w	r1, r7, #8
 800eca4:	4610      	mov	r0, r2
 800eca6:	4798      	blx	r3
 800eca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ecaa:	e077      	b.n	800ed9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ecac:	6839      	ldr	r1, [r7, #0]
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 fab1 	bl	800f216 <USBD_CtlError>
            err++;
 800ecb4:	7afb      	ldrb	r3, [r7, #11]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	72fb      	strb	r3, [r7, #11]
          break;
 800ecba:	e06f      	b.n	800ed9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00b      	beq.n	800ece0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	7c12      	ldrb	r2, [r2, #16]
 800ecd4:	f107 0108 	add.w	r1, r7, #8
 800ecd8:	4610      	mov	r0, r2
 800ecda:	4798      	blx	r3
 800ecdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ecde:	e05d      	b.n	800ed9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ece0:	6839      	ldr	r1, [r7, #0]
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 fa97 	bl	800f216 <USBD_CtlError>
            err++;
 800ece8:	7afb      	ldrb	r3, [r7, #11]
 800ecea:	3301      	adds	r3, #1
 800ecec:	72fb      	strb	r3, [r7, #11]
          break;
 800ecee:	e055      	b.n	800ed9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00b      	beq.n	800ed14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	7c12      	ldrb	r2, [r2, #16]
 800ed08:	f107 0108 	add.w	r1, r7, #8
 800ed0c:	4610      	mov	r0, r2
 800ed0e:	4798      	blx	r3
 800ed10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed12:	e043      	b.n	800ed9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fa7d 	bl	800f216 <USBD_CtlError>
            err++;
 800ed1c:	7afb      	ldrb	r3, [r7, #11]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	72fb      	strb	r3, [r7, #11]
          break;
 800ed22:	e03b      	b.n	800ed9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed2a:	695b      	ldr	r3, [r3, #20]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00b      	beq.n	800ed48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed36:	695b      	ldr	r3, [r3, #20]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	7c12      	ldrb	r2, [r2, #16]
 800ed3c:	f107 0108 	add.w	r1, r7, #8
 800ed40:	4610      	mov	r0, r2
 800ed42:	4798      	blx	r3
 800ed44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed46:	e029      	b.n	800ed9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed48:	6839      	ldr	r1, [r7, #0]
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 fa63 	bl	800f216 <USBD_CtlError>
            err++;
 800ed50:	7afb      	ldrb	r3, [r7, #11]
 800ed52:	3301      	adds	r3, #1
 800ed54:	72fb      	strb	r3, [r7, #11]
          break;
 800ed56:	e021      	b.n	800ed9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00b      	beq.n	800ed7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed6a:	699b      	ldr	r3, [r3, #24]
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	7c12      	ldrb	r2, [r2, #16]
 800ed70:	f107 0108 	add.w	r1, r7, #8
 800ed74:	4610      	mov	r0, r2
 800ed76:	4798      	blx	r3
 800ed78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed7a:	e00f      	b.n	800ed9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 fa49 	bl	800f216 <USBD_CtlError>
            err++;
 800ed84:	7afb      	ldrb	r3, [r7, #11]
 800ed86:	3301      	adds	r3, #1
 800ed88:	72fb      	strb	r3, [r7, #11]
          break;
 800ed8a:	e007      	b.n	800ed9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ed8c:	6839      	ldr	r1, [r7, #0]
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fa41 	bl	800f216 <USBD_CtlError>
          err++;
 800ed94:	7afb      	ldrb	r3, [r7, #11]
 800ed96:	3301      	adds	r3, #1
 800ed98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ed9a:	bf00      	nop
      }
      break;
 800ed9c:	e037      	b.n	800ee0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	7c1b      	ldrb	r3, [r3, #16]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d109      	bne.n	800edba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edae:	f107 0208 	add.w	r2, r7, #8
 800edb2:	4610      	mov	r0, r2
 800edb4:	4798      	blx	r3
 800edb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800edb8:	e029      	b.n	800ee0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fa2a 	bl	800f216 <USBD_CtlError>
        err++;
 800edc2:	7afb      	ldrb	r3, [r7, #11]
 800edc4:	3301      	adds	r3, #1
 800edc6:	72fb      	strb	r3, [r7, #11]
      break;
 800edc8:	e021      	b.n	800ee0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	7c1b      	ldrb	r3, [r3, #16]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10d      	bne.n	800edee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edda:	f107 0208 	add.w	r2, r7, #8
 800edde:	4610      	mov	r0, r2
 800ede0:	4798      	blx	r3
 800ede2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	3301      	adds	r3, #1
 800ede8:	2207      	movs	r2, #7
 800edea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800edec:	e00f      	b.n	800ee0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fa10 	bl	800f216 <USBD_CtlError>
        err++;
 800edf6:	7afb      	ldrb	r3, [r7, #11]
 800edf8:	3301      	adds	r3, #1
 800edfa:	72fb      	strb	r3, [r7, #11]
      break;
 800edfc:	e007      	b.n	800ee0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800edfe:	6839      	ldr	r1, [r7, #0]
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 fa08 	bl	800f216 <USBD_CtlError>
      err++;
 800ee06:	7afb      	ldrb	r3, [r7, #11]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ee0c:	bf00      	nop
  }

  if (err != 0U)
 800ee0e:	7afb      	ldrb	r3, [r7, #11]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d11e      	bne.n	800ee52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	88db      	ldrh	r3, [r3, #6]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d016      	beq.n	800ee4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ee1c:	893b      	ldrh	r3, [r7, #8]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00e      	beq.n	800ee40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	88da      	ldrh	r2, [r3, #6]
 800ee26:	893b      	ldrh	r3, [r7, #8]
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	bf28      	it	cs
 800ee2c:	4613      	movcs	r3, r2
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ee32:	893b      	ldrh	r3, [r7, #8]
 800ee34:	461a      	mov	r2, r3
 800ee36:	68f9      	ldr	r1, [r7, #12]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 fa69 	bl	800f310 <USBD_CtlSendData>
 800ee3e:	e009      	b.n	800ee54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 f9e7 	bl	800f216 <USBD_CtlError>
 800ee48:	e004      	b.n	800ee54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 faba 	bl	800f3c4 <USBD_CtlSendStatus>
 800ee50:	e000      	b.n	800ee54 <USBD_GetDescriptor+0x320>
    return;
 800ee52:	bf00      	nop
  }
}
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop

0800ee5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	889b      	ldrh	r3, [r3, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d131      	bne.n	800eed2 <USBD_SetAddress+0x76>
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	88db      	ldrh	r3, [r3, #6]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d12d      	bne.n	800eed2 <USBD_SetAddress+0x76>
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	885b      	ldrh	r3, [r3, #2]
 800ee7a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee7c:	d829      	bhi.n	800eed2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	885b      	ldrh	r3, [r3, #2]
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b03      	cmp	r3, #3
 800ee94:	d104      	bne.n	800eea0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ee96:	6839      	ldr	r1, [r7, #0]
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 f9bc 	bl	800f216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee9e:	e01d      	b.n	800eedc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	7bfa      	ldrb	r2, [r7, #15]
 800eea4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f002 fc0b 	bl	80116c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fa86 	bl	800f3c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d004      	beq.n	800eec8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2202      	movs	r2, #2
 800eec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eec6:	e009      	b.n	800eedc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eed0:	e004      	b.n	800eedc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eed2:	6839      	ldr	r1, [r7, #0]
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 f99e 	bl	800f216 <USBD_CtlError>
  }
}
 800eeda:	bf00      	nop
 800eedc:	bf00      	nop
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	885b      	ldrh	r3, [r3, #2]
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	4b4e      	ldr	r3, [pc, #312]	@ (800f034 <USBD_SetConfig+0x150>)
 800eefa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eefc:	4b4d      	ldr	r3, [pc, #308]	@ (800f034 <USBD_SetConfig+0x150>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d905      	bls.n	800ef10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 f985 	bl	800f216 <USBD_CtlError>
    return USBD_FAIL;
 800ef0c:	2303      	movs	r3, #3
 800ef0e:	e08c      	b.n	800f02a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	2b02      	cmp	r3, #2
 800ef1a:	d002      	beq.n	800ef22 <USBD_SetConfig+0x3e>
 800ef1c:	2b03      	cmp	r3, #3
 800ef1e:	d029      	beq.n	800ef74 <USBD_SetConfig+0x90>
 800ef20:	e075      	b.n	800f00e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ef22:	4b44      	ldr	r3, [pc, #272]	@ (800f034 <USBD_SetConfig+0x150>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d020      	beq.n	800ef6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ef2a:	4b42      	ldr	r3, [pc, #264]	@ (800f034 <USBD_SetConfig+0x150>)
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ef34:	4b3f      	ldr	r3, [pc, #252]	@ (800f034 <USBD_SetConfig+0x150>)
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7fe ffb9 	bl	800deb2 <USBD_SetClassConfig>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d008      	beq.n	800ef5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ef4a:	6839      	ldr	r1, [r7, #0]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 f962 	bl	800f216 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2202      	movs	r2, #2
 800ef56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ef5a:	e065      	b.n	800f028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fa31 	bl	800f3c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2203      	movs	r2, #3
 800ef66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ef6a:	e05d      	b.n	800f028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fa29 	bl	800f3c4 <USBD_CtlSendStatus>
      break;
 800ef72:	e059      	b.n	800f028 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ef74:	4b2f      	ldr	r3, [pc, #188]	@ (800f034 <USBD_SetConfig+0x150>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d112      	bne.n	800efa2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2202      	movs	r2, #2
 800ef80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ef84:	4b2b      	ldr	r3, [pc, #172]	@ (800f034 <USBD_SetConfig+0x150>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	461a      	mov	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ef8e:	4b29      	ldr	r3, [pc, #164]	@ (800f034 <USBD_SetConfig+0x150>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	4619      	mov	r1, r3
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7fe ffa8 	bl	800deea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 fa12 	bl	800f3c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800efa0:	e042      	b.n	800f028 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800efa2:	4b24      	ldr	r3, [pc, #144]	@ (800f034 <USBD_SetConfig+0x150>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	461a      	mov	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	429a      	cmp	r2, r3
 800efae:	d02a      	beq.n	800f006 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	4619      	mov	r1, r3
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7fe ff96 	bl	800deea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800efbe:	4b1d      	ldr	r3, [pc, #116]	@ (800f034 <USBD_SetConfig+0x150>)
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800efc8:	4b1a      	ldr	r3, [pc, #104]	@ (800f034 <USBD_SetConfig+0x150>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	4619      	mov	r1, r3
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7fe ff6f 	bl	800deb2 <USBD_SetClassConfig>
 800efd4:	4603      	mov	r3, r0
 800efd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800efd8:	7bfb      	ldrb	r3, [r7, #15]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00f      	beq.n	800effe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800efde:	6839      	ldr	r1, [r7, #0]
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f918 	bl	800f216 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	b2db      	uxtb	r3, r3
 800efec:	4619      	mov	r1, r3
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7fe ff7b 	bl	800deea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2202      	movs	r2, #2
 800eff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800effc:	e014      	b.n	800f028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 f9e0 	bl	800f3c4 <USBD_CtlSendStatus>
      break;
 800f004:	e010      	b.n	800f028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 f9dc 	bl	800f3c4 <USBD_CtlSendStatus>
      break;
 800f00c:	e00c      	b.n	800f028 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f00e:	6839      	ldr	r1, [r7, #0]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 f900 	bl	800f216 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f016:	4b07      	ldr	r3, [pc, #28]	@ (800f034 <USBD_SetConfig+0x150>)
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	4619      	mov	r1, r3
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7fe ff64 	bl	800deea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f022:	2303      	movs	r3, #3
 800f024:	73fb      	strb	r3, [r7, #15]
      break;
 800f026:	bf00      	nop
  }

  return ret;
 800f028:	7bfb      	ldrb	r3, [r7, #15]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	24000dd8 	.word	0x24000dd8

0800f038 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	88db      	ldrh	r3, [r3, #6]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d004      	beq.n	800f054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f8e2 	bl	800f216 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f052:	e023      	b.n	800f09c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	dc02      	bgt.n	800f066 <USBD_GetConfig+0x2e>
 800f060:	2b00      	cmp	r3, #0
 800f062:	dc03      	bgt.n	800f06c <USBD_GetConfig+0x34>
 800f064:	e015      	b.n	800f092 <USBD_GetConfig+0x5a>
 800f066:	2b03      	cmp	r3, #3
 800f068:	d00b      	beq.n	800f082 <USBD_GetConfig+0x4a>
 800f06a:	e012      	b.n	800f092 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	3308      	adds	r3, #8
 800f076:	2201      	movs	r2, #1
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 f948 	bl	800f310 <USBD_CtlSendData>
        break;
 800f080:	e00c      	b.n	800f09c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	3304      	adds	r3, #4
 800f086:	2201      	movs	r2, #1
 800f088:	4619      	mov	r1, r3
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f940 	bl	800f310 <USBD_CtlSendData>
        break;
 800f090:	e004      	b.n	800f09c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f092:	6839      	ldr	r1, [r7, #0]
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f8be 	bl	800f216 <USBD_CtlError>
        break;
 800f09a:	bf00      	nop
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	3b01      	subs	r3, #1
 800f0b8:	2b02      	cmp	r3, #2
 800f0ba:	d81e      	bhi.n	800f0fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	88db      	ldrh	r3, [r3, #6]
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d004      	beq.n	800f0ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f0c4:	6839      	ldr	r1, [r7, #0]
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f000 f8a5 	bl	800f216 <USBD_CtlError>
        break;
 800f0cc:	e01a      	b.n	800f104 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d005      	beq.n	800f0ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	f043 0202 	orr.w	r2, r3, #2
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	330c      	adds	r3, #12
 800f0ee:	2202      	movs	r2, #2
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f90c 	bl	800f310 <USBD_CtlSendData>
      break;
 800f0f8:	e004      	b.n	800f104 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f0fa:	6839      	ldr	r1, [r7, #0]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f88a 	bl	800f216 <USBD_CtlError>
      break;
 800f102:	bf00      	nop
  }
}
 800f104:	bf00      	nop
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	885b      	ldrh	r3, [r3, #2]
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d107      	bne.n	800f12e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2201      	movs	r2, #1
 800f122:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f94c 	bl	800f3c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f12c:	e013      	b.n	800f156 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	885b      	ldrh	r3, [r3, #2]
 800f132:	2b02      	cmp	r3, #2
 800f134:	d10b      	bne.n	800f14e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	889b      	ldrh	r3, [r3, #4]
 800f13a:	0a1b      	lsrs	r3, r3, #8
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	b2da      	uxtb	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f93c 	bl	800f3c4 <USBD_CtlSendStatus>
}
 800f14c:	e003      	b.n	800f156 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f860 	bl	800f216 <USBD_CtlError>
}
 800f156:	bf00      	nop
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b082      	sub	sp, #8
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	3b01      	subs	r3, #1
 800f172:	2b02      	cmp	r3, #2
 800f174:	d80b      	bhi.n	800f18e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	885b      	ldrh	r3, [r3, #2]
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d10c      	bne.n	800f198 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 f91c 	bl	800f3c4 <USBD_CtlSendStatus>
      }
      break;
 800f18c:	e004      	b.n	800f198 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f18e:	6839      	ldr	r1, [r7, #0]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f840 	bl	800f216 <USBD_CtlError>
      break;
 800f196:	e000      	b.n	800f19a <USBD_ClrFeature+0x3c>
      break;
 800f198:	bf00      	nop
  }
}
 800f19a:	bf00      	nop
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b084      	sub	sp, #16
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
 800f1aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	781a      	ldrb	r2, [r3, #0]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	781a      	ldrb	r2, [r3, #0]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f7ff fa16 	bl	800e5fe <SWAPBYTE>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f7ff fa09 	bl	800e5fe <SWAPBYTE>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f7ff f9fc 	bl	800e5fe <SWAPBYTE>
 800f206:	4603      	mov	r3, r0
 800f208:	461a      	mov	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	80da      	strh	r2, [r3, #6]
}
 800f20e:	bf00      	nop
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b082      	sub	sp, #8
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
 800f21e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f220:	2180      	movs	r1, #128	@ 0x80
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f002 f9e6 	bl	80115f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f228:	2100      	movs	r1, #0
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f002 f9e2 	bl	80115f4 <USBD_LL_StallEP>
}
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f244:	2300      	movs	r3, #0
 800f246:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d042      	beq.n	800f2d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f252:	6938      	ldr	r0, [r7, #16]
 800f254:	f000 f842 	bl	800f2dc <USBD_GetLen>
 800f258:	4603      	mov	r3, r0
 800f25a:	3301      	adds	r3, #1
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f262:	d808      	bhi.n	800f276 <USBD_GetString+0x3e>
 800f264:	6938      	ldr	r0, [r7, #16]
 800f266:	f000 f839 	bl	800f2dc <USBD_GetLen>
 800f26a:	4603      	mov	r3, r0
 800f26c:	3301      	adds	r3, #1
 800f26e:	b29b      	uxth	r3, r3
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	b29a      	uxth	r2, r3
 800f274:	e001      	b.n	800f27a <USBD_GetString+0x42>
 800f276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f27e:	7dfb      	ldrb	r3, [r7, #23]
 800f280:	68ba      	ldr	r2, [r7, #8]
 800f282:	4413      	add	r3, r2
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	7812      	ldrb	r2, [r2, #0]
 800f288:	701a      	strb	r2, [r3, #0]
  idx++;
 800f28a:	7dfb      	ldrb	r3, [r7, #23]
 800f28c:	3301      	adds	r3, #1
 800f28e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f290:	7dfb      	ldrb	r3, [r7, #23]
 800f292:	68ba      	ldr	r2, [r7, #8]
 800f294:	4413      	add	r3, r2
 800f296:	2203      	movs	r2, #3
 800f298:	701a      	strb	r2, [r3, #0]
  idx++;
 800f29a:	7dfb      	ldrb	r3, [r7, #23]
 800f29c:	3301      	adds	r3, #1
 800f29e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f2a0:	e013      	b.n	800f2ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	7812      	ldrb	r2, [r2, #0]
 800f2ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	613b      	str	r3, [r7, #16]
    idx++;
 800f2b4:	7dfb      	ldrb	r3, [r7, #23]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	68ba      	ldr	r2, [r7, #8]
 800f2be:	4413      	add	r3, r2
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	701a      	strb	r2, [r3, #0]
    idx++;
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1e7      	bne.n	800f2a2 <USBD_GetString+0x6a>
 800f2d2:	e000      	b.n	800f2d6 <USBD_GetString+0x9e>
    return;
 800f2d4:	bf00      	nop
  }
}
 800f2d6:	3718      	adds	r7, #24
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f2ec:	e005      	b.n	800f2fa <USBD_GetLen+0x1e>
  {
    len++;
 800f2ee:	7bfb      	ldrb	r3, [r7, #15]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1f5      	bne.n	800f2ee <USBD_GetLen+0x12>
  }

  return len;
 800f302:	7bfb      	ldrb	r3, [r7, #15]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2202      	movs	r2, #2
 800f320:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	2100      	movs	r1, #0
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f002 f9e5 	bl	8011706 <USBD_LL_Transmit>

  return USBD_OK;
 800f33c:	2300      	movs	r3, #0
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b084      	sub	sp, #16
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	60f8      	str	r0, [r7, #12]
 800f34e:	60b9      	str	r1, [r7, #8]
 800f350:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	2100      	movs	r1, #0
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f002 f9d4 	bl	8011706 <USBD_LL_Transmit>

  return USBD_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2203      	movs	r2, #3
 800f378:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	2100      	movs	r1, #0
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f002 f9d8 	bl	8011748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	60b9      	str	r1, [r7, #8]
 800f3ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f002 f9c7 	bl	8011748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2204      	movs	r2, #4
 800f3d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2100      	movs	r1, #0
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f002 f993 	bl	8011706 <USBD_LL_Transmit>

  return USBD_OK;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3708      	adds	r7, #8
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b082      	sub	sp, #8
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2205      	movs	r2, #5
 800f3f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	2100      	movs	r1, #0
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f002 f9a1 	bl	8011748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f41e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f422:	2b84      	cmp	r3, #132	@ 0x84
 800f424:	d005      	beq.n	800f432 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f426:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	4413      	add	r3, r2
 800f42e:	3303      	adds	r3, #3
 800f430:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f432:	68fb      	ldr	r3, [r7, #12]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3714      	adds	r7, #20
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f446:	f3ef 8305 	mrs	r3, IPSR
 800f44a:	607b      	str	r3, [r7, #4]
  return(result);
 800f44c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f44e:	2b00      	cmp	r3, #0
 800f450:	bf14      	ite	ne
 800f452:	2301      	movne	r3, #1
 800f454:	2300      	moveq	r3, #0
 800f456:	b2db      	uxtb	r3, r3
}
 800f458:	4618      	mov	r0, r3
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f468:	f000 fb46 	bl	800faf8 <vTaskStartScheduler>
  
  return osOK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	bd80      	pop	{r7, pc}

0800f472 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f472:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f474:	b089      	sub	sp, #36	@ 0x24
 800f476:	af04      	add	r7, sp, #16
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d020      	beq.n	800f4c6 <osThreadCreate+0x54>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	699b      	ldr	r3, [r3, #24]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d01c      	beq.n	800f4c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685c      	ldr	r4, [r3, #4]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	691e      	ldr	r6, [r3, #16]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff ffb6 	bl	800f410 <makeFreeRtosPriority>
 800f4a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	695b      	ldr	r3, [r3, #20]
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f4ae:	9202      	str	r2, [sp, #8]
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	9100      	str	r1, [sp, #0]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	4632      	mov	r2, r6
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f000 f92e 	bl	800f71c <xTaskCreateStatic>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	60fb      	str	r3, [r7, #12]
 800f4c4:	e01c      	b.n	800f500 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685c      	ldr	r4, [r3, #4]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f4d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7ff ff98 	bl	800f410 <makeFreeRtosPriority>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	f107 030c 	add.w	r3, r7, #12
 800f4e6:	9301      	str	r3, [sp, #4]
 800f4e8:	9200      	str	r2, [sp, #0]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	4632      	mov	r2, r6
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 f973 	bl	800f7dc <xTaskCreate>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d001      	beq.n	800f500 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	e000      	b.n	800f502 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f500:	68fb      	ldr	r3, [r7, #12]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3714      	adds	r7, #20
 800f506:	46bd      	mov	sp, r7
 800f508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f50a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b084      	sub	sp, #16
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <osDelay+0x16>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	e000      	b.n	800f522 <osDelay+0x18>
 800f520:	2301      	movs	r3, #1
 800f522:	4618      	mov	r0, r3
 800f524:	f000 fab2 	bl	800fa8c <vTaskDelay>
  
  return osOK;
 800f528:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
	...

0800f534 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b086      	sub	sp, #24
 800f538:	af02      	add	r7, sp, #8
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f53e:	2300      	movs	r3, #0
 800f540:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800f546:	f7ff ff7b 	bl	800f440 <inHandlerMode>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d01c      	beq.n	800f58a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	f107 0208 	add.w	r2, r7, #8
 800f556:	f107 030c 	add.w	r3, r7, #12
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	4613      	mov	r3, r2
 800f55e:	2201      	movs	r2, #1
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 fe9b 	bl	801029c <xTaskGenericNotifyFromISR>
 800f566:	4603      	mov	r3, r0
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d002      	beq.n	800f572 <osSignalSet+0x3e>
      return 0x80000000;
 800f56c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f570:	e019      	b.n	800f5a6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d015      	beq.n	800f5a4 <osSignalSet+0x70>
 800f578:	4b0d      	ldr	r3, [pc, #52]	@ (800f5b0 <osSignalSet+0x7c>)
 800f57a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f57e:	601a      	str	r2, [r3, #0]
 800f580:	f3bf 8f4f 	dsb	sy
 800f584:	f3bf 8f6f 	isb	sy
 800f588:	e00c      	b.n	800f5a4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800f58a:	6839      	ldr	r1, [r7, #0]
 800f58c:	f107 0308 	add.w	r3, r7, #8
 800f590:	2201      	movs	r2, #1
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fdc0 	bl	8010118 <xTaskGenericNotify>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d002      	beq.n	800f5a4 <osSignalSet+0x70>
    return 0x80000000;
 800f59e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f5a2:	e000      	b.n	800f5a6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800f5a4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	e000ed04 	.word	0xe000ed04

0800f5b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f103 0208 	add.w	r2, r3, #8
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f103 0208 	add.w	r2, r3, #8
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f103 0208 	add.w	r2, r3, #8
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f602:	bf00      	nop
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f60e:	b480      	push	{r7}
 800f610:	b085      	sub	sp, #20
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	689a      	ldr	r2, [r3, #8]
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	683a      	ldr	r2, [r7, #0]
 800f632:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	683a      	ldr	r2, [r7, #0]
 800f638:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	1c5a      	adds	r2, r3, #1
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	601a      	str	r2, [r3, #0]
}
 800f64a:	bf00      	nop
 800f64c:	3714      	adds	r7, #20
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr

0800f656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f656:	b480      	push	{r7}
 800f658:	b085      	sub	sp, #20
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66c:	d103      	bne.n	800f676 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	691b      	ldr	r3, [r3, #16]
 800f672:	60fb      	str	r3, [r7, #12]
 800f674:	e00c      	b.n	800f690 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3308      	adds	r3, #8
 800f67a:	60fb      	str	r3, [r7, #12]
 800f67c:	e002      	b.n	800f684 <vListInsert+0x2e>
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	60fb      	str	r3, [r7, #12]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d2f6      	bcs.n	800f67e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	685a      	ldr	r2, [r3, #4]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	683a      	ldr	r2, [r7, #0]
 800f6aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	1c5a      	adds	r2, r3, #1
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	601a      	str	r2, [r3, #0]
}
 800f6bc:	bf00      	nop
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	691b      	ldr	r3, [r3, #16]
 800f6d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	6892      	ldr	r2, [r2, #8]
 800f6de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	6852      	ldr	r2, [r2, #4]
 800f6e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d103      	bne.n	800f6fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	689a      	ldr	r2, [r3, #8]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2200      	movs	r2, #0
 800f700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	1e5a      	subs	r2, r3, #1
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3714      	adds	r7, #20
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b08e      	sub	sp, #56	@ 0x38
 800f720:	af04      	add	r7, sp, #16
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
 800f728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10b      	bne.n	800f748 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f742:	bf00      	nop
 800f744:	bf00      	nop
 800f746:	e7fd      	b.n	800f744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10b      	bne.n	800f766 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	61fb      	str	r3, [r7, #28]
}
 800f760:	bf00      	nop
 800f762:	bf00      	nop
 800f764:	e7fd      	b.n	800f762 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f766:	23a0      	movs	r3, #160	@ 0xa0
 800f768:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	2ba0      	cmp	r3, #160	@ 0xa0
 800f76e:	d00b      	beq.n	800f788 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	61bb      	str	r3, [r7, #24]
}
 800f782:	bf00      	nop
 800f784:	bf00      	nop
 800f786:	e7fd      	b.n	800f784 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f788:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d01e      	beq.n	800f7ce <xTaskCreateStatic+0xb2>
 800f790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f792:	2b00      	cmp	r3, #0
 800f794:	d01b      	beq.n	800f7ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f798:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f79e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a2:	2202      	movs	r2, #2
 800f7a4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	9303      	str	r3, [sp, #12]
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ae:	9302      	str	r3, [sp, #8]
 800f7b0:	f107 0314 	add.w	r3, r7, #20
 800f7b4:	9301      	str	r3, [sp, #4]
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 f851 	bl	800f868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f7c8:	f000 f8f6 	bl	800f9b8 <prvAddNewTaskToReadyList>
 800f7cc:	e001      	b.n	800f7d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f7d2:	697b      	ldr	r3, [r7, #20]
	}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3728      	adds	r7, #40	@ 0x28
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08c      	sub	sp, #48	@ 0x30
 800f7e0:	af04      	add	r7, sp, #16
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	603b      	str	r3, [r7, #0]
 800f7e8:	4613      	mov	r3, r2
 800f7ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f7ec:	88fb      	ldrh	r3, [r7, #6]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f001 f8f3 	bl	80109dc <pvPortMalloc>
 800f7f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00e      	beq.n	800f81c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7fe:	20a0      	movs	r0, #160	@ 0xa0
 800f800:	f001 f8ec 	bl	80109dc <pvPortMalloc>
 800f804:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	697a      	ldr	r2, [r7, #20]
 800f810:	631a      	str	r2, [r3, #48]	@ 0x30
 800f812:	e005      	b.n	800f820 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f814:	6978      	ldr	r0, [r7, #20]
 800f816:	f001 f9af 	bl	8010b78 <vPortFree>
 800f81a:	e001      	b.n	800f820 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f81c:	2300      	movs	r3, #0
 800f81e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d017      	beq.n	800f856 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f82e:	88fa      	ldrh	r2, [r7, #6]
 800f830:	2300      	movs	r3, #0
 800f832:	9303      	str	r3, [sp, #12]
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	9302      	str	r3, [sp, #8]
 800f838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83a:	9301      	str	r3, [sp, #4]
 800f83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	68b9      	ldr	r1, [r7, #8]
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f000 f80f 	bl	800f868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f84a:	69f8      	ldr	r0, [r7, #28]
 800f84c:	f000 f8b4 	bl	800f9b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f850:	2301      	movs	r3, #1
 800f852:	61bb      	str	r3, [r7, #24]
 800f854:	e002      	b.n	800f85c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f856:	f04f 33ff 	mov.w	r3, #4294967295
 800f85a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f85c:	69bb      	ldr	r3, [r7, #24]
	}
 800f85e:	4618      	mov	r0, r3
 800f860:	3720      	adds	r7, #32
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b088      	sub	sp, #32
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
 800f874:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f878:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	461a      	mov	r2, r3
 800f880:	21a5      	movs	r1, #165	@ 0xa5
 800f882:	f001 ffd9 	bl	8011838 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f88a:	6879      	ldr	r1, [r7, #4]
 800f88c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f890:	440b      	add	r3, r1
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	4413      	add	r3, r2
 800f896:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f898:	69bb      	ldr	r3, [r7, #24]
 800f89a:	f023 0307 	bic.w	r3, r3, #7
 800f89e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	f003 0307 	and.w	r3, r3, #7
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00b      	beq.n	800f8c2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ae:	f383 8811 	msr	BASEPRI, r3
 800f8b2:	f3bf 8f6f 	isb	sy
 800f8b6:	f3bf 8f4f 	dsb	sy
 800f8ba:	617b      	str	r3, [r7, #20]
}
 800f8bc:	bf00      	nop
 800f8be:	bf00      	nop
 800f8c0:	e7fd      	b.n	800f8be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d01f      	beq.n	800f908 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	61fb      	str	r3, [r7, #28]
 800f8cc:	e012      	b.n	800f8f4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	7819      	ldrb	r1, [r3, #0]
 800f8d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	4413      	add	r3, r2
 800f8dc:	3334      	adds	r3, #52	@ 0x34
 800f8de:	460a      	mov	r2, r1
 800f8e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f8e2:	68ba      	ldr	r2, [r7, #8]
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d006      	beq.n	800f8fc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	61fb      	str	r3, [r7, #28]
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	2b0f      	cmp	r3, #15
 800f8f8:	d9e9      	bls.n	800f8ce <prvInitialiseNewTask+0x66>
 800f8fa:	e000      	b.n	800f8fe <prvInitialiseNewTask+0x96>
			{
				break;
 800f8fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f900:	2200      	movs	r2, #0
 800f902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f906:	e003      	b.n	800f910 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90a:	2200      	movs	r2, #0
 800f90c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f912:	2b06      	cmp	r3, #6
 800f914:	d901      	bls.n	800f91a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f916:	2306      	movs	r3, #6
 800f918:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f91e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f924:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f928:	2200      	movs	r2, #0
 800f92a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f92e:	3304      	adds	r3, #4
 800f930:	4618      	mov	r0, r3
 800f932:	f7ff fe5f 	bl	800f5f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f938:	3318      	adds	r3, #24
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff fe5a 	bl	800f5f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f944:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f948:	f1c3 0207 	rsb	r2, r3, #7
 800f94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f94e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f954:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f958:	2200      	movs	r2, #0
 800f95a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f960:	2200      	movs	r2, #0
 800f962:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f968:	334c      	adds	r3, #76	@ 0x4c
 800f96a:	224c      	movs	r2, #76	@ 0x4c
 800f96c:	2100      	movs	r1, #0
 800f96e:	4618      	mov	r0, r3
 800f970:	f001 ff62 	bl	8011838 <memset>
 800f974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f976:	4a0d      	ldr	r2, [pc, #52]	@ (800f9ac <prvInitialiseNewTask+0x144>)
 800f978:	651a      	str	r2, [r3, #80]	@ 0x50
 800f97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f97c:	4a0c      	ldr	r2, [pc, #48]	@ (800f9b0 <prvInitialiseNewTask+0x148>)
 800f97e:	655a      	str	r2, [r3, #84]	@ 0x54
 800f980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f982:	4a0c      	ldr	r2, [pc, #48]	@ (800f9b4 <prvInitialiseNewTask+0x14c>)
 800f984:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f986:	683a      	ldr	r2, [r7, #0]
 800f988:	68f9      	ldr	r1, [r7, #12]
 800f98a:	69b8      	ldr	r0, [r7, #24]
 800f98c:	f000 fdd2 	bl	8010534 <pxPortInitialiseStack>
 800f990:	4602      	mov	r2, r0
 800f992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f994:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9a2:	bf00      	nop
 800f9a4:	3720      	adds	r7, #32
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	24006710 	.word	0x24006710
 800f9b0:	24006778 	.word	0x24006778
 800f9b4:	240067e0 	.word	0x240067e0

0800f9b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f9c0:	f000 feea 	bl	8010798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f9c4:	4b2a      	ldr	r3, [pc, #168]	@ (800fa70 <prvAddNewTaskToReadyList+0xb8>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	4a29      	ldr	r2, [pc, #164]	@ (800fa70 <prvAddNewTaskToReadyList+0xb8>)
 800f9cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f9ce:	4b29      	ldr	r3, [pc, #164]	@ (800fa74 <prvAddNewTaskToReadyList+0xbc>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d109      	bne.n	800f9ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f9d6:	4a27      	ldr	r2, [pc, #156]	@ (800fa74 <prvAddNewTaskToReadyList+0xbc>)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f9dc:	4b24      	ldr	r3, [pc, #144]	@ (800fa70 <prvAddNewTaskToReadyList+0xb8>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d110      	bne.n	800fa06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f9e4:	f000 fad4 	bl	800ff90 <prvInitialiseTaskLists>
 800f9e8:	e00d      	b.n	800fa06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f9ea:	4b23      	ldr	r3, [pc, #140]	@ (800fa78 <prvAddNewTaskToReadyList+0xc0>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d109      	bne.n	800fa06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f9f2:	4b20      	ldr	r3, [pc, #128]	@ (800fa74 <prvAddNewTaskToReadyList+0xbc>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d802      	bhi.n	800fa06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa00:	4a1c      	ldr	r2, [pc, #112]	@ (800fa74 <prvAddNewTaskToReadyList+0xbc>)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa06:	4b1d      	ldr	r3, [pc, #116]	@ (800fa7c <prvAddNewTaskToReadyList+0xc4>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	4a1b      	ldr	r2, [pc, #108]	@ (800fa7c <prvAddNewTaskToReadyList+0xc4>)
 800fa0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa14:	2201      	movs	r2, #1
 800fa16:	409a      	lsls	r2, r3
 800fa18:	4b19      	ldr	r3, [pc, #100]	@ (800fa80 <prvAddNewTaskToReadyList+0xc8>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	4a18      	ldr	r2, [pc, #96]	@ (800fa80 <prvAddNewTaskToReadyList+0xc8>)
 800fa20:	6013      	str	r3, [r2, #0]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4a15      	ldr	r2, [pc, #84]	@ (800fa84 <prvAddNewTaskToReadyList+0xcc>)
 800fa30:	441a      	add	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3304      	adds	r3, #4
 800fa36:	4619      	mov	r1, r3
 800fa38:	4610      	mov	r0, r2
 800fa3a:	f7ff fde8 	bl	800f60e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa3e:	f000 fedd 	bl	80107fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa42:	4b0d      	ldr	r3, [pc, #52]	@ (800fa78 <prvAddNewTaskToReadyList+0xc0>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00e      	beq.n	800fa68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa4a:	4b0a      	ldr	r3, [pc, #40]	@ (800fa74 <prvAddNewTaskToReadyList+0xbc>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d207      	bcs.n	800fa68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fa58:	4b0b      	ldr	r3, [pc, #44]	@ (800fa88 <prvAddNewTaskToReadyList+0xd0>)
 800fa5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	f3bf 8f4f 	dsb	sy
 800fa64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa68:	bf00      	nop
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	24000edc 	.word	0x24000edc
 800fa74:	24000ddc 	.word	0x24000ddc
 800fa78:	24000ee8 	.word	0x24000ee8
 800fa7c:	24000ef8 	.word	0x24000ef8
 800fa80:	24000ee4 	.word	0x24000ee4
 800fa84:	24000de0 	.word	0x24000de0
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa94:	2300      	movs	r3, #0
 800fa96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d018      	beq.n	800fad0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa9e:	4b14      	ldr	r3, [pc, #80]	@ (800faf0 <vTaskDelay+0x64>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00b      	beq.n	800fabe <vTaskDelay+0x32>
	__asm volatile
 800faa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faaa:	f383 8811 	msr	BASEPRI, r3
 800faae:	f3bf 8f6f 	isb	sy
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	60bb      	str	r3, [r7, #8]
}
 800fab8:	bf00      	nop
 800faba:	bf00      	nop
 800fabc:	e7fd      	b.n	800faba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fabe:	f000 f885 	bl	800fbcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fac2:	2100      	movs	r1, #0
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fccf 	bl	8010468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800faca:	f000 f88d 	bl	800fbe8 <xTaskResumeAll>
 800face:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d107      	bne.n	800fae6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800fad6:	4b07      	ldr	r3, [pc, #28]	@ (800faf4 <vTaskDelay+0x68>)
 800fad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fadc:	601a      	str	r2, [r3, #0]
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fae6:	bf00      	nop
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	24000f04 	.word	0x24000f04
 800faf4:	e000ed04 	.word	0xe000ed04

0800faf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b08a      	sub	sp, #40	@ 0x28
 800fafc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fb02:	2300      	movs	r3, #0
 800fb04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fb06:	463a      	mov	r2, r7
 800fb08:	1d39      	adds	r1, r7, #4
 800fb0a:	f107 0308 	add.w	r3, r7, #8
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7f0 fd9c 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	9202      	str	r2, [sp, #8]
 800fb1c:	9301      	str	r3, [sp, #4]
 800fb1e:	2300      	movs	r3, #0
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	2300      	movs	r3, #0
 800fb24:	460a      	mov	r2, r1
 800fb26:	4921      	ldr	r1, [pc, #132]	@ (800fbac <vTaskStartScheduler+0xb4>)
 800fb28:	4821      	ldr	r0, [pc, #132]	@ (800fbb0 <vTaskStartScheduler+0xb8>)
 800fb2a:	f7ff fdf7 	bl	800f71c <xTaskCreateStatic>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	4a20      	ldr	r2, [pc, #128]	@ (800fbb4 <vTaskStartScheduler+0xbc>)
 800fb32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fb34:	4b1f      	ldr	r3, [pc, #124]	@ (800fbb4 <vTaskStartScheduler+0xbc>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d002      	beq.n	800fb42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	617b      	str	r3, [r7, #20]
 800fb40:	e001      	b.n	800fb46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fb42:	2300      	movs	r3, #0
 800fb44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d11b      	bne.n	800fb84 <vTaskStartScheduler+0x8c>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	613b      	str	r3, [r7, #16]
}
 800fb5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb60:	4b15      	ldr	r3, [pc, #84]	@ (800fbb8 <vTaskStartScheduler+0xc0>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	334c      	adds	r3, #76	@ 0x4c
 800fb66:	4a15      	ldr	r2, [pc, #84]	@ (800fbbc <vTaskStartScheduler+0xc4>)
 800fb68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb6a:	4b15      	ldr	r3, [pc, #84]	@ (800fbc0 <vTaskStartScheduler+0xc8>)
 800fb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb72:	4b14      	ldr	r3, [pc, #80]	@ (800fbc4 <vTaskStartScheduler+0xcc>)
 800fb74:	2201      	movs	r2, #1
 800fb76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb78:	4b13      	ldr	r3, [pc, #76]	@ (800fbc8 <vTaskStartScheduler+0xd0>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb7e:	f000 fd67 	bl	8010650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb82:	e00f      	b.n	800fba4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8a:	d10b      	bne.n	800fba4 <vTaskStartScheduler+0xac>
	__asm volatile
 800fb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb90:	f383 8811 	msr	BASEPRI, r3
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	60fb      	str	r3, [r7, #12]
}
 800fb9e:	bf00      	nop
 800fba0:	bf00      	nop
 800fba2:	e7fd      	b.n	800fba0 <vTaskStartScheduler+0xa8>
}
 800fba4:	bf00      	nop
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	08011b58 	.word	0x08011b58
 800fbb0:	0800ff61 	.word	0x0800ff61
 800fbb4:	24000f00 	.word	0x24000f00
 800fbb8:	24000ddc 	.word	0x24000ddc
 800fbbc:	24000108 	.word	0x24000108
 800fbc0:	24000efc 	.word	0x24000efc
 800fbc4:	24000ee8 	.word	0x24000ee8
 800fbc8:	24000ee0 	.word	0x24000ee0

0800fbcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fbcc:	b480      	push	{r7}
 800fbce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fbd0:	4b04      	ldr	r3, [pc, #16]	@ (800fbe4 <vTaskSuspendAll+0x18>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	4a03      	ldr	r2, [pc, #12]	@ (800fbe4 <vTaskSuspendAll+0x18>)
 800fbd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fbda:	bf00      	nop
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr
 800fbe4:	24000f04 	.word	0x24000f04

0800fbe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fbf6:	4b42      	ldr	r3, [pc, #264]	@ (800fd00 <xTaskResumeAll+0x118>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d10b      	bne.n	800fc16 <xTaskResumeAll+0x2e>
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	603b      	str	r3, [r7, #0]
}
 800fc10:	bf00      	nop
 800fc12:	bf00      	nop
 800fc14:	e7fd      	b.n	800fc12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fc16:	f000 fdbf 	bl	8010798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fc1a:	4b39      	ldr	r3, [pc, #228]	@ (800fd00 <xTaskResumeAll+0x118>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	4a37      	ldr	r2, [pc, #220]	@ (800fd00 <xTaskResumeAll+0x118>)
 800fc22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc24:	4b36      	ldr	r3, [pc, #216]	@ (800fd00 <xTaskResumeAll+0x118>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d161      	bne.n	800fcf0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc2c:	4b35      	ldr	r3, [pc, #212]	@ (800fd04 <xTaskResumeAll+0x11c>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d05d      	beq.n	800fcf0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc34:	e02e      	b.n	800fc94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc36:	4b34      	ldr	r3, [pc, #208]	@ (800fd08 <xTaskResumeAll+0x120>)
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	3318      	adds	r3, #24
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7ff fd40 	bl	800f6c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	3304      	adds	r3, #4
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff fd3b 	bl	800f6c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc56:	2201      	movs	r2, #1
 800fc58:	409a      	lsls	r2, r3
 800fc5a:	4b2c      	ldr	r3, [pc, #176]	@ (800fd0c <xTaskResumeAll+0x124>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	4a2a      	ldr	r2, [pc, #168]	@ (800fd0c <xTaskResumeAll+0x124>)
 800fc62:	6013      	str	r3, [r2, #0]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc68:	4613      	mov	r3, r2
 800fc6a:	009b      	lsls	r3, r3, #2
 800fc6c:	4413      	add	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	4a27      	ldr	r2, [pc, #156]	@ (800fd10 <xTaskResumeAll+0x128>)
 800fc72:	441a      	add	r2, r3
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3304      	adds	r3, #4
 800fc78:	4619      	mov	r1, r3
 800fc7a:	4610      	mov	r0, r2
 800fc7c:	f7ff fcc7 	bl	800f60e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc84:	4b23      	ldr	r3, [pc, #140]	@ (800fd14 <xTaskResumeAll+0x12c>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d302      	bcc.n	800fc94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fc8e:	4b22      	ldr	r3, [pc, #136]	@ (800fd18 <xTaskResumeAll+0x130>)
 800fc90:	2201      	movs	r2, #1
 800fc92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc94:	4b1c      	ldr	r3, [pc, #112]	@ (800fd08 <xTaskResumeAll+0x120>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d1cc      	bne.n	800fc36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fca2:	f000 fa19 	bl	80100d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fca6:	4b1d      	ldr	r3, [pc, #116]	@ (800fd1c <xTaskResumeAll+0x134>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d010      	beq.n	800fcd4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fcb2:	f000 f837 	bl	800fd24 <xTaskIncrementTick>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d002      	beq.n	800fcc2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fcbc:	4b16      	ldr	r3, [pc, #88]	@ (800fd18 <xTaskResumeAll+0x130>)
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1f1      	bne.n	800fcb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fcce:	4b13      	ldr	r3, [pc, #76]	@ (800fd1c <xTaskResumeAll+0x134>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fcd4:	4b10      	ldr	r3, [pc, #64]	@ (800fd18 <xTaskResumeAll+0x130>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d009      	beq.n	800fcf0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fce0:	4b0f      	ldr	r3, [pc, #60]	@ (800fd20 <xTaskResumeAll+0x138>)
 800fce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	f3bf 8f4f 	dsb	sy
 800fcec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fcf0:	f000 fd84 	bl	80107fc <vPortExitCritical>

	return xAlreadyYielded;
 800fcf4:	68bb      	ldr	r3, [r7, #8]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	24000f04 	.word	0x24000f04
 800fd04:	24000edc 	.word	0x24000edc
 800fd08:	24000e9c 	.word	0x24000e9c
 800fd0c:	24000ee4 	.word	0x24000ee4
 800fd10:	24000de0 	.word	0x24000de0
 800fd14:	24000ddc 	.word	0x24000ddc
 800fd18:	24000ef0 	.word	0x24000ef0
 800fd1c:	24000eec 	.word	0x24000eec
 800fd20:	e000ed04 	.word	0xe000ed04

0800fd24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd2e:	4b4f      	ldr	r3, [pc, #316]	@ (800fe6c <xTaskIncrementTick+0x148>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f040 808f 	bne.w	800fe56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd38:	4b4d      	ldr	r3, [pc, #308]	@ (800fe70 <xTaskIncrementTick+0x14c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd40:	4a4b      	ldr	r2, [pc, #300]	@ (800fe70 <xTaskIncrementTick+0x14c>)
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d121      	bne.n	800fd90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd4c:	4b49      	ldr	r3, [pc, #292]	@ (800fe74 <xTaskIncrementTick+0x150>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00b      	beq.n	800fd6e <xTaskIncrementTick+0x4a>
	__asm volatile
 800fd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	603b      	str	r3, [r7, #0]
}
 800fd68:	bf00      	nop
 800fd6a:	bf00      	nop
 800fd6c:	e7fd      	b.n	800fd6a <xTaskIncrementTick+0x46>
 800fd6e:	4b41      	ldr	r3, [pc, #260]	@ (800fe74 <xTaskIncrementTick+0x150>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	60fb      	str	r3, [r7, #12]
 800fd74:	4b40      	ldr	r3, [pc, #256]	@ (800fe78 <xTaskIncrementTick+0x154>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a3e      	ldr	r2, [pc, #248]	@ (800fe74 <xTaskIncrementTick+0x150>)
 800fd7a:	6013      	str	r3, [r2, #0]
 800fd7c:	4a3e      	ldr	r2, [pc, #248]	@ (800fe78 <xTaskIncrementTick+0x154>)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6013      	str	r3, [r2, #0]
 800fd82:	4b3e      	ldr	r3, [pc, #248]	@ (800fe7c <xTaskIncrementTick+0x158>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3301      	adds	r3, #1
 800fd88:	4a3c      	ldr	r2, [pc, #240]	@ (800fe7c <xTaskIncrementTick+0x158>)
 800fd8a:	6013      	str	r3, [r2, #0]
 800fd8c:	f000 f9a4 	bl	80100d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd90:	4b3b      	ldr	r3, [pc, #236]	@ (800fe80 <xTaskIncrementTick+0x15c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	693a      	ldr	r2, [r7, #16]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d348      	bcc.n	800fe2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd9a:	4b36      	ldr	r3, [pc, #216]	@ (800fe74 <xTaskIncrementTick+0x150>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d104      	bne.n	800fdae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fda4:	4b36      	ldr	r3, [pc, #216]	@ (800fe80 <xTaskIncrementTick+0x15c>)
 800fda6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdaa:	601a      	str	r2, [r3, #0]
					break;
 800fdac:	e03e      	b.n	800fe2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdae:	4b31      	ldr	r3, [pc, #196]	@ (800fe74 <xTaskIncrementTick+0x150>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d203      	bcs.n	800fdce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fdc6:	4a2e      	ldr	r2, [pc, #184]	@ (800fe80 <xTaskIncrementTick+0x15c>)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fdcc:	e02e      	b.n	800fe2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	3304      	adds	r3, #4
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7ff fc78 	bl	800f6c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d004      	beq.n	800fdea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	3318      	adds	r3, #24
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7ff fc6f 	bl	800f6c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdee:	2201      	movs	r2, #1
 800fdf0:	409a      	lsls	r2, r3
 800fdf2:	4b24      	ldr	r3, [pc, #144]	@ (800fe84 <xTaskIncrementTick+0x160>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	4a22      	ldr	r2, [pc, #136]	@ (800fe84 <xTaskIncrementTick+0x160>)
 800fdfa:	6013      	str	r3, [r2, #0]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe00:	4613      	mov	r3, r2
 800fe02:	009b      	lsls	r3, r3, #2
 800fe04:	4413      	add	r3, r2
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	4a1f      	ldr	r2, [pc, #124]	@ (800fe88 <xTaskIncrementTick+0x164>)
 800fe0a:	441a      	add	r2, r3
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	3304      	adds	r3, #4
 800fe10:	4619      	mov	r1, r3
 800fe12:	4610      	mov	r0, r2
 800fe14:	f7ff fbfb 	bl	800f60e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe1c:	4b1b      	ldr	r3, [pc, #108]	@ (800fe8c <xTaskIncrementTick+0x168>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d3b9      	bcc.n	800fd9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fe26:	2301      	movs	r3, #1
 800fe28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe2a:	e7b6      	b.n	800fd9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fe2c:	4b17      	ldr	r3, [pc, #92]	@ (800fe8c <xTaskIncrementTick+0x168>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe32:	4915      	ldr	r1, [pc, #84]	@ (800fe88 <xTaskIncrementTick+0x164>)
 800fe34:	4613      	mov	r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	440b      	add	r3, r1
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d901      	bls.n	800fe48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fe44:	2301      	movs	r3, #1
 800fe46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fe48:	4b11      	ldr	r3, [pc, #68]	@ (800fe90 <xTaskIncrementTick+0x16c>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d007      	beq.n	800fe60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fe50:	2301      	movs	r3, #1
 800fe52:	617b      	str	r3, [r7, #20]
 800fe54:	e004      	b.n	800fe60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fe56:	4b0f      	ldr	r3, [pc, #60]	@ (800fe94 <xTaskIncrementTick+0x170>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	4a0d      	ldr	r2, [pc, #52]	@ (800fe94 <xTaskIncrementTick+0x170>)
 800fe5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fe60:	697b      	ldr	r3, [r7, #20]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3718      	adds	r7, #24
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	24000f04 	.word	0x24000f04
 800fe70:	24000ee0 	.word	0x24000ee0
 800fe74:	24000e94 	.word	0x24000e94
 800fe78:	24000e98 	.word	0x24000e98
 800fe7c:	24000ef4 	.word	0x24000ef4
 800fe80:	24000efc 	.word	0x24000efc
 800fe84:	24000ee4 	.word	0x24000ee4
 800fe88:	24000de0 	.word	0x24000de0
 800fe8c:	24000ddc 	.word	0x24000ddc
 800fe90:	24000ef0 	.word	0x24000ef0
 800fe94:	24000eec 	.word	0x24000eec

0800fe98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b087      	sub	sp, #28
 800fe9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe9e:	4b2a      	ldr	r3, [pc, #168]	@ (800ff48 <vTaskSwitchContext+0xb0>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d003      	beq.n	800feae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fea6:	4b29      	ldr	r3, [pc, #164]	@ (800ff4c <vTaskSwitchContext+0xb4>)
 800fea8:	2201      	movs	r2, #1
 800feaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800feac:	e045      	b.n	800ff3a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800feae:	4b27      	ldr	r3, [pc, #156]	@ (800ff4c <vTaskSwitchContext+0xb4>)
 800feb0:	2200      	movs	r2, #0
 800feb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feb4:	4b26      	ldr	r3, [pc, #152]	@ (800ff50 <vTaskSwitchContext+0xb8>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	fab3 f383 	clz	r3, r3
 800fec0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fec2:	7afb      	ldrb	r3, [r7, #11]
 800fec4:	f1c3 031f 	rsb	r3, r3, #31
 800fec8:	617b      	str	r3, [r7, #20]
 800feca:	4922      	ldr	r1, [pc, #136]	@ (800ff54 <vTaskSwitchContext+0xbc>)
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	4613      	mov	r3, r2
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	4413      	add	r3, r2
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	440b      	add	r3, r1
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10b      	bne.n	800fef6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	607b      	str	r3, [r7, #4]
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	e7fd      	b.n	800fef2 <vTaskSwitchContext+0x5a>
 800fef6:	697a      	ldr	r2, [r7, #20]
 800fef8:	4613      	mov	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	4413      	add	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4a14      	ldr	r2, [pc, #80]	@ (800ff54 <vTaskSwitchContext+0xbc>)
 800ff02:	4413      	add	r3, r2
 800ff04:	613b      	str	r3, [r7, #16]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	605a      	str	r2, [r3, #4]
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	3308      	adds	r3, #8
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d104      	bne.n	800ff26 <vTaskSwitchContext+0x8e>
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	685a      	ldr	r2, [r3, #4]
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	605a      	str	r2, [r3, #4]
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ff58 <vTaskSwitchContext+0xc0>)
 800ff2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff30:	4b09      	ldr	r3, [pc, #36]	@ (800ff58 <vTaskSwitchContext+0xc0>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	334c      	adds	r3, #76	@ 0x4c
 800ff36:	4a09      	ldr	r2, [pc, #36]	@ (800ff5c <vTaskSwitchContext+0xc4>)
 800ff38:	6013      	str	r3, [r2, #0]
}
 800ff3a:	bf00      	nop
 800ff3c:	371c      	adds	r7, #28
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	24000f04 	.word	0x24000f04
 800ff4c:	24000ef0 	.word	0x24000ef0
 800ff50:	24000ee4 	.word	0x24000ee4
 800ff54:	24000de0 	.word	0x24000de0
 800ff58:	24000ddc 	.word	0x24000ddc
 800ff5c:	24000108 	.word	0x24000108

0800ff60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff68:	f000 f852 	bl	8010010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff6c:	4b06      	ldr	r3, [pc, #24]	@ (800ff88 <prvIdleTask+0x28>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d9f9      	bls.n	800ff68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff74:	4b05      	ldr	r3, [pc, #20]	@ (800ff8c <prvIdleTask+0x2c>)
 800ff76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff7a:	601a      	str	r2, [r3, #0]
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ff84:	e7f0      	b.n	800ff68 <prvIdleTask+0x8>
 800ff86:	bf00      	nop
 800ff88:	24000de0 	.word	0x24000de0
 800ff8c:	e000ed04 	.word	0xe000ed04

0800ff90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff96:	2300      	movs	r3, #0
 800ff98:	607b      	str	r3, [r7, #4]
 800ff9a:	e00c      	b.n	800ffb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4413      	add	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	4a12      	ldr	r2, [pc, #72]	@ (800fff0 <prvInitialiseTaskLists+0x60>)
 800ffa8:	4413      	add	r3, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7ff fb02 	bl	800f5b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	607b      	str	r3, [r7, #4]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2b06      	cmp	r3, #6
 800ffba:	d9ef      	bls.n	800ff9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffbc:	480d      	ldr	r0, [pc, #52]	@ (800fff4 <prvInitialiseTaskLists+0x64>)
 800ffbe:	f7ff faf9 	bl	800f5b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffc2:	480d      	ldr	r0, [pc, #52]	@ (800fff8 <prvInitialiseTaskLists+0x68>)
 800ffc4:	f7ff faf6 	bl	800f5b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ffc8:	480c      	ldr	r0, [pc, #48]	@ (800fffc <prvInitialiseTaskLists+0x6c>)
 800ffca:	f7ff faf3 	bl	800f5b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ffce:	480c      	ldr	r0, [pc, #48]	@ (8010000 <prvInitialiseTaskLists+0x70>)
 800ffd0:	f7ff faf0 	bl	800f5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ffd4:	480b      	ldr	r0, [pc, #44]	@ (8010004 <prvInitialiseTaskLists+0x74>)
 800ffd6:	f7ff faed 	bl	800f5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ffda:	4b0b      	ldr	r3, [pc, #44]	@ (8010008 <prvInitialiseTaskLists+0x78>)
 800ffdc:	4a05      	ldr	r2, [pc, #20]	@ (800fff4 <prvInitialiseTaskLists+0x64>)
 800ffde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ffe0:	4b0a      	ldr	r3, [pc, #40]	@ (801000c <prvInitialiseTaskLists+0x7c>)
 800ffe2:	4a05      	ldr	r2, [pc, #20]	@ (800fff8 <prvInitialiseTaskLists+0x68>)
 800ffe4:	601a      	str	r2, [r3, #0]
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	24000de0 	.word	0x24000de0
 800fff4:	24000e6c 	.word	0x24000e6c
 800fff8:	24000e80 	.word	0x24000e80
 800fffc:	24000e9c 	.word	0x24000e9c
 8010000:	24000eb0 	.word	0x24000eb0
 8010004:	24000ec8 	.word	0x24000ec8
 8010008:	24000e94 	.word	0x24000e94
 801000c:	24000e98 	.word	0x24000e98

08010010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010016:	e019      	b.n	801004c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010018:	f000 fbbe 	bl	8010798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801001c:	4b10      	ldr	r3, [pc, #64]	@ (8010060 <prvCheckTasksWaitingTermination+0x50>)
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	3304      	adds	r3, #4
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff fb4d 	bl	800f6c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801002e:	4b0d      	ldr	r3, [pc, #52]	@ (8010064 <prvCheckTasksWaitingTermination+0x54>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3b01      	subs	r3, #1
 8010034:	4a0b      	ldr	r2, [pc, #44]	@ (8010064 <prvCheckTasksWaitingTermination+0x54>)
 8010036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010038:	4b0b      	ldr	r3, [pc, #44]	@ (8010068 <prvCheckTasksWaitingTermination+0x58>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3b01      	subs	r3, #1
 801003e:	4a0a      	ldr	r2, [pc, #40]	@ (8010068 <prvCheckTasksWaitingTermination+0x58>)
 8010040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010042:	f000 fbdb 	bl	80107fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f810 	bl	801006c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801004c:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <prvCheckTasksWaitingTermination+0x58>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1e1      	bne.n	8010018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010054:	bf00      	nop
 8010056:	bf00      	nop
 8010058:	3708      	adds	r7, #8
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	24000eb0 	.word	0x24000eb0
 8010064:	24000edc 	.word	0x24000edc
 8010068:	24000ec4 	.word	0x24000ec4

0801006c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	334c      	adds	r3, #76	@ 0x4c
 8010078:	4618      	mov	r0, r3
 801007a:	f001 fbe5 	bl	8011848 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010084:	2b00      	cmp	r3, #0
 8010086:	d108      	bne.n	801009a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801008c:	4618      	mov	r0, r3
 801008e:	f000 fd73 	bl	8010b78 <vPortFree>
				vPortFree( pxTCB );
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 fd70 	bl	8010b78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010098:	e019      	b.n	80100ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d103      	bne.n	80100ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fd67 	bl	8010b78 <vPortFree>
	}
 80100aa:	e010      	b.n	80100ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80100b2:	2b02      	cmp	r3, #2
 80100b4:	d00b      	beq.n	80100ce <prvDeleteTCB+0x62>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	60fb      	str	r3, [r7, #12]
}
 80100c8:	bf00      	nop
 80100ca:	bf00      	nop
 80100cc:	e7fd      	b.n	80100ca <prvDeleteTCB+0x5e>
	}
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
	...

080100d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100de:	4b0c      	ldr	r3, [pc, #48]	@ (8010110 <prvResetNextTaskUnblockTime+0x38>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d104      	bne.n	80100f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80100e8:	4b0a      	ldr	r3, [pc, #40]	@ (8010114 <prvResetNextTaskUnblockTime+0x3c>)
 80100ea:	f04f 32ff 	mov.w	r2, #4294967295
 80100ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80100f0:	e008      	b.n	8010104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100f2:	4b07      	ldr	r3, [pc, #28]	@ (8010110 <prvResetNextTaskUnblockTime+0x38>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	4a04      	ldr	r2, [pc, #16]	@ (8010114 <prvResetNextTaskUnblockTime+0x3c>)
 8010102:	6013      	str	r3, [r2, #0]
}
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr
 8010110:	24000e94 	.word	0x24000e94
 8010114:	24000efc 	.word	0x24000efc

08010118 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010118:	b580      	push	{r7, lr}
 801011a:	b08a      	sub	sp, #40	@ 0x28
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	603b      	str	r3, [r7, #0]
 8010124:	4613      	mov	r3, r2
 8010126:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010128:	2301      	movs	r3, #1
 801012a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d10b      	bne.n	801014a <xTaskGenericNotify+0x32>
	__asm volatile
 8010132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	61bb      	str	r3, [r7, #24]
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop
 8010148:	e7fd      	b.n	8010146 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801014e:	f000 fb23 	bl	8010798 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d004      	beq.n	8010162 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010158:	6a3b      	ldr	r3, [r7, #32]
 801015a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010162:	6a3b      	ldr	r3, [r7, #32]
 8010164:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8010168:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801016a:	6a3b      	ldr	r3, [r7, #32]
 801016c:	2202      	movs	r2, #2
 801016e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8010172:	79fb      	ldrb	r3, [r7, #7]
 8010174:	2b04      	cmp	r3, #4
 8010176:	d82e      	bhi.n	80101d6 <xTaskGenericNotify+0xbe>
 8010178:	a201      	add	r2, pc, #4	@ (adr r2, 8010180 <xTaskGenericNotify+0x68>)
 801017a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017e:	bf00      	nop
 8010180:	080101fb 	.word	0x080101fb
 8010184:	08010195 	.word	0x08010195
 8010188:	080101a7 	.word	0x080101a7
 801018c:	080101b7 	.word	0x080101b7
 8010190:	080101c1 	.word	0x080101c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010194:	6a3b      	ldr	r3, [r7, #32]
 8010196:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	431a      	orrs	r2, r3
 801019e:	6a3b      	ldr	r3, [r7, #32]
 80101a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80101a4:	e02c      	b.n	8010200 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80101b4:	e024      	b.n	8010200 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80101be:	e01f      	b.n	8010200 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80101c0:	7ffb      	ldrb	r3, [r7, #31]
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d004      	beq.n	80101d0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80101c6:	6a3b      	ldr	r3, [r7, #32]
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80101ce:	e017      	b.n	8010200 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80101d0:	2300      	movs	r3, #0
 80101d2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80101d4:	e014      	b.n	8010200 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80101d6:	6a3b      	ldr	r3, [r7, #32]
 80101d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80101dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e0:	d00d      	beq.n	80101fe <xTaskGenericNotify+0xe6>
	__asm volatile
 80101e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101e6:	f383 8811 	msr	BASEPRI, r3
 80101ea:	f3bf 8f6f 	isb	sy
 80101ee:	f3bf 8f4f 	dsb	sy
 80101f2:	617b      	str	r3, [r7, #20]
}
 80101f4:	bf00      	nop
 80101f6:	bf00      	nop
 80101f8:	e7fd      	b.n	80101f6 <xTaskGenericNotify+0xde>
					break;
 80101fa:	bf00      	nop
 80101fc:	e000      	b.n	8010200 <xTaskGenericNotify+0xe8>

					break;
 80101fe:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010200:	7ffb      	ldrb	r3, [r7, #31]
 8010202:	2b01      	cmp	r3, #1
 8010204:	d13a      	bne.n	801027c <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010206:	6a3b      	ldr	r3, [r7, #32]
 8010208:	3304      	adds	r3, #4
 801020a:	4618      	mov	r0, r3
 801020c:	f7ff fa5c 	bl	800f6c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010214:	2201      	movs	r2, #1
 8010216:	409a      	lsls	r2, r3
 8010218:	4b1c      	ldr	r3, [pc, #112]	@ (801028c <xTaskGenericNotify+0x174>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4313      	orrs	r3, r2
 801021e:	4a1b      	ldr	r2, [pc, #108]	@ (801028c <xTaskGenericNotify+0x174>)
 8010220:	6013      	str	r3, [r2, #0]
 8010222:	6a3b      	ldr	r3, [r7, #32]
 8010224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010226:	4613      	mov	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4413      	add	r3, r2
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	4a18      	ldr	r2, [pc, #96]	@ (8010290 <xTaskGenericNotify+0x178>)
 8010230:	441a      	add	r2, r3
 8010232:	6a3b      	ldr	r3, [r7, #32]
 8010234:	3304      	adds	r3, #4
 8010236:	4619      	mov	r1, r3
 8010238:	4610      	mov	r0, r2
 801023a:	f7ff f9e8 	bl	800f60e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801023e:	6a3b      	ldr	r3, [r7, #32]
 8010240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010242:	2b00      	cmp	r3, #0
 8010244:	d00b      	beq.n	801025e <xTaskGenericNotify+0x146>
	__asm volatile
 8010246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801024a:	f383 8811 	msr	BASEPRI, r3
 801024e:	f3bf 8f6f 	isb	sy
 8010252:	f3bf 8f4f 	dsb	sy
 8010256:	613b      	str	r3, [r7, #16]
}
 8010258:	bf00      	nop
 801025a:	bf00      	nop
 801025c:	e7fd      	b.n	801025a <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010262:	4b0c      	ldr	r3, [pc, #48]	@ (8010294 <xTaskGenericNotify+0x17c>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010268:	429a      	cmp	r2, r3
 801026a:	d907      	bls.n	801027c <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801026c:	4b0a      	ldr	r3, [pc, #40]	@ (8010298 <xTaskGenericNotify+0x180>)
 801026e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010272:	601a      	str	r2, [r3, #0]
 8010274:	f3bf 8f4f 	dsb	sy
 8010278:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801027c:	f000 fabe 	bl	80107fc <vPortExitCritical>

		return xReturn;
 8010280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010282:	4618      	mov	r0, r3
 8010284:	3728      	adds	r7, #40	@ 0x28
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	24000ee4 	.word	0x24000ee4
 8010290:	24000de0 	.word	0x24000de0
 8010294:	24000ddc 	.word	0x24000ddc
 8010298:	e000ed04 	.word	0xe000ed04

0801029c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801029c:	b580      	push	{r7, lr}
 801029e:	b08e      	sub	sp, #56	@ 0x38
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	603b      	str	r3, [r7, #0]
 80102a8:	4613      	mov	r3, r2
 80102aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80102ac:	2301      	movs	r3, #1
 80102ae:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10b      	bne.n	80102ce <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80102b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80102c8:	bf00      	nop
 80102ca:	bf00      	nop
 80102cc:	e7fd      	b.n	80102ca <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102ce:	f000 fb43 	bl	8010958 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80102d6:	f3ef 8211 	mrs	r2, BASEPRI
 80102da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	623a      	str	r2, [r7, #32]
 80102ec:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80102ee:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d004      	beq.n	8010302 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80102f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010304:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8010308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801030c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030e:	2202      	movs	r2, #2
 8010310:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8010314:	79fb      	ldrb	r3, [r7, #7]
 8010316:	2b04      	cmp	r3, #4
 8010318:	d82e      	bhi.n	8010378 <xTaskGenericNotifyFromISR+0xdc>
 801031a:	a201      	add	r2, pc, #4	@ (adr r2, 8010320 <xTaskGenericNotifyFromISR+0x84>)
 801031c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010320:	0801039d 	.word	0x0801039d
 8010324:	08010335 	.word	0x08010335
 8010328:	08010347 	.word	0x08010347
 801032c:	08010357 	.word	0x08010357
 8010330:	08010361 	.word	0x08010361
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010336:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	431a      	orrs	r2, r3
 801033e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010340:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8010344:	e02d      	b.n	80103a2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801034c:	1c5a      	adds	r2, r3, #1
 801034e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010350:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8010354:	e025      	b.n	80103a2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010358:	68ba      	ldr	r2, [r7, #8]
 801035a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801035e:	e020      	b.n	80103a2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010360:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010364:	2b02      	cmp	r3, #2
 8010366:	d004      	beq.n	8010372 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010370:	e017      	b.n	80103a2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8010372:	2300      	movs	r3, #0
 8010374:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8010376:	e014      	b.n	80103a2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801037e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010382:	d00d      	beq.n	80103a0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8010384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010388:	f383 8811 	msr	BASEPRI, r3
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	61bb      	str	r3, [r7, #24]
}
 8010396:	bf00      	nop
 8010398:	bf00      	nop
 801039a:	e7fd      	b.n	8010398 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801039c:	bf00      	nop
 801039e:	e000      	b.n	80103a2 <xTaskGenericNotifyFromISR+0x106>
					break;
 80103a0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80103a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d146      	bne.n	8010438 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80103aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00b      	beq.n	80103ca <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80103b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b6:	f383 8811 	msr	BASEPRI, r3
 80103ba:	f3bf 8f6f 	isb	sy
 80103be:	f3bf 8f4f 	dsb	sy
 80103c2:	617b      	str	r3, [r7, #20]
}
 80103c4:	bf00      	nop
 80103c6:	bf00      	nop
 80103c8:	e7fd      	b.n	80103c6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103ca:	4b21      	ldr	r3, [pc, #132]	@ (8010450 <xTaskGenericNotifyFromISR+0x1b4>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d11c      	bne.n	801040c <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d4:	3304      	adds	r3, #4
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7ff f976 	bl	800f6c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80103dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103e0:	2201      	movs	r2, #1
 80103e2:	409a      	lsls	r2, r3
 80103e4:	4b1b      	ldr	r3, [pc, #108]	@ (8010454 <xTaskGenericNotifyFromISR+0x1b8>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4313      	orrs	r3, r2
 80103ea:	4a1a      	ldr	r2, [pc, #104]	@ (8010454 <xTaskGenericNotifyFromISR+0x1b8>)
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103f2:	4613      	mov	r3, r2
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	4413      	add	r3, r2
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	4a17      	ldr	r2, [pc, #92]	@ (8010458 <xTaskGenericNotifyFromISR+0x1bc>)
 80103fc:	441a      	add	r2, r3
 80103fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010400:	3304      	adds	r3, #4
 8010402:	4619      	mov	r1, r3
 8010404:	4610      	mov	r0, r2
 8010406:	f7ff f902 	bl	800f60e <vListInsertEnd>
 801040a:	e005      	b.n	8010418 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801040c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801040e:	3318      	adds	r3, #24
 8010410:	4619      	mov	r1, r3
 8010412:	4812      	ldr	r0, [pc, #72]	@ (801045c <xTaskGenericNotifyFromISR+0x1c0>)
 8010414:	f7ff f8fb 	bl	800f60e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801041a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801041c:	4b10      	ldr	r3, [pc, #64]	@ (8010460 <xTaskGenericNotifyFromISR+0x1c4>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010422:	429a      	cmp	r2, r3
 8010424:	d908      	bls.n	8010438 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010428:	2b00      	cmp	r3, #0
 801042a:	d002      	beq.n	8010432 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801042c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801042e:	2201      	movs	r2, #1
 8010430:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010432:	4b0c      	ldr	r3, [pc, #48]	@ (8010464 <xTaskGenericNotifyFromISR+0x1c8>)
 8010434:	2201      	movs	r2, #1
 8010436:	601a      	str	r2, [r3, #0]
 8010438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010442:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8010446:	4618      	mov	r0, r3
 8010448:	3738      	adds	r7, #56	@ 0x38
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	24000f04 	.word	0x24000f04
 8010454:	24000ee4 	.word	0x24000ee4
 8010458:	24000de0 	.word	0x24000de0
 801045c:	24000e9c 	.word	0x24000e9c
 8010460:	24000ddc 	.word	0x24000ddc
 8010464:	24000ef0 	.word	0x24000ef0

08010468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b084      	sub	sp, #16
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010472:	4b29      	ldr	r3, [pc, #164]	@ (8010518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010478:	4b28      	ldr	r3, [pc, #160]	@ (801051c <prvAddCurrentTaskToDelayedList+0xb4>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	3304      	adds	r3, #4
 801047e:	4618      	mov	r0, r3
 8010480:	f7ff f922 	bl	800f6c8 <uxListRemove>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d10b      	bne.n	80104a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801048a:	4b24      	ldr	r3, [pc, #144]	@ (801051c <prvAddCurrentTaskToDelayedList+0xb4>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010490:	2201      	movs	r2, #1
 8010492:	fa02 f303 	lsl.w	r3, r2, r3
 8010496:	43da      	mvns	r2, r3
 8010498:	4b21      	ldr	r3, [pc, #132]	@ (8010520 <prvAddCurrentTaskToDelayedList+0xb8>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4013      	ands	r3, r2
 801049e:	4a20      	ldr	r2, [pc, #128]	@ (8010520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80104a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a8:	d10a      	bne.n	80104c0 <prvAddCurrentTaskToDelayedList+0x58>
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d007      	beq.n	80104c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104b0:	4b1a      	ldr	r3, [pc, #104]	@ (801051c <prvAddCurrentTaskToDelayedList+0xb4>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	3304      	adds	r3, #4
 80104b6:	4619      	mov	r1, r3
 80104b8:	481a      	ldr	r0, [pc, #104]	@ (8010524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80104ba:	f7ff f8a8 	bl	800f60e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80104be:	e026      	b.n	801050e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80104c0:	68fa      	ldr	r2, [r7, #12]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4413      	add	r3, r2
 80104c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80104c8:	4b14      	ldr	r3, [pc, #80]	@ (801051c <prvAddCurrentTaskToDelayedList+0xb4>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68ba      	ldr	r2, [r7, #8]
 80104ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d209      	bcs.n	80104ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104d8:	4b13      	ldr	r3, [pc, #76]	@ (8010528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	4b0f      	ldr	r3, [pc, #60]	@ (801051c <prvAddCurrentTaskToDelayedList+0xb4>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	3304      	adds	r3, #4
 80104e2:	4619      	mov	r1, r3
 80104e4:	4610      	mov	r0, r2
 80104e6:	f7ff f8b6 	bl	800f656 <vListInsert>
}
 80104ea:	e010      	b.n	801050e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104ec:	4b0f      	ldr	r3, [pc, #60]	@ (801052c <prvAddCurrentTaskToDelayedList+0xc4>)
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	4b0a      	ldr	r3, [pc, #40]	@ (801051c <prvAddCurrentTaskToDelayedList+0xb4>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3304      	adds	r3, #4
 80104f6:	4619      	mov	r1, r3
 80104f8:	4610      	mov	r0, r2
 80104fa:	f7ff f8ac 	bl	800f656 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80104fe:	4b0c      	ldr	r3, [pc, #48]	@ (8010530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	68ba      	ldr	r2, [r7, #8]
 8010504:	429a      	cmp	r2, r3
 8010506:	d202      	bcs.n	801050e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010508:	4a09      	ldr	r2, [pc, #36]	@ (8010530 <prvAddCurrentTaskToDelayedList+0xc8>)
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	6013      	str	r3, [r2, #0]
}
 801050e:	bf00      	nop
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	24000ee0 	.word	0x24000ee0
 801051c:	24000ddc 	.word	0x24000ddc
 8010520:	24000ee4 	.word	0x24000ee4
 8010524:	24000ec8 	.word	0x24000ec8
 8010528:	24000e98 	.word	0x24000e98
 801052c:	24000e94 	.word	0x24000e94
 8010530:	24000efc 	.word	0x24000efc

08010534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010534:	b480      	push	{r7}
 8010536:	b085      	sub	sp, #20
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	3b04      	subs	r3, #4
 8010544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801054c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	3b04      	subs	r3, #4
 8010552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	f023 0201 	bic.w	r2, r3, #1
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3b04      	subs	r3, #4
 8010562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010564:	4a0c      	ldr	r2, [pc, #48]	@ (8010598 <pxPortInitialiseStack+0x64>)
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	3b14      	subs	r3, #20
 801056e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	3b04      	subs	r3, #4
 801057a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f06f 0202 	mvn.w	r2, #2
 8010582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3b20      	subs	r3, #32
 8010588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801058a:	68fb      	ldr	r3, [r7, #12]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3714      	adds	r7, #20
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr
 8010598:	0801059d 	.word	0x0801059d

0801059c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80105a6:	4b13      	ldr	r3, [pc, #76]	@ (80105f4 <prvTaskExitError+0x58>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ae:	d00b      	beq.n	80105c8 <prvTaskExitError+0x2c>
	__asm volatile
 80105b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105b4:	f383 8811 	msr	BASEPRI, r3
 80105b8:	f3bf 8f6f 	isb	sy
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	60fb      	str	r3, [r7, #12]
}
 80105c2:	bf00      	nop
 80105c4:	bf00      	nop
 80105c6:	e7fd      	b.n	80105c4 <prvTaskExitError+0x28>
	__asm volatile
 80105c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	60bb      	str	r3, [r7, #8]
}
 80105da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80105dc:	bf00      	nop
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d0fc      	beq.n	80105de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80105e4:	bf00      	nop
 80105e6:	bf00      	nop
 80105e8:	3714      	adds	r7, #20
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	2400009c 	.word	0x2400009c
	...

08010600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010600:	4b07      	ldr	r3, [pc, #28]	@ (8010620 <pxCurrentTCBConst2>)
 8010602:	6819      	ldr	r1, [r3, #0]
 8010604:	6808      	ldr	r0, [r1, #0]
 8010606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060a:	f380 8809 	msr	PSP, r0
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f04f 0000 	mov.w	r0, #0
 8010616:	f380 8811 	msr	BASEPRI, r0
 801061a:	4770      	bx	lr
 801061c:	f3af 8000 	nop.w

08010620 <pxCurrentTCBConst2>:
 8010620:	24000ddc 	.word	0x24000ddc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010624:	bf00      	nop
 8010626:	bf00      	nop

08010628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010628:	4808      	ldr	r0, [pc, #32]	@ (801064c <prvPortStartFirstTask+0x24>)
 801062a:	6800      	ldr	r0, [r0, #0]
 801062c:	6800      	ldr	r0, [r0, #0]
 801062e:	f380 8808 	msr	MSP, r0
 8010632:	f04f 0000 	mov.w	r0, #0
 8010636:	f380 8814 	msr	CONTROL, r0
 801063a:	b662      	cpsie	i
 801063c:	b661      	cpsie	f
 801063e:	f3bf 8f4f 	dsb	sy
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	df00      	svc	0
 8010648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801064a:	bf00      	nop
 801064c:	e000ed08 	.word	0xe000ed08

08010650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010656:	4b47      	ldr	r3, [pc, #284]	@ (8010774 <xPortStartScheduler+0x124>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a47      	ldr	r2, [pc, #284]	@ (8010778 <xPortStartScheduler+0x128>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d10b      	bne.n	8010678 <xPortStartScheduler+0x28>
	__asm volatile
 8010660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010664:	f383 8811 	msr	BASEPRI, r3
 8010668:	f3bf 8f6f 	isb	sy
 801066c:	f3bf 8f4f 	dsb	sy
 8010670:	60fb      	str	r3, [r7, #12]
}
 8010672:	bf00      	nop
 8010674:	bf00      	nop
 8010676:	e7fd      	b.n	8010674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010678:	4b3e      	ldr	r3, [pc, #248]	@ (8010774 <xPortStartScheduler+0x124>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a3f      	ldr	r2, [pc, #252]	@ (801077c <xPortStartScheduler+0x12c>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d10b      	bne.n	801069a <xPortStartScheduler+0x4a>
	__asm volatile
 8010682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010686:	f383 8811 	msr	BASEPRI, r3
 801068a:	f3bf 8f6f 	isb	sy
 801068e:	f3bf 8f4f 	dsb	sy
 8010692:	613b      	str	r3, [r7, #16]
}
 8010694:	bf00      	nop
 8010696:	bf00      	nop
 8010698:	e7fd      	b.n	8010696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801069a:	4b39      	ldr	r3, [pc, #228]	@ (8010780 <xPortStartScheduler+0x130>)
 801069c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	22ff      	movs	r2, #255	@ 0xff
 80106aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80106b4:	78fb      	ldrb	r3, [r7, #3]
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80106bc:	b2da      	uxtb	r2, r3
 80106be:	4b31      	ldr	r3, [pc, #196]	@ (8010784 <xPortStartScheduler+0x134>)
 80106c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80106c2:	4b31      	ldr	r3, [pc, #196]	@ (8010788 <xPortStartScheduler+0x138>)
 80106c4:	2207      	movs	r2, #7
 80106c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106c8:	e009      	b.n	80106de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80106ca:	4b2f      	ldr	r3, [pc, #188]	@ (8010788 <xPortStartScheduler+0x138>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	3b01      	subs	r3, #1
 80106d0:	4a2d      	ldr	r2, [pc, #180]	@ (8010788 <xPortStartScheduler+0x138>)
 80106d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80106d4:	78fb      	ldrb	r3, [r7, #3]
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	005b      	lsls	r3, r3, #1
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106de:	78fb      	ldrb	r3, [r7, #3]
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106e6:	2b80      	cmp	r3, #128	@ 0x80
 80106e8:	d0ef      	beq.n	80106ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80106ea:	4b27      	ldr	r3, [pc, #156]	@ (8010788 <xPortStartScheduler+0x138>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	f1c3 0307 	rsb	r3, r3, #7
 80106f2:	2b04      	cmp	r3, #4
 80106f4:	d00b      	beq.n	801070e <xPortStartScheduler+0xbe>
	__asm volatile
 80106f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106fa:	f383 8811 	msr	BASEPRI, r3
 80106fe:	f3bf 8f6f 	isb	sy
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	60bb      	str	r3, [r7, #8]
}
 8010708:	bf00      	nop
 801070a:	bf00      	nop
 801070c:	e7fd      	b.n	801070a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801070e:	4b1e      	ldr	r3, [pc, #120]	@ (8010788 <xPortStartScheduler+0x138>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	021b      	lsls	r3, r3, #8
 8010714:	4a1c      	ldr	r2, [pc, #112]	@ (8010788 <xPortStartScheduler+0x138>)
 8010716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010718:	4b1b      	ldr	r3, [pc, #108]	@ (8010788 <xPortStartScheduler+0x138>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010720:	4a19      	ldr	r2, [pc, #100]	@ (8010788 <xPortStartScheduler+0x138>)
 8010722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	b2da      	uxtb	r2, r3
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801072c:	4b17      	ldr	r3, [pc, #92]	@ (801078c <xPortStartScheduler+0x13c>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a16      	ldr	r2, [pc, #88]	@ (801078c <xPortStartScheduler+0x13c>)
 8010732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010738:	4b14      	ldr	r3, [pc, #80]	@ (801078c <xPortStartScheduler+0x13c>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4a13      	ldr	r2, [pc, #76]	@ (801078c <xPortStartScheduler+0x13c>)
 801073e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010744:	f000 f8da 	bl	80108fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010748:	4b11      	ldr	r3, [pc, #68]	@ (8010790 <xPortStartScheduler+0x140>)
 801074a:	2200      	movs	r2, #0
 801074c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801074e:	f000 f8f9 	bl	8010944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010752:	4b10      	ldr	r3, [pc, #64]	@ (8010794 <xPortStartScheduler+0x144>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a0f      	ldr	r2, [pc, #60]	@ (8010794 <xPortStartScheduler+0x144>)
 8010758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801075c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801075e:	f7ff ff63 	bl	8010628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010762:	f7ff fb99 	bl	800fe98 <vTaskSwitchContext>
	prvTaskExitError();
 8010766:	f7ff ff19 	bl	801059c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3718      	adds	r7, #24
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	e000ed00 	.word	0xe000ed00
 8010778:	410fc271 	.word	0x410fc271
 801077c:	410fc270 	.word	0x410fc270
 8010780:	e000e400 	.word	0xe000e400
 8010784:	24000f08 	.word	0x24000f08
 8010788:	24000f0c 	.word	0x24000f0c
 801078c:	e000ed20 	.word	0xe000ed20
 8010790:	2400009c 	.word	0x2400009c
 8010794:	e000ef34 	.word	0xe000ef34

08010798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
	__asm volatile
 801079e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a2:	f383 8811 	msr	BASEPRI, r3
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	607b      	str	r3, [r7, #4]
}
 80107b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80107b2:	4b10      	ldr	r3, [pc, #64]	@ (80107f4 <vPortEnterCritical+0x5c>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	3301      	adds	r3, #1
 80107b8:	4a0e      	ldr	r2, [pc, #56]	@ (80107f4 <vPortEnterCritical+0x5c>)
 80107ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80107bc:	4b0d      	ldr	r3, [pc, #52]	@ (80107f4 <vPortEnterCritical+0x5c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d110      	bne.n	80107e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80107c4:	4b0c      	ldr	r3, [pc, #48]	@ (80107f8 <vPortEnterCritical+0x60>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00b      	beq.n	80107e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80107ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	603b      	str	r3, [r7, #0]
}
 80107e0:	bf00      	nop
 80107e2:	bf00      	nop
 80107e4:	e7fd      	b.n	80107e2 <vPortEnterCritical+0x4a>
	}
}
 80107e6:	bf00      	nop
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop
 80107f4:	2400009c 	.word	0x2400009c
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80107fc:	b480      	push	{r7}
 80107fe:	b083      	sub	sp, #12
 8010800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010802:	4b12      	ldr	r3, [pc, #72]	@ (801084c <vPortExitCritical+0x50>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d10b      	bne.n	8010822 <vPortExitCritical+0x26>
	__asm volatile
 801080a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801080e:	f383 8811 	msr	BASEPRI, r3
 8010812:	f3bf 8f6f 	isb	sy
 8010816:	f3bf 8f4f 	dsb	sy
 801081a:	607b      	str	r3, [r7, #4]
}
 801081c:	bf00      	nop
 801081e:	bf00      	nop
 8010820:	e7fd      	b.n	801081e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010822:	4b0a      	ldr	r3, [pc, #40]	@ (801084c <vPortExitCritical+0x50>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3b01      	subs	r3, #1
 8010828:	4a08      	ldr	r2, [pc, #32]	@ (801084c <vPortExitCritical+0x50>)
 801082a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801082c:	4b07      	ldr	r3, [pc, #28]	@ (801084c <vPortExitCritical+0x50>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d105      	bne.n	8010840 <vPortExitCritical+0x44>
 8010834:	2300      	movs	r3, #0
 8010836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	f383 8811 	msr	BASEPRI, r3
}
 801083e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010840:	bf00      	nop
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr
 801084c:	2400009c 	.word	0x2400009c

08010850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010850:	f3ef 8009 	mrs	r0, PSP
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	4b15      	ldr	r3, [pc, #84]	@ (80108b0 <pxCurrentTCBConst>)
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	f01e 0f10 	tst.w	lr, #16
 8010860:	bf08      	it	eq
 8010862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086a:	6010      	str	r0, [r2, #0]
 801086c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010874:	f380 8811 	msr	BASEPRI, r0
 8010878:	f3bf 8f4f 	dsb	sy
 801087c:	f3bf 8f6f 	isb	sy
 8010880:	f7ff fb0a 	bl	800fe98 <vTaskSwitchContext>
 8010884:	f04f 0000 	mov.w	r0, #0
 8010888:	f380 8811 	msr	BASEPRI, r0
 801088c:	bc09      	pop	{r0, r3}
 801088e:	6819      	ldr	r1, [r3, #0]
 8010890:	6808      	ldr	r0, [r1, #0]
 8010892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010896:	f01e 0f10 	tst.w	lr, #16
 801089a:	bf08      	it	eq
 801089c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80108a0:	f380 8809 	msr	PSP, r0
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	f3af 8000 	nop.w

080108b0 <pxCurrentTCBConst>:
 80108b0:	24000ddc 	.word	0x24000ddc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80108b4:	bf00      	nop
 80108b6:	bf00      	nop

080108b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	607b      	str	r3, [r7, #4]
}
 80108d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80108d2:	f7ff fa27 	bl	800fd24 <xTaskIncrementTick>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d003      	beq.n	80108e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80108dc:	4b06      	ldr	r3, [pc, #24]	@ (80108f8 <SysTick_Handler+0x40>)
 80108de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	2300      	movs	r3, #0
 80108e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	f383 8811 	msr	BASEPRI, r3
}
 80108ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80108f0:	bf00      	nop
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	e000ed04 	.word	0xe000ed04

080108fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80108fc:	b480      	push	{r7}
 80108fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010900:	4b0b      	ldr	r3, [pc, #44]	@ (8010930 <vPortSetupTimerInterrupt+0x34>)
 8010902:	2200      	movs	r2, #0
 8010904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010906:	4b0b      	ldr	r3, [pc, #44]	@ (8010934 <vPortSetupTimerInterrupt+0x38>)
 8010908:	2200      	movs	r2, #0
 801090a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801090c:	4b0a      	ldr	r3, [pc, #40]	@ (8010938 <vPortSetupTimerInterrupt+0x3c>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a0a      	ldr	r2, [pc, #40]	@ (801093c <vPortSetupTimerInterrupt+0x40>)
 8010912:	fba2 2303 	umull	r2, r3, r2, r3
 8010916:	099b      	lsrs	r3, r3, #6
 8010918:	4a09      	ldr	r2, [pc, #36]	@ (8010940 <vPortSetupTimerInterrupt+0x44>)
 801091a:	3b01      	subs	r3, #1
 801091c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801091e:	4b04      	ldr	r3, [pc, #16]	@ (8010930 <vPortSetupTimerInterrupt+0x34>)
 8010920:	2207      	movs	r2, #7
 8010922:	601a      	str	r2, [r3, #0]
}
 8010924:	bf00      	nop
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	e000e010 	.word	0xe000e010
 8010934:	e000e018 	.word	0xe000e018
 8010938:	24000000 	.word	0x24000000
 801093c:	10624dd3 	.word	0x10624dd3
 8010940:	e000e014 	.word	0xe000e014

08010944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010954 <vPortEnableVFP+0x10>
 8010948:	6801      	ldr	r1, [r0, #0]
 801094a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801094e:	6001      	str	r1, [r0, #0]
 8010950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010952:	bf00      	nop
 8010954:	e000ed88 	.word	0xe000ed88

08010958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010958:	b480      	push	{r7}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801095e:	f3ef 8305 	mrs	r3, IPSR
 8010962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2b0f      	cmp	r3, #15
 8010968:	d915      	bls.n	8010996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801096a:	4a18      	ldr	r2, [pc, #96]	@ (80109cc <vPortValidateInterruptPriority+0x74>)
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	4413      	add	r3, r2
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010974:	4b16      	ldr	r3, [pc, #88]	@ (80109d0 <vPortValidateInterruptPriority+0x78>)
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	7afa      	ldrb	r2, [r7, #11]
 801097a:	429a      	cmp	r2, r3
 801097c:	d20b      	bcs.n	8010996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	607b      	str	r3, [r7, #4]
}
 8010990:	bf00      	nop
 8010992:	bf00      	nop
 8010994:	e7fd      	b.n	8010992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010996:	4b0f      	ldr	r3, [pc, #60]	@ (80109d4 <vPortValidateInterruptPriority+0x7c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801099e:	4b0e      	ldr	r3, [pc, #56]	@ (80109d8 <vPortValidateInterruptPriority+0x80>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d90b      	bls.n	80109be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80109a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109aa:	f383 8811 	msr	BASEPRI, r3
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	603b      	str	r3, [r7, #0]
}
 80109b8:	bf00      	nop
 80109ba:	bf00      	nop
 80109bc:	e7fd      	b.n	80109ba <vPortValidateInterruptPriority+0x62>
	}
 80109be:	bf00      	nop
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	e000e3f0 	.word	0xe000e3f0
 80109d0:	24000f08 	.word	0x24000f08
 80109d4:	e000ed0c 	.word	0xe000ed0c
 80109d8:	24000f0c 	.word	0x24000f0c

080109dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b08a      	sub	sp, #40	@ 0x28
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80109e4:	2300      	movs	r3, #0
 80109e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80109e8:	f7ff f8f0 	bl	800fbcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80109ec:	4b5c      	ldr	r3, [pc, #368]	@ (8010b60 <pvPortMalloc+0x184>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80109f4:	f000 f924 	bl	8010c40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80109f8:	4b5a      	ldr	r3, [pc, #360]	@ (8010b64 <pvPortMalloc+0x188>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4013      	ands	r3, r2
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f040 8095 	bne.w	8010b30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d01e      	beq.n	8010a4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010a0c:	2208      	movs	r2, #8
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4413      	add	r3, r2
 8010a12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f003 0307 	and.w	r3, r3, #7
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d015      	beq.n	8010a4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f023 0307 	bic.w	r3, r3, #7
 8010a24:	3308      	adds	r3, #8
 8010a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f003 0307 	and.w	r3, r3, #7
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d00b      	beq.n	8010a4a <pvPortMalloc+0x6e>
	__asm volatile
 8010a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	617b      	str	r3, [r7, #20]
}
 8010a44:	bf00      	nop
 8010a46:	bf00      	nop
 8010a48:	e7fd      	b.n	8010a46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d06f      	beq.n	8010b30 <pvPortMalloc+0x154>
 8010a50:	4b45      	ldr	r3, [pc, #276]	@ (8010b68 <pvPortMalloc+0x18c>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d86a      	bhi.n	8010b30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010a5a:	4b44      	ldr	r3, [pc, #272]	@ (8010b6c <pvPortMalloc+0x190>)
 8010a5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010a5e:	4b43      	ldr	r3, [pc, #268]	@ (8010b6c <pvPortMalloc+0x190>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a64:	e004      	b.n	8010a70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d903      	bls.n	8010a82 <pvPortMalloc+0xa6>
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d1f1      	bne.n	8010a66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a82:	4b37      	ldr	r3, [pc, #220]	@ (8010b60 <pvPortMalloc+0x184>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d051      	beq.n	8010b30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2208      	movs	r2, #8
 8010a92:	4413      	add	r3, r2
 8010a94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	6a3b      	ldr	r3, [r7, #32]
 8010a9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa0:	685a      	ldr	r2, [r3, #4]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	1ad2      	subs	r2, r2, r3
 8010aa6:	2308      	movs	r3, #8
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d920      	bls.n	8010af0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	f003 0307 	and.w	r3, r3, #7
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00b      	beq.n	8010ad8 <pvPortMalloc+0xfc>
	__asm volatile
 8010ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac4:	f383 8811 	msr	BASEPRI, r3
 8010ac8:	f3bf 8f6f 	isb	sy
 8010acc:	f3bf 8f4f 	dsb	sy
 8010ad0:	613b      	str	r3, [r7, #16]
}
 8010ad2:	bf00      	nop
 8010ad4:	bf00      	nop
 8010ad6:	e7fd      	b.n	8010ad4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ada:	685a      	ldr	r2, [r3, #4]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	1ad2      	subs	r2, r2, r3
 8010ae0:	69bb      	ldr	r3, [r7, #24]
 8010ae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae6:	687a      	ldr	r2, [r7, #4]
 8010ae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010aea:	69b8      	ldr	r0, [r7, #24]
 8010aec:	f000 f90a 	bl	8010d04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010af0:	4b1d      	ldr	r3, [pc, #116]	@ (8010b68 <pvPortMalloc+0x18c>)
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	4a1b      	ldr	r2, [pc, #108]	@ (8010b68 <pvPortMalloc+0x18c>)
 8010afc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010afe:	4b1a      	ldr	r3, [pc, #104]	@ (8010b68 <pvPortMalloc+0x18c>)
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	4b1b      	ldr	r3, [pc, #108]	@ (8010b70 <pvPortMalloc+0x194>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d203      	bcs.n	8010b12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010b0a:	4b17      	ldr	r3, [pc, #92]	@ (8010b68 <pvPortMalloc+0x18c>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a18      	ldr	r2, [pc, #96]	@ (8010b70 <pvPortMalloc+0x194>)
 8010b10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b14:	685a      	ldr	r2, [r3, #4]
 8010b16:	4b13      	ldr	r3, [pc, #76]	@ (8010b64 <pvPortMalloc+0x188>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	431a      	orrs	r2, r3
 8010b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b22:	2200      	movs	r2, #0
 8010b24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010b26:	4b13      	ldr	r3, [pc, #76]	@ (8010b74 <pvPortMalloc+0x198>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	4a11      	ldr	r2, [pc, #68]	@ (8010b74 <pvPortMalloc+0x198>)
 8010b2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010b30:	f7ff f85a 	bl	800fbe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	f003 0307 	and.w	r3, r3, #7
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d00b      	beq.n	8010b56 <pvPortMalloc+0x17a>
	__asm volatile
 8010b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b42:	f383 8811 	msr	BASEPRI, r3
 8010b46:	f3bf 8f6f 	isb	sy
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	60fb      	str	r3, [r7, #12]
}
 8010b50:	bf00      	nop
 8010b52:	bf00      	nop
 8010b54:	e7fd      	b.n	8010b52 <pvPortMalloc+0x176>
	return pvReturn;
 8010b56:	69fb      	ldr	r3, [r7, #28]
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3728      	adds	r7, #40	@ 0x28
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	24004b18 	.word	0x24004b18
 8010b64:	24004b2c 	.word	0x24004b2c
 8010b68:	24004b1c 	.word	0x24004b1c
 8010b6c:	24004b10 	.word	0x24004b10
 8010b70:	24004b20 	.word	0x24004b20
 8010b74:	24004b24 	.word	0x24004b24

08010b78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d04f      	beq.n	8010c2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010b8a:	2308      	movs	r3, #8
 8010b8c:	425b      	negs	r3, r3
 8010b8e:	697a      	ldr	r2, [r7, #20]
 8010b90:	4413      	add	r3, r2
 8010b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	685a      	ldr	r2, [r3, #4]
 8010b9c:	4b25      	ldr	r3, [pc, #148]	@ (8010c34 <vPortFree+0xbc>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4013      	ands	r3, r2
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d10b      	bne.n	8010bbe <vPortFree+0x46>
	__asm volatile
 8010ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010baa:	f383 8811 	msr	BASEPRI, r3
 8010bae:	f3bf 8f6f 	isb	sy
 8010bb2:	f3bf 8f4f 	dsb	sy
 8010bb6:	60fb      	str	r3, [r7, #12]
}
 8010bb8:	bf00      	nop
 8010bba:	bf00      	nop
 8010bbc:	e7fd      	b.n	8010bba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00b      	beq.n	8010bde <vPortFree+0x66>
	__asm volatile
 8010bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bca:	f383 8811 	msr	BASEPRI, r3
 8010bce:	f3bf 8f6f 	isb	sy
 8010bd2:	f3bf 8f4f 	dsb	sy
 8010bd6:	60bb      	str	r3, [r7, #8]
}
 8010bd8:	bf00      	nop
 8010bda:	bf00      	nop
 8010bdc:	e7fd      	b.n	8010bda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	685a      	ldr	r2, [r3, #4]
 8010be2:	4b14      	ldr	r3, [pc, #80]	@ (8010c34 <vPortFree+0xbc>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4013      	ands	r3, r2
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d01e      	beq.n	8010c2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d11a      	bne.n	8010c2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	685a      	ldr	r2, [r3, #4]
 8010bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8010c34 <vPortFree+0xbc>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	43db      	mvns	r3, r3
 8010bfe:	401a      	ands	r2, r3
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010c04:	f7fe ffe2 	bl	800fbcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	685a      	ldr	r2, [r3, #4]
 8010c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8010c38 <vPortFree+0xc0>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4413      	add	r3, r2
 8010c12:	4a09      	ldr	r2, [pc, #36]	@ (8010c38 <vPortFree+0xc0>)
 8010c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010c16:	6938      	ldr	r0, [r7, #16]
 8010c18:	f000 f874 	bl	8010d04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010c1c:	4b07      	ldr	r3, [pc, #28]	@ (8010c3c <vPortFree+0xc4>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	3301      	adds	r3, #1
 8010c22:	4a06      	ldr	r2, [pc, #24]	@ (8010c3c <vPortFree+0xc4>)
 8010c24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010c26:	f7fe ffdf 	bl	800fbe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010c2a:	bf00      	nop
 8010c2c:	3718      	adds	r7, #24
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	24004b2c 	.word	0x24004b2c
 8010c38:	24004b1c 	.word	0x24004b1c
 8010c3c:	24004b28 	.word	0x24004b28

08010c40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010c46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010c4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010c4c:	4b27      	ldr	r3, [pc, #156]	@ (8010cec <prvHeapInit+0xac>)
 8010c4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f003 0307 	and.w	r3, r3, #7
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d00c      	beq.n	8010c74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	3307      	adds	r3, #7
 8010c5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f023 0307 	bic.w	r3, r3, #7
 8010c66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c68:	68ba      	ldr	r2, [r7, #8]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8010cec <prvHeapInit+0xac>)
 8010c70:	4413      	add	r3, r2
 8010c72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c78:	4a1d      	ldr	r2, [pc, #116]	@ (8010cf0 <prvHeapInit+0xb0>)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8010cf0 <prvHeapInit+0xb0>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	4413      	add	r3, r2
 8010c8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c8c:	2208      	movs	r2, #8
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	1a9b      	subs	r3, r3, r2
 8010c92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f023 0307 	bic.w	r3, r3, #7
 8010c9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	4a15      	ldr	r2, [pc, #84]	@ (8010cf4 <prvHeapInit+0xb4>)
 8010ca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010ca2:	4b14      	ldr	r3, [pc, #80]	@ (8010cf4 <prvHeapInit+0xb4>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010caa:	4b12      	ldr	r3, [pc, #72]	@ (8010cf4 <prvHeapInit+0xb4>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	1ad2      	subs	r2, r2, r3
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8010cf4 <prvHeapInit+0xb4>)
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8010cf8 <prvHeapInit+0xb8>)
 8010cce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	4a09      	ldr	r2, [pc, #36]	@ (8010cfc <prvHeapInit+0xbc>)
 8010cd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010cd8:	4b09      	ldr	r3, [pc, #36]	@ (8010d00 <prvHeapInit+0xc0>)
 8010cda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010cde:	601a      	str	r2, [r3, #0]
}
 8010ce0:	bf00      	nop
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	24000f10 	.word	0x24000f10
 8010cf0:	24004b10 	.word	0x24004b10
 8010cf4:	24004b18 	.word	0x24004b18
 8010cf8:	24004b20 	.word	0x24004b20
 8010cfc:	24004b1c 	.word	0x24004b1c
 8010d00:	24004b2c 	.word	0x24004b2c

08010d04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d0c:	4b28      	ldr	r3, [pc, #160]	@ (8010db0 <prvInsertBlockIntoFreeList+0xac>)
 8010d0e:	60fb      	str	r3, [r7, #12]
 8010d10:	e002      	b.n	8010d18 <prvInsertBlockIntoFreeList+0x14>
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	60fb      	str	r3, [r7, #12]
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d8f7      	bhi.n	8010d12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	68ba      	ldr	r2, [r7, #8]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d108      	bne.n	8010d46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	685a      	ldr	r2, [r3, #4]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	441a      	add	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	68ba      	ldr	r2, [r7, #8]
 8010d50:	441a      	add	r2, r3
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d118      	bne.n	8010d8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	4b15      	ldr	r3, [pc, #84]	@ (8010db4 <prvInsertBlockIntoFreeList+0xb0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d00d      	beq.n	8010d82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	685a      	ldr	r2, [r3, #4]
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	441a      	add	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	601a      	str	r2, [r3, #0]
 8010d80:	e008      	b.n	8010d94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d82:	4b0c      	ldr	r3, [pc, #48]	@ (8010db4 <prvInsertBlockIntoFreeList+0xb0>)
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	e003      	b.n	8010d94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010d94:	68fa      	ldr	r2, [r7, #12]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d002      	beq.n	8010da2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010da2:	bf00      	nop
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	24004b10 	.word	0x24004b10
 8010db4:	24004b18 	.word	0x24004b18

08010db8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	4913      	ldr	r1, [pc, #76]	@ (8010e0c <MX_USB_DEVICE_Init+0x54>)
 8010dc0:	4813      	ldr	r0, [pc, #76]	@ (8010e10 <MX_USB_DEVICE_Init+0x58>)
 8010dc2:	f7fc fff9 	bl	800ddb8 <USBD_Init>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d001      	beq.n	8010dd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010dcc:	f7ef fdfc 	bl	80009c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010dd0:	4910      	ldr	r1, [pc, #64]	@ (8010e14 <MX_USB_DEVICE_Init+0x5c>)
 8010dd2:	480f      	ldr	r0, [pc, #60]	@ (8010e10 <MX_USB_DEVICE_Init+0x58>)
 8010dd4:	f7fd f820 	bl	800de18 <USBD_RegisterClass>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010dde:	f7ef fdf3 	bl	80009c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010de2:	490d      	ldr	r1, [pc, #52]	@ (8010e18 <MX_USB_DEVICE_Init+0x60>)
 8010de4:	480a      	ldr	r0, [pc, #40]	@ (8010e10 <MX_USB_DEVICE_Init+0x58>)
 8010de6:	f7fc ff17 	bl	800dc18 <USBD_CDC_RegisterInterface>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d001      	beq.n	8010df4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010df0:	f7ef fdea 	bl	80009c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010df4:	4806      	ldr	r0, [pc, #24]	@ (8010e10 <MX_USB_DEVICE_Init+0x58>)
 8010df6:	f7fd f845 	bl	800de84 <USBD_Start>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d001      	beq.n	8010e04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010e00:	f7ef fde2 	bl	80009c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010e04:	f7f5 f81e 	bl	8005e44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010e08:	bf00      	nop
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	240000b4 	.word	0x240000b4
 8010e10:	24004b30 	.word	0x24004b30
 8010e14:	2400001c 	.word	0x2400001c
 8010e18:	240000a0 	.word	0x240000a0

08010e1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010e20:	2200      	movs	r2, #0
 8010e22:	4905      	ldr	r1, [pc, #20]	@ (8010e38 <CDC_Init_FS+0x1c>)
 8010e24:	4805      	ldr	r0, [pc, #20]	@ (8010e3c <CDC_Init_FS+0x20>)
 8010e26:	f7fc ff11 	bl	800dc4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010e2a:	4905      	ldr	r1, [pc, #20]	@ (8010e40 <CDC_Init_FS+0x24>)
 8010e2c:	4803      	ldr	r0, [pc, #12]	@ (8010e3c <CDC_Init_FS+0x20>)
 8010e2e:	f7fc ff2f 	bl	800dc90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010e32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	2400560c 	.word	0x2400560c
 8010e3c:	24004b30 	.word	0x24004b30
 8010e40:	24004e0c 	.word	0x24004e0c

08010e44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010e44:	b480      	push	{r7}
 8010e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010e48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	6039      	str	r1, [r7, #0]
 8010e5e:	71fb      	strb	r3, [r7, #7]
 8010e60:	4613      	mov	r3, r2
 8010e62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010e64:	79fb      	ldrb	r3, [r7, #7]
 8010e66:	2b23      	cmp	r3, #35	@ 0x23
 8010e68:	d84a      	bhi.n	8010f00 <CDC_Control_FS+0xac>
 8010e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8010e70 <CDC_Control_FS+0x1c>)
 8010e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e70:	08010f01 	.word	0x08010f01
 8010e74:	08010f01 	.word	0x08010f01
 8010e78:	08010f01 	.word	0x08010f01
 8010e7c:	08010f01 	.word	0x08010f01
 8010e80:	08010f01 	.word	0x08010f01
 8010e84:	08010f01 	.word	0x08010f01
 8010e88:	08010f01 	.word	0x08010f01
 8010e8c:	08010f01 	.word	0x08010f01
 8010e90:	08010f01 	.word	0x08010f01
 8010e94:	08010f01 	.word	0x08010f01
 8010e98:	08010f01 	.word	0x08010f01
 8010e9c:	08010f01 	.word	0x08010f01
 8010ea0:	08010f01 	.word	0x08010f01
 8010ea4:	08010f01 	.word	0x08010f01
 8010ea8:	08010f01 	.word	0x08010f01
 8010eac:	08010f01 	.word	0x08010f01
 8010eb0:	08010f01 	.word	0x08010f01
 8010eb4:	08010f01 	.word	0x08010f01
 8010eb8:	08010f01 	.word	0x08010f01
 8010ebc:	08010f01 	.word	0x08010f01
 8010ec0:	08010f01 	.word	0x08010f01
 8010ec4:	08010f01 	.word	0x08010f01
 8010ec8:	08010f01 	.word	0x08010f01
 8010ecc:	08010f01 	.word	0x08010f01
 8010ed0:	08010f01 	.word	0x08010f01
 8010ed4:	08010f01 	.word	0x08010f01
 8010ed8:	08010f01 	.word	0x08010f01
 8010edc:	08010f01 	.word	0x08010f01
 8010ee0:	08010f01 	.word	0x08010f01
 8010ee4:	08010f01 	.word	0x08010f01
 8010ee8:	08010f01 	.word	0x08010f01
 8010eec:	08010f01 	.word	0x08010f01
 8010ef0:	08010f01 	.word	0x08010f01
 8010ef4:	08010f01 	.word	0x08010f01
 8010ef8:	08010f01 	.word	0x08010f01
 8010efc:	08010f01 	.word	0x08010f01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010f00:	bf00      	nop
  }

  return (USBD_OK);
 8010f02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010f1a:	6879      	ldr	r1, [r7, #4]
 8010f1c:	4805      	ldr	r0, [pc, #20]	@ (8010f34 <CDC_Receive_FS+0x24>)
 8010f1e:	f7fc feb7 	bl	800dc90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010f22:	4804      	ldr	r0, [pc, #16]	@ (8010f34 <CDC_Receive_FS+0x24>)
 8010f24:	f7fc ff12 	bl	800dd4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010f28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	24004b30 	.word	0x24004b30

08010f38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	460b      	mov	r3, r1
 8010f42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010f44:	2300      	movs	r3, #0
 8010f46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010f48:	4b0d      	ldr	r3, [pc, #52]	@ (8010f80 <CDC_Transmit_FS+0x48>)
 8010f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010f4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e00b      	b.n	8010f76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010f5e:	887b      	ldrh	r3, [r7, #2]
 8010f60:	461a      	mov	r2, r3
 8010f62:	6879      	ldr	r1, [r7, #4]
 8010f64:	4806      	ldr	r0, [pc, #24]	@ (8010f80 <CDC_Transmit_FS+0x48>)
 8010f66:	f7fc fe71 	bl	800dc4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010f6a:	4805      	ldr	r0, [pc, #20]	@ (8010f80 <CDC_Transmit_FS+0x48>)
 8010f6c:	f7fc feae 	bl	800dccc <USBD_CDC_TransmitPacket>
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3710      	adds	r7, #16
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	24004b30 	.word	0x24004b30

08010f84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b087      	sub	sp, #28
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	4613      	mov	r3, r2
 8010f90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	371c      	adds	r7, #28
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
	...

08010fa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	4603      	mov	r3, r0
 8010fb0:	6039      	str	r1, [r7, #0]
 8010fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2212      	movs	r2, #18
 8010fb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010fba:	4b03      	ldr	r3, [pc, #12]	@ (8010fc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	370c      	adds	r7, #12
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr
 8010fc8:	240000d4 	.word	0x240000d4

08010fcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	6039      	str	r1, [r7, #0]
 8010fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	2204      	movs	r2, #4
 8010fdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010fde:	4b03      	ldr	r3, [pc, #12]	@ (8010fec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr
 8010fec:	240000e8 	.word	0x240000e8

08010ff0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	6039      	str	r1, [r7, #0]
 8010ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ffc:	79fb      	ldrb	r3, [r7, #7]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d105      	bne.n	801100e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011002:	683a      	ldr	r2, [r7, #0]
 8011004:	4907      	ldr	r1, [pc, #28]	@ (8011024 <USBD_FS_ProductStrDescriptor+0x34>)
 8011006:	4808      	ldr	r0, [pc, #32]	@ (8011028 <USBD_FS_ProductStrDescriptor+0x38>)
 8011008:	f7fe f916 	bl	800f238 <USBD_GetString>
 801100c:	e004      	b.n	8011018 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801100e:	683a      	ldr	r2, [r7, #0]
 8011010:	4904      	ldr	r1, [pc, #16]	@ (8011024 <USBD_FS_ProductStrDescriptor+0x34>)
 8011012:	4805      	ldr	r0, [pc, #20]	@ (8011028 <USBD_FS_ProductStrDescriptor+0x38>)
 8011014:	f7fe f910 	bl	800f238 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011018:	4b02      	ldr	r3, [pc, #8]	@ (8011024 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801101a:	4618      	mov	r0, r3
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	24005e0c 	.word	0x24005e0c
 8011028:	08011b60 	.word	0x08011b60

0801102c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	4603      	mov	r3, r0
 8011034:	6039      	str	r1, [r7, #0]
 8011036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011038:	683a      	ldr	r2, [r7, #0]
 801103a:	4904      	ldr	r1, [pc, #16]	@ (801104c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801103c:	4804      	ldr	r0, [pc, #16]	@ (8011050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801103e:	f7fe f8fb 	bl	800f238 <USBD_GetString>
  return USBD_StrDesc;
 8011042:	4b02      	ldr	r3, [pc, #8]	@ (801104c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011044:	4618      	mov	r0, r3
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	24005e0c 	.word	0x24005e0c
 8011050:	08011b78 	.word	0x08011b78

08011054 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	4603      	mov	r3, r0
 801105c:	6039      	str	r1, [r7, #0]
 801105e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	221a      	movs	r2, #26
 8011064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011066:	f000 f843 	bl	80110f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801106a:	4b02      	ldr	r3, [pc, #8]	@ (8011074 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801106c:	4618      	mov	r0, r3
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	240000ec 	.word	0x240000ec

08011078 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	4603      	mov	r3, r0
 8011080:	6039      	str	r1, [r7, #0]
 8011082:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011084:	79fb      	ldrb	r3, [r7, #7]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d105      	bne.n	8011096 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801108a:	683a      	ldr	r2, [r7, #0]
 801108c:	4907      	ldr	r1, [pc, #28]	@ (80110ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801108e:	4808      	ldr	r0, [pc, #32]	@ (80110b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011090:	f7fe f8d2 	bl	800f238 <USBD_GetString>
 8011094:	e004      	b.n	80110a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011096:	683a      	ldr	r2, [r7, #0]
 8011098:	4904      	ldr	r1, [pc, #16]	@ (80110ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801109a:	4805      	ldr	r0, [pc, #20]	@ (80110b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801109c:	f7fe f8cc 	bl	800f238 <USBD_GetString>
  }
  return USBD_StrDesc;
 80110a0:	4b02      	ldr	r3, [pc, #8]	@ (80110ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3708      	adds	r7, #8
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	24005e0c 	.word	0x24005e0c
 80110b0:	08011b8c 	.word	0x08011b8c

080110b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	4603      	mov	r3, r0
 80110bc:	6039      	str	r1, [r7, #0]
 80110be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80110c0:	79fb      	ldrb	r3, [r7, #7]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d105      	bne.n	80110d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80110c6:	683a      	ldr	r2, [r7, #0]
 80110c8:	4907      	ldr	r1, [pc, #28]	@ (80110e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80110ca:	4808      	ldr	r0, [pc, #32]	@ (80110ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80110cc:	f7fe f8b4 	bl	800f238 <USBD_GetString>
 80110d0:	e004      	b.n	80110dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80110d2:	683a      	ldr	r2, [r7, #0]
 80110d4:	4904      	ldr	r1, [pc, #16]	@ (80110e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80110d6:	4805      	ldr	r0, [pc, #20]	@ (80110ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80110d8:	f7fe f8ae 	bl	800f238 <USBD_GetString>
  }
  return USBD_StrDesc;
 80110dc:	4b02      	ldr	r3, [pc, #8]	@ (80110e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3708      	adds	r7, #8
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	24005e0c 	.word	0x24005e0c
 80110ec:	08011b98 	.word	0x08011b98

080110f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80110f6:	4b0f      	ldr	r3, [pc, #60]	@ (8011134 <Get_SerialNum+0x44>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80110fc:	4b0e      	ldr	r3, [pc, #56]	@ (8011138 <Get_SerialNum+0x48>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011102:	4b0e      	ldr	r3, [pc, #56]	@ (801113c <Get_SerialNum+0x4c>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4413      	add	r3, r2
 801110e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d009      	beq.n	801112a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011116:	2208      	movs	r2, #8
 8011118:	4909      	ldr	r1, [pc, #36]	@ (8011140 <Get_SerialNum+0x50>)
 801111a:	68f8      	ldr	r0, [r7, #12]
 801111c:	f000 f814 	bl	8011148 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011120:	2204      	movs	r2, #4
 8011122:	4908      	ldr	r1, [pc, #32]	@ (8011144 <Get_SerialNum+0x54>)
 8011124:	68b8      	ldr	r0, [r7, #8]
 8011126:	f000 f80f 	bl	8011148 <IntToUnicode>
  }
}
 801112a:	bf00      	nop
 801112c:	3710      	adds	r7, #16
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	1ff1e800 	.word	0x1ff1e800
 8011138:	1ff1e804 	.word	0x1ff1e804
 801113c:	1ff1e808 	.word	0x1ff1e808
 8011140:	240000ee 	.word	0x240000ee
 8011144:	240000fe 	.word	0x240000fe

08011148 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	4613      	mov	r3, r2
 8011154:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801115a:	2300      	movs	r3, #0
 801115c:	75fb      	strb	r3, [r7, #23]
 801115e:	e027      	b.n	80111b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	0f1b      	lsrs	r3, r3, #28
 8011164:	2b09      	cmp	r3, #9
 8011166:	d80b      	bhi.n	8011180 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	0f1b      	lsrs	r3, r3, #28
 801116c:	b2da      	uxtb	r2, r3
 801116e:	7dfb      	ldrb	r3, [r7, #23]
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	4619      	mov	r1, r3
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	440b      	add	r3, r1
 8011178:	3230      	adds	r2, #48	@ 0x30
 801117a:	b2d2      	uxtb	r2, r2
 801117c:	701a      	strb	r2, [r3, #0]
 801117e:	e00a      	b.n	8011196 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	0f1b      	lsrs	r3, r3, #28
 8011184:	b2da      	uxtb	r2, r3
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	005b      	lsls	r3, r3, #1
 801118a:	4619      	mov	r1, r3
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	440b      	add	r3, r1
 8011190:	3237      	adds	r2, #55	@ 0x37
 8011192:	b2d2      	uxtb	r2, r2
 8011194:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	011b      	lsls	r3, r3, #4
 801119a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801119c:	7dfb      	ldrb	r3, [r7, #23]
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	3301      	adds	r3, #1
 80111a2:	68ba      	ldr	r2, [r7, #8]
 80111a4:	4413      	add	r3, r2
 80111a6:	2200      	movs	r2, #0
 80111a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80111aa:	7dfb      	ldrb	r3, [r7, #23]
 80111ac:	3301      	adds	r3, #1
 80111ae:	75fb      	strb	r3, [r7, #23]
 80111b0:	7dfa      	ldrb	r2, [r7, #23]
 80111b2:	79fb      	ldrb	r3, [r7, #7]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d3d3      	bcc.n	8011160 <IntToUnicode+0x18>
  }
}
 80111b8:	bf00      	nop
 80111ba:	bf00      	nop
 80111bc:	371c      	adds	r7, #28
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr
	...

080111c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b0ba      	sub	sp, #232	@ 0xe8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80111d4:	2200      	movs	r2, #0
 80111d6:	601a      	str	r2, [r3, #0]
 80111d8:	605a      	str	r2, [r3, #4]
 80111da:	609a      	str	r2, [r3, #8]
 80111dc:	60da      	str	r2, [r3, #12]
 80111de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80111e0:	f107 0310 	add.w	r3, r7, #16
 80111e4:	22c0      	movs	r2, #192	@ 0xc0
 80111e6:	2100      	movs	r1, #0
 80111e8:	4618      	mov	r0, r3
 80111ea:	f000 fb25 	bl	8011838 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	4a2c      	ldr	r2, [pc, #176]	@ (80112a4 <HAL_PCD_MspInit+0xdc>)
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d151      	bne.n	801129c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80111f8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80111fc:	f04f 0300 	mov.w	r3, #0
 8011200:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011204:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8011208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801120c:	f107 0310 	add.w	r3, r7, #16
 8011210:	4618      	mov	r0, r3
 8011212:	f7f5 fe4f 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d001      	beq.n	8011220 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801121c:	f7ef fbd4 	bl	80009c8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011220:	f7f4 fe10 	bl	8005e44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011224:	4b20      	ldr	r3, [pc, #128]	@ (80112a8 <HAL_PCD_MspInit+0xe0>)
 8011226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801122a:	4a1f      	ldr	r2, [pc, #124]	@ (80112a8 <HAL_PCD_MspInit+0xe0>)
 801122c:	f043 0301 	orr.w	r3, r3, #1
 8011230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011234:	4b1c      	ldr	r3, [pc, #112]	@ (80112a8 <HAL_PCD_MspInit+0xe0>)
 8011236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	60fb      	str	r3, [r7, #12]
 8011240:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8011242:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801124a:	2302      	movs	r3, #2
 801124c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011250:	2300      	movs	r3, #0
 8011252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011256:	2300      	movs	r3, #0
 8011258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801125c:	230a      	movs	r3, #10
 801125e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011262:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011266:	4619      	mov	r1, r3
 8011268:	4810      	ldr	r0, [pc, #64]	@ (80112ac <HAL_PCD_MspInit+0xe4>)
 801126a:	f7f3 f947 	bl	80044fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801126e:	4b0e      	ldr	r3, [pc, #56]	@ (80112a8 <HAL_PCD_MspInit+0xe0>)
 8011270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011274:	4a0c      	ldr	r2, [pc, #48]	@ (80112a8 <HAL_PCD_MspInit+0xe0>)
 8011276:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801127a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801127e:	4b0a      	ldr	r3, [pc, #40]	@ (80112a8 <HAL_PCD_MspInit+0xe0>)
 8011280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011288:	60bb      	str	r3, [r7, #8]
 801128a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801128c:	2200      	movs	r2, #0
 801128e:	2105      	movs	r1, #5
 8011290:	2065      	movs	r0, #101	@ 0x65
 8011292:	f7f0 fa4b 	bl	800172c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011296:	2065      	movs	r0, #101	@ 0x65
 8011298:	f7f0 fa62 	bl	8001760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801129c:	bf00      	nop
 801129e:	37e8      	adds	r7, #232	@ 0xe8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	40080000 	.word	0x40080000
 80112a8:	58024400 	.word	0x58024400
 80112ac:	58020000 	.word	0x58020000

080112b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f7fc fe29 	bl	800df1e <USBD_LL_SetupStage>
}
 80112cc:	bf00      	nop
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80112e6:	78fa      	ldrb	r2, [r7, #3]
 80112e8:	6879      	ldr	r1, [r7, #4]
 80112ea:	4613      	mov	r3, r2
 80112ec:	00db      	lsls	r3, r3, #3
 80112ee:	4413      	add	r3, r2
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	440b      	add	r3, r1
 80112f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	78fb      	ldrb	r3, [r7, #3]
 80112fc:	4619      	mov	r1, r3
 80112fe:	f7fc fe63 	bl	800dfc8 <USBD_LL_DataOutStage>
}
 8011302:	bf00      	nop
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b082      	sub	sp, #8
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
 8011312:	460b      	mov	r3, r1
 8011314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801131c:	78fa      	ldrb	r2, [r7, #3]
 801131e:	6879      	ldr	r1, [r7, #4]
 8011320:	4613      	mov	r3, r2
 8011322:	00db      	lsls	r3, r3, #3
 8011324:	4413      	add	r3, r2
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	440b      	add	r3, r1
 801132a:	3320      	adds	r3, #32
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	78fb      	ldrb	r3, [r7, #3]
 8011330:	4619      	mov	r1, r3
 8011332:	f7fc fefc 	bl	800e12e <USBD_LL_DataInStage>
}
 8011336:	bf00      	nop
 8011338:	3708      	adds	r7, #8
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b082      	sub	sp, #8
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801134c:	4618      	mov	r0, r3
 801134e:	f7fd f836 	bl	800e3be <USBD_LL_SOF>
}
 8011352:	bf00      	nop
 8011354:	3708      	adds	r7, #8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}

0801135a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801135a:	b580      	push	{r7, lr}
 801135c:	b084      	sub	sp, #16
 801135e:	af00      	add	r7, sp, #0
 8011360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011362:	2301      	movs	r3, #1
 8011364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	79db      	ldrb	r3, [r3, #7]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d102      	bne.n	8011374 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801136e:	2300      	movs	r3, #0
 8011370:	73fb      	strb	r3, [r7, #15]
 8011372:	e008      	b.n	8011386 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	79db      	ldrb	r3, [r3, #7]
 8011378:	2b02      	cmp	r3, #2
 801137a:	d102      	bne.n	8011382 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801137c:	2301      	movs	r3, #1
 801137e:	73fb      	strb	r3, [r7, #15]
 8011380:	e001      	b.n	8011386 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011382:	f7ef fb21 	bl	80009c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801138c:	7bfa      	ldrb	r2, [r7, #15]
 801138e:	4611      	mov	r1, r2
 8011390:	4618      	mov	r0, r3
 8011392:	f7fc ffd0 	bl	800e336 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801139c:	4618      	mov	r0, r3
 801139e:	f7fc ff78 	bl	800e292 <USBD_LL_Reset>
}
 80113a2:	bf00      	nop
 80113a4:	3710      	adds	r7, #16
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
	...

080113ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7fc ffcb 	bl	800e356 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	687a      	ldr	r2, [r7, #4]
 80113cc:	6812      	ldr	r2, [r2, #0]
 80113ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80113d2:	f043 0301 	orr.w	r3, r3, #1
 80113d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	7adb      	ldrb	r3, [r3, #11]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d005      	beq.n	80113ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113e0:	4b04      	ldr	r3, [pc, #16]	@ (80113f4 <HAL_PCD_SuspendCallback+0x48>)
 80113e2:	691b      	ldr	r3, [r3, #16]
 80113e4:	4a03      	ldr	r2, [pc, #12]	@ (80113f4 <HAL_PCD_SuspendCallback+0x48>)
 80113e6:	f043 0306 	orr.w	r3, r3, #6
 80113ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80113ec:	bf00      	nop
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	e000ed00 	.word	0xe000ed00

080113f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011406:	4618      	mov	r0, r3
 8011408:	f7fc ffc1 	bl	800e38e <USBD_LL_Resume>
}
 801140c:	bf00      	nop
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	460b      	mov	r3, r1
 801141e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011426:	78fa      	ldrb	r2, [r7, #3]
 8011428:	4611      	mov	r1, r2
 801142a:	4618      	mov	r0, r3
 801142c:	f7fd f819 	bl	800e462 <USBD_LL_IsoOUTIncomplete>
}
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801144a:	78fa      	ldrb	r2, [r7, #3]
 801144c:	4611      	mov	r1, r2
 801144e:	4618      	mov	r0, r3
 8011450:	f7fc ffd5 	bl	800e3fe <USBD_LL_IsoINIncomplete>
}
 8011454:	bf00      	nop
 8011456:	3708      	adds	r7, #8
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801146a:	4618      	mov	r0, r3
 801146c:	f7fd f82b 	bl	800e4c6 <USBD_LL_DevConnected>
}
 8011470:	bf00      	nop
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011486:	4618      	mov	r0, r3
 8011488:	f7fd f828 	bl	800e4dc <USBD_LL_DevDisconnected>
}
 801148c:	bf00      	nop
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d13e      	bne.n	8011522 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80114a4:	4a21      	ldr	r2, [pc, #132]	@ (801152c <USBD_LL_Init+0x98>)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a1f      	ldr	r2, [pc, #124]	@ (801152c <USBD_LL_Init+0x98>)
 80114b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80114b4:	4b1d      	ldr	r3, [pc, #116]	@ (801152c <USBD_LL_Init+0x98>)
 80114b6:	4a1e      	ldr	r2, [pc, #120]	@ (8011530 <USBD_LL_Init+0x9c>)
 80114b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80114ba:	4b1c      	ldr	r3, [pc, #112]	@ (801152c <USBD_LL_Init+0x98>)
 80114bc:	2209      	movs	r2, #9
 80114be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80114c0:	4b1a      	ldr	r3, [pc, #104]	@ (801152c <USBD_LL_Init+0x98>)
 80114c2:	2202      	movs	r2, #2
 80114c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80114c6:	4b19      	ldr	r3, [pc, #100]	@ (801152c <USBD_LL_Init+0x98>)
 80114c8:	2200      	movs	r2, #0
 80114ca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80114cc:	4b17      	ldr	r3, [pc, #92]	@ (801152c <USBD_LL_Init+0x98>)
 80114ce:	2202      	movs	r2, #2
 80114d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80114d2:	4b16      	ldr	r3, [pc, #88]	@ (801152c <USBD_LL_Init+0x98>)
 80114d4:	2200      	movs	r2, #0
 80114d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80114d8:	4b14      	ldr	r3, [pc, #80]	@ (801152c <USBD_LL_Init+0x98>)
 80114da:	2200      	movs	r2, #0
 80114dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80114de:	4b13      	ldr	r3, [pc, #76]	@ (801152c <USBD_LL_Init+0x98>)
 80114e0:	2200      	movs	r2, #0
 80114e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80114e4:	4b11      	ldr	r3, [pc, #68]	@ (801152c <USBD_LL_Init+0x98>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80114ea:	4b10      	ldr	r3, [pc, #64]	@ (801152c <USBD_LL_Init+0x98>)
 80114ec:	2200      	movs	r2, #0
 80114ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80114f0:	4b0e      	ldr	r3, [pc, #56]	@ (801152c <USBD_LL_Init+0x98>)
 80114f2:	2200      	movs	r2, #0
 80114f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80114f6:	480d      	ldr	r0, [pc, #52]	@ (801152c <USBD_LL_Init+0x98>)
 80114f8:	f7f3 f9c9 	bl	800488e <HAL_PCD_Init>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d001      	beq.n	8011506 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011502:	f7ef fa61 	bl	80009c8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011506:	2180      	movs	r1, #128	@ 0x80
 8011508:	4808      	ldr	r0, [pc, #32]	@ (801152c <USBD_LL_Init+0x98>)
 801150a:	f7f4 fc20 	bl	8005d4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801150e:	2240      	movs	r2, #64	@ 0x40
 8011510:	2100      	movs	r1, #0
 8011512:	4806      	ldr	r0, [pc, #24]	@ (801152c <USBD_LL_Init+0x98>)
 8011514:	f7f4 fbd4 	bl	8005cc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011518:	2280      	movs	r2, #128	@ 0x80
 801151a:	2101      	movs	r1, #1
 801151c:	4803      	ldr	r0, [pc, #12]	@ (801152c <USBD_LL_Init+0x98>)
 801151e:	f7f4 fbcf 	bl	8005cc0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011522:	2300      	movs	r3, #0
}
 8011524:	4618      	mov	r0, r3
 8011526:	3708      	adds	r7, #8
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	2400600c 	.word	0x2400600c
 8011530:	40080000 	.word	0x40080000

08011534 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801153c:	2300      	movs	r3, #0
 801153e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011540:	2300      	movs	r3, #0
 8011542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801154a:	4618      	mov	r0, r3
 801154c:	f7f3 faab 	bl	8004aa6 <HAL_PCD_Start>
 8011550:	4603      	mov	r3, r0
 8011552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011554:	7bfb      	ldrb	r3, [r7, #15]
 8011556:	4618      	mov	r0, r3
 8011558:	f000 f942 	bl	80117e0 <USBD_Get_USB_Status>
 801155c:	4603      	mov	r3, r0
 801155e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011560:	7bbb      	ldrb	r3, [r7, #14]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b084      	sub	sp, #16
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	4608      	mov	r0, r1
 8011574:	4611      	mov	r1, r2
 8011576:	461a      	mov	r2, r3
 8011578:	4603      	mov	r3, r0
 801157a:	70fb      	strb	r3, [r7, #3]
 801157c:	460b      	mov	r3, r1
 801157e:	70bb      	strb	r3, [r7, #2]
 8011580:	4613      	mov	r3, r2
 8011582:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011584:	2300      	movs	r3, #0
 8011586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011588:	2300      	movs	r3, #0
 801158a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011592:	78bb      	ldrb	r3, [r7, #2]
 8011594:	883a      	ldrh	r2, [r7, #0]
 8011596:	78f9      	ldrb	r1, [r7, #3]
 8011598:	f7f3 ffac 	bl	80054f4 <HAL_PCD_EP_Open>
 801159c:	4603      	mov	r3, r0
 801159e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
 80115a2:	4618      	mov	r0, r3
 80115a4:	f000 f91c 	bl	80117e0 <USBD_Get_USB_Status>
 80115a8:	4603      	mov	r3, r0
 80115aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b084      	sub	sp, #16
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	460b      	mov	r3, r1
 80115c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115c2:	2300      	movs	r3, #0
 80115c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115c6:	2300      	movs	r3, #0
 80115c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80115d0:	78fa      	ldrb	r2, [r7, #3]
 80115d2:	4611      	mov	r1, r2
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7f3 fff7 	bl	80055c8 <HAL_PCD_EP_Close>
 80115da:	4603      	mov	r3, r0
 80115dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115de:	7bfb      	ldrb	r3, [r7, #15]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 f8fd 	bl	80117e0 <USBD_Get_USB_Status>
 80115e6:	4603      	mov	r3, r0
 80115e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3710      	adds	r7, #16
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	460b      	mov	r3, r1
 80115fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011600:	2300      	movs	r3, #0
 8011602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801160e:	78fa      	ldrb	r2, [r7, #3]
 8011610:	4611      	mov	r1, r2
 8011612:	4618      	mov	r0, r3
 8011614:	f7f4 f8af 	bl	8005776 <HAL_PCD_EP_SetStall>
 8011618:	4603      	mov	r3, r0
 801161a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801161c:	7bfb      	ldrb	r3, [r7, #15]
 801161e:	4618      	mov	r0, r3
 8011620:	f000 f8de 	bl	80117e0 <USBD_Get_USB_Status>
 8011624:	4603      	mov	r3, r0
 8011626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011628:	7bbb      	ldrb	r3, [r7, #14]
}
 801162a:	4618      	mov	r0, r3
 801162c:	3710      	adds	r7, #16
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}

08011632 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011632:	b580      	push	{r7, lr}
 8011634:	b084      	sub	sp, #16
 8011636:	af00      	add	r7, sp, #0
 8011638:	6078      	str	r0, [r7, #4]
 801163a:	460b      	mov	r3, r1
 801163c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801163e:	2300      	movs	r3, #0
 8011640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011642:	2300      	movs	r3, #0
 8011644:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801164c:	78fa      	ldrb	r2, [r7, #3]
 801164e:	4611      	mov	r1, r2
 8011650:	4618      	mov	r0, r3
 8011652:	f7f4 f8f3 	bl	800583c <HAL_PCD_EP_ClrStall>
 8011656:	4603      	mov	r3, r0
 8011658:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801165a:	7bfb      	ldrb	r3, [r7, #15]
 801165c:	4618      	mov	r0, r3
 801165e:	f000 f8bf 	bl	80117e0 <USBD_Get_USB_Status>
 8011662:	4603      	mov	r3, r0
 8011664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011666:	7bbb      	ldrb	r3, [r7, #14]
}
 8011668:	4618      	mov	r0, r3
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	460b      	mov	r3, r1
 801167a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011682:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011688:	2b00      	cmp	r3, #0
 801168a:	da0b      	bge.n	80116a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801168c:	78fb      	ldrb	r3, [r7, #3]
 801168e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011692:	68f9      	ldr	r1, [r7, #12]
 8011694:	4613      	mov	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	4413      	add	r3, r2
 801169a:	009b      	lsls	r3, r3, #2
 801169c:	440b      	add	r3, r1
 801169e:	3316      	adds	r3, #22
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	e00b      	b.n	80116bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80116a4:	78fb      	ldrb	r3, [r7, #3]
 80116a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80116aa:	68f9      	ldr	r1, [r7, #12]
 80116ac:	4613      	mov	r3, r2
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	4413      	add	r3, r2
 80116b2:	009b      	lsls	r3, r3, #2
 80116b4:	440b      	add	r3, r1
 80116b6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80116ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116d4:	2300      	movs	r3, #0
 80116d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116d8:	2300      	movs	r3, #0
 80116da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80116e2:	78fa      	ldrb	r2, [r7, #3]
 80116e4:	4611      	mov	r1, r2
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7f3 fee0 	bl	80054ac <HAL_PCD_SetAddress>
 80116ec:	4603      	mov	r3, r0
 80116ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116f0:	7bfb      	ldrb	r3, [r7, #15]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 f874 	bl	80117e0 <USBD_Get_USB_Status>
 80116f8:	4603      	mov	r3, r0
 80116fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011706:	b580      	push	{r7, lr}
 8011708:	b086      	sub	sp, #24
 801170a:	af00      	add	r7, sp, #0
 801170c:	60f8      	str	r0, [r7, #12]
 801170e:	607a      	str	r2, [r7, #4]
 8011710:	603b      	str	r3, [r7, #0]
 8011712:	460b      	mov	r3, r1
 8011714:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011716:	2300      	movs	r3, #0
 8011718:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801171a:	2300      	movs	r3, #0
 801171c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011724:	7af9      	ldrb	r1, [r7, #11]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	f7f3 ffea 	bl	8005702 <HAL_PCD_EP_Transmit>
 801172e:	4603      	mov	r3, r0
 8011730:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011732:	7dfb      	ldrb	r3, [r7, #23]
 8011734:	4618      	mov	r0, r3
 8011736:	f000 f853 	bl	80117e0 <USBD_Get_USB_Status>
 801173a:	4603      	mov	r3, r0
 801173c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801173e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3718      	adds	r7, #24
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	607a      	str	r2, [r7, #4]
 8011752:	603b      	str	r3, [r7, #0]
 8011754:	460b      	mov	r3, r1
 8011756:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011758:	2300      	movs	r3, #0
 801175a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801175c:	2300      	movs	r3, #0
 801175e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011766:	7af9      	ldrb	r1, [r7, #11]
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	f7f3 ff76 	bl	800565c <HAL_PCD_EP_Receive>
 8011770:	4603      	mov	r3, r0
 8011772:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011774:	7dfb      	ldrb	r3, [r7, #23]
 8011776:	4618      	mov	r0, r3
 8011778:	f000 f832 	bl	80117e0 <USBD_Get_USB_Status>
 801177c:	4603      	mov	r3, r0
 801177e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011780:	7dbb      	ldrb	r3, [r7, #22]
}
 8011782:	4618      	mov	r0, r3
 8011784:	3718      	adds	r7, #24
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801178a:	b580      	push	{r7, lr}
 801178c:	b082      	sub	sp, #8
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	460b      	mov	r3, r1
 8011794:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801179c:	78fa      	ldrb	r2, [r7, #3]
 801179e:	4611      	mov	r1, r2
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7f3 ff96 	bl	80056d2 <HAL_PCD_EP_GetRxCount>
 80117a6:	4603      	mov	r3, r0
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80117b8:	4b03      	ldr	r3, [pc, #12]	@ (80117c8 <USBD_static_malloc+0x18>)
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	370c      	adds	r7, #12
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
 80117c6:	bf00      	nop
 80117c8:	240064f0 	.word	0x240064f0

080117cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b083      	sub	sp, #12
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80117d4:	bf00      	nop
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	4603      	mov	r3, r0
 80117e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80117ee:	79fb      	ldrb	r3, [r7, #7]
 80117f0:	2b03      	cmp	r3, #3
 80117f2:	d817      	bhi.n	8011824 <USBD_Get_USB_Status+0x44>
 80117f4:	a201      	add	r2, pc, #4	@ (adr r2, 80117fc <USBD_Get_USB_Status+0x1c>)
 80117f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117fa:	bf00      	nop
 80117fc:	0801180d 	.word	0x0801180d
 8011800:	08011813 	.word	0x08011813
 8011804:	08011819 	.word	0x08011819
 8011808:	0801181f 	.word	0x0801181f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801180c:	2300      	movs	r3, #0
 801180e:	73fb      	strb	r3, [r7, #15]
    break;
 8011810:	e00b      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011812:	2303      	movs	r3, #3
 8011814:	73fb      	strb	r3, [r7, #15]
    break;
 8011816:	e008      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011818:	2301      	movs	r3, #1
 801181a:	73fb      	strb	r3, [r7, #15]
    break;
 801181c:	e005      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801181e:	2303      	movs	r3, #3
 8011820:	73fb      	strb	r3, [r7, #15]
    break;
 8011822:	e002      	b.n	801182a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011824:	2303      	movs	r3, #3
 8011826:	73fb      	strb	r3, [r7, #15]
    break;
 8011828:	bf00      	nop
  }
  return usb_status;
 801182a:	7bfb      	ldrb	r3, [r7, #15]
}
 801182c:	4618      	mov	r0, r3
 801182e:	3714      	adds	r7, #20
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <memset>:
 8011838:	4402      	add	r2, r0
 801183a:	4603      	mov	r3, r0
 801183c:	4293      	cmp	r3, r2
 801183e:	d100      	bne.n	8011842 <memset+0xa>
 8011840:	4770      	bx	lr
 8011842:	f803 1b01 	strb.w	r1, [r3], #1
 8011846:	e7f9      	b.n	801183c <memset+0x4>

08011848 <_reclaim_reent>:
 8011848:	4b2d      	ldr	r3, [pc, #180]	@ (8011900 <_reclaim_reent+0xb8>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4283      	cmp	r3, r0
 801184e:	b570      	push	{r4, r5, r6, lr}
 8011850:	4604      	mov	r4, r0
 8011852:	d053      	beq.n	80118fc <_reclaim_reent+0xb4>
 8011854:	69c3      	ldr	r3, [r0, #28]
 8011856:	b31b      	cbz	r3, 80118a0 <_reclaim_reent+0x58>
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	b163      	cbz	r3, 8011876 <_reclaim_reent+0x2e>
 801185c:	2500      	movs	r5, #0
 801185e:	69e3      	ldr	r3, [r4, #28]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	5959      	ldr	r1, [r3, r5]
 8011864:	b9b1      	cbnz	r1, 8011894 <_reclaim_reent+0x4c>
 8011866:	3504      	adds	r5, #4
 8011868:	2d80      	cmp	r5, #128	@ 0x80
 801186a:	d1f8      	bne.n	801185e <_reclaim_reent+0x16>
 801186c:	69e3      	ldr	r3, [r4, #28]
 801186e:	4620      	mov	r0, r4
 8011870:	68d9      	ldr	r1, [r3, #12]
 8011872:	f000 f86d 	bl	8011950 <_free_r>
 8011876:	69e3      	ldr	r3, [r4, #28]
 8011878:	6819      	ldr	r1, [r3, #0]
 801187a:	b111      	cbz	r1, 8011882 <_reclaim_reent+0x3a>
 801187c:	4620      	mov	r0, r4
 801187e:	f000 f867 	bl	8011950 <_free_r>
 8011882:	69e3      	ldr	r3, [r4, #28]
 8011884:	689d      	ldr	r5, [r3, #8]
 8011886:	b15d      	cbz	r5, 80118a0 <_reclaim_reent+0x58>
 8011888:	4629      	mov	r1, r5
 801188a:	4620      	mov	r0, r4
 801188c:	682d      	ldr	r5, [r5, #0]
 801188e:	f000 f85f 	bl	8011950 <_free_r>
 8011892:	e7f8      	b.n	8011886 <_reclaim_reent+0x3e>
 8011894:	680e      	ldr	r6, [r1, #0]
 8011896:	4620      	mov	r0, r4
 8011898:	f000 f85a 	bl	8011950 <_free_r>
 801189c:	4631      	mov	r1, r6
 801189e:	e7e1      	b.n	8011864 <_reclaim_reent+0x1c>
 80118a0:	6961      	ldr	r1, [r4, #20]
 80118a2:	b111      	cbz	r1, 80118aa <_reclaim_reent+0x62>
 80118a4:	4620      	mov	r0, r4
 80118a6:	f000 f853 	bl	8011950 <_free_r>
 80118aa:	69e1      	ldr	r1, [r4, #28]
 80118ac:	b111      	cbz	r1, 80118b4 <_reclaim_reent+0x6c>
 80118ae:	4620      	mov	r0, r4
 80118b0:	f000 f84e 	bl	8011950 <_free_r>
 80118b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80118b6:	b111      	cbz	r1, 80118be <_reclaim_reent+0x76>
 80118b8:	4620      	mov	r0, r4
 80118ba:	f000 f849 	bl	8011950 <_free_r>
 80118be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118c0:	b111      	cbz	r1, 80118c8 <_reclaim_reent+0x80>
 80118c2:	4620      	mov	r0, r4
 80118c4:	f000 f844 	bl	8011950 <_free_r>
 80118c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80118ca:	b111      	cbz	r1, 80118d2 <_reclaim_reent+0x8a>
 80118cc:	4620      	mov	r0, r4
 80118ce:	f000 f83f 	bl	8011950 <_free_r>
 80118d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80118d4:	b111      	cbz	r1, 80118dc <_reclaim_reent+0x94>
 80118d6:	4620      	mov	r0, r4
 80118d8:	f000 f83a 	bl	8011950 <_free_r>
 80118dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80118de:	b111      	cbz	r1, 80118e6 <_reclaim_reent+0x9e>
 80118e0:	4620      	mov	r0, r4
 80118e2:	f000 f835 	bl	8011950 <_free_r>
 80118e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80118e8:	b111      	cbz	r1, 80118f0 <_reclaim_reent+0xa8>
 80118ea:	4620      	mov	r0, r4
 80118ec:	f000 f830 	bl	8011950 <_free_r>
 80118f0:	6a23      	ldr	r3, [r4, #32]
 80118f2:	b11b      	cbz	r3, 80118fc <_reclaim_reent+0xb4>
 80118f4:	4620      	mov	r0, r4
 80118f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118fa:	4718      	bx	r3
 80118fc:	bd70      	pop	{r4, r5, r6, pc}
 80118fe:	bf00      	nop
 8011900:	24000108 	.word	0x24000108

08011904 <__libc_init_array>:
 8011904:	b570      	push	{r4, r5, r6, lr}
 8011906:	4d0d      	ldr	r5, [pc, #52]	@ (801193c <__libc_init_array+0x38>)
 8011908:	4c0d      	ldr	r4, [pc, #52]	@ (8011940 <__libc_init_array+0x3c>)
 801190a:	1b64      	subs	r4, r4, r5
 801190c:	10a4      	asrs	r4, r4, #2
 801190e:	2600      	movs	r6, #0
 8011910:	42a6      	cmp	r6, r4
 8011912:	d109      	bne.n	8011928 <__libc_init_array+0x24>
 8011914:	4d0b      	ldr	r5, [pc, #44]	@ (8011944 <__libc_init_array+0x40>)
 8011916:	4c0c      	ldr	r4, [pc, #48]	@ (8011948 <__libc_init_array+0x44>)
 8011918:	f000 f8ea 	bl	8011af0 <_init>
 801191c:	1b64      	subs	r4, r4, r5
 801191e:	10a4      	asrs	r4, r4, #2
 8011920:	2600      	movs	r6, #0
 8011922:	42a6      	cmp	r6, r4
 8011924:	d105      	bne.n	8011932 <__libc_init_array+0x2e>
 8011926:	bd70      	pop	{r4, r5, r6, pc}
 8011928:	f855 3b04 	ldr.w	r3, [r5], #4
 801192c:	4798      	blx	r3
 801192e:	3601      	adds	r6, #1
 8011930:	e7ee      	b.n	8011910 <__libc_init_array+0xc>
 8011932:	f855 3b04 	ldr.w	r3, [r5], #4
 8011936:	4798      	blx	r3
 8011938:	3601      	adds	r6, #1
 801193a:	e7f2      	b.n	8011922 <__libc_init_array+0x1e>
 801193c:	08011bf0 	.word	0x08011bf0
 8011940:	08011bf0 	.word	0x08011bf0
 8011944:	08011bf0 	.word	0x08011bf0
 8011948:	08011bf4 	.word	0x08011bf4

0801194c <__retarget_lock_acquire_recursive>:
 801194c:	4770      	bx	lr

0801194e <__retarget_lock_release_recursive>:
 801194e:	4770      	bx	lr

08011950 <_free_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4605      	mov	r5, r0
 8011954:	2900      	cmp	r1, #0
 8011956:	d041      	beq.n	80119dc <_free_r+0x8c>
 8011958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801195c:	1f0c      	subs	r4, r1, #4
 801195e:	2b00      	cmp	r3, #0
 8011960:	bfb8      	it	lt
 8011962:	18e4      	addlt	r4, r4, r3
 8011964:	f000 f83e 	bl	80119e4 <__malloc_lock>
 8011968:	4a1d      	ldr	r2, [pc, #116]	@ (80119e0 <_free_r+0x90>)
 801196a:	6813      	ldr	r3, [r2, #0]
 801196c:	b933      	cbnz	r3, 801197c <_free_r+0x2c>
 801196e:	6063      	str	r3, [r4, #4]
 8011970:	6014      	str	r4, [r2, #0]
 8011972:	4628      	mov	r0, r5
 8011974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011978:	f000 b83a 	b.w	80119f0 <__malloc_unlock>
 801197c:	42a3      	cmp	r3, r4
 801197e:	d908      	bls.n	8011992 <_free_r+0x42>
 8011980:	6820      	ldr	r0, [r4, #0]
 8011982:	1821      	adds	r1, r4, r0
 8011984:	428b      	cmp	r3, r1
 8011986:	bf01      	itttt	eq
 8011988:	6819      	ldreq	r1, [r3, #0]
 801198a:	685b      	ldreq	r3, [r3, #4]
 801198c:	1809      	addeq	r1, r1, r0
 801198e:	6021      	streq	r1, [r4, #0]
 8011990:	e7ed      	b.n	801196e <_free_r+0x1e>
 8011992:	461a      	mov	r2, r3
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	b10b      	cbz	r3, 801199c <_free_r+0x4c>
 8011998:	42a3      	cmp	r3, r4
 801199a:	d9fa      	bls.n	8011992 <_free_r+0x42>
 801199c:	6811      	ldr	r1, [r2, #0]
 801199e:	1850      	adds	r0, r2, r1
 80119a0:	42a0      	cmp	r0, r4
 80119a2:	d10b      	bne.n	80119bc <_free_r+0x6c>
 80119a4:	6820      	ldr	r0, [r4, #0]
 80119a6:	4401      	add	r1, r0
 80119a8:	1850      	adds	r0, r2, r1
 80119aa:	4283      	cmp	r3, r0
 80119ac:	6011      	str	r1, [r2, #0]
 80119ae:	d1e0      	bne.n	8011972 <_free_r+0x22>
 80119b0:	6818      	ldr	r0, [r3, #0]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	6053      	str	r3, [r2, #4]
 80119b6:	4408      	add	r0, r1
 80119b8:	6010      	str	r0, [r2, #0]
 80119ba:	e7da      	b.n	8011972 <_free_r+0x22>
 80119bc:	d902      	bls.n	80119c4 <_free_r+0x74>
 80119be:	230c      	movs	r3, #12
 80119c0:	602b      	str	r3, [r5, #0]
 80119c2:	e7d6      	b.n	8011972 <_free_r+0x22>
 80119c4:	6820      	ldr	r0, [r4, #0]
 80119c6:	1821      	adds	r1, r4, r0
 80119c8:	428b      	cmp	r3, r1
 80119ca:	bf04      	itt	eq
 80119cc:	6819      	ldreq	r1, [r3, #0]
 80119ce:	685b      	ldreq	r3, [r3, #4]
 80119d0:	6063      	str	r3, [r4, #4]
 80119d2:	bf04      	itt	eq
 80119d4:	1809      	addeq	r1, r1, r0
 80119d6:	6021      	streq	r1, [r4, #0]
 80119d8:	6054      	str	r4, [r2, #4]
 80119da:	e7ca      	b.n	8011972 <_free_r+0x22>
 80119dc:	bd38      	pop	{r3, r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	2400684c 	.word	0x2400684c

080119e4 <__malloc_lock>:
 80119e4:	4801      	ldr	r0, [pc, #4]	@ (80119ec <__malloc_lock+0x8>)
 80119e6:	f7ff bfb1 	b.w	801194c <__retarget_lock_acquire_recursive>
 80119ea:	bf00      	nop
 80119ec:	24006848 	.word	0x24006848

080119f0 <__malloc_unlock>:
 80119f0:	4801      	ldr	r0, [pc, #4]	@ (80119f8 <__malloc_unlock+0x8>)
 80119f2:	f7ff bfac 	b.w	801194e <__retarget_lock_release_recursive>
 80119f6:	bf00      	nop
 80119f8:	24006848 	.word	0x24006848
 80119fc:	00000000 	.word	0x00000000

08011a00 <floor>:
 8011a00:	ee10 3a90 	vmov	r3, s1
 8011a04:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8011a08:	ee10 2a10 	vmov	r2, s0
 8011a0c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8011a10:	2913      	cmp	r1, #19
 8011a12:	b530      	push	{r4, r5, lr}
 8011a14:	4615      	mov	r5, r2
 8011a16:	dc33      	bgt.n	8011a80 <floor+0x80>
 8011a18:	2900      	cmp	r1, #0
 8011a1a:	da18      	bge.n	8011a4e <floor+0x4e>
 8011a1c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8011ae0 <floor+0xe0>
 8011a20:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011a24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a2c:	dd0a      	ble.n	8011a44 <floor+0x44>
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	da50      	bge.n	8011ad4 <floor+0xd4>
 8011a32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a36:	4313      	orrs	r3, r2
 8011a38:	2200      	movs	r2, #0
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8011ae8 <floor+0xe8>)
 8011a3e:	bf08      	it	eq
 8011a40:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011a44:	4619      	mov	r1, r3
 8011a46:	4610      	mov	r0, r2
 8011a48:	ec41 0b10 	vmov	d0, r0, r1
 8011a4c:	e01f      	b.n	8011a8e <floor+0x8e>
 8011a4e:	4827      	ldr	r0, [pc, #156]	@ (8011aec <floor+0xec>)
 8011a50:	4108      	asrs	r0, r1
 8011a52:	ea03 0400 	and.w	r4, r3, r0
 8011a56:	4314      	orrs	r4, r2
 8011a58:	d019      	beq.n	8011a8e <floor+0x8e>
 8011a5a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011ae0 <floor+0xe0>
 8011a5e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011a62:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6a:	ddeb      	ble.n	8011a44 <floor+0x44>
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	bfbe      	ittt	lt
 8011a70:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8011a74:	410a      	asrlt	r2, r1
 8011a76:	189b      	addlt	r3, r3, r2
 8011a78:	ea23 0300 	bic.w	r3, r3, r0
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	e7e1      	b.n	8011a44 <floor+0x44>
 8011a80:	2933      	cmp	r1, #51	@ 0x33
 8011a82:	dd05      	ble.n	8011a90 <floor+0x90>
 8011a84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011a88:	d101      	bne.n	8011a8e <floor+0x8e>
 8011a8a:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011a8e:	bd30      	pop	{r4, r5, pc}
 8011a90:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8011a94:	f04f 30ff 	mov.w	r0, #4294967295
 8011a98:	40e0      	lsrs	r0, r4
 8011a9a:	4210      	tst	r0, r2
 8011a9c:	d0f7      	beq.n	8011a8e <floor+0x8e>
 8011a9e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011ae0 <floor+0xe0>
 8011aa2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011aa6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aae:	ddc9      	ble.n	8011a44 <floor+0x44>
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	da02      	bge.n	8011aba <floor+0xba>
 8011ab4:	2914      	cmp	r1, #20
 8011ab6:	d103      	bne.n	8011ac0 <floor+0xc0>
 8011ab8:	3301      	adds	r3, #1
 8011aba:	ea22 0200 	bic.w	r2, r2, r0
 8011abe:	e7c1      	b.n	8011a44 <floor+0x44>
 8011ac0:	2401      	movs	r4, #1
 8011ac2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8011ac6:	fa04 f101 	lsl.w	r1, r4, r1
 8011aca:	440a      	add	r2, r1
 8011acc:	42aa      	cmp	r2, r5
 8011ace:	bf38      	it	cc
 8011ad0:	191b      	addcc	r3, r3, r4
 8011ad2:	e7f2      	b.n	8011aba <floor+0xba>
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	e7b4      	b.n	8011a44 <floor+0x44>
 8011ada:	bf00      	nop
 8011adc:	f3af 8000 	nop.w
 8011ae0:	8800759c 	.word	0x8800759c
 8011ae4:	7e37e43c 	.word	0x7e37e43c
 8011ae8:	bff00000 	.word	0xbff00000
 8011aec:	000fffff 	.word	0x000fffff

08011af0 <_init>:
 8011af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011af2:	bf00      	nop
 8011af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011af6:	bc08      	pop	{r3}
 8011af8:	469e      	mov	lr, r3
 8011afa:	4770      	bx	lr

08011afc <_fini>:
 8011afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afe:	bf00      	nop
 8011b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b02:	bc08      	pop	{r3}
 8011b04:	469e      	mov	lr, r3
 8011b06:	4770      	bx	lr
