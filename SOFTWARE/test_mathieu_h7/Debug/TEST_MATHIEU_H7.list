
TEST_MATHIEU_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf14  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800c1b4  0800c1b4  0000d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c24c  0800c24c  0000d24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c254  0800c254  0000d254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c258  0800c258  0000d258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800c25c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004710  24000064  0800c2c0  0000e064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004774  0800c2c0  0000e774  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e5c6  00000000  00000000  0000e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d91  00000000  00000000  0002c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001600  00000000  00000000  000303f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000110b  00000000  00000000  000319f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039cdd  00000000  00000000  00032afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f0d6  00000000  00000000  0006c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c15b  00000000  00000000  0008b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f7a09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005df0  00000000  00000000  001f7a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  001fd83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c19c 	.word	0x0800c19c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800c19c 	.word	0x0800c19c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <MX_DMA_Init+0x3c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	200b      	movs	r0, #11
 8000636:	f000 ff8f 	bl	8001558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800063a:	200b      	movs	r0, #11
 800063c:	f000 ffa6 	bl	800158c <HAL_NVIC_EnableIRQ>

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a06      	ldr	r2, [pc, #24]	@ (800067c <vApplicationGetIdleTaskMemory+0x30>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	24000088 	.word	0x24000088
 800067c:	24000128 	.word	0x24000128

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08e      	sub	sp, #56	@ 0x38
 8000684:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of maintask */
  osThreadDef(maintask, Startmaintask, osPriorityNormal, 0, 256);
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_FREERTOS_Init+0x58>)
 8000688:	f107 041c 	add.w	r4, r7, #28
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  maintaskHandle = osThreadCreate(osThread(maintask), NULL);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f009 fff8 	bl	800a696 <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <MX_FREERTOS_Init+0x5c>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of lidarparse */
  osThreadDef(lidarparse, Startlidarparse, osPriorityIdle, 0, 300);
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_FREERTOS_Init+0x60>)
 80006ae:	463c      	mov	r4, r7
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lidarparseHandle = osThreadCreate(osThread(lidarparse), NULL);
 80006be:	463b      	mov	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 ffe7 	bl	800a696 <osThreadCreate>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <MX_FREERTOS_Init+0x64>)
 80006cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006ce:	bf00      	nop
 80006d0:	3738      	adds	r7, #56	@ 0x38
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	0800c1c0 	.word	0x0800c1c0
 80006dc:	24000080 	.word	0x24000080
 80006e0:	0800c1e8 	.word	0x0800c1e8
 80006e4:	24000084 	.word	0x24000084

080006e8 <Startmaintask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmaintask */
void Startmaintask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	 //HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_3);
	 //HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
    osDelay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006f4:	f00a f81b 	bl	800a72e <osDelay>
 80006f8:	e7fa      	b.n	80006f0 <Startmaintask+0x8>
	...

080006fc <Startlidarparse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlidarparse */
void Startlidarparse(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
//              HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
//              ylidar_fsm();
//              osDelay(10);
//          }

	  while(ylidar_read_index!=ylidar_write_index){
 8000704:	e001      	b.n	800070a <Startlidarparse+0xe>
		  ylidar_fsm();
 8000706:	f000 fca9 	bl	800105c <ylidar_fsm>
	  while(ylidar_read_index!=ylidar_write_index){
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <Startlidarparse+0x24>)
 800070c:	881a      	ldrh	r2, [r3, #0]
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <Startlidarparse+0x28>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	d1f7      	bne.n	8000706 <Startlidarparse+0xa>

      }
	  osDelay(20);
 8000716:	2014      	movs	r0, #20
 8000718:	f00a f809 	bl	800a72e <osDelay>
	  while(ylidar_read_index!=ylidar_write_index){
 800071c:	e7f5      	b.n	800070a <Startlidarparse+0xe>
 800071e:	bf00      	nop
 8000720:	240004cc 	.word	0x240004cc
 8000724:	240004ce 	.word	0x240004ce

08000728 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075c:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000762:	4a20      	ldr	r2, [pc, #128]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 8000782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079e:	4a11      	ldr	r2, [pc, #68]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_GPIO_Init+0xbc>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2118      	movs	r1, #24
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <MX_GPIO_Init+0xc0>)
 80007bc:	f003 ff64 	bl	8004688 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80007c0:	2318      	movs	r3, #24
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_GPIO_Init+0xc0>)
 80007d8:	f003 fda6 	bl	8004328 <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	@ 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58024400 	.word	0x58024400
 80007e8:	58021000 	.word	0x58021000

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007f0:	f000 f8a0 	bl	8000934 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 fd90 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f822 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f7ff ff94 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000800:	f7ff ff04 	bl	800060c <MX_DMA_Init>
  MX_UART8_Init();
 8000804:	f000 fafe 	bl	8000e04 <MX_UART8_Init>
  MX_TIM2_Init();
 8000808:	f000 fa4a 	bl	8000ca0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800080c:	2108      	movs	r1, #8
 800080e:	4809      	ldr	r0, [pc, #36]	@ (8000834 <main+0x48>)
 8000810:	f006 ff14 	bl	800763c <HAL_TIM_PWM_Start>

  HAL_UART_Abort(&huart8);
 8000814:	4808      	ldr	r0, [pc, #32]	@ (8000838 <main+0x4c>)
 8000816:	f007 ff47 	bl	80086a8 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart8, (uint8_t *)ylidar_circular_buffer, YLIDAR_CIRC_BUF_SIZE);
 800081a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081e:	4907      	ldr	r1, [pc, #28]	@ (800083c <main+0x50>)
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <main+0x4c>)
 8000822:	f007 fef5 	bl	8008610 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000826:	f7ff ff2b 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800082a:	f009 ff2d 	bl	800a688 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082e:	bf00      	nop
 8000830:	e7fd      	b.n	800082e <main+0x42>
 8000832:	bf00      	nop
 8000834:	24000374 	.word	0x24000374
 8000838:	240003c0 	.word	0x240003c0
 800083c:	240004d0 	.word	0x240004d0

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	@ 0x70
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	224c      	movs	r2, #76	@ 0x4c
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00b fbc2 	bl	800bfd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2220      	movs	r2, #32
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f00b fbbc 	bl	800bfd8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000860:	2002      	movs	r0, #2
 8000862:	f003 ff2b 	bl	80046bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <SystemClock_Config+0xec>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a2f      	ldr	r2, [pc, #188]	@ (800092c <SystemClock_Config+0xec>)
 8000870:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <SystemClock_Config+0xec>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <SystemClock_Config+0xf0>)
 8000882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000884:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <SystemClock_Config+0xf0>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800088c:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <SystemClock_Config+0xf0>)
 800088e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000898:	bf00      	nop
 800089a:	4b24      	ldr	r3, [pc, #144]	@ (800092c <SystemClock_Config+0xec>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a6:	d1f8      	bne.n	800089a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008be:	2378      	movs	r3, #120	@ 0x78
 80008c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ce:	230c      	movs	r3, #12
 80008d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 ff26 	bl	8004730 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ea:	f000 f861 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	233f      	movs	r3, #63	@ 0x3f
 80008f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008fa:	2308      	movs	r3, #8
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2104      	movs	r1, #4
 8000914:	4618      	mov	r0, r3
 8000916:	f004 fb65 	bl	8004fe4 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000920:	f000 f846 	bl	80009b0 <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3770      	adds	r7, #112	@ 0x70
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024800 	.word	0x58024800
 8000930:	58000400 	.word	0x58000400

08000934 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000946:	f000 fe2f 	bl	80015a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800094a:	2301      	movs	r3, #1
 800094c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800094e:	2300      	movs	r3, #0
 8000950:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000956:	231f      	movs	r3, #31
 8000958:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800095a:	2387      	movs	r3, #135	@ 0x87
 800095c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800095e:	2300      	movs	r3, #0
 8000960:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000962:	2300      	movs	r3, #0
 8000964:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000966:	2301      	movs	r3, #1
 8000968:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800096a:	2301      	movs	r3, #1
 800096c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000976:	463b      	mov	r3, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fe4d 	bl	8001618 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800097e:	2004      	movs	r0, #4
 8000980:	f000 fe2a 	bl	80015d8 <HAL_MPU_Enable>

}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800099e:	f000 fcf7 	bl	8001390 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40010000 	.word	0x40010000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <HAL_MspInit+0x38>)
 80009c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_MspInit+0x38>)
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_MspInit+0x38>)
 80009d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	210f      	movs	r1, #15
 80009e4:	f06f 0001 	mvn.w	r0, #1
 80009e8:	f000 fdb6 	bl	8001558 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	58024400 	.word	0x58024400

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d844      	bhi.n	8000a90 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	2019      	movs	r0, #25
 8000a0c:	f000 fda4 	bl	8001558 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a10:	2019      	movs	r0, #25
 8000a12:	f000 fdbb 	bl	800158c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000a16:	4a24      	ldr	r2, [pc, #144]	@ (8000aa8 <HAL_InitTick+0xb0>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <HAL_InitTick+0xb4>)
 8000a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a22:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <HAL_InitTick+0xb4>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <HAL_InitTick+0xb4>)
 8000a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fe59 	bl	80056fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a4a:	f004 fe41 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a56:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <HAL_InitTick+0xb8>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	0c9b      	lsrs	r3, r3, #18
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_InitTick+0xbc>)
 8000a64:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <HAL_InitTick+0xc0>)
 8000a66:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0xbc>)
 8000a6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a70:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <HAL_InitTick+0xbc>)
 8000a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_InitTick+0xbc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_InitTick+0xbc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a82:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <HAL_InitTick+0xbc>)
 8000a84:	f006 fca8 	bl	80073d8 <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d107      	bne.n	8000a9e <HAL_InitTick+0xa6>
 8000a8e:	e001      	b.n	8000a94 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e005      	b.n	8000aa0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a94:	4807      	ldr	r0, [pc, #28]	@ (8000ab4 <HAL_InitTick+0xbc>)
 8000a96:	f006 fd01 	bl	800749c <HAL_TIM_Base_Start_IT>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3738      	adds	r7, #56	@ 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000008 	.word	0x24000008
 8000aac:	58024400 	.word	0x58024400
 8000ab0:	431bde83 	.word	0x431bde83
 8000ab4:	24000328 	.word	0x24000328
 8000ab8:	40010000 	.word	0x40010000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <DMA1_Stream0_IRQHandler+0x10>)
 8000afa:	f002 f8f7 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	24000454 	.word	0x24000454

08000b08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <TIM1_UP_IRQHandler+0x10>)
 8000b0e:	f006 fea3 	bl	8007858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000328 	.word	0x24000328

08000b1c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <UART8_IRQHandler+0x10>)
 8000b22:	f007 fecf 	bl	80088c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	240003c0 	.word	0x240003c0

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b34:	4b43      	ldr	r3, [pc, #268]	@ (8000c44 <SystemInit+0x114>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3a:	4a42      	ldr	r2, [pc, #264]	@ (8000c44 <SystemInit+0x114>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b44:	4b40      	ldr	r3, [pc, #256]	@ (8000c48 <SystemInit+0x118>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	2b06      	cmp	r3, #6
 8000b4e:	d807      	bhi.n	8000b60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b50:	4b3d      	ldr	r3, [pc, #244]	@ (8000c48 <SystemInit+0x118>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f023 030f 	bic.w	r3, r3, #15
 8000b58:	4a3b      	ldr	r2, [pc, #236]	@ (8000c48 <SystemInit+0x118>)
 8000b5a:	f043 0307 	orr.w	r3, r3, #7
 8000b5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b60:	4b3a      	ldr	r3, [pc, #232]	@ (8000c4c <SystemInit+0x11c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a39      	ldr	r2, [pc, #228]	@ (8000c4c <SystemInit+0x11c>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b6c:	4b37      	ldr	r3, [pc, #220]	@ (8000c4c <SystemInit+0x11c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b72:	4b36      	ldr	r3, [pc, #216]	@ (8000c4c <SystemInit+0x11c>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4935      	ldr	r1, [pc, #212]	@ (8000c4c <SystemInit+0x11c>)
 8000b78:	4b35      	ldr	r3, [pc, #212]	@ (8000c50 <SystemInit+0x120>)
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b7e:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <SystemInit+0x118>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <SystemInit+0x118>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f023 030f 	bic.w	r3, r3, #15
 8000b92:	4a2d      	ldr	r2, [pc, #180]	@ (8000c48 <SystemInit+0x118>)
 8000b94:	f043 0307 	orr.w	r3, r3, #7
 8000b98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <SystemInit+0x11c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <SystemInit+0x11c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ba6:	4b29      	ldr	r3, [pc, #164]	@ (8000c4c <SystemInit+0x11c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bac:	4b27      	ldr	r3, [pc, #156]	@ (8000c4c <SystemInit+0x11c>)
 8000bae:	4a29      	ldr	r2, [pc, #164]	@ (8000c54 <SystemInit+0x124>)
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bb2:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <SystemInit+0x11c>)
 8000bb4:	4a28      	ldr	r2, [pc, #160]	@ (8000c58 <SystemInit+0x128>)
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	@ (8000c4c <SystemInit+0x11c>)
 8000bba:	4a28      	ldr	r2, [pc, #160]	@ (8000c5c <SystemInit+0x12c>)
 8000bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <SystemInit+0x11c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <SystemInit+0x11c>)
 8000bc6:	4a25      	ldr	r2, [pc, #148]	@ (8000c5c <SystemInit+0x12c>)
 8000bc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bca:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <SystemInit+0x11c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <SystemInit+0x11c>)
 8000bd2:	4a22      	ldr	r2, [pc, #136]	@ (8000c5c <SystemInit+0x12c>)
 8000bd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <SystemInit+0x11c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <SystemInit+0x11c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c4c <SystemInit+0x11c>)
 8000be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000be6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <SystemInit+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <SystemInit+0x130>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <SystemInit+0x134>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bfa:	d202      	bcs.n	8000c02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <SystemInit+0x138>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c02:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <SystemInit+0x11c>)
 8000c04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d113      	bne.n	8000c38 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <SystemInit+0x11c>)
 8000c12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c16:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <SystemInit+0x11c>)
 8000c18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <SystemInit+0x13c>)
 8000c22:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c26:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <SystemInit+0x11c>)
 8000c2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c2e:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <SystemInit+0x11c>)
 8000c30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	52002000 	.word	0x52002000
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c54:	02020200 	.word	0x02020200
 8000c58:	01ff0000 	.word	0x01ff0000
 8000c5c:	01010280 	.word	0x01010280
 8000c60:	5c001000 	.word	0x5c001000
 8000c64:	ffff0000 	.word	0xffff0000
 8000c68:	51008108 	.word	0x51008108
 8000c6c:	52004000 	.word	0x52004000

08000c70 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <ExitRun0Mode+0x2c>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <ExitRun0Mode+0x2c>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c80:	bf00      	nop
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <ExitRun0Mode+0x2c>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f9      	beq.n	8000c82 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	58024800 	.word	0x58024800

08000ca0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000cce:	22ef      	movs	r2, #239	@ 0xef
 8000cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000cda:	2263      	movs	r2, #99	@ 0x63
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cea:	4818      	ldr	r0, [pc, #96]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000cec:	f006 fc4e 	bl	800758c <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cf6:	f7ff fe5b 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4810      	ldr	r0, [pc, #64]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000d0a:	f007 fb85 	bl	8008418 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d14:	f7ff fe4c 	bl	80009b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	@ 0x60
 8000d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000d1c:	2332      	movs	r3, #50	@ 0x32
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000d30:	f006 fe9a 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d3a:	f7ff fe39 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM2_Init+0xac>)
 8000d40:	f000 f826 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	@ 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	24000374 	.word	0x24000374

08000d50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d60:	d10e      	bne.n	8000d80 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d68:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db0:	d11f      	bne.n	8000df2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_TIM_MspPostInit+0x6c>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <HAL_TIM_MspPostInit+0x6c>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_TIM_MspPostInit+0x6c>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <HAL_TIM_MspPostInit+0x70>)
 8000dee:	f003 fa9b 	bl	8004328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58020400 	.word	0x58020400

08000e04 <MX_UART8_Init>:
UART_HandleTypeDef huart8;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <MX_UART8_Init+0x94>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000e4c:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e4e:	f007 fb8f 	bl	8008570 <HAL_UART_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000e58:	f7ff fdaa 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e60:	f009 fb1d 	bl	800a49e <HAL_UARTEx_SetTxFifoThreshold>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000e6a:	f7ff fda1 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e72:	f009 fb52 	bl	800a51a <HAL_UARTEx_SetRxFifoThreshold>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f7ff fd98 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_UART8_Init+0x90>)
 8000e82:	f009 fad3 	bl	800a42c <HAL_UARTEx_DisableFifoMode>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f7ff fd90 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240003c0 	.word	0x240003c0
 8000e98:	40007c00 	.word	0x40007c00

08000e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ba      	sub	sp, #232	@ 0xe8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	22c0      	movs	r2, #192	@ 0xc0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00b f88b 	bl	800bfd8 <memset>
  if(uartHandle->Instance==UART8)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a42      	ldr	r2, [pc, #264]	@ (8000fd0 <HAL_UART_MspInit+0x134>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d17d      	bne.n	8000fc8 <HAL_UART_MspInit+0x12c>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000ecc:	f04f 0202 	mov.w	r2, #2
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 fc4c 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eee:	f7ff fd5f 	bl	80009b0 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ef2:	4b38      	ldr	r3, [pc, #224]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ef8:	4a36      	ldr	r2, [pc, #216]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000efe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f02:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f16:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f20:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <HAL_UART_MspInit+0x138>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f46:	2308      	movs	r3, #8
 8000f48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4821      	ldr	r0, [pc, #132]	@ (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000f54:	f003 f9e8 	bl	8004328 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8000f58:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f5c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f60:	2251      	movs	r2, #81	@ 0x51
 8000f62:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f92:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000f9c:	f000 fb7c 	bl	8001698 <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000fa6:	f7ff fd03 	bl	80009b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_UART_MspInit+0x140>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2053      	movs	r0, #83	@ 0x53
 8000fbe:	f000 facb 	bl	8001558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000fc2:	2053      	movs	r0, #83	@ 0x53
 8000fc4:	f000 fae2 	bl	800158c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8000fc8:	bf00      	nop
 8000fca:	37e8      	adds	r7, #232	@ 0xe8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40007c00 	.word	0x40007c00
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58021000 	.word	0x58021000
 8000fdc:	24000454 	.word	0x24000454
 8000fe0:	40020010 	.word	0x40020010

08000fe4 <HAL_UART_RxHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    if(huart->Instance==UART8){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_UART_RxHalfCpltCallback+0x30>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d109      	bne.n	800100a <HAL_UART_RxHalfCpltCallback+0x26>
    	ylidar_write_index=512;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_UART_RxHalfCpltCallback+0x34>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ffc:	801a      	strh	r2, [r3, #0]
    	osSignalSet(lidarparseHandle, SIG_LIDAR_HALF);
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <HAL_UART_RxHalfCpltCallback+0x38>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2101      	movs	r1, #1
 8001004:	4618      	mov	r0, r3
 8001006:	f009 fba7 	bl	800a758 <osSignalSet>

    }
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40007c00 	.word	0x40007c00
 8001018:	240004ce 	.word	0x240004ce
 800101c:	24000084 	.word	0x24000084

08001020 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART8){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_UART_RxCpltCallback+0x30>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d109      	bne.n	8001046 <HAL_UART_RxCpltCallback+0x26>
    	ylidar_write_index=1023;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <HAL_UART_RxCpltCallback+0x34>)
 8001034:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001038:	801a      	strh	r2, [r3, #0]
    	osSignalSet(lidarparseHandle, SIG_LIDAR_HALF);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <HAL_UART_RxCpltCallback+0x38>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f009 fb89 	bl	800a758 <osSignalSet>

	    }
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40007c00 	.word	0x40007c00
 8001054:	240004ce 	.word	0x240004ce
 8001058:	24000084 	.word	0x24000084

0800105c <ylidar_fsm>:
float LSA=0.0;



void ylidar_fsm(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
    switch (ydlidarstate)
 8001062:	4b8f      	ldr	r3, [pc, #572]	@ (80012a0 <ylidar_fsm+0x244>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b03      	cmp	r3, #3
 8001068:	f200 8110 	bhi.w	800128c <ylidar_fsm+0x230>
 800106c:	a201      	add	r2, pc, #4	@ (adr r2, 8001074 <ylidar_fsm+0x18>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	08001085 	.word	0x08001085
 8001078:	080010ed 	.word	0x080010ed
 800107c:	08001143 	.word	0x08001143
 8001080:	080011d9 	.word	0x080011d9
    {
        case FSM_STATE_0:

        	if((ylidar_circular_buffer[ylidar_read_index]==0xAA)&& (ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]==0x55)){
 8001084:	4b87      	ldr	r3, [pc, #540]	@ (80012a4 <ylidar_fsm+0x248>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b87      	ldr	r3, [pc, #540]	@ (80012a8 <ylidar_fsm+0x24c>)
 800108c:	5c9b      	ldrb	r3, [r3, r2]
 800108e:	2baa      	cmp	r3, #170	@ 0xaa
 8001090:	d11e      	bne.n	80010d0 <ylidar_fsm+0x74>
 8001092:	4b84      	ldr	r3, [pc, #528]	@ (80012a4 <ylidar_fsm+0x248>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	425a      	negs	r2, r3
 800109a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800109e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010a2:	bf58      	it	pl
 80010a4:	4253      	negpl	r3, r2
 80010a6:	4a80      	ldr	r2, [pc, #512]	@ (80012a8 <ylidar_fsm+0x24c>)
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	2b55      	cmp	r3, #85	@ 0x55
 80010ac:	d110      	bne.n	80010d0 <ylidar_fsm+0x74>
        		ydlidarstate=FSM_STATE_1;
 80010ae:	4b7c      	ldr	r3, [pc, #496]	@ (80012a0 <ylidar_fsm+0x244>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE;
 80010b4:	4b7b      	ldr	r3, [pc, #492]	@ (80012a4 <ylidar_fsm+0x248>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	3302      	adds	r3, #2
 80010ba:	425a      	negs	r2, r3
 80010bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010c4:	bf58      	it	pl
 80010c6:	4253      	negpl	r3, r2
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b76      	ldr	r3, [pc, #472]	@ (80012a4 <ylidar_fsm+0x248>)
 80010cc:	801a      	strh	r2, [r3, #0]
        	}
        	else{
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
        	}

            break;
 80010ce:	e0e1      	b.n	8001294 <ylidar_fsm+0x238>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 80010d0:	4b74      	ldr	r3, [pc, #464]	@ (80012a4 <ylidar_fsm+0x248>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	425a      	negs	r2, r3
 80010d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010e0:	bf58      	it	pl
 80010e2:	4253      	negpl	r3, r2
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b6f      	ldr	r3, [pc, #444]	@ (80012a4 <ylidar_fsm+0x248>)
 80010e8:	801a      	strh	r2, [r3, #0]
            break;
 80010ea:	e0d3      	b.n	8001294 <ylidar_fsm+0x238>

        case FSM_STATE_1:

        	if(!(ylidar_circular_buffer[ylidar_read_index]&0x01)){
 80010ec:	4b6d      	ldr	r3, [pc, #436]	@ (80012a4 <ylidar_fsm+0x248>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b6d      	ldr	r3, [pc, #436]	@ (80012a8 <ylidar_fsm+0x24c>)
 80010f4:	5c9b      	ldrb	r3, [r3, r2]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d110      	bne.n	8001120 <ylidar_fsm+0xc4>
        		ydlidarstate=FSM_STATE_2;
 80010fe:	4b68      	ldr	r3, [pc, #416]	@ (80012a0 <ylidar_fsm+0x244>)
 8001100:	2202      	movs	r2, #2
 8001102:	701a      	strb	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 8001104:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <ylidar_fsm+0x248>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	425a      	negs	r2, r3
 800110c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001110:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001114:	bf58      	it	pl
 8001116:	4253      	negpl	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b62      	ldr	r3, [pc, #392]	@ (80012a4 <ylidar_fsm+0x248>)
 800111c:	801a      	strh	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
        		ydlidarstate=FSM_STATE_0;
        	}


            break;
 800111e:	e0b9      	b.n	8001294 <ylidar_fsm+0x238>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 8001120:	4b60      	ldr	r3, [pc, #384]	@ (80012a4 <ylidar_fsm+0x248>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	425a      	negs	r2, r3
 8001128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800112c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001130:	bf58      	it	pl
 8001132:	4253      	negpl	r3, r2
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b5b      	ldr	r3, [pc, #364]	@ (80012a4 <ylidar_fsm+0x248>)
 8001138:	801a      	strh	r2, [r3, #0]
        		ydlidarstate=FSM_STATE_0;
 800113a:	4b59      	ldr	r3, [pc, #356]	@ (80012a0 <ylidar_fsm+0x244>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
            break;
 8001140:	e0a8      	b.n	8001294 <ylidar_fsm+0x238>

        case FSM_STATE_2:

        	current_point_number=ylidar_circular_buffer[ylidar_read_index];
 8001142:	4b58      	ldr	r3, [pc, #352]	@ (80012a4 <ylidar_fsm+0x248>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b57      	ldr	r3, [pc, #348]	@ (80012a8 <ylidar_fsm+0x24c>)
 800114a:	5c9a      	ldrb	r2, [r3, r2]
 800114c:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <ylidar_fsm+0x250>)
 800114e:	701a      	strb	r2, [r3, #0]
        	uint16_t available=0;
 8001150:	2300      	movs	r3, #0
 8001152:	80fb      	strh	r3, [r7, #6]

        	if (ylidar_write_index >= ylidar_read_index) {
 8001154:	4b56      	ldr	r3, [pc, #344]	@ (80012b0 <ylidar_fsm+0x254>)
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	4b52      	ldr	r3, [pc, #328]	@ (80012a4 <ylidar_fsm+0x248>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d306      	bcc.n	800116e <ylidar_fsm+0x112>
        	    available = ylidar_write_index - ylidar_read_index;
 8001160:	4b53      	ldr	r3, [pc, #332]	@ (80012b0 <ylidar_fsm+0x254>)
 8001162:	881a      	ldrh	r2, [r3, #0]
 8001164:	4b4f      	ldr	r3, [pc, #316]	@ (80012a4 <ylidar_fsm+0x248>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	e008      	b.n	8001180 <ylidar_fsm+0x124>
        	} else {
        	    available = (YLIDAR_CIRC_BUF_SIZE - ylidar_read_index) + ylidar_write_index;
 800116e:	4b50      	ldr	r3, [pc, #320]	@ (80012b0 <ylidar_fsm+0x254>)
 8001170:	881a      	ldrh	r2, [r3, #0]
 8001172:	4b4c      	ldr	r3, [pc, #304]	@ (80012a4 <ylidar_fsm+0x248>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b29b      	uxth	r3, r3
 800117a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800117e:	80fb      	strh	r3, [r7, #6]
        	}

        	uint16_t needed=current_point_number*2+7;
 8001180:	4b4a      	ldr	r3, [pc, #296]	@ (80012ac <ylidar_fsm+0x250>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	3307      	adds	r3, #7
 800118a:	80bb      	strh	r3, [r7, #4]

        	if(needed<=available){
 800118c:	88ba      	ldrh	r2, [r7, #4]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	429a      	cmp	r2, r3
 8001192:	d810      	bhi.n	80011b6 <ylidar_fsm+0x15a>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 8001194:	4b43      	ldr	r3, [pc, #268]	@ (80012a4 <ylidar_fsm+0x248>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	425a      	negs	r2, r3
 800119c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011a0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011a4:	bf58      	it	pl
 80011a6:	4253      	negpl	r3, r2
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b3e      	ldr	r3, [pc, #248]	@ (80012a4 <ylidar_fsm+0x248>)
 80011ac:	801a      	strh	r2, [r3, #0]
        		ydlidarstate=FSM_STATE_0;
 80011ae:	4b3c      	ldr	r3, [pc, #240]	@ (80012a0 <ylidar_fsm+0x244>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
        		ydlidarstate=FSM_STATE_3;
        	}


            break;
 80011b4:	e06e      	b.n	8001294 <ylidar_fsm+0x238>
        		ylidar_read_index=(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <ylidar_fsm+0x248>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	425a      	negs	r2, r3
 80011be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011c6:	bf58      	it	pl
 80011c8:	4253      	negpl	r3, r2
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <ylidar_fsm+0x248>)
 80011ce:	801a      	strh	r2, [r3, #0]
        		ydlidarstate=FSM_STATE_3;
 80011d0:	4b33      	ldr	r3, [pc, #204]	@ (80012a0 <ylidar_fsm+0x244>)
 80011d2:	2203      	movs	r2, #3
 80011d4:	701a      	strb	r2, [r3, #0]
            break;
 80011d6:	e05d      	b.n	8001294 <ylidar_fsm+0x238>

        case FSM_STATE_3:

        	FSA=(float)(((ylidar_circular_buffer[(ylidar_read_index+1)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[ylidar_read_index])>>1)/64.0;
 80011d8:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <ylidar_fsm+0x248>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	425a      	negs	r2, r3
 80011e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011e8:	bf58      	it	pl
 80011ea:	4253      	negpl	r3, r2
 80011ec:	4a2e      	ldr	r2, [pc, #184]	@ (80012a8 <ylidar_fsm+0x24c>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	4a2c      	ldr	r2, [pc, #176]	@ (80012a4 <ylidar_fsm+0x248>)
 80011f4:	8812      	ldrh	r2, [r2, #0]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4a2b      	ldr	r2, [pc, #172]	@ (80012a8 <ylidar_fsm+0x24c>)
 80011fa:	5c52      	ldrb	r2, [r2, r1]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	105b      	asrs	r3, r3, #1
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001208:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80012b4 <ylidar_fsm+0x258>
 800120c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001210:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <ylidar_fsm+0x25c>)
 8001212:	edc3 7a00 	vstr	s15, [r3]
        	LSA=(float)(((ylidar_circular_buffer[(ylidar_read_index+3)%YLIDAR_CIRC_BUF_SIZE]<<8) | ylidar_circular_buffer[(ylidar_read_index+2)%YLIDAR_CIRC_BUF_SIZE])>>1)/64.0;
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <ylidar_fsm+0x248>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	3303      	adds	r3, #3
 800121c:	425a      	negs	r2, r3
 800121e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001222:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001226:	bf58      	it	pl
 8001228:	4253      	negpl	r3, r2
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <ylidar_fsm+0x24c>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	021a      	lsls	r2, r3, #8
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <ylidar_fsm+0x248>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	3302      	adds	r3, #2
 8001236:	4259      	negs	r1, r3
 8001238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800123c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001240:	bf58      	it	pl
 8001242:	424b      	negpl	r3, r1
 8001244:	4918      	ldr	r1, [pc, #96]	@ (80012a8 <ylidar_fsm+0x24c>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	4313      	orrs	r3, r2
 800124a:	105b      	asrs	r3, r3, #1
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001254:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80012b4 <ylidar_fsm+0x258>
 8001258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125c:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <ylidar_fsm+0x260>)
 800125e:	edc3 7a00 	vstr	s15, [r3]

        	ylidar_read_index=(ylidar_read_index+(current_point_number*2))%YLIDAR_CIRC_BUF_SIZE;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <ylidar_fsm+0x248>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <ylidar_fsm+0x250>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	425a      	negs	r2, r3
 8001272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001276:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800127a:	bf58      	it	pl
 800127c:	4253      	negpl	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <ylidar_fsm+0x248>)
 8001282:	801a      	strh	r2, [r3, #0]
        	ydlidarstate=FSM_STATE_0;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <ylidar_fsm+0x244>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]


            break;
 800128a:	e003      	b.n	8001294 <ylidar_fsm+0x238>

        default:
        	ydlidarstate=FSM_STATE_0;
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <ylidar_fsm+0x244>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
            break;
 8001292:	bf00      	nop
    }

}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	240008d0 	.word	0x240008d0
 80012a4:	240004cc 	.word	0x240004cc
 80012a8:	240004d0 	.word	0x240004d0
 80012ac:	240008d1 	.word	0x240008d1
 80012b0:	240004ce 	.word	0x240004ce
 80012b4:	42800000 	.word	0x42800000
 80012b8:	240008d4 	.word	0x240008d4
 80012bc:	240008d8 	.word	0x240008d8

080012c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80012fc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80012c4:	f7ff fcd4 	bl	8000c70 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c8:	f7ff fc32 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	@ (8001304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f00a fed7 	bl	800c0a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fa79 	bl	80007ec <main>
  bx  lr
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001300:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001304:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001308:	0800c25c 	.word	0x0800c25c
  ldr r2, =_sbss
 800130c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001310:	24004774 	.word	0x24004774

08001314 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC3_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131e:	2003      	movs	r0, #3
 8001320:	f000 f90f 	bl	8001542 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001324:	f004 f814 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_Init+0x68>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	4913      	ldr	r1, [pc, #76]	@ (8001384 <HAL_Init+0x6c>)
 8001336:	5ccb      	ldrb	r3, [r1, r3]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_Init+0x68>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <HAL_Init+0x6c>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
 8001358:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <HAL_Init+0x70>)
 800135a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800135c:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <HAL_Init+0x74>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	200f      	movs	r0, #15
 8001364:	f7ff fb48 	bl	80009f8 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e002      	b.n	8001378 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001372:	f7ff fb23 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	58024400 	.word	0x58024400
 8001384:	0800c20c 	.word	0x0800c20c
 8001388:	24000004 	.word	0x24000004
 800138c:	24000000 	.word	0x24000000

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2400000c 	.word	0x2400000c
 80013b4:	240008dc 	.word	0x240008dc

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	240008dc 	.word	0x240008dc

080013d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetREVID+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0c1b      	lsrs	r3, r3, #16
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	5c001000 	.word	0x5c001000

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	4313      	orrs	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00
 800142c:	05fa0000 	.word	0x05fa0000

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	@ (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	@ (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	@ 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	@ 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff4c 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001566:	f7ff ff63 	bl	8001430 <__NVIC_GetPriorityGrouping>
 800156a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	6978      	ldr	r0, [r7, #20]
 8001572:	f7ff ffb3 	bl	80014dc <NVIC_EncodePriority>
 8001576:	4602      	mov	r2, r0
 8001578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff82 	bl	8001488 <__NVIC_SetPriority>
}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff56 	bl	800144c <__NVIC_EnableIRQ>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015ac:	f3bf 8f5f 	dmb	sy
}
 80015b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <HAL_MPU_Disable+0x28>)
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_MPU_Disable+0x28>)
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_MPU_Disable+0x2c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	e000ed90 	.word	0xe000ed90

080015d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <HAL_MPU_Enable+0x38>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_MPU_Enable+0x3c>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_MPU_Enable+0x3c>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015f6:	f3bf 8f4f 	dsb	sy
}
 80015fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015fc:	f3bf 8f6f 	isb	sy
}
 8001600:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed90 	.word	0xe000ed90
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	785a      	ldrb	r2, [r3, #1]
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 8001626:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001634:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
 8001640:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7adb      	ldrb	r3, [r3, #11]
 8001646:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a9b      	ldrb	r3, [r3, #10]
 800164e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7b5b      	ldrb	r3, [r3, #13]
 8001656:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001658:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7b9b      	ldrb	r3, [r3, #14]
 800165e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7bdb      	ldrb	r3, [r3, #15]
 8001666:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a5b      	ldrb	r3, [r3, #9]
 800166e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7a1b      	ldrb	r3, [r3, #8]
 8001676:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001678:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001682:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001684:	6113      	str	r3, [r2, #16]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed90 	.word	0xe000ed90

08001698 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff fe8a 	bl	80013b8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e316      	b.n	8001cde <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a66      	ldr	r2, [pc, #408]	@ (8001850 <HAL_DMA_Init+0x1b8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d04a      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a65      	ldr	r2, [pc, #404]	@ (8001854 <HAL_DMA_Init+0x1bc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d045      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a63      	ldr	r2, [pc, #396]	@ (8001858 <HAL_DMA_Init+0x1c0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d040      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a62      	ldr	r2, [pc, #392]	@ (800185c <HAL_DMA_Init+0x1c4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d03b      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a60      	ldr	r2, [pc, #384]	@ (8001860 <HAL_DMA_Init+0x1c8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d036      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001864 <HAL_DMA_Init+0x1cc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d031      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001868 <HAL_DMA_Init+0x1d0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d02c      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5c      	ldr	r2, [pc, #368]	@ (800186c <HAL_DMA_Init+0x1d4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d027      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a5a      	ldr	r2, [pc, #360]	@ (8001870 <HAL_DMA_Init+0x1d8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d022      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a59      	ldr	r2, [pc, #356]	@ (8001874 <HAL_DMA_Init+0x1dc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d01d      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a57      	ldr	r2, [pc, #348]	@ (8001878 <HAL_DMA_Init+0x1e0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d018      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a56      	ldr	r2, [pc, #344]	@ (800187c <HAL_DMA_Init+0x1e4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d013      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a54      	ldr	r2, [pc, #336]	@ (8001880 <HAL_DMA_Init+0x1e8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00e      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a53      	ldr	r2, [pc, #332]	@ (8001884 <HAL_DMA_Init+0x1ec>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d009      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a51      	ldr	r2, [pc, #324]	@ (8001888 <HAL_DMA_Init+0x1f0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d004      	beq.n	8001750 <HAL_DMA_Init+0xb8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a50      	ldr	r2, [pc, #320]	@ (800188c <HAL_DMA_Init+0x1f4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Init+0xbc>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_DMA_Init+0xbe>
 8001754:	2300      	movs	r3, #0
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 813b 	beq.w	80019d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a37      	ldr	r2, [pc, #220]	@ (8001850 <HAL_DMA_Init+0x1b8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d04a      	beq.n	800180c <HAL_DMA_Init+0x174>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a36      	ldr	r2, [pc, #216]	@ (8001854 <HAL_DMA_Init+0x1bc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d045      	beq.n	800180c <HAL_DMA_Init+0x174>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a34      	ldr	r2, [pc, #208]	@ (8001858 <HAL_DMA_Init+0x1c0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d040      	beq.n	800180c <HAL_DMA_Init+0x174>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a33      	ldr	r2, [pc, #204]	@ (800185c <HAL_DMA_Init+0x1c4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d03b      	beq.n	800180c <HAL_DMA_Init+0x174>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a31      	ldr	r2, [pc, #196]	@ (8001860 <HAL_DMA_Init+0x1c8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d036      	beq.n	800180c <HAL_DMA_Init+0x174>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a30      	ldr	r2, [pc, #192]	@ (8001864 <HAL_DMA_Init+0x1cc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d031      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001868 <HAL_DMA_Init+0x1d0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d02c      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2d      	ldr	r2, [pc, #180]	@ (800186c <HAL_DMA_Init+0x1d4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d027      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001870 <HAL_DMA_Init+0x1d8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d022      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001874 <HAL_DMA_Init+0x1dc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d01d      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a28      	ldr	r2, [pc, #160]	@ (8001878 <HAL_DMA_Init+0x1e0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d018      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a27      	ldr	r2, [pc, #156]	@ (800187c <HAL_DMA_Init+0x1e4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d013      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a25      	ldr	r2, [pc, #148]	@ (8001880 <HAL_DMA_Init+0x1e8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00e      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a24      	ldr	r2, [pc, #144]	@ (8001884 <HAL_DMA_Init+0x1ec>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d009      	beq.n	800180c <HAL_DMA_Init+0x174>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a22      	ldr	r2, [pc, #136]	@ (8001888 <HAL_DMA_Init+0x1f0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d004      	beq.n	800180c <HAL_DMA_Init+0x174>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a21      	ldr	r2, [pc, #132]	@ (800188c <HAL_DMA_Init+0x1f4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d108      	bne.n	800181e <HAL_DMA_Init+0x186>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e007      	b.n	800182e <HAL_DMA_Init+0x196>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800182e:	e02f      	b.n	8001890 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001830:	f7ff fdc2 	bl	80013b8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b05      	cmp	r3, #5
 800183c:	d928      	bls.n	8001890 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e246      	b.n	8001cde <HAL_DMA_Init+0x646>
 8001850:	40020010 	.word	0x40020010
 8001854:	40020028 	.word	0x40020028
 8001858:	40020040 	.word	0x40020040
 800185c:	40020058 	.word	0x40020058
 8001860:	40020070 	.word	0x40020070
 8001864:	40020088 	.word	0x40020088
 8001868:	400200a0 	.word	0x400200a0
 800186c:	400200b8 	.word	0x400200b8
 8001870:	40020410 	.word	0x40020410
 8001874:	40020428 	.word	0x40020428
 8001878:	40020440 	.word	0x40020440
 800187c:	40020458 	.word	0x40020458
 8001880:	40020470 	.word	0x40020470
 8001884:	40020488 	.word	0x40020488
 8001888:	400204a0 	.word	0x400204a0
 800188c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1c8      	bne.n	8001830 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4b83      	ldr	r3, [pc, #524]	@ (8001ab8 <HAL_DMA_Init+0x420>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d107      	bne.n	80018f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ec:	4313      	orrs	r3, r2
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018f4:	4b71      	ldr	r3, [pc, #452]	@ (8001abc <HAL_DMA_Init+0x424>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b71      	ldr	r3, [pc, #452]	@ (8001ac0 <HAL_DMA_Init+0x428>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001900:	d328      	bcc.n	8001954 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b28      	cmp	r3, #40	@ 0x28
 8001908:	d903      	bls.n	8001912 <HAL_DMA_Init+0x27a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001910:	d917      	bls.n	8001942 <HAL_DMA_Init+0x2aa>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b3e      	cmp	r3, #62	@ 0x3e
 8001918:	d903      	bls.n	8001922 <HAL_DMA_Init+0x28a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b42      	cmp	r3, #66	@ 0x42
 8001920:	d90f      	bls.n	8001942 <HAL_DMA_Init+0x2aa>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b46      	cmp	r3, #70	@ 0x46
 8001928:	d903      	bls.n	8001932 <HAL_DMA_Init+0x29a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b48      	cmp	r3, #72	@ 0x48
 8001930:	d907      	bls.n	8001942 <HAL_DMA_Init+0x2aa>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b4e      	cmp	r3, #78	@ 0x4e
 8001938:	d905      	bls.n	8001946 <HAL_DMA_Init+0x2ae>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b52      	cmp	r3, #82	@ 0x52
 8001940:	d801      	bhi.n	8001946 <HAL_DMA_Init+0x2ae>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_DMA_Init+0x2b0>
 8001946:	2300      	movs	r3, #0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001952:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f023 0307 	bic.w	r3, r3, #7
 800196a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	4313      	orrs	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	2b04      	cmp	r3, #4
 800197c:	d117      	bne.n	80019ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00e      	beq.n	80019ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f002 fb3f 	bl	8004014 <DMA_CheckFifoParam>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e197      	b.n	8001cde <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f002 fa7a 	bl	8003eb0 <DMA_CalcBaseAndBitshift>
 80019bc:	4603      	mov	r3, r0
 80019be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	223f      	movs	r2, #63	@ 0x3f
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	e0cd      	b.n	8001b6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac4 <HAL_DMA_Init+0x42c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_DMA_Init+0x38a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a39      	ldr	r2, [pc, #228]	@ (8001ac8 <HAL_DMA_Init+0x430>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01d      	beq.n	8001a22 <HAL_DMA_Init+0x38a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a38      	ldr	r2, [pc, #224]	@ (8001acc <HAL_DMA_Init+0x434>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d018      	beq.n	8001a22 <HAL_DMA_Init+0x38a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a36      	ldr	r2, [pc, #216]	@ (8001ad0 <HAL_DMA_Init+0x438>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_DMA_Init+0x38a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a35      	ldr	r2, [pc, #212]	@ (8001ad4 <HAL_DMA_Init+0x43c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00e      	beq.n	8001a22 <HAL_DMA_Init+0x38a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <HAL_DMA_Init+0x440>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <HAL_DMA_Init+0x38a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a32      	ldr	r2, [pc, #200]	@ (8001adc <HAL_DMA_Init+0x444>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_DMA_Init+0x38a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ae0 <HAL_DMA_Init+0x448>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Init+0x38e>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_Init+0x390>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8097 	beq.w	8001b5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <HAL_DMA_Init+0x42c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d021      	beq.n	8001a7c <HAL_DMA_Init+0x3e4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	@ (8001ac8 <HAL_DMA_Init+0x430>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01c      	beq.n	8001a7c <HAL_DMA_Init+0x3e4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a21      	ldr	r2, [pc, #132]	@ (8001acc <HAL_DMA_Init+0x434>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d017      	beq.n	8001a7c <HAL_DMA_Init+0x3e4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad0 <HAL_DMA_Init+0x438>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d012      	beq.n	8001a7c <HAL_DMA_Init+0x3e4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <HAL_DMA_Init+0x43c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_DMA_Init+0x3e4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad8 <HAL_DMA_Init+0x440>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d008      	beq.n	8001a7c <HAL_DMA_Init+0x3e4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <HAL_DMA_Init+0x444>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d003      	beq.n	8001a7c <HAL_DMA_Init+0x3e4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	@ (8001ae0 <HAL_DMA_Init+0x448>)
 8001a7a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <HAL_DMA_Init+0x44c>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b40      	cmp	r3, #64	@ 0x40
 8001aa2:	d021      	beq.n	8001ae8 <HAL_DMA_Init+0x450>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b80      	cmp	r3, #128	@ 0x80
 8001aaa:	d102      	bne.n	8001ab2 <HAL_DMA_Init+0x41a>
 8001aac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab0:	e01b      	b.n	8001aea <HAL_DMA_Init+0x452>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e019      	b.n	8001aea <HAL_DMA_Init+0x452>
 8001ab6:	bf00      	nop
 8001ab8:	fe10803f 	.word	0xfe10803f
 8001abc:	5c001000 	.word	0x5c001000
 8001ac0:	ffff0000 	.word	0xffff0000
 8001ac4:	58025408 	.word	0x58025408
 8001ac8:	5802541c 	.word	0x5802541c
 8001acc:	58025430 	.word	0x58025430
 8001ad0:	58025444 	.word	0x58025444
 8001ad4:	58025458 	.word	0x58025458
 8001ad8:	5802546c 	.word	0x5802546c
 8001adc:	58025480 	.word	0x58025480
 8001ae0:	58025494 	.word	0x58025494
 8001ae4:	fffe000f 	.word	0xfffe000f
 8001ae8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001af0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce8 <HAL_DMA_Init+0x650>)
 8001b30:	4413      	add	r3, r2
 8001b32:	4a6e      	ldr	r2, [pc, #440]	@ (8001cec <HAL_DMA_Init+0x654>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	009a      	lsls	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f002 f9b5 	bl	8003eb0 <DMA_CalcBaseAndBitshift>
 8001b46:	4603      	mov	r3, r0
 8001b48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	e008      	b.n	8001b6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2240      	movs	r2, #64	@ 0x40
 8001b60:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2203      	movs	r2, #3
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0b7      	b.n	8001cde <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf0 <HAL_DMA_Init+0x658>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d072      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf4 <HAL_DMA_Init+0x65c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d06d      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf8 <HAL_DMA_Init+0x660>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d068      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5a      	ldr	r2, [pc, #360]	@ (8001cfc <HAL_DMA_Init+0x664>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d063      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a59      	ldr	r2, [pc, #356]	@ (8001d00 <HAL_DMA_Init+0x668>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d05e      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a57      	ldr	r2, [pc, #348]	@ (8001d04 <HAL_DMA_Init+0x66c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d059      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a56      	ldr	r2, [pc, #344]	@ (8001d08 <HAL_DMA_Init+0x670>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d054      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a54      	ldr	r2, [pc, #336]	@ (8001d0c <HAL_DMA_Init+0x674>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d04f      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a53      	ldr	r2, [pc, #332]	@ (8001d10 <HAL_DMA_Init+0x678>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04a      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	@ (8001d14 <HAL_DMA_Init+0x67c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d045      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <HAL_DMA_Init+0x680>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d040      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4e      	ldr	r2, [pc, #312]	@ (8001d1c <HAL_DMA_Init+0x684>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d03b      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <HAL_DMA_Init+0x688>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d036      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8001d24 <HAL_DMA_Init+0x68c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a4a      	ldr	r2, [pc, #296]	@ (8001d28 <HAL_DMA_Init+0x690>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d02c      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a48      	ldr	r2, [pc, #288]	@ (8001d2c <HAL_DMA_Init+0x694>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d027      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a47      	ldr	r2, [pc, #284]	@ (8001d30 <HAL_DMA_Init+0x698>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a45      	ldr	r2, [pc, #276]	@ (8001d34 <HAL_DMA_Init+0x69c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01d      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a44      	ldr	r2, [pc, #272]	@ (8001d38 <HAL_DMA_Init+0x6a0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d018      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a42      	ldr	r2, [pc, #264]	@ (8001d3c <HAL_DMA_Init+0x6a4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a41      	ldr	r2, [pc, #260]	@ (8001d40 <HAL_DMA_Init+0x6a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00e      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a3f      	ldr	r2, [pc, #252]	@ (8001d44 <HAL_DMA_Init+0x6ac>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d48 <HAL_DMA_Init+0x6b0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_Init+0x5c6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a3c      	ldr	r2, [pc, #240]	@ (8001d4c <HAL_DMA_Init+0x6b4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_DMA_Init+0x5ca>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_Init+0x5cc>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d032      	beq.n	8001cce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f002 fa4f 	bl	800410c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b80      	cmp	r3, #128	@ 0x80
 8001c74:	d102      	bne.n	8001c7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <HAL_DMA_Init+0x624>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d80c      	bhi.n	8001cbc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f002 facc 	bl	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e008      	b.n	8001cce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	a7fdabf8 	.word	0xa7fdabf8
 8001cec:	cccccccd 	.word	0xcccccccd
 8001cf0:	40020010 	.word	0x40020010
 8001cf4:	40020028 	.word	0x40020028
 8001cf8:	40020040 	.word	0x40020040
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	40020070 	.word	0x40020070
 8001d04:	40020088 	.word	0x40020088
 8001d08:	400200a0 	.word	0x400200a0
 8001d0c:	400200b8 	.word	0x400200b8
 8001d10:	40020410 	.word	0x40020410
 8001d14:	40020428 	.word	0x40020428
 8001d18:	40020440 	.word	0x40020440
 8001d1c:	40020458 	.word	0x40020458
 8001d20:	40020470 	.word	0x40020470
 8001d24:	40020488 	.word	0x40020488
 8001d28:	400204a0 	.word	0x400204a0
 8001d2c:	400204b8 	.word	0x400204b8
 8001d30:	58025408 	.word	0x58025408
 8001d34:	5802541c 	.word	0x5802541c
 8001d38:	58025430 	.word	0x58025430
 8001d3c:	58025444 	.word	0x58025444
 8001d40:	58025458 	.word	0x58025458
 8001d44:	5802546c 	.word	0x5802546c
 8001d48:	58025480 	.word	0x58025480
 8001d4c:	58025494 	.word	0x58025494

08001d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e226      	b.n	80021ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_DMA_Start_IT+0x2a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e21f      	b.n	80021ba <HAL_DMA_Start_IT+0x46a>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	f040 820a 	bne.w	80021a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a68      	ldr	r2, [pc, #416]	@ (8001f44 <HAL_DMA_Start_IT+0x1f4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d04a      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a66      	ldr	r2, [pc, #408]	@ (8001f48 <HAL_DMA_Start_IT+0x1f8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d045      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a65      	ldr	r2, [pc, #404]	@ (8001f4c <HAL_DMA_Start_IT+0x1fc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d040      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a63      	ldr	r2, [pc, #396]	@ (8001f50 <HAL_DMA_Start_IT+0x200>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d03b      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a62      	ldr	r2, [pc, #392]	@ (8001f54 <HAL_DMA_Start_IT+0x204>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d036      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a60      	ldr	r2, [pc, #384]	@ (8001f58 <HAL_DMA_Start_IT+0x208>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d031      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a5f      	ldr	r2, [pc, #380]	@ (8001f5c <HAL_DMA_Start_IT+0x20c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d02c      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f60 <HAL_DMA_Start_IT+0x210>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d027      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f64 <HAL_DMA_Start_IT+0x214>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <HAL_DMA_Start_IT+0x218>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01d      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a59      	ldr	r2, [pc, #356]	@ (8001f6c <HAL_DMA_Start_IT+0x21c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d018      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a57      	ldr	r2, [pc, #348]	@ (8001f70 <HAL_DMA_Start_IT+0x220>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a56      	ldr	r2, [pc, #344]	@ (8001f74 <HAL_DMA_Start_IT+0x224>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00e      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a54      	ldr	r2, [pc, #336]	@ (8001f78 <HAL_DMA_Start_IT+0x228>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a53      	ldr	r2, [pc, #332]	@ (8001f7c <HAL_DMA_Start_IT+0x22c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_DMA_Start_IT+0xee>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a51      	ldr	r2, [pc, #324]	@ (8001f80 <HAL_DMA_Start_IT+0x230>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d108      	bne.n	8001e50 <HAL_DMA_Start_IT+0x100>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e007      	b.n	8001e60 <HAL_DMA_Start_IT+0x110>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f001 fe76 	bl	8003b58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a34      	ldr	r2, [pc, #208]	@ (8001f44 <HAL_DMA_Start_IT+0x1f4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d04a      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a33      	ldr	r2, [pc, #204]	@ (8001f48 <HAL_DMA_Start_IT+0x1f8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d045      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <HAL_DMA_Start_IT+0x1fc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d040      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a30      	ldr	r2, [pc, #192]	@ (8001f50 <HAL_DMA_Start_IT+0x200>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d03b      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2e      	ldr	r2, [pc, #184]	@ (8001f54 <HAL_DMA_Start_IT+0x204>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d036      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f58 <HAL_DMA_Start_IT+0x208>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d031      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2b      	ldr	r2, [pc, #172]	@ (8001f5c <HAL_DMA_Start_IT+0x20c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d02c      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f60 <HAL_DMA_Start_IT+0x210>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d027      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a28      	ldr	r2, [pc, #160]	@ (8001f64 <HAL_DMA_Start_IT+0x214>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d022      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <HAL_DMA_Start_IT+0x218>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d01d      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a25      	ldr	r2, [pc, #148]	@ (8001f6c <HAL_DMA_Start_IT+0x21c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d018      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a24      	ldr	r2, [pc, #144]	@ (8001f70 <HAL_DMA_Start_IT+0x220>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d013      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <HAL_DMA_Start_IT+0x224>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00e      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a21      	ldr	r2, [pc, #132]	@ (8001f78 <HAL_DMA_Start_IT+0x228>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <HAL_DMA_Start_IT+0x22c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_DMA_Start_IT+0x1bc>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1e      	ldr	r2, [pc, #120]	@ (8001f80 <HAL_DMA_Start_IT+0x230>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_DMA_Start_IT+0x1c0>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_DMA_Start_IT+0x1c2>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d036      	beq.n	8001f84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 021e 	bic.w	r2, r3, #30
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0216 	orr.w	r2, r2, #22
 8001f28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d03e      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0208 	orr.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e035      	b.n	8001fb0 <HAL_DMA_Start_IT+0x260>
 8001f44:	40020010 	.word	0x40020010
 8001f48:	40020028 	.word	0x40020028
 8001f4c:	40020040 	.word	0x40020040
 8001f50:	40020058 	.word	0x40020058
 8001f54:	40020070 	.word	0x40020070
 8001f58:	40020088 	.word	0x40020088
 8001f5c:	400200a0 	.word	0x400200a0
 8001f60:	400200b8 	.word	0x400200b8
 8001f64:	40020410 	.word	0x40020410
 8001f68:	40020428 	.word	0x40020428
 8001f6c:	40020440 	.word	0x40020440
 8001f70:	40020458 	.word	0x40020458
 8001f74:	40020470 	.word	0x40020470
 8001f78:	40020488 	.word	0x40020488
 8001f7c:	400204a0 	.word	0x400204a0
 8001f80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 020e 	bic.w	r2, r3, #14
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020a 	orr.w	r2, r2, #10
 8001f96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0204 	orr.w	r2, r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a83      	ldr	r2, [pc, #524]	@ (80021c4 <HAL_DMA_Start_IT+0x474>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d072      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a82      	ldr	r2, [pc, #520]	@ (80021c8 <HAL_DMA_Start_IT+0x478>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d06d      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a80      	ldr	r2, [pc, #512]	@ (80021cc <HAL_DMA_Start_IT+0x47c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d068      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7f      	ldr	r2, [pc, #508]	@ (80021d0 <HAL_DMA_Start_IT+0x480>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d063      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a7d      	ldr	r2, [pc, #500]	@ (80021d4 <HAL_DMA_Start_IT+0x484>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d05e      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80021d8 <HAL_DMA_Start_IT+0x488>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d059      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a7a      	ldr	r2, [pc, #488]	@ (80021dc <HAL_DMA_Start_IT+0x48c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d054      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a79      	ldr	r2, [pc, #484]	@ (80021e0 <HAL_DMA_Start_IT+0x490>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04f      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a77      	ldr	r2, [pc, #476]	@ (80021e4 <HAL_DMA_Start_IT+0x494>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d04a      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a76      	ldr	r2, [pc, #472]	@ (80021e8 <HAL_DMA_Start_IT+0x498>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d045      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a74      	ldr	r2, [pc, #464]	@ (80021ec <HAL_DMA_Start_IT+0x49c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d040      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a73      	ldr	r2, [pc, #460]	@ (80021f0 <HAL_DMA_Start_IT+0x4a0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d03b      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a71      	ldr	r2, [pc, #452]	@ (80021f4 <HAL_DMA_Start_IT+0x4a4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d036      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a70      	ldr	r2, [pc, #448]	@ (80021f8 <HAL_DMA_Start_IT+0x4a8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d031      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <HAL_DMA_Start_IT+0x4ac>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02c      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6d      	ldr	r2, [pc, #436]	@ (8002200 <HAL_DMA_Start_IT+0x4b0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d027      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6b      	ldr	r2, [pc, #428]	@ (8002204 <HAL_DMA_Start_IT+0x4b4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d022      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6a      	ldr	r2, [pc, #424]	@ (8002208 <HAL_DMA_Start_IT+0x4b8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d01d      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a68      	ldr	r2, [pc, #416]	@ (800220c <HAL_DMA_Start_IT+0x4bc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d018      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a67      	ldr	r2, [pc, #412]	@ (8002210 <HAL_DMA_Start_IT+0x4c0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a65      	ldr	r2, [pc, #404]	@ (8002214 <HAL_DMA_Start_IT+0x4c4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00e      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a64      	ldr	r2, [pc, #400]	@ (8002218 <HAL_DMA_Start_IT+0x4c8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a62      	ldr	r2, [pc, #392]	@ (800221c <HAL_DMA_Start_IT+0x4cc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d004      	beq.n	80020a0 <HAL_DMA_Start_IT+0x350>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a61      	ldr	r2, [pc, #388]	@ (8002220 <HAL_DMA_Start_IT+0x4d0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Start_IT+0x354>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_Start_IT+0x356>
 80020a4:	2300      	movs	r3, #0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01a      	beq.n	80020e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a37      	ldr	r2, [pc, #220]	@ (80021c4 <HAL_DMA_Start_IT+0x474>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d04a      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a36      	ldr	r2, [pc, #216]	@ (80021c8 <HAL_DMA_Start_IT+0x478>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d045      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a34      	ldr	r2, [pc, #208]	@ (80021cc <HAL_DMA_Start_IT+0x47c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d040      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a33      	ldr	r2, [pc, #204]	@ (80021d0 <HAL_DMA_Start_IT+0x480>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d03b      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a31      	ldr	r2, [pc, #196]	@ (80021d4 <HAL_DMA_Start_IT+0x484>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d036      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a30      	ldr	r2, [pc, #192]	@ (80021d8 <HAL_DMA_Start_IT+0x488>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d031      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2e      	ldr	r2, [pc, #184]	@ (80021dc <HAL_DMA_Start_IT+0x48c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02c      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2d      	ldr	r2, [pc, #180]	@ (80021e0 <HAL_DMA_Start_IT+0x490>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d027      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2b      	ldr	r2, [pc, #172]	@ (80021e4 <HAL_DMA_Start_IT+0x494>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d022      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2a      	ldr	r2, [pc, #168]	@ (80021e8 <HAL_DMA_Start_IT+0x498>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d01d      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a28      	ldr	r2, [pc, #160]	@ (80021ec <HAL_DMA_Start_IT+0x49c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a27      	ldr	r2, [pc, #156]	@ (80021f0 <HAL_DMA_Start_IT+0x4a0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d013      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a25      	ldr	r2, [pc, #148]	@ (80021f4 <HAL_DMA_Start_IT+0x4a4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a24      	ldr	r2, [pc, #144]	@ (80021f8 <HAL_DMA_Start_IT+0x4a8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a22      	ldr	r2, [pc, #136]	@ (80021fc <HAL_DMA_Start_IT+0x4ac>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_DMA_Start_IT+0x430>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_DMA_Start_IT+0x4b0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d108      	bne.n	8002192 <HAL_DMA_Start_IT+0x442>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e012      	b.n	80021b8 <HAL_DMA_Start_IT+0x468>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e009      	b.n	80021b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40020010 	.word	0x40020010
 80021c8:	40020028 	.word	0x40020028
 80021cc:	40020040 	.word	0x40020040
 80021d0:	40020058 	.word	0x40020058
 80021d4:	40020070 	.word	0x40020070
 80021d8:	40020088 	.word	0x40020088
 80021dc:	400200a0 	.word	0x400200a0
 80021e0:	400200b8 	.word	0x400200b8
 80021e4:	40020410 	.word	0x40020410
 80021e8:	40020428 	.word	0x40020428
 80021ec:	40020440 	.word	0x40020440
 80021f0:	40020458 	.word	0x40020458
 80021f4:	40020470 	.word	0x40020470
 80021f8:	40020488 	.word	0x40020488
 80021fc:	400204a0 	.word	0x400204a0
 8002200:	400204b8 	.word	0x400204b8
 8002204:	58025408 	.word	0x58025408
 8002208:	5802541c 	.word	0x5802541c
 800220c:	58025430 	.word	0x58025430
 8002210:	58025444 	.word	0x58025444
 8002214:	58025458 	.word	0x58025458
 8002218:	5802546c 	.word	0x5802546c
 800221c:	58025480 	.word	0x58025480
 8002220:	58025494 	.word	0x58025494

08002224 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff f8c4 	bl	80013b8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e2dc      	b.n	80027f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e2cd      	b.n	80027f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a76      	ldr	r2, [pc, #472]	@ (8002438 <HAL_DMA_Abort+0x214>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d04a      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a74      	ldr	r2, [pc, #464]	@ (800243c <HAL_DMA_Abort+0x218>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d045      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a73      	ldr	r2, [pc, #460]	@ (8002440 <HAL_DMA_Abort+0x21c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d040      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a71      	ldr	r2, [pc, #452]	@ (8002444 <HAL_DMA_Abort+0x220>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d03b      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a70      	ldr	r2, [pc, #448]	@ (8002448 <HAL_DMA_Abort+0x224>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d036      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6e      	ldr	r2, [pc, #440]	@ (800244c <HAL_DMA_Abort+0x228>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6d      	ldr	r2, [pc, #436]	@ (8002450 <HAL_DMA_Abort+0x22c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d02c      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002454 <HAL_DMA_Abort+0x230>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d027      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002458 <HAL_DMA_Abort+0x234>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	@ (800245c <HAL_DMA_Abort+0x238>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01d      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a67      	ldr	r2, [pc, #412]	@ (8002460 <HAL_DMA_Abort+0x23c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a65      	ldr	r2, [pc, #404]	@ (8002464 <HAL_DMA_Abort+0x240>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a64      	ldr	r2, [pc, #400]	@ (8002468 <HAL_DMA_Abort+0x244>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00e      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a62      	ldr	r2, [pc, #392]	@ (800246c <HAL_DMA_Abort+0x248>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a61      	ldr	r2, [pc, #388]	@ (8002470 <HAL_DMA_Abort+0x24c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002474 <HAL_DMA_Abort+0x250>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_DMA_Abort+0xda>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_DMA_Abort+0xdc>
 80022fe:	2300      	movs	r3, #0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 021e 	bic.w	r2, r2, #30
 8002312:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002322:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e00a      	b.n	8002342 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 020e 	bic.w	r2, r2, #14
 800233a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a3c      	ldr	r2, [pc, #240]	@ (8002438 <HAL_DMA_Abort+0x214>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d072      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	@ (800243c <HAL_DMA_Abort+0x218>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d06d      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_DMA_Abort+0x21c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d068      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_DMA_Abort+0x220>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d063      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <HAL_DMA_Abort+0x224>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d05e      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	@ (800244c <HAL_DMA_Abort+0x228>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d059      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	@ (8002450 <HAL_DMA_Abort+0x22c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d054      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <HAL_DMA_Abort+0x230>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04f      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <HAL_DMA_Abort+0x234>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04a      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	@ (800245c <HAL_DMA_Abort+0x238>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d045      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002460 <HAL_DMA_Abort+0x23c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d040      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002464 <HAL_DMA_Abort+0x240>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d03b      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2a      	ldr	r2, [pc, #168]	@ (8002468 <HAL_DMA_Abort+0x244>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d036      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	@ (800246c <HAL_DMA_Abort+0x248>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_DMA_Abort+0x24c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d02c      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	@ (8002474 <HAL_DMA_Abort+0x250>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d027      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a24      	ldr	r2, [pc, #144]	@ (8002478 <HAL_DMA_Abort+0x254>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_DMA_Abort+0x258>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <HAL_DMA_Abort+0x25c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d018      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1f      	ldr	r2, [pc, #124]	@ (8002484 <HAL_DMA_Abort+0x260>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1e      	ldr	r2, [pc, #120]	@ (8002488 <HAL_DMA_Abort+0x264>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1c      	ldr	r2, [pc, #112]	@ (800248c <HAL_DMA_Abort+0x268>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1b      	ldr	r2, [pc, #108]	@ (8002490 <HAL_DMA_Abort+0x26c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	@ (8002494 <HAL_DMA_Abort+0x270>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d132      	bne.n	8002498 <HAL_DMA_Abort+0x274>
 8002432:	2301      	movs	r3, #1
 8002434:	e031      	b.n	800249a <HAL_DMA_Abort+0x276>
 8002436:	bf00      	nop
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
 8002478:	58025408 	.word	0x58025408
 800247c:	5802541c 	.word	0x5802541c
 8002480:	58025430 	.word	0x58025430
 8002484:	58025444 	.word	0x58025444
 8002488:	58025458 	.word	0x58025458
 800248c:	5802546c 	.word	0x5802546c
 8002490:	58025480 	.word	0x58025480
 8002494:	58025494 	.word	0x58025494
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6d      	ldr	r2, [pc, #436]	@ (8002668 <HAL_DMA_Abort+0x444>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04a      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6b      	ldr	r2, [pc, #428]	@ (800266c <HAL_DMA_Abort+0x448>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d045      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6a      	ldr	r2, [pc, #424]	@ (8002670 <HAL_DMA_Abort+0x44c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d040      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a68      	ldr	r2, [pc, #416]	@ (8002674 <HAL_DMA_Abort+0x450>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d03b      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a67      	ldr	r2, [pc, #412]	@ (8002678 <HAL_DMA_Abort+0x454>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d036      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a65      	ldr	r2, [pc, #404]	@ (800267c <HAL_DMA_Abort+0x458>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d031      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a64      	ldr	r2, [pc, #400]	@ (8002680 <HAL_DMA_Abort+0x45c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d02c      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a62      	ldr	r2, [pc, #392]	@ (8002684 <HAL_DMA_Abort+0x460>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d027      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a61      	ldr	r2, [pc, #388]	@ (8002688 <HAL_DMA_Abort+0x464>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a5f      	ldr	r2, [pc, #380]	@ (800268c <HAL_DMA_Abort+0x468>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01d      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a5e      	ldr	r2, [pc, #376]	@ (8002690 <HAL_DMA_Abort+0x46c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a5c      	ldr	r2, [pc, #368]	@ (8002694 <HAL_DMA_Abort+0x470>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5b      	ldr	r2, [pc, #364]	@ (8002698 <HAL_DMA_Abort+0x474>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a59      	ldr	r2, [pc, #356]	@ (800269c <HAL_DMA_Abort+0x478>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <HAL_DMA_Abort+0x47c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a56      	ldr	r2, [pc, #344]	@ (80026a4 <HAL_DMA_Abort+0x480>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d108      	bne.n	8002560 <HAL_DMA_Abort+0x33c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_DMA_Abort+0x34c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002570:	e013      	b.n	800259a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002572:	f7fe ff21 	bl	80013b8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b05      	cmp	r3, #5
 800257e:	d90c      	bls.n	800259a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e12d      	b.n	80027f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e5      	bne.n	8002572 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <HAL_DMA_Abort+0x444>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d04a      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2d      	ldr	r2, [pc, #180]	@ (800266c <HAL_DMA_Abort+0x448>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d045      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2c      	ldr	r2, [pc, #176]	@ (8002670 <HAL_DMA_Abort+0x44c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d040      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <HAL_DMA_Abort+0x450>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d03b      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a29      	ldr	r2, [pc, #164]	@ (8002678 <HAL_DMA_Abort+0x454>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d036      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_DMA_Abort+0x458>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	@ (8002680 <HAL_DMA_Abort+0x45c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d02c      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	@ (8002684 <HAL_DMA_Abort+0x460>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d027      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a23      	ldr	r2, [pc, #140]	@ (8002688 <HAL_DMA_Abort+0x464>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a21      	ldr	r2, [pc, #132]	@ (800268c <HAL_DMA_Abort+0x468>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01d      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a20      	ldr	r2, [pc, #128]	@ (8002690 <HAL_DMA_Abort+0x46c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d018      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1e      	ldr	r2, [pc, #120]	@ (8002694 <HAL_DMA_Abort+0x470>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_DMA_Abort+0x474>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1b      	ldr	r2, [pc, #108]	@ (800269c <HAL_DMA_Abort+0x478>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_DMA_Abort+0x47c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_DMA_Abort+0x480>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_DMA_Abort+0x426>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_DMA_Abort+0x428>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02b      	beq.n	80026a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	223f      	movs	r2, #63	@ 0x3f
 8002660:	409a      	lsls	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	e02a      	b.n	80026be <HAL_DMA_Abort+0x49a>
 8002668:	40020010 	.word	0x40020010
 800266c:	40020028 	.word	0x40020028
 8002670:	40020040 	.word	0x40020040
 8002674:	40020058 	.word	0x40020058
 8002678:	40020070 	.word	0x40020070
 800267c:	40020088 	.word	0x40020088
 8002680:	400200a0 	.word	0x400200a0
 8002684:	400200b8 	.word	0x400200b8
 8002688:	40020410 	.word	0x40020410
 800268c:	40020428 	.word	0x40020428
 8002690:	40020440 	.word	0x40020440
 8002694:	40020458 	.word	0x40020458
 8002698:	40020470 	.word	0x40020470
 800269c:	40020488 	.word	0x40020488
 80026a0:	400204a0 	.word	0x400204a0
 80026a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2201      	movs	r2, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002800 <HAL_DMA_Abort+0x5dc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d072      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002804 <HAL_DMA_Abort+0x5e0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d06d      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002808 <HAL_DMA_Abort+0x5e4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d068      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	@ (800280c <HAL_DMA_Abort+0x5e8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d063      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a49      	ldr	r2, [pc, #292]	@ (8002810 <HAL_DMA_Abort+0x5ec>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d05e      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a47      	ldr	r2, [pc, #284]	@ (8002814 <HAL_DMA_Abort+0x5f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d059      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a46      	ldr	r2, [pc, #280]	@ (8002818 <HAL_DMA_Abort+0x5f4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d054      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a44      	ldr	r2, [pc, #272]	@ (800281c <HAL_DMA_Abort+0x5f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d04f      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a43      	ldr	r2, [pc, #268]	@ (8002820 <HAL_DMA_Abort+0x5fc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04a      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a41      	ldr	r2, [pc, #260]	@ (8002824 <HAL_DMA_Abort+0x600>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d045      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a40      	ldr	r2, [pc, #256]	@ (8002828 <HAL_DMA_Abort+0x604>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d040      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3e      	ldr	r2, [pc, #248]	@ (800282c <HAL_DMA_Abort+0x608>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d03b      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a3d      	ldr	r2, [pc, #244]	@ (8002830 <HAL_DMA_Abort+0x60c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d036      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3b      	ldr	r2, [pc, #236]	@ (8002834 <HAL_DMA_Abort+0x610>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3a      	ldr	r2, [pc, #232]	@ (8002838 <HAL_DMA_Abort+0x614>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d02c      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a38      	ldr	r2, [pc, #224]	@ (800283c <HAL_DMA_Abort+0x618>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a37      	ldr	r2, [pc, #220]	@ (8002840 <HAL_DMA_Abort+0x61c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a35      	ldr	r2, [pc, #212]	@ (8002844 <HAL_DMA_Abort+0x620>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a34      	ldr	r2, [pc, #208]	@ (8002848 <HAL_DMA_Abort+0x624>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d018      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a32      	ldr	r2, [pc, #200]	@ (800284c <HAL_DMA_Abort+0x628>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a31      	ldr	r2, [pc, #196]	@ (8002850 <HAL_DMA_Abort+0x62c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2f      	ldr	r2, [pc, #188]	@ (8002854 <HAL_DMA_Abort+0x630>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2e      	ldr	r2, [pc, #184]	@ (8002858 <HAL_DMA_Abort+0x634>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <HAL_DMA_Abort+0x638>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Abort+0x58e>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_DMA_Abort+0x590>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
 8002840:	58025408 	.word	0x58025408
 8002844:	5802541c 	.word	0x5802541c
 8002848:	58025430 	.word	0x58025430
 800284c:	58025444 	.word	0x58025444
 8002850:	58025458 	.word	0x58025458
 8002854:	5802546c 	.word	0x5802546c
 8002858:	58025480 	.word	0x58025480
 800285c:	58025494 	.word	0x58025494

08002860 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e237      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d004      	beq.n	8002888 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2280      	movs	r2, #128	@ 0x80
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e22c      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5c      	ldr	r2, [pc, #368]	@ (8002a00 <HAL_DMA_Abort_IT+0x1a0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04a      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5b      	ldr	r2, [pc, #364]	@ (8002a04 <HAL_DMA_Abort_IT+0x1a4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d045      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a59      	ldr	r2, [pc, #356]	@ (8002a08 <HAL_DMA_Abort_IT+0x1a8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d040      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a58      	ldr	r2, [pc, #352]	@ (8002a0c <HAL_DMA_Abort_IT+0x1ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d03b      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a56      	ldr	r2, [pc, #344]	@ (8002a10 <HAL_DMA_Abort_IT+0x1b0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d036      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a55      	ldr	r2, [pc, #340]	@ (8002a14 <HAL_DMA_Abort_IT+0x1b4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a53      	ldr	r2, [pc, #332]	@ (8002a18 <HAL_DMA_Abort_IT+0x1b8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02c      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a52      	ldr	r2, [pc, #328]	@ (8002a1c <HAL_DMA_Abort_IT+0x1bc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d027      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a50      	ldr	r2, [pc, #320]	@ (8002a20 <HAL_DMA_Abort_IT+0x1c0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d022      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a4f      	ldr	r2, [pc, #316]	@ (8002a24 <HAL_DMA_Abort_IT+0x1c4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01d      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002a28 <HAL_DMA_Abort_IT+0x1c8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a4c      	ldr	r2, [pc, #304]	@ (8002a2c <HAL_DMA_Abort_IT+0x1cc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a4a      	ldr	r2, [pc, #296]	@ (8002a30 <HAL_DMA_Abort_IT+0x1d0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a49      	ldr	r2, [pc, #292]	@ (8002a34 <HAL_DMA_Abort_IT+0x1d4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a47      	ldr	r2, [pc, #284]	@ (8002a38 <HAL_DMA_Abort_IT+0x1d8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a46      	ldr	r2, [pc, #280]	@ (8002a3c <HAL_DMA_Abort_IT+0x1dc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_DMA_Abort_IT+0xcc>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_DMA_Abort_IT+0xce>
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8086 	beq.w	8002a40 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2f      	ldr	r2, [pc, #188]	@ (8002a00 <HAL_DMA_Abort_IT+0x1a0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d04a      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2e      	ldr	r2, [pc, #184]	@ (8002a04 <HAL_DMA_Abort_IT+0x1a4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d045      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2c      	ldr	r2, [pc, #176]	@ (8002a08 <HAL_DMA_Abort_IT+0x1a8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d040      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <HAL_DMA_Abort_IT+0x1ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d03b      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <HAL_DMA_Abort_IT+0x1b0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d036      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a28      	ldr	r2, [pc, #160]	@ (8002a14 <HAL_DMA_Abort_IT+0x1b4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d031      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <HAL_DMA_Abort_IT+0x1b8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02c      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a25      	ldr	r2, [pc, #148]	@ (8002a1c <HAL_DMA_Abort_IT+0x1bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d027      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_DMA_Abort_IT+0x1c0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d022      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a22      	ldr	r2, [pc, #136]	@ (8002a24 <HAL_DMA_Abort_IT+0x1c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d01d      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a20      	ldr	r2, [pc, #128]	@ (8002a28 <HAL_DMA_Abort_IT+0x1c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d018      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	@ (8002a2c <HAL_DMA_Abort_IT+0x1cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a30 <HAL_DMA_Abort_IT+0x1d0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00e      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <HAL_DMA_Abort_IT+0x1d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a38 <HAL_DMA_Abort_IT+0x1d8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_DMA_Abort_IT+0x1dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <HAL_DMA_Abort_IT+0x18e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e178      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x480>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e16f      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x480>
 8002a00:	40020010 	.word	0x40020010
 8002a04:	40020028 	.word	0x40020028
 8002a08:	40020040 	.word	0x40020040
 8002a0c:	40020058 	.word	0x40020058
 8002a10:	40020070 	.word	0x40020070
 8002a14:	40020088 	.word	0x40020088
 8002a18:	400200a0 	.word	0x400200a0
 8002a1c:	400200b8 	.word	0x400200b8
 8002a20:	40020410 	.word	0x40020410
 8002a24:	40020428 	.word	0x40020428
 8002a28:	40020440 	.word	0x40020440
 8002a2c:	40020458 	.word	0x40020458
 8002a30:	40020470 	.word	0x40020470
 8002a34:	40020488 	.word	0x40020488
 8002a38:	400204a0 	.word	0x400204a0
 8002a3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 020e 	bic.w	r2, r2, #14
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6c      	ldr	r2, [pc, #432]	@ (8002c08 <HAL_DMA_Abort_IT+0x3a8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c0c <HAL_DMA_Abort_IT+0x3ac>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d045      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_DMA_Abort_IT+0x3b0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d040      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a68      	ldr	r2, [pc, #416]	@ (8002c14 <HAL_DMA_Abort_IT+0x3b4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d03b      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a66      	ldr	r2, [pc, #408]	@ (8002c18 <HAL_DMA_Abort_IT+0x3b8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a65      	ldr	r2, [pc, #404]	@ (8002c1c <HAL_DMA_Abort_IT+0x3bc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a63      	ldr	r2, [pc, #396]	@ (8002c20 <HAL_DMA_Abort_IT+0x3c0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02c      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a62      	ldr	r2, [pc, #392]	@ (8002c24 <HAL_DMA_Abort_IT+0x3c4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a60      	ldr	r2, [pc, #384]	@ (8002c28 <HAL_DMA_Abort_IT+0x3c8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a5f      	ldr	r2, [pc, #380]	@ (8002c2c <HAL_DMA_Abort_IT+0x3cc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01d      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c30 <HAL_DMA_Abort_IT+0x3d0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c34 <HAL_DMA_Abort_IT+0x3d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5a      	ldr	r2, [pc, #360]	@ (8002c38 <HAL_DMA_Abort_IT+0x3d8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a59      	ldr	r2, [pc, #356]	@ (8002c3c <HAL_DMA_Abort_IT+0x3dc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a57      	ldr	r2, [pc, #348]	@ (8002c40 <HAL_DMA_Abort_IT+0x3e0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a56      	ldr	r2, [pc, #344]	@ (8002c44 <HAL_DMA_Abort_IT+0x3e4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <HAL_DMA_Abort_IT+0x2a2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e007      	b.n	8002b12 <HAL_DMA_Abort_IT+0x2b2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a3c      	ldr	r2, [pc, #240]	@ (8002c08 <HAL_DMA_Abort_IT+0x3a8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d072      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3a      	ldr	r2, [pc, #232]	@ (8002c0c <HAL_DMA_Abort_IT+0x3ac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d06d      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a39      	ldr	r2, [pc, #228]	@ (8002c10 <HAL_DMA_Abort_IT+0x3b0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d068      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a37      	ldr	r2, [pc, #220]	@ (8002c14 <HAL_DMA_Abort_IT+0x3b4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d063      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a36      	ldr	r2, [pc, #216]	@ (8002c18 <HAL_DMA_Abort_IT+0x3b8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d05e      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a34      	ldr	r2, [pc, #208]	@ (8002c1c <HAL_DMA_Abort_IT+0x3bc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d059      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a33      	ldr	r2, [pc, #204]	@ (8002c20 <HAL_DMA_Abort_IT+0x3c0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d054      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	@ (8002c24 <HAL_DMA_Abort_IT+0x3c4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04f      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a30      	ldr	r2, [pc, #192]	@ (8002c28 <HAL_DMA_Abort_IT+0x3c8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2e      	ldr	r2, [pc, #184]	@ (8002c2c <HAL_DMA_Abort_IT+0x3cc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c30 <HAL_DMA_Abort_IT+0x3d0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2b      	ldr	r2, [pc, #172]	@ (8002c34 <HAL_DMA_Abort_IT+0x3d4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c38 <HAL_DMA_Abort_IT+0x3d8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a28      	ldr	r2, [pc, #160]	@ (8002c3c <HAL_DMA_Abort_IT+0x3dc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	@ (8002c40 <HAL_DMA_Abort_IT+0x3e0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a25      	ldr	r2, [pc, #148]	@ (8002c44 <HAL_DMA_Abort_IT+0x3e4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a24      	ldr	r2, [pc, #144]	@ (8002c48 <HAL_DMA_Abort_IT+0x3e8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <HAL_DMA_Abort_IT+0x3ec>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a21      	ldr	r2, [pc, #132]	@ (8002c50 <HAL_DMA_Abort_IT+0x3f0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_DMA_Abort_IT+0x3f4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	@ (8002c58 <HAL_DMA_Abort_IT+0x3f8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <HAL_DMA_Abort_IT+0x3fc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_DMA_Abort_IT+0x400>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <HAL_DMA_Abort_IT+0x404>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d132      	bne.n	8002c68 <HAL_DMA_Abort_IT+0x408>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e031      	b.n	8002c6a <HAL_DMA_Abort_IT+0x40a>
 8002c06:	bf00      	nop
 8002c08:	40020010 	.word	0x40020010
 8002c0c:	40020028 	.word	0x40020028
 8002c10:	40020040 	.word	0x40020040
 8002c14:	40020058 	.word	0x40020058
 8002c18:	40020070 	.word	0x40020070
 8002c1c:	40020088 	.word	0x40020088
 8002c20:	400200a0 	.word	0x400200a0
 8002c24:	400200b8 	.word	0x400200b8
 8002c28:	40020410 	.word	0x40020410
 8002c2c:	40020428 	.word	0x40020428
 8002c30:	40020440 	.word	0x40020440
 8002c34:	40020458 	.word	0x40020458
 8002c38:	40020470 	.word	0x40020470
 8002c3c:	40020488 	.word	0x40020488
 8002c40:	400204a0 	.word	0x400204a0
 8002c44:	400204b8 	.word	0x400204b8
 8002c48:	58025408 	.word	0x58025408
 8002c4c:	5802541c 	.word	0x5802541c
 8002c50:	58025430 	.word	0x58025430
 8002c54:	58025444 	.word	0x58025444
 8002c58:	58025458 	.word	0x58025458
 8002c5c:	5802546c 	.word	0x5802546c
 8002c60:	58025480 	.word	0x58025480
 8002c64:	58025494 	.word	0x58025494
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d028      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cb4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cbe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop

08002cec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cf8:	4b67      	ldr	r3, [pc, #412]	@ (8002e98 <HAL_DMA_IRQHandler+0x1ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a67      	ldr	r2, [pc, #412]	@ (8002e9c <HAL_DMA_IRQHandler+0x1b0>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1b4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04a      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1b8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d045      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1bc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5a      	ldr	r2, [pc, #360]	@ (8002eac <HAL_DMA_IRQHandler+0x1c0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d03b      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a59      	ldr	r2, [pc, #356]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1c4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a57      	ldr	r2, [pc, #348]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1c8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a56      	ldr	r2, [pc, #344]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1cc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02c      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a54      	ldr	r2, [pc, #336]	@ (8002ebc <HAL_DMA_IRQHandler+0x1d0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d027      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a53      	ldr	r2, [pc, #332]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1d4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a51      	ldr	r2, [pc, #324]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1d8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a50      	ldr	r2, [pc, #320]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1dc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a4e      	ldr	r2, [pc, #312]	@ (8002ecc <HAL_DMA_IRQHandler+0x1e0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1e4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1e8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1ec>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xd2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a48      	ldr	r2, [pc, #288]	@ (8002edc <HAL_DMA_IRQHandler+0x1f0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_IRQHandler+0xd6>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 842b 	beq.w	8003620 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80a2 	beq.w	8002f24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1b4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d04a      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1b8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d045      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1bc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d040      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	@ (8002eac <HAL_DMA_IRQHandler+0x1c0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d03b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a28      	ldr	r2, [pc, #160]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1c4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d036      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d031      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a25      	ldr	r2, [pc, #148]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1cc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02c      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a24      	ldr	r2, [pc, #144]	@ (8002ebc <HAL_DMA_IRQHandler+0x1d0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d027      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1d4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d022      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1d8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d01d      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1dc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d018      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <HAL_DMA_IRQHandler+0x1e0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1e4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1e8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d009      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a19      	ldr	r2, [pc, #100]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1ec>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a18      	ldr	r2, [pc, #96]	@ (8002edc <HAL_DMA_IRQHandler+0x1f0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d12f      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x1f4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e02e      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x208>
 8002e96:	bf00      	nop
 8002e98:	24000000 	.word	0x24000000
 8002e9c:	1b4e81b5 	.word	0x1b4e81b5
 8002ea0:	40020010 	.word	0x40020010
 8002ea4:	40020028 	.word	0x40020028
 8002ea8:	40020040 	.word	0x40020040
 8002eac:	40020058 	.word	0x40020058
 8002eb0:	40020070 	.word	0x40020070
 8002eb4:	40020088 	.word	0x40020088
 8002eb8:	400200a0 	.word	0x400200a0
 8002ebc:	400200b8 	.word	0x400200b8
 8002ec0:	40020410 	.word	0x40020410
 8002ec4:	40020428 	.word	0x40020428
 8002ec8:	40020440 	.word	0x40020440
 8002ecc:	40020458 	.word	0x40020458
 8002ed0:	40020470 	.word	0x40020470
 8002ed4:	40020488 	.word	0x40020488
 8002ed8:	400204a0 	.word	0x400204a0
 8002edc:	400204b8 	.word	0x400204b8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d015      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0204 	bic.w	r2, r2, #4
 8002f06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2208      	movs	r2, #8
 8002f12:	409a      	lsls	r2, r3
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d06e      	beq.n	8003018 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a69      	ldr	r2, [pc, #420]	@ (80030e4 <HAL_DMA_IRQHandler+0x3f8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04a      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a67      	ldr	r2, [pc, #412]	@ (80030e8 <HAL_DMA_IRQHandler+0x3fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d045      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a66      	ldr	r2, [pc, #408]	@ (80030ec <HAL_DMA_IRQHandler+0x400>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a64      	ldr	r2, [pc, #400]	@ (80030f0 <HAL_DMA_IRQHandler+0x404>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d03b      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a63      	ldr	r2, [pc, #396]	@ (80030f4 <HAL_DMA_IRQHandler+0x408>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d036      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a61      	ldr	r2, [pc, #388]	@ (80030f8 <HAL_DMA_IRQHandler+0x40c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d031      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a60      	ldr	r2, [pc, #384]	@ (80030fc <HAL_DMA_IRQHandler+0x410>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02c      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5e      	ldr	r2, [pc, #376]	@ (8003100 <HAL_DMA_IRQHandler+0x414>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d027      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003104 <HAL_DMA_IRQHandler+0x418>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5b      	ldr	r2, [pc, #364]	@ (8003108 <HAL_DMA_IRQHandler+0x41c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800310c <HAL_DMA_IRQHandler+0x420>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a58      	ldr	r2, [pc, #352]	@ (8003110 <HAL_DMA_IRQHandler+0x424>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a57      	ldr	r2, [pc, #348]	@ (8003114 <HAL_DMA_IRQHandler+0x428>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a55      	ldr	r2, [pc, #340]	@ (8003118 <HAL_DMA_IRQHandler+0x42c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a54      	ldr	r2, [pc, #336]	@ (800311c <HAL_DMA_IRQHandler+0x430>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2ee>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	@ (8003120 <HAL_DMA_IRQHandler+0x434>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x304>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e003      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2201      	movs	r2, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003010:	f043 0202 	orr.w	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2204      	movs	r2, #4
 8003022:	409a      	lsls	r2, r3
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 808f 	beq.w	800314c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2c      	ldr	r2, [pc, #176]	@ (80030e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d04a      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2a      	ldr	r2, [pc, #168]	@ (80030e8 <HAL_DMA_IRQHandler+0x3fc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d045      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a29      	ldr	r2, [pc, #164]	@ (80030ec <HAL_DMA_IRQHandler+0x400>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d040      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a27      	ldr	r2, [pc, #156]	@ (80030f0 <HAL_DMA_IRQHandler+0x404>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d03b      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a26      	ldr	r2, [pc, #152]	@ (80030f4 <HAL_DMA_IRQHandler+0x408>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d036      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a24      	ldr	r2, [pc, #144]	@ (80030f8 <HAL_DMA_IRQHandler+0x40c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a23      	ldr	r2, [pc, #140]	@ (80030fc <HAL_DMA_IRQHandler+0x410>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d02c      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a21      	ldr	r2, [pc, #132]	@ (8003100 <HAL_DMA_IRQHandler+0x414>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d027      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a20      	ldr	r2, [pc, #128]	@ (8003104 <HAL_DMA_IRQHandler+0x418>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <HAL_DMA_IRQHandler+0x41c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01d      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1d      	ldr	r2, [pc, #116]	@ (800310c <HAL_DMA_IRQHandler+0x420>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d018      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003110 <HAL_DMA_IRQHandler+0x424>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003114 <HAL_DMA_IRQHandler+0x428>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a18      	ldr	r2, [pc, #96]	@ (8003118 <HAL_DMA_IRQHandler+0x42c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a17      	ldr	r2, [pc, #92]	@ (800311c <HAL_DMA_IRQHandler+0x430>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_DMA_IRQHandler+0x3e2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <HAL_DMA_IRQHandler+0x434>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12a      	bne.n	8003124 <HAL_DMA_IRQHandler+0x438>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e023      	b.n	800312c <HAL_DMA_IRQHandler+0x440>
 80030e4:	40020010 	.word	0x40020010
 80030e8:	40020028 	.word	0x40020028
 80030ec:	40020040 	.word	0x40020040
 80030f0:	40020058 	.word	0x40020058
 80030f4:	40020070 	.word	0x40020070
 80030f8:	40020088 	.word	0x40020088
 80030fc:	400200a0 	.word	0x400200a0
 8003100:	400200b8 	.word	0x400200b8
 8003104:	40020410 	.word	0x40020410
 8003108:	40020428 	.word	0x40020428
 800310c:	40020440 	.word	0x40020440
 8003110:	40020458 	.word	0x40020458
 8003114:	40020470 	.word	0x40020470
 8003118:	40020488 	.word	0x40020488
 800311c:	400204a0 	.word	0x400204a0
 8003120:	400204b8 	.word	0x400204b8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2204      	movs	r2, #4
 800313a:	409a      	lsls	r2, r3
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f043 0204 	orr.w	r2, r3, #4
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2210      	movs	r2, #16
 8003156:	409a      	lsls	r2, r3
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a6 	beq.w	80032ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a85      	ldr	r2, [pc, #532]	@ (800337c <HAL_DMA_IRQHandler+0x690>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d04a      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a83      	ldr	r2, [pc, #524]	@ (8003380 <HAL_DMA_IRQHandler+0x694>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d045      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a82      	ldr	r2, [pc, #520]	@ (8003384 <HAL_DMA_IRQHandler+0x698>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d040      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a80      	ldr	r2, [pc, #512]	@ (8003388 <HAL_DMA_IRQHandler+0x69c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d03b      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7f      	ldr	r2, [pc, #508]	@ (800338c <HAL_DMA_IRQHandler+0x6a0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d036      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7d      	ldr	r2, [pc, #500]	@ (8003390 <HAL_DMA_IRQHandler+0x6a4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d031      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003394 <HAL_DMA_IRQHandler+0x6a8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d02c      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7a      	ldr	r2, [pc, #488]	@ (8003398 <HAL_DMA_IRQHandler+0x6ac>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d027      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a79      	ldr	r2, [pc, #484]	@ (800339c <HAL_DMA_IRQHandler+0x6b0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a77      	ldr	r2, [pc, #476]	@ (80033a0 <HAL_DMA_IRQHandler+0x6b4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01d      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a76      	ldr	r2, [pc, #472]	@ (80033a4 <HAL_DMA_IRQHandler+0x6b8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d018      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a74      	ldr	r2, [pc, #464]	@ (80033a8 <HAL_DMA_IRQHandler+0x6bc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a73      	ldr	r2, [pc, #460]	@ (80033ac <HAL_DMA_IRQHandler+0x6c0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00e      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a71      	ldr	r2, [pc, #452]	@ (80033b0 <HAL_DMA_IRQHandler+0x6c4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a70      	ldr	r2, [pc, #448]	@ (80033b4 <HAL_DMA_IRQHandler+0x6c8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_DMA_IRQHandler+0x516>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	@ (80033b8 <HAL_DMA_IRQHandler+0x6cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10a      	bne.n	8003218 <HAL_DMA_IRQHandler+0x52c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e009      	b.n	800322c <HAL_DMA_IRQHandler+0x540>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03e      	beq.n	80032ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2210      	movs	r2, #16
 800323a:	409a      	lsls	r2, r3
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d018      	beq.n	8003280 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d108      	bne.n	800326e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d024      	beq.n	80032ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	e01f      	b.n	80032ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01b      	beq.n	80032ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
 800327e:	e016      	b.n	80032ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0208 	bic.w	r2, r2, #8
 800329c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2220      	movs	r2, #32
 80032b8:	409a      	lsls	r2, r3
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8110 	beq.w	80034e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2c      	ldr	r2, [pc, #176]	@ (800337c <HAL_DMA_IRQHandler+0x690>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d04a      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003380 <HAL_DMA_IRQHandler+0x694>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d045      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a29      	ldr	r2, [pc, #164]	@ (8003384 <HAL_DMA_IRQHandler+0x698>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d040      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a28      	ldr	r2, [pc, #160]	@ (8003388 <HAL_DMA_IRQHandler+0x69c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d03b      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a26      	ldr	r2, [pc, #152]	@ (800338c <HAL_DMA_IRQHandler+0x6a0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d036      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a25      	ldr	r2, [pc, #148]	@ (8003390 <HAL_DMA_IRQHandler+0x6a4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d031      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a23      	ldr	r2, [pc, #140]	@ (8003394 <HAL_DMA_IRQHandler+0x6a8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d02c      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a22      	ldr	r2, [pc, #136]	@ (8003398 <HAL_DMA_IRQHandler+0x6ac>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d027      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a20      	ldr	r2, [pc, #128]	@ (800339c <HAL_DMA_IRQHandler+0x6b0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1f      	ldr	r2, [pc, #124]	@ (80033a0 <HAL_DMA_IRQHandler+0x6b4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01d      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <HAL_DMA_IRQHandler+0x6b8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1c      	ldr	r2, [pc, #112]	@ (80033a8 <HAL_DMA_IRQHandler+0x6bc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1a      	ldr	r2, [pc, #104]	@ (80033ac <HAL_DMA_IRQHandler+0x6c0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a19      	ldr	r2, [pc, #100]	@ (80033b0 <HAL_DMA_IRQHandler+0x6c4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a17      	ldr	r2, [pc, #92]	@ (80033b4 <HAL_DMA_IRQHandler+0x6c8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_DMA_IRQHandler+0x678>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a16      	ldr	r2, [pc, #88]	@ (80033b8 <HAL_DMA_IRQHandler+0x6cc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d12b      	bne.n	80033bc <HAL_DMA_IRQHandler+0x6d0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf14      	ite	ne
 8003372:	2301      	movne	r3, #1
 8003374:	2300      	moveq	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	e02a      	b.n	80033d0 <HAL_DMA_IRQHandler+0x6e4>
 800337a:	bf00      	nop
 800337c:	40020010 	.word	0x40020010
 8003380:	40020028 	.word	0x40020028
 8003384:	40020040 	.word	0x40020040
 8003388:	40020058 	.word	0x40020058
 800338c:	40020070 	.word	0x40020070
 8003390:	40020088 	.word	0x40020088
 8003394:	400200a0 	.word	0x400200a0
 8003398:	400200b8 	.word	0x400200b8
 800339c:	40020410 	.word	0x40020410
 80033a0:	40020428 	.word	0x40020428
 80033a4:	40020440 	.word	0x40020440
 80033a8:	40020458 	.word	0x40020458
 80033ac:	40020470 	.word	0x40020470
 80033b0:	40020488 	.word	0x40020488
 80033b4:	400204a0 	.word	0x400204a0
 80033b8:	400204b8 	.word	0x400204b8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8087 	beq.w	80034e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2220      	movs	r2, #32
 80033e0:	409a      	lsls	r2, r3
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d139      	bne.n	8003466 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0216 	bic.w	r2, r2, #22
 8003400:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003410:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_DMA_IRQHandler+0x736>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	223f      	movs	r2, #63	@ 0x3f
 800343c:	409a      	lsls	r2, r3
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 834a 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
          }
          return;
 8003464:	e344      	b.n	8003af0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d018      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	2b00      	cmp	r3, #0
 8003488:	d02c      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
 8003492:	e027      	b.n	80034e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d023      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
 80034a4:	e01e      	b.n	80034e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10f      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0210 	bic.w	r2, r2, #16
 80034c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8306 	beq.w	8003afa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8088 	beq.w	800360c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2204      	movs	r2, #4
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7a      	ldr	r2, [pc, #488]	@ (80036f4 <HAL_DMA_IRQHandler+0xa08>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d04a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a79      	ldr	r2, [pc, #484]	@ (80036f8 <HAL_DMA_IRQHandler+0xa0c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d045      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a77      	ldr	r2, [pc, #476]	@ (80036fc <HAL_DMA_IRQHandler+0xa10>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d040      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a76      	ldr	r2, [pc, #472]	@ (8003700 <HAL_DMA_IRQHandler+0xa14>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d03b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a74      	ldr	r2, [pc, #464]	@ (8003704 <HAL_DMA_IRQHandler+0xa18>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d036      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a73      	ldr	r2, [pc, #460]	@ (8003708 <HAL_DMA_IRQHandler+0xa1c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a71      	ldr	r2, [pc, #452]	@ (800370c <HAL_DMA_IRQHandler+0xa20>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a70      	ldr	r2, [pc, #448]	@ (8003710 <HAL_DMA_IRQHandler+0xa24>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d027      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	@ (8003714 <HAL_DMA_IRQHandler+0xa28>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6d      	ldr	r2, [pc, #436]	@ (8003718 <HAL_DMA_IRQHandler+0xa2c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6b      	ldr	r2, [pc, #428]	@ (800371c <HAL_DMA_IRQHandler+0xa30>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6a      	ldr	r2, [pc, #424]	@ (8003720 <HAL_DMA_IRQHandler+0xa34>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a68      	ldr	r2, [pc, #416]	@ (8003724 <HAL_DMA_IRQHandler+0xa38>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a67      	ldr	r2, [pc, #412]	@ (8003728 <HAL_DMA_IRQHandler+0xa3c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_DMA_IRQHandler+0xa40>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x8b8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a64      	ldr	r2, [pc, #400]	@ (8003730 <HAL_DMA_IRQHandler+0xa44>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <HAL_DMA_IRQHandler+0x8ca>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e007      	b.n	80035c6 <HAL_DMA_IRQHandler+0x8da>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3301      	adds	r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d307      	bcc.n	80035e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f2      	bne.n	80035c6 <HAL_DMA_IRQHandler+0x8da>
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035fa:	e003      	b.n	8003604 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8272 	beq.w	8003afa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
 800361e:	e26c      	b.n	8003afa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a43      	ldr	r2, [pc, #268]	@ (8003734 <HAL_DMA_IRQHandler+0xa48>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d022      	beq.n	8003670 <HAL_DMA_IRQHandler+0x984>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a42      	ldr	r2, [pc, #264]	@ (8003738 <HAL_DMA_IRQHandler+0xa4c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d01d      	beq.n	8003670 <HAL_DMA_IRQHandler+0x984>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a40      	ldr	r2, [pc, #256]	@ (800373c <HAL_DMA_IRQHandler+0xa50>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d018      	beq.n	8003670 <HAL_DMA_IRQHandler+0x984>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3f      	ldr	r2, [pc, #252]	@ (8003740 <HAL_DMA_IRQHandler+0xa54>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <HAL_DMA_IRQHandler+0x984>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3d      	ldr	r2, [pc, #244]	@ (8003744 <HAL_DMA_IRQHandler+0xa58>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_DMA_IRQHandler+0x984>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3c      	ldr	r2, [pc, #240]	@ (8003748 <HAL_DMA_IRQHandler+0xa5c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d009      	beq.n	8003670 <HAL_DMA_IRQHandler+0x984>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3a      	ldr	r2, [pc, #232]	@ (800374c <HAL_DMA_IRQHandler+0xa60>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_DMA_IRQHandler+0x984>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a39      	ldr	r2, [pc, #228]	@ (8003750 <HAL_DMA_IRQHandler+0xa64>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_DMA_IRQHandler+0x988>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0x98a>
 8003674:	2300      	movs	r3, #0
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 823f 	beq.w	8003afa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2204      	movs	r2, #4
 800368e:	409a      	lsls	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80cd 	beq.w	8003834 <HAL_DMA_IRQHandler+0xb48>
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80c7 	beq.w	8003834 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2204      	movs	r2, #4
 80036b0:	409a      	lsls	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d049      	beq.n	8003754 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8210 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036dc:	e20a      	b.n	8003af4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8206 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f0:	e200      	b.n	8003af4 <HAL_DMA_IRQHandler+0xe08>
 80036f2:	bf00      	nop
 80036f4:	40020010 	.word	0x40020010
 80036f8:	40020028 	.word	0x40020028
 80036fc:	40020040 	.word	0x40020040
 8003700:	40020058 	.word	0x40020058
 8003704:	40020070 	.word	0x40020070
 8003708:	40020088 	.word	0x40020088
 800370c:	400200a0 	.word	0x400200a0
 8003710:	400200b8 	.word	0x400200b8
 8003714:	40020410 	.word	0x40020410
 8003718:	40020428 	.word	0x40020428
 800371c:	40020440 	.word	0x40020440
 8003720:	40020458 	.word	0x40020458
 8003724:	40020470 	.word	0x40020470
 8003728:	40020488 	.word	0x40020488
 800372c:	400204a0 	.word	0x400204a0
 8003730:	400204b8 	.word	0x400204b8
 8003734:	58025408 	.word	0x58025408
 8003738:	5802541c 	.word	0x5802541c
 800373c:	58025430 	.word	0x58025430
 8003740:	58025444 	.word	0x58025444
 8003744:	58025458 	.word	0x58025458
 8003748:	5802546c 	.word	0x5802546c
 800374c:	58025480 	.word	0x58025480
 8003750:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d160      	bne.n	8003820 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7f      	ldr	r2, [pc, #508]	@ (8003960 <HAL_DMA_IRQHandler+0xc74>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d04a      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7d      	ldr	r2, [pc, #500]	@ (8003964 <HAL_DMA_IRQHandler+0xc78>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d045      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7c      	ldr	r2, [pc, #496]	@ (8003968 <HAL_DMA_IRQHandler+0xc7c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d040      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7a      	ldr	r2, [pc, #488]	@ (800396c <HAL_DMA_IRQHandler+0xc80>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d03b      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a79      	ldr	r2, [pc, #484]	@ (8003970 <HAL_DMA_IRQHandler+0xc84>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d036      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a77      	ldr	r2, [pc, #476]	@ (8003974 <HAL_DMA_IRQHandler+0xc88>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d031      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a76      	ldr	r2, [pc, #472]	@ (8003978 <HAL_DMA_IRQHandler+0xc8c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d02c      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a74      	ldr	r2, [pc, #464]	@ (800397c <HAL_DMA_IRQHandler+0xc90>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d027      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	@ (8003980 <HAL_DMA_IRQHandler+0xc94>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a71      	ldr	r2, [pc, #452]	@ (8003984 <HAL_DMA_IRQHandler+0xc98>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a70      	ldr	r2, [pc, #448]	@ (8003988 <HAL_DMA_IRQHandler+0xc9c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	@ (800398c <HAL_DMA_IRQHandler+0xca0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6d      	ldr	r2, [pc, #436]	@ (8003990 <HAL_DMA_IRQHandler+0xca4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003994 <HAL_DMA_IRQHandler+0xca8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6a      	ldr	r2, [pc, #424]	@ (8003998 <HAL_DMA_IRQHandler+0xcac>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_IRQHandler+0xb12>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a68      	ldr	r2, [pc, #416]	@ (800399c <HAL_DMA_IRQHandler+0xcb0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <HAL_DMA_IRQHandler+0xb24>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e007      	b.n	8003820 <HAL_DMA_IRQHandler+0xb34>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8165 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003832:	e15f      	b.n	8003af4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2202      	movs	r2, #2
 800383e:	409a      	lsls	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80c5 	beq.w	80039d4 <HAL_DMA_IRQHandler+0xce8>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80bf 	beq.w	80039d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2202      	movs	r2, #2
 8003860:	409a      	lsls	r2, r3
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d018      	beq.n	80038a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 813a 	beq.w	8003af8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800388c:	e134      	b.n	8003af8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8130 	beq.w	8003af8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a0:	e12a      	b.n	8003af8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 8089 	bne.w	80039c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003960 <HAL_DMA_IRQHandler+0xc74>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d04a      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a29      	ldr	r2, [pc, #164]	@ (8003964 <HAL_DMA_IRQHandler+0xc78>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d045      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a28      	ldr	r2, [pc, #160]	@ (8003968 <HAL_DMA_IRQHandler+0xc7c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d040      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a26      	ldr	r2, [pc, #152]	@ (800396c <HAL_DMA_IRQHandler+0xc80>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d03b      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a25      	ldr	r2, [pc, #148]	@ (8003970 <HAL_DMA_IRQHandler+0xc84>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d036      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a23      	ldr	r2, [pc, #140]	@ (8003974 <HAL_DMA_IRQHandler+0xc88>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d031      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a22      	ldr	r2, [pc, #136]	@ (8003978 <HAL_DMA_IRQHandler+0xc8c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d02c      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a20      	ldr	r2, [pc, #128]	@ (800397c <HAL_DMA_IRQHandler+0xc90>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d027      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <HAL_DMA_IRQHandler+0xc94>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	@ (8003984 <HAL_DMA_IRQHandler+0xc98>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <HAL_DMA_IRQHandler+0xc9c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <HAL_DMA_IRQHandler+0xca0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a19      	ldr	r2, [pc, #100]	@ (8003990 <HAL_DMA_IRQHandler+0xca4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <HAL_DMA_IRQHandler+0xca8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a16      	ldr	r2, [pc, #88]	@ (8003998 <HAL_DMA_IRQHandler+0xcac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_DMA_IRQHandler+0xc62>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a14      	ldr	r2, [pc, #80]	@ (800399c <HAL_DMA_IRQHandler+0xcb0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d128      	bne.n	80039a0 <HAL_DMA_IRQHandler+0xcb4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0214 	bic.w	r2, r2, #20
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e027      	b.n	80039b0 <HAL_DMA_IRQHandler+0xcc4>
 8003960:	40020010 	.word	0x40020010
 8003964:	40020028 	.word	0x40020028
 8003968:	40020040 	.word	0x40020040
 800396c:	40020058 	.word	0x40020058
 8003970:	40020070 	.word	0x40020070
 8003974:	40020088 	.word	0x40020088
 8003978:	400200a0 	.word	0x400200a0
 800397c:	400200b8 	.word	0x400200b8
 8003980:	40020410 	.word	0x40020410
 8003984:	40020428 	.word	0x40020428
 8003988:	40020440 	.word	0x40020440
 800398c:	40020458 	.word	0x40020458
 8003990:	40020470 	.word	0x40020470
 8003994:	40020488 	.word	0x40020488
 8003998:	400204a0 	.word	0x400204a0
 800399c:	400204b8 	.word	0x400204b8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 020a 	bic.w	r2, r2, #10
 80039ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8097 	beq.w	8003af8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d2:	e091      	b.n	8003af8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2208      	movs	r2, #8
 80039de:	409a      	lsls	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8088 	beq.w	8003afa <HAL_DMA_IRQHandler+0xe0e>
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8082 	beq.w	8003afa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a41      	ldr	r2, [pc, #260]	@ (8003b00 <HAL_DMA_IRQHandler+0xe14>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d04a      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a3f      	ldr	r2, [pc, #252]	@ (8003b04 <HAL_DMA_IRQHandler+0xe18>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d045      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b08 <HAL_DMA_IRQHandler+0xe1c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d040      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3c      	ldr	r2, [pc, #240]	@ (8003b0c <HAL_DMA_IRQHandler+0xe20>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d03b      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3b      	ldr	r2, [pc, #236]	@ (8003b10 <HAL_DMA_IRQHandler+0xe24>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d036      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a39      	ldr	r2, [pc, #228]	@ (8003b14 <HAL_DMA_IRQHandler+0xe28>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d031      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a38      	ldr	r2, [pc, #224]	@ (8003b18 <HAL_DMA_IRQHandler+0xe2c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d02c      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a36      	ldr	r2, [pc, #216]	@ (8003b1c <HAL_DMA_IRQHandler+0xe30>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d027      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a35      	ldr	r2, [pc, #212]	@ (8003b20 <HAL_DMA_IRQHandler+0xe34>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d022      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a33      	ldr	r2, [pc, #204]	@ (8003b24 <HAL_DMA_IRQHandler+0xe38>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01d      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a32      	ldr	r2, [pc, #200]	@ (8003b28 <HAL_DMA_IRQHandler+0xe3c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d018      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a30      	ldr	r2, [pc, #192]	@ (8003b2c <HAL_DMA_IRQHandler+0xe40>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <HAL_DMA_IRQHandler+0xe44>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <HAL_DMA_IRQHandler+0xe48>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2c      	ldr	r2, [pc, #176]	@ (8003b38 <HAL_DMA_IRQHandler+0xe4c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdaa>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2a      	ldr	r2, [pc, #168]	@ (8003b3c <HAL_DMA_IRQHandler+0xe50>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d108      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0xdbc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 021c 	bic.w	r2, r2, #28
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e007      	b.n	8003ab8 <HAL_DMA_IRQHandler+0xdcc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 020e 	bic.w	r2, r2, #14
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
 8003aee:	e004      	b.n	8003afa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003af0:	bf00      	nop
 8003af2:	e002      	b.n	8003afa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003afa:	3728      	adds	r7, #40	@ 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40020010 	.word	0x40020010
 8003b04:	40020028 	.word	0x40020028
 8003b08:	40020040 	.word	0x40020040
 8003b0c:	40020058 	.word	0x40020058
 8003b10:	40020070 	.word	0x40020070
 8003b14:	40020088 	.word	0x40020088
 8003b18:	400200a0 	.word	0x400200a0
 8003b1c:	400200b8 	.word	0x400200b8
 8003b20:	40020410 	.word	0x40020410
 8003b24:	40020428 	.word	0x40020428
 8003b28:	40020440 	.word	0x40020440
 8003b2c:	40020458 	.word	0x40020458
 8003b30:	40020470 	.word	0x40020470
 8003b34:	40020488 	.word	0x40020488
 8003b38:	400204a0 	.word	0x400204a0
 8003b3c:	400204b8 	.word	0x400204b8

08003b40 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7f      	ldr	r2, [pc, #508]	@ (8003d74 <DMA_SetConfig+0x21c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d072      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7d      	ldr	r2, [pc, #500]	@ (8003d78 <DMA_SetConfig+0x220>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d06d      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d7c <DMA_SetConfig+0x224>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d068      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a7a      	ldr	r2, [pc, #488]	@ (8003d80 <DMA_SetConfig+0x228>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d063      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a79      	ldr	r2, [pc, #484]	@ (8003d84 <DMA_SetConfig+0x22c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d05e      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a77      	ldr	r2, [pc, #476]	@ (8003d88 <DMA_SetConfig+0x230>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d059      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a76      	ldr	r2, [pc, #472]	@ (8003d8c <DMA_SetConfig+0x234>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d054      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a74      	ldr	r2, [pc, #464]	@ (8003d90 <DMA_SetConfig+0x238>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04f      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a73      	ldr	r2, [pc, #460]	@ (8003d94 <DMA_SetConfig+0x23c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a71      	ldr	r2, [pc, #452]	@ (8003d98 <DMA_SetConfig+0x240>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a70      	ldr	r2, [pc, #448]	@ (8003d9c <DMA_SetConfig+0x244>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6e      	ldr	r2, [pc, #440]	@ (8003da0 <DMA_SetConfig+0x248>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6d      	ldr	r2, [pc, #436]	@ (8003da4 <DMA_SetConfig+0x24c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8003da8 <DMA_SetConfig+0x250>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6a      	ldr	r2, [pc, #424]	@ (8003dac <DMA_SetConfig+0x254>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a68      	ldr	r2, [pc, #416]	@ (8003db0 <DMA_SetConfig+0x258>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a67      	ldr	r2, [pc, #412]	@ (8003db4 <DMA_SetConfig+0x25c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a65      	ldr	r2, [pc, #404]	@ (8003db8 <DMA_SetConfig+0x260>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a64      	ldr	r2, [pc, #400]	@ (8003dbc <DMA_SetConfig+0x264>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a62      	ldr	r2, [pc, #392]	@ (8003dc0 <DMA_SetConfig+0x268>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a61      	ldr	r2, [pc, #388]	@ (8003dc4 <DMA_SetConfig+0x26c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a5f      	ldr	r2, [pc, #380]	@ (8003dc8 <DMA_SetConfig+0x270>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a5e      	ldr	r2, [pc, #376]	@ (8003dcc <DMA_SetConfig+0x274>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <DMA_SetConfig+0x10a>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003dd0 <DMA_SetConfig+0x278>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <DMA_SetConfig+0x10e>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <DMA_SetConfig+0x110>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a39      	ldr	r2, [pc, #228]	@ (8003d74 <DMA_SetConfig+0x21c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04a      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a38      	ldr	r2, [pc, #224]	@ (8003d78 <DMA_SetConfig+0x220>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d045      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a36      	ldr	r2, [pc, #216]	@ (8003d7c <DMA_SetConfig+0x224>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d040      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a35      	ldr	r2, [pc, #212]	@ (8003d80 <DMA_SetConfig+0x228>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d03b      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a33      	ldr	r2, [pc, #204]	@ (8003d84 <DMA_SetConfig+0x22c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d036      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a32      	ldr	r2, [pc, #200]	@ (8003d88 <DMA_SetConfig+0x230>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d031      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a30      	ldr	r2, [pc, #192]	@ (8003d8c <DMA_SetConfig+0x234>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02c      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d90 <DMA_SetConfig+0x238>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d027      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8003d94 <DMA_SetConfig+0x23c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d98 <DMA_SetConfig+0x240>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d01d      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d9c <DMA_SetConfig+0x244>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a29      	ldr	r2, [pc, #164]	@ (8003da0 <DMA_SetConfig+0x248>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a27      	ldr	r2, [pc, #156]	@ (8003da4 <DMA_SetConfig+0x24c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a26      	ldr	r2, [pc, #152]	@ (8003da8 <DMA_SetConfig+0x250>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <DMA_SetConfig+0x254>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <DMA_SetConfig+0x1d0>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a23      	ldr	r2, [pc, #140]	@ (8003db0 <DMA_SetConfig+0x258>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <DMA_SetConfig+0x1d4>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <DMA_SetConfig+0x1d6>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d059      	beq.n	8003de6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	223f      	movs	r2, #63	@ 0x3f
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	d138      	bne.n	8003dd4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d72:	e086      	b.n	8003e82 <DMA_SetConfig+0x32a>
 8003d74:	40020010 	.word	0x40020010
 8003d78:	40020028 	.word	0x40020028
 8003d7c:	40020040 	.word	0x40020040
 8003d80:	40020058 	.word	0x40020058
 8003d84:	40020070 	.word	0x40020070
 8003d88:	40020088 	.word	0x40020088
 8003d8c:	400200a0 	.word	0x400200a0
 8003d90:	400200b8 	.word	0x400200b8
 8003d94:	40020410 	.word	0x40020410
 8003d98:	40020428 	.word	0x40020428
 8003d9c:	40020440 	.word	0x40020440
 8003da0:	40020458 	.word	0x40020458
 8003da4:	40020470 	.word	0x40020470
 8003da8:	40020488 	.word	0x40020488
 8003dac:	400204a0 	.word	0x400204a0
 8003db0:	400204b8 	.word	0x400204b8
 8003db4:	58025408 	.word	0x58025408
 8003db8:	5802541c 	.word	0x5802541c
 8003dbc:	58025430 	.word	0x58025430
 8003dc0:	58025444 	.word	0x58025444
 8003dc4:	58025458 	.word	0x58025458
 8003dc8:	5802546c 	.word	0x5802546c
 8003dcc:	58025480 	.word	0x58025480
 8003dd0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
}
 8003de4:	e04d      	b.n	8003e82 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a29      	ldr	r2, [pc, #164]	@ (8003e90 <DMA_SetConfig+0x338>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d022      	beq.n	8003e36 <DMA_SetConfig+0x2de>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <DMA_SetConfig+0x33c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01d      	beq.n	8003e36 <DMA_SetConfig+0x2de>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <DMA_SetConfig+0x340>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <DMA_SetConfig+0x2de>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a24      	ldr	r2, [pc, #144]	@ (8003e9c <DMA_SetConfig+0x344>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <DMA_SetConfig+0x2de>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <DMA_SetConfig+0x348>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <DMA_SetConfig+0x2de>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a21      	ldr	r2, [pc, #132]	@ (8003ea4 <DMA_SetConfig+0x34c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <DMA_SetConfig+0x2de>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <DMA_SetConfig+0x350>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <DMA_SetConfig+0x2de>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1e      	ldr	r2, [pc, #120]	@ (8003eac <DMA_SetConfig+0x354>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <DMA_SetConfig+0x2e2>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <DMA_SetConfig+0x2e4>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2201      	movs	r2, #1
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b40      	cmp	r3, #64	@ 0x40
 8003e5e:	d108      	bne.n	8003e72 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
}
 8003e70:	e007      	b.n	8003e82 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	60da      	str	r2, [r3, #12]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	58025408 	.word	0x58025408
 8003e94:	5802541c 	.word	0x5802541c
 8003e98:	58025430 	.word	0x58025430
 8003e9c:	58025444 	.word	0x58025444
 8003ea0:	58025458 	.word	0x58025458
 8003ea4:	5802546c 	.word	0x5802546c
 8003ea8:	58025480 	.word	0x58025480
 8003eac:	58025494 	.word	0x58025494

08003eb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a42      	ldr	r2, [pc, #264]	@ (8003fc8 <DMA_CalcBaseAndBitshift+0x118>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d04a      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a41      	ldr	r2, [pc, #260]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x11c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d045      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x120>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d040      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x124>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d03b      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd8 <DMA_CalcBaseAndBitshift+0x128>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d036      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3b      	ldr	r2, [pc, #236]	@ (8003fdc <DMA_CalcBaseAndBitshift+0x12c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d031      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a39      	ldr	r2, [pc, #228]	@ (8003fe0 <DMA_CalcBaseAndBitshift+0x130>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d02c      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a38      	ldr	r2, [pc, #224]	@ (8003fe4 <DMA_CalcBaseAndBitshift+0x134>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d027      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a36      	ldr	r2, [pc, #216]	@ (8003fe8 <DMA_CalcBaseAndBitshift+0x138>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d022      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a35      	ldr	r2, [pc, #212]	@ (8003fec <DMA_CalcBaseAndBitshift+0x13c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d01d      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a33      	ldr	r2, [pc, #204]	@ (8003ff0 <DMA_CalcBaseAndBitshift+0x140>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d018      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a32      	ldr	r2, [pc, #200]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x144>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a30      	ldr	r2, [pc, #192]	@ (8003ff8 <DMA_CalcBaseAndBitshift+0x148>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ffc <DMA_CalcBaseAndBitshift+0x14c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d009      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2d      	ldr	r2, [pc, #180]	@ (8004000 <DMA_CalcBaseAndBitshift+0x150>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	@ (8004004 <DMA_CalcBaseAndBitshift+0x154>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <DMA_CalcBaseAndBitshift+0xac>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <DMA_CalcBaseAndBitshift+0xae>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d024      	beq.n	8003fac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	3b10      	subs	r3, #16
 8003f6a:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <DMA_CalcBaseAndBitshift+0x158>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	4a24      	ldr	r2, [pc, #144]	@ (800400c <DMA_CalcBaseAndBitshift+0x15c>)
 8003f7c:	5cd3      	ldrb	r3, [r2, r3]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d908      	bls.n	8003f9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <DMA_CalcBaseAndBitshift+0x160>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f9a:	e00d      	b.n	8003fb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <DMA_CalcBaseAndBitshift+0x160>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003faa:	e005      	b.n	8003fb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40020010 	.word	0x40020010
 8003fcc:	40020028 	.word	0x40020028
 8003fd0:	40020040 	.word	0x40020040
 8003fd4:	40020058 	.word	0x40020058
 8003fd8:	40020070 	.word	0x40020070
 8003fdc:	40020088 	.word	0x40020088
 8003fe0:	400200a0 	.word	0x400200a0
 8003fe4:	400200b8 	.word	0x400200b8
 8003fe8:	40020410 	.word	0x40020410
 8003fec:	40020428 	.word	0x40020428
 8003ff0:	40020440 	.word	0x40020440
 8003ff4:	40020458 	.word	0x40020458
 8003ff8:	40020470 	.word	0x40020470
 8003ffc:	40020488 	.word	0x40020488
 8004000:	400204a0 	.word	0x400204a0
 8004004:	400204b8 	.word	0x400204b8
 8004008:	aaaaaaab 	.word	0xaaaaaaab
 800400c:	0800c21c 	.word	0x0800c21c
 8004010:	fffffc00 	.word	0xfffffc00

08004014 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d120      	bne.n	800406a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	2b03      	cmp	r3, #3
 800402e:	d858      	bhi.n	80040e2 <DMA_CheckFifoParam+0xce>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <DMA_CheckFifoParam+0x24>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004049 	.word	0x08004049
 800403c:	0800405b 	.word	0x0800405b
 8004040:	08004049 	.word	0x08004049
 8004044:	080040e3 	.word	0x080040e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d048      	beq.n	80040e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004058:	e045      	b.n	80040e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004062:	d142      	bne.n	80040ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004068:	e03f      	b.n	80040ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004072:	d123      	bne.n	80040bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	2b03      	cmp	r3, #3
 800407a:	d838      	bhi.n	80040ee <DMA_CheckFifoParam+0xda>
 800407c:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <DMA_CheckFifoParam+0x70>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	08004095 	.word	0x08004095
 8004088:	0800409b 	.word	0x0800409b
 800408c:	08004095 	.word	0x08004095
 8004090:	080040ad 	.word	0x080040ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
        break;
 8004098:	e030      	b.n	80040fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d025      	beq.n	80040f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040aa:	e022      	b.n	80040f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b4:	d11f      	bne.n	80040f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040ba:	e01c      	b.n	80040f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d902      	bls.n	80040ca <DMA_CheckFifoParam+0xb6>
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d003      	beq.n	80040d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040c8:	e018      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
        break;
 80040ce:	e015      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00e      	beq.n	80040fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
    break;
 80040e0:	e00b      	b.n	80040fa <DMA_CheckFifoParam+0xe6>
        break;
 80040e2:	bf00      	nop
 80040e4:	e00a      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
        break;
 80040e6:	bf00      	nop
 80040e8:	e008      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
        break;
 80040ea:	bf00      	nop
 80040ec:	e006      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
        break;
 80040ee:	bf00      	nop
 80040f0:	e004      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
        break;
 80040f2:	bf00      	nop
 80040f4:	e002      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
        break;
 80040f6:	bf00      	nop
 80040f8:	e000      	b.n	80040fc <DMA_CheckFifoParam+0xe8>
    break;
 80040fa:	bf00      	nop
    }
  }

  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop

0800410c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a38      	ldr	r2, [pc, #224]	@ (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a36      	ldr	r2, [pc, #216]	@ (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a35      	ldr	r2, [pc, #212]	@ (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a33      	ldr	r2, [pc, #204]	@ (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a32      	ldr	r2, [pc, #200]	@ (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a30      	ldr	r2, [pc, #192]	@ (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2f      	ldr	r2, [pc, #188]	@ (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2d      	ldr	r2, [pc, #180]	@ (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01a      	beq.n	80041aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	3b08      	subs	r3, #8
 800417c:	4a28      	ldr	r2, [pc, #160]	@ (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4b26      	ldr	r3, [pc, #152]	@ (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a24      	ldr	r2, [pc, #144]	@ (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004198:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041a8:	e024      	b.n	80041f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	3b10      	subs	r3, #16
 80041b2:	4a1e      	ldr	r2, [pc, #120]	@ (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4a1c      	ldr	r2, [pc, #112]	@ (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d806      	bhi.n	80041d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d902      	bls.n	80041d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3308      	adds	r3, #8
 80041d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4b18      	ldr	r3, [pc, #96]	@ (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a16      	ldr	r2, [pc, #88]	@ (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	2201      	movs	r2, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	58025408 	.word	0x58025408
 8004204:	5802541c 	.word	0x5802541c
 8004208:	58025430 	.word	0x58025430
 800420c:	58025444 	.word	0x58025444
 8004210:	58025458 	.word	0x58025458
 8004214:	5802546c 	.word	0x5802546c
 8004218:	58025480 	.word	0x58025480
 800421c:	58025494 	.word	0x58025494
 8004220:	cccccccd 	.word	0xcccccccd
 8004224:	16009600 	.word	0x16009600
 8004228:	58025880 	.word	0x58025880
 800422c:	aaaaaaab 	.word	0xaaaaaaab
 8004230:	400204b8 	.word	0x400204b8
 8004234:	4002040f 	.word	0x4002040f
 8004238:	10008200 	.word	0x10008200
 800423c:	40020880 	.word	0x40020880

08004240 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d04a      	beq.n	80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d847      	bhi.n	80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	@ (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	@ (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1c      	ldr	r2, [pc, #112]	@ (8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a15      	ldr	r2, [pc, #84]	@ (800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042c8:	671a      	str	r2, [r3, #112]	@ 0x70
 80042ca:	e009      	b.n	80042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042de:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	58025408 	.word	0x58025408
 80042fc:	5802541c 	.word	0x5802541c
 8004300:	58025430 	.word	0x58025430
 8004304:	58025444 	.word	0x58025444
 8004308:	58025458 	.word	0x58025458
 800430c:	5802546c 	.word	0x5802546c
 8004310:	58025480 	.word	0x58025480
 8004314:	58025494 	.word	0x58025494
 8004318:	1600963f 	.word	0x1600963f
 800431c:	58025940 	.word	0x58025940
 8004320:	1000823f 	.word	0x1000823f
 8004324:	40020940 	.word	0x40020940

08004328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	@ 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004336:	4b89      	ldr	r3, [pc, #548]	@ (800455c <HAL_GPIO_Init+0x234>)
 8004338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800433a:	e194      	b.n	8004666 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2101      	movs	r1, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 8186 	beq.w	8004660 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d005      	beq.n	800436c <HAL_GPIO_Init+0x44>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d130      	bne.n	80043ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2203      	movs	r2, #3
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043a2:	2201      	movs	r2, #1
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0201 	and.w	r2, r3, #1
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d017      	beq.n	800440a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	2203      	movs	r2, #3
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d123      	bne.n	800445e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	08da      	lsrs	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3208      	adds	r2, #8
 800441e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	08da      	lsrs	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3208      	adds	r2, #8
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2203      	movs	r2, #3
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 0203 	and.w	r2, r3, #3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80e0 	beq.w	8004660 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004560 <HAL_GPIO_Init+0x238>)
 80044a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004560 <HAL_GPIO_Init+0x238>)
 80044a8:	f043 0302 	orr.w	r3, r3, #2
 80044ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80044b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <HAL_GPIO_Init+0x238>)
 80044b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044be:	4a29      	ldr	r2, [pc, #164]	@ (8004564 <HAL_GPIO_Init+0x23c>)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	3302      	adds	r3, #2
 80044c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	220f      	movs	r2, #15
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a20      	ldr	r2, [pc, #128]	@ (8004568 <HAL_GPIO_Init+0x240>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d052      	beq.n	8004590 <HAL_GPIO_Init+0x268>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1f      	ldr	r2, [pc, #124]	@ (800456c <HAL_GPIO_Init+0x244>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d031      	beq.n	8004556 <HAL_GPIO_Init+0x22e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004570 <HAL_GPIO_Init+0x248>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02b      	beq.n	8004552 <HAL_GPIO_Init+0x22a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_GPIO_Init+0x24c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d025      	beq.n	800454e <HAL_GPIO_Init+0x226>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <HAL_GPIO_Init+0x250>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01f      	beq.n	800454a <HAL_GPIO_Init+0x222>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_GPIO_Init+0x254>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d019      	beq.n	8004546 <HAL_GPIO_Init+0x21e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1a      	ldr	r2, [pc, #104]	@ (8004580 <HAL_GPIO_Init+0x258>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_GPIO_Init+0x21a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a19      	ldr	r2, [pc, #100]	@ (8004584 <HAL_GPIO_Init+0x25c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00d      	beq.n	800453e <HAL_GPIO_Init+0x216>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a18      	ldr	r2, [pc, #96]	@ (8004588 <HAL_GPIO_Init+0x260>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <HAL_GPIO_Init+0x212>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a17      	ldr	r2, [pc, #92]	@ (800458c <HAL_GPIO_Init+0x264>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_GPIO_Init+0x20e>
 8004532:	2309      	movs	r3, #9
 8004534:	e02d      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 8004536:	230a      	movs	r3, #10
 8004538:	e02b      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 800453a:	2308      	movs	r3, #8
 800453c:	e029      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 800453e:	2307      	movs	r3, #7
 8004540:	e027      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 8004542:	2306      	movs	r3, #6
 8004544:	e025      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 8004546:	2305      	movs	r3, #5
 8004548:	e023      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 800454a:	2304      	movs	r3, #4
 800454c:	e021      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 800454e:	2303      	movs	r3, #3
 8004550:	e01f      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 8004552:	2302      	movs	r3, #2
 8004554:	e01d      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 8004556:	2301      	movs	r3, #1
 8004558:	e01b      	b.n	8004592 <HAL_GPIO_Init+0x26a>
 800455a:	bf00      	nop
 800455c:	58000080 	.word	0x58000080
 8004560:	58024400 	.word	0x58024400
 8004564:	58000400 	.word	0x58000400
 8004568:	58020000 	.word	0x58020000
 800456c:	58020400 	.word	0x58020400
 8004570:	58020800 	.word	0x58020800
 8004574:	58020c00 	.word	0x58020c00
 8004578:	58021000 	.word	0x58021000
 800457c:	58021400 	.word	0x58021400
 8004580:	58021800 	.word	0x58021800
 8004584:	58021c00 	.word	0x58021c00
 8004588:	58022000 	.word	0x58022000
 800458c:	58022400 	.word	0x58022400
 8004590:	2300      	movs	r3, #0
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	f002 0203 	and.w	r2, r2, #3
 8004598:	0092      	lsls	r2, r2, #2
 800459a:	4093      	lsls	r3, r2
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a2:	4938      	ldr	r1, [pc, #224]	@ (8004684 <HAL_GPIO_Init+0x35c>)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	3302      	adds	r3, #2
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3301      	adds	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	f47f ae63 	bne.w	800433c <HAL_GPIO_Init+0x14>
  }
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	3724      	adds	r7, #36	@ 0x24
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	58000400 	.word	0x58000400

08004688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80046a4:	e003      	b.n	80046ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	041a      	lsls	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	619a      	str	r2, [r3, #24]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_PWREx_ConfigSupply+0x70>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d00a      	beq.n	80046e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046d0:	4b16      	ldr	r3, [pc, #88]	@ (800472c <HAL_PWREx_ConfigSupply+0x70>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d001      	beq.n	80046e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e01f      	b.n	8004722 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e01d      	b.n	8004722 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046e6:	4b11      	ldr	r3, [pc, #68]	@ (800472c <HAL_PWREx_ConfigSupply+0x70>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f023 0207 	bic.w	r2, r3, #7
 80046ee:	490f      	ldr	r1, [pc, #60]	@ (800472c <HAL_PWREx_ConfigSupply+0x70>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046f6:	f7fc fe5f 	bl	80013b8 <HAL_GetTick>
 80046fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046fc:	e009      	b.n	8004712 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046fe:	f7fc fe5b 	bl	80013b8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800470c:	d901      	bls.n	8004712 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e007      	b.n	8004722 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_PWREx_ConfigSupply+0x70>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471e:	d1ee      	bne.n	80046fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	58024800 	.word	0x58024800

08004730 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	@ 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f000 bc48 	b.w	8004fd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8088 	beq.w	8004862 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004752:	4b99      	ldr	r3, [pc, #612]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800475c:	4b96      	ldr	r3, [pc, #600]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	2b10      	cmp	r3, #16
 8004766:	d007      	beq.n	8004778 <HAL_RCC_OscConfig+0x48>
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	2b18      	cmp	r3, #24
 800476c:	d111      	bne.n	8004792 <HAL_RCC_OscConfig+0x62>
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d10c      	bne.n	8004792 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	4b8f      	ldr	r3, [pc, #572]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d06d      	beq.n	8004860 <HAL_RCC_OscConfig+0x130>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d169      	bne.n	8004860 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f000 bc21 	b.w	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x7a>
 800479c:	4b86      	ldr	r3, [pc, #536]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a85      	ldr	r2, [pc, #532]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e02e      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x9c>
 80047b2:	4b81      	ldr	r3, [pc, #516]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a80      	ldr	r2, [pc, #512]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b7e      	ldr	r3, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0xc0>
 80047d6:	4b78      	ldr	r3, [pc, #480]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a77      	ldr	r2, [pc, #476]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b75      	ldr	r3, [pc, #468]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a74      	ldr	r2, [pc, #464]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047f0:	4b71      	ldr	r3, [pc, #452]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a70      	ldr	r2, [pc, #448]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b6e      	ldr	r3, [pc, #440]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6d      	ldr	r2, [pc, #436]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fc fdd2 	bl	80013b8 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004818:	f7fc fdce 	bl	80013b8 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	@ 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e3d4      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800482a:	4b63      	ldr	r3, [pc, #396]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xe8>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fc fdbe 	bl	80013b8 <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7fc fdba 	bl	80013b8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	@ 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e3c0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004852:	4b59      	ldr	r3, [pc, #356]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x110>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80ca 	beq.w	8004a04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004870:	4b51      	ldr	r3, [pc, #324]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004878:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800487a:	4b4f      	ldr	r3, [pc, #316]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_RCC_OscConfig+0x166>
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2b18      	cmp	r3, #24
 800488a:	d156      	bne.n	800493a <HAL_RCC_OscConfig+0x20a>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d151      	bne.n	800493a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004896:	4b48      	ldr	r3, [pc, #288]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_RCC_OscConfig+0x17e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e392      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048ae:	4b42      	ldr	r3, [pc, #264]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 0219 	bic.w	r2, r3, #25
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	493f      	ldr	r1, [pc, #252]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fc fd7a 	bl	80013b8 <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c8:	f7fc fd76 	bl	80013b8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e37c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048da:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	f7fc fd73 	bl	80013d0 <HAL_GetREVID>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d817      	bhi.n	8004924 <HAL_RCC_OscConfig+0x1f4>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d108      	bne.n	800490e <HAL_RCC_OscConfig+0x1de>
 80048fc:	4b2e      	ldr	r3, [pc, #184]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004904:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800490c:	e07a      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	031b      	lsls	r3, r3, #12
 800491c:	4926      	ldr	r1, [pc, #152]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004922:	e06f      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	4921      	ldr	r1, [pc, #132]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	e064      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d047      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004942:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 0219 	bic.w	r2, r3, #25
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	491a      	ldr	r1, [pc, #104]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fc fd30 	bl	80013b8 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495c:	f7fc fd2c 	bl	80013b8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e332      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800496e:	4b12      	ldr	r3, [pc, #72]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497a:	f7fc fd29 	bl	80013d0 <HAL_GetREVID>
 800497e:	4603      	mov	r3, r0
 8004980:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004984:	4293      	cmp	r3, r2
 8004986:	d819      	bhi.n	80049bc <HAL_RCC_OscConfig+0x28c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b40      	cmp	r3, #64	@ 0x40
 800498e:	d108      	bne.n	80049a2 <HAL_RCC_OscConfig+0x272>
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004998:	4a07      	ldr	r2, [pc, #28]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 800499a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e030      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	031b      	lsls	r3, r3, #12
 80049b0:	4901      	ldr	r1, [pc, #4]	@ (80049b8 <HAL_RCC_OscConfig+0x288>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	e025      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
 80049b8:	58024400 	.word	0x58024400
 80049bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	4997      	ldr	r1, [pc, #604]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
 80049d0:	e018      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d2:	4b95      	ldr	r3, [pc, #596]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a94      	ldr	r2, [pc, #592]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fc fceb 	bl	80013b8 <HAL_GetTick>
 80049e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fc fce7 	bl	80013b8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e2ed      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049f8:	4b8b      	ldr	r3, [pc, #556]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80a9 	beq.w	8004b64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a12:	4b85      	ldr	r3, [pc, #532]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a1c:	4b82      	ldr	r3, [pc, #520]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d007      	beq.n	8004a38 <HAL_RCC_OscConfig+0x308>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b18      	cmp	r3, #24
 8004a2c:	d13a      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x374>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d135      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a38:	4b7b      	ldr	r3, [pc, #492]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_OscConfig+0x320>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2b80      	cmp	r3, #128	@ 0x80
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e2c1      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a50:	f7fc fcbe 	bl	80013d0 <HAL_GetREVID>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d817      	bhi.n	8004a8e <HAL_RCC_OscConfig+0x35e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x348>
 8004a66:	4b70      	ldr	r3, [pc, #448]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a76:	e075      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a78:	4b6b      	ldr	r3, [pc, #428]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	069b      	lsls	r3, r3, #26
 8004a86:	4968      	ldr	r1, [pc, #416]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a8c:	e06a      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a8e:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	4962      	ldr	r1, [pc, #392]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aa2:	e05f      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d042      	beq.n	8004b32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004aac:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fc fc7e 	bl	80013b8 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ac0:	f7fc fc7a 	bl	80013b8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e280      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ad2:	4b55      	ldr	r3, [pc, #340]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ade:	f7fc fc77 	bl	80013d0 <HAL_GetREVID>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d817      	bhi.n	8004b1c <HAL_RCC_OscConfig+0x3ec>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d108      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3d6>
 8004af4:	4b4c      	ldr	r3, [pc, #304]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004afc:	4a4a      	ldr	r2, [pc, #296]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b02:	6053      	str	r3, [r2, #4]
 8004b04:	e02e      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
 8004b06:	4b48      	ldr	r3, [pc, #288]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	069b      	lsls	r3, r3, #26
 8004b14:	4944      	ldr	r1, [pc, #272]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
 8004b1a:	e023      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
 8004b1c:	4b42      	ldr	r3, [pc, #264]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	493f      	ldr	r1, [pc, #252]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
 8004b30:	e018      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b32:	4b3d      	ldr	r3, [pc, #244]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fc3b 	bl	80013b8 <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b46:	f7fc fc37 	bl	80013b8 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e23d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b58:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d036      	beq.n	8004bde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d019      	beq.n	8004bac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b2b      	ldr	r3, [pc, #172]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fc fc18 	bl	80013b8 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8c:	f7fc fc14 	bl	80013b8 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e21a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b9e:	4b22      	ldr	r3, [pc, #136]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x45c>
 8004baa:	e018      	b.n	8004bde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bac:	4b1e      	ldr	r3, [pc, #120]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fc fbfe 	bl	80013b8 <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc0:	f7fc fbfa 	bl	80013b8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e200      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bd2:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d039      	beq.n	8004c5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc fbdb 	bl	80013b8 <HAL_GetTick>
 8004c02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c06:	f7fc fbd7 	bl	80013b8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1dd      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c18:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x4d6>
 8004c24:	e01b      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a9a      	ldr	r2, [pc, #616]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c38:	f7fc fbbe 	bl	80013b8 <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c40:	f7fc fbba 	bl	80013b8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1c0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c52:	4b92      	ldr	r3, [pc, #584]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8081 	beq.w	8004d6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a8b      	ldr	r2, [pc, #556]	@ (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c78:	f7fc fb9e 	bl	80013b8 <HAL_GetTick>
 8004c7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fc fb9a 	bl	80013b8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	@ 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1a0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c92:	4b83      	ldr	r3, [pc, #524]	@ (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x584>
 8004ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	4a7c      	ldr	r2, [pc, #496]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb2:	e02d      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5a6>
 8004cbc:	4b77      	ldr	r3, [pc, #476]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc0:	4a76      	ldr	r2, [pc, #472]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc8:	4b74      	ldr	r3, [pc, #464]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	4a73      	ldr	r2, [pc, #460]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cce:	f023 0304 	bic.w	r3, r3, #4
 8004cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x5c8>
 8004cde:	4b6f      	ldr	r3, [pc, #444]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cea:	4b6c      	ldr	r3, [pc, #432]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	4a6b      	ldr	r2, [pc, #428]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cf8:	4b68      	ldr	r3, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a67      	ldr	r2, [pc, #412]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d04:	4b65      	ldr	r3, [pc, #404]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	4a64      	ldr	r2, [pc, #400]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fc fb4e 	bl	80013b8 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fc fb4a 	bl	80013b8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e14e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d36:	4b59      	ldr	r3, [pc, #356]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x5f0>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fc fb38 	bl	80013b8 <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fc fb34 	bl	80013b8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e138      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d62:	4b4e      	ldr	r3, [pc, #312]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 812d 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d78:	4b48      	ldr	r3, [pc, #288]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d80:	2b18      	cmp	r3, #24
 8004d82:	f000 80bd 	beq.w	8004f00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	f040 809e 	bne.w	8004ecc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d90:	4b42      	ldr	r3, [pc, #264]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a41      	ldr	r2, [pc, #260]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fb0c 	bl	80013b8 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fb08 	bl	80013b8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e10e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004db6:	4b39      	ldr	r3, [pc, #228]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc2:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc6:	4b37      	ldr	r3, [pc, #220]	@ (8004ea4 <HAL_RCC_OscConfig+0x774>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4931      	ldr	r1, [pc, #196]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	3b01      	subs	r3, #1
 8004de2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dea:	3b01      	subs	r3, #1
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	3b01      	subs	r3, #1
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	3b01      	subs	r3, #1
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e0c:	4923      	ldr	r1, [pc, #140]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e12:	4b22      	ldr	r3, [pc, #136]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a21      	ldr	r2, [pc, #132]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e22:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	491b      	ldr	r1, [pc, #108]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e32:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	f023 020c 	bic.w	r2, r3, #12
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	4917      	ldr	r1, [pc, #92]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e44:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	f023 0202 	bic.w	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e50:	4912      	ldr	r1, [pc, #72]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e56:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	4a0d      	ldr	r2, [pc, #52]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	4a0a      	ldr	r2, [pc, #40]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e7a:	4b08      	ldr	r3, [pc, #32]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	4a07      	ldr	r2, [pc, #28]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e86:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a04      	ldr	r2, [pc, #16]	@ (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc fa91 	bl	80013b8 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e98:	e011      	b.n	8004ebe <HAL_RCC_OscConfig+0x78e>
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	58024800 	.word	0x58024800
 8004ea4:	fffffc0c 	.word	0xfffffc0c
 8004ea8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fc fa84 	bl	80013b8 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e08a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ebe:	4b47      	ldr	r3, [pc, #284]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x77c>
 8004eca:	e082      	b.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ecc:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fa6e 	bl	80013b8 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fc fa6a 	bl	80013b8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e070      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x7b0>
 8004efe:	e068      	b.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f00:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f06:	4b35      	ldr	r3, [pc, #212]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d031      	beq.n	8004f78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f003 0203 	and.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d12a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d122      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0a5b      	lsrs	r3, r3, #9
 8004f46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d111      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d108      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	0e1b      	lsrs	r3, r3, #24
 8004f6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e02b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f7c:	4b17      	ldr	r3, [pc, #92]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f80:	08db      	lsrs	r3, r3, #3
 8004f82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d01f      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f92:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	4a11      	ldr	r2, [pc, #68]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f9e:	f7fc fa0b 	bl	80013b8 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004fa4:	bf00      	nop
 8004fa6:	f7fc fa07 	bl	80013b8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d0f9      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <HAL_RCC_OscConfig+0x8b0>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fbe:	00d2      	lsls	r2, r2, #3
 8004fc0:	4906      	ldr	r1, [pc, #24]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004fc6:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3730      	adds	r7, #48	@ 0x30
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	ffff0007 	.word	0xffff0007

08004fe4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e19c      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d910      	bls.n	8005028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b87      	ldr	r3, [pc, #540]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 020f 	bic.w	r2, r3, #15
 800500e:	4985      	ldr	r1, [pc, #532]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b83      	ldr	r3, [pc, #524]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e184      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	4b7b      	ldr	r3, [pc, #492]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005040:	429a      	cmp	r2, r3
 8005042:	d908      	bls.n	8005056 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005044:	4b78      	ldr	r3, [pc, #480]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4975      	ldr	r1, [pc, #468]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005052:	4313      	orrs	r3, r2
 8005054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	4b70      	ldr	r3, [pc, #448]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800506e:	429a      	cmp	r2, r3
 8005070:	d908      	bls.n	8005084 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005072:	4b6d      	ldr	r3, [pc, #436]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	496a      	ldr	r1, [pc, #424]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005080:	4313      	orrs	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	4b64      	ldr	r3, [pc, #400]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800509c:	429a      	cmp	r2, r3
 800509e:	d908      	bls.n	80050b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050a0:	4b61      	ldr	r3, [pc, #388]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	495e      	ldr	r1, [pc, #376]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	4b59      	ldr	r3, [pc, #356]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d908      	bls.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ce:	4b56      	ldr	r3, [pc, #344]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4953      	ldr	r1, [pc, #332]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	4b4d      	ldr	r3, [pc, #308]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d908      	bls.n	800510e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f023 020f 	bic.w	r2, r3, #15
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4947      	ldr	r1, [pc, #284]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800510a:	4313      	orrs	r3, r2
 800510c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d055      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800511a:	4b43      	ldr	r3, [pc, #268]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4940      	ldr	r1, [pc, #256]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005128:	4313      	orrs	r3, r2
 800512a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d107      	bne.n	8005144 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005134:	4b3c      	ldr	r3, [pc, #240]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d121      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0f6      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d107      	bne.n	800515c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800514c:	4b36      	ldr	r3, [pc, #216]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d115      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0ea      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005164:	4b30      	ldr	r3, [pc, #192]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0de      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005174:	4b2c      	ldr	r3, [pc, #176]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d6      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005184:	4b28      	ldr	r3, [pc, #160]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f023 0207 	bic.w	r2, r3, #7
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4925      	ldr	r1, [pc, #148]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005192:	4313      	orrs	r3, r2
 8005194:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005196:	f7fc f90f 	bl	80013b8 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519e:	f7fc f90b 	bl	80013b8 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0be      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d1eb      	bne.n	800519e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d010      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	4b14      	ldr	r3, [pc, #80]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	429a      	cmp	r2, r3
 80051e0:	d208      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e2:	4b11      	ldr	r3, [pc, #68]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f023 020f 	bic.w	r2, r3, #15
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	490e      	ldr	r1, [pc, #56]	@ (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d214      	bcs.n	800522c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b08      	ldr	r3, [pc, #32]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 020f 	bic.w	r2, r3, #15
 800520a:	4906      	ldr	r1, [pc, #24]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b04      	ldr	r3, [pc, #16]	@ (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e086      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
 8005224:	52002000 	.word	0x52002000
 8005228:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d010      	beq.n	800525a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	4b3f      	ldr	r3, [pc, #252]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005244:	429a      	cmp	r2, r3
 8005246:	d208      	bcs.n	800525a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005248:	4b3c      	ldr	r3, [pc, #240]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4939      	ldr	r1, [pc, #228]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005256:	4313      	orrs	r3, r2
 8005258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	4b34      	ldr	r3, [pc, #208]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005272:	429a      	cmp	r2, r3
 8005274:	d208      	bcs.n	8005288 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005276:	4b31      	ldr	r3, [pc, #196]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	492e      	ldr	r1, [pc, #184]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005284:	4313      	orrs	r3, r2
 8005286:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	4b28      	ldr	r3, [pc, #160]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d208      	bcs.n	80052b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052a4:	4b25      	ldr	r3, [pc, #148]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	4922      	ldr	r1, [pc, #136]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	4b1d      	ldr	r3, [pc, #116]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d208      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052d2:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4917      	ldr	r1, [pc, #92]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052e4:	f000 f834 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b14      	ldr	r3, [pc, #80]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	4912      	ldr	r1, [pc, #72]	@ (8005340 <HAL_RCC_ClockConfig+0x35c>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005302:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <HAL_RCC_ClockConfig+0x358>)
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <HAL_RCC_ClockConfig+0x35c>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <HAL_RCC_ClockConfig+0x360>)
 800531a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800531c:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <HAL_RCC_ClockConfig+0x364>)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005322:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <HAL_RCC_ClockConfig+0x368>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fb fb66 	bl	80009f8 <HAL_InitTick>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
 8005340:	0800c20c 	.word	0x0800c20c
 8005344:	24000004 	.word	0x24000004
 8005348:	24000000 	.word	0x24000000
 800534c:	24000008 	.word	0x24000008

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	b089      	sub	sp, #36	@ 0x24
 8005354:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005356:	4bb3      	ldr	r3, [pc, #716]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800535e:	2b18      	cmp	r3, #24
 8005360:	f200 8155 	bhi.w	800560e <HAL_RCC_GetSysClockFreq+0x2be>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053d1 	.word	0x080053d1
 8005370:	0800560f 	.word	0x0800560f
 8005374:	0800560f 	.word	0x0800560f
 8005378:	0800560f 	.word	0x0800560f
 800537c:	0800560f 	.word	0x0800560f
 8005380:	0800560f 	.word	0x0800560f
 8005384:	0800560f 	.word	0x0800560f
 8005388:	0800560f 	.word	0x0800560f
 800538c:	080053f7 	.word	0x080053f7
 8005390:	0800560f 	.word	0x0800560f
 8005394:	0800560f 	.word	0x0800560f
 8005398:	0800560f 	.word	0x0800560f
 800539c:	0800560f 	.word	0x0800560f
 80053a0:	0800560f 	.word	0x0800560f
 80053a4:	0800560f 	.word	0x0800560f
 80053a8:	0800560f 	.word	0x0800560f
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	0800560f 	.word	0x0800560f
 80053b4:	0800560f 	.word	0x0800560f
 80053b8:	0800560f 	.word	0x0800560f
 80053bc:	0800560f 	.word	0x0800560f
 80053c0:	0800560f 	.word	0x0800560f
 80053c4:	0800560f 	.word	0x0800560f
 80053c8:	0800560f 	.word	0x0800560f
 80053cc:	08005403 	.word	0x08005403
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d0:	4b94      	ldr	r3, [pc, #592]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053dc:	4b91      	ldr	r3, [pc, #580]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	4a90      	ldr	r2, [pc, #576]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053ee:	e111      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053f2:	61bb      	str	r3, [r7, #24]
      break;
 80053f4:	e10e      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053f6:	4b8d      	ldr	r3, [pc, #564]	@ (800562c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053f8:	61bb      	str	r3, [r7, #24]
      break;
 80053fa:	e10b      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053fe:	61bb      	str	r3, [r7, #24]
      break;
 8005400:	e108      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005402:	4b88      	ldr	r3, [pc, #544]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800540c:	4b85      	ldr	r3, [pc, #532]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005416:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005418:	4b82      	ldr	r3, [pc, #520]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005422:	4b80      	ldr	r3, [pc, #512]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80e1 	beq.w	8005608 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f000 8083 	beq.w	8005554 <HAL_RCC_GetSysClockFreq+0x204>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b02      	cmp	r3, #2
 8005452:	f200 80a1 	bhi.w	8005598 <HAL_RCC_GetSysClockFreq+0x248>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x114>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d056      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005462:	e099      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005464:	4b6f      	ldr	r3, [pc, #444]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02d      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005470:	4b6c      	ldr	r3, [pc, #432]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	08db      	lsrs	r3, r3, #3
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	4a6b      	ldr	r2, [pc, #428]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b62      	ldr	r3, [pc, #392]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80054ca:	e087      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005638 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b51      	ldr	r3, [pc, #324]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800550e:	e065      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800563c <HAL_RCC_GetSysClockFreq+0x2ec>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b40      	ldr	r3, [pc, #256]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a02 	vldr	s12, [r7, #8]
 8005536:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005552:	e043      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005640 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b2f      	ldr	r3, [pc, #188]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a02 	vldr	s12, [r7, #8]
 800557a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005596:	e021      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800563c <HAL_RCC_GetSysClockFreq+0x2ec>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80055be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055dc:	4b11      	ldr	r3, [pc, #68]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e6:	3301      	adds	r3, #1
 80055e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005600:	ee17 3a90 	vmov	r3, s15
 8005604:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005606:	e005      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]
      break;
 800560c:	e002      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800560e:	4b07      	ldr	r3, [pc, #28]	@ (800562c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005610:	61bb      	str	r3, [r7, #24]
      break;
 8005612:	bf00      	nop
  }

  return sysclockfreq;
 8005614:	69bb      	ldr	r3, [r7, #24]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3724      	adds	r7, #36	@ 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
 8005628:	03d09000 	.word	0x03d09000
 800562c:	003d0900 	.word	0x003d0900
 8005630:	007a1200 	.word	0x007a1200
 8005634:	46000000 	.word	0x46000000
 8005638:	4c742400 	.word	0x4c742400
 800563c:	4a742400 	.word	0x4a742400
 8005640:	4af42400 	.word	0x4af42400

08005644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800564a:	f7ff fe81 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800564e:	4602      	mov	r2, r0
 8005650:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <HAL_RCC_GetHCLKFreq+0x50>)
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	490f      	ldr	r1, [pc, #60]	@ (8005698 <HAL_RCC_GetHCLKFreq+0x54>)
 800565c:	5ccb      	ldrb	r3, [r1, r3]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <HAL_RCC_GetHCLKFreq+0x50>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	4a09      	ldr	r2, [pc, #36]	@ (8005698 <HAL_RCC_GetHCLKFreq+0x54>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	4a07      	ldr	r2, [pc, #28]	@ (800569c <HAL_RCC_GetHCLKFreq+0x58>)
 8005680:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005682:	4a07      	ldr	r2, [pc, #28]	@ (80056a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005688:	4b04      	ldr	r3, [pc, #16]	@ (800569c <HAL_RCC_GetHCLKFreq+0x58>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	58024400 	.word	0x58024400
 8005698:	0800c20c 	.word	0x0800c20c
 800569c:	24000004 	.word	0x24000004
 80056a0:	24000000 	.word	0x24000000

080056a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056a8:	f7ff ffcc 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	@ (80056cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	58024400 	.word	0x58024400
 80056cc:	0800c20c 	.word	0x0800c20c

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80056d4:	f7ff ffb6 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4904      	ldr	r1, [pc, #16]	@ (80056f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	58024400 	.word	0x58024400
 80056f8:	0800c20c 	.word	0x0800c20c

080056fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	223f      	movs	r2, #63	@ 0x3f
 800570a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800570c:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <HAL_RCC_GetClockConfig+0x7c>)
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0207 	and.w	r2, r3, #7
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005718:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <HAL_RCC_GetClockConfig+0x7c>)
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005724:	4b14      	ldr	r3, [pc, #80]	@ (8005778 <HAL_RCC_GetClockConfig+0x7c>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005730:	4b11      	ldr	r3, [pc, #68]	@ (8005778 <HAL_RCC_GetClockConfig+0x7c>)
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800573c:	4b0e      	ldr	r3, [pc, #56]	@ (8005778 <HAL_RCC_GetClockConfig+0x7c>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005748:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <HAL_RCC_GetClockConfig+0x7c>)
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005754:	4b08      	ldr	r3, [pc, #32]	@ (8005778 <HAL_RCC_GetClockConfig+0x7c>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005760:	4b06      	ldr	r3, [pc, #24]	@ (800577c <HAL_RCC_GetClockConfig+0x80>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	601a      	str	r2, [r3, #0]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	58024400 	.word	0x58024400
 800577c:	52002000 	.word	0x52002000

08005780 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005784:	b0ca      	sub	sp, #296	@ 0x128
 8005786:	af00      	add	r7, sp, #0
 8005788:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005792:	2300      	movs	r3, #0
 8005794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80057a4:	2500      	movs	r5, #0
 80057a6:	ea54 0305 	orrs.w	r3, r4, r5
 80057aa:	d049      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057b6:	d02f      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057bc:	d828      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057c2:	d01a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057c8:	d822      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057d2:	d007      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057d4:	e01c      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d6:	4bb8      	ldr	r3, [pc, #736]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	4ab7      	ldr	r2, [pc, #732]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057e2:	e01a      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	3308      	adds	r3, #8
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fc8f 	bl	8007110 <RCCEx_PLL2_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057f8:	e00f      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	3328      	adds	r3, #40	@ 0x28
 8005800:	2102      	movs	r1, #2
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fd36 	bl	8007274 <RCCEx_PLL3_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800580e:	e004      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005816:	e000      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005822:	4ba5      	ldr	r3, [pc, #660]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005826:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005830:	4aa1      	ldr	r2, [pc, #644]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005832:	430b      	orrs	r3, r1
 8005834:	6513      	str	r3, [r2, #80]	@ 0x50
 8005836:	e003      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800584c:	f04f 0900 	mov.w	r9, #0
 8005850:	ea58 0309 	orrs.w	r3, r8, r9
 8005854:	d047      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585c:	2b04      	cmp	r3, #4
 800585e:	d82a      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005860:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	0800587d 	.word	0x0800587d
 800586c:	0800588b 	.word	0x0800588b
 8005870:	080058a1 	.word	0x080058a1
 8005874:	080058bf 	.word	0x080058bf
 8005878:	080058bf 	.word	0x080058bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800587c:	4b8e      	ldr	r3, [pc, #568]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800587e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005880:	4a8d      	ldr	r2, [pc, #564]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005888:	e01a      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588e:	3308      	adds	r3, #8
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fc3c 	bl	8007110 <RCCEx_PLL2_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800589e:	e00f      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a4:	3328      	adds	r3, #40	@ 0x28
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fce3 	bl	8007274 <RCCEx_PLL3_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058c8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058cc:	f023 0107 	bic.w	r1, r3, #7
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	4a78      	ldr	r2, [pc, #480]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	6513      	str	r3, [r2, #80]	@ 0x50
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80058f2:	f04f 0b00 	mov.w	fp, #0
 80058f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80058fa:	d04c      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005906:	d030      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590c:	d829      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800590e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005910:	d02d      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005912:	2bc0      	cmp	r3, #192	@ 0xc0
 8005914:	d825      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005916:	2b80      	cmp	r3, #128	@ 0x80
 8005918:	d018      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800591a:	2b80      	cmp	r3, #128	@ 0x80
 800591c:	d821      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005922:	2b40      	cmp	r3, #64	@ 0x40
 8005924:	d007      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005926:	e01c      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005928:	4b63      	ldr	r3, [pc, #396]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	4a62      	ldr	r2, [pc, #392]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005934:	e01c      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	3308      	adds	r3, #8
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fbe6 	bl	8007110 <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800594a:	e011      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005950:	3328      	adds	r3, #40	@ 0x28
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f001 fc8d 	bl	8007274 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005960:	e006      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800596e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005978:	4b4f      	ldr	r3, [pc, #316]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800597a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005986:	4a4c      	ldr	r2, [pc, #304]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005988:	430b      	orrs	r3, r1
 800598a:	6513      	str	r3, [r2, #80]	@ 0x50
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80059a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80059ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d053      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059c2:	d035      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80059c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059c8:	d82e      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059ce:	d031      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80059d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059d4:	d828      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059da:	d01a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80059dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059e0:	d822      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80059e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ea:	d007      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80059ec:	e01c      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ee:	4b32      	ldr	r3, [pc, #200]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	4a31      	ldr	r2, [pc, #196]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059fa:	e01c      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a00:	3308      	adds	r3, #8
 8005a02:	2100      	movs	r1, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fb83 	bl	8007110 <RCCEx_PLL2_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a10:	e011      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	3328      	adds	r3, #40	@ 0x28
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 fc2a 	bl	8007274 <RCCEx_PLL3_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a26:	e006      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a2e:	e002      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a50:	430b      	orrs	r3, r1
 8005a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a54:	e003      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a74:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d056      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a8a:	d038      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a90:	d831      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a96:	d034      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a9c:	d82b      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005aa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005aa8:	d825      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005aae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ab2:	d00a      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ab4:	e01f      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ab6:	bf00      	nop
 8005ab8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abc:	4ba2      	ldr	r3, [pc, #648]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	4aa1      	ldr	r2, [pc, #644]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ac8:	e01c      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ace:	3308      	adds	r3, #8
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 fb1c 	bl	8007110 <RCCEx_PLL2_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ade:	e011      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae4:	3328      	adds	r3, #40	@ 0x28
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fbc3 	bl	8007274 <RCCEx_PLL3_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b0c:	4b8e      	ldr	r3, [pc, #568]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b10:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b1c:	4a8a      	ldr	r2, [pc, #552]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d03a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	2b30      	cmp	r3, #48	@ 0x30
 8005b54:	d01f      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b56:	2b30      	cmp	r3, #48	@ 0x30
 8005b58:	d819      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d00c      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d815      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d019      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d111      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6a:	4b77      	ldr	r3, [pc, #476]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	4a76      	ldr	r2, [pc, #472]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b76:	e011      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	2102      	movs	r1, #2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 fac5 	bl	8007110 <RCCEx_PLL2_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b8c:	e006      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ba4:	4b68      	ldr	r3, [pc, #416]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb2:	4a65      	ldr	r2, [pc, #404]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bb8:	e003      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005bce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d051      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bec:	d035      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005bee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bf2:	d82e      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bf8:	d031      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005bfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bfe:	d828      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c04:	d01a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c0a:	d822      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c14:	d007      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c16:	e01c      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c18:	4b4b      	ldr	r3, [pc, #300]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c24:	e01c      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fa6e 	bl	8007110 <RCCEx_PLL2_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c3a:	e011      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	3328      	adds	r3, #40	@ 0x28
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fb15 	bl	8007274 <RCCEx_PLL3_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c50:	e006      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c58:	e002      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c5a:	bf00      	nop
 8005c5c:	e000      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c68:	4b37      	ldr	r3, [pc, #220]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c76:	4a34      	ldr	r2, [pc, #208]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c7c:	e003      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	d056      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cb0:	d033      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005cb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cb6:	d82c      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cbc:	d02f      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005cbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cc2:	d826      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cc8:	d02b      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005cca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cce:	d820      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cd4:	d012      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005cd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cda:	d81a      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d022      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce4:	d115      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cea:	3308      	adds	r3, #8
 8005cec:	2101      	movs	r1, #1
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fa0e 	bl	8007110 <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cfa:	e015      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	3328      	adds	r3, #40	@ 0x28
 8005d02:	2101      	movs	r1, #1
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 fab5 	bl	8007274 <RCCEx_PLL3_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d10:	e00a      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d18:	e006      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e004      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e002      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d22:	bf00      	nop
 8005d24:	e000      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10d      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d30:	4b05      	ldr	r3, [pc, #20]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d3e:	4a02      	ldr	r2, [pc, #8]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d44:	e006      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d46:	bf00      	nop
 8005d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	d055      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d80:	d033      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d86:	d82c      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8c:	d02f      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d92:	d826      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d98:	d02b      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d9e:	d820      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da4:	d012      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005daa:	d81a      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d022      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db4:	d115      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	3308      	adds	r3, #8
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f9a6 	bl	8007110 <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dca:	e015      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd0:	3328      	adds	r3, #40	@ 0x28
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fa4d 	bl	8007274 <RCCEx_PLL3_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e00:	4ba3      	ldr	r3, [pc, #652]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e04:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e10:	4a9f      	ldr	r2, [pc, #636]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e16:	e003      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	d037      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e4a:	d00e      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e50:	d816      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d018      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e5a:	d111      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	4a8b      	ldr	r2, [pc, #556]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e68:	e00f      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	3308      	adds	r3, #8
 8005e70:	2101      	movs	r1, #1
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 f94c 	bl	8007110 <RCCEx_PLL2_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e7e:	e004      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e86:	e000      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e92:	4b7f      	ldr	r3, [pc, #508]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e96:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea0:	4a7b      	ldr	r2, [pc, #492]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ea6:	e003      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005ec6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	d039      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d81c      	bhi.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f1d 	.word	0x08005f1d
 8005ee4:	08005ef1 	.word	0x08005ef1
 8005ee8:	08005eff 	.word	0x08005eff
 8005eec:	08005f1d 	.word	0x08005f1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef0:	4b67      	ldr	r3, [pc, #412]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	4a66      	ldr	r2, [pc, #408]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005efc:	e00f      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f02:	3308      	adds	r3, #8
 8005f04:	2102      	movs	r1, #2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 f902 	bl	8007110 <RCCEx_PLL2_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f12:	e004      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f1a:	e000      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f26:	4b5a      	ldr	r3, [pc, #360]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2a:	f023 0103 	bic.w	r1, r3, #3
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f34:	4a56      	ldr	r2, [pc, #344]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f36:	430b      	orrs	r3, r1
 8005f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f3a:	e003      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f000 809f 	beq.w	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f66:	4b4b      	ldr	r3, [pc, #300]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f72:	f7fb fa21 	bl	80013b8 <HAL_GetTick>
 8005f76:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f7a:	e00b      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f7c:	f7fb fa1c 	bl	80013b8 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b64      	cmp	r3, #100	@ 0x64
 8005f8a:	d903      	bls.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f92:	e005      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f94:	4b3f      	ldr	r3, [pc, #252]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ed      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d179      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fa8:	4b39      	ldr	r3, [pc, #228]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005faa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fb4:	4053      	eors	r3, r2
 8005fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d015      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fbe:	4b34      	ldr	r3, [pc, #208]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fca:	4b31      	ldr	r3, [pc, #196]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fce:	4a30      	ldr	r2, [pc, #192]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fda:	4a2d      	ldr	r2, [pc, #180]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff6:	d118      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fb f9de 	bl	80013b8 <HAL_GetTick>
 8005ffc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006000:	e00d      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006002:	f7fb f9d9 	bl	80013b8 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006012:	429a      	cmp	r2, r3
 8006014:	d903      	bls.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800601c:	e005      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800601e:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0eb      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800602a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602e:	2b00      	cmp	r3, #0
 8006030:	d129      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800603a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006042:	d10e      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006044:	4b12      	ldr	r3, [pc, #72]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006054:	091a      	lsrs	r2, r3, #4
 8006056:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006058:	4013      	ands	r3, r2
 800605a:	4a0d      	ldr	r2, [pc, #52]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605c:	430b      	orrs	r3, r1
 800605e:	6113      	str	r3, [r2, #16]
 8006060:	e005      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006062:	4b0b      	ldr	r3, [pc, #44]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	4a0a      	ldr	r2, [pc, #40]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006068:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800606c:	6113      	str	r3, [r2, #16]
 800606e:	4b08      	ldr	r3, [pc, #32]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006070:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800607a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607e:	4a04      	ldr	r2, [pc, #16]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006080:	430b      	orrs	r3, r1
 8006082:	6713      	str	r3, [r2, #112]	@ 0x70
 8006084:	e00e      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800608a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800608e:	e009      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006090:	58024400 	.word	0x58024400
 8006094:	58024800 	.word	0x58024800
 8006098:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f002 0301 	and.w	r3, r2, #1
 80060b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060be:	460b      	mov	r3, r1
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f000 8089 	beq.w	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060cc:	2b28      	cmp	r3, #40	@ 0x28
 80060ce:	d86b      	bhi.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80060d0:	a201      	add	r2, pc, #4	@ (adr r2, 80060d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080061b1 	.word	0x080061b1
 80060dc:	080061a9 	.word	0x080061a9
 80060e0:	080061a9 	.word	0x080061a9
 80060e4:	080061a9 	.word	0x080061a9
 80060e8:	080061a9 	.word	0x080061a9
 80060ec:	080061a9 	.word	0x080061a9
 80060f0:	080061a9 	.word	0x080061a9
 80060f4:	080061a9 	.word	0x080061a9
 80060f8:	0800617d 	.word	0x0800617d
 80060fc:	080061a9 	.word	0x080061a9
 8006100:	080061a9 	.word	0x080061a9
 8006104:	080061a9 	.word	0x080061a9
 8006108:	080061a9 	.word	0x080061a9
 800610c:	080061a9 	.word	0x080061a9
 8006110:	080061a9 	.word	0x080061a9
 8006114:	080061a9 	.word	0x080061a9
 8006118:	08006193 	.word	0x08006193
 800611c:	080061a9 	.word	0x080061a9
 8006120:	080061a9 	.word	0x080061a9
 8006124:	080061a9 	.word	0x080061a9
 8006128:	080061a9 	.word	0x080061a9
 800612c:	080061a9 	.word	0x080061a9
 8006130:	080061a9 	.word	0x080061a9
 8006134:	080061a9 	.word	0x080061a9
 8006138:	080061b1 	.word	0x080061b1
 800613c:	080061a9 	.word	0x080061a9
 8006140:	080061a9 	.word	0x080061a9
 8006144:	080061a9 	.word	0x080061a9
 8006148:	080061a9 	.word	0x080061a9
 800614c:	080061a9 	.word	0x080061a9
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061a9 	.word	0x080061a9
 8006158:	080061b1 	.word	0x080061b1
 800615c:	080061a9 	.word	0x080061a9
 8006160:	080061a9 	.word	0x080061a9
 8006164:	080061a9 	.word	0x080061a9
 8006168:	080061a9 	.word	0x080061a9
 800616c:	080061a9 	.word	0x080061a9
 8006170:	080061a9 	.word	0x080061a9
 8006174:	080061a9 	.word	0x080061a9
 8006178:	080061b1 	.word	0x080061b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	3308      	adds	r3, #8
 8006182:	2101      	movs	r1, #1
 8006184:	4618      	mov	r0, r3
 8006186:	f000 ffc3 	bl	8007110 <RCCEx_PLL2_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006190:	e00f      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006196:	3328      	adds	r3, #40	@ 0x28
 8006198:	2101      	movs	r1, #1
 800619a:	4618      	mov	r0, r3
 800619c:	f001 f86a 	bl	8007274 <RCCEx_PLL3_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061a6:	e004      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ae:	e000      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80061b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061ba:	4bbf      	ldr	r3, [pc, #764]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c8:	4abb      	ldr	r2, [pc, #748]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061ca:	430b      	orrs	r3, r1
 80061cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80061ce:	e003      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f002 0302 	and.w	r3, r2, #2
 80061e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d041      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d824      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006202:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006255 	.word	0x08006255
 800620c:	08006221 	.word	0x08006221
 8006210:	08006237 	.word	0x08006237
 8006214:	08006255 	.word	0x08006255
 8006218:	08006255 	.word	0x08006255
 800621c:	08006255 	.word	0x08006255
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006224:	3308      	adds	r3, #8
 8006226:	2101      	movs	r1, #1
 8006228:	4618      	mov	r0, r3
 800622a:	f000 ff71 	bl	8007110 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006234:	e00f      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623a:	3328      	adds	r3, #40	@ 0x28
 800623c:	2101      	movs	r1, #1
 800623e:	4618      	mov	r0, r3
 8006240:	f001 f818 	bl	8007274 <RCCEx_PLL3_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006252:	e000      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800625e:	4b96      	ldr	r3, [pc, #600]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006262:	f023 0107 	bic.w	r1, r3, #7
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800626c:	4a92      	ldr	r2, [pc, #584]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800626e:	430b      	orrs	r3, r1
 8006270:	6553      	str	r3, [r2, #84]	@ 0x54
 8006272:	e003      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f002 0304 	and.w	r3, r2, #4
 8006288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006292:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006296:	460b      	mov	r3, r1
 8006298:	4313      	orrs	r3, r2
 800629a:	d044      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062a4:	2b05      	cmp	r3, #5
 80062a6:	d825      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80062a8:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062fd 	.word	0x080062fd
 80062b4:	080062c9 	.word	0x080062c9
 80062b8:	080062df 	.word	0x080062df
 80062bc:	080062fd 	.word	0x080062fd
 80062c0:	080062fd 	.word	0x080062fd
 80062c4:	080062fd 	.word	0x080062fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062cc:	3308      	adds	r3, #8
 80062ce:	2101      	movs	r1, #1
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 ff1d 	bl	8007110 <RCCEx_PLL2_Config>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062dc:	e00f      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	3328      	adds	r3, #40	@ 0x28
 80062e4:	2101      	movs	r1, #1
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 ffc4 	bl	8007274 <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062f2:	e004      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062fa:	e000      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80062fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006306:	4b6c      	ldr	r3, [pc, #432]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630a:	f023 0107 	bic.w	r1, r3, #7
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006316:	4a68      	ldr	r2, [pc, #416]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006318:	430b      	orrs	r3, r1
 800631a:	6593      	str	r3, [r2, #88]	@ 0x58
 800631c:	e003      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f002 0320 	and.w	r3, r2, #32
 8006332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006336:	2300      	movs	r3, #0
 8006338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800633c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006340:	460b      	mov	r3, r1
 8006342:	4313      	orrs	r3, r2
 8006344:	d055      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006352:	d033      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006358:	d82c      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635e:	d02f      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006364:	d826      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006366:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800636a:	d02b      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800636c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006370:	d820      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006376:	d012      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800637c:	d81a      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d022      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006386:	d115      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	3308      	adds	r3, #8
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f000 febd 	bl	8007110 <RCCEx_PLL2_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800639c:	e015      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	3328      	adds	r3, #40	@ 0x28
 80063a4:	2102      	movs	r1, #2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 ff64 	bl	8007274 <RCCEx_PLL3_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063b2:	e00a      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ba:	e006      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063bc:	bf00      	nop
 80063be:	e004      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063c0:	bf00      	nop
 80063c2:	e002      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063c4:	bf00      	nop
 80063c6:	e000      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4b39      	ldr	r3, [pc, #228]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e2:	4a35      	ldr	r2, [pc, #212]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063e4:	430b      	orrs	r3, r1
 80063e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80063e8:	e003      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80063fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006402:	2300      	movs	r3, #0
 8006404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006408:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800640c:	460b      	mov	r3, r1
 800640e:	4313      	orrs	r3, r2
 8006410:	d058      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800641a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800641e:	d033      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006420:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006424:	d82c      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800642a:	d02f      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800642c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006430:	d826      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006432:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006436:	d02b      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006438:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800643c:	d820      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800643e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006442:	d012      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006448:	d81a      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d022      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006452:	d115      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	3308      	adds	r3, #8
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fe57 	bl	8007110 <RCCEx_PLL2_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006468:	e015      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646e:	3328      	adds	r3, #40	@ 0x28
 8006470:	2102      	movs	r1, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fefe 	bl	8007274 <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800647e:	e00a      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006486:	e006      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006488:	bf00      	nop
 800648a:	e004      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800648c:	bf00      	nop
 800648e:	e002      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006490:	bf00      	nop
 8006492:	e000      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10e      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800649e:	4b06      	ldr	r3, [pc, #24]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064ae:	4a02      	ldr	r2, [pc, #8]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80064b4:	e006      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80064b6:	bf00      	nop
 80064b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80064d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064d4:	2300      	movs	r3, #0
 80064d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80064de:	460b      	mov	r3, r1
 80064e0:	4313      	orrs	r3, r2
 80064e2:	d055      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064f0:	d033      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80064f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064f6:	d82c      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064fc:	d02f      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006502:	d826      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006504:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006508:	d02b      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800650a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800650e:	d820      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006514:	d012      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800651a:	d81a      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d022      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006524:	d115      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652a:	3308      	adds	r3, #8
 800652c:	2100      	movs	r1, #0
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fdee 	bl	8007110 <RCCEx_PLL2_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800653a:	e015      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006540:	3328      	adds	r3, #40	@ 0x28
 8006542:	2102      	movs	r1, #2
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fe95 	bl	8007274 <RCCEx_PLL3_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006550:	e00a      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006558:	e006      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800655a:	bf00      	nop
 800655c:	e004      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800655e:	bf00      	nop
 8006560:	e002      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006570:	4ba1      	ldr	r3, [pc, #644]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006574:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006580:	4a9d      	ldr	r2, [pc, #628]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006582:	430b      	orrs	r3, r1
 8006584:	6593      	str	r3, [r2, #88]	@ 0x58
 8006586:	e003      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f002 0308 	and.w	r3, r2, #8
 800659c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80065aa:	460b      	mov	r3, r1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	d01e      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065bc:	d10c      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c2:	3328      	adds	r3, #40	@ 0x28
 80065c4:	2102      	movs	r1, #2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fe54 	bl	8007274 <RCCEx_PLL3_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065d8:	4b87      	ldr	r3, [pc, #540]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065e8:	4a83      	ldr	r2, [pc, #524]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ea:	430b      	orrs	r3, r1
 80065ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f002 0310 	and.w	r3, r2, #16
 80065fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065fe:	2300      	movs	r3, #0
 8006600:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006604:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d01e      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800661a:	d10c      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006620:	3328      	adds	r3, #40	@ 0x28
 8006622:	2102      	movs	r1, #2
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fe25 	bl	8007274 <RCCEx_PLL3_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006636:	4b70      	ldr	r3, [pc, #448]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006646:	4a6c      	ldr	r2, [pc, #432]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800665c:	2300      	movs	r3, #0
 800665e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006662:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006666:	460b      	mov	r3, r1
 8006668:	4313      	orrs	r3, r2
 800666a:	d03e      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006678:	d022      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800667a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800667e:	d81b      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006688:	d00b      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800668a:	e015      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	3308      	adds	r3, #8
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fd3b 	bl	8007110 <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066a0:	e00f      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a6:	3328      	adds	r3, #40	@ 0x28
 80066a8:	2102      	movs	r1, #2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fde2 	bl	8007274 <RCCEx_PLL3_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066b6:	e004      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066be:	e000      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80066c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ca:	4b4b      	ldr	r3, [pc, #300]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066da:	4a47      	ldr	r2, [pc, #284]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	6593      	str	r3, [r2, #88]	@ 0x58
 80066e0:	e003      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80066f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066f8:	2300      	movs	r3, #0
 80066fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006700:	460b      	mov	r3, r1
 8006702:	4313      	orrs	r3, r2
 8006704:	d03b      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006712:	d01f      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006714:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006718:	d818      	bhi.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800671a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800671e:	d003      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006720:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006724:	d007      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006726:	e011      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006728:	4b33      	ldr	r3, [pc, #204]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	4a32      	ldr	r2, [pc, #200]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006734:	e00f      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	3328      	adds	r3, #40	@ 0x28
 800673c:	2101      	movs	r1, #1
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fd98 	bl	8007274 <RCCEx_PLL3_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800675e:	4b26      	ldr	r3, [pc, #152]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006762:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676e:	4a22      	ldr	r2, [pc, #136]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006770:	430b      	orrs	r3, r1
 8006772:	6553      	str	r3, [r2, #84]	@ 0x54
 8006774:	e003      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800678a:	673b      	str	r3, [r7, #112]	@ 0x70
 800678c:	2300      	movs	r3, #0
 800678e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006790:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006794:	460b      	mov	r3, r1
 8006796:	4313      	orrs	r3, r2
 8006798:	d034      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a8:	d007      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80067aa:	e011      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ac:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	4a11      	ldr	r2, [pc, #68]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067b8:	e00e      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	3308      	adds	r3, #8
 80067c0:	2102      	movs	r1, #2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fca4 	bl	8007110 <RCCEx_PLL2_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067ce:	e003      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10d      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067e0:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ee:	4a02      	ldr	r2, [pc, #8]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f0:	430b      	orrs	r3, r1
 80067f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80067f6:	bf00      	nop
 80067f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006812:	2300      	movs	r3, #0
 8006814:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006816:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d00c      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	3328      	adds	r3, #40	@ 0x28
 8006826:	2102      	movs	r1, #2
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fd23 	bl	8007274 <RCCEx_PLL3_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006846:	663b      	str	r3, [r7, #96]	@ 0x60
 8006848:	2300      	movs	r3, #0
 800684a:	667b      	str	r3, [r7, #100]	@ 0x64
 800684c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006850:	460b      	mov	r3, r1
 8006852:	4313      	orrs	r3, r2
 8006854:	d038      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006862:	d018      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006868:	d811      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800686a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800686e:	d014      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006874:	d80b      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d011      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800687a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800687e:	d106      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006880:	4bc3      	ldr	r3, [pc, #780]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	4ac2      	ldr	r2, [pc, #776]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800688c:	e008      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006894:	e004      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800689e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068a8:	4bb9      	ldr	r3, [pc, #740]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b8:	4ab5      	ldr	r2, [pc, #724]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80068be:	e003      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80068d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d6:	2300      	movs	r3, #0
 80068d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068de:	460b      	mov	r3, r1
 80068e0:	4313      	orrs	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068e4:	4baa      	ldr	r3, [pc, #680]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f2:	4aa7      	ldr	r2, [pc, #668]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006904:	653b      	str	r3, [r7, #80]	@ 0x50
 8006906:	2300      	movs	r3, #0
 8006908:	657b      	str	r3, [r7, #84]	@ 0x54
 800690a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800690e:	460b      	mov	r3, r1
 8006910:	4313      	orrs	r3, r2
 8006912:	d00a      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006914:	4b9e      	ldr	r3, [pc, #632]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006920:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006924:	4a9a      	ldr	r2, [pc, #616]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006926:	430b      	orrs	r3, r1
 8006928:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006938:	2300      	movs	r3, #0
 800693a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006940:	460b      	mov	r3, r1
 8006942:	4313      	orrs	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006946:	4b92      	ldr	r3, [pc, #584]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006954:	4a8e      	ldr	r2, [pc, #568]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006956:	430b      	orrs	r3, r1
 8006958:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006966:	643b      	str	r3, [r7, #64]	@ 0x40
 8006968:	2300      	movs	r3, #0
 800696a:	647b      	str	r3, [r7, #68]	@ 0x44
 800696c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006970:	460b      	mov	r3, r1
 8006972:	4313      	orrs	r3, r2
 8006974:	d00e      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006976:	4b86      	ldr	r3, [pc, #536]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	4a85      	ldr	r2, [pc, #532]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800697c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006980:	6113      	str	r3, [r2, #16]
 8006982:	4b83      	ldr	r3, [pc, #524]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006984:	6919      	ldr	r1, [r3, #16]
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800698e:	4a80      	ldr	r2, [pc, #512]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006990:	430b      	orrs	r3, r1
 8006992:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80069a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80069aa:	460b      	mov	r3, r1
 80069ac:	4313      	orrs	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069b0:	4b77      	ldr	r3, [pc, #476]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069be:	4a74      	ldr	r2, [pc, #464]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069c0:	430b      	orrs	r3, r1
 80069c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80069d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069d2:	2300      	movs	r3, #0
 80069d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80069da:	460b      	mov	r3, r1
 80069dc:	4313      	orrs	r3, r2
 80069de:	d00a      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069e0:	4b6b      	ldr	r3, [pc, #428]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069f0:	4a67      	ldr	r2, [pc, #412]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	2100      	movs	r1, #0
 8006a00:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a08:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	d011      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a16:	3308      	adds	r3, #8
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fb78 	bl	8007110 <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	2100      	movs	r1, #0
 8006a40:	6239      	str	r1, [r7, #32]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a48:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d011      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a56:	3308      	adds	r3, #8
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fb58 	bl	8007110 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	2100      	movs	r1, #0
 8006a80:	61b9      	str	r1, [r7, #24]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	d011      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	3308      	adds	r3, #8
 8006a98:	2102      	movs	r1, #2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fb38 	bl	8007110 <RCCEx_PLL2_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	2100      	movs	r1, #0
 8006ac0:	6139      	str	r1, [r7, #16]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006acc:	460b      	mov	r3, r1
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	d011      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad6:	3328      	adds	r3, #40	@ 0x28
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fbca 	bl	8007274 <RCCEx_PLL3_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	2100      	movs	r1, #0
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	d011      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	3328      	adds	r3, #40	@ 0x28
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fbaa 	bl	8007274 <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	2100      	movs	r1, #0
 8006b40:	6039      	str	r1, [r7, #0]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	607b      	str	r3, [r7, #4]
 8006b48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	d011      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	3328      	adds	r3, #40	@ 0x28
 8006b58:	2102      	movs	r1, #2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fb8a 	bl	8007274 <RCCEx_PLL3_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006b76:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e000      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b90:	58024400 	.word	0x58024400

08006b94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b98:	f7fe fd54 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	4904      	ldr	r1, [pc, #16]	@ (8006bbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006baa:	5ccb      	ldrb	r3, [r1, r3]
 8006bac:	f003 031f 	and.w	r3, r3, #31
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	0800c20c 	.word	0x0800c20c

08006bc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b089      	sub	sp, #36	@ 0x24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bc8:	4ba1      	ldr	r3, [pc, #644]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bd2:	4b9f      	ldr	r3, [pc, #636]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd6:	0b1b      	lsrs	r3, r3, #12
 8006bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bde:	4b9c      	ldr	r3, [pc, #624]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be2:	091b      	lsrs	r3, r3, #4
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006bea:	4b99      	ldr	r3, [pc, #612]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bee:	08db      	lsrs	r3, r3, #3
 8006bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8111 	beq.w	8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	f000 8083 	beq.w	8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	f200 80a1 	bhi.w	8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d056      	beq.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c2a:	e099      	b.n	8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c2c:	4b88      	ldr	r3, [pc, #544]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d02d      	beq.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c38:	4b85      	ldr	r3, [pc, #532]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	08db      	lsrs	r3, r3, #3
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	4a84      	ldr	r2, [pc, #528]	@ (8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
 8006c48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b7b      	ldr	r3, [pc, #492]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c92:	e087      	b.n	8006da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cd6:	e065      	b.n	8006da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cea:	4b59      	ldr	r3, [pc, #356]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cfe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d1a:	e043      	b.n	8006da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2e:	4b48      	ldr	r3, [pc, #288]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d5e:	e021      	b.n	8006da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d72:	4b37      	ldr	r3, [pc, #220]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006da2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006da4:	4b2a      	ldr	r3, [pc, #168]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da8:	0a5b      	lsrs	r3, r3, #9
 8006daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dca:	ee17 2a90 	vmov	r2, s15
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd6:	0c1b      	lsrs	r3, r3, #16
 8006dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006de8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df8:	ee17 2a90 	vmov	r2, s15
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006e00:	4b13      	ldr	r3, [pc, #76]	@ (8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e04:	0e1b      	lsrs	r3, r3, #24
 8006e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e26:	ee17 2a90 	vmov	r2, s15
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e2e:	e008      	b.n	8006e42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	609a      	str	r2, [r3, #8]
}
 8006e42:	bf00      	nop
 8006e44:	3724      	adds	r7, #36	@ 0x24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	58024400 	.word	0x58024400
 8006e54:	03d09000 	.word	0x03d09000
 8006e58:	46000000 	.word	0x46000000
 8006e5c:	4c742400 	.word	0x4c742400
 8006e60:	4a742400 	.word	0x4a742400
 8006e64:	4af42400 	.word	0x4af42400

08006e68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b089      	sub	sp, #36	@ 0x24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e70:	4ba1      	ldr	r3, [pc, #644]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e7a:	4b9f      	ldr	r3, [pc, #636]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	0d1b      	lsrs	r3, r3, #20
 8006e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e86:	4b9c      	ldr	r3, [pc, #624]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e92:	4b99      	ldr	r3, [pc, #612]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e96:	08db      	lsrs	r3, r3, #3
 8006e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8111 	beq.w	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	f000 8083 	beq.w	8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	f200 80a1 	bhi.w	8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d056      	beq.n	8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ed2:	e099      	b.n	8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ed4:	4b88      	ldr	r3, [pc, #544]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0320 	and.w	r3, r3, #32
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d02d      	beq.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee0:	4b85      	ldr	r3, [pc, #532]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	08db      	lsrs	r3, r3, #3
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	4a84      	ldr	r2, [pc, #528]	@ (80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f3a:	e087      	b.n	800704c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f7e:	e065      	b.n	800704c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f92:	4b59      	ldr	r3, [pc, #356]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fa6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc2:	e043      	b.n	800704c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd6:	4b48      	ldr	r3, [pc, #288]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007006:	e021      	b.n	800704c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701a:	4b37      	ldr	r3, [pc, #220]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702a:	ed97 6a03 	vldr	s12, [r7, #12]
 800702e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800704c:	4b2a      	ldr	r3, [pc, #168]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800704e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007050:	0a5b      	lsrs	r3, r3, #9
 8007052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007066:	edd7 6a07 	vldr	s13, [r7, #28]
 800706a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800706e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007072:	ee17 2a90 	vmov	r2, s15
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800707a:	4b1f      	ldr	r3, [pc, #124]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800707c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707e:	0c1b      	lsrs	r3, r3, #16
 8007080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007090:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007094:	edd7 6a07 	vldr	s13, [r7, #28]
 8007098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800709c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a0:	ee17 2a90 	vmov	r2, s15
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80070a8:	4b13      	ldr	r3, [pc, #76]	@ (80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ac:	0e1b      	lsrs	r3, r3, #24
 80070ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ce:	ee17 2a90 	vmov	r2, s15
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070d6:	e008      	b.n	80070ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	609a      	str	r2, [r3, #8]
}
 80070ea:	bf00      	nop
 80070ec:	3724      	adds	r7, #36	@ 0x24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	58024400 	.word	0x58024400
 80070fc:	03d09000 	.word	0x03d09000
 8007100:	46000000 	.word	0x46000000
 8007104:	4c742400 	.word	0x4c742400
 8007108:	4a742400 	.word	0x4a742400
 800710c:	4af42400 	.word	0x4af42400

08007110 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800711e:	4b53      	ldr	r3, [pc, #332]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d101      	bne.n	800712e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e099      	b.n	8007262 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800712e:	4b4f      	ldr	r3, [pc, #316]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a4e      	ldr	r2, [pc, #312]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007134:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713a:	f7fa f93d 	bl	80013b8 <HAL_GetTick>
 800713e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007140:	e008      	b.n	8007154 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007142:	f7fa f939 	bl	80013b8 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e086      	b.n	8007262 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007154:	4b45      	ldr	r3, [pc, #276]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007160:	4b42      	ldr	r3, [pc, #264]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007164:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	031b      	lsls	r3, r3, #12
 800716e:	493f      	ldr	r1, [pc, #252]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007170:	4313      	orrs	r3, r2
 8007172:	628b      	str	r3, [r1, #40]	@ 0x28
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	3b01      	subs	r3, #1
 800717a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	3b01      	subs	r3, #1
 8007184:	025b      	lsls	r3, r3, #9
 8007186:	b29b      	uxth	r3, r3
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	3b01      	subs	r3, #1
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	061b      	lsls	r3, r3, #24
 80071a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071a4:	4931      	ldr	r1, [pc, #196]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80071aa:	4b30      	ldr	r3, [pc, #192]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	492d      	ldr	r1, [pc, #180]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071bc:	4b2b      	ldr	r3, [pc, #172]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	f023 0220 	bic.w	r2, r3, #32
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	4928      	ldr	r1, [pc, #160]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071ce:	4b27      	ldr	r3, [pc, #156]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	4a26      	ldr	r2, [pc, #152]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071d4:	f023 0310 	bic.w	r3, r3, #16
 80071d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071da:	4b24      	ldr	r3, [pc, #144]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071de:	4b24      	ldr	r3, [pc, #144]	@ (8007270 <RCCEx_PLL2_Config+0x160>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	69d2      	ldr	r2, [r2, #28]
 80071e6:	00d2      	lsls	r2, r2, #3
 80071e8:	4920      	ldr	r1, [pc, #128]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071ee:	4b1f      	ldr	r3, [pc, #124]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f2:	4a1e      	ldr	r2, [pc, #120]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 80071f4:	f043 0310 	orr.w	r3, r3, #16
 80071f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007200:	4b1a      	ldr	r3, [pc, #104]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	4a19      	ldr	r2, [pc, #100]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007206:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800720a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800720c:	e00f      	b.n	800722e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d106      	bne.n	8007222 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007214:	4b15      	ldr	r3, [pc, #84]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	4a14      	ldr	r2, [pc, #80]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 800721a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800721e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007220:	e005      	b.n	800722e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007222:	4b12      	ldr	r3, [pc, #72]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	4a11      	ldr	r2, [pc, #68]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007228:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800722c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800722e:	4b0f      	ldr	r3, [pc, #60]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a0e      	ldr	r2, [pc, #56]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007234:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800723a:	f7fa f8bd 	bl	80013b8 <HAL_GetTick>
 800723e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007240:	e008      	b.n	8007254 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007242:	f7fa f8b9 	bl	80013b8 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e006      	b.n	8007262 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007254:	4b05      	ldr	r3, [pc, #20]	@ (800726c <RCCEx_PLL2_Config+0x15c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
 8007270:	ffff0007 	.word	0xffff0007

08007274 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007282:	4b53      	ldr	r3, [pc, #332]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b03      	cmp	r3, #3
 800728c:	d101      	bne.n	8007292 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e099      	b.n	80073c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007292:	4b4f      	ldr	r3, [pc, #316]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a4e      	ldr	r2, [pc, #312]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800729c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729e:	f7fa f88b 	bl	80013b8 <HAL_GetTick>
 80072a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072a4:	e008      	b.n	80072b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072a6:	f7fa f887 	bl	80013b8 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e086      	b.n	80073c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072b8:	4b45      	ldr	r3, [pc, #276]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f0      	bne.n	80072a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80072c4:	4b42      	ldr	r3, [pc, #264]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 80072c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	051b      	lsls	r3, r3, #20
 80072d2:	493f      	ldr	r1, [pc, #252]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	3b01      	subs	r3, #1
 80072de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	025b      	lsls	r3, r3, #9
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	3b01      	subs	r3, #1
 8007302:	061b      	lsls	r3, r3, #24
 8007304:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007308:	4931      	ldr	r1, [pc, #196]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800730a:	4313      	orrs	r3, r2
 800730c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800730e:	4b30      	ldr	r3, [pc, #192]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	492d      	ldr	r1, [pc, #180]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800731c:	4313      	orrs	r3, r2
 800731e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007320:	4b2b      	ldr	r3, [pc, #172]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	4928      	ldr	r1, [pc, #160]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800732e:	4313      	orrs	r3, r2
 8007330:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007332:	4b27      	ldr	r3, [pc, #156]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	4a26      	ldr	r2, [pc, #152]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800733c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800733e:	4b24      	ldr	r3, [pc, #144]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007342:	4b24      	ldr	r3, [pc, #144]	@ (80073d4 <RCCEx_PLL3_Config+0x160>)
 8007344:	4013      	ands	r3, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	69d2      	ldr	r2, [r2, #28]
 800734a:	00d2      	lsls	r2, r2, #3
 800734c:	4920      	ldr	r1, [pc, #128]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007352:	4b1f      	ldr	r3, [pc, #124]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007356:	4a1e      	ldr	r2, [pc, #120]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800735c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007364:	4b1a      	ldr	r3, [pc, #104]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	4a19      	ldr	r2, [pc, #100]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800736a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800736e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007370:	e00f      	b.n	8007392 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d106      	bne.n	8007386 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007378:	4b15      	ldr	r3, [pc, #84]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800737a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737c:	4a14      	ldr	r2, [pc, #80]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800737e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007384:	e005      	b.n	8007392 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007386:	4b12      	ldr	r3, [pc, #72]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	4a11      	ldr	r2, [pc, #68]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 800738c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007390:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007392:	4b0f      	ldr	r3, [pc, #60]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a0e      	ldr	r2, [pc, #56]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 8007398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800739c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800739e:	f7fa f80b 	bl	80013b8 <HAL_GetTick>
 80073a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073a4:	e008      	b.n	80073b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073a6:	f7fa f807 	bl	80013b8 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e006      	b.n	80073c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073b8:	4b05      	ldr	r3, [pc, #20]	@ (80073d0 <RCCEx_PLL3_Config+0x15c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0f0      	beq.n	80073a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	58024400 	.word	0x58024400
 80073d4:	ffff0007 	.word	0xffff0007

080073d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e049      	b.n	800747e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f841 	bl	8007486 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	4619      	mov	r1, r3
 8007416:	4610      	mov	r0, r2
 8007418:	f000 fc62 	bl	8007ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d001      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e054      	b.n	800755e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a26      	ldr	r2, [pc, #152]	@ (800756c <HAL_TIM_Base_Start_IT+0xd0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d022      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x80>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074de:	d01d      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x80>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a22      	ldr	r2, [pc, #136]	@ (8007570 <HAL_TIM_Base_Start_IT+0xd4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d018      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x80>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a21      	ldr	r2, [pc, #132]	@ (8007574 <HAL_TIM_Base_Start_IT+0xd8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d013      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x80>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007578 <HAL_TIM_Base_Start_IT+0xdc>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00e      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x80>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a1e      	ldr	r2, [pc, #120]	@ (800757c <HAL_TIM_Base_Start_IT+0xe0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d009      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x80>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1c      	ldr	r2, [pc, #112]	@ (8007580 <HAL_TIM_Base_Start_IT+0xe4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x80>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1b      	ldr	r2, [pc, #108]	@ (8007584 <HAL_TIM_Base_Start_IT+0xe8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d115      	bne.n	8007548 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	4b19      	ldr	r3, [pc, #100]	@ (8007588 <HAL_TIM_Base_Start_IT+0xec>)
 8007524:	4013      	ands	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b06      	cmp	r3, #6
 800752c:	d015      	beq.n	800755a <HAL_TIM_Base_Start_IT+0xbe>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007534:	d011      	beq.n	800755a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0201 	orr.w	r2, r2, #1
 8007544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007546:	e008      	b.n	800755a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	e000      	b.n	800755c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40010000 	.word	0x40010000
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40000c00 	.word	0x40000c00
 800757c:	40010400 	.word	0x40010400
 8007580:	40001800 	.word	0x40001800
 8007584:	40014000 	.word	0x40014000
 8007588:	00010007 	.word	0x00010007

0800758c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e049      	b.n	8007632 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7f9 fbcc 	bl	8000d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f000 fb88 	bl	8007ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_TIM_PWM_Start+0x24>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e03c      	b.n	80076da <HAL_TIM_PWM_Start+0x9e>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b04      	cmp	r3, #4
 8007664:	d109      	bne.n	800767a <HAL_TIM_PWM_Start+0x3e>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b01      	cmp	r3, #1
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	e02f      	b.n	80076da <HAL_TIM_PWM_Start+0x9e>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d109      	bne.n	8007694 <HAL_TIM_PWM_Start+0x58>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	bf14      	ite	ne
 800768c:	2301      	movne	r3, #1
 800768e:	2300      	moveq	r3, #0
 8007690:	b2db      	uxtb	r3, r3
 8007692:	e022      	b.n	80076da <HAL_TIM_PWM_Start+0x9e>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b0c      	cmp	r3, #12
 8007698:	d109      	bne.n	80076ae <HAL_TIM_PWM_Start+0x72>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	e015      	b.n	80076da <HAL_TIM_PWM_Start+0x9e>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b10      	cmp	r3, #16
 80076b2:	d109      	bne.n	80076c8 <HAL_TIM_PWM_Start+0x8c>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	bf14      	ite	ne
 80076c0:	2301      	movne	r3, #1
 80076c2:	2300      	moveq	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	e008      	b.n	80076da <HAL_TIM_PWM_Start+0x9e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e0a1      	b.n	8007826 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <HAL_TIM_PWM_Start+0xb6>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f0:	e023      	b.n	800773a <HAL_TIM_PWM_Start+0xfe>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d104      	bne.n	8007702 <HAL_TIM_PWM_Start+0xc6>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007700:	e01b      	b.n	800773a <HAL_TIM_PWM_Start+0xfe>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b08      	cmp	r3, #8
 8007706:	d104      	bne.n	8007712 <HAL_TIM_PWM_Start+0xd6>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007710:	e013      	b.n	800773a <HAL_TIM_PWM_Start+0xfe>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b0c      	cmp	r3, #12
 8007716:	d104      	bne.n	8007722 <HAL_TIM_PWM_Start+0xe6>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007720:	e00b      	b.n	800773a <HAL_TIM_PWM_Start+0xfe>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b10      	cmp	r3, #16
 8007726:	d104      	bne.n	8007732 <HAL_TIM_PWM_Start+0xf6>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007730:	e003      	b.n	800773a <HAL_TIM_PWM_Start+0xfe>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2201      	movs	r2, #1
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fe42 	bl	80083cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a38      	ldr	r2, [pc, #224]	@ (8007830 <HAL_TIM_PWM_Start+0x1f4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <HAL_TIM_PWM_Start+0x13e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a37      	ldr	r2, [pc, #220]	@ (8007834 <HAL_TIM_PWM_Start+0x1f8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00e      	beq.n	800777a <HAL_TIM_PWM_Start+0x13e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a35      	ldr	r2, [pc, #212]	@ (8007838 <HAL_TIM_PWM_Start+0x1fc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d009      	beq.n	800777a <HAL_TIM_PWM_Start+0x13e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a34      	ldr	r2, [pc, #208]	@ (800783c <HAL_TIM_PWM_Start+0x200>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d004      	beq.n	800777a <HAL_TIM_PWM_Start+0x13e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a32      	ldr	r2, [pc, #200]	@ (8007840 <HAL_TIM_PWM_Start+0x204>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d101      	bne.n	800777e <HAL_TIM_PWM_Start+0x142>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <HAL_TIM_PWM_Start+0x144>
 800777e:	2300      	movs	r3, #0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007792:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a25      	ldr	r2, [pc, #148]	@ (8007830 <HAL_TIM_PWM_Start+0x1f4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d022      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x1a8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077a6:	d01d      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x1a8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a25      	ldr	r2, [pc, #148]	@ (8007844 <HAL_TIM_PWM_Start+0x208>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d018      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x1a8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a24      	ldr	r2, [pc, #144]	@ (8007848 <HAL_TIM_PWM_Start+0x20c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d013      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x1a8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a22      	ldr	r2, [pc, #136]	@ (800784c <HAL_TIM_PWM_Start+0x210>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00e      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x1a8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007834 <HAL_TIM_PWM_Start+0x1f8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x1a8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007850 <HAL_TIM_PWM_Start+0x214>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d004      	beq.n	80077e4 <HAL_TIM_PWM_Start+0x1a8>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a16      	ldr	r2, [pc, #88]	@ (8007838 <HAL_TIM_PWM_Start+0x1fc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d115      	bne.n	8007810 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007854 <HAL_TIM_PWM_Start+0x218>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b06      	cmp	r3, #6
 80077f4:	d015      	beq.n	8007822 <HAL_TIM_PWM_Start+0x1e6>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077fc:	d011      	beq.n	8007822 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800780e:	e008      	b.n	8007822 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	e000      	b.n	8007824 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40010000 	.word	0x40010000
 8007834:	40010400 	.word	0x40010400
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800
 8007844:	40000400 	.word	0x40000400
 8007848:	40000800 	.word	0x40000800
 800784c:	40000c00 	.word	0x40000c00
 8007850:	40001800 	.word	0x40001800
 8007854:	00010007 	.word	0x00010007

08007858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d020      	beq.n	80078bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0202 	mvn.w	r2, #2
 800788c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9fe 	bl	8007ca4 <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9f0 	bl	8007c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fa01 	bl	8007cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d020      	beq.n	8007908 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01b      	beq.n	8007908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0204 	mvn.w	r2, #4
 80078d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9d8 	bl	8007ca4 <HAL_TIM_IC_CaptureCallback>
 80078f4:	e005      	b.n	8007902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9ca 	bl	8007c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f9db 	bl	8007cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d020      	beq.n	8007954 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01b      	beq.n	8007954 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0208 	mvn.w	r2, #8
 8007924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f9b2 	bl	8007ca4 <HAL_TIM_IC_CaptureCallback>
 8007940:	e005      	b.n	800794e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9a4 	bl	8007c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f9b5 	bl	8007cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b00      	cmp	r3, #0
 800795c:	d020      	beq.n	80079a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01b      	beq.n	80079a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0210 	mvn.w	r2, #16
 8007970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2208      	movs	r2, #8
 8007976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f98c 	bl	8007ca4 <HAL_TIM_IC_CaptureCallback>
 800798c:	e005      	b.n	800799a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f97e 	bl	8007c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f98f 	bl	8007cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0201 	mvn.w	r2, #1
 80079bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7f8 ffe4 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00c      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80079ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fdab 	bl	8008548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00c      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fda3 	bl	800855c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f949 	bl	8007ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0220 	mvn.w	r2, #32
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fd6b 	bl	8008534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e0ff      	b.n	8007c86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b14      	cmp	r3, #20
 8007a92:	f200 80f0 	bhi.w	8007c76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a96:	a201      	add	r2, pc, #4	@ (adr r2, 8007a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007c77 	.word	0x08007c77
 8007aa4:	08007c77 	.word	0x08007c77
 8007aa8:	08007c77 	.word	0x08007c77
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007c77 	.word	0x08007c77
 8007ab4:	08007c77 	.word	0x08007c77
 8007ab8:	08007c77 	.word	0x08007c77
 8007abc:	08007b73 	.word	0x08007b73
 8007ac0:	08007c77 	.word	0x08007c77
 8007ac4:	08007c77 	.word	0x08007c77
 8007ac8:	08007c77 	.word	0x08007c77
 8007acc:	08007bb3 	.word	0x08007bb3
 8007ad0:	08007c77 	.word	0x08007c77
 8007ad4:	08007c77 	.word	0x08007c77
 8007ad8:	08007c77 	.word	0x08007c77
 8007adc:	08007bf5 	.word	0x08007bf5
 8007ae0:	08007c77 	.word	0x08007c77
 8007ae4:	08007c77 	.word	0x08007c77
 8007ae8:	08007c77 	.word	0x08007c77
 8007aec:	08007c35 	.word	0x08007c35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f992 	bl	8007e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0208 	orr.w	r2, r2, #8
 8007b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0204 	bic.w	r2, r2, #4
 8007b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6999      	ldr	r1, [r3, #24]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	619a      	str	r2, [r3, #24]
      break;
 8007b2e:	e0a5      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fa02 	bl	8007f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6999      	ldr	r1, [r3, #24]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	021a      	lsls	r2, r3, #8
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	619a      	str	r2, [r3, #24]
      break;
 8007b70:	e084      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fa6b 	bl	8008054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0208 	orr.w	r2, r2, #8
 8007b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0204 	bic.w	r2, r2, #4
 8007b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69d9      	ldr	r1, [r3, #28]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	61da      	str	r2, [r3, #28]
      break;
 8007bb0:	e064      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fad3 	bl	8008164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69da      	ldr	r2, [r3, #28]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69d9      	ldr	r1, [r3, #28]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	021a      	lsls	r2, r3, #8
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	61da      	str	r2, [r3, #28]
      break;
 8007bf2:	e043      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fb1c 	bl	8008238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0208 	orr.w	r2, r2, #8
 8007c0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0204 	bic.w	r2, r2, #4
 8007c1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007c32:	e023      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fb60 	bl	8008300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	021a      	lsls	r2, r3, #8
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007c74:	e002      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop

08007c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a43      	ldr	r2, [pc, #268]	@ (8007e00 <TIM_Base_SetConfig+0x120>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <TIM_Base_SetConfig+0x40>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfe:	d00f      	beq.n	8007d20 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a40      	ldr	r2, [pc, #256]	@ (8007e04 <TIM_Base_SetConfig+0x124>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00b      	beq.n	8007d20 <TIM_Base_SetConfig+0x40>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e08 <TIM_Base_SetConfig+0x128>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d007      	beq.n	8007d20 <TIM_Base_SetConfig+0x40>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a3e      	ldr	r2, [pc, #248]	@ (8007e0c <TIM_Base_SetConfig+0x12c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_Base_SetConfig+0x40>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8007e10 <TIM_Base_SetConfig+0x130>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d108      	bne.n	8007d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a32      	ldr	r2, [pc, #200]	@ (8007e00 <TIM_Base_SetConfig+0x120>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d01f      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d40:	d01b      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a2f      	ldr	r2, [pc, #188]	@ (8007e04 <TIM_Base_SetConfig+0x124>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d017      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e08 <TIM_Base_SetConfig+0x128>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a2d      	ldr	r2, [pc, #180]	@ (8007e0c <TIM_Base_SetConfig+0x12c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00f      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8007e10 <TIM_Base_SetConfig+0x130>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00b      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2b      	ldr	r2, [pc, #172]	@ (8007e14 <TIM_Base_SetConfig+0x134>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d007      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007e18 <TIM_Base_SetConfig+0x138>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_Base_SetConfig+0x9a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a29      	ldr	r2, [pc, #164]	@ (8007e1c <TIM_Base_SetConfig+0x13c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d108      	bne.n	8007d8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a14      	ldr	r2, [pc, #80]	@ (8007e00 <TIM_Base_SetConfig+0x120>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00f      	beq.n	8007dd2 <TIM_Base_SetConfig+0xf2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a16      	ldr	r2, [pc, #88]	@ (8007e10 <TIM_Base_SetConfig+0x130>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00b      	beq.n	8007dd2 <TIM_Base_SetConfig+0xf2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a15      	ldr	r2, [pc, #84]	@ (8007e14 <TIM_Base_SetConfig+0x134>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d007      	beq.n	8007dd2 <TIM_Base_SetConfig+0xf2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a14      	ldr	r2, [pc, #80]	@ (8007e18 <TIM_Base_SetConfig+0x138>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_Base_SetConfig+0xf2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a13      	ldr	r2, [pc, #76]	@ (8007e1c <TIM_Base_SetConfig+0x13c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d103      	bne.n	8007dda <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f043 0204 	orr.w	r2, r3, #4
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]
}
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40010000 	.word	0x40010000
 8007e04:	40000400 	.word	0x40000400
 8007e08:	40000800 	.word	0x40000800
 8007e0c:	40000c00 	.word	0x40000c00
 8007e10:	40010400 	.word	0x40010400
 8007e14:	40014000 	.word	0x40014000
 8007e18:	40014400 	.word	0x40014400
 8007e1c:	40014800 	.word	0x40014800

08007e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f023 0201 	bic.w	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4b37      	ldr	r3, [pc, #220]	@ (8007f28 <TIM_OC1_SetConfig+0x108>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f023 0302 	bic.w	r3, r3, #2
 8007e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a2d      	ldr	r2, [pc, #180]	@ (8007f2c <TIM_OC1_SetConfig+0x10c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00f      	beq.n	8007e9c <TIM_OC1_SetConfig+0x7c>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f30 <TIM_OC1_SetConfig+0x110>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <TIM_OC1_SetConfig+0x7c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a2b      	ldr	r2, [pc, #172]	@ (8007f34 <TIM_OC1_SetConfig+0x114>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d007      	beq.n	8007e9c <TIM_OC1_SetConfig+0x7c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007f38 <TIM_OC1_SetConfig+0x118>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_OC1_SetConfig+0x7c>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a29      	ldr	r2, [pc, #164]	@ (8007f3c <TIM_OC1_SetConfig+0x11c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d10c      	bne.n	8007eb6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f023 0308 	bic.w	r3, r3, #8
 8007ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f023 0304 	bic.w	r3, r3, #4
 8007eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8007f2c <TIM_OC1_SetConfig+0x10c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d00f      	beq.n	8007ede <TIM_OC1_SetConfig+0xbe>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8007f30 <TIM_OC1_SetConfig+0x110>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00b      	beq.n	8007ede <TIM_OC1_SetConfig+0xbe>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f34 <TIM_OC1_SetConfig+0x114>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d007      	beq.n	8007ede <TIM_OC1_SetConfig+0xbe>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a19      	ldr	r2, [pc, #100]	@ (8007f38 <TIM_OC1_SetConfig+0x118>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d003      	beq.n	8007ede <TIM_OC1_SetConfig+0xbe>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a18      	ldr	r2, [pc, #96]	@ (8007f3c <TIM_OC1_SetConfig+0x11c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d111      	bne.n	8007f02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	621a      	str	r2, [r3, #32]
}
 8007f1c:	bf00      	nop
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	fffeff8f 	.word	0xfffeff8f
 8007f2c:	40010000 	.word	0x40010000
 8007f30:	40010400 	.word	0x40010400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	40014400 	.word	0x40014400
 8007f3c:	40014800 	.word	0x40014800

08007f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f023 0210 	bic.w	r2, r3, #16
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4b34      	ldr	r3, [pc, #208]	@ (800803c <TIM_OC2_SetConfig+0xfc>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f023 0320 	bic.w	r3, r3, #32
 8007f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a29      	ldr	r2, [pc, #164]	@ (8008040 <TIM_OC2_SetConfig+0x100>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d003      	beq.n	8007fa8 <TIM_OC2_SetConfig+0x68>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a28      	ldr	r2, [pc, #160]	@ (8008044 <TIM_OC2_SetConfig+0x104>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d10d      	bne.n	8007fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8008040 <TIM_OC2_SetConfig+0x100>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00f      	beq.n	8007fec <TIM_OC2_SetConfig+0xac>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a1d      	ldr	r2, [pc, #116]	@ (8008044 <TIM_OC2_SetConfig+0x104>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00b      	beq.n	8007fec <TIM_OC2_SetConfig+0xac>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8008048 <TIM_OC2_SetConfig+0x108>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d007      	beq.n	8007fec <TIM_OC2_SetConfig+0xac>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a1b      	ldr	r2, [pc, #108]	@ (800804c <TIM_OC2_SetConfig+0x10c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d003      	beq.n	8007fec <TIM_OC2_SetConfig+0xac>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8008050 <TIM_OC2_SetConfig+0x110>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d113      	bne.n	8008014 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	feff8fff 	.word	0xfeff8fff
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40014400 	.word	0x40014400
 8008050:	40014800 	.word	0x40014800

08008054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4b33      	ldr	r3, [pc, #204]	@ (800814c <TIM_OC3_SetConfig+0xf8>)
 8008080:	4013      	ands	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0303 	bic.w	r3, r3, #3
 800808a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800809c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a28      	ldr	r2, [pc, #160]	@ (8008150 <TIM_OC3_SetConfig+0xfc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_OC3_SetConfig+0x66>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a27      	ldr	r2, [pc, #156]	@ (8008154 <TIM_OC3_SetConfig+0x100>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d10d      	bne.n	80080d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008150 <TIM_OC3_SetConfig+0xfc>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00f      	beq.n	80080fe <TIM_OC3_SetConfig+0xaa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008154 <TIM_OC3_SetConfig+0x100>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00b      	beq.n	80080fe <TIM_OC3_SetConfig+0xaa>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <TIM_OC3_SetConfig+0x104>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <TIM_OC3_SetConfig+0xaa>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a1a      	ldr	r2, [pc, #104]	@ (800815c <TIM_OC3_SetConfig+0x108>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d003      	beq.n	80080fe <TIM_OC3_SetConfig+0xaa>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a19      	ldr	r2, [pc, #100]	@ (8008160 <TIM_OC3_SetConfig+0x10c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d113      	bne.n	8008126 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800810c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	621a      	str	r2, [r3, #32]
}
 8008140:	bf00      	nop
 8008142:	371c      	adds	r7, #28
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	fffeff8f 	.word	0xfffeff8f
 8008150:	40010000 	.word	0x40010000
 8008154:	40010400 	.word	0x40010400
 8008158:	40014000 	.word	0x40014000
 800815c:	40014400 	.word	0x40014400
 8008160:	40014800 	.word	0x40014800

08008164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4b24      	ldr	r3, [pc, #144]	@ (8008220 <TIM_OC4_SetConfig+0xbc>)
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800819a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	031b      	lsls	r3, r3, #12
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a19      	ldr	r2, [pc, #100]	@ (8008224 <TIM_OC4_SetConfig+0xc0>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00f      	beq.n	80081e4 <TIM_OC4_SetConfig+0x80>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a18      	ldr	r2, [pc, #96]	@ (8008228 <TIM_OC4_SetConfig+0xc4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <TIM_OC4_SetConfig+0x80>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a17      	ldr	r2, [pc, #92]	@ (800822c <TIM_OC4_SetConfig+0xc8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_OC4_SetConfig+0x80>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a16      	ldr	r2, [pc, #88]	@ (8008230 <TIM_OC4_SetConfig+0xcc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC4_SetConfig+0x80>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a15      	ldr	r2, [pc, #84]	@ (8008234 <TIM_OC4_SetConfig+0xd0>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d109      	bne.n	80081f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	019b      	lsls	r3, r3, #6
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	621a      	str	r2, [r3, #32]
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	feff8fff 	.word	0xfeff8fff
 8008224:	40010000 	.word	0x40010000
 8008228:	40010400 	.word	0x40010400
 800822c:	40014000 	.word	0x40014000
 8008230:	40014400 	.word	0x40014400
 8008234:	40014800 	.word	0x40014800

08008238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	4b21      	ldr	r3, [pc, #132]	@ (80082e8 <TIM_OC5_SetConfig+0xb0>)
 8008264:	4013      	ands	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a18      	ldr	r2, [pc, #96]	@ (80082ec <TIM_OC5_SetConfig+0xb4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00f      	beq.n	80082ae <TIM_OC5_SetConfig+0x76>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a17      	ldr	r2, [pc, #92]	@ (80082f0 <TIM_OC5_SetConfig+0xb8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00b      	beq.n	80082ae <TIM_OC5_SetConfig+0x76>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a16      	ldr	r2, [pc, #88]	@ (80082f4 <TIM_OC5_SetConfig+0xbc>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d007      	beq.n	80082ae <TIM_OC5_SetConfig+0x76>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a15      	ldr	r2, [pc, #84]	@ (80082f8 <TIM_OC5_SetConfig+0xc0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d003      	beq.n	80082ae <TIM_OC5_SetConfig+0x76>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a14      	ldr	r2, [pc, #80]	@ (80082fc <TIM_OC5_SetConfig+0xc4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d109      	bne.n	80082c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	621a      	str	r2, [r3, #32]
}
 80082dc:	bf00      	nop
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	fffeff8f 	.word	0xfffeff8f
 80082ec:	40010000 	.word	0x40010000
 80082f0:	40010400 	.word	0x40010400
 80082f4:	40014000 	.word	0x40014000
 80082f8:	40014400 	.word	0x40014400
 80082fc:	40014800 	.word	0x40014800

08008300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4b22      	ldr	r3, [pc, #136]	@ (80083b4 <TIM_OC6_SetConfig+0xb4>)
 800832c:	4013      	ands	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4313      	orrs	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	051b      	lsls	r3, r3, #20
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a19      	ldr	r2, [pc, #100]	@ (80083b8 <TIM_OC6_SetConfig+0xb8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00f      	beq.n	8008378 <TIM_OC6_SetConfig+0x78>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a18      	ldr	r2, [pc, #96]	@ (80083bc <TIM_OC6_SetConfig+0xbc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00b      	beq.n	8008378 <TIM_OC6_SetConfig+0x78>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a17      	ldr	r2, [pc, #92]	@ (80083c0 <TIM_OC6_SetConfig+0xc0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d007      	beq.n	8008378 <TIM_OC6_SetConfig+0x78>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a16      	ldr	r2, [pc, #88]	@ (80083c4 <TIM_OC6_SetConfig+0xc4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d003      	beq.n	8008378 <TIM_OC6_SetConfig+0x78>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a15      	ldr	r2, [pc, #84]	@ (80083c8 <TIM_OC6_SetConfig+0xc8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d109      	bne.n	800838c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800837e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	029b      	lsls	r3, r3, #10
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	621a      	str	r2, [r3, #32]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	feff8fff 	.word	0xfeff8fff
 80083b8:	40010000 	.word	0x40010000
 80083bc:	40010400 	.word	0x40010400
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400
 80083c8:	40014800 	.word	0x40014800

080083cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	2201      	movs	r2, #1
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6a1a      	ldr	r2, [r3, #32]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	43db      	mvns	r3, r3
 80083ee:	401a      	ands	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	fa01 f303 	lsl.w	r3, r1, r3
 8008404:	431a      	orrs	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800842c:	2302      	movs	r3, #2
 800842e:	e06d      	b.n	800850c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a30      	ldr	r2, [pc, #192]	@ (8008518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a2f      	ldr	r2, [pc, #188]	@ (800851c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d108      	bne.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800846a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a20      	ldr	r2, [pc, #128]	@ (8008518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d022      	beq.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a2:	d01d      	beq.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008520 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d018      	beq.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a1c      	ldr	r2, [pc, #112]	@ (8008524 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d013      	beq.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008528 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00e      	beq.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a15      	ldr	r2, [pc, #84]	@ (800851c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d009      	beq.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a16      	ldr	r2, [pc, #88]	@ (800852c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a15      	ldr	r2, [pc, #84]	@ (8008530 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d10c      	bne.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	40010000 	.word	0x40010000
 800851c:	40010400 	.word	0x40010400
 8008520:	40000400 	.word	0x40000400
 8008524:	40000800 	.word	0x40000800
 8008528:	40000c00 	.word	0x40000c00
 800852c:	40001800 	.word	0x40001800
 8008530:	40014000 	.word	0x40014000

08008534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e042      	b.n	8008608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008588:	2b00      	cmp	r3, #0
 800858a:	d106      	bne.n	800859a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7f8 fc81 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2224      	movs	r2, #36	@ 0x24
 800859e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0201 	bic.w	r2, r2, #1
 80085b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fae0 	bl	8009b80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fd75 	bl	80090b0 <UART_SetConfig>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e01b      	b.n	8008608 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0201 	orr.w	r2, r2, #1
 80085fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 fb5f 	bl	8009cc4 <UART_CheckIdleState>
 8008606:	4603      	mov	r3, r0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	@ 0x28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	4613      	mov	r3, r2
 800861c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008624:	2b20      	cmp	r3, #32
 8008626:	d137      	bne.n	8008698 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <HAL_UART_Receive_DMA+0x24>
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e030      	b.n	800869a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a18      	ldr	r2, [pc, #96]	@ (80086a4 <HAL_UART_Receive_DMA+0x94>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d01f      	beq.n	8008688 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d018      	beq.n	8008688 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	613b      	str	r3, [r7, #16]
   return(result);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	623b      	str	r3, [r7, #32]
 8008676:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	69f9      	ldr	r1, [r7, #28]
 800867a:	6a3a      	ldr	r2, [r7, #32]
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	61bb      	str	r3, [r7, #24]
   return(result);
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e6      	bne.n	8008656 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	461a      	mov	r2, r3
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f001 fc30 	bl	8009ef4 <UART_Start_Receive_DMA>
 8008694:	4603      	mov	r3, r0
 8008696:	e000      	b.n	800869a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008698:	2302      	movs	r3, #2
  }
}
 800869a:	4618      	mov	r0, r3
 800869c:	3728      	adds	r7, #40	@ 0x28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	58000c00 	.word	0x58000c00

080086a8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b0a0      	sub	sp, #128	@ 0x80
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80086be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086c0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80086c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80086ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086d0:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80086d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80086dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e6      	bne.n	80086b0 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086f4:	4b72      	ldr	r3, [pc, #456]	@ (80088c0 <HAL_UART_Abort+0x218>)
 80086f6:	4013      	ands	r3, r2
 80086f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008702:	657a      	str	r2, [r7, #84]	@ 0x54
 8008704:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008708:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d118      	bne.n	8008750 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	f023 0310 	bic.w	r3, r3, #16
 8008732:	677b      	str	r3, [r7, #116]	@ 0x74
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800873c:	643b      	str	r3, [r7, #64]	@ 0x40
 800873e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008742:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800875a:	2b80      	cmp	r3, #128	@ 0x80
 800875c:	d137      	bne.n	80087ce <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	61fb      	str	r3, [r7, #28]
   return(result);
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008774:	673b      	str	r3, [r7, #112]	@ 0x70
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3308      	adds	r3, #8
 800877c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800877e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e5      	bne.n	800875e <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d019      	beq.n	80087ce <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800879e:	2200      	movs	r2, #0
 80087a0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f9 fd3c 	bl	8002224 <HAL_DMA_Abort>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00d      	beq.n	80087ce <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fb f9c2 	bl	8003b40 <HAL_DMA_GetError>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b20      	cmp	r3, #32
 80087c0:	d105      	bne.n	80087ce <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2210      	movs	r2, #16
 80087c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e073      	b.n	80088b6 <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d8:	2b40      	cmp	r3, #64	@ 0x40
 80087da:	d13b      	bne.n	8008854 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3308      	adds	r3, #8
 80087e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3308      	adds	r3, #8
 80087fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087fc:	61ba      	str	r2, [r7, #24]
 80087fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	613b      	str	r3, [r7, #16]
   return(result);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e5      	bne.n	80087dc <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01c      	beq.n	8008854 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008820:	2200      	movs	r2, #0
 8008822:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800882a:	4618      	mov	r0, r3
 800882c:	f7f9 fcfa 	bl	8002224 <HAL_DMA_Abort>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883c:	4618      	mov	r0, r3
 800883e:	f7fb f97f 	bl	8003b40 <HAL_DMA_GetError>
 8008842:	4603      	mov	r3, r0
 8008844:	2b20      	cmp	r3, #32
 8008846:	d105      	bne.n	8008854 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2210      	movs	r2, #16
 800884c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e030      	b.n	80088b6 <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	220f      	movs	r2, #15
 800886a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008874:	d107      	bne.n	8008886 <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699a      	ldr	r2, [r3, #24]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f042 0210 	orr.w	r2, r2, #16
 8008884:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 0208 	orr.w	r2, r2, #8
 8008894:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3780      	adds	r7, #128	@ 0x80
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	ef7ffffe 	.word	0xef7ffffe

080088c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b0ba      	sub	sp, #232	@ 0xe8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80088ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80088f2:	4013      	ands	r3, r2
 80088f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80088f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d11b      	bne.n	8008938 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008904:	f003 0320 	and.w	r3, r3, #32
 8008908:	2b00      	cmp	r3, #0
 800890a:	d015      	beq.n	8008938 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800890c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	d105      	bne.n	8008924 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d009      	beq.n	8008938 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8393 	beq.w	8009054 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
      }
      return;
 8008936:	e38d      	b.n	8009054 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 8123 	beq.w	8008b88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008942:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008946:	4b8d      	ldr	r3, [pc, #564]	@ (8008b7c <HAL_UART_IRQHandler+0x2b8>)
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d106      	bne.n	800895c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800894e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008952:	4b8b      	ldr	r3, [pc, #556]	@ (8008b80 <HAL_UART_IRQHandler+0x2bc>)
 8008954:	4013      	ands	r3, r2
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8116 	beq.w	8008b88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800895c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d011      	beq.n	800898c <HAL_UART_IRQHandler+0xc8>
 8008968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800896c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2201      	movs	r2, #1
 800897a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008982:	f043 0201 	orr.w	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800898c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d011      	beq.n	80089bc <HAL_UART_IRQHandler+0xf8>
 8008998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2202      	movs	r2, #2
 80089aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b2:	f043 0204 	orr.w	r2, r3, #4
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d011      	beq.n	80089ec <HAL_UART_IRQHandler+0x128>
 80089c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2204      	movs	r2, #4
 80089da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089e2:	f043 0202 	orr.w	r2, r3, #2
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f0:	f003 0308 	and.w	r3, r3, #8
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d017      	beq.n	8008a28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a08:	4b5c      	ldr	r3, [pc, #368]	@ (8008b7c <HAL_UART_IRQHandler+0x2b8>)
 8008a0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2208      	movs	r2, #8
 8008a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a1e:	f043 0208 	orr.w	r2, r3, #8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d012      	beq.n	8008a5a <HAL_UART_IRQHandler+0x196>
 8008a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a50:	f043 0220 	orr.w	r2, r3, #32
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 82f9 	beq.w	8009058 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d013      	beq.n	8008a9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aae:	2b40      	cmp	r3, #64	@ 0x40
 8008ab0:	d005      	beq.n	8008abe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ab6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d054      	beq.n	8008b68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fb00 	bl	800a0c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ace:	2b40      	cmp	r3, #64	@ 0x40
 8008ad0:	d146      	bne.n	8008b60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3308      	adds	r3, #8
 8008afa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008afe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1d9      	bne.n	8008ad2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d017      	beq.n	8008b58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b2e:	4a15      	ldr	r2, [pc, #84]	@ (8008b84 <HAL_UART_IRQHandler+0x2c0>)
 8008b30:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7f9 fe91 	bl	8002860 <HAL_DMA_Abort_IT>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d019      	beq.n	8008b78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008b52:	4610      	mov	r0, r2
 8008b54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b56:	e00f      	b.n	8008b78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fa93 	bl	8009084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b5e:	e00b      	b.n	8008b78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa8f 	bl	8009084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b66:	e007      	b.n	8008b78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa8b 	bl	8009084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008b76:	e26f      	b.n	8009058 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b78:	bf00      	nop
    return;
 8008b7a:	e26d      	b.n	8009058 <HAL_UART_IRQHandler+0x794>
 8008b7c:	10000001 	.word	0x10000001
 8008b80:	04000120 	.word	0x04000120
 8008b84:	0800a377 	.word	0x0800a377

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	f040 8203 	bne.w	8008f98 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 81fc 	beq.w	8008f98 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 81f5 	beq.w	8008f98 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2210      	movs	r2, #16
 8008bb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc0:	2b40      	cmp	r3, #64	@ 0x40
 8008bc2:	f040 816d 	bne.w	8008ea0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4aa4      	ldr	r2, [pc, #656]	@ (8008e60 <HAL_UART_IRQHandler+0x59c>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d068      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4aa1      	ldr	r2, [pc, #644]	@ (8008e64 <HAL_UART_IRQHandler+0x5a0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d061      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a9f      	ldr	r2, [pc, #636]	@ (8008e68 <HAL_UART_IRQHandler+0x5a4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d05a      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a9c      	ldr	r2, [pc, #624]	@ (8008e6c <HAL_UART_IRQHandler+0x5a8>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d053      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a9a      	ldr	r2, [pc, #616]	@ (8008e70 <HAL_UART_IRQHandler+0x5ac>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d04c      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a97      	ldr	r2, [pc, #604]	@ (8008e74 <HAL_UART_IRQHandler+0x5b0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d045      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a95      	ldr	r2, [pc, #596]	@ (8008e78 <HAL_UART_IRQHandler+0x5b4>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d03e      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a92      	ldr	r2, [pc, #584]	@ (8008e7c <HAL_UART_IRQHandler+0x5b8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d037      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a90      	ldr	r2, [pc, #576]	@ (8008e80 <HAL_UART_IRQHandler+0x5bc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d030      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a8d      	ldr	r2, [pc, #564]	@ (8008e84 <HAL_UART_IRQHandler+0x5c0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d029      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a8b      	ldr	r2, [pc, #556]	@ (8008e88 <HAL_UART_IRQHandler+0x5c4>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d022      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a88      	ldr	r2, [pc, #544]	@ (8008e8c <HAL_UART_IRQHandler+0x5c8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d01b      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a86      	ldr	r2, [pc, #536]	@ (8008e90 <HAL_UART_IRQHandler+0x5cc>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d014      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a83      	ldr	r2, [pc, #524]	@ (8008e94 <HAL_UART_IRQHandler+0x5d0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00d      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a81      	ldr	r2, [pc, #516]	@ (8008e98 <HAL_UART_IRQHandler+0x5d4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d006      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x3e2>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a7e      	ldr	r2, [pc, #504]	@ (8008e9c <HAL_UART_IRQHandler+0x5d8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d106      	bne.n	8008cb4 <HAL_UART_IRQHandler+0x3f0>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	e005      	b.n	8008cc0 <HAL_UART_IRQHandler+0x3fc>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80ad 	beq.w	8008e28 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008cd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	f080 80a5 	bcs.w	8008e28 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ce4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cf4:	f000 8087 	beq.w	8008e06 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1da      	bne.n	8008cf8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3308      	adds	r3, #8
 8008d48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3308      	adds	r3, #8
 8008d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e1      	bne.n	8008d42 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3308      	adds	r3, #8
 8008d84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008da2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008da4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008da8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e3      	bne.n	8008d7e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dd4:	f023 0310 	bic.w	r3, r3, #16
 8008dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	461a      	mov	r2, r3
 8008de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008de6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008de8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e4      	bne.n	8008dc4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f9 fa0f 	bl	8002224 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f939 	bl	8009098 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008e26:	e119      	b.n	800905c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e32:	429a      	cmp	r2, r3
 8008e34:	f040 8112 	bne.w	800905c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e44:	f040 810a 	bne.w	800905c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f91e 	bl	8009098 <HAL_UARTEx_RxEventCallback>
      return;
 8008e5c:	e0fe      	b.n	800905c <HAL_UART_IRQHandler+0x798>
 8008e5e:	bf00      	nop
 8008e60:	40020010 	.word	0x40020010
 8008e64:	40020028 	.word	0x40020028
 8008e68:	40020040 	.word	0x40020040
 8008e6c:	40020058 	.word	0x40020058
 8008e70:	40020070 	.word	0x40020070
 8008e74:	40020088 	.word	0x40020088
 8008e78:	400200a0 	.word	0x400200a0
 8008e7c:	400200b8 	.word	0x400200b8
 8008e80:	40020410 	.word	0x40020410
 8008e84:	40020428 	.word	0x40020428
 8008e88:	40020440 	.word	0x40020440
 8008e8c:	40020458 	.word	0x40020458
 8008e90:	40020470 	.word	0x40020470
 8008e94:	40020488 	.word	0x40020488
 8008e98:	400204a0 	.word	0x400204a0
 8008e9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 80cf 	beq.w	8009060 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008ec2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 80ca 	beq.w	8009060 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ef0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e4      	bne.n	8008ecc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3308      	adds	r3, #8
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	623b      	str	r3, [r7, #32]
   return(result);
 8008f12:	6a3a      	ldr	r2, [r7, #32]
 8008f14:	4b55      	ldr	r3, [pc, #340]	@ (800906c <HAL_UART_IRQHandler+0x7a8>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e3      	bne.n	8008f02 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0310 	bic.w	r3, r3, #16
 8008f62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	69b9      	ldr	r1, [r7, #24]
 8008f76:	69fa      	ldr	r2, [r7, #28]
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e4      	bne.n	8008f4e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f881 	bl	8009098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f96:	e063      	b.n	8009060 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <HAL_UART_IRQHandler+0x6fe>
 8008fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d008      	beq.n	8008fc2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fa18 	bl	800a3f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fc0:	e051      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d014      	beq.n	8008ff8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d105      	bne.n	8008fe6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d008      	beq.n	8008ff8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d03a      	beq.n	8009064 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	4798      	blx	r3
    }
    return;
 8008ff6:	e035      	b.n	8009064 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d009      	beq.n	8009018 <HAL_UART_IRQHandler+0x754>
 8009004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 f9c2 	bl	800a39a <UART_EndTransmit_IT>
    return;
 8009016:	e026      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d009      	beq.n	8009038 <HAL_UART_IRQHandler+0x774>
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 f9f1 	bl	800a418 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009036:	e016      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d010      	beq.n	8009066 <HAL_UART_IRQHandler+0x7a2>
 8009044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009048:	2b00      	cmp	r3, #0
 800904a:	da0c      	bge.n	8009066 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f9d9 	bl	800a404 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009052:	e008      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009054:	bf00      	nop
 8009056:	e006      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009058:	bf00      	nop
 800905a:	e004      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
      return;
 800905c:	bf00      	nop
 800905e:	e002      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009060:	bf00      	nop
 8009062:	e000      	b.n	8009066 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009064:	bf00      	nop
  }
}
 8009066:	37e8      	adds	r7, #232	@ 0xe8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	effffffe 	.word	0xeffffffe

08009070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090b4:	b092      	sub	sp, #72	@ 0x48
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	431a      	orrs	r2, r3
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	431a      	orrs	r2, r3
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	4bbe      	ldr	r3, [pc, #760]	@ (80093d8 <UART_SetConfig+0x328>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	6812      	ldr	r2, [r2, #0]
 80090e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090e8:	430b      	orrs	r3, r1
 80090ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4ab3      	ldr	r2, [pc, #716]	@ (80093dc <UART_SetConfig+0x32c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d004      	beq.n	800911c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009118:	4313      	orrs	r3, r2
 800911a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	4baf      	ldr	r3, [pc, #700]	@ (80093e0 <UART_SetConfig+0x330>)
 8009124:	4013      	ands	r3, r2
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	6812      	ldr	r2, [r2, #0]
 800912a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800912c:	430b      	orrs	r3, r1
 800912e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	f023 010f 	bic.w	r1, r3, #15
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4aa6      	ldr	r2, [pc, #664]	@ (80093e4 <UART_SetConfig+0x334>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d177      	bne.n	8009240 <UART_SetConfig+0x190>
 8009150:	4ba5      	ldr	r3, [pc, #660]	@ (80093e8 <UART_SetConfig+0x338>)
 8009152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009158:	2b28      	cmp	r3, #40	@ 0x28
 800915a:	d86d      	bhi.n	8009238 <UART_SetConfig+0x188>
 800915c:	a201      	add	r2, pc, #4	@ (adr r2, 8009164 <UART_SetConfig+0xb4>)
 800915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009162:	bf00      	nop
 8009164:	08009209 	.word	0x08009209
 8009168:	08009239 	.word	0x08009239
 800916c:	08009239 	.word	0x08009239
 8009170:	08009239 	.word	0x08009239
 8009174:	08009239 	.word	0x08009239
 8009178:	08009239 	.word	0x08009239
 800917c:	08009239 	.word	0x08009239
 8009180:	08009239 	.word	0x08009239
 8009184:	08009211 	.word	0x08009211
 8009188:	08009239 	.word	0x08009239
 800918c:	08009239 	.word	0x08009239
 8009190:	08009239 	.word	0x08009239
 8009194:	08009239 	.word	0x08009239
 8009198:	08009239 	.word	0x08009239
 800919c:	08009239 	.word	0x08009239
 80091a0:	08009239 	.word	0x08009239
 80091a4:	08009219 	.word	0x08009219
 80091a8:	08009239 	.word	0x08009239
 80091ac:	08009239 	.word	0x08009239
 80091b0:	08009239 	.word	0x08009239
 80091b4:	08009239 	.word	0x08009239
 80091b8:	08009239 	.word	0x08009239
 80091bc:	08009239 	.word	0x08009239
 80091c0:	08009239 	.word	0x08009239
 80091c4:	08009221 	.word	0x08009221
 80091c8:	08009239 	.word	0x08009239
 80091cc:	08009239 	.word	0x08009239
 80091d0:	08009239 	.word	0x08009239
 80091d4:	08009239 	.word	0x08009239
 80091d8:	08009239 	.word	0x08009239
 80091dc:	08009239 	.word	0x08009239
 80091e0:	08009239 	.word	0x08009239
 80091e4:	08009229 	.word	0x08009229
 80091e8:	08009239 	.word	0x08009239
 80091ec:	08009239 	.word	0x08009239
 80091f0:	08009239 	.word	0x08009239
 80091f4:	08009239 	.word	0x08009239
 80091f8:	08009239 	.word	0x08009239
 80091fc:	08009239 	.word	0x08009239
 8009200:	08009239 	.word	0x08009239
 8009204:	08009231 	.word	0x08009231
 8009208:	2301      	movs	r3, #1
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920e:	e222      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009210:	2304      	movs	r3, #4
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e21e      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009218:	2308      	movs	r3, #8
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921e:	e21a      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009220:	2310      	movs	r3, #16
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009226:	e216      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009228:	2320      	movs	r3, #32
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922e:	e212      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009230:	2340      	movs	r3, #64	@ 0x40
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009236:	e20e      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009238:	2380      	movs	r3, #128	@ 0x80
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e20a      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a69      	ldr	r2, [pc, #420]	@ (80093ec <UART_SetConfig+0x33c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d130      	bne.n	80092ac <UART_SetConfig+0x1fc>
 800924a:	4b67      	ldr	r3, [pc, #412]	@ (80093e8 <UART_SetConfig+0x338>)
 800924c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b05      	cmp	r3, #5
 8009254:	d826      	bhi.n	80092a4 <UART_SetConfig+0x1f4>
 8009256:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <UART_SetConfig+0x1ac>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009275 	.word	0x08009275
 8009260:	0800927d 	.word	0x0800927d
 8009264:	08009285 	.word	0x08009285
 8009268:	0800928d 	.word	0x0800928d
 800926c:	08009295 	.word	0x08009295
 8009270:	0800929d 	.word	0x0800929d
 8009274:	2300      	movs	r3, #0
 8009276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927a:	e1ec      	b.n	8009656 <UART_SetConfig+0x5a6>
 800927c:	2304      	movs	r3, #4
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009282:	e1e8      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009284:	2308      	movs	r3, #8
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928a:	e1e4      	b.n	8009656 <UART_SetConfig+0x5a6>
 800928c:	2310      	movs	r3, #16
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009292:	e1e0      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009294:	2320      	movs	r3, #32
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929a:	e1dc      	b.n	8009656 <UART_SetConfig+0x5a6>
 800929c:	2340      	movs	r3, #64	@ 0x40
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a2:	e1d8      	b.n	8009656 <UART_SetConfig+0x5a6>
 80092a4:	2380      	movs	r3, #128	@ 0x80
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	e1d4      	b.n	8009656 <UART_SetConfig+0x5a6>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a4f      	ldr	r2, [pc, #316]	@ (80093f0 <UART_SetConfig+0x340>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d130      	bne.n	8009318 <UART_SetConfig+0x268>
 80092b6:	4b4c      	ldr	r3, [pc, #304]	@ (80093e8 <UART_SetConfig+0x338>)
 80092b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d826      	bhi.n	8009310 <UART_SetConfig+0x260>
 80092c2:	a201      	add	r2, pc, #4	@ (adr r2, 80092c8 <UART_SetConfig+0x218>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	080092e1 	.word	0x080092e1
 80092cc:	080092e9 	.word	0x080092e9
 80092d0:	080092f1 	.word	0x080092f1
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009309 	.word	0x08009309
 80092e0:	2300      	movs	r3, #0
 80092e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e6:	e1b6      	b.n	8009656 <UART_SetConfig+0x5a6>
 80092e8:	2304      	movs	r3, #4
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ee:	e1b2      	b.n	8009656 <UART_SetConfig+0x5a6>
 80092f0:	2308      	movs	r3, #8
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f6:	e1ae      	b.n	8009656 <UART_SetConfig+0x5a6>
 80092f8:	2310      	movs	r3, #16
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fe:	e1aa      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009300:	2320      	movs	r3, #32
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009306:	e1a6      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009308:	2340      	movs	r3, #64	@ 0x40
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930e:	e1a2      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009310:	2380      	movs	r3, #128	@ 0x80
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009316:	e19e      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a35      	ldr	r2, [pc, #212]	@ (80093f4 <UART_SetConfig+0x344>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d130      	bne.n	8009384 <UART_SetConfig+0x2d4>
 8009322:	4b31      	ldr	r3, [pc, #196]	@ (80093e8 <UART_SetConfig+0x338>)
 8009324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b05      	cmp	r3, #5
 800932c:	d826      	bhi.n	800937c <UART_SetConfig+0x2cc>
 800932e:	a201      	add	r2, pc, #4	@ (adr r2, 8009334 <UART_SetConfig+0x284>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	0800934d 	.word	0x0800934d
 8009338:	08009355 	.word	0x08009355
 800933c:	0800935d 	.word	0x0800935d
 8009340:	08009365 	.word	0x08009365
 8009344:	0800936d 	.word	0x0800936d
 8009348:	08009375 	.word	0x08009375
 800934c:	2300      	movs	r3, #0
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009352:	e180      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009354:	2304      	movs	r3, #4
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935a:	e17c      	b.n	8009656 <UART_SetConfig+0x5a6>
 800935c:	2308      	movs	r3, #8
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009362:	e178      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009364:	2310      	movs	r3, #16
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936a:	e174      	b.n	8009656 <UART_SetConfig+0x5a6>
 800936c:	2320      	movs	r3, #32
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009372:	e170      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009374:	2340      	movs	r3, #64	@ 0x40
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937a:	e16c      	b.n	8009656 <UART_SetConfig+0x5a6>
 800937c:	2380      	movs	r3, #128	@ 0x80
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009382:	e168      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a1b      	ldr	r2, [pc, #108]	@ (80093f8 <UART_SetConfig+0x348>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d142      	bne.n	8009414 <UART_SetConfig+0x364>
 800938e:	4b16      	ldr	r3, [pc, #88]	@ (80093e8 <UART_SetConfig+0x338>)
 8009390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b05      	cmp	r3, #5
 8009398:	d838      	bhi.n	800940c <UART_SetConfig+0x35c>
 800939a:	a201      	add	r2, pc, #4	@ (adr r2, 80093a0 <UART_SetConfig+0x2f0>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	080093b9 	.word	0x080093b9
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	080093c9 	.word	0x080093c9
 80093ac:	080093d1 	.word	0x080093d1
 80093b0:	080093fd 	.word	0x080093fd
 80093b4:	08009405 	.word	0x08009405
 80093b8:	2300      	movs	r3, #0
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e14a      	b.n	8009656 <UART_SetConfig+0x5a6>
 80093c0:	2304      	movs	r3, #4
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e146      	b.n	8009656 <UART_SetConfig+0x5a6>
 80093c8:	2308      	movs	r3, #8
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e142      	b.n	8009656 <UART_SetConfig+0x5a6>
 80093d0:	2310      	movs	r3, #16
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e13e      	b.n	8009656 <UART_SetConfig+0x5a6>
 80093d8:	cfff69f3 	.word	0xcfff69f3
 80093dc:	58000c00 	.word	0x58000c00
 80093e0:	11fff4ff 	.word	0x11fff4ff
 80093e4:	40011000 	.word	0x40011000
 80093e8:	58024400 	.word	0x58024400
 80093ec:	40004400 	.word	0x40004400
 80093f0:	40004800 	.word	0x40004800
 80093f4:	40004c00 	.word	0x40004c00
 80093f8:	40005000 	.word	0x40005000
 80093fc:	2320      	movs	r3, #32
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009402:	e128      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009404:	2340      	movs	r3, #64	@ 0x40
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940a:	e124      	b.n	8009656 <UART_SetConfig+0x5a6>
 800940c:	2380      	movs	r3, #128	@ 0x80
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009412:	e120      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4acb      	ldr	r2, [pc, #812]	@ (8009748 <UART_SetConfig+0x698>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d176      	bne.n	800950c <UART_SetConfig+0x45c>
 800941e:	4bcb      	ldr	r3, [pc, #812]	@ (800974c <UART_SetConfig+0x69c>)
 8009420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009426:	2b28      	cmp	r3, #40	@ 0x28
 8009428:	d86c      	bhi.n	8009504 <UART_SetConfig+0x454>
 800942a:	a201      	add	r2, pc, #4	@ (adr r2, 8009430 <UART_SetConfig+0x380>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	080094d5 	.word	0x080094d5
 8009434:	08009505 	.word	0x08009505
 8009438:	08009505 	.word	0x08009505
 800943c:	08009505 	.word	0x08009505
 8009440:	08009505 	.word	0x08009505
 8009444:	08009505 	.word	0x08009505
 8009448:	08009505 	.word	0x08009505
 800944c:	08009505 	.word	0x08009505
 8009450:	080094dd 	.word	0x080094dd
 8009454:	08009505 	.word	0x08009505
 8009458:	08009505 	.word	0x08009505
 800945c:	08009505 	.word	0x08009505
 8009460:	08009505 	.word	0x08009505
 8009464:	08009505 	.word	0x08009505
 8009468:	08009505 	.word	0x08009505
 800946c:	08009505 	.word	0x08009505
 8009470:	080094e5 	.word	0x080094e5
 8009474:	08009505 	.word	0x08009505
 8009478:	08009505 	.word	0x08009505
 800947c:	08009505 	.word	0x08009505
 8009480:	08009505 	.word	0x08009505
 8009484:	08009505 	.word	0x08009505
 8009488:	08009505 	.word	0x08009505
 800948c:	08009505 	.word	0x08009505
 8009490:	080094ed 	.word	0x080094ed
 8009494:	08009505 	.word	0x08009505
 8009498:	08009505 	.word	0x08009505
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009505 	.word	0x08009505
 80094a4:	08009505 	.word	0x08009505
 80094a8:	08009505 	.word	0x08009505
 80094ac:	08009505 	.word	0x08009505
 80094b0:	080094f5 	.word	0x080094f5
 80094b4:	08009505 	.word	0x08009505
 80094b8:	08009505 	.word	0x08009505
 80094bc:	08009505 	.word	0x08009505
 80094c0:	08009505 	.word	0x08009505
 80094c4:	08009505 	.word	0x08009505
 80094c8:	08009505 	.word	0x08009505
 80094cc:	08009505 	.word	0x08009505
 80094d0:	080094fd 	.word	0x080094fd
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e0bc      	b.n	8009656 <UART_SetConfig+0x5a6>
 80094dc:	2304      	movs	r3, #4
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e2:	e0b8      	b.n	8009656 <UART_SetConfig+0x5a6>
 80094e4:	2308      	movs	r3, #8
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ea:	e0b4      	b.n	8009656 <UART_SetConfig+0x5a6>
 80094ec:	2310      	movs	r3, #16
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e0b0      	b.n	8009656 <UART_SetConfig+0x5a6>
 80094f4:	2320      	movs	r3, #32
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e0ac      	b.n	8009656 <UART_SetConfig+0x5a6>
 80094fc:	2340      	movs	r3, #64	@ 0x40
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e0a8      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009504:	2380      	movs	r3, #128	@ 0x80
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e0a4      	b.n	8009656 <UART_SetConfig+0x5a6>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a8f      	ldr	r2, [pc, #572]	@ (8009750 <UART_SetConfig+0x6a0>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d130      	bne.n	8009578 <UART_SetConfig+0x4c8>
 8009516:	4b8d      	ldr	r3, [pc, #564]	@ (800974c <UART_SetConfig+0x69c>)
 8009518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	2b05      	cmp	r3, #5
 8009520:	d826      	bhi.n	8009570 <UART_SetConfig+0x4c0>
 8009522:	a201      	add	r2, pc, #4	@ (adr r2, 8009528 <UART_SetConfig+0x478>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	08009541 	.word	0x08009541
 800952c:	08009549 	.word	0x08009549
 8009530:	08009551 	.word	0x08009551
 8009534:	08009559 	.word	0x08009559
 8009538:	08009561 	.word	0x08009561
 800953c:	08009569 	.word	0x08009569
 8009540:	2300      	movs	r3, #0
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009546:	e086      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009548:	2304      	movs	r3, #4
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954e:	e082      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009550:	2308      	movs	r3, #8
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009556:	e07e      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009558:	2310      	movs	r3, #16
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e07a      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009560:	2320      	movs	r3, #32
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e076      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009568:	2340      	movs	r3, #64	@ 0x40
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e072      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009570:	2380      	movs	r3, #128	@ 0x80
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e06e      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a75      	ldr	r2, [pc, #468]	@ (8009754 <UART_SetConfig+0x6a4>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d130      	bne.n	80095e4 <UART_SetConfig+0x534>
 8009582:	4b72      	ldr	r3, [pc, #456]	@ (800974c <UART_SetConfig+0x69c>)
 8009584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009586:	f003 0307 	and.w	r3, r3, #7
 800958a:	2b05      	cmp	r3, #5
 800958c:	d826      	bhi.n	80095dc <UART_SetConfig+0x52c>
 800958e:	a201      	add	r2, pc, #4	@ (adr r2, 8009594 <UART_SetConfig+0x4e4>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095ad 	.word	0x080095ad
 8009598:	080095b5 	.word	0x080095b5
 800959c:	080095bd 	.word	0x080095bd
 80095a0:	080095c5 	.word	0x080095c5
 80095a4:	080095cd 	.word	0x080095cd
 80095a8:	080095d5 	.word	0x080095d5
 80095ac:	2300      	movs	r3, #0
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e050      	b.n	8009656 <UART_SetConfig+0x5a6>
 80095b4:	2304      	movs	r3, #4
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e04c      	b.n	8009656 <UART_SetConfig+0x5a6>
 80095bc:	2308      	movs	r3, #8
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e048      	b.n	8009656 <UART_SetConfig+0x5a6>
 80095c4:	2310      	movs	r3, #16
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e044      	b.n	8009656 <UART_SetConfig+0x5a6>
 80095cc:	2320      	movs	r3, #32
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e040      	b.n	8009656 <UART_SetConfig+0x5a6>
 80095d4:	2340      	movs	r3, #64	@ 0x40
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e03c      	b.n	8009656 <UART_SetConfig+0x5a6>
 80095dc:	2380      	movs	r3, #128	@ 0x80
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e038      	b.n	8009656 <UART_SetConfig+0x5a6>
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a5b      	ldr	r2, [pc, #364]	@ (8009758 <UART_SetConfig+0x6a8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d130      	bne.n	8009650 <UART_SetConfig+0x5a0>
 80095ee:	4b57      	ldr	r3, [pc, #348]	@ (800974c <UART_SetConfig+0x69c>)
 80095f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	2b05      	cmp	r3, #5
 80095f8:	d826      	bhi.n	8009648 <UART_SetConfig+0x598>
 80095fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <UART_SetConfig+0x550>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009619 	.word	0x08009619
 8009604:	08009621 	.word	0x08009621
 8009608:	08009629 	.word	0x08009629
 800960c:	08009631 	.word	0x08009631
 8009610:	08009639 	.word	0x08009639
 8009614:	08009641 	.word	0x08009641
 8009618:	2302      	movs	r3, #2
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961e:	e01a      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009620:	2304      	movs	r3, #4
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e016      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009628:	2308      	movs	r3, #8
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e012      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009630:	2310      	movs	r3, #16
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e00e      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009638:	2320      	movs	r3, #32
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e00a      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009640:	2340      	movs	r3, #64	@ 0x40
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e006      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009648:	2380      	movs	r3, #128	@ 0x80
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e002      	b.n	8009656 <UART_SetConfig+0x5a6>
 8009650:	2380      	movs	r3, #128	@ 0x80
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a3f      	ldr	r2, [pc, #252]	@ (8009758 <UART_SetConfig+0x6a8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	f040 80f8 	bne.w	8009852 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009662:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009666:	2b20      	cmp	r3, #32
 8009668:	dc46      	bgt.n	80096f8 <UART_SetConfig+0x648>
 800966a:	2b02      	cmp	r3, #2
 800966c:	f2c0 8082 	blt.w	8009774 <UART_SetConfig+0x6c4>
 8009670:	3b02      	subs	r3, #2
 8009672:	2b1e      	cmp	r3, #30
 8009674:	d87e      	bhi.n	8009774 <UART_SetConfig+0x6c4>
 8009676:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <UART_SetConfig+0x5cc>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	080096ff 	.word	0x080096ff
 8009680:	08009775 	.word	0x08009775
 8009684:	08009707 	.word	0x08009707
 8009688:	08009775 	.word	0x08009775
 800968c:	08009775 	.word	0x08009775
 8009690:	08009775 	.word	0x08009775
 8009694:	08009717 	.word	0x08009717
 8009698:	08009775 	.word	0x08009775
 800969c:	08009775 	.word	0x08009775
 80096a0:	08009775 	.word	0x08009775
 80096a4:	08009775 	.word	0x08009775
 80096a8:	08009775 	.word	0x08009775
 80096ac:	08009775 	.word	0x08009775
 80096b0:	08009775 	.word	0x08009775
 80096b4:	08009727 	.word	0x08009727
 80096b8:	08009775 	.word	0x08009775
 80096bc:	08009775 	.word	0x08009775
 80096c0:	08009775 	.word	0x08009775
 80096c4:	08009775 	.word	0x08009775
 80096c8:	08009775 	.word	0x08009775
 80096cc:	08009775 	.word	0x08009775
 80096d0:	08009775 	.word	0x08009775
 80096d4:	08009775 	.word	0x08009775
 80096d8:	08009775 	.word	0x08009775
 80096dc:	08009775 	.word	0x08009775
 80096e0:	08009775 	.word	0x08009775
 80096e4:	08009775 	.word	0x08009775
 80096e8:	08009775 	.word	0x08009775
 80096ec:	08009775 	.word	0x08009775
 80096f0:	08009775 	.word	0x08009775
 80096f4:	08009767 	.word	0x08009767
 80096f8:	2b40      	cmp	r3, #64	@ 0x40
 80096fa:	d037      	beq.n	800976c <UART_SetConfig+0x6bc>
 80096fc:	e03a      	b.n	8009774 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096fe:	f7fd fa49 	bl	8006b94 <HAL_RCCEx_GetD3PCLK1Freq>
 8009702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009704:	e03c      	b.n	8009780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800970a:	4618      	mov	r0, r3
 800970c:	f7fd fa58 	bl	8006bc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009714:	e034      	b.n	8009780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009716:	f107 0318 	add.w	r3, r7, #24
 800971a:	4618      	mov	r0, r3
 800971c:	f7fd fba4 	bl	8006e68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009724:	e02c      	b.n	8009780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009726:	4b09      	ldr	r3, [pc, #36]	@ (800974c <UART_SetConfig+0x69c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d016      	beq.n	8009760 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009732:	4b06      	ldr	r3, [pc, #24]	@ (800974c <UART_SetConfig+0x69c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	08db      	lsrs	r3, r3, #3
 8009738:	f003 0303 	and.w	r3, r3, #3
 800973c:	4a07      	ldr	r2, [pc, #28]	@ (800975c <UART_SetConfig+0x6ac>)
 800973e:	fa22 f303 	lsr.w	r3, r2, r3
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009744:	e01c      	b.n	8009780 <UART_SetConfig+0x6d0>
 8009746:	bf00      	nop
 8009748:	40011400 	.word	0x40011400
 800974c:	58024400 	.word	0x58024400
 8009750:	40007800 	.word	0x40007800
 8009754:	40007c00 	.word	0x40007c00
 8009758:	58000c00 	.word	0x58000c00
 800975c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009760:	4b9d      	ldr	r3, [pc, #628]	@ (80099d8 <UART_SetConfig+0x928>)
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009764:	e00c      	b.n	8009780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009766:	4b9d      	ldr	r3, [pc, #628]	@ (80099dc <UART_SetConfig+0x92c>)
 8009768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976a:	e009      	b.n	8009780 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800976c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009772:	e005      	b.n	8009780 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800977e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 81de 	beq.w	8009b44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978c:	4a94      	ldr	r2, [pc, #592]	@ (80099e0 <UART_SetConfig+0x930>)
 800978e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009792:	461a      	mov	r2, r3
 8009794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009796:	fbb3 f3f2 	udiv	r3, r3, r2
 800979a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	4613      	mov	r3, r2
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	4413      	add	r3, r2
 80097a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d305      	bcc.n	80097b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d903      	bls.n	80097c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097be:	e1c1      	b.n	8009b44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c2:	2200      	movs	r2, #0
 80097c4:	60bb      	str	r3, [r7, #8]
 80097c6:	60fa      	str	r2, [r7, #12]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097cc:	4a84      	ldr	r2, [pc, #528]	@ (80099e0 <UART_SetConfig+0x930>)
 80097ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	2200      	movs	r2, #0
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	607a      	str	r2, [r7, #4]
 80097da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097e2:	f7f6 fd7d 	bl	80002e0 <__aeabi_uldivmod>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	f04f 0300 	mov.w	r3, #0
 80097f6:	020b      	lsls	r3, r1, #8
 80097f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097fc:	0202      	lsls	r2, r0, #8
 80097fe:	6979      	ldr	r1, [r7, #20]
 8009800:	6849      	ldr	r1, [r1, #4]
 8009802:	0849      	lsrs	r1, r1, #1
 8009804:	2000      	movs	r0, #0
 8009806:	460c      	mov	r4, r1
 8009808:	4605      	mov	r5, r0
 800980a:	eb12 0804 	adds.w	r8, r2, r4
 800980e:	eb43 0905 	adc.w	r9, r3, r5
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	469a      	mov	sl, r3
 800981a:	4693      	mov	fp, r2
 800981c:	4652      	mov	r2, sl
 800981e:	465b      	mov	r3, fp
 8009820:	4640      	mov	r0, r8
 8009822:	4649      	mov	r1, r9
 8009824:	f7f6 fd5c 	bl	80002e0 <__aeabi_uldivmod>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4613      	mov	r3, r2
 800982e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009836:	d308      	bcc.n	800984a <UART_SetConfig+0x79a>
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800983e:	d204      	bcs.n	800984a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009846:	60da      	str	r2, [r3, #12]
 8009848:	e17c      	b.n	8009b44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009850:	e178      	b.n	8009b44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800985a:	f040 80c5 	bne.w	80099e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800985e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009862:	2b20      	cmp	r3, #32
 8009864:	dc48      	bgt.n	80098f8 <UART_SetConfig+0x848>
 8009866:	2b00      	cmp	r3, #0
 8009868:	db7b      	blt.n	8009962 <UART_SetConfig+0x8b2>
 800986a:	2b20      	cmp	r3, #32
 800986c:	d879      	bhi.n	8009962 <UART_SetConfig+0x8b2>
 800986e:	a201      	add	r2, pc, #4	@ (adr r2, 8009874 <UART_SetConfig+0x7c4>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	080098ff 	.word	0x080098ff
 8009878:	08009907 	.word	0x08009907
 800987c:	08009963 	.word	0x08009963
 8009880:	08009963 	.word	0x08009963
 8009884:	0800990f 	.word	0x0800990f
 8009888:	08009963 	.word	0x08009963
 800988c:	08009963 	.word	0x08009963
 8009890:	08009963 	.word	0x08009963
 8009894:	0800991f 	.word	0x0800991f
 8009898:	08009963 	.word	0x08009963
 800989c:	08009963 	.word	0x08009963
 80098a0:	08009963 	.word	0x08009963
 80098a4:	08009963 	.word	0x08009963
 80098a8:	08009963 	.word	0x08009963
 80098ac:	08009963 	.word	0x08009963
 80098b0:	08009963 	.word	0x08009963
 80098b4:	0800992f 	.word	0x0800992f
 80098b8:	08009963 	.word	0x08009963
 80098bc:	08009963 	.word	0x08009963
 80098c0:	08009963 	.word	0x08009963
 80098c4:	08009963 	.word	0x08009963
 80098c8:	08009963 	.word	0x08009963
 80098cc:	08009963 	.word	0x08009963
 80098d0:	08009963 	.word	0x08009963
 80098d4:	08009963 	.word	0x08009963
 80098d8:	08009963 	.word	0x08009963
 80098dc:	08009963 	.word	0x08009963
 80098e0:	08009963 	.word	0x08009963
 80098e4:	08009963 	.word	0x08009963
 80098e8:	08009963 	.word	0x08009963
 80098ec:	08009963 	.word	0x08009963
 80098f0:	08009963 	.word	0x08009963
 80098f4:	08009955 	.word	0x08009955
 80098f8:	2b40      	cmp	r3, #64	@ 0x40
 80098fa:	d02e      	beq.n	800995a <UART_SetConfig+0x8aa>
 80098fc:	e031      	b.n	8009962 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098fe:	f7fb fed1 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8009902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009904:	e033      	b.n	800996e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009906:	f7fb fee3 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 800990a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800990c:	e02f      	b.n	800996e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd f954 	bl	8006bc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991c:	e027      	b.n	800996e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991e:	f107 0318 	add.w	r3, r7, #24
 8009922:	4618      	mov	r0, r3
 8009924:	f7fd faa0 	bl	8006e68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e01f      	b.n	800996e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800992e:	4b2d      	ldr	r3, [pc, #180]	@ (80099e4 <UART_SetConfig+0x934>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800993a:	4b2a      	ldr	r3, [pc, #168]	@ (80099e4 <UART_SetConfig+0x934>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	08db      	lsrs	r3, r3, #3
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	4a24      	ldr	r2, [pc, #144]	@ (80099d8 <UART_SetConfig+0x928>)
 8009946:	fa22 f303 	lsr.w	r3, r2, r3
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800994c:	e00f      	b.n	800996e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800994e:	4b22      	ldr	r3, [pc, #136]	@ (80099d8 <UART_SetConfig+0x928>)
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009952:	e00c      	b.n	800996e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009954:	4b21      	ldr	r3, [pc, #132]	@ (80099dc <UART_SetConfig+0x92c>)
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009958:	e009      	b.n	800996e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800995a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009960:	e005      	b.n	800996e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800996c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800996e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80e7 	beq.w	8009b44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997a:	4a19      	ldr	r2, [pc, #100]	@ (80099e0 <UART_SetConfig+0x930>)
 800997c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009980:	461a      	mov	r2, r3
 8009982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009984:	fbb3 f3f2 	udiv	r3, r3, r2
 8009988:	005a      	lsls	r2, r3, #1
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	441a      	add	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	fbb2 f3f3 	udiv	r3, r2, r3
 800999a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	2b0f      	cmp	r3, #15
 80099a0:	d916      	bls.n	80099d0 <UART_SetConfig+0x920>
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a8:	d212      	bcs.n	80099d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	f023 030f 	bic.w	r3, r3, #15
 80099b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	b29a      	uxth	r2, r3
 80099c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099c2:	4313      	orrs	r3, r2
 80099c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099cc:	60da      	str	r2, [r3, #12]
 80099ce:	e0b9      	b.n	8009b44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099d6:	e0b5      	b.n	8009b44 <UART_SetConfig+0xa94>
 80099d8:	03d09000 	.word	0x03d09000
 80099dc:	003d0900 	.word	0x003d0900
 80099e0:	0800c224 	.word	0x0800c224
 80099e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80099e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	dc49      	bgt.n	8009a84 <UART_SetConfig+0x9d4>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	db7c      	blt.n	8009aee <UART_SetConfig+0xa3e>
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d87a      	bhi.n	8009aee <UART_SetConfig+0xa3e>
 80099f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <UART_SetConfig+0x950>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a8b 	.word	0x08009a8b
 8009a04:	08009a93 	.word	0x08009a93
 8009a08:	08009aef 	.word	0x08009aef
 8009a0c:	08009aef 	.word	0x08009aef
 8009a10:	08009a9b 	.word	0x08009a9b
 8009a14:	08009aef 	.word	0x08009aef
 8009a18:	08009aef 	.word	0x08009aef
 8009a1c:	08009aef 	.word	0x08009aef
 8009a20:	08009aab 	.word	0x08009aab
 8009a24:	08009aef 	.word	0x08009aef
 8009a28:	08009aef 	.word	0x08009aef
 8009a2c:	08009aef 	.word	0x08009aef
 8009a30:	08009aef 	.word	0x08009aef
 8009a34:	08009aef 	.word	0x08009aef
 8009a38:	08009aef 	.word	0x08009aef
 8009a3c:	08009aef 	.word	0x08009aef
 8009a40:	08009abb 	.word	0x08009abb
 8009a44:	08009aef 	.word	0x08009aef
 8009a48:	08009aef 	.word	0x08009aef
 8009a4c:	08009aef 	.word	0x08009aef
 8009a50:	08009aef 	.word	0x08009aef
 8009a54:	08009aef 	.word	0x08009aef
 8009a58:	08009aef 	.word	0x08009aef
 8009a5c:	08009aef 	.word	0x08009aef
 8009a60:	08009aef 	.word	0x08009aef
 8009a64:	08009aef 	.word	0x08009aef
 8009a68:	08009aef 	.word	0x08009aef
 8009a6c:	08009aef 	.word	0x08009aef
 8009a70:	08009aef 	.word	0x08009aef
 8009a74:	08009aef 	.word	0x08009aef
 8009a78:	08009aef 	.word	0x08009aef
 8009a7c:	08009aef 	.word	0x08009aef
 8009a80:	08009ae1 	.word	0x08009ae1
 8009a84:	2b40      	cmp	r3, #64	@ 0x40
 8009a86:	d02e      	beq.n	8009ae6 <UART_SetConfig+0xa36>
 8009a88:	e031      	b.n	8009aee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a8a:	f7fb fe0b 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8009a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a90:	e033      	b.n	8009afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a92:	f7fb fe1d 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8009a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a98:	e02f      	b.n	8009afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fd f88e 	bl	8006bc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa8:	e027      	b.n	8009afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aaa:	f107 0318 	add.w	r3, r7, #24
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fd f9da 	bl	8006e68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab8:	e01f      	b.n	8009afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aba:	4b2d      	ldr	r3, [pc, #180]	@ (8009b70 <UART_SetConfig+0xac0>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d009      	beq.n	8009ada <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8009b70 <UART_SetConfig+0xac0>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	08db      	lsrs	r3, r3, #3
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	4a28      	ldr	r2, [pc, #160]	@ (8009b74 <UART_SetConfig+0xac4>)
 8009ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ad8:	e00f      	b.n	8009afa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009ada:	4b26      	ldr	r3, [pc, #152]	@ (8009b74 <UART_SetConfig+0xac4>)
 8009adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ade:	e00c      	b.n	8009afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ae0:	4b25      	ldr	r3, [pc, #148]	@ (8009b78 <UART_SetConfig+0xac8>)
 8009ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae4:	e009      	b.n	8009afa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aec:	e005      	b.n	8009afa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009af8:	bf00      	nop
    }

    if (pclk != 0U)
 8009afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d021      	beq.n	8009b44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b04:	4a1d      	ldr	r2, [pc, #116]	@ (8009b7c <UART_SetConfig+0xacc>)
 8009b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	085b      	lsrs	r3, r3, #1
 8009b18:	441a      	add	r2, r3
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	2b0f      	cmp	r3, #15
 8009b28:	d909      	bls.n	8009b3e <UART_SetConfig+0xa8e>
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b30:	d205      	bcs.n	8009b3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	60da      	str	r2, [r3, #12]
 8009b3c:	e002      	b.n	8009b44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2200      	movs	r2, #0
 8009b58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3748      	adds	r7, #72	@ 0x48
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b6e:	bf00      	nop
 8009b70:	58024400 	.word	0x58024400
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	0800c224 	.word	0x0800c224

08009b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8c:	f003 0308 	and.w	r3, r3, #8
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c36:	f003 0320 	and.w	r3, r3, #32
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01a      	beq.n	8009c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7e:	d10a      	bne.n	8009c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	605a      	str	r2, [r3, #4]
  }
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b098      	sub	sp, #96	@ 0x60
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cd4:	f7f7 fb70 	bl	80013b8 <HAL_GetTick>
 8009cd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d12f      	bne.n	8009d48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ce8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f88e 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d022      	beq.n	8009d48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e6      	bne.n	8009d02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e063      	b.n	8009e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d149      	bne.n	8009dea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f857 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d03c      	beq.n	8009dea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e6      	bne.n	8009d70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3308      	adds	r3, #8
 8009da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dc2:	61fa      	str	r2, [r7, #28]
 8009dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	69b9      	ldr	r1, [r7, #24]
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	617b      	str	r3, [r7, #20]
   return(result);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e5      	bne.n	8009da2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e012      	b.n	8009e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3758      	adds	r7, #88	@ 0x58
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	4613      	mov	r3, r2
 8009e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e28:	e04f      	b.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e30:	d04b      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e32:	f7f7 fac1 	bl	80013b8 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d302      	bcc.n	8009e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e04e      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0304 	and.w	r3, r3, #4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d037      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b80      	cmp	r3, #128	@ 0x80
 8009e5e:	d034      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b40      	cmp	r3, #64	@ 0x40
 8009e64:	d031      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d110      	bne.n	8009e96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2208      	movs	r2, #8
 8009e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f921 	bl	800a0c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2208      	movs	r2, #8
 8009e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e029      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea4:	d111      	bne.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 f907 	bl	800a0c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e00f      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	69da      	ldr	r2, [r3, #28]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	bf0c      	ite	eq
 8009eda:	2301      	moveq	r3, #1
 8009edc:	2300      	movne	r3, #0
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d0a0      	beq.n	8009e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b096      	sub	sp, #88	@ 0x58
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	88fa      	ldrh	r2, [r7, #6]
 8009f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2222      	movs	r2, #34	@ 0x22
 8009f1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d02d      	beq.n	8009f86 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f30:	4a40      	ldr	r2, [pc, #256]	@ (800a034 <UART_Start_Receive_DMA+0x140>)
 8009f32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f3a:	4a3f      	ldr	r2, [pc, #252]	@ (800a038 <UART_Start_Receive_DMA+0x144>)
 8009f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f44:	4a3d      	ldr	r2, [pc, #244]	@ (800a03c <UART_Start_Receive_DMA+0x148>)
 8009f46:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f4e:	2200      	movs	r2, #0
 8009f50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3324      	adds	r3, #36	@ 0x24
 8009f5e:	4619      	mov	r1, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f64:	461a      	mov	r2, r3
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	f7f7 fef2 	bl	8001d50 <HAL_DMA_Start_IT>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d009      	beq.n	8009f86 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2210      	movs	r2, #16
 8009f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e051      	b.n	800a02a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d018      	beq.n	8009fc0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e6      	bne.n	8009f8e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009fe0:	637a      	str	r2, [r7, #52]	@ 0x34
 8009fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e5      	bne.n	8009fc0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	613b      	str	r3, [r7, #16]
   return(result);
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a00a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3308      	adds	r3, #8
 800a012:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a014:	623a      	str	r2, [r7, #32]
 800a016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a018:	69f9      	ldr	r1, [r7, #28]
 800a01a:	6a3a      	ldr	r2, [r7, #32]
 800a01c:	e841 2300 	strex	r3, r2, [r1]
 800a020:	61bb      	str	r3, [r7, #24]
   return(result);
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e5      	bne.n	8009ff4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3758      	adds	r7, #88	@ 0x58
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	0800a191 	.word	0x0800a191
 800a038:	0800a2b9 	.word	0x0800a2b9
 800a03c:	0800a2f7 	.word	0x0800a2f7

0800a040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b08f      	sub	sp, #60	@ 0x3c
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	61fb      	str	r3, [r7, #28]
   return(result);
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a068:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a06c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e6      	bne.n	800a048 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3308      	adds	r3, #8
 800a080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	60bb      	str	r3, [r7, #8]
   return(result);
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a090:	633b      	str	r3, [r7, #48]	@ 0x30
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3308      	adds	r3, #8
 800a098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a09a:	61ba      	str	r2, [r7, #24]
 800a09c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6979      	ldr	r1, [r7, #20]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e5      	bne.n	800a07a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a0b6:	bf00      	nop
 800a0b8:	373c      	adds	r7, #60	@ 0x3c
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b095      	sub	sp, #84	@ 0x54
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e6      	bne.n	800a0cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3308      	adds	r3, #8
 800a104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a10e:	69fa      	ldr	r2, [r7, #28]
 800a110:	4b1e      	ldr	r3, [pc, #120]	@ (800a18c <UART_EndRxTransfer+0xc8>)
 800a112:	4013      	ands	r3, r2
 800a114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3308      	adds	r3, #8
 800a11c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a11e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e5      	bne.n	800a0fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a136:	2b01      	cmp	r3, #1
 800a138:	d118      	bne.n	800a16c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	e853 3f00 	ldrex	r3, [r3]
 800a146:	60bb      	str	r3, [r7, #8]
   return(result);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f023 0310 	bic.w	r3, r3, #16
 800a14e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	461a      	mov	r2, r3
 800a156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a158:	61bb      	str	r3, [r7, #24]
 800a15a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15c:	6979      	ldr	r1, [r7, #20]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	e841 2300 	strex	r3, r2, [r1]
 800a164:	613b      	str	r3, [r7, #16]
   return(result);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e6      	bne.n	800a13a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2220      	movs	r2, #32
 800a170:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a180:	bf00      	nop
 800a182:	3754      	adds	r7, #84	@ 0x54
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	effffffe 	.word	0xeffffffe

0800a190 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b09c      	sub	sp, #112	@ 0x70
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1a6:	d071      	beq.n	800a28c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a1a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a1be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a1d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e6      	bne.n	800a1b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f4:	f023 0301 	bic.w	r3, r3, #1
 800a1f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a202:	647a      	str	r2, [r7, #68]	@ 0x44
 800a204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a20a:	e841 2300 	strex	r3, r2, [r1]
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1e5      	bne.n	800a1e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3308      	adds	r3, #8
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	623b      	str	r3, [r7, #32]
   return(result);
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a22c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a22e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a236:	633a      	str	r2, [r7, #48]	@ 0x30
 800a238:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a23c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e5      	bne.n	800a216 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a24a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a24c:	2220      	movs	r2, #32
 800a24e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a256:	2b01      	cmp	r3, #1
 800a258:	d118      	bne.n	800a28c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a25a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	e853 3f00 	ldrex	r3, [r3]
 800a266:	60fb      	str	r3, [r7, #12]
   return(result);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0310 	bic.w	r3, r3, #16
 800a26e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a278:	61fb      	str	r3, [r7, #28]
 800a27a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	69b9      	ldr	r1, [r7, #24]
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	617b      	str	r3, [r7, #20]
   return(result);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e6      	bne.n	800a25a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a28c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a28e:	2200      	movs	r2, #0
 800a290:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a296:	2b01      	cmp	r3, #1
 800a298:	d107      	bne.n	800a2aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a29a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a29c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a2a4:	f7fe fef8 	bl	8009098 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2a8:	e002      	b.n	800a2b0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a2aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a2ac:	f7f6 feb8 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 800a2b0:	bf00      	nop
 800a2b2:	3770      	adds	r7, #112	@ 0x70
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d109      	bne.n	800a2e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2da:	085b      	lsrs	r3, r3, #1
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	4619      	mov	r1, r3
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7fe fed9 	bl	8009098 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2e6:	e002      	b.n	800a2ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7f6 fe7b 	bl	8000fe4 <HAL_UART_RxHalfCpltCallback>
}
 800a2ee:	bf00      	nop
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b086      	sub	sp, #24
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a30a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a312:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a31e:	2b80      	cmp	r3, #128	@ 0x80
 800a320:	d109      	bne.n	800a336 <UART_DMAError+0x40>
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b21      	cmp	r3, #33	@ 0x21
 800a326:	d106      	bne.n	800a336 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a330:	6978      	ldr	r0, [r7, #20]
 800a332:	f7ff fe85 	bl	800a040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a340:	2b40      	cmp	r3, #64	@ 0x40
 800a342:	d109      	bne.n	800a358 <UART_DMAError+0x62>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b22      	cmp	r3, #34	@ 0x22
 800a348:	d106      	bne.n	800a358 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a352:	6978      	ldr	r0, [r7, #20]
 800a354:	f7ff feb6 	bl	800a0c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a35e:	f043 0210 	orr.w	r2, r3, #16
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a368:	6978      	ldr	r0, [r7, #20]
 800a36a:	f7fe fe8b 	bl	8009084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a36e:	bf00      	nop
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7fe fe79 	bl	8009084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a392:	bf00      	nop
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b088      	sub	sp, #32
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	e853 3f00 	ldrex	r3, [r3]
 800a3ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3b6:	61fb      	str	r3, [r7, #28]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c4:	6979      	ldr	r1, [r7, #20]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	e841 2300 	strex	r3, r2, [r1]
 800a3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e6      	bne.n	800a3a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7fe fe44 	bl	8009070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3e8:	bf00      	nop
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <HAL_UARTEx_DisableFifoMode+0x16>
 800a43e:	2302      	movs	r3, #2
 800a440:	e027      	b.n	800a492 <HAL_UARTEx_DisableFifoMode+0x66>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2224      	movs	r2, #36	@ 0x24
 800a44e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0201 	bic.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a470:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2220      	movs	r2, #32
 800a484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e02d      	b.n	800a512 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2224      	movs	r2, #36	@ 0x24
 800a4c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0201 	bic.w	r2, r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f850 	bl	800a598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2220      	movs	r2, #32
 800a504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d101      	bne.n	800a532 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a52e:	2302      	movs	r3, #2
 800a530:	e02d      	b.n	800a58e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2224      	movs	r2, #36	@ 0x24
 800a53e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0201 	bic.w	r2, r2, #1
 800a558:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f812 	bl	800a598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2220      	movs	r2, #32
 800a580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d108      	bne.n	800a5ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5b8:	e031      	b.n	800a61e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5ba:	2310      	movs	r3, #16
 800a5bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5be:	2310      	movs	r3, #16
 800a5c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	0e5b      	lsrs	r3, r3, #25
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	0f5b      	lsrs	r3, r3, #29
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	f003 0307 	and.w	r3, r3, #7
 800a5e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	7b3a      	ldrb	r2, [r7, #12]
 800a5e6:	4911      	ldr	r1, [pc, #68]	@ (800a62c <UARTEx_SetNbDataToProcess+0x94>)
 800a5e8:	5c8a      	ldrb	r2, [r1, r2]
 800a5ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5ee:	7b3a      	ldrb	r2, [r7, #12]
 800a5f0:	490f      	ldr	r1, [pc, #60]	@ (800a630 <UARTEx_SetNbDataToProcess+0x98>)
 800a5f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	7b7a      	ldrb	r2, [r7, #13]
 800a604:	4909      	ldr	r1, [pc, #36]	@ (800a62c <UARTEx_SetNbDataToProcess+0x94>)
 800a606:	5c8a      	ldrb	r2, [r1, r2]
 800a608:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a60c:	7b7a      	ldrb	r2, [r7, #13]
 800a60e:	4908      	ldr	r1, [pc, #32]	@ (800a630 <UARTEx_SetNbDataToProcess+0x98>)
 800a610:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a612:	fb93 f3f2 	sdiv	r3, r3, r2
 800a616:	b29a      	uxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a61e:	bf00      	nop
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	0800c23c 	.word	0x0800c23c
 800a630:	0800c244 	.word	0x0800c244

0800a634 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a646:	2b84      	cmp	r3, #132	@ 0x84
 800a648:	d005      	beq.n	800a656 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a64a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	4413      	add	r3, r2
 800a652:	3303      	adds	r3, #3
 800a654:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a656:	68fb      	ldr	r3, [r7, #12]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a66a:	f3ef 8305 	mrs	r3, IPSR
 800a66e:	607b      	str	r3, [r7, #4]
  return(result);
 800a670:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a672:	2b00      	cmp	r3, #0
 800a674:	bf14      	ite	ne
 800a676:	2301      	movne	r3, #1
 800a678:	2300      	moveq	r3, #0
 800a67a:	b2db      	uxtb	r3, r3
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a68c:	f000 fb46 	bl	800ad1c <vTaskStartScheduler>
  
  return osOK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	bd80      	pop	{r7, pc}

0800a696 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a696:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a698:	b089      	sub	sp, #36	@ 0x24
 800a69a:	af04      	add	r7, sp, #16
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	695b      	ldr	r3, [r3, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d020      	beq.n	800a6ea <osThreadCreate+0x54>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01c      	beq.n	800a6ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685c      	ldr	r4, [r3, #4]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691e      	ldr	r6, [r3, #16]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff ffb6 	bl	800a634 <makeFreeRtosPriority>
 800a6c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6d2:	9202      	str	r2, [sp, #8]
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	9100      	str	r1, [sp, #0]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	4632      	mov	r2, r6
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 f92e 	bl	800a940 <xTaskCreateStatic>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	e01c      	b.n	800a724 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685c      	ldr	r4, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff ff98 	bl	800a634 <makeFreeRtosPriority>
 800a704:	4602      	mov	r2, r0
 800a706:	f107 030c 	add.w	r3, r7, #12
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	9200      	str	r2, [sp, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	4632      	mov	r2, r6
 800a712:	4629      	mov	r1, r5
 800a714:	4620      	mov	r0, r4
 800a716:	f000 f973 	bl	800aa00 <xTaskCreate>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d001      	beq.n	800a724 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	e000      	b.n	800a726 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a724:	68fb      	ldr	r3, [r7, #12]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a72e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <osDelay+0x16>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	e000      	b.n	800a746 <osDelay+0x18>
 800a744:	2301      	movs	r3, #1
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fab2 	bl	800acb0 <vTaskDelay>
  
  return osOK;
 800a74c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
	...

0800a758 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af02      	add	r7, sp, #8
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a762:	2300      	movs	r3, #0
 800a764:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a76a:	f7ff ff7b 	bl	800a664 <inHandlerMode>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01c      	beq.n	800a7ae <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	f107 0208 	add.w	r2, r7, #8
 800a77a:	f107 030c 	add.w	r3, r7, #12
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	4613      	mov	r3, r2
 800a782:	2201      	movs	r2, #1
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fe9b 	bl	800b4c0 <xTaskGenericNotifyFromISR>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d002      	beq.n	800a796 <osSignalSet+0x3e>
      return 0x80000000;
 800a790:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a794:	e019      	b.n	800a7ca <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d015      	beq.n	800a7c8 <osSignalSet+0x70>
 800a79c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d4 <osSignalSet+0x7c>)
 800a79e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	e00c      	b.n	800a7c8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fdc0 	bl	800b33c <xTaskGenericNotify>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d002      	beq.n	800a7c8 <osSignalSet+0x70>
    return 0x80000000;
 800a7c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7c6:	e000      	b.n	800a7ca <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	e000ed04 	.word	0xe000ed04

0800a7d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f103 0208 	add.w	r2, r3, #8
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f103 0208 	add.w	r2, r3, #8
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f103 0208 	add.w	r2, r3, #8
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a832:	b480      	push	{r7}
 800a834:	b085      	sub	sp, #20
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	601a      	str	r2, [r3, #0]
}
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a890:	d103      	bne.n	800a89a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e00c      	b.n	800a8b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3308      	adds	r3, #8
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	e002      	b.n	800a8a8 <vListInsert+0x2e>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d2f6      	bcs.n	800a8a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	601a      	str	r2, [r3, #0]
}
 800a8e0:	bf00      	nop
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	6892      	ldr	r2, [r2, #8]
 800a902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6852      	ldr	r2, [r2, #4]
 800a90c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	429a      	cmp	r2, r3
 800a916:	d103      	bne.n	800a920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	1e5a      	subs	r2, r3, #1
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08e      	sub	sp, #56	@ 0x38
 800a944:	af04      	add	r7, sp, #16
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10b      	bne.n	800a96c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a966:	bf00      	nop
 800a968:	bf00      	nop
 800a96a:	e7fd      	b.n	800a968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10b      	bne.n	800a98a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	61fb      	str	r3, [r7, #28]
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	e7fd      	b.n	800a986 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a98a:	23a0      	movs	r3, #160	@ 0xa0
 800a98c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2ba0      	cmp	r3, #160	@ 0xa0
 800a992:	d00b      	beq.n	800a9ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	61bb      	str	r3, [r7, #24]
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	e7fd      	b.n	800a9a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d01e      	beq.n	800a9f2 <xTaskCreateStatic+0xb2>
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d01b      	beq.n	800a9f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	9302      	str	r3, [sp, #8]
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 f851 	bl	800aa8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9ec:	f000 f8f6 	bl	800abdc <prvAddNewTaskToReadyList>
 800a9f0:	e001      	b.n	800a9f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9f6:	697b      	ldr	r3, [r7, #20]
	}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3728      	adds	r7, #40	@ 0x28
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08c      	sub	sp, #48	@ 0x30
 800aa04:	af04      	add	r7, sp, #16
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f001 f8f1 	bl	800bbfc <pvPortMalloc>
 800aa1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa22:	20a0      	movs	r0, #160	@ 0xa0
 800aa24:	f001 f8ea 	bl	800bbfc <pvPortMalloc>
 800aa28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa36:	e005      	b.n	800aa44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa38:	6978      	ldr	r0, [r7, #20]
 800aa3a:	f001 f9ad 	bl	800bd98 <vPortFree>
 800aa3e:	e001      	b.n	800aa44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa40:	2300      	movs	r3, #0
 800aa42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d017      	beq.n	800aa7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa52:	88fa      	ldrh	r2, [r7, #6]
 800aa54:	2300      	movs	r3, #0
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f80f 	bl	800aa8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa6e:	69f8      	ldr	r0, [r7, #28]
 800aa70:	f000 f8b4 	bl	800abdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa74:	2301      	movs	r3, #1
 800aa76:	61bb      	str	r3, [r7, #24]
 800aa78:	e002      	b.n	800aa80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa80:	69bb      	ldr	r3, [r7, #24]
	}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3720      	adds	r7, #32
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	21a5      	movs	r1, #165	@ 0xa5
 800aaa6:	f001 fa97 	bl	800bfd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aab4:	440b      	add	r3, r1
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	f023 0307 	bic.w	r3, r3, #7
 800aac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	617b      	str	r3, [r7, #20]
}
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	e7fd      	b.n	800aae2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d01f      	beq.n	800ab2c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaec:	2300      	movs	r3, #0
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	e012      	b.n	800ab18 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	7819      	ldrb	r1, [r3, #0]
 800aafa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	4413      	add	r3, r2
 800ab00:	3334      	adds	r3, #52	@ 0x34
 800ab02:	460a      	mov	r2, r1
 800ab04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d006      	beq.n	800ab20 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	3301      	adds	r3, #1
 800ab16:	61fb      	str	r3, [r7, #28]
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2b0f      	cmp	r3, #15
 800ab1c:	d9e9      	bls.n	800aaf2 <prvInitialiseNewTask+0x66>
 800ab1e:	e000      	b.n	800ab22 <prvInitialiseNewTask+0x96>
			{
				break;
 800ab20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab2a:	e003      	b.n	800ab34 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab36:	2b06      	cmp	r3, #6
 800ab38:	d901      	bls.n	800ab3e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab3a:	2306      	movs	r3, #6
 800ab3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	3304      	adds	r3, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fe5f 	bl	800a818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	3318      	adds	r3, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fe5a 	bl	800a818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	f1c3 0207 	rsb	r2, r3, #7
 800ab70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	334c      	adds	r3, #76	@ 0x4c
 800ab8e:	224c      	movs	r2, #76	@ 0x4c
 800ab90:	2100      	movs	r1, #0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f001 fa20 	bl	800bfd8 <memset>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	4a0d      	ldr	r2, [pc, #52]	@ (800abd0 <prvInitialiseNewTask+0x144>)
 800ab9c:	651a      	str	r2, [r3, #80]	@ 0x50
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	4a0c      	ldr	r2, [pc, #48]	@ (800abd4 <prvInitialiseNewTask+0x148>)
 800aba2:	655a      	str	r2, [r3, #84]	@ 0x54
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	4a0c      	ldr	r2, [pc, #48]	@ (800abd8 <prvInitialiseNewTask+0x14c>)
 800aba8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	68f9      	ldr	r1, [r7, #12]
 800abae:	69b8      	ldr	r0, [r7, #24]
 800abb0:	f000 fdd2 	bl	800b758 <pxPortInitialiseStack>
 800abb4:	4602      	mov	r2, r0
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abc6:	bf00      	nop
 800abc8:	3720      	adds	r7, #32
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	24004634 	.word	0x24004634
 800abd4:	2400469c 	.word	0x2400469c
 800abd8:	24004704 	.word	0x24004704

0800abdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abe4:	f000 fee8 	bl	800b9b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abe8:	4b2a      	ldr	r3, [pc, #168]	@ (800ac94 <prvAddNewTaskToReadyList+0xb8>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	4a29      	ldr	r2, [pc, #164]	@ (800ac94 <prvAddNewTaskToReadyList+0xb8>)
 800abf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abf2:	4b29      	ldr	r3, [pc, #164]	@ (800ac98 <prvAddNewTaskToReadyList+0xbc>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abfa:	4a27      	ldr	r2, [pc, #156]	@ (800ac98 <prvAddNewTaskToReadyList+0xbc>)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac00:	4b24      	ldr	r3, [pc, #144]	@ (800ac94 <prvAddNewTaskToReadyList+0xb8>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d110      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac08:	f000 fad4 	bl	800b1b4 <prvInitialiseTaskLists>
 800ac0c:	e00d      	b.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac0e:	4b23      	ldr	r3, [pc, #140]	@ (800ac9c <prvAddNewTaskToReadyList+0xc0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac16:	4b20      	ldr	r3, [pc, #128]	@ (800ac98 <prvAddNewTaskToReadyList+0xbc>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d802      	bhi.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac24:	4a1c      	ldr	r2, [pc, #112]	@ (800ac98 <prvAddNewTaskToReadyList+0xbc>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	4a1b      	ldr	r2, [pc, #108]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800ac32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac38:	2201      	movs	r2, #1
 800ac3a:	409a      	lsls	r2, r3
 800ac3c:	4b19      	ldr	r3, [pc, #100]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	4a18      	ldr	r2, [pc, #96]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac44:	6013      	str	r3, [r2, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4a15      	ldr	r2, [pc, #84]	@ (800aca8 <prvAddNewTaskToReadyList+0xcc>)
 800ac54:	441a      	add	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7ff fde8 	bl	800a832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac62:	f000 fedb 	bl	800ba1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac66:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <prvAddNewTaskToReadyList+0xc0>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00e      	beq.n	800ac8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac98 <prvAddNewTaskToReadyList+0xbc>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d207      	bcs.n	800ac8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac7c:	4b0b      	ldr	r3, [pc, #44]	@ (800acac <prvAddNewTaskToReadyList+0xd0>)
 800ac7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	240009e0 	.word	0x240009e0
 800ac98:	240008e0 	.word	0x240008e0
 800ac9c:	240009ec 	.word	0x240009ec
 800aca0:	240009fc 	.word	0x240009fc
 800aca4:	240009e8 	.word	0x240009e8
 800aca8:	240008e4 	.word	0x240008e4
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d018      	beq.n	800acf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800acc2:	4b14      	ldr	r3, [pc, #80]	@ (800ad14 <vTaskDelay+0x64>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00b      	beq.n	800ace2 <vTaskDelay+0x32>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	60bb      	str	r3, [r7, #8]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ace2:	f000 f885 	bl	800adf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ace6:	2100      	movs	r1, #0
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fccf 	bl	800b68c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acee:	f000 f88d 	bl	800ae0c <xTaskResumeAll>
 800acf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d107      	bne.n	800ad0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800acfa:	4b07      	ldr	r3, [pc, #28]	@ (800ad18 <vTaskDelay+0x68>)
 800acfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	24000a08 	.word	0x24000a08
 800ad18:	e000ed04 	.word	0xe000ed04

0800ad1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08a      	sub	sp, #40	@ 0x28
 800ad20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad2a:	463a      	mov	r2, r7
 800ad2c:	1d39      	adds	r1, r7, #4
 800ad2e:	f107 0308 	add.w	r3, r7, #8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7f5 fc8a 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	9202      	str	r2, [sp, #8]
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	2300      	movs	r3, #0
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	2300      	movs	r3, #0
 800ad48:	460a      	mov	r2, r1
 800ad4a:	4921      	ldr	r1, [pc, #132]	@ (800add0 <vTaskStartScheduler+0xb4>)
 800ad4c:	4821      	ldr	r0, [pc, #132]	@ (800add4 <vTaskStartScheduler+0xb8>)
 800ad4e:	f7ff fdf7 	bl	800a940 <xTaskCreateStatic>
 800ad52:	4603      	mov	r3, r0
 800ad54:	4a20      	ldr	r2, [pc, #128]	@ (800add8 <vTaskStartScheduler+0xbc>)
 800ad56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad58:	4b1f      	ldr	r3, [pc, #124]	@ (800add8 <vTaskStartScheduler+0xbc>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad60:	2301      	movs	r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	e001      	b.n	800ad6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d11b      	bne.n	800ada8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	613b      	str	r3, [r7, #16]
}
 800ad82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad84:	4b15      	ldr	r3, [pc, #84]	@ (800addc <vTaskStartScheduler+0xc0>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	334c      	adds	r3, #76	@ 0x4c
 800ad8a:	4a15      	ldr	r2, [pc, #84]	@ (800ade0 <vTaskStartScheduler+0xc4>)
 800ad8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad8e:	4b15      	ldr	r3, [pc, #84]	@ (800ade4 <vTaskStartScheduler+0xc8>)
 800ad90:	f04f 32ff 	mov.w	r2, #4294967295
 800ad94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad96:	4b14      	ldr	r3, [pc, #80]	@ (800ade8 <vTaskStartScheduler+0xcc>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad9c:	4b13      	ldr	r3, [pc, #76]	@ (800adec <vTaskStartScheduler+0xd0>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ada2:	f000 fd65 	bl	800b870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ada6:	e00f      	b.n	800adc8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adae:	d10b      	bne.n	800adc8 <vTaskStartScheduler+0xac>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	60fb      	str	r3, [r7, #12]
}
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	e7fd      	b.n	800adc4 <vTaskStartScheduler+0xa8>
}
 800adc8:	bf00      	nop
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	0800c204 	.word	0x0800c204
 800add4:	0800b185 	.word	0x0800b185
 800add8:	24000a04 	.word	0x24000a04
 800addc:	240008e0 	.word	0x240008e0
 800ade0:	24000014 	.word	0x24000014
 800ade4:	24000a00 	.word	0x24000a00
 800ade8:	240009ec 	.word	0x240009ec
 800adec:	240009e4 	.word	0x240009e4

0800adf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800adf0:	b480      	push	{r7}
 800adf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800adf4:	4b04      	ldr	r3, [pc, #16]	@ (800ae08 <vTaskSuspendAll+0x18>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3301      	adds	r3, #1
 800adfa:	4a03      	ldr	r2, [pc, #12]	@ (800ae08 <vTaskSuspendAll+0x18>)
 800adfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adfe:	bf00      	nop
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	24000a08 	.word	0x24000a08

0800ae0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae16:	2300      	movs	r3, #0
 800ae18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae1a:	4b42      	ldr	r3, [pc, #264]	@ (800af24 <xTaskResumeAll+0x118>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10b      	bne.n	800ae3a <xTaskResumeAll+0x2e>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	603b      	str	r3, [r7, #0]
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop
 800ae38:	e7fd      	b.n	800ae36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae3a:	f000 fdbd 	bl	800b9b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae3e:	4b39      	ldr	r3, [pc, #228]	@ (800af24 <xTaskResumeAll+0x118>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	4a37      	ldr	r2, [pc, #220]	@ (800af24 <xTaskResumeAll+0x118>)
 800ae46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae48:	4b36      	ldr	r3, [pc, #216]	@ (800af24 <xTaskResumeAll+0x118>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d161      	bne.n	800af14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae50:	4b35      	ldr	r3, [pc, #212]	@ (800af28 <xTaskResumeAll+0x11c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d05d      	beq.n	800af14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae58:	e02e      	b.n	800aeb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae5a:	4b34      	ldr	r3, [pc, #208]	@ (800af2c <xTaskResumeAll+0x120>)
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3318      	adds	r3, #24
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff fd40 	bl	800a8ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3304      	adds	r3, #4
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff fd3b 	bl	800a8ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	409a      	lsls	r2, r3
 800ae7e:	4b2c      	ldr	r3, [pc, #176]	@ (800af30 <xTaskResumeAll+0x124>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	4a2a      	ldr	r2, [pc, #168]	@ (800af30 <xTaskResumeAll+0x124>)
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4a27      	ldr	r2, [pc, #156]	@ (800af34 <xTaskResumeAll+0x128>)
 800ae96:	441a      	add	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	4610      	mov	r0, r2
 800aea0:	f7ff fcc7 	bl	800a832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea8:	4b23      	ldr	r3, [pc, #140]	@ (800af38 <xTaskResumeAll+0x12c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d302      	bcc.n	800aeb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aeb2:	4b22      	ldr	r3, [pc, #136]	@ (800af3c <xTaskResumeAll+0x130>)
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aeb8:	4b1c      	ldr	r3, [pc, #112]	@ (800af2c <xTaskResumeAll+0x120>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1cc      	bne.n	800ae5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aec6:	f000 fa19 	bl	800b2fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aeca:	4b1d      	ldr	r3, [pc, #116]	@ (800af40 <xTaskResumeAll+0x134>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d010      	beq.n	800aef8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aed6:	f000 f837 	bl	800af48 <xTaskIncrementTick>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aee0:	4b16      	ldr	r3, [pc, #88]	@ (800af3c <xTaskResumeAll+0x130>)
 800aee2:	2201      	movs	r2, #1
 800aee4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f1      	bne.n	800aed6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aef2:	4b13      	ldr	r3, [pc, #76]	@ (800af40 <xTaskResumeAll+0x134>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aef8:	4b10      	ldr	r3, [pc, #64]	@ (800af3c <xTaskResumeAll+0x130>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d009      	beq.n	800af14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af00:	2301      	movs	r3, #1
 800af02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af04:	4b0f      	ldr	r3, [pc, #60]	@ (800af44 <xTaskResumeAll+0x138>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af14:	f000 fd82 	bl	800ba1c <vPortExitCritical>

	return xAlreadyYielded;
 800af18:	68bb      	ldr	r3, [r7, #8]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	24000a08 	.word	0x24000a08
 800af28:	240009e0 	.word	0x240009e0
 800af2c:	240009a0 	.word	0x240009a0
 800af30:	240009e8 	.word	0x240009e8
 800af34:	240008e4 	.word	0x240008e4
 800af38:	240008e0 	.word	0x240008e0
 800af3c:	240009f4 	.word	0x240009f4
 800af40:	240009f0 	.word	0x240009f0
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af4e:	2300      	movs	r3, #0
 800af50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af52:	4b4f      	ldr	r3, [pc, #316]	@ (800b090 <xTaskIncrementTick+0x148>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f040 808f 	bne.w	800b07a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af5c:	4b4d      	ldr	r3, [pc, #308]	@ (800b094 <xTaskIncrementTick+0x14c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af64:	4a4b      	ldr	r2, [pc, #300]	@ (800b094 <xTaskIncrementTick+0x14c>)
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d121      	bne.n	800afb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800af70:	4b49      	ldr	r3, [pc, #292]	@ (800b098 <xTaskIncrementTick+0x150>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <xTaskIncrementTick+0x4a>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	603b      	str	r3, [r7, #0]
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	e7fd      	b.n	800af8e <xTaskIncrementTick+0x46>
 800af92:	4b41      	ldr	r3, [pc, #260]	@ (800b098 <xTaskIncrementTick+0x150>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	60fb      	str	r3, [r7, #12]
 800af98:	4b40      	ldr	r3, [pc, #256]	@ (800b09c <xTaskIncrementTick+0x154>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a3e      	ldr	r2, [pc, #248]	@ (800b098 <xTaskIncrementTick+0x150>)
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	4a3e      	ldr	r2, [pc, #248]	@ (800b09c <xTaskIncrementTick+0x154>)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	4b3e      	ldr	r3, [pc, #248]	@ (800b0a0 <xTaskIncrementTick+0x158>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	4a3c      	ldr	r2, [pc, #240]	@ (800b0a0 <xTaskIncrementTick+0x158>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	f000 f9a4 	bl	800b2fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afb4:	4b3b      	ldr	r3, [pc, #236]	@ (800b0a4 <xTaskIncrementTick+0x15c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d348      	bcc.n	800b050 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afbe:	4b36      	ldr	r3, [pc, #216]	@ (800b098 <xTaskIncrementTick+0x150>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d104      	bne.n	800afd2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc8:	4b36      	ldr	r3, [pc, #216]	@ (800b0a4 <xTaskIncrementTick+0x15c>)
 800afca:	f04f 32ff 	mov.w	r2, #4294967295
 800afce:	601a      	str	r2, [r3, #0]
					break;
 800afd0:	e03e      	b.n	800b050 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afd2:	4b31      	ldr	r3, [pc, #196]	@ (800b098 <xTaskIncrementTick+0x150>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d203      	bcs.n	800aff2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afea:	4a2e      	ldr	r2, [pc, #184]	@ (800b0a4 <xTaskIncrementTick+0x15c>)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aff0:	e02e      	b.n	800b050 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fc78 	bl	800a8ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b000:	2b00      	cmp	r3, #0
 800b002:	d004      	beq.n	800b00e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	3318      	adds	r3, #24
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fc6f 	bl	800a8ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b012:	2201      	movs	r2, #1
 800b014:	409a      	lsls	r2, r3
 800b016:	4b24      	ldr	r3, [pc, #144]	@ (800b0a8 <xTaskIncrementTick+0x160>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	4a22      	ldr	r2, [pc, #136]	@ (800b0a8 <xTaskIncrementTick+0x160>)
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4a1f      	ldr	r2, [pc, #124]	@ (800b0ac <xTaskIncrementTick+0x164>)
 800b02e:	441a      	add	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	3304      	adds	r3, #4
 800b034:	4619      	mov	r1, r3
 800b036:	4610      	mov	r0, r2
 800b038:	f7ff fbfb 	bl	800a832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b040:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b0 <xTaskIncrementTick+0x168>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b046:	429a      	cmp	r2, r3
 800b048:	d3b9      	bcc.n	800afbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b04a:	2301      	movs	r3, #1
 800b04c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b04e:	e7b6      	b.n	800afbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b050:	4b17      	ldr	r3, [pc, #92]	@ (800b0b0 <xTaskIncrementTick+0x168>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b056:	4915      	ldr	r1, [pc, #84]	@ (800b0ac <xTaskIncrementTick+0x164>)
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	440b      	add	r3, r1
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d901      	bls.n	800b06c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b068:	2301      	movs	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b06c:	4b11      	ldr	r3, [pc, #68]	@ (800b0b4 <xTaskIncrementTick+0x16c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d007      	beq.n	800b084 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b074:	2301      	movs	r3, #1
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	e004      	b.n	800b084 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b07a:	4b0f      	ldr	r3, [pc, #60]	@ (800b0b8 <xTaskIncrementTick+0x170>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3301      	adds	r3, #1
 800b080:	4a0d      	ldr	r2, [pc, #52]	@ (800b0b8 <xTaskIncrementTick+0x170>)
 800b082:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b084:	697b      	ldr	r3, [r7, #20]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	24000a08 	.word	0x24000a08
 800b094:	240009e4 	.word	0x240009e4
 800b098:	24000998 	.word	0x24000998
 800b09c:	2400099c 	.word	0x2400099c
 800b0a0:	240009f8 	.word	0x240009f8
 800b0a4:	24000a00 	.word	0x24000a00
 800b0a8:	240009e8 	.word	0x240009e8
 800b0ac:	240008e4 	.word	0x240008e4
 800b0b0:	240008e0 	.word	0x240008e0
 800b0b4:	240009f4 	.word	0x240009f4
 800b0b8:	240009f0 	.word	0x240009f0

0800b0bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b16c <vTaskSwitchContext+0xb0>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0ca:	4b29      	ldr	r3, [pc, #164]	@ (800b170 <vTaskSwitchContext+0xb4>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0d0:	e045      	b.n	800b15e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b0d2:	4b27      	ldr	r3, [pc, #156]	@ (800b170 <vTaskSwitchContext+0xb4>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0d8:	4b26      	ldr	r3, [pc, #152]	@ (800b174 <vTaskSwitchContext+0xb8>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	fab3 f383 	clz	r3, r3
 800b0e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b0e6:	7afb      	ldrb	r3, [r7, #11]
 800b0e8:	f1c3 031f 	rsb	r3, r3, #31
 800b0ec:	617b      	str	r3, [r7, #20]
 800b0ee:	4922      	ldr	r1, [pc, #136]	@ (800b178 <vTaskSwitchContext+0xbc>)
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10b      	bne.n	800b11a <vTaskSwitchContext+0x5e>
	__asm volatile
 800b102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	607b      	str	r3, [r7, #4]
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop
 800b118:	e7fd      	b.n	800b116 <vTaskSwitchContext+0x5a>
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4a14      	ldr	r2, [pc, #80]	@ (800b178 <vTaskSwitchContext+0xbc>)
 800b126:	4413      	add	r3, r2
 800b128:	613b      	str	r3, [r7, #16]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	605a      	str	r2, [r3, #4]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	3308      	adds	r3, #8
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d104      	bne.n	800b14a <vTaskSwitchContext+0x8e>
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	605a      	str	r2, [r3, #4]
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4a0a      	ldr	r2, [pc, #40]	@ (800b17c <vTaskSwitchContext+0xc0>)
 800b152:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b154:	4b09      	ldr	r3, [pc, #36]	@ (800b17c <vTaskSwitchContext+0xc0>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	334c      	adds	r3, #76	@ 0x4c
 800b15a:	4a09      	ldr	r2, [pc, #36]	@ (800b180 <vTaskSwitchContext+0xc4>)
 800b15c:	6013      	str	r3, [r2, #0]
}
 800b15e:	bf00      	nop
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	24000a08 	.word	0x24000a08
 800b170:	240009f4 	.word	0x240009f4
 800b174:	240009e8 	.word	0x240009e8
 800b178:	240008e4 	.word	0x240008e4
 800b17c:	240008e0 	.word	0x240008e0
 800b180:	24000014 	.word	0x24000014

0800b184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b18c:	f000 f852 	bl	800b234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b190:	4b06      	ldr	r3, [pc, #24]	@ (800b1ac <prvIdleTask+0x28>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d9f9      	bls.n	800b18c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b198:	4b05      	ldr	r3, [pc, #20]	@ (800b1b0 <prvIdleTask+0x2c>)
 800b19a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1a8:	e7f0      	b.n	800b18c <prvIdleTask+0x8>
 800b1aa:	bf00      	nop
 800b1ac:	240008e4 	.word	0x240008e4
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	607b      	str	r3, [r7, #4]
 800b1be:	e00c      	b.n	800b1da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4a12      	ldr	r2, [pc, #72]	@ (800b214 <prvInitialiseTaskLists+0x60>)
 800b1cc:	4413      	add	r3, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fb02 	bl	800a7d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	607b      	str	r3, [r7, #4]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b06      	cmp	r3, #6
 800b1de:	d9ef      	bls.n	800b1c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b1e0:	480d      	ldr	r0, [pc, #52]	@ (800b218 <prvInitialiseTaskLists+0x64>)
 800b1e2:	f7ff faf9 	bl	800a7d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b1e6:	480d      	ldr	r0, [pc, #52]	@ (800b21c <prvInitialiseTaskLists+0x68>)
 800b1e8:	f7ff faf6 	bl	800a7d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b1ec:	480c      	ldr	r0, [pc, #48]	@ (800b220 <prvInitialiseTaskLists+0x6c>)
 800b1ee:	f7ff faf3 	bl	800a7d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b1f2:	480c      	ldr	r0, [pc, #48]	@ (800b224 <prvInitialiseTaskLists+0x70>)
 800b1f4:	f7ff faf0 	bl	800a7d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b1f8:	480b      	ldr	r0, [pc, #44]	@ (800b228 <prvInitialiseTaskLists+0x74>)
 800b1fa:	f7ff faed 	bl	800a7d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b22c <prvInitialiseTaskLists+0x78>)
 800b200:	4a05      	ldr	r2, [pc, #20]	@ (800b218 <prvInitialiseTaskLists+0x64>)
 800b202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b204:	4b0a      	ldr	r3, [pc, #40]	@ (800b230 <prvInitialiseTaskLists+0x7c>)
 800b206:	4a05      	ldr	r2, [pc, #20]	@ (800b21c <prvInitialiseTaskLists+0x68>)
 800b208:	601a      	str	r2, [r3, #0]
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	240008e4 	.word	0x240008e4
 800b218:	24000970 	.word	0x24000970
 800b21c:	24000984 	.word	0x24000984
 800b220:	240009a0 	.word	0x240009a0
 800b224:	240009b4 	.word	0x240009b4
 800b228:	240009cc 	.word	0x240009cc
 800b22c:	24000998 	.word	0x24000998
 800b230:	2400099c 	.word	0x2400099c

0800b234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b23a:	e019      	b.n	800b270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b23c:	f000 fbbc 	bl	800b9b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <prvCheckTasksWaitingTermination+0x50>)
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3304      	adds	r3, #4
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff fb4d 	bl	800a8ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b252:	4b0d      	ldr	r3, [pc, #52]	@ (800b288 <prvCheckTasksWaitingTermination+0x54>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3b01      	subs	r3, #1
 800b258:	4a0b      	ldr	r2, [pc, #44]	@ (800b288 <prvCheckTasksWaitingTermination+0x54>)
 800b25a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b25c:	4b0b      	ldr	r3, [pc, #44]	@ (800b28c <prvCheckTasksWaitingTermination+0x58>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3b01      	subs	r3, #1
 800b262:	4a0a      	ldr	r2, [pc, #40]	@ (800b28c <prvCheckTasksWaitingTermination+0x58>)
 800b264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b266:	f000 fbd9 	bl	800ba1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f810 	bl	800b290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b270:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <prvCheckTasksWaitingTermination+0x58>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e1      	bne.n	800b23c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b278:	bf00      	nop
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	240009b4 	.word	0x240009b4
 800b288:	240009e0 	.word	0x240009e0
 800b28c:	240009c8 	.word	0x240009c8

0800b290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	334c      	adds	r3, #76	@ 0x4c
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 fea3 	bl	800bfe8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d108      	bne.n	800b2be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fd71 	bl	800bd98 <vPortFree>
				vPortFree( pxTCB );
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fd6e 	bl	800bd98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2bc:	e019      	b.n	800b2f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d103      	bne.n	800b2d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fd65 	bl	800bd98 <vPortFree>
	}
 800b2ce:	e010      	b.n	800b2f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d00b      	beq.n	800b2f2 <prvDeleteTCB+0x62>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	60fb      	str	r3, [r7, #12]
}
 800b2ec:	bf00      	nop
 800b2ee:	bf00      	nop
 800b2f0:	e7fd      	b.n	800b2ee <prvDeleteTCB+0x5e>
	}
 800b2f2:	bf00      	nop
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
	...

0800b2fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b302:	4b0c      	ldr	r3, [pc, #48]	@ (800b334 <prvResetNextTaskUnblockTime+0x38>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d104      	bne.n	800b316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b30c:	4b0a      	ldr	r3, [pc, #40]	@ (800b338 <prvResetNextTaskUnblockTime+0x3c>)
 800b30e:	f04f 32ff 	mov.w	r2, #4294967295
 800b312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b314:	e008      	b.n	800b328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b316:	4b07      	ldr	r3, [pc, #28]	@ (800b334 <prvResetNextTaskUnblockTime+0x38>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	4a04      	ldr	r2, [pc, #16]	@ (800b338 <prvResetNextTaskUnblockTime+0x3c>)
 800b326:	6013      	str	r3, [r2, #0]
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	24000998 	.word	0x24000998
 800b338:	24000a00 	.word	0x24000a00

0800b33c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08a      	sub	sp, #40	@ 0x28
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	4613      	mov	r3, r2
 800b34a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b34c:	2301      	movs	r3, #1
 800b34e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10b      	bne.n	800b36e <xTaskGenericNotify+0x32>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	61bb      	str	r3, [r7, #24]
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	e7fd      	b.n	800b36a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b372:	f000 fb21 	bl	800b9b8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800b38c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	2202      	movs	r2, #2
 800b392:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d82e      	bhi.n	800b3fa <xTaskGenericNotify+0xbe>
 800b39c:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a4 <xTaskGenericNotify+0x68>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b41f 	.word	0x0800b41f
 800b3a8:	0800b3b9 	.word	0x0800b3b9
 800b3ac:	0800b3cb 	.word	0x0800b3cb
 800b3b0:	0800b3db 	.word	0x0800b3db
 800b3b4:	0800b3e5 	.word	0x0800b3e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	6a3b      	ldr	r3, [r7, #32]
 800b3c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800b3c8:	e02c      	b.n	800b424 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800b3d8:	e024      	b.n	800b424 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800b3e2:	e01f      	b.n	800b424 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b3e4:	7ffb      	ldrb	r3, [r7, #31]
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d004      	beq.n	800b3f4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b3f2:	e017      	b.n	800b424 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b3f8:	e014      	b.n	800b424 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b404:	d00d      	beq.n	800b422 <xTaskGenericNotify+0xe6>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40a:	f383 8811 	msr	BASEPRI, r3
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	617b      	str	r3, [r7, #20]
}
 800b418:	bf00      	nop
 800b41a:	bf00      	nop
 800b41c:	e7fd      	b.n	800b41a <xTaskGenericNotify+0xde>
					break;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <xTaskGenericNotify+0xe8>

					break;
 800b422:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b424:	7ffb      	ldrb	r3, [r7, #31]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d13a      	bne.n	800b4a0 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff fa5c 	bl	800a8ec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b438:	2201      	movs	r2, #1
 800b43a:	409a      	lsls	r2, r3
 800b43c:	4b1c      	ldr	r3, [pc, #112]	@ (800b4b0 <xTaskGenericNotify+0x174>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4313      	orrs	r3, r2
 800b442:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b0 <xTaskGenericNotify+0x174>)
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4a18      	ldr	r2, [pc, #96]	@ (800b4b4 <xTaskGenericNotify+0x178>)
 800b454:	441a      	add	r2, r3
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	3304      	adds	r3, #4
 800b45a:	4619      	mov	r1, r3
 800b45c:	4610      	mov	r0, r2
 800b45e:	f7ff f9e8 	bl	800a832 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00b      	beq.n	800b482 <xTaskGenericNotify+0x146>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	613b      	str	r3, [r7, #16]
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	e7fd      	b.n	800b47e <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b486:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b8 <xTaskGenericNotify+0x17c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d907      	bls.n	800b4a0 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b490:	4b0a      	ldr	r3, [pc, #40]	@ (800b4bc <xTaskGenericNotify+0x180>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b4a0:	f000 fabc 	bl	800ba1c <vPortExitCritical>

		return xReturn;
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3728      	adds	r7, #40	@ 0x28
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	240009e8 	.word	0x240009e8
 800b4b4:	240008e4 	.word	0x240008e4
 800b4b8:	240008e0 	.word	0x240008e0
 800b4bc:	e000ed04 	.word	0xe000ed04

0800b4c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08e      	sub	sp, #56	@ 0x38
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	603b      	str	r3, [r7, #0]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10b      	bne.n	800b4f2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
 800b4f0:	e7fd      	b.n	800b4ee <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4f2:	f000 fb41 	bl	800bb78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	623a      	str	r2, [r7, #32]
 800b510:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b512:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b514:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d004      	beq.n	800b526 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b528:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800b52c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	2202      	movs	r2, #2
 800b534:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800b538:	79fb      	ldrb	r3, [r7, #7]
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	d82e      	bhi.n	800b59c <xTaskGenericNotifyFromISR+0xdc>
 800b53e:	a201      	add	r2, pc, #4	@ (adr r2, 800b544 <xTaskGenericNotifyFromISR+0x84>)
 800b540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b544:	0800b5c1 	.word	0x0800b5c1
 800b548:	0800b559 	.word	0x0800b559
 800b54c:	0800b56b 	.word	0x0800b56b
 800b550:	0800b57b 	.word	0x0800b57b
 800b554:	0800b585 	.word	0x0800b585
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	431a      	orrs	r2, r3
 800b562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b564:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800b568:	e02d      	b.n	800b5c6 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800b578:	e025      	b.n	800b5c6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800b582:	e020      	b.n	800b5c6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b584:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d004      	beq.n	800b596 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b594:	e017      	b.n	800b5c6 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800b596:	2300      	movs	r3, #0
 800b598:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800b59a:	e014      	b.n	800b5c6 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a6:	d00d      	beq.n	800b5c4 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	61bb      	str	r3, [r7, #24]
}
 800b5ba:	bf00      	nop
 800b5bc:	bf00      	nop
 800b5be:	e7fd      	b.n	800b5bc <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b5c0:	bf00      	nop
 800b5c2:	e000      	b.n	800b5c6 <xTaskGenericNotifyFromISR+0x106>
					break;
 800b5c4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b5c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d146      	bne.n	800b65c <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00b      	beq.n	800b5ee <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	617b      	str	r3, [r7, #20]
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ee:	4b21      	ldr	r3, [pc, #132]	@ (800b674 <xTaskGenericNotifyFromISR+0x1b4>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d11c      	bne.n	800b630 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff f976 	bl	800a8ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b604:	2201      	movs	r2, #1
 800b606:	409a      	lsls	r2, r3
 800b608:	4b1b      	ldr	r3, [pc, #108]	@ (800b678 <xTaskGenericNotifyFromISR+0x1b8>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	4a1a      	ldr	r2, [pc, #104]	@ (800b678 <xTaskGenericNotifyFromISR+0x1b8>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4a17      	ldr	r2, [pc, #92]	@ (800b67c <xTaskGenericNotifyFromISR+0x1bc>)
 800b620:	441a      	add	r2, r3
 800b622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7ff f902 	bl	800a832 <vListInsertEnd>
 800b62e:	e005      	b.n	800b63c <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	3318      	adds	r3, #24
 800b634:	4619      	mov	r1, r3
 800b636:	4812      	ldr	r0, [pc, #72]	@ (800b680 <xTaskGenericNotifyFromISR+0x1c0>)
 800b638:	f7ff f8fb 	bl	800a832 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b640:	4b10      	ldr	r3, [pc, #64]	@ (800b684 <xTaskGenericNotifyFromISR+0x1c4>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b646:	429a      	cmp	r2, r3
 800b648:	d908      	bls.n	800b65c <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b64a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b656:	4b0c      	ldr	r3, [pc, #48]	@ (800b688 <xTaskGenericNotifyFromISR+0x1c8>)
 800b658:	2201      	movs	r2, #1
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b666:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3738      	adds	r7, #56	@ 0x38
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	24000a08 	.word	0x24000a08
 800b678:	240009e8 	.word	0x240009e8
 800b67c:	240008e4 	.word	0x240008e4
 800b680:	240009a0 	.word	0x240009a0
 800b684:	240008e0 	.word	0x240008e0
 800b688:	240009f4 	.word	0x240009f4

0800b68c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b696:	4b29      	ldr	r3, [pc, #164]	@ (800b73c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b69c:	4b28      	ldr	r3, [pc, #160]	@ (800b740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff f922 	bl	800a8ec <uxListRemove>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10b      	bne.n	800b6c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b6ae:	4b24      	ldr	r3, [pc, #144]	@ (800b740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ba:	43da      	mvns	r2, r3
 800b6bc:	4b21      	ldr	r3, [pc, #132]	@ (800b744 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	4a20      	ldr	r2, [pc, #128]	@ (800b744 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b6c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d10a      	bne.n	800b6e4 <prvAddCurrentTaskToDelayedList+0x58>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d007      	beq.n	800b6e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	4619      	mov	r1, r3
 800b6dc:	481a      	ldr	r0, [pc, #104]	@ (800b748 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b6de:	f7ff f8a8 	bl	800a832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6e2:	e026      	b.n	800b732 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6ec:	4b14      	ldr	r3, [pc, #80]	@ (800b740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d209      	bcs.n	800b710 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6fc:	4b13      	ldr	r3, [pc, #76]	@ (800b74c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	4b0f      	ldr	r3, [pc, #60]	@ (800b740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3304      	adds	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	4610      	mov	r0, r2
 800b70a:	f7ff f8b6 	bl	800a87a <vListInsert>
}
 800b70e:	e010      	b.n	800b732 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b710:	4b0f      	ldr	r3, [pc, #60]	@ (800b750 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	4b0a      	ldr	r3, [pc, #40]	@ (800b740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3304      	adds	r3, #4
 800b71a:	4619      	mov	r1, r3
 800b71c:	4610      	mov	r0, r2
 800b71e:	f7ff f8ac 	bl	800a87a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b722:	4b0c      	ldr	r3, [pc, #48]	@ (800b754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d202      	bcs.n	800b732 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b72c:	4a09      	ldr	r2, [pc, #36]	@ (800b754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	6013      	str	r3, [r2, #0]
}
 800b732:	bf00      	nop
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	240009e4 	.word	0x240009e4
 800b740:	240008e0 	.word	0x240008e0
 800b744:	240009e8 	.word	0x240009e8
 800b748:	240009cc 	.word	0x240009cc
 800b74c:	2400099c 	.word	0x2400099c
 800b750:	24000998 	.word	0x24000998
 800b754:	24000a00 	.word	0x24000a00

0800b758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	3b04      	subs	r3, #4
 800b768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3b04      	subs	r3, #4
 800b776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f023 0201 	bic.w	r2, r3, #1
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3b04      	subs	r3, #4
 800b786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b788:	4a0c      	ldr	r2, [pc, #48]	@ (800b7bc <pxPortInitialiseStack+0x64>)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3b14      	subs	r3, #20
 800b792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3b04      	subs	r3, #4
 800b79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f06f 0202 	mvn.w	r2, #2
 800b7a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3b20      	subs	r3, #32
 800b7ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	0800b7c1 	.word	0x0800b7c1

0800b7c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7ca:	4b13      	ldr	r3, [pc, #76]	@ (800b818 <prvTaskExitError+0x58>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d2:	d00b      	beq.n	800b7ec <prvTaskExitError+0x2c>
	__asm volatile
 800b7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	60fb      	str	r3, [r7, #12]
}
 800b7e6:	bf00      	nop
 800b7e8:	bf00      	nop
 800b7ea:	e7fd      	b.n	800b7e8 <prvTaskExitError+0x28>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	60bb      	str	r3, [r7, #8]
}
 800b7fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b800:	bf00      	nop
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0fc      	beq.n	800b802 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b808:	bf00      	nop
 800b80a:	bf00      	nop
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	24000010 	.word	0x24000010
 800b81c:	00000000 	.word	0x00000000

0800b820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b820:	4b07      	ldr	r3, [pc, #28]	@ (800b840 <pxCurrentTCBConst2>)
 800b822:	6819      	ldr	r1, [r3, #0]
 800b824:	6808      	ldr	r0, [r1, #0]
 800b826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82a:	f380 8809 	msr	PSP, r0
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f04f 0000 	mov.w	r0, #0
 800b836:	f380 8811 	msr	BASEPRI, r0
 800b83a:	4770      	bx	lr
 800b83c:	f3af 8000 	nop.w

0800b840 <pxCurrentTCBConst2>:
 800b840:	240008e0 	.word	0x240008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop

0800b848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b848:	4808      	ldr	r0, [pc, #32]	@ (800b86c <prvPortStartFirstTask+0x24>)
 800b84a:	6800      	ldr	r0, [r0, #0]
 800b84c:	6800      	ldr	r0, [r0, #0]
 800b84e:	f380 8808 	msr	MSP, r0
 800b852:	f04f 0000 	mov.w	r0, #0
 800b856:	f380 8814 	msr	CONTROL, r0
 800b85a:	b662      	cpsie	i
 800b85c:	b661      	cpsie	f
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	df00      	svc	0
 800b868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b86a:	bf00      	nop
 800b86c:	e000ed08 	.word	0xe000ed08

0800b870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b876:	4b47      	ldr	r3, [pc, #284]	@ (800b994 <xPortStartScheduler+0x124>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a47      	ldr	r2, [pc, #284]	@ (800b998 <xPortStartScheduler+0x128>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d10b      	bne.n	800b898 <xPortStartScheduler+0x28>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	60fb      	str	r3, [r7, #12]
}
 800b892:	bf00      	nop
 800b894:	bf00      	nop
 800b896:	e7fd      	b.n	800b894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b898:	4b3e      	ldr	r3, [pc, #248]	@ (800b994 <xPortStartScheduler+0x124>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a3f      	ldr	r2, [pc, #252]	@ (800b99c <xPortStartScheduler+0x12c>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d10b      	bne.n	800b8ba <xPortStartScheduler+0x4a>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	613b      	str	r3, [r7, #16]
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop
 800b8b8:	e7fd      	b.n	800b8b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8ba:	4b39      	ldr	r3, [pc, #228]	@ (800b9a0 <xPortStartScheduler+0x130>)
 800b8bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	22ff      	movs	r2, #255	@ 0xff
 800b8ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	4b31      	ldr	r3, [pc, #196]	@ (800b9a4 <xPortStartScheduler+0x134>)
 800b8e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8e2:	4b31      	ldr	r3, [pc, #196]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b8e4:	2207      	movs	r2, #7
 800b8e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8e8:	e009      	b.n	800b8fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	4a2d      	ldr	r2, [pc, #180]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b8f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	005b      	lsls	r3, r3, #1
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	b2db      	uxtb	r3, r3
 800b902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b906:	2b80      	cmp	r3, #128	@ 0x80
 800b908:	d0ef      	beq.n	800b8ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b90a:	4b27      	ldr	r3, [pc, #156]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f1c3 0307 	rsb	r3, r3, #7
 800b912:	2b04      	cmp	r3, #4
 800b914:	d00b      	beq.n	800b92e <xPortStartScheduler+0xbe>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	60bb      	str	r3, [r7, #8]
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	e7fd      	b.n	800b92a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b92e:	4b1e      	ldr	r3, [pc, #120]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	021b      	lsls	r3, r3, #8
 800b934:	4a1c      	ldr	r2, [pc, #112]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b938:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b940:	4a19      	ldr	r2, [pc, #100]	@ (800b9a8 <xPortStartScheduler+0x138>)
 800b942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	b2da      	uxtb	r2, r3
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b94c:	4b17      	ldr	r3, [pc, #92]	@ (800b9ac <xPortStartScheduler+0x13c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a16      	ldr	r2, [pc, #88]	@ (800b9ac <xPortStartScheduler+0x13c>)
 800b952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b958:	4b14      	ldr	r3, [pc, #80]	@ (800b9ac <xPortStartScheduler+0x13c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a13      	ldr	r2, [pc, #76]	@ (800b9ac <xPortStartScheduler+0x13c>)
 800b95e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b964:	f000 f8da 	bl	800bb1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b968:	4b11      	ldr	r3, [pc, #68]	@ (800b9b0 <xPortStartScheduler+0x140>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b96e:	f000 f8f9 	bl	800bb64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b972:	4b10      	ldr	r3, [pc, #64]	@ (800b9b4 <xPortStartScheduler+0x144>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a0f      	ldr	r2, [pc, #60]	@ (800b9b4 <xPortStartScheduler+0x144>)
 800b978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b97c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b97e:	f7ff ff63 	bl	800b848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b982:	f7ff fb9b 	bl	800b0bc <vTaskSwitchContext>
	prvTaskExitError();
 800b986:	f7ff ff1b 	bl	800b7c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	e000ed00 	.word	0xe000ed00
 800b998:	410fc271 	.word	0x410fc271
 800b99c:	410fc270 	.word	0x410fc270
 800b9a0:	e000e400 	.word	0xe000e400
 800b9a4:	24000a0c 	.word	0x24000a0c
 800b9a8:	24000a10 	.word	0x24000a10
 800b9ac:	e000ed20 	.word	0xe000ed20
 800b9b0:	24000010 	.word	0x24000010
 800b9b4:	e000ef34 	.word	0xe000ef34

0800b9b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	607b      	str	r3, [r7, #4]
}
 800b9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9d2:	4b10      	ldr	r3, [pc, #64]	@ (800ba14 <vPortEnterCritical+0x5c>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800ba14 <vPortEnterCritical+0x5c>)
 800b9da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800ba14 <vPortEnterCritical+0x5c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d110      	bne.n	800ba06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800ba18 <vPortEnterCritical+0x60>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00b      	beq.n	800ba06 <vPortEnterCritical+0x4e>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	603b      	str	r3, [r7, #0]
}
 800ba00:	bf00      	nop
 800ba02:	bf00      	nop
 800ba04:	e7fd      	b.n	800ba02 <vPortEnterCritical+0x4a>
	}
}
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	24000010 	.word	0x24000010
 800ba18:	e000ed04 	.word	0xe000ed04

0800ba1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba22:	4b12      	ldr	r3, [pc, #72]	@ (800ba6c <vPortExitCritical+0x50>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10b      	bne.n	800ba42 <vPortExitCritical+0x26>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	607b      	str	r3, [r7, #4]
}
 800ba3c:	bf00      	nop
 800ba3e:	bf00      	nop
 800ba40:	e7fd      	b.n	800ba3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba42:	4b0a      	ldr	r3, [pc, #40]	@ (800ba6c <vPortExitCritical+0x50>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	4a08      	ldr	r2, [pc, #32]	@ (800ba6c <vPortExitCritical+0x50>)
 800ba4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba4c:	4b07      	ldr	r3, [pc, #28]	@ (800ba6c <vPortExitCritical+0x50>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d105      	bne.n	800ba60 <vPortExitCritical+0x44>
 800ba54:	2300      	movs	r3, #0
 800ba56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	f383 8811 	msr	BASEPRI, r3
}
 800ba5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	24000010 	.word	0x24000010

0800ba70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba70:	f3ef 8009 	mrs	r0, PSP
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	4b15      	ldr	r3, [pc, #84]	@ (800bad0 <pxCurrentTCBConst>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	f01e 0f10 	tst.w	lr, #16
 800ba80:	bf08      	it	eq
 800ba82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8a:	6010      	str	r0, [r2, #0]
 800ba8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ba94:	f380 8811 	msr	BASEPRI, r0
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f7ff fb0c 	bl	800b0bc <vTaskSwitchContext>
 800baa4:	f04f 0000 	mov.w	r0, #0
 800baa8:	f380 8811 	msr	BASEPRI, r0
 800baac:	bc09      	pop	{r0, r3}
 800baae:	6819      	ldr	r1, [r3, #0]
 800bab0:	6808      	ldr	r0, [r1, #0]
 800bab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab6:	f01e 0f10 	tst.w	lr, #16
 800baba:	bf08      	it	eq
 800babc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bac0:	f380 8809 	msr	PSP, r0
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	f3af 8000 	nop.w

0800bad0 <pxCurrentTCBConst>:
 800bad0:	240008e0 	.word	0x240008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop

0800bad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	607b      	str	r3, [r7, #4]
}
 800baf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800baf2:	f7ff fa29 	bl	800af48 <xTaskIncrementTick>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bafc:	4b06      	ldr	r3, [pc, #24]	@ (800bb18 <SysTick_Handler+0x40>)
 800bafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	2300      	movs	r3, #0
 800bb06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	f383 8811 	msr	BASEPRI, r3
}
 800bb0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb20:	4b0b      	ldr	r3, [pc, #44]	@ (800bb50 <vPortSetupTimerInterrupt+0x34>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb26:	4b0b      	ldr	r3, [pc, #44]	@ (800bb54 <vPortSetupTimerInterrupt+0x38>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb58 <vPortSetupTimerInterrupt+0x3c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a0a      	ldr	r2, [pc, #40]	@ (800bb5c <vPortSetupTimerInterrupt+0x40>)
 800bb32:	fba2 2303 	umull	r2, r3, r2, r3
 800bb36:	099b      	lsrs	r3, r3, #6
 800bb38:	4a09      	ldr	r2, [pc, #36]	@ (800bb60 <vPortSetupTimerInterrupt+0x44>)
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb3e:	4b04      	ldr	r3, [pc, #16]	@ (800bb50 <vPortSetupTimerInterrupt+0x34>)
 800bb40:	2207      	movs	r2, #7
 800bb42:	601a      	str	r2, [r3, #0]
}
 800bb44:	bf00      	nop
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	e000e010 	.word	0xe000e010
 800bb54:	e000e018 	.word	0xe000e018
 800bb58:	24000000 	.word	0x24000000
 800bb5c:	10624dd3 	.word	0x10624dd3
 800bb60:	e000e014 	.word	0xe000e014

0800bb64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bb74 <vPortEnableVFP+0x10>
 800bb68:	6801      	ldr	r1, [r0, #0]
 800bb6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bb6e:	6001      	str	r1, [r0, #0]
 800bb70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb72:	bf00      	nop
 800bb74:	e000ed88 	.word	0xe000ed88

0800bb78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb7e:	f3ef 8305 	mrs	r3, IPSR
 800bb82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2b0f      	cmp	r3, #15
 800bb88:	d915      	bls.n	800bbb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb8a:	4a18      	ldr	r2, [pc, #96]	@ (800bbec <vPortValidateInterruptPriority+0x74>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb94:	4b16      	ldr	r3, [pc, #88]	@ (800bbf0 <vPortValidateInterruptPriority+0x78>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	7afa      	ldrb	r2, [r7, #11]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d20b      	bcs.n	800bbb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	607b      	str	r3, [r7, #4]
}
 800bbb0:	bf00      	nop
 800bbb2:	bf00      	nop
 800bbb4:	e7fd      	b.n	800bbb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf4 <vPortValidateInterruptPriority+0x7c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bbbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf8 <vPortValidateInterruptPriority+0x80>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d90b      	bls.n	800bbde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	603b      	str	r3, [r7, #0]
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	e7fd      	b.n	800bbda <vPortValidateInterruptPriority+0x62>
	}
 800bbde:	bf00      	nop
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	e000e3f0 	.word	0xe000e3f0
 800bbf0:	24000a0c 	.word	0x24000a0c
 800bbf4:	e000ed0c 	.word	0xe000ed0c
 800bbf8:	24000a10 	.word	0x24000a10

0800bbfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08a      	sub	sp, #40	@ 0x28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc04:	2300      	movs	r3, #0
 800bc06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc08:	f7ff f8f2 	bl	800adf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc0c:	4b5c      	ldr	r3, [pc, #368]	@ (800bd80 <pvPortMalloc+0x184>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc14:	f000 f924 	bl	800be60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc18:	4b5a      	ldr	r3, [pc, #360]	@ (800bd84 <pvPortMalloc+0x188>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4013      	ands	r3, r2
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f040 8095 	bne.w	800bd50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01e      	beq.n	800bc6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bc2c:	2208      	movs	r2, #8
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4413      	add	r3, r2
 800bc32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f003 0307 	and.w	r3, r3, #7
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d015      	beq.n	800bc6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f023 0307 	bic.w	r3, r3, #7
 800bc44:	3308      	adds	r3, #8
 800bc46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f003 0307 	and.w	r3, r3, #7
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00b      	beq.n	800bc6a <pvPortMalloc+0x6e>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	617b      	str	r3, [r7, #20]
}
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop
 800bc68:	e7fd      	b.n	800bc66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d06f      	beq.n	800bd50 <pvPortMalloc+0x154>
 800bc70:	4b45      	ldr	r3, [pc, #276]	@ (800bd88 <pvPortMalloc+0x18c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d86a      	bhi.n	800bd50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc7a:	4b44      	ldr	r3, [pc, #272]	@ (800bd8c <pvPortMalloc+0x190>)
 800bc7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc7e:	4b43      	ldr	r3, [pc, #268]	@ (800bd8c <pvPortMalloc+0x190>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc84:	e004      	b.n	800bc90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d903      	bls.n	800bca2 <pvPortMalloc+0xa6>
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1f1      	bne.n	800bc86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bca2:	4b37      	ldr	r3, [pc, #220]	@ (800bd80 <pvPortMalloc+0x184>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d051      	beq.n	800bd50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2208      	movs	r2, #8
 800bcb2:	4413      	add	r3, r2
 800bcb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc0:	685a      	ldr	r2, [r3, #4]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	1ad2      	subs	r2, r2, r3
 800bcc6:	2308      	movs	r3, #8
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d920      	bls.n	800bd10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bcce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	f003 0307 	and.w	r3, r3, #7
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00b      	beq.n	800bcf8 <pvPortMalloc+0xfc>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
 800bcf4:	bf00      	nop
 800bcf6:	e7fd      	b.n	800bcf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	1ad2      	subs	r2, r2, r3
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd0a:	69b8      	ldr	r0, [r7, #24]
 800bd0c:	f000 f90a 	bl	800bf24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd10:	4b1d      	ldr	r3, [pc, #116]	@ (800bd88 <pvPortMalloc+0x18c>)
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	4a1b      	ldr	r2, [pc, #108]	@ (800bd88 <pvPortMalloc+0x18c>)
 800bd1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd1e:	4b1a      	ldr	r3, [pc, #104]	@ (800bd88 <pvPortMalloc+0x18c>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b1b      	ldr	r3, [pc, #108]	@ (800bd90 <pvPortMalloc+0x194>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d203      	bcs.n	800bd32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd2a:	4b17      	ldr	r3, [pc, #92]	@ (800bd88 <pvPortMalloc+0x18c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a18      	ldr	r2, [pc, #96]	@ (800bd90 <pvPortMalloc+0x194>)
 800bd30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	4b13      	ldr	r3, [pc, #76]	@ (800bd84 <pvPortMalloc+0x188>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd42:	2200      	movs	r2, #0
 800bd44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd46:	4b13      	ldr	r3, [pc, #76]	@ (800bd94 <pvPortMalloc+0x198>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	4a11      	ldr	r2, [pc, #68]	@ (800bd94 <pvPortMalloc+0x198>)
 800bd4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd50:	f7ff f85c 	bl	800ae0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	f003 0307 	and.w	r3, r3, #7
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00b      	beq.n	800bd76 <pvPortMalloc+0x17a>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	60fb      	str	r3, [r7, #12]
}
 800bd70:	bf00      	nop
 800bd72:	bf00      	nop
 800bd74:	e7fd      	b.n	800bd72 <pvPortMalloc+0x176>
	return pvReturn;
 800bd76:	69fb      	ldr	r3, [r7, #28]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3728      	adds	r7, #40	@ 0x28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	2400461c 	.word	0x2400461c
 800bd84:	24004630 	.word	0x24004630
 800bd88:	24004620 	.word	0x24004620
 800bd8c:	24004614 	.word	0x24004614
 800bd90:	24004624 	.word	0x24004624
 800bd94:	24004628 	.word	0x24004628

0800bd98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d04f      	beq.n	800be4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bdaa:	2308      	movs	r3, #8
 800bdac:	425b      	negs	r3, r3
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	4b25      	ldr	r3, [pc, #148]	@ (800be54 <vPortFree+0xbc>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10b      	bne.n	800bdde <vPortFree+0x46>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	60fb      	str	r3, [r7, #12]
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	e7fd      	b.n	800bdda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00b      	beq.n	800bdfe <vPortFree+0x66>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	60bb      	str	r3, [r7, #8]
}
 800bdf8:	bf00      	nop
 800bdfa:	bf00      	nop
 800bdfc:	e7fd      	b.n	800bdfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	4b14      	ldr	r3, [pc, #80]	@ (800be54 <vPortFree+0xbc>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4013      	ands	r3, r2
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01e      	beq.n	800be4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d11a      	bne.n	800be4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	4b0e      	ldr	r3, [pc, #56]	@ (800be54 <vPortFree+0xbc>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	43db      	mvns	r3, r3
 800be1e:	401a      	ands	r2, r3
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be24:	f7fe ffe4 	bl	800adf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	4b0a      	ldr	r3, [pc, #40]	@ (800be58 <vPortFree+0xc0>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4413      	add	r3, r2
 800be32:	4a09      	ldr	r2, [pc, #36]	@ (800be58 <vPortFree+0xc0>)
 800be34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be36:	6938      	ldr	r0, [r7, #16]
 800be38:	f000 f874 	bl	800bf24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be3c:	4b07      	ldr	r3, [pc, #28]	@ (800be5c <vPortFree+0xc4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	4a06      	ldr	r2, [pc, #24]	@ (800be5c <vPortFree+0xc4>)
 800be44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be46:	f7fe ffe1 	bl	800ae0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be4a:	bf00      	nop
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	24004630 	.word	0x24004630
 800be58:	24004620 	.word	0x24004620
 800be5c:	2400462c 	.word	0x2400462c

0800be60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800be6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be6c:	4b27      	ldr	r3, [pc, #156]	@ (800bf0c <prvHeapInit+0xac>)
 800be6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00c      	beq.n	800be94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3307      	adds	r3, #7
 800be7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f023 0307 	bic.w	r3, r3, #7
 800be86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	4a1f      	ldr	r2, [pc, #124]	@ (800bf0c <prvHeapInit+0xac>)
 800be90:	4413      	add	r3, r2
 800be92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be98:	4a1d      	ldr	r2, [pc, #116]	@ (800bf10 <prvHeapInit+0xb0>)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be9e:	4b1c      	ldr	r3, [pc, #112]	@ (800bf10 <prvHeapInit+0xb0>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	4413      	add	r3, r2
 800beaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800beac:	2208      	movs	r2, #8
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	1a9b      	subs	r3, r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f023 0307 	bic.w	r3, r3, #7
 800beba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4a15      	ldr	r2, [pc, #84]	@ (800bf14 <prvHeapInit+0xb4>)
 800bec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bec2:	4b14      	ldr	r3, [pc, #80]	@ (800bf14 <prvHeapInit+0xb4>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2200      	movs	r2, #0
 800bec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800beca:	4b12      	ldr	r3, [pc, #72]	@ (800bf14 <prvHeapInit+0xb4>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2200      	movs	r2, #0
 800bed0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	1ad2      	subs	r2, r2, r3
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bee0:	4b0c      	ldr	r3, [pc, #48]	@ (800bf14 <prvHeapInit+0xb4>)
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	4a0a      	ldr	r2, [pc, #40]	@ (800bf18 <prvHeapInit+0xb8>)
 800beee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	4a09      	ldr	r2, [pc, #36]	@ (800bf1c <prvHeapInit+0xbc>)
 800bef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bef8:	4b09      	ldr	r3, [pc, #36]	@ (800bf20 <prvHeapInit+0xc0>)
 800befa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800befe:	601a      	str	r2, [r3, #0]
}
 800bf00:	bf00      	nop
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	24000a14 	.word	0x24000a14
 800bf10:	24004614 	.word	0x24004614
 800bf14:	2400461c 	.word	0x2400461c
 800bf18:	24004624 	.word	0x24004624
 800bf1c:	24004620 	.word	0x24004620
 800bf20:	24004630 	.word	0x24004630

0800bf24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf2c:	4b28      	ldr	r3, [pc, #160]	@ (800bfd0 <prvInsertBlockIntoFreeList+0xac>)
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e002      	b.n	800bf38 <prvInsertBlockIntoFreeList+0x14>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	60fb      	str	r3, [r7, #12]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d8f7      	bhi.n	800bf32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d108      	bne.n	800bf66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	441a      	add	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	441a      	add	r2, r3
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d118      	bne.n	800bfac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	4b15      	ldr	r3, [pc, #84]	@ (800bfd4 <prvInsertBlockIntoFreeList+0xb0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d00d      	beq.n	800bfa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	441a      	add	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	601a      	str	r2, [r3, #0]
 800bfa0:	e008      	b.n	800bfb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfa2:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd4 <prvInsertBlockIntoFreeList+0xb0>)
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	e003      	b.n	800bfb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d002      	beq.n	800bfc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfc2:	bf00      	nop
 800bfc4:	3714      	adds	r7, #20
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	24004614 	.word	0x24004614
 800bfd4:	2400461c 	.word	0x2400461c

0800bfd8 <memset>:
 800bfd8:	4402      	add	r2, r0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d100      	bne.n	800bfe2 <memset+0xa>
 800bfe0:	4770      	bx	lr
 800bfe2:	f803 1b01 	strb.w	r1, [r3], #1
 800bfe6:	e7f9      	b.n	800bfdc <memset+0x4>

0800bfe8 <_reclaim_reent>:
 800bfe8:	4b2d      	ldr	r3, [pc, #180]	@ (800c0a0 <_reclaim_reent+0xb8>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4283      	cmp	r3, r0
 800bfee:	b570      	push	{r4, r5, r6, lr}
 800bff0:	4604      	mov	r4, r0
 800bff2:	d053      	beq.n	800c09c <_reclaim_reent+0xb4>
 800bff4:	69c3      	ldr	r3, [r0, #28]
 800bff6:	b31b      	cbz	r3, 800c040 <_reclaim_reent+0x58>
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	b163      	cbz	r3, 800c016 <_reclaim_reent+0x2e>
 800bffc:	2500      	movs	r5, #0
 800bffe:	69e3      	ldr	r3, [r4, #28]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	5959      	ldr	r1, [r3, r5]
 800c004:	b9b1      	cbnz	r1, 800c034 <_reclaim_reent+0x4c>
 800c006:	3504      	adds	r5, #4
 800c008:	2d80      	cmp	r5, #128	@ 0x80
 800c00a:	d1f8      	bne.n	800bffe <_reclaim_reent+0x16>
 800c00c:	69e3      	ldr	r3, [r4, #28]
 800c00e:	4620      	mov	r0, r4
 800c010:	68d9      	ldr	r1, [r3, #12]
 800c012:	f000 f86d 	bl	800c0f0 <_free_r>
 800c016:	69e3      	ldr	r3, [r4, #28]
 800c018:	6819      	ldr	r1, [r3, #0]
 800c01a:	b111      	cbz	r1, 800c022 <_reclaim_reent+0x3a>
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 f867 	bl	800c0f0 <_free_r>
 800c022:	69e3      	ldr	r3, [r4, #28]
 800c024:	689d      	ldr	r5, [r3, #8]
 800c026:	b15d      	cbz	r5, 800c040 <_reclaim_reent+0x58>
 800c028:	4629      	mov	r1, r5
 800c02a:	4620      	mov	r0, r4
 800c02c:	682d      	ldr	r5, [r5, #0]
 800c02e:	f000 f85f 	bl	800c0f0 <_free_r>
 800c032:	e7f8      	b.n	800c026 <_reclaim_reent+0x3e>
 800c034:	680e      	ldr	r6, [r1, #0]
 800c036:	4620      	mov	r0, r4
 800c038:	f000 f85a 	bl	800c0f0 <_free_r>
 800c03c:	4631      	mov	r1, r6
 800c03e:	e7e1      	b.n	800c004 <_reclaim_reent+0x1c>
 800c040:	6961      	ldr	r1, [r4, #20]
 800c042:	b111      	cbz	r1, 800c04a <_reclaim_reent+0x62>
 800c044:	4620      	mov	r0, r4
 800c046:	f000 f853 	bl	800c0f0 <_free_r>
 800c04a:	69e1      	ldr	r1, [r4, #28]
 800c04c:	b111      	cbz	r1, 800c054 <_reclaim_reent+0x6c>
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 f84e 	bl	800c0f0 <_free_r>
 800c054:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c056:	b111      	cbz	r1, 800c05e <_reclaim_reent+0x76>
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 f849 	bl	800c0f0 <_free_r>
 800c05e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c060:	b111      	cbz	r1, 800c068 <_reclaim_reent+0x80>
 800c062:	4620      	mov	r0, r4
 800c064:	f000 f844 	bl	800c0f0 <_free_r>
 800c068:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c06a:	b111      	cbz	r1, 800c072 <_reclaim_reent+0x8a>
 800c06c:	4620      	mov	r0, r4
 800c06e:	f000 f83f 	bl	800c0f0 <_free_r>
 800c072:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c074:	b111      	cbz	r1, 800c07c <_reclaim_reent+0x94>
 800c076:	4620      	mov	r0, r4
 800c078:	f000 f83a 	bl	800c0f0 <_free_r>
 800c07c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c07e:	b111      	cbz	r1, 800c086 <_reclaim_reent+0x9e>
 800c080:	4620      	mov	r0, r4
 800c082:	f000 f835 	bl	800c0f0 <_free_r>
 800c086:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c088:	b111      	cbz	r1, 800c090 <_reclaim_reent+0xa8>
 800c08a:	4620      	mov	r0, r4
 800c08c:	f000 f830 	bl	800c0f0 <_free_r>
 800c090:	6a23      	ldr	r3, [r4, #32]
 800c092:	b11b      	cbz	r3, 800c09c <_reclaim_reent+0xb4>
 800c094:	4620      	mov	r0, r4
 800c096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c09a:	4718      	bx	r3
 800c09c:	bd70      	pop	{r4, r5, r6, pc}
 800c09e:	bf00      	nop
 800c0a0:	24000014 	.word	0x24000014

0800c0a4 <__libc_init_array>:
 800c0a4:	b570      	push	{r4, r5, r6, lr}
 800c0a6:	4d0d      	ldr	r5, [pc, #52]	@ (800c0dc <__libc_init_array+0x38>)
 800c0a8:	4c0d      	ldr	r4, [pc, #52]	@ (800c0e0 <__libc_init_array+0x3c>)
 800c0aa:	1b64      	subs	r4, r4, r5
 800c0ac:	10a4      	asrs	r4, r4, #2
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	42a6      	cmp	r6, r4
 800c0b2:	d109      	bne.n	800c0c8 <__libc_init_array+0x24>
 800c0b4:	4d0b      	ldr	r5, [pc, #44]	@ (800c0e4 <__libc_init_array+0x40>)
 800c0b6:	4c0c      	ldr	r4, [pc, #48]	@ (800c0e8 <__libc_init_array+0x44>)
 800c0b8:	f000 f870 	bl	800c19c <_init>
 800c0bc:	1b64      	subs	r4, r4, r5
 800c0be:	10a4      	asrs	r4, r4, #2
 800c0c0:	2600      	movs	r6, #0
 800c0c2:	42a6      	cmp	r6, r4
 800c0c4:	d105      	bne.n	800c0d2 <__libc_init_array+0x2e>
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0cc:	4798      	blx	r3
 800c0ce:	3601      	adds	r6, #1
 800c0d0:	e7ee      	b.n	800c0b0 <__libc_init_array+0xc>
 800c0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0d6:	4798      	blx	r3
 800c0d8:	3601      	adds	r6, #1
 800c0da:	e7f2      	b.n	800c0c2 <__libc_init_array+0x1e>
 800c0dc:	0800c254 	.word	0x0800c254
 800c0e0:	0800c254 	.word	0x0800c254
 800c0e4:	0800c254 	.word	0x0800c254
 800c0e8:	0800c258 	.word	0x0800c258

0800c0ec <__retarget_lock_acquire_recursive>:
 800c0ec:	4770      	bx	lr

0800c0ee <__retarget_lock_release_recursive>:
 800c0ee:	4770      	bx	lr

0800c0f0 <_free_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	d041      	beq.n	800c17c <_free_r+0x8c>
 800c0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0fc:	1f0c      	subs	r4, r1, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	bfb8      	it	lt
 800c102:	18e4      	addlt	r4, r4, r3
 800c104:	f000 f83e 	bl	800c184 <__malloc_lock>
 800c108:	4a1d      	ldr	r2, [pc, #116]	@ (800c180 <_free_r+0x90>)
 800c10a:	6813      	ldr	r3, [r2, #0]
 800c10c:	b933      	cbnz	r3, 800c11c <_free_r+0x2c>
 800c10e:	6063      	str	r3, [r4, #4]
 800c110:	6014      	str	r4, [r2, #0]
 800c112:	4628      	mov	r0, r5
 800c114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c118:	f000 b83a 	b.w	800c190 <__malloc_unlock>
 800c11c:	42a3      	cmp	r3, r4
 800c11e:	d908      	bls.n	800c132 <_free_r+0x42>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	1821      	adds	r1, r4, r0
 800c124:	428b      	cmp	r3, r1
 800c126:	bf01      	itttt	eq
 800c128:	6819      	ldreq	r1, [r3, #0]
 800c12a:	685b      	ldreq	r3, [r3, #4]
 800c12c:	1809      	addeq	r1, r1, r0
 800c12e:	6021      	streq	r1, [r4, #0]
 800c130:	e7ed      	b.n	800c10e <_free_r+0x1e>
 800c132:	461a      	mov	r2, r3
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	b10b      	cbz	r3, 800c13c <_free_r+0x4c>
 800c138:	42a3      	cmp	r3, r4
 800c13a:	d9fa      	bls.n	800c132 <_free_r+0x42>
 800c13c:	6811      	ldr	r1, [r2, #0]
 800c13e:	1850      	adds	r0, r2, r1
 800c140:	42a0      	cmp	r0, r4
 800c142:	d10b      	bne.n	800c15c <_free_r+0x6c>
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	4401      	add	r1, r0
 800c148:	1850      	adds	r0, r2, r1
 800c14a:	4283      	cmp	r3, r0
 800c14c:	6011      	str	r1, [r2, #0]
 800c14e:	d1e0      	bne.n	800c112 <_free_r+0x22>
 800c150:	6818      	ldr	r0, [r3, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	6053      	str	r3, [r2, #4]
 800c156:	4408      	add	r0, r1
 800c158:	6010      	str	r0, [r2, #0]
 800c15a:	e7da      	b.n	800c112 <_free_r+0x22>
 800c15c:	d902      	bls.n	800c164 <_free_r+0x74>
 800c15e:	230c      	movs	r3, #12
 800c160:	602b      	str	r3, [r5, #0]
 800c162:	e7d6      	b.n	800c112 <_free_r+0x22>
 800c164:	6820      	ldr	r0, [r4, #0]
 800c166:	1821      	adds	r1, r4, r0
 800c168:	428b      	cmp	r3, r1
 800c16a:	bf04      	itt	eq
 800c16c:	6819      	ldreq	r1, [r3, #0]
 800c16e:	685b      	ldreq	r3, [r3, #4]
 800c170:	6063      	str	r3, [r4, #4]
 800c172:	bf04      	itt	eq
 800c174:	1809      	addeq	r1, r1, r0
 800c176:	6021      	streq	r1, [r4, #0]
 800c178:	6054      	str	r4, [r2, #4]
 800c17a:	e7ca      	b.n	800c112 <_free_r+0x22>
 800c17c:	bd38      	pop	{r3, r4, r5, pc}
 800c17e:	bf00      	nop
 800c180:	24004770 	.word	0x24004770

0800c184 <__malloc_lock>:
 800c184:	4801      	ldr	r0, [pc, #4]	@ (800c18c <__malloc_lock+0x8>)
 800c186:	f7ff bfb1 	b.w	800c0ec <__retarget_lock_acquire_recursive>
 800c18a:	bf00      	nop
 800c18c:	2400476c 	.word	0x2400476c

0800c190 <__malloc_unlock>:
 800c190:	4801      	ldr	r0, [pc, #4]	@ (800c198 <__malloc_unlock+0x8>)
 800c192:	f7ff bfac 	b.w	800c0ee <__retarget_lock_release_recursive>
 800c196:	bf00      	nop
 800c198:	2400476c 	.word	0x2400476c

0800c19c <_init>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	bf00      	nop
 800c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a2:	bc08      	pop	{r3}
 800c1a4:	469e      	mov	lr, r3
 800c1a6:	4770      	bx	lr

0800c1a8 <_fini>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr
