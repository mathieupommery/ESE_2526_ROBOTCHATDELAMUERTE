
TEST_LORENZO_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800e764  0800e764  0000f764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e844  0800e844  0000f844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e84c  0800e84c  0000f84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e850  0800e850  0000f850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  0800e854  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005f20  24000158  0800e9ac  00010158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006078  0800e9ac  00011078  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029af5  00000000  00000000  00010186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a4b  00000000  00000000  00039c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ee0  00000000  00000000  0003f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017bd  00000000  00000000  000415a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000091dc  00000000  00000000  00042d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c640  00000000  00000000  0004bf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174fa0  00000000  00000000  00078581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ed521  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083fc  00000000  00000000  001ed564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  001f5960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e74c 	.word	0x0800e74c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	0800e74c 	.word	0x0800e74c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <MX_DMA_Init+0x3c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_DMA_Init+0x3c>)
 8000624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	200b      	movs	r0, #11
 8000636:	f000 ff7f 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800063a:	200b      	movs	r0, #11
 800063c:	f000 ff96 	bl	800156c <HAL_NVIC_EnableIRQ>

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a06      	ldr	r2, [pc, #24]	@ (800067c <vApplicationGetIdleTaskMemory+0x30>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	2400017c 	.word	0x2400017c
 800067c:	2400021c 	.word	0x2400021c

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08e      	sub	sp, #56	@ 0x38
 8000684:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of maintask */
  osThreadDef(maintask, Startmaintask, osPriorityNormal, 0, 256);
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_FREERTOS_Init+0x58>)
 8000688:	f107 041c 	add.w	r4, r7, #28
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  maintaskHandle = osThreadCreate(osThread(maintask), NULL);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f00b ffe2 	bl	800c66a <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <MX_FREERTOS_Init+0x5c>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of lidarparse */
  osThreadDef(lidarparse, Startlidarparse, osPriorityIdle, 0, 500);
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_FREERTOS_Init+0x60>)
 80006ae:	463c      	mov	r4, r7
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lidarparseHandle = osThreadCreate(osThread(lidarparse), NULL);
 80006be:	463b      	mov	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00b ffd1 	bl	800c66a <osThreadCreate>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <MX_FREERTOS_Init+0x64>)
 80006cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006ce:	bf00      	nop
 80006d0:	3738      	adds	r7, #56	@ 0x38
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	0800e770 	.word	0x0800e770
 80006dc:	24000174 	.word	0x24000174
 80006e0:	0800e798 	.word	0x0800e798
 80006e4:	24000178 	.word	0x24000178

080006e8 <Startmaintask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmaintask */
void Startmaintask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006f0:	f00d fa30 	bl	800db54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN Startmaintask */
  /* Infinite loop */
  for(;;)
  {

	 HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
 80006f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <Startmaintask+0x20>)
 80006fa:	f002 fe48 	bl	800338e <HAL_GPIO_TogglePin>
    osDelay(100);
 80006fe:	2064      	movs	r0, #100	@ 0x64
 8000700:	f00b ffff 	bl	800c702 <osDelay>
	 HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
 8000704:	bf00      	nop
 8000706:	e7f5      	b.n	80006f4 <Startmaintask+0xc>
 8000708:	58020c00 	.word	0x58020c00

0800070c <Startlidarparse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlidarparse */
void Startlidarparse(void const * argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  {
//	  while (ylidar_read_index!=ylidar_write_index){
//		  ylidar_fsm();
//      }
//	  trackObject();
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_11);
 8000714:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <Startlidarparse+0x20>)
 800071a:	f002 fe38 	bl	800338e <HAL_GPIO_TogglePin>

	  osDelay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000722:	f00b ffee 	bl	800c702 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_11);
 8000726:	bf00      	nop
 8000728:	e7f4      	b.n	8000714 <Startlidarparse+0x8>
 800072a:	bf00      	nop
 800072c:	58020c00 	.word	0x58020c00

08000730 <MX_GPIO_Init>:
     PB11   ------> I2C2_SDA
     PD8   ------> USART3_TX
     PD12   ------> I2C4_SCL
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4bbd      	ldr	r3, [pc, #756]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074c:	4abb      	ldr	r2, [pc, #748]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000756:	4bb9      	ldr	r3, [pc, #740]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4bb5      	ldr	r3, [pc, #724]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076a:	4ab4      	ldr	r2, [pc, #720]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000774:	4bb1      	ldr	r3, [pc, #708]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 8000776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4bae      	ldr	r3, [pc, #696]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	4aac      	ldr	r2, [pc, #688]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000792:	4baa      	ldr	r3, [pc, #680]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a0:	4ba6      	ldr	r3, [pc, #664]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4aa5      	ldr	r2, [pc, #660]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4ba2      	ldr	r3, [pc, #648]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b9f      	ldr	r3, [pc, #636]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	4a9d      	ldr	r2, [pc, #628]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ce:	4b9b      	ldr	r3, [pc, #620]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007dc:	4b97      	ldr	r3, [pc, #604]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	4a96      	ldr	r2, [pc, #600]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ec:	4b93      	ldr	r3, [pc, #588]	@ (8000a3c <MX_GPIO_Init+0x30c>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_CS_GPIO_Port, ACCEL_CS_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	4890      	ldr	r0, [pc, #576]	@ (8000a40 <MX_GPIO_Init+0x310>)
 8000800:	f002 fdac 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800080a:	488e      	ldr	r0, [pc, #568]	@ (8000a44 <MX_GPIO_Init+0x314>)
 800080c:	f002 fda6 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000810:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000822:	2304      	movs	r3, #4
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4886      	ldr	r0, [pc, #536]	@ (8000a48 <MX_GPIO_Init+0x318>)
 800082e:	f002 fbe5 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000832:	2380      	movs	r3, #128	@ 0x80
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000842:	2302      	movs	r3, #2
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	487e      	ldr	r0, [pc, #504]	@ (8000a48 <MX_GPIO_Init+0x318>)
 800084e:	f002 fbd5 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8000852:	2318      	movs	r3, #24
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000862:	2305      	movs	r3, #5
 8000864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4876      	ldr	r0, [pc, #472]	@ (8000a48 <MX_GPIO_Init+0x318>)
 800086e:	f002 fbc5 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000884:	2305      	movs	r3, #5
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	486f      	ldr	r0, [pc, #444]	@ (8000a4c <MX_GPIO_Init+0x31c>)
 8000890:	f002 fbb4 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1;
 8000894:	2313      	movs	r3, #19
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 80008a4:	2306      	movs	r3, #6
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4865      	ldr	r0, [pc, #404]	@ (8000a44 <MX_GPIO_Init+0x314>)
 80008b0:	f002 fba4 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ba:	2312      	movs	r3, #18
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008c6:	2304      	movs	r3, #4
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	485e      	ldr	r0, [pc, #376]	@ (8000a4c <MX_GPIO_Init+0x31c>)
 80008d2:	f002 fb93 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_MOT3_Pin */
  GPIO_InitStruct.Pin = GPIO_MOT3_Pin;
 80008d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_MOT3_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4857      	ldr	r0, [pc, #348]	@ (8000a4c <MX_GPIO_Init+0x31c>)
 80008ee:	f002 fb85 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin;
 80008f2:	2305      	movs	r3, #5
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	484e      	ldr	r0, [pc, #312]	@ (8000a40 <MX_GPIO_Init+0x310>)
 8000908:	f002 fb78 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800090c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000912:	2312      	movs	r3, #18
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800091e:	2304      	movs	r3, #4
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4845      	ldr	r0, [pc, #276]	@ (8000a40 <MX_GPIO_Init+0x310>)
 800092a:	f002 fb67 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800092e:	23c0      	movs	r3, #192	@ 0xc0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800093e:	2307      	movs	r3, #7
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	483d      	ldr	r0, [pc, #244]	@ (8000a40 <MX_GPIO_Init+0x310>)
 800094a:	f002 fb57 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4836      	ldr	r0, [pc, #216]	@ (8000a40 <MX_GPIO_Init+0x310>)
 8000966:	f002 fb49 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800096a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4830      	ldr	r0, [pc, #192]	@ (8000a44 <MX_GPIO_Init+0x314>)
 8000984:	f002 fb3a 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8000988:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800099a:	2304      	movs	r3, #4
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4828      	ldr	r0, [pc, #160]	@ (8000a48 <MX_GPIO_Init+0x318>)
 80009a6:	f002 fb29 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009aa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80009bc:	2307      	movs	r3, #7
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4822      	ldr	r0, [pc, #136]	@ (8000a50 <MX_GPIO_Init+0x320>)
 80009c8:	f002 fb18 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	2312      	movs	r3, #18
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009de:	2304      	movs	r3, #4
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4817      	ldr	r0, [pc, #92]	@ (8000a48 <MX_GPIO_Init+0x318>)
 80009ea:	f002 fb07 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80009ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a00:	2307      	movs	r3, #7
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480e      	ldr	r0, [pc, #56]	@ (8000a44 <MX_GPIO_Init+0x314>)
 8000a0c:	f002 faf6 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000a10:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000a22:	2304      	movs	r3, #4
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_GPIO_Init+0x314>)
 8000a2e:	f002 fae5 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
 8000a3a:	e00b      	b.n	8000a54 <MX_GPIO_Init+0x324>
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58020800 	.word	0x58020800
 8000a44:	58020c00 	.word	0x58020c00
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58020000 	.word	0x58020000
 8000a50:	58021000 	.word	0x58021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_GPIO_Init+0x344>)
 8000a68:	f002 fac8 	bl	8002ffc <HAL_GPIO_Init>

}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	@ 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58020400 	.word	0x58020400

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a7c:	f000 f88e 	bl	8000b9c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a80:	f000 fc16 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a84:	f000 f80e 	bl	8000aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a88:	f7ff fe52 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8c:	f7ff fdbe 	bl	800060c <MX_DMA_Init>
  MX_UART8_Init();
 8000a90:	f000 fafa 	bl	8001088 <MX_UART8_Init>
  MX_SPI4_Init();
 8000a94:	f000 f8c6 	bl	8000c24 <MX_SPI4_Init>
//  __HAL_DMA_ENABLE_IT(huart8.hdmarx,DMA_IT_HT);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a98:	f7ff fdf2 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a9c:	f00b fdde 	bl	800c65c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <main+0x28>

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09c      	sub	sp, #112	@ 0x70
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	224c      	movs	r2, #76	@ 0x4c
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00d fd68 	bl	800e588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2220      	movs	r2, #32
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00d fd62 	bl	800e588 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f003 ff1d 	bl	8004904 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <SystemClock_Config+0xf0>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a30      	ldr	r2, [pc, #192]	@ (8000b94 <SystemClock_Config+0xf0>)
 8000ad4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <SystemClock_Config+0xf0>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b98 <SystemClock_Config+0xf4>)
 8000ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b98 <SystemClock_Config+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000af0:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <SystemClock_Config+0xf4>)
 8000af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000afc:	bf00      	nop
 8000afe:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <SystemClock_Config+0xf0>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b0a:	d1f8      	bne.n	8000afe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2321      	movs	r3, #33	@ 0x21
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b16:	2301      	movs	r3, #1
 8000b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b26:	2378      	movs	r3, #120	@ 0x78
 8000b28:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b36:	230c      	movs	r3, #12
 8000b38:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 ff26 	bl	8004998 <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b52:	f000 f861 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	233f      	movs	r3, #63	@ 0x3f
 8000b58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b62:	2308      	movs	r3, #8
 8000b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b66:	2340      	movs	r3, #64	@ 0x40
 8000b68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b6a:	2340      	movs	r3, #64	@ 0x40
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b74:	2340      	movs	r3, #64	@ 0x40
 8000b76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 fb65 	bl	800524c <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b88:	f000 f846 	bl	8000c18 <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3770      	adds	r7, #112	@ 0x70
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024800 	.word	0x58024800
 8000b98:	58000400 	.word	0x58000400

08000b9c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bae:	f000 fceb 	bl	8001588 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bc2:	2387      	movs	r3, #135	@ 0x87
 8000bc4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bde:	463b      	mov	r3, r7
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fd09 	bl	80015f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000be6:	2004      	movs	r0, #4
 8000be8:	f000 fce6 	bl	80015b8 <HAL_MPU_Enable>

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c06:	f000 fb8f 	bl	8001328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010000 	.word	0x40010000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000c28:	4b28      	ldr	r3, [pc, #160]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c2a:	4a29      	ldr	r2, [pc, #164]	@ (8000cd0 <MX_SPI4_Init+0xac>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c34:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c36:	4b25      	ldr	r3, [pc, #148]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c3e:	2207      	movs	r2, #7
 8000c40:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c42:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c48:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c50:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c58:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c60:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c80:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c82:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <MX_SPI4_Init+0xa8>)
 8000cba:	f006 fcc1 	bl	8007640 <HAL_SPI_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8000cc4:	f7ff ffa8 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2400041c 	.word	0x2400041c
 8000cd0:	40013400 	.word	0x40013400

08000cd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0ba      	sub	sp, #232	@ 0xe8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	22c0      	movs	r2, #192	@ 0xc0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00d fc47 	bl	800e588 <memset>
  if(spiHandle->Instance==SPI4)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a26      	ldr	r2, [pc, #152]	@ (8000d98 <HAL_SPI_MspInit+0xc4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d144      	bne.n	8000d8e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000d04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 fe65 	bl	80059e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000d24:	f7ff ff78 	bl	8000c18 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_SPI_MspInit+0xc8>)
 8000d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d9c <HAL_SPI_MspInit+0xc8>)
 8000d30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_SPI_MspInit+0xc8>)
 8000d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_SPI_MspInit+0xc8>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a13      	ldr	r2, [pc, #76]	@ (8000d9c <HAL_SPI_MspInit+0xc8>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_SPI_MspInit+0xc8>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000d64:	2364      	movs	r3, #100	@ 0x64
 8000d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <HAL_SPI_MspInit+0xcc>)
 8000d8a:	f002 f937 	bl	8002ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000d8e:	bf00      	nop
 8000d90:	37e8      	adds	r7, #232	@ 0xe8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40013400 	.word	0x40013400
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	58021000 	.word	0x58021000

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_MspInit+0x38>)
 8000dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_MspInit+0x38>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dba:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_MspInit+0x38>)
 8000dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f06f 0001 	mvn.w	r0, #1
 8000dd0:	f000 fbb2 	bl	8001538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	58024400 	.word	0x58024400

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	@ 0x38
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d844      	bhi.n	8000e78 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	2019      	movs	r0, #25
 8000df4:	f000 fba0 	bl	8001538 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000df8:	2019      	movs	r0, #25
 8000dfa:	f000 fbb7 	bl	800156c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000dfe:	4a24      	ldr	r2, [pc, #144]	@ (8000e90 <HAL_InitTick+0xb0>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e04:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <HAL_InitTick+0xb4>)
 8000e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e0a:	4a22      	ldr	r2, [pc, #136]	@ (8000e94 <HAL_InitTick+0xb4>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <HAL_InitTick+0xb4>)
 8000e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fd99 	bl	8005964 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e32:	f004 fd81 	bl	8005938 <HAL_RCC_GetPCLK2Freq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e3e:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <HAL_InitTick+0xb8>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3b01      	subs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_InitTick+0xbc>)
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <HAL_InitTick+0xc0>)
 8000e4e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0xbc>)
 8000e52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e58:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_InitTick+0xbc>)
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e5c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_InitTick+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <HAL_InitTick+0xbc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e6a:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <HAL_InitTick+0xbc>)
 8000e6c:	f006 fd27 	bl	80078be <HAL_TIM_Base_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d107      	bne.n	8000e86 <HAL_InitTick+0xa6>
 8000e76:	e001      	b.n	8000e7c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e005      	b.n	8000e88 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e7c:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <HAL_InitTick+0xbc>)
 8000e7e:	f006 fd7f 	bl	8007980 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3738      	adds	r7, #56	@ 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	24000008 	.word	0x24000008
 8000e94:	58024400 	.word	0x58024400
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	240004a4 	.word	0x240004a4
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <DMA1_Stream0_IRQHandler+0x10>)
 8000ee2:	f000 ff25 	bl	8001d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	24000584 	.word	0x24000584

08000ef0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <TIM1_UP_IRQHandler+0x10>)
 8000ef6:	f006 fdbb 	bl	8007a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240004a4 	.word	0x240004a4

08000f04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <OTG_FS_IRQHandler+0x10>)
 8000f0a:	f002 fb9b 	bl	8003644 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24005834 	.word	0x24005834

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b43      	ldr	r3, [pc, #268]	@ (800102c <SystemInit+0x114>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a42      	ldr	r2, [pc, #264]	@ (800102c <SystemInit+0x114>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2c:	4b40      	ldr	r3, [pc, #256]	@ (8001030 <SystemInit+0x118>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	2b06      	cmp	r3, #6
 8000f36:	d807      	bhi.n	8000f48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f38:	4b3d      	ldr	r3, [pc, #244]	@ (8001030 <SystemInit+0x118>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 030f 	bic.w	r3, r3, #15
 8000f40:	4a3b      	ldr	r2, [pc, #236]	@ (8001030 <SystemInit+0x118>)
 8000f42:	f043 0307 	orr.w	r3, r3, #7
 8000f46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f48:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <SystemInit+0x11c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a39      	ldr	r2, [pc, #228]	@ (8001034 <SystemInit+0x11c>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <SystemInit+0x11c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <SystemInit+0x11c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4935      	ldr	r1, [pc, #212]	@ (8001034 <SystemInit+0x11c>)
 8000f60:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <SystemInit+0x120>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f66:	4b32      	ldr	r3, [pc, #200]	@ (8001030 <SystemInit+0x118>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f72:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <SystemInit+0x118>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 030f 	bic.w	r3, r3, #15
 8000f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001030 <SystemInit+0x118>)
 8000f7c:	f043 0307 	orr.w	r3, r3, #7
 8000f80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f82:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <SystemInit+0x11c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <SystemInit+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f8e:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <SystemInit+0x11c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <SystemInit+0x11c>)
 8000f96:	4a29      	ldr	r2, [pc, #164]	@ (800103c <SystemInit+0x124>)
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <SystemInit+0x11c>)
 8000f9c:	4a28      	ldr	r2, [pc, #160]	@ (8001040 <SystemInit+0x128>)
 8000f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <SystemInit+0x11c>)
 8000fa2:	4a28      	ldr	r2, [pc, #160]	@ (8001044 <SystemInit+0x12c>)
 8000fa4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <SystemInit+0x11c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <SystemInit+0x11c>)
 8000fae:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <SystemInit+0x12c>)
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <SystemInit+0x11c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <SystemInit+0x11c>)
 8000fba:	4a22      	ldr	r2, [pc, #136]	@ (8001044 <SystemInit+0x12c>)
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <SystemInit+0x11c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <SystemInit+0x11c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001034 <SystemInit+0x11c>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <SystemInit+0x11c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <SystemInit+0x130>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <SystemInit+0x134>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fe2:	d202      	bcs.n	8000fea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <SystemInit+0x138>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <SystemInit+0x11c>)
 8000fec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ff0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d113      	bne.n	8001020 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <SystemInit+0x11c>)
 8000ffa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <SystemInit+0x11c>)
 8001000:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001004:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <SystemInit+0x13c>)
 800100a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800100e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <SystemInit+0x11c>)
 8001012:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001016:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <SystemInit+0x11c>)
 8001018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800101c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	52002000 	.word	0x52002000
 8001034:	58024400 	.word	0x58024400
 8001038:	eaf6ed7f 	.word	0xeaf6ed7f
 800103c:	02020200 	.word	0x02020200
 8001040:	01ff0000 	.word	0x01ff0000
 8001044:	01010280 	.word	0x01010280
 8001048:	5c001000 	.word	0x5c001000
 800104c:	ffff0000 	.word	0xffff0000
 8001050:	51008108 	.word	0x51008108
 8001054:	52004000 	.word	0x52004000

08001058 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <ExitRun0Mode+0x2c>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <ExitRun0Mode+0x2c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001068:	bf00      	nop
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <ExitRun0Mode+0x2c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f9      	beq.n	800106a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	58024800 	.word	0x58024800

08001088 <MX_UART8_Init>:
UART_HandleTypeDef huart8;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_UART8_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	@ (800111c <MX_UART8_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_UART8_Init+0x90>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_UART8_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_UART8_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_UART8_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_UART8_Init+0x90>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_UART8_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_UART8_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_UART8_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_UART8_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_UART8_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80010d0:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_UART8_Init+0x90>)
 80010d2:	f006 febb 	bl	8007e4c <HAL_UART_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80010dc:	f7ff fd9c 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_UART8_Init+0x90>)
 80010e4:	f007 fec3 	bl	8008e6e <HAL_UARTEx_SetTxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f7ff fd93 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	@ (8001118 <MX_UART8_Init+0x90>)
 80010f6:	f007 fef8 	bl	8008eea <HAL_UARTEx_SetRxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001100:	f7ff fd8a 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MX_UART8_Init+0x90>)
 8001106:	f007 fe79 	bl	8008dfc <HAL_UARTEx_DisableFifoMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001110:	f7ff fd82 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240004f0 	.word	0x240004f0
 800111c:	40007c00 	.word	0x40007c00

08001120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ba      	sub	sp, #232	@ 0xe8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	22c0      	movs	r2, #192	@ 0xc0
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f00d fa21 	bl	800e588 <memset>
  if(uartHandle->Instance==UART8)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a3e      	ldr	r2, [pc, #248]	@ (8001244 <HAL_UART_MspInit+0x124>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d174      	bne.n	800123a <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001150:	f04f 0202 	mov.w	r2, #2
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fc3e 	bl	80059e8 <HAL_RCCEx_PeriphCLKConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001172:	f7ff fd51 	bl	8000c18 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001176:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <HAL_UART_MspInit+0x128>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117c:	4a32      	ldr	r2, [pc, #200]	@ (8001248 <HAL_UART_MspInit+0x128>)
 800117e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001186:	4b30      	ldr	r3, [pc, #192]	@ (8001248 <HAL_UART_MspInit+0x128>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001194:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <HAL_UART_MspInit+0x128>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a2b      	ldr	r2, [pc, #172]	@ (8001248 <HAL_UART_MspInit+0x128>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <HAL_UART_MspInit+0x128>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80011ca:	2308      	movs	r3, #8
 80011cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011d4:	4619      	mov	r1, r3
 80011d6:	481d      	ldr	r0, [pc, #116]	@ (800124c <HAL_UART_MspInit+0x12c>)
 80011d8:	f001 ff10 	bl	8002ffc <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream0;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_UART_MspInit+0x130>)
 80011de:	4a1d      	ldr	r2, [pc, #116]	@ (8001254 <HAL_UART_MspInit+0x134>)
 80011e0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_UART_MspInit+0x130>)
 80011e4:	2251      	movs	r2, #81	@ 0x51
 80011e6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_UART_MspInit+0x130>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_UART_MspInit+0x130>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_UART_MspInit+0x130>)
 80011f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011fa:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_UART_MspInit+0x130>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_UART_MspInit+0x130>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_UART_MspInit+0x130>)
 800120a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800120e:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_UART_MspInit+0x130>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_UART_MspInit+0x130>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <HAL_UART_MspInit+0x130>)
 800121e:	f000 fa2b 	bl	8001678 <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001228:	f7ff fcf6 	bl	8000c18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_UART_MspInit+0x130>)
 8001230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_UART_MspInit+0x130>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	37e8      	adds	r7, #232	@ 0xe8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40007c00 	.word	0x40007c00
 8001248:	58024400 	.word	0x58024400
 800124c:	58021000 	.word	0x58021000
 8001250:	24000584 	.word	0x24000584
 8001254:	40020010 	.word	0x40020010

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001294 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800125c:	f7ff fefc 	bl	8001058 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff fe5a 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f00d f9e3 	bl	800e654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fbf3 	bl	8000a78 <main>
  bx  lr
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001298:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800129c:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80012a0:	0800e854 	.word	0x0800e854
  ldr r2, =_sbss
 80012a4:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80012a8:	24006078 	.word	0x24006078

080012ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC3_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f933 	bl	8001522 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012bc:	f004 f97c 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_Init+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4913      	ldr	r1, [pc, #76]	@ (800131c <HAL_Init+0x6c>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <HAL_Init+0x6c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_Init+0x70>)
 80012f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_Init+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	200f      	movs	r0, #15
 80012fc:	f7ff fd70 	bl	8000de0 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e002      	b.n	8001310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fd4b 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	0800e804 	.word	0x0800e804
 8001320:	24000004 	.word	0x24000004
 8001324:	24000000 	.word	0x24000000

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	@ (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2400000c 	.word	0x2400000c
 800134c:	240005fc 	.word	0x240005fc

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	240005fc 	.word	0x240005fc

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2400000c 	.word	0x2400000c

080013b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_GetREVID+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0c1b      	lsrs	r3, r3, #16
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	5c001000 	.word	0x5c001000

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	05fa0000 	.word	0x05fa0000

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	@ (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	@ 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff4c 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001546:	f7ff ff63 	bl	8001410 <__NVIC_GetPriorityGrouping>
 800154a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	6978      	ldr	r0, [r7, #20]
 8001552:	f7ff ffb3 	bl	80014bc <NVIC_EncodePriority>
 8001556:	4602      	mov	r2, r0
 8001558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff82 	bl	8001468 <__NVIC_SetPriority>
}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff56 	bl	800142c <__NVIC_EnableIRQ>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800158c:	f3bf 8f5f 	dmb	sy
}
 8001590:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_MPU_Disable+0x28>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <HAL_MPU_Disable+0x28>)
 8001598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <HAL_MPU_Disable+0x2c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	e000ed90 	.word	0xe000ed90

080015b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015c0:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <HAL_MPU_Enable+0x38>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_MPU_Enable+0x3c>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <HAL_MPU_Enable+0x3c>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015d6:	f3bf 8f4f 	dsb	sy
}
 80015da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015dc:	f3bf 8f6f 	isb	sy
}
 80015e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed90 	.word	0xe000ed90
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	785a      	ldrb	r2, [r3, #1]
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_MPU_ConfigRegion+0x7c>)
 8001606:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <HAL_MPU_ConfigRegion+0x7c>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <HAL_MPU_ConfigRegion+0x7c>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001614:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_MPU_ConfigRegion+0x7c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7b1b      	ldrb	r3, [r3, #12]
 8001620:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7adb      	ldrb	r3, [r3, #11]
 8001626:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7a9b      	ldrb	r3, [r3, #10]
 800162e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7b5b      	ldrb	r3, [r3, #13]
 8001636:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001638:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7b9b      	ldrb	r3, [r3, #14]
 800163e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7bdb      	ldrb	r3, [r3, #15]
 8001646:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a5b      	ldrb	r3, [r3, #9]
 800164e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7a1b      	ldrb	r3, [r3, #8]
 8001656:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001658:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001662:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001664:	6113      	str	r3, [r2, #16]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed90 	.word	0xe000ed90

08001678 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fe66 	bl	8001350 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e316      	b.n	8001cbe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a66      	ldr	r2, [pc, #408]	@ (8001830 <HAL_DMA_Init+0x1b8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d04a      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_DMA_Init+0x1bc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d045      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a63      	ldr	r2, [pc, #396]	@ (8001838 <HAL_DMA_Init+0x1c0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d040      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a62      	ldr	r2, [pc, #392]	@ (800183c <HAL_DMA_Init+0x1c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d03b      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a60      	ldr	r2, [pc, #384]	@ (8001840 <HAL_DMA_Init+0x1c8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d036      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001844 <HAL_DMA_Init+0x1cc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d031      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001848 <HAL_DMA_Init+0x1d0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d02c      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5c      	ldr	r2, [pc, #368]	@ (800184c <HAL_DMA_Init+0x1d4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d027      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001850 <HAL_DMA_Init+0x1d8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d022      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a59      	ldr	r2, [pc, #356]	@ (8001854 <HAL_DMA_Init+0x1dc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d01d      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a57      	ldr	r2, [pc, #348]	@ (8001858 <HAL_DMA_Init+0x1e0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d018      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a56      	ldr	r2, [pc, #344]	@ (800185c <HAL_DMA_Init+0x1e4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a54      	ldr	r2, [pc, #336]	@ (8001860 <HAL_DMA_Init+0x1e8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00e      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a53      	ldr	r2, [pc, #332]	@ (8001864 <HAL_DMA_Init+0x1ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d009      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a51      	ldr	r2, [pc, #324]	@ (8001868 <HAL_DMA_Init+0x1f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d004      	beq.n	8001730 <HAL_DMA_Init+0xb8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a50      	ldr	r2, [pc, #320]	@ (800186c <HAL_DMA_Init+0x1f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_DMA_Init+0xbc>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_DMA_Init+0xbe>
 8001734:	2300      	movs	r3, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 813b 	beq.w	80019b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a37      	ldr	r2, [pc, #220]	@ (8001830 <HAL_DMA_Init+0x1b8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d04a      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a36      	ldr	r2, [pc, #216]	@ (8001834 <HAL_DMA_Init+0x1bc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d045      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_DMA_Init+0x1c0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d040      	beq.n	80017ec <HAL_DMA_Init+0x174>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a33      	ldr	r2, [pc, #204]	@ (800183c <HAL_DMA_Init+0x1c4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d03b      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_DMA_Init+0x1c8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d036      	beq.n	80017ec <HAL_DMA_Init+0x174>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a30      	ldr	r2, [pc, #192]	@ (8001844 <HAL_DMA_Init+0x1cc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d031      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2e      	ldr	r2, [pc, #184]	@ (8001848 <HAL_DMA_Init+0x1d0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d02c      	beq.n	80017ec <HAL_DMA_Init+0x174>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2d      	ldr	r2, [pc, #180]	@ (800184c <HAL_DMA_Init+0x1d4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d027      	beq.n	80017ec <HAL_DMA_Init+0x174>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001850 <HAL_DMA_Init+0x1d8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d022      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001854 <HAL_DMA_Init+0x1dc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d01d      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <HAL_DMA_Init+0x1e0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d018      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a27      	ldr	r2, [pc, #156]	@ (800185c <HAL_DMA_Init+0x1e4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d013      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <HAL_DMA_Init+0x1e8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00e      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <HAL_DMA_Init+0x1ec>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d009      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_DMA_Init+0x1f0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d004      	beq.n	80017ec <HAL_DMA_Init+0x174>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	@ (800186c <HAL_DMA_Init+0x1f4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d108      	bne.n	80017fe <HAL_DMA_Init+0x186>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e007      	b.n	800180e <HAL_DMA_Init+0x196>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800180e:	e02f      	b.n	8001870 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001810:	f7ff fd9e 	bl	8001350 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b05      	cmp	r3, #5
 800181c:	d928      	bls.n	8001870 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e246      	b.n	8001cbe <HAL_DMA_Init+0x646>
 8001830:	40020010 	.word	0x40020010
 8001834:	40020028 	.word	0x40020028
 8001838:	40020040 	.word	0x40020040
 800183c:	40020058 	.word	0x40020058
 8001840:	40020070 	.word	0x40020070
 8001844:	40020088 	.word	0x40020088
 8001848:	400200a0 	.word	0x400200a0
 800184c:	400200b8 	.word	0x400200b8
 8001850:	40020410 	.word	0x40020410
 8001854:	40020428 	.word	0x40020428
 8001858:	40020440 	.word	0x40020440
 800185c:	40020458 	.word	0x40020458
 8001860:	40020470 	.word	0x40020470
 8001864:	40020488 	.word	0x40020488
 8001868:	400204a0 	.word	0x400204a0
 800186c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1c8      	bne.n	8001810 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4b83      	ldr	r3, [pc, #524]	@ (8001a98 <HAL_DMA_Init+0x420>)
 800188a:	4013      	ands	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001896:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	4313      	orrs	r3, r2
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018d4:	4b71      	ldr	r3, [pc, #452]	@ (8001a9c <HAL_DMA_Init+0x424>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b71      	ldr	r3, [pc, #452]	@ (8001aa0 <HAL_DMA_Init+0x428>)
 80018da:	4013      	ands	r3, r2
 80018dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e0:	d328      	bcc.n	8001934 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b28      	cmp	r3, #40	@ 0x28
 80018e8:	d903      	bls.n	80018f2 <HAL_DMA_Init+0x27a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80018f0:	d917      	bls.n	8001922 <HAL_DMA_Init+0x2aa>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80018f8:	d903      	bls.n	8001902 <HAL_DMA_Init+0x28a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b42      	cmp	r3, #66	@ 0x42
 8001900:	d90f      	bls.n	8001922 <HAL_DMA_Init+0x2aa>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b46      	cmp	r3, #70	@ 0x46
 8001908:	d903      	bls.n	8001912 <HAL_DMA_Init+0x29a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b48      	cmp	r3, #72	@ 0x48
 8001910:	d907      	bls.n	8001922 <HAL_DMA_Init+0x2aa>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b4e      	cmp	r3, #78	@ 0x4e
 8001918:	d905      	bls.n	8001926 <HAL_DMA_Init+0x2ae>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b52      	cmp	r3, #82	@ 0x52
 8001920:	d801      	bhi.n	8001926 <HAL_DMA_Init+0x2ae>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_DMA_Init+0x2b0>
 8001926:	2300      	movs	r3, #0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001932:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f023 0307 	bic.w	r3, r3, #7
 800194a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	2b04      	cmp	r3, #4
 800195c:	d117      	bne.n	800198e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00e      	beq.n	800198e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f001 f9b9 	bl	8002ce8 <DMA_CheckFifoParam>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2240      	movs	r2, #64	@ 0x40
 8001980:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e197      	b.n	8001cbe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f001 f8f4 	bl	8002b84 <DMA_CalcBaseAndBitshift>
 800199c:	4603      	mov	r3, r0
 800199e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	223f      	movs	r2, #63	@ 0x3f
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	e0cd      	b.n	8001b4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa4 <HAL_DMA_Init+0x42c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d022      	beq.n	8001a02 <HAL_DMA_Init+0x38a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a39      	ldr	r2, [pc, #228]	@ (8001aa8 <HAL_DMA_Init+0x430>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_Init+0x38a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a38      	ldr	r2, [pc, #224]	@ (8001aac <HAL_DMA_Init+0x434>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d018      	beq.n	8001a02 <HAL_DMA_Init+0x38a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a36      	ldr	r2, [pc, #216]	@ (8001ab0 <HAL_DMA_Init+0x438>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_DMA_Init+0x38a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a35      	ldr	r2, [pc, #212]	@ (8001ab4 <HAL_DMA_Init+0x43c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00e      	beq.n	8001a02 <HAL_DMA_Init+0x38a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a33      	ldr	r2, [pc, #204]	@ (8001ab8 <HAL_DMA_Init+0x440>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d009      	beq.n	8001a02 <HAL_DMA_Init+0x38a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a32      	ldr	r2, [pc, #200]	@ (8001abc <HAL_DMA_Init+0x444>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d004      	beq.n	8001a02 <HAL_DMA_Init+0x38a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a30      	ldr	r2, [pc, #192]	@ (8001ac0 <HAL_DMA_Init+0x448>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Init+0x38e>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_DMA_Init+0x390>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8097 	beq.w	8001b3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <HAL_DMA_Init+0x42c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d021      	beq.n	8001a5c <HAL_DMA_Init+0x3e4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <HAL_DMA_Init+0x430>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01c      	beq.n	8001a5c <HAL_DMA_Init+0x3e4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a21      	ldr	r2, [pc, #132]	@ (8001aac <HAL_DMA_Init+0x434>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d017      	beq.n	8001a5c <HAL_DMA_Init+0x3e4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab0 <HAL_DMA_Init+0x438>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d012      	beq.n	8001a5c <HAL_DMA_Init+0x3e4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab4 <HAL_DMA_Init+0x43c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_DMA_Init+0x3e4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <HAL_DMA_Init+0x440>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d008      	beq.n	8001a5c <HAL_DMA_Init+0x3e4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001abc <HAL_DMA_Init+0x444>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_DMA_Init+0x3e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HAL_DMA_Init+0x448>)
 8001a5a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <HAL_DMA_Init+0x44c>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b40      	cmp	r3, #64	@ 0x40
 8001a82:	d021      	beq.n	8001ac8 <HAL_DMA_Init+0x450>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b80      	cmp	r3, #128	@ 0x80
 8001a8a:	d102      	bne.n	8001a92 <HAL_DMA_Init+0x41a>
 8001a8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a90:	e01b      	b.n	8001aca <HAL_DMA_Init+0x452>
 8001a92:	2300      	movs	r3, #0
 8001a94:	e019      	b.n	8001aca <HAL_DMA_Init+0x452>
 8001a96:	bf00      	nop
 8001a98:	fe10803f 	.word	0xfe10803f
 8001a9c:	5c001000 	.word	0x5c001000
 8001aa0:	ffff0000 	.word	0xffff0000
 8001aa4:	58025408 	.word	0x58025408
 8001aa8:	5802541c 	.word	0x5802541c
 8001aac:	58025430 	.word	0x58025430
 8001ab0:	58025444 	.word	0x58025444
 8001ab4:	58025458 	.word	0x58025458
 8001ab8:	5802546c 	.word	0x5802546c
 8001abc:	58025480 	.word	0x58025480
 8001ac0:	58025494 	.word	0x58025494
 8001ac4:	fffe000f 	.word	0xfffe000f
 8001ac8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68d2      	ldr	r2, [r2, #12]
 8001ace:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ae0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ae8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001af0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001af8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc8 <HAL_DMA_Init+0x650>)
 8001b10:	4413      	add	r3, r2
 8001b12:	4a6e      	ldr	r2, [pc, #440]	@ (8001ccc <HAL_DMA_Init+0x654>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	009a      	lsls	r2, r3, #2
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f001 f82f 	bl	8002b84 <DMA_CalcBaseAndBitshift>
 8001b26:	4603      	mov	r3, r0
 8001b28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2201      	movs	r2, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	e008      	b.n	8001b4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2203      	movs	r2, #3
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0b7      	b.n	8001cbe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd0 <HAL_DMA_Init+0x658>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d072      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd4 <HAL_DMA_Init+0x65c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d06d      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd8 <HAL_DMA_Init+0x660>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d068      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a5a      	ldr	r2, [pc, #360]	@ (8001cdc <HAL_DMA_Init+0x664>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d063      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a59      	ldr	r2, [pc, #356]	@ (8001ce0 <HAL_DMA_Init+0x668>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d05e      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a57      	ldr	r2, [pc, #348]	@ (8001ce4 <HAL_DMA_Init+0x66c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d059      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a56      	ldr	r2, [pc, #344]	@ (8001ce8 <HAL_DMA_Init+0x670>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d054      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a54      	ldr	r2, [pc, #336]	@ (8001cec <HAL_DMA_Init+0x674>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d04f      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a53      	ldr	r2, [pc, #332]	@ (8001cf0 <HAL_DMA_Init+0x678>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d04a      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a51      	ldr	r2, [pc, #324]	@ (8001cf4 <HAL_DMA_Init+0x67c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d045      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a50      	ldr	r2, [pc, #320]	@ (8001cf8 <HAL_DMA_Init+0x680>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d040      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cfc <HAL_DMA_Init+0x684>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d03b      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a4d      	ldr	r2, [pc, #308]	@ (8001d00 <HAL_DMA_Init+0x688>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d036      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8001d04 <HAL_DMA_Init+0x68c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d031      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a4a      	ldr	r2, [pc, #296]	@ (8001d08 <HAL_DMA_Init+0x690>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d02c      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a48      	ldr	r2, [pc, #288]	@ (8001d0c <HAL_DMA_Init+0x694>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d027      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a47      	ldr	r2, [pc, #284]	@ (8001d10 <HAL_DMA_Init+0x698>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d022      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a45      	ldr	r2, [pc, #276]	@ (8001d14 <HAL_DMA_Init+0x69c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01d      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a44      	ldr	r2, [pc, #272]	@ (8001d18 <HAL_DMA_Init+0x6a0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d018      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a42      	ldr	r2, [pc, #264]	@ (8001d1c <HAL_DMA_Init+0x6a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a41      	ldr	r2, [pc, #260]	@ (8001d20 <HAL_DMA_Init+0x6a8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00e      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a3f      	ldr	r2, [pc, #252]	@ (8001d24 <HAL_DMA_Init+0x6ac>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d009      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d28 <HAL_DMA_Init+0x6b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d004      	beq.n	8001c3e <HAL_DMA_Init+0x5c6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3c      	ldr	r2, [pc, #240]	@ (8001d2c <HAL_DMA_Init+0x6b4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_DMA_Init+0x5ca>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_DMA_Init+0x5cc>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d032      	beq.n	8001cae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f001 f8c9 	bl	8002de0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b80      	cmp	r3, #128	@ 0x80
 8001c54:	d102      	bne.n	8001c5c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d010      	beq.n	8001c9c <HAL_DMA_Init+0x624>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d80c      	bhi.n	8001c9c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f001 f946 	bl	8002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	e008      	b.n	8001cae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	a7fdabf8 	.word	0xa7fdabf8
 8001ccc:	cccccccd 	.word	0xcccccccd
 8001cd0:	40020010 	.word	0x40020010
 8001cd4:	40020028 	.word	0x40020028
 8001cd8:	40020040 	.word	0x40020040
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	40020070 	.word	0x40020070
 8001ce4:	40020088 	.word	0x40020088
 8001ce8:	400200a0 	.word	0x400200a0
 8001cec:	400200b8 	.word	0x400200b8
 8001cf0:	40020410 	.word	0x40020410
 8001cf4:	40020428 	.word	0x40020428
 8001cf8:	40020440 	.word	0x40020440
 8001cfc:	40020458 	.word	0x40020458
 8001d00:	40020470 	.word	0x40020470
 8001d04:	40020488 	.word	0x40020488
 8001d08:	400204a0 	.word	0x400204a0
 8001d0c:	400204b8 	.word	0x400204b8
 8001d10:	58025408 	.word	0x58025408
 8001d14:	5802541c 	.word	0x5802541c
 8001d18:	58025430 	.word	0x58025430
 8001d1c:	58025444 	.word	0x58025444
 8001d20:	58025458 	.word	0x58025458
 8001d24:	5802546c 	.word	0x5802546c
 8001d28:	58025480 	.word	0x58025480
 8001d2c:	58025494 	.word	0x58025494

08001d30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d3c:	4b67      	ldr	r3, [pc, #412]	@ (8001edc <HAL_DMA_IRQHandler+0x1ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	@ (8001ee0 <HAL_DMA_IRQHandler+0x1b0>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0a9b      	lsrs	r3, r3, #10
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5f      	ldr	r2, [pc, #380]	@ (8001ee4 <HAL_DMA_IRQHandler+0x1b4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d04a      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee8 <HAL_DMA_IRQHandler+0x1b8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d045      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001eec <HAL_DMA_IRQHandler+0x1bc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d040      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef0 <HAL_DMA_IRQHandler+0x1c0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d03b      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a59      	ldr	r2, [pc, #356]	@ (8001ef4 <HAL_DMA_IRQHandler+0x1c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d036      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a57      	ldr	r2, [pc, #348]	@ (8001ef8 <HAL_DMA_IRQHandler+0x1c8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d031      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a56      	ldr	r2, [pc, #344]	@ (8001efc <HAL_DMA_IRQHandler+0x1cc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d02c      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a54      	ldr	r2, [pc, #336]	@ (8001f00 <HAL_DMA_IRQHandler+0x1d0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d027      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a53      	ldr	r2, [pc, #332]	@ (8001f04 <HAL_DMA_IRQHandler+0x1d4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a51      	ldr	r2, [pc, #324]	@ (8001f08 <HAL_DMA_IRQHandler+0x1d8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01d      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a50      	ldr	r2, [pc, #320]	@ (8001f0c <HAL_DMA_IRQHandler+0x1dc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d018      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <HAL_DMA_IRQHandler+0x1e0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_DMA_IRQHandler+0x1e4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00e      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	@ (8001f18 <HAL_DMA_IRQHandler+0x1e8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a4a      	ldr	r2, [pc, #296]	@ (8001f1c <HAL_DMA_IRQHandler+0x1ec>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d004      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	@ (8001f20 <HAL_DMA_IRQHandler+0x1f0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_DMA_IRQHandler+0xd6>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_DMA_IRQHandler+0xd8>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 842b 	beq.w	8002664 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2208      	movs	r2, #8
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80a2 	beq.w	8001f68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee4 <HAL_DMA_IRQHandler+0x1b4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d04a      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee8 <HAL_DMA_IRQHandler+0x1b8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d045      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001eec <HAL_DMA_IRQHandler+0x1bc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d040      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef0 <HAL_DMA_IRQHandler+0x1c0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d03b      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a28      	ldr	r2, [pc, #160]	@ (8001ef4 <HAL_DMA_IRQHandler+0x1c4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d036      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a27      	ldr	r2, [pc, #156]	@ (8001ef8 <HAL_DMA_IRQHandler+0x1c8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d031      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a25      	ldr	r2, [pc, #148]	@ (8001efc <HAL_DMA_IRQHandler+0x1cc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02c      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a24      	ldr	r2, [pc, #144]	@ (8001f00 <HAL_DMA_IRQHandler+0x1d0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d027      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <HAL_DMA_IRQHandler+0x1d4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <HAL_DMA_IRQHandler+0x1d8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01d      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_DMA_IRQHandler+0x1dc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_DMA_IRQHandler+0x1e0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_DMA_IRQHandler+0x1e4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <HAL_DMA_IRQHandler+0x1e8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	@ (8001f1c <HAL_DMA_IRQHandler+0x1ec>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x194>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <HAL_DMA_IRQHandler+0x1f0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d12f      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x1f4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	e02e      	b.n	8001f38 <HAL_DMA_IRQHandler+0x208>
 8001eda:	bf00      	nop
 8001edc:	24000000 	.word	0x24000000
 8001ee0:	1b4e81b5 	.word	0x1b4e81b5
 8001ee4:	40020010 	.word	0x40020010
 8001ee8:	40020028 	.word	0x40020028
 8001eec:	40020040 	.word	0x40020040
 8001ef0:	40020058 	.word	0x40020058
 8001ef4:	40020070 	.word	0x40020070
 8001ef8:	40020088 	.word	0x40020088
 8001efc:	400200a0 	.word	0x400200a0
 8001f00:	400200b8 	.word	0x400200b8
 8001f04:	40020410 	.word	0x40020410
 8001f08:	40020428 	.word	0x40020428
 8001f0c:	40020440 	.word	0x40020440
 8001f10:	40020458 	.word	0x40020458
 8001f14:	40020470 	.word	0x40020470
 8001f18:	40020488 	.word	0x40020488
 8001f1c:	400204a0 	.word	0x400204a0
 8001f20:	400204b8 	.word	0x400204b8
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2208      	movs	r2, #8
 8001f56:	409a      	lsls	r2, r3
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d06e      	beq.n	800205c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a69      	ldr	r2, [pc, #420]	@ (8002128 <HAL_DMA_IRQHandler+0x3f8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d04a      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a67      	ldr	r2, [pc, #412]	@ (800212c <HAL_DMA_IRQHandler+0x3fc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d045      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a66      	ldr	r2, [pc, #408]	@ (8002130 <HAL_DMA_IRQHandler+0x400>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d040      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a64      	ldr	r2, [pc, #400]	@ (8002134 <HAL_DMA_IRQHandler+0x404>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d03b      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a63      	ldr	r2, [pc, #396]	@ (8002138 <HAL_DMA_IRQHandler+0x408>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d036      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a61      	ldr	r2, [pc, #388]	@ (800213c <HAL_DMA_IRQHandler+0x40c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d031      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a60      	ldr	r2, [pc, #384]	@ (8002140 <HAL_DMA_IRQHandler+0x410>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d02c      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5e      	ldr	r2, [pc, #376]	@ (8002144 <HAL_DMA_IRQHandler+0x414>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d027      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_DMA_IRQHandler+0x418>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d022      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5b      	ldr	r2, [pc, #364]	@ (800214c <HAL_DMA_IRQHandler+0x41c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01d      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <HAL_DMA_IRQHandler+0x420>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d018      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	@ (8002154 <HAL_DMA_IRQHandler+0x424>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a57      	ldr	r2, [pc, #348]	@ (8002158 <HAL_DMA_IRQHandler+0x428>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00e      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a55      	ldr	r2, [pc, #340]	@ (800215c <HAL_DMA_IRQHandler+0x42c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a54      	ldr	r2, [pc, #336]	@ (8002160 <HAL_DMA_IRQHandler+0x430>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d004      	beq.n	800201e <HAL_DMA_IRQHandler+0x2ee>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a52      	ldr	r2, [pc, #328]	@ (8002164 <HAL_DMA_IRQHandler+0x434>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10a      	bne.n	8002034 <HAL_DMA_IRQHandler+0x304>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e003      	b.n	800203c <HAL_DMA_IRQHandler+0x30c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2204      	movs	r2, #4
 8002066:	409a      	lsls	r2, r3
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 808f 	beq.w	8002190 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2c      	ldr	r2, [pc, #176]	@ (8002128 <HAL_DMA_IRQHandler+0x3f8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d04a      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <HAL_DMA_IRQHandler+0x3fc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d045      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <HAL_DMA_IRQHandler+0x400>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d040      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <HAL_DMA_IRQHandler+0x404>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d03b      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <HAL_DMA_IRQHandler+0x408>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d036      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a24      	ldr	r2, [pc, #144]	@ (800213c <HAL_DMA_IRQHandler+0x40c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d031      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a23      	ldr	r2, [pc, #140]	@ (8002140 <HAL_DMA_IRQHandler+0x410>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d02c      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <HAL_DMA_IRQHandler+0x414>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d027      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a20      	ldr	r2, [pc, #128]	@ (8002148 <HAL_DMA_IRQHandler+0x418>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d022      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_DMA_IRQHandler+0x41c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01d      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <HAL_DMA_IRQHandler+0x420>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d018      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_DMA_IRQHandler+0x424>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002158 <HAL_DMA_IRQHandler+0x428>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00e      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a18      	ldr	r2, [pc, #96]	@ (800215c <HAL_DMA_IRQHandler+0x42c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d009      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a17      	ldr	r2, [pc, #92]	@ (8002160 <HAL_DMA_IRQHandler+0x430>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_DMA_IRQHandler+0x3e2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a15      	ldr	r2, [pc, #84]	@ (8002164 <HAL_DMA_IRQHandler+0x434>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12a      	bne.n	8002168 <HAL_DMA_IRQHandler+0x438>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e023      	b.n	8002170 <HAL_DMA_IRQHandler+0x440>
 8002128:	40020010 	.word	0x40020010
 800212c:	40020028 	.word	0x40020028
 8002130:	40020040 	.word	0x40020040
 8002134:	40020058 	.word	0x40020058
 8002138:	40020070 	.word	0x40020070
 800213c:	40020088 	.word	0x40020088
 8002140:	400200a0 	.word	0x400200a0
 8002144:	400200b8 	.word	0x400200b8
 8002148:	40020410 	.word	0x40020410
 800214c:	40020428 	.word	0x40020428
 8002150:	40020440 	.word	0x40020440
 8002154:	40020458 	.word	0x40020458
 8002158:	40020470 	.word	0x40020470
 800215c:	40020488 	.word	0x40020488
 8002160:	400204a0 	.word	0x400204a0
 8002164:	400204b8 	.word	0x400204b8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00d      	beq.n	8002190 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2204      	movs	r2, #4
 800217e:	409a      	lsls	r2, r3
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2210      	movs	r2, #16
 800219a:	409a      	lsls	r2, r3
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a6 	beq.w	80022f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a85      	ldr	r2, [pc, #532]	@ (80023c0 <HAL_DMA_IRQHandler+0x690>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a83      	ldr	r2, [pc, #524]	@ (80023c4 <HAL_DMA_IRQHandler+0x694>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a82      	ldr	r2, [pc, #520]	@ (80023c8 <HAL_DMA_IRQHandler+0x698>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a80      	ldr	r2, [pc, #512]	@ (80023cc <HAL_DMA_IRQHandler+0x69c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7f      	ldr	r2, [pc, #508]	@ (80023d0 <HAL_DMA_IRQHandler+0x6a0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7d      	ldr	r2, [pc, #500]	@ (80023d4 <HAL_DMA_IRQHandler+0x6a4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7c      	ldr	r2, [pc, #496]	@ (80023d8 <HAL_DMA_IRQHandler+0x6a8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7a      	ldr	r2, [pc, #488]	@ (80023dc <HAL_DMA_IRQHandler+0x6ac>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a79      	ldr	r2, [pc, #484]	@ (80023e0 <HAL_DMA_IRQHandler+0x6b0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a77      	ldr	r2, [pc, #476]	@ (80023e4 <HAL_DMA_IRQHandler+0x6b4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a76      	ldr	r2, [pc, #472]	@ (80023e8 <HAL_DMA_IRQHandler+0x6b8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a74      	ldr	r2, [pc, #464]	@ (80023ec <HAL_DMA_IRQHandler+0x6bc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a73      	ldr	r2, [pc, #460]	@ (80023f0 <HAL_DMA_IRQHandler+0x6c0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a71      	ldr	r2, [pc, #452]	@ (80023f4 <HAL_DMA_IRQHandler+0x6c4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a70      	ldr	r2, [pc, #448]	@ (80023f8 <HAL_DMA_IRQHandler+0x6c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_IRQHandler+0x516>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6e      	ldr	r2, [pc, #440]	@ (80023fc <HAL_DMA_IRQHandler+0x6cc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10a      	bne.n	800225c <HAL_DMA_IRQHandler+0x52c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e009      	b.n	8002270 <HAL_DMA_IRQHandler+0x540>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03e      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2210      	movs	r2, #16
 800227e:	409a      	lsls	r2, r3
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d018      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d108      	bne.n	80022b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d024      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
 80022b0:	e01f      	b.n	80022f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01b      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
 80022c2:	e016      	b.n	80022f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0208 	bic.w	r2, r2, #8
 80022e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2220      	movs	r2, #32
 80022fc:	409a      	lsls	r2, r3
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8110 	beq.w	8002528 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2c      	ldr	r2, [pc, #176]	@ (80023c0 <HAL_DMA_IRQHandler+0x690>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d04a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <HAL_DMA_IRQHandler+0x694>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d045      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <HAL_DMA_IRQHandler+0x698>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d040      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a28      	ldr	r2, [pc, #160]	@ (80023cc <HAL_DMA_IRQHandler+0x69c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d03b      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a26      	ldr	r2, [pc, #152]	@ (80023d0 <HAL_DMA_IRQHandler+0x6a0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d036      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a25      	ldr	r2, [pc, #148]	@ (80023d4 <HAL_DMA_IRQHandler+0x6a4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d031      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a23      	ldr	r2, [pc, #140]	@ (80023d8 <HAL_DMA_IRQHandler+0x6a8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02c      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a22      	ldr	r2, [pc, #136]	@ (80023dc <HAL_DMA_IRQHandler+0x6ac>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d027      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a20      	ldr	r2, [pc, #128]	@ (80023e0 <HAL_DMA_IRQHandler+0x6b0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1f      	ldr	r2, [pc, #124]	@ (80023e4 <HAL_DMA_IRQHandler+0x6b4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d01d      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1d      	ldr	r2, [pc, #116]	@ (80023e8 <HAL_DMA_IRQHandler+0x6b8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_DMA_IRQHandler+0x6bc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1a      	ldr	r2, [pc, #104]	@ (80023f0 <HAL_DMA_IRQHandler+0x6c0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a19      	ldr	r2, [pc, #100]	@ (80023f4 <HAL_DMA_IRQHandler+0x6c4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <HAL_DMA_IRQHandler+0x6c8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x678>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <HAL_DMA_IRQHandler+0x6cc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d12b      	bne.n	8002400 <HAL_DMA_IRQHandler+0x6d0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bf14      	ite	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	2300      	moveq	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	e02a      	b.n	8002414 <HAL_DMA_IRQHandler+0x6e4>
 80023be:	bf00      	nop
 80023c0:	40020010 	.word	0x40020010
 80023c4:	40020028 	.word	0x40020028
 80023c8:	40020040 	.word	0x40020040
 80023cc:	40020058 	.word	0x40020058
 80023d0:	40020070 	.word	0x40020070
 80023d4:	40020088 	.word	0x40020088
 80023d8:	400200a0 	.word	0x400200a0
 80023dc:	400200b8 	.word	0x400200b8
 80023e0:	40020410 	.word	0x40020410
 80023e4:	40020428 	.word	0x40020428
 80023e8:	40020440 	.word	0x40020440
 80023ec:	40020458 	.word	0x40020458
 80023f0:	40020470 	.word	0x40020470
 80023f4:	40020488 	.word	0x40020488
 80023f8:	400204a0 	.word	0x400204a0
 80023fc:	400204b8 	.word	0x400204b8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8087 	beq.w	8002528 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2220      	movs	r2, #32
 8002424:	409a      	lsls	r2, r3
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b04      	cmp	r3, #4
 8002434:	d139      	bne.n	80024aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0216 	bic.w	r2, r2, #22
 8002444:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002454:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <HAL_DMA_IRQHandler+0x736>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0208 	bic.w	r2, r2, #8
 8002474:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	223f      	movs	r2, #63	@ 0x3f
 8002480:	409a      	lsls	r2, r3
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 834a 	beq.w	8002b34 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
          }
          return;
 80024a8:	e344      	b.n	8002b34 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d018      	beq.n	80024ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d108      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02c      	beq.n	8002528 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
 80024d6:	e027      	b.n	8002528 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
 80024e8:	e01e      	b.n	8002528 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10f      	bne.n	8002518 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0210 	bic.w	r2, r2, #16
 8002506:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8306 	beq.w	8002b3e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8088 	beq.w	8002650 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2204      	movs	r2, #4
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a7a      	ldr	r2, [pc, #488]	@ (8002738 <HAL_DMA_IRQHandler+0xa08>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d04a      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a79      	ldr	r2, [pc, #484]	@ (800273c <HAL_DMA_IRQHandler+0xa0c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d045      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a77      	ldr	r2, [pc, #476]	@ (8002740 <HAL_DMA_IRQHandler+0xa10>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d040      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a76      	ldr	r2, [pc, #472]	@ (8002744 <HAL_DMA_IRQHandler+0xa14>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d03b      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a74      	ldr	r2, [pc, #464]	@ (8002748 <HAL_DMA_IRQHandler+0xa18>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d036      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a73      	ldr	r2, [pc, #460]	@ (800274c <HAL_DMA_IRQHandler+0xa1c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d031      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a71      	ldr	r2, [pc, #452]	@ (8002750 <HAL_DMA_IRQHandler+0xa20>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d02c      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a70      	ldr	r2, [pc, #448]	@ (8002754 <HAL_DMA_IRQHandler+0xa24>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d027      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6e      	ldr	r2, [pc, #440]	@ (8002758 <HAL_DMA_IRQHandler+0xa28>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d022      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6d      	ldr	r2, [pc, #436]	@ (800275c <HAL_DMA_IRQHandler+0xa2c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d01d      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002760 <HAL_DMA_IRQHandler+0xa30>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d018      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002764 <HAL_DMA_IRQHandler+0xa34>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d013      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a68      	ldr	r2, [pc, #416]	@ (8002768 <HAL_DMA_IRQHandler+0xa38>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a67      	ldr	r2, [pc, #412]	@ (800276c <HAL_DMA_IRQHandler+0xa3c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a65      	ldr	r2, [pc, #404]	@ (8002770 <HAL_DMA_IRQHandler+0xa40>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x8b8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a64      	ldr	r2, [pc, #400]	@ (8002774 <HAL_DMA_IRQHandler+0xa44>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <HAL_DMA_IRQHandler+0x8ca>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e007      	b.n	800260a <HAL_DMA_IRQHandler+0x8da>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	3301      	adds	r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002612:	429a      	cmp	r2, r3
 8002614:	d307      	bcc.n	8002626 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f2      	bne.n	800260a <HAL_DMA_IRQHandler+0x8da>
 8002624:	e000      	b.n	8002628 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002626:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800263e:	e003      	b.n	8002648 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8272 	beq.w	8002b3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
 8002662:	e26c      	b.n	8002b3e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a43      	ldr	r2, [pc, #268]	@ (8002778 <HAL_DMA_IRQHandler+0xa48>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d022      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x984>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a42      	ldr	r2, [pc, #264]	@ (800277c <HAL_DMA_IRQHandler+0xa4c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d01d      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x984>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a40      	ldr	r2, [pc, #256]	@ (8002780 <HAL_DMA_IRQHandler+0xa50>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x984>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3f      	ldr	r2, [pc, #252]	@ (8002784 <HAL_DMA_IRQHandler+0xa54>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x984>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3d      	ldr	r2, [pc, #244]	@ (8002788 <HAL_DMA_IRQHandler+0xa58>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00e      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x984>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a3c      	ldr	r2, [pc, #240]	@ (800278c <HAL_DMA_IRQHandler+0xa5c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x984>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002790 <HAL_DMA_IRQHandler+0xa60>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x984>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a39      	ldr	r2, [pc, #228]	@ (8002794 <HAL_DMA_IRQHandler+0xa64>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x988>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_DMA_IRQHandler+0x98a>
 80026b8:	2300      	movs	r3, #0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 823f 	beq.w	8002b3e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2204      	movs	r2, #4
 80026d2:	409a      	lsls	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80cd 	beq.w	8002878 <HAL_DMA_IRQHandler+0xb48>
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80c7 	beq.w	8002878 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2204      	movs	r2, #4
 80026f4:	409a      	lsls	r2, r3
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d049      	beq.n	8002798 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8210 	beq.w	8002b38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002720:	e20a      	b.n	8002b38 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8206 	beq.w	8002b38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002734:	e200      	b.n	8002b38 <HAL_DMA_IRQHandler+0xe08>
 8002736:	bf00      	nop
 8002738:	40020010 	.word	0x40020010
 800273c:	40020028 	.word	0x40020028
 8002740:	40020040 	.word	0x40020040
 8002744:	40020058 	.word	0x40020058
 8002748:	40020070 	.word	0x40020070
 800274c:	40020088 	.word	0x40020088
 8002750:	400200a0 	.word	0x400200a0
 8002754:	400200b8 	.word	0x400200b8
 8002758:	40020410 	.word	0x40020410
 800275c:	40020428 	.word	0x40020428
 8002760:	40020440 	.word	0x40020440
 8002764:	40020458 	.word	0x40020458
 8002768:	40020470 	.word	0x40020470
 800276c:	40020488 	.word	0x40020488
 8002770:	400204a0 	.word	0x400204a0
 8002774:	400204b8 	.word	0x400204b8
 8002778:	58025408 	.word	0x58025408
 800277c:	5802541c 	.word	0x5802541c
 8002780:	58025430 	.word	0x58025430
 8002784:	58025444 	.word	0x58025444
 8002788:	58025458 	.word	0x58025458
 800278c:	5802546c 	.word	0x5802546c
 8002790:	58025480 	.word	0x58025480
 8002794:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d160      	bne.n	8002864 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7f      	ldr	r2, [pc, #508]	@ (80029a4 <HAL_DMA_IRQHandler+0xc74>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d04a      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a7d      	ldr	r2, [pc, #500]	@ (80029a8 <HAL_DMA_IRQHandler+0xc78>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d045      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7c      	ldr	r2, [pc, #496]	@ (80029ac <HAL_DMA_IRQHandler+0xc7c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d040      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a7a      	ldr	r2, [pc, #488]	@ (80029b0 <HAL_DMA_IRQHandler+0xc80>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d03b      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a79      	ldr	r2, [pc, #484]	@ (80029b4 <HAL_DMA_IRQHandler+0xc84>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d036      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a77      	ldr	r2, [pc, #476]	@ (80029b8 <HAL_DMA_IRQHandler+0xc88>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d031      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a76      	ldr	r2, [pc, #472]	@ (80029bc <HAL_DMA_IRQHandler+0xc8c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d02c      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a74      	ldr	r2, [pc, #464]	@ (80029c0 <HAL_DMA_IRQHandler+0xc90>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d027      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a73      	ldr	r2, [pc, #460]	@ (80029c4 <HAL_DMA_IRQHandler+0xc94>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a71      	ldr	r2, [pc, #452]	@ (80029c8 <HAL_DMA_IRQHandler+0xc98>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01d      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a70      	ldr	r2, [pc, #448]	@ (80029cc <HAL_DMA_IRQHandler+0xc9c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d018      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6e      	ldr	r2, [pc, #440]	@ (80029d0 <HAL_DMA_IRQHandler+0xca0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6d      	ldr	r2, [pc, #436]	@ (80029d4 <HAL_DMA_IRQHandler+0xca4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00e      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6b      	ldr	r2, [pc, #428]	@ (80029d8 <HAL_DMA_IRQHandler+0xca8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6a      	ldr	r2, [pc, #424]	@ (80029dc <HAL_DMA_IRQHandler+0xcac>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_DMA_IRQHandler+0xb12>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a68      	ldr	r2, [pc, #416]	@ (80029e0 <HAL_DMA_IRQHandler+0xcb0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <HAL_DMA_IRQHandler+0xb24>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0208 	bic.w	r2, r2, #8
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <HAL_DMA_IRQHandler+0xb34>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8165 	beq.w	8002b38 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002876:	e15f      	b.n	8002b38 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2202      	movs	r2, #2
 8002882:	409a      	lsls	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80c5 	beq.w	8002a18 <HAL_DMA_IRQHandler+0xce8>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80bf 	beq.w	8002a18 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2202      	movs	r2, #2
 80028a4:	409a      	lsls	r2, r3
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 813a 	beq.w	8002b3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028d0:	e134      	b.n	8002b3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8130 	beq.w	8002b3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028e4:	e12a      	b.n	8002b3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f040 8089 	bne.w	8002a04 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2b      	ldr	r2, [pc, #172]	@ (80029a4 <HAL_DMA_IRQHandler+0xc74>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d04a      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <HAL_DMA_IRQHandler+0xc78>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d045      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <HAL_DMA_IRQHandler+0xc7c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d040      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a26      	ldr	r2, [pc, #152]	@ (80029b0 <HAL_DMA_IRQHandler+0xc80>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d03b      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a25      	ldr	r2, [pc, #148]	@ (80029b4 <HAL_DMA_IRQHandler+0xc84>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d036      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <HAL_DMA_IRQHandler+0xc88>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d031      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a22      	ldr	r2, [pc, #136]	@ (80029bc <HAL_DMA_IRQHandler+0xc8c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d02c      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a20      	ldr	r2, [pc, #128]	@ (80029c0 <HAL_DMA_IRQHandler+0xc90>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d027      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <HAL_DMA_IRQHandler+0xc94>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <HAL_DMA_IRQHandler+0xc98>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01d      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <HAL_DMA_IRQHandler+0xc9c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d018      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_DMA_IRQHandler+0xca0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <HAL_DMA_IRQHandler+0xca4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00e      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <HAL_DMA_IRQHandler+0xca8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a16      	ldr	r2, [pc, #88]	@ (80029dc <HAL_DMA_IRQHandler+0xcac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_DMA_IRQHandler+0xc62>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <HAL_DMA_IRQHandler+0xcb0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d128      	bne.n	80029e4 <HAL_DMA_IRQHandler+0xcb4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0214 	bic.w	r2, r2, #20
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e027      	b.n	80029f4 <HAL_DMA_IRQHandler+0xcc4>
 80029a4:	40020010 	.word	0x40020010
 80029a8:	40020028 	.word	0x40020028
 80029ac:	40020040 	.word	0x40020040
 80029b0:	40020058 	.word	0x40020058
 80029b4:	40020070 	.word	0x40020070
 80029b8:	40020088 	.word	0x40020088
 80029bc:	400200a0 	.word	0x400200a0
 80029c0:	400200b8 	.word	0x400200b8
 80029c4:	40020410 	.word	0x40020410
 80029c8:	40020428 	.word	0x40020428
 80029cc:	40020440 	.word	0x40020440
 80029d0:	40020458 	.word	0x40020458
 80029d4:	40020470 	.word	0x40020470
 80029d8:	40020488 	.word	0x40020488
 80029dc:	400204a0 	.word	0x400204a0
 80029e0:	400204b8 	.word	0x400204b8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020a 	bic.w	r2, r2, #10
 80029f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8097 	beq.w	8002b3c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a16:	e091      	b.n	8002b3c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2208      	movs	r2, #8
 8002a22:	409a      	lsls	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8088 	beq.w	8002b3e <HAL_DMA_IRQHandler+0xe0e>
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8082 	beq.w	8002b3e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a41      	ldr	r2, [pc, #260]	@ (8002b44 <HAL_DMA_IRQHandler+0xe14>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d04a      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3f      	ldr	r2, [pc, #252]	@ (8002b48 <HAL_DMA_IRQHandler+0xe18>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d045      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3e      	ldr	r2, [pc, #248]	@ (8002b4c <HAL_DMA_IRQHandler+0xe1c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d040      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b50 <HAL_DMA_IRQHandler+0xe20>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d03b      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3b      	ldr	r2, [pc, #236]	@ (8002b54 <HAL_DMA_IRQHandler+0xe24>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d036      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a39      	ldr	r2, [pc, #228]	@ (8002b58 <HAL_DMA_IRQHandler+0xe28>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d031      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a38      	ldr	r2, [pc, #224]	@ (8002b5c <HAL_DMA_IRQHandler+0xe2c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d02c      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a36      	ldr	r2, [pc, #216]	@ (8002b60 <HAL_DMA_IRQHandler+0xe30>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d027      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a35      	ldr	r2, [pc, #212]	@ (8002b64 <HAL_DMA_IRQHandler+0xe34>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d022      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a33      	ldr	r2, [pc, #204]	@ (8002b68 <HAL_DMA_IRQHandler+0xe38>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01d      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a32      	ldr	r2, [pc, #200]	@ (8002b6c <HAL_DMA_IRQHandler+0xe3c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d018      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a30      	ldr	r2, [pc, #192]	@ (8002b70 <HAL_DMA_IRQHandler+0xe40>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b74 <HAL_DMA_IRQHandler+0xe44>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00e      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b78 <HAL_DMA_IRQHandler+0xe48>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2c      	ldr	r2, [pc, #176]	@ (8002b7c <HAL_DMA_IRQHandler+0xe4c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_DMA_IRQHandler+0xdaa>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <HAL_DMA_IRQHandler+0xe50>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <HAL_DMA_IRQHandler+0xdbc>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 021c 	bic.w	r2, r2, #28
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e007      	b.n	8002afc <HAL_DMA_IRQHandler+0xdcc>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 020e 	bic.w	r2, r2, #14
 8002afa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2201      	movs	r2, #1
 8002b06:	409a      	lsls	r2, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
 8002b32:	e004      	b.n	8002b3e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002b34:	bf00      	nop
 8002b36:	e002      	b.n	8002b3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b3e:	3728      	adds	r7, #40	@ 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40020010 	.word	0x40020010
 8002b48:	40020028 	.word	0x40020028
 8002b4c:	40020040 	.word	0x40020040
 8002b50:	40020058 	.word	0x40020058
 8002b54:	40020070 	.word	0x40020070
 8002b58:	40020088 	.word	0x40020088
 8002b5c:	400200a0 	.word	0x400200a0
 8002b60:	400200b8 	.word	0x400200b8
 8002b64:	40020410 	.word	0x40020410
 8002b68:	40020428 	.word	0x40020428
 8002b6c:	40020440 	.word	0x40020440
 8002b70:	40020458 	.word	0x40020458
 8002b74:	40020470 	.word	0x40020470
 8002b78:	40020488 	.word	0x40020488
 8002b7c:	400204a0 	.word	0x400204a0
 8002b80:	400204b8 	.word	0x400204b8

08002b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a42      	ldr	r2, [pc, #264]	@ (8002c9c <DMA_CalcBaseAndBitshift+0x118>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d04a      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ca0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d045      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca4 <DMA_CalcBaseAndBitshift+0x120>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d040      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a3e      	ldr	r2, [pc, #248]	@ (8002ca8 <DMA_CalcBaseAndBitshift+0x124>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d03b      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cac <DMA_CalcBaseAndBitshift+0x128>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d036      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb0 <DMA_CalcBaseAndBitshift+0x12c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d031      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a39      	ldr	r2, [pc, #228]	@ (8002cb4 <DMA_CalcBaseAndBitshift+0x130>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02c      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <DMA_CalcBaseAndBitshift+0x134>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d027      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a36      	ldr	r2, [pc, #216]	@ (8002cbc <DMA_CalcBaseAndBitshift+0x138>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a35      	ldr	r2, [pc, #212]	@ (8002cc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d01d      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a33      	ldr	r2, [pc, #204]	@ (8002cc4 <DMA_CalcBaseAndBitshift+0x140>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <DMA_CalcBaseAndBitshift+0x144>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a30      	ldr	r2, [pc, #192]	@ (8002ccc <DMA_CalcBaseAndBitshift+0x148>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd4 <DMA_CalcBaseAndBitshift+0x150>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <DMA_CalcBaseAndBitshift+0xa8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd8 <DMA_CalcBaseAndBitshift+0x154>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <DMA_CalcBaseAndBitshift+0xac>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <DMA_CalcBaseAndBitshift+0xae>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d024      	beq.n	8002c80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3b10      	subs	r3, #16
 8002c3e:	4a27      	ldr	r2, [pc, #156]	@ (8002cdc <DMA_CalcBaseAndBitshift+0x158>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	4a24      	ldr	r2, [pc, #144]	@ (8002ce0 <DMA_CalcBaseAndBitshift+0x15c>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d908      	bls.n	8002c70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <DMA_CalcBaseAndBitshift+0x160>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	1d1a      	adds	r2, r3, #4
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c6e:	e00d      	b.n	8002c8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <DMA_CalcBaseAndBitshift+0x160>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7e:	e005      	b.n	8002c8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40020010 	.word	0x40020010
 8002ca0:	40020028 	.word	0x40020028
 8002ca4:	40020040 	.word	0x40020040
 8002ca8:	40020058 	.word	0x40020058
 8002cac:	40020070 	.word	0x40020070
 8002cb0:	40020088 	.word	0x40020088
 8002cb4:	400200a0 	.word	0x400200a0
 8002cb8:	400200b8 	.word	0x400200b8
 8002cbc:	40020410 	.word	0x40020410
 8002cc0:	40020428 	.word	0x40020428
 8002cc4:	40020440 	.word	0x40020440
 8002cc8:	40020458 	.word	0x40020458
 8002ccc:	40020470 	.word	0x40020470
 8002cd0:	40020488 	.word	0x40020488
 8002cd4:	400204a0 	.word	0x400204a0
 8002cd8:	400204b8 	.word	0x400204b8
 8002cdc:	aaaaaaab 	.word	0xaaaaaaab
 8002ce0:	0800e814 	.word	0x0800e814
 8002ce4:	fffffc00 	.word	0xfffffc00

08002ce8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d120      	bne.n	8002d3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d858      	bhi.n	8002db6 <DMA_CheckFifoParam+0xce>
 8002d04:	a201      	add	r2, pc, #4	@ (adr r2, 8002d0c <DMA_CheckFifoParam+0x24>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d2f 	.word	0x08002d2f
 8002d14:	08002d1d 	.word	0x08002d1d
 8002d18:	08002db7 	.word	0x08002db7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d048      	beq.n	8002dba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d2c:	e045      	b.n	8002dba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d36:	d142      	bne.n	8002dbe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d3c:	e03f      	b.n	8002dbe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d46:	d123      	bne.n	8002d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d838      	bhi.n	8002dc2 <DMA_CheckFifoParam+0xda>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <DMA_CheckFifoParam+0x70>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d6f 	.word	0x08002d6f
 8002d60:	08002d69 	.word	0x08002d69
 8002d64:	08002d81 	.word	0x08002d81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
        break;
 8002d6c:	e030      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d025      	beq.n	8002dc6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d7e:	e022      	b.n	8002dc6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d88:	d11f      	bne.n	8002dca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d8e:	e01c      	b.n	8002dca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d902      	bls.n	8002d9e <DMA_CheckFifoParam+0xb6>
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d003      	beq.n	8002da4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002d9c:	e018      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
        break;
 8002da2:	e015      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
    break;
 8002db4:	e00b      	b.n	8002dce <DMA_CheckFifoParam+0xe6>
        break;
 8002db6:	bf00      	nop
 8002db8:	e00a      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e008      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e006      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8002dc2:	bf00      	nop
 8002dc4:	e004      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8002dc6:	bf00      	nop
 8002dc8:	e002      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
    break;
 8002dce:	bf00      	nop
    }
  }

  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a38      	ldr	r2, [pc, #224]	@ (8002ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a36      	ldr	r2, [pc, #216]	@ (8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a35      	ldr	r2, [pc, #212]	@ (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a33      	ldr	r2, [pc, #204]	@ (8002ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002eec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01a      	beq.n	8002e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	4a28      	ldr	r2, [pc, #160]	@ (8002ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4b26      	ldr	r3, [pc, #152]	@ (8002ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a24      	ldr	r2, [pc, #144]	@ (8002efc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002e6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002e7c:	e024      	b.n	8002ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3b10      	subs	r3, #16
 8002e86:	4a1e      	ldr	r2, [pc, #120]	@ (8002f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d806      	bhi.n	8002ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d902      	bls.n	8002ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	@ (8002f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002eb8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	58025408 	.word	0x58025408
 8002ed8:	5802541c 	.word	0x5802541c
 8002edc:	58025430 	.word	0x58025430
 8002ee0:	58025444 	.word	0x58025444
 8002ee4:	58025458 	.word	0x58025458
 8002ee8:	5802546c 	.word	0x5802546c
 8002eec:	58025480 	.word	0x58025480
 8002ef0:	58025494 	.word	0x58025494
 8002ef4:	cccccccd 	.word	0xcccccccd
 8002ef8:	16009600 	.word	0x16009600
 8002efc:	58025880 	.word	0x58025880
 8002f00:	aaaaaaab 	.word	0xaaaaaaab
 8002f04:	400204b8 	.word	0x400204b8
 8002f08:	4002040f 	.word	0x4002040f
 8002f0c:	10008200 	.word	0x10008200
 8002f10:	40020880 	.word	0x40020880

08002f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d04a      	beq.n	8002fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d847      	bhi.n	8002fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a25      	ldr	r2, [pc, #148]	@ (8002fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d022      	beq.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01d      	beq.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a22      	ldr	r2, [pc, #136]	@ (8002fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d018      	beq.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	@ (8002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00e      	beq.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4b17      	ldr	r3, [pc, #92]	@ (8002fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002f9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f9e:	e009      	b.n	8002fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002fb2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	2201      	movs	r2, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	58025408 	.word	0x58025408
 8002fd0:	5802541c 	.word	0x5802541c
 8002fd4:	58025430 	.word	0x58025430
 8002fd8:	58025444 	.word	0x58025444
 8002fdc:	58025458 	.word	0x58025458
 8002fe0:	5802546c 	.word	0x5802546c
 8002fe4:	58025480 	.word	0x58025480
 8002fe8:	58025494 	.word	0x58025494
 8002fec:	1600963f 	.word	0x1600963f
 8002ff0:	58025940 	.word	0x58025940
 8002ff4:	1000823f 	.word	0x1000823f
 8002ff8:	40020940 	.word	0x40020940

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	@ 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800300a:	4b89      	ldr	r3, [pc, #548]	@ (8003230 <HAL_GPIO_Init+0x234>)
 800300c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800300e:	e194      	b.n	800333a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8186 	beq.w	8003334 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <HAL_GPIO_Init+0x44>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d130      	bne.n	80030a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003076:	2201      	movs	r2, #1
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0201 	and.w	r2, r3, #1
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d017      	beq.n	80030de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d123      	bne.n	8003132 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0203 	and.w	r2, r3, #3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80e0 	beq.w	8003334 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003174:	4b2f      	ldr	r3, [pc, #188]	@ (8003234 <HAL_GPIO_Init+0x238>)
 8003176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800317a:	4a2e      	ldr	r2, [pc, #184]	@ (8003234 <HAL_GPIO_Init+0x238>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003184:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_GPIO_Init+0x238>)
 8003186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003192:	4a29      	ldr	r2, [pc, #164]	@ (8003238 <HAL_GPIO_Init+0x23c>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a20      	ldr	r2, [pc, #128]	@ (800323c <HAL_GPIO_Init+0x240>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d052      	beq.n	8003264 <HAL_GPIO_Init+0x268>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003240 <HAL_GPIO_Init+0x244>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_GPIO_Init+0x22e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003244 <HAL_GPIO_Init+0x248>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02b      	beq.n	8003226 <HAL_GPIO_Init+0x22a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003248 <HAL_GPIO_Init+0x24c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d025      	beq.n	8003222 <HAL_GPIO_Init+0x226>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	@ (800324c <HAL_GPIO_Init+0x250>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01f      	beq.n	800321e <HAL_GPIO_Init+0x222>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003250 <HAL_GPIO_Init+0x254>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d019      	beq.n	800321a <HAL_GPIO_Init+0x21e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003254 <HAL_GPIO_Init+0x258>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0x21a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a19      	ldr	r2, [pc, #100]	@ (8003258 <HAL_GPIO_Init+0x25c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00d      	beq.n	8003212 <HAL_GPIO_Init+0x216>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a18      	ldr	r2, [pc, #96]	@ (800325c <HAL_GPIO_Init+0x260>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <HAL_GPIO_Init+0x212>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <HAL_GPIO_Init+0x264>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_GPIO_Init+0x20e>
 8003206:	2309      	movs	r3, #9
 8003208:	e02d      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 800320a:	230a      	movs	r3, #10
 800320c:	e02b      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 800320e:	2308      	movs	r3, #8
 8003210:	e029      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 8003212:	2307      	movs	r3, #7
 8003214:	e027      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 8003216:	2306      	movs	r3, #6
 8003218:	e025      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 800321a:	2305      	movs	r3, #5
 800321c:	e023      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 800321e:	2304      	movs	r3, #4
 8003220:	e021      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 8003222:	2303      	movs	r3, #3
 8003224:	e01f      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 8003226:	2302      	movs	r3, #2
 8003228:	e01d      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 800322a:	2301      	movs	r3, #1
 800322c:	e01b      	b.n	8003266 <HAL_GPIO_Init+0x26a>
 800322e:	bf00      	nop
 8003230:	58000080 	.word	0x58000080
 8003234:	58024400 	.word	0x58024400
 8003238:	58000400 	.word	0x58000400
 800323c:	58020000 	.word	0x58020000
 8003240:	58020400 	.word	0x58020400
 8003244:	58020800 	.word	0x58020800
 8003248:	58020c00 	.word	0x58020c00
 800324c:	58021000 	.word	0x58021000
 8003250:	58021400 	.word	0x58021400
 8003254:	58021800 	.word	0x58021800
 8003258:	58021c00 	.word	0x58021c00
 800325c:	58022000 	.word	0x58022000
 8003260:	58022400 	.word	0x58022400
 8003264:	2300      	movs	r3, #0
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	f002 0203 	and.w	r2, r2, #3
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	4093      	lsls	r3, r2
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003276:	4938      	ldr	r1, [pc, #224]	@ (8003358 <HAL_GPIO_Init+0x35c>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	3301      	adds	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f ae63 	bne.w	8003010 <HAL_GPIO_Init+0x14>
  }
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	3724      	adds	r7, #36	@ 0x24
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	58000400 	.word	0x58000400

0800335c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a0:	887a      	ldrh	r2, [r7, #2]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	041a      	lsls	r2, r3, #16
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	400b      	ands	r3, r1
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af02      	add	r7, sp, #8
 80033c8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0fe      	b.n	80035d2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f00a fd95 	bl	800df18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2203      	movs	r2, #3
 80033f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f005 ff27 	bl	800924e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7c1a      	ldrb	r2, [r3, #16]
 8003408:	f88d 2000 	strb.w	r2, [sp]
 800340c:	3304      	adds	r3, #4
 800340e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003410:	f005 fdf8 	bl	8009004 <USB_CoreInit>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e0d5      	b.n	80035d2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f005 ff1f 	bl	8009270 <USB_SetCurrentMode>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0c6      	b.n	80035d2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003444:	2300      	movs	r3, #0
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e04a      	b.n	80034e0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3315      	adds	r3, #21
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3314      	adds	r3, #20
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	b298      	uxth	r0, r3
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	332e      	adds	r3, #46	@ 0x2e
 8003486:	4602      	mov	r2, r0
 8003488:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3318      	adds	r3, #24
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	331c      	adds	r3, #28
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3320      	adds	r3, #32
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3324      	adds	r3, #36	@ 0x24
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3301      	adds	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	791b      	ldrb	r3, [r3, #4]
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d3af      	bcc.n	800344a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e044      	b.n	800357a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	3301      	adds	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	429a      	cmp	r2, r3
 8003582:	d3b5      	bcc.n	80034f0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7c1a      	ldrb	r2, [r3, #16]
 800358c:	f88d 2000 	strb.w	r2, [sp]
 8003590:	3304      	adds	r3, #4
 8003592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003594:	f005 feb8 	bl	8009308 <USB_DevInit>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e013      	b.n	80035d2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7b1b      	ldrb	r3, [r3, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d102      	bne.n	80035c6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f001 f96f 	bl	80048a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f006 fefb 	bl	800a3c6 <USB_DevDisconnect>

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_PCD_Start+0x1c>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e022      	b.n	800363c <HAL_PCD_Start+0x62>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800360e:	2b01      	cmp	r3, #1
 8003610:	d105      	bne.n	800361e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003616:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f005 fe02 	bl	800922c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f006 fea9 	bl	800a384 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b08d      	sub	sp, #52	@ 0x34
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f006 ff67 	bl	800a52e <USB_GetMode>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 84b9 	bne.w	8003fda <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f006 fecb 	bl	800a408 <USB_ReadInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 84af 	beq.w	8003fd8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f006 feb8 	bl	800a408 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d107      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f002 0202 	and.w	r2, r2, #2
 80036b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f006 fea6 	bl	800a408 <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d161      	bne.n	800378a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0210 	bic.w	r2, r2, #16
 80036d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 020f 	and.w	r2, r3, #15
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	3304      	adds	r3, #4
 80036f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80036fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003700:	d124      	bne.n	800374c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d035      	beq.n	800377a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800371c:	b29b      	uxth	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	6a38      	ldr	r0, [r7, #32]
 8003722:	f006 fcdd 	bl	800a0e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003732:	441a      	add	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003744:	441a      	add	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	615a      	str	r2, [r3, #20]
 800374a:	e016      	b.n	800377a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003752:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003756:	d110      	bne.n	800377a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800375e:	2208      	movs	r2, #8
 8003760:	4619      	mov	r1, r3
 8003762:	6a38      	ldr	r0, [r7, #32]
 8003764:	f006 fcbc 	bl	800a0e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003774:	441a      	add	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0210 	orr.w	r2, r2, #16
 8003788:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f006 fe3a 	bl	800a408 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800379a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800379e:	f040 80a7 	bne.w	80038f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f006 fe3f 	bl	800a42e <USB_ReadDevAllOutEpInterrupt>
 80037b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80037b2:	e099      	b.n	80038e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 808e 	beq.w	80038dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f006 fe63 	bl	800a496 <USB_ReadDevOutEPInterrupt>
 80037d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2301      	movs	r3, #1
 80037ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fed1 	bl	8004598 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00c      	beq.n	800381a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	461a      	mov	r2, r3
 800380e:	2308      	movs	r3, #8
 8003810:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003812:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 ffa7 	bl	8004768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003830:	461a      	mov	r2, r3
 8003832:	2310      	movs	r3, #16
 8003834:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d030      	beq.n	80038a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003848:	2b80      	cmp	r3, #128	@ 0x80
 800384a:	d109      	bne.n	8003860 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800385a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800385e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	3304      	adds	r3, #4
 8003874:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	78db      	ldrb	r3, [r3, #3]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d108      	bne.n	8003890 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	b2db      	uxtb	r3, r3
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f00a fc6a 	bl	800e164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389c:	461a      	mov	r2, r3
 800389e:	2302      	movs	r3, #2
 80038a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	2320      	movs	r3, #32
 80038bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	3301      	adds	r3, #1
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f47f af62 	bne.w	80037b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f006 fd87 	bl	800a408 <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003900:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003904:	f040 80db 	bne.w	8003abe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f006 fda8 	bl	800a462 <USB_ReadDevAllInEpInterrupt>
 8003912:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003918:	e0cd      	b.n	8003ab6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80c2 	beq.w	8003aaa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f006 fdce 	bl	800a4d2 <USB_ReadDevInEPInterrupt>
 8003936:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d057      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	2201      	movs	r2, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	43db      	mvns	r3, r3
 800395c:	69f9      	ldr	r1, [r7, #28]
 800395e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003962:	4013      	ands	r3, r2
 8003964:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003972:	461a      	mov	r2, r3
 8003974:	2301      	movs	r3, #1
 8003976:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	799b      	ldrb	r3, [r3, #6]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d132      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3320      	adds	r3, #32
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4403      	add	r3, r0
 80039a0:	331c      	adds	r3, #28
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4419      	add	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4403      	add	r3, r0
 80039b4:	3320      	adds	r3, #32
 80039b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d113      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x3a2>
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3324      	adds	r3, #36	@ 0x24
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d108      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039de:	461a      	mov	r2, r3
 80039e0:	2101      	movs	r1, #1
 80039e2:	f006 fdd7 	bl	800a594 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f00a fb34 	bl	800e05a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2310      	movs	r3, #16
 8003a28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a40:	461a      	mov	r2, r3
 8003a42:	2340      	movs	r3, #64	@ 0x40
 8003a44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d023      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a52:	6a38      	ldr	r0, [r7, #32]
 8003a54:	f005 fdb6 	bl	80095c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	3310      	adds	r3, #16
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3304      	adds	r3, #4
 8003a6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	78db      	ldrb	r3, [r3, #3]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f00a fb81 	bl	800e188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	2302      	movs	r3, #2
 8003a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fcea 	bl	800447e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	3301      	adds	r3, #1
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f47f af2e 	bne.w	800391a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f006 fca0 	bl	800a408 <USB_ReadInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ad2:	d122      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003afa:	2100      	movs	r1, #0
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fef5 	bl	80048ec <HAL_PCDEx_LPM_Callback>
 8003b02:	e002      	b.n	8003b0a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f00a fb1f 	bl	800e148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f006 fc72 	bl	800a408 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b2e:	d112      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d102      	bne.n	8003b46 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f00a fadb 	bl	800e0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f006 fc54 	bl	800a408 <USB_ReadInterrupts>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b6a:	d121      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003b7a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d111      	bne.n	8003baa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	f003 020f 	and.w	r2, r3, #15
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fea2 	bl	80048ec <HAL_PCDEx_LPM_Callback>
 8003ba8:	e002      	b.n	8003bb0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f00a faa6 	bl	800e0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f006 fc27 	bl	800a408 <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc4:	f040 80b7 	bne.w	8003d36 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2110      	movs	r1, #16
 8003be2:	4618      	mov	r0, r3
 8003be4:	f005 fcee 	bl	80095c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bec:	e046      	b.n	8003c7c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c1c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	3301      	adds	r3, #1
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	791b      	ldrb	r3, [r3, #4]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d3b2      	bcc.n	8003bee <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c96:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7bdb      	ldrb	r3, [r3, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d016      	beq.n	8003cd2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cb4:	f043 030b 	orr.w	r3, r3, #11
 8003cb8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cca:	f043 030b 	orr.w	r3, r3, #11
 8003cce:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd0:	e015      	b.n	8003cfe <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf8:	f043 030b 	orr.w	r3, r3, #11
 8003cfc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d0c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d20:	461a      	mov	r2, r3
 8003d22:	f006 fc37 	bl	800a594 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f006 fb64 	bl	800a408 <USB_ReadInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4a:	d123      	bne.n	8003d94 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f006 fbfb 	bl	800a54c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f005 fcab 	bl	80096b6 <USB_GetDevSpeed>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681c      	ldr	r4, [r3, #0]
 8003d6c:	f001 fd9e 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 8003d70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d76:	461a      	mov	r2, r3
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f005 f9b5 	bl	80090e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f00a f993 	bl	800e0aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f006 fb35 	bl	800a408 <USB_ReadInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d10a      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f00a f970 	bl	800e08e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f002 0208 	and.w	r2, r2, #8
 8003dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f006 fb20 	bl	800a408 <USB_ReadInterrupts>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dce:	2b80      	cmp	r3, #128	@ 0x80
 8003dd0:	d123      	bne.n	8003e1a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dde:	2301      	movs	r3, #1
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de2:	e014      	b.n	8003e0e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d105      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fb0a 	bl	800441c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	791b      	ldrb	r3, [r3, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d3e4      	bcc.n	8003de4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f006 faf2 	bl	800a408 <USB_ReadInterrupts>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e2e:	d13c      	bne.n	8003eaa <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e30:	2301      	movs	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e34:	e02b      	b.n	8003e8e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3318      	adds	r3, #24
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d115      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da12      	bge.n	8003e88 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3317      	adds	r3, #23
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 faca 	bl	800441c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	791b      	ldrb	r3, [r3, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d3cd      	bcc.n	8003e36 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f006 faaa 	bl	800a408 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ebe:	d156      	bne.n	8003f6e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec4:	e045      	b.n	8003f52 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d12e      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003eee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da2b      	bge.n	8003f4c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	0c1a      	lsrs	r2, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003efe:	4053      	eors	r3, r2
 8003f00:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d121      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f48:	6053      	str	r3, [r2, #4]
            break;
 8003f4a:	e008      	b.n	8003f5e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	3301      	adds	r3, #1
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	791b      	ldrb	r3, [r3, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d3b3      	bcc.n	8003ec6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f006 fa48 	bl	800a408 <USB_ReadInterrupts>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f82:	d10a      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f00a f911 	bl	800e1ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f006 fa32 	bl	800a408 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d115      	bne.n	8003fda <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f00a f901 	bl	800e1c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	e000      	b.n	8003fda <HAL_PCD_IRQHandler+0x996>
      return;
 8003fd8:	bf00      	nop
    }
  }
}
 8003fda:	3734      	adds	r7, #52	@ 0x34
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}

08003fe0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_PCD_SetAddress+0x1a>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e012      	b.n	8004020 <HAL_PCD_SetAddress+0x40>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f006 f991 	bl	800a338 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	70fb      	strb	r3, [r7, #3]
 800403a:	460b      	mov	r3, r1
 800403c:	803b      	strh	r3, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404a:	2b00      	cmp	r3, #0
 800404c:	da0f      	bge.n	800406e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	3310      	adds	r3, #16
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	3304      	adds	r3, #4
 8004064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	705a      	strb	r2, [r3, #1]
 800406c:	e00f      	b.n	800408e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 020f 	and.w	r2, r3, #15
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800409a:	883b      	ldrh	r3, [r7, #0]
 800409c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	78ba      	ldrb	r2, [r7, #2]
 80040a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040bc:	78bb      	ldrb	r3, [r7, #2]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d102      	bne.n	80040c8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_PCD_EP_Open+0xae>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e00e      	b.n	80040f4 <HAL_PCD_EP_Open+0xcc>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f005 fb0b 	bl	8009700 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80040f2:	7afb      	ldrb	r3, [r7, #11]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800410c:	2b00      	cmp	r3, #0
 800410e:	da0f      	bge.n	8004130 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	3310      	adds	r3, #16
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	3304      	adds	r3, #4
 8004126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	705a      	strb	r2, [r3, #1]
 800412e:	e00f      	b.n	8004150 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 020f 	and.w	r2, r3, #15
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4413      	add	r3, r2
 8004146:	3304      	adds	r3, #4
 8004148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_PCD_EP_Close+0x6e>
 8004166:	2302      	movs	r3, #2
 8004168:	e00e      	b.n	8004188 <HAL_PCD_EP_Close+0x8c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	4618      	mov	r0, r3
 800417a:	f005 fb49 	bl	8009810 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	460b      	mov	r3, r1
 800419e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a0:	7afb      	ldrb	r3, [r7, #11]
 80041a2:	f003 020f 	and.w	r2, r3, #15
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	3304      	adds	r3, #4
 80041b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d2:	7afb      	ldrb	r3, [r7, #11]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	799b      	ldrb	r3, [r3, #6]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	799b      	ldrb	r3, [r3, #6]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6979      	ldr	r1, [r7, #20]
 80041f8:	f005 fbe6 	bl	80099c8 <USB_EPStartXfer>

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004228:	681b      	ldr	r3, [r3, #0]
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b086      	sub	sp, #24
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	460b      	mov	r3, r1
 8004244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	3310      	adds	r3, #16
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	3304      	adds	r3, #4
 800425c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2201      	movs	r2, #1
 8004274:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004276:	7afb      	ldrb	r3, [r7, #11]
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	b2da      	uxtb	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	799b      	ldrb	r3, [r3, #6]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d102      	bne.n	8004290 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	799b      	ldrb	r3, [r3, #6]
 8004298:	461a      	mov	r2, r3
 800429a:	6979      	ldr	r1, [r7, #20]
 800429c:	f005 fb94 	bl	80099c8 <USB_EPStartXfer>

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	7912      	ldrb	r2, [r2, #4]
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e04f      	b.n	8004368 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	da0f      	bge.n	80042f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	3310      	adds	r3, #16
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	3304      	adds	r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	705a      	strb	r2, [r3, #1]
 80042ee:	e00d      	b.n	800430c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_PCD_EP_SetStall+0x82>
 8004328:	2302      	movs	r3, #2
 800432a:	e01d      	b.n	8004368 <HAL_PCD_EP_SetStall+0xbe>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	4618      	mov	r0, r3
 800433c:	f005 ff28 	bl	800a190 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7999      	ldrb	r1, [r3, #6]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004358:	461a      	mov	r2, r3
 800435a:	f006 f91b 	bl	800a594 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	7912      	ldrb	r2, [r2, #4]
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e042      	b.n	8004414 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800438e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0f      	bge.n	80043b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	3310      	adds	r3, #16
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	705a      	strb	r2, [r3, #1]
 80043b4:	e00f      	b.n	80043d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_PCD_EP_ClrStall+0x86>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e00e      	b.n	8004414 <HAL_PCD_EP_ClrStall+0xa4>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4618      	mov	r0, r3
 8004406:	f005 ff31 	bl	800a26c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800442c:	2b00      	cmp	r3, #0
 800442e:	da0c      	bge.n	800444a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	3310      	adds	r3, #16
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e00c      	b.n	8004464 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 020f 	and.w	r2, r3, #15
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68f9      	ldr	r1, [r7, #12]
 800446a:	4618      	mov	r0, r3
 800446c:	f005 fd50 	bl	8009f10 <USB_EPStopXfer>
 8004470:	4603      	mov	r3, r0
 8004472:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004474:	7afb      	ldrb	r3, [r7, #11]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b08a      	sub	sp, #40	@ 0x28
 8004482:	af02      	add	r7, sp, #8
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	3310      	adds	r3, #16
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	3304      	adds	r3, #4
 80044a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d901      	bls.n	80044b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e06b      	b.n	800458e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d902      	bls.n	80044d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3303      	adds	r3, #3
 80044d6:	089b      	lsrs	r3, r3, #2
 80044d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044da:	e02a      	b.n	8004532 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d902      	bls.n	80044f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3303      	adds	r3, #3
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68d9      	ldr	r1, [r3, #12]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	4603      	mov	r3, r0
 8004514:	6978      	ldr	r0, [r7, #20]
 8004516:	f005 fda5 	bl	800a064 <USB_WritePacket>

    ep->xfer_buff  += len;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	441a      	add	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	d809      	bhi.n	800455c <PCD_WriteEmptyTxFifo+0xde>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004550:	429a      	cmp	r2, r3
 8004552:	d203      	bcs.n	800455c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1bf      	bne.n	80044dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	429a      	cmp	r2, r3
 8004566:	d811      	bhi.n	800458c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	2201      	movs	r2, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800457c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	43db      	mvns	r3, r3
 8004582:	6939      	ldr	r1, [r7, #16]
 8004584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004588:	4013      	ands	r3, r2
 800458a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	333c      	adds	r3, #60	@ 0x3c
 80045b0:	3304      	adds	r3, #4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	799b      	ldrb	r3, [r3, #6]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d17b      	bne.n	80046c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d015      	beq.n	8004604 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4a61      	ldr	r2, [pc, #388]	@ (8004760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	f240 80b9 	bls.w	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80b3 	beq.w	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004600:	6093      	str	r3, [r2, #8]
 8004602:	e0a7      	b.n	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	2320      	movs	r3, #32
 800461e:	6093      	str	r3, [r2, #8]
 8004620:	e098      	b.n	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8093 	bne.w	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4a4b      	ldr	r2, [pc, #300]	@ (8004760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d90f      	bls.n	8004656 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464c:	461a      	mov	r2, r3
 800464e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004652:	6093      	str	r3, [r2, #8]
 8004654:	e07e      	b.n	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4413      	add	r3, r2
 8004668:	3304      	adds	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	0159      	lsls	r1, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	440b      	add	r3, r1
 8004678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d114      	bne.n	80046b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046a0:	461a      	mov	r2, r3
 80046a2:	2101      	movs	r1, #1
 80046a4:	f005 ff76 	bl	800a594 <USB_EP0_OutStart>
 80046a8:	e006      	b.n	80046b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f009 fcb0 	bl	800e024 <HAL_PCD_DataOutStageCallback>
 80046c4:	e046      	b.n	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4a26      	ldr	r2, [pc, #152]	@ (8004764 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d124      	bne.n	8004718 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e4:	461a      	mov	r2, r3
 80046e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ea:	6093      	str	r3, [r2, #8]
 80046ec:	e032      	b.n	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	2320      	movs	r3, #32
 8004708:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f009 fc87 	bl	800e024 <HAL_PCD_DataOutStageCallback>
 8004716:	e01d      	b.n	8004754 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d114      	bne.n	8004748 <PCD_EP_OutXfrComplete_int+0x1b0>
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004740:	461a      	mov	r2, r3
 8004742:	2100      	movs	r1, #0
 8004744:	f005 ff26 	bl	800a594 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f009 fc68 	bl	800e024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	4f54300a 	.word	0x4f54300a
 8004764:	4f54310a 	.word	0x4f54310a

08004768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	333c      	adds	r3, #60	@ 0x3c
 8004780:	3304      	adds	r3, #4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d90e      	bls.n	80047bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b4:	461a      	mov	r2, r3
 80047b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f009 fc1f 	bl	800e000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a0a      	ldr	r2, [pc, #40]	@ (80047f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d90c      	bls.n	80047e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	799b      	ldrb	r3, [r3, #6]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d108      	bne.n	80047e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047dc:	461a      	mov	r2, r3
 80047de:	2101      	movs	r1, #1
 80047e0:	f005 fed8 	bl	800a594 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	4f54300a 	.word	0x4f54300a

080047f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
 8004800:	4613      	mov	r3, r2
 8004802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d107      	bne.n	8004822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004812:	883b      	ldrh	r3, [r7, #0]
 8004814:	0419      	lsls	r1, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	430a      	orrs	r2, r1
 800481e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004820:	e028      	b.n	8004874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4413      	add	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
 8004834:	e00d      	b.n	8004852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	3340      	adds	r3, #64	@ 0x40
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4413      	add	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	3301      	adds	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	3b01      	subs	r3, #1
 8004858:	429a      	cmp	r2, r3
 800485a:	d3ec      	bcc.n	8004836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800485c:	883b      	ldrh	r3, [r7, #0]
 800485e:	0418      	lsls	r0, r3, #16
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	3b01      	subs	r3, #1
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	4302      	orrs	r2, r0
 800486c:	3340      	adds	r3, #64	@ 0x40
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048d2:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	10000003 	.word	0x10000003

080048ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800490c:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <HAL_PWREx_ConfigSupply+0x70>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b04      	cmp	r3, #4
 8004916:	d00a      	beq.n	800492e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004918:	4b16      	ldr	r3, [pc, #88]	@ (8004974 <HAL_PWREx_ConfigSupply+0x70>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d001      	beq.n	800492a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e01f      	b.n	800496a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e01d      	b.n	800496a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800492e:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <HAL_PWREx_ConfigSupply+0x70>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	490f      	ldr	r1, [pc, #60]	@ (8004974 <HAL_PWREx_ConfigSupply+0x70>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4313      	orrs	r3, r2
 800493c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800493e:	f7fc fd07 	bl	8001350 <HAL_GetTick>
 8004942:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004944:	e009      	b.n	800495a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004946:	f7fc fd03 	bl	8001350 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004954:	d901      	bls.n	800495a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e007      	b.n	800496a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800495a:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <HAL_PWREx_ConfigSupply+0x70>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004966:	d1ee      	bne.n	8004946 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	58024800 	.word	0x58024800

08004978 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004986:	60d3      	str	r3, [r2, #12]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	58024800 	.word	0x58024800

08004998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	@ 0x30
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f000 bc48 	b.w	800523c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8088 	beq.w	8004aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ba:	4b99      	ldr	r3, [pc, #612]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049c4:	4b96      	ldr	r3, [pc, #600]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d007      	beq.n	80049e0 <HAL_RCC_OscConfig+0x48>
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d2:	2b18      	cmp	r3, #24
 80049d4:	d111      	bne.n	80049fa <HAL_RCC_OscConfig+0x62>
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d10c      	bne.n	80049fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d06d      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x130>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d169      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f000 bc21 	b.w	800523c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x7a>
 8004a04:	4b86      	ldr	r3, [pc, #536]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a85      	ldr	r2, [pc, #532]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	e02e      	b.n	8004a70 <HAL_RCC_OscConfig+0xd8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x9c>
 8004a1a:	4b81      	ldr	r3, [pc, #516]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a80      	ldr	r2, [pc, #512]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b7e      	ldr	r3, [pc, #504]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e01d      	b.n	8004a70 <HAL_RCC_OscConfig+0xd8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0xc0>
 8004a3e:	4b78      	ldr	r3, [pc, #480]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a77      	ldr	r2, [pc, #476]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b75      	ldr	r3, [pc, #468]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a74      	ldr	r2, [pc, #464]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e00b      	b.n	8004a70 <HAL_RCC_OscConfig+0xd8>
 8004a58:	4b71      	ldr	r3, [pc, #452]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a70      	ldr	r2, [pc, #448]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	4b6e      	ldr	r3, [pc, #440]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a6d      	ldr	r2, [pc, #436]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc fc6a 	bl	8001350 <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fc fc66 	bl	8001350 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	@ 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e3d4      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a92:	4b63      	ldr	r3, [pc, #396]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0xe8>
 8004a9e:	e014      	b.n	8004aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fc fc56 	bl	8001350 <HAL_GetTick>
 8004aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fc fc52 	bl	8001350 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	@ 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e3c0      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aba:	4b59      	ldr	r3, [pc, #356]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x110>
 8004ac6:	e000      	b.n	8004aca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80ca 	beq.w	8004c6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad8:	4b51      	ldr	r3, [pc, #324]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ae0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <HAL_RCC_OscConfig+0x166>
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	2b18      	cmp	r3, #24
 8004af2:	d156      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x20a>
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d151      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afe:	4b48      	ldr	r3, [pc, #288]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_RCC_OscConfig+0x17e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e392      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b16:	4b42      	ldr	r3, [pc, #264]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0219 	bic.w	r2, r3, #25
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	493f      	ldr	r1, [pc, #252]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fc fc12 	bl	8001350 <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fc fc0e 	bl	8001350 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e37c      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b42:	4b37      	ldr	r3, [pc, #220]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	f7fc fc2f 	bl	80013b0 <HAL_GetREVID>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d817      	bhi.n	8004b8c <HAL_RCC_OscConfig+0x1f4>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d108      	bne.n	8004b76 <HAL_RCC_OscConfig+0x1de>
 8004b64:	4b2e      	ldr	r3, [pc, #184]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b74:	e07a      	b.n	8004c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b76:	4b2a      	ldr	r3, [pc, #168]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	031b      	lsls	r3, r3, #12
 8004b84:	4926      	ldr	r1, [pc, #152]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b8a:	e06f      	b.n	8004c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8c:	4b24      	ldr	r3, [pc, #144]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	061b      	lsls	r3, r3, #24
 8004b9a:	4921      	ldr	r1, [pc, #132]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba0:	e064      	b.n	8004c6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d047      	beq.n	8004c3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004baa:	4b1d      	ldr	r3, [pc, #116]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 0219 	bic.w	r2, r3, #25
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	491a      	ldr	r1, [pc, #104]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc fbc8 	bl	8001350 <HAL_GetTick>
 8004bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc4:	f7fc fbc4 	bl	8001350 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e332      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd6:	4b12      	ldr	r3, [pc, #72]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be2:	f7fc fbe5 	bl	80013b0 <HAL_GetREVID>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d819      	bhi.n	8004c24 <HAL_RCC_OscConfig+0x28c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d108      	bne.n	8004c0a <HAL_RCC_OscConfig+0x272>
 8004bf8:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c00:	4a07      	ldr	r2, [pc, #28]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c06:	6053      	str	r3, [r2, #4]
 8004c08:	e030      	b.n	8004c6c <HAL_RCC_OscConfig+0x2d4>
 8004c0a:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	031b      	lsls	r3, r3, #12
 8004c18:	4901      	ldr	r1, [pc, #4]	@ (8004c20 <HAL_RCC_OscConfig+0x288>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
 8004c1e:	e025      	b.n	8004c6c <HAL_RCC_OscConfig+0x2d4>
 8004c20:	58024400 	.word	0x58024400
 8004c24:	4b9a      	ldr	r3, [pc, #616]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	061b      	lsls	r3, r3, #24
 8004c32:	4997      	ldr	r1, [pc, #604]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
 8004c38:	e018      	b.n	8004c6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3a:	4b95      	ldr	r3, [pc, #596]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a94      	ldr	r2, [pc, #592]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fc fb83 	bl	8001350 <HAL_GetTick>
 8004c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fc fb7f 	bl	8001350 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e2ed      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c60:	4b8b      	ldr	r3, [pc, #556]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80a9 	beq.w	8004dcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c7a:	4b85      	ldr	r3, [pc, #532]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c84:	4b82      	ldr	r3, [pc, #520]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d007      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x308>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b18      	cmp	r3, #24
 8004c94:	d13a      	bne.n	8004d0c <HAL_RCC_OscConfig+0x374>
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d135      	bne.n	8004d0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x320>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	2b80      	cmp	r3, #128	@ 0x80
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e2c1      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb8:	f7fc fb7a 	bl	80013b0 <HAL_GetREVID>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d817      	bhi.n	8004cf6 <HAL_RCC_OscConfig+0x35e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d108      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x348>
 8004cce:	4b70      	ldr	r3, [pc, #448]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004cd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cdc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cde:	e075      	b.n	8004dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	069b      	lsls	r3, r3, #26
 8004cee:	4968      	ldr	r1, [pc, #416]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cf4:	e06a      	b.n	8004dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cf6:	4b66      	ldr	r3, [pc, #408]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	4962      	ldr	r1, [pc, #392]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d0a:	e05f      	b.n	8004dcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d042      	beq.n	8004d9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d14:	4b5e      	ldr	r3, [pc, #376]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5d      	ldr	r2, [pc, #372]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fc fb16 	bl	8001350 <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d28:	f7fc fb12 	bl	8001350 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e280      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d3a:	4b55      	ldr	r3, [pc, #340]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d46:	f7fc fb33 	bl	80013b0 <HAL_GetREVID>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d817      	bhi.n	8004d84 <HAL_RCC_OscConfig+0x3ec>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d108      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3d6>
 8004d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d64:	4a4a      	ldr	r2, [pc, #296]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d6a:	6053      	str	r3, [r2, #4]
 8004d6c:	e02e      	b.n	8004dcc <HAL_RCC_OscConfig+0x434>
 8004d6e:	4b48      	ldr	r3, [pc, #288]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	069b      	lsls	r3, r3, #26
 8004d7c:	4944      	ldr	r1, [pc, #272]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
 8004d82:	e023      	b.n	8004dcc <HAL_RCC_OscConfig+0x434>
 8004d84:	4b42      	ldr	r3, [pc, #264]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	493f      	ldr	r1, [pc, #252]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60cb      	str	r3, [r1, #12]
 8004d98:	e018      	b.n	8004dcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fc fad3 	bl	8001350 <HAL_GetTick>
 8004daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dae:	f7fc facf 	bl	8001350 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e23d      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dc0:	4b33      	ldr	r3, [pc, #204]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d036      	beq.n	8004e46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d019      	beq.n	8004e14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de4:	4a2a      	ldr	r2, [pc, #168]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dec:	f7fc fab0 	bl	8001350 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df4:	f7fc faac 	bl	8001350 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e21a      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e06:	4b22      	ldr	r3, [pc, #136]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x45c>
 8004e12:	e018      	b.n	8004e46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e14:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e18:	4a1d      	ldr	r2, [pc, #116]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fc fa96 	bl	8001350 <HAL_GetTick>
 8004e24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e28:	f7fc fa92 	bl	8001350 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e200      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e3a:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d039      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01c      	beq.n	8004e94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e66:	f7fc fa73 	bl	8001350 <HAL_GetTick>
 8004e6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e6e:	f7fc fa6f 	bl	8001350 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e1dd      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <HAL_RCC_OscConfig+0x4f8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x4d6>
 8004e8c:	e01b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x52e>
 8004e8e:	bf00      	nop
 8004e90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e94:	4b9b      	ldr	r3, [pc, #620]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a9a      	ldr	r2, [pc, #616]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ea0:	f7fc fa56 	bl	8001350 <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ea8:	f7fc fa52 	bl	8001350 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e1c0      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eba:	4b92      	ldr	r3, [pc, #584]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8081 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8005108 <HAL_RCC_OscConfig+0x770>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a8b      	ldr	r2, [pc, #556]	@ (8005108 <HAL_RCC_OscConfig+0x770>)
 8004eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ee0:	f7fc fa36 	bl	8001350 <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee8:	f7fc fa32 	bl	8001350 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	@ 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e1a0      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004efa:	4b83      	ldr	r3, [pc, #524]	@ (8005108 <HAL_RCC_OscConfig+0x770>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x584>
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	4a7c      	ldr	r2, [pc, #496]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1a:	e02d      	b.n	8004f78 <HAL_RCC_OscConfig+0x5e0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10c      	bne.n	8004f3e <HAL_RCC_OscConfig+0x5a6>
 8004f24:	4b77      	ldr	r3, [pc, #476]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f28:	4a76      	ldr	r2, [pc, #472]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f30:	4b74      	ldr	r3, [pc, #464]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	4a73      	ldr	r2, [pc, #460]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f36:	f023 0304 	bic.w	r3, r3, #4
 8004f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3c:	e01c      	b.n	8004f78 <HAL_RCC_OscConfig+0x5e0>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x5c8>
 8004f46:	4b6f      	ldr	r3, [pc, #444]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f52:	4b6c      	ldr	r3, [pc, #432]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	4a6b      	ldr	r2, [pc, #428]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCC_OscConfig+0x5e0>
 8004f60:	4b68      	ldr	r3, [pc, #416]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f64:	4a67      	ldr	r2, [pc, #412]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6c:	4b65      	ldr	r3, [pc, #404]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f70:	4a64      	ldr	r2, [pc, #400]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004f72:	f023 0304 	bic.w	r3, r3, #4
 8004f76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fc f9e6 	bl	8001350 <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fc f9e2 	bl	8001350 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e14e      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f9e:	4b59      	ldr	r3, [pc, #356]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0ee      	beq.n	8004f88 <HAL_RCC_OscConfig+0x5f0>
 8004faa:	e014      	b.n	8004fd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fc f9d0 	bl	8001350 <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fc f9cc 	bl	8001350 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e138      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fca:	4b4e      	ldr	r3, [pc, #312]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ee      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 812d 	beq.w	800523a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fe0:	4b48      	ldr	r3, [pc, #288]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fe8:	2b18      	cmp	r3, #24
 8004fea:	f000 80bd 	beq.w	8005168 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	f040 809e 	bne.w	8005134 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff8:	4b42      	ldr	r3, [pc, #264]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a41      	ldr	r2, [pc, #260]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8004ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc f9a4 	bl	8001350 <HAL_GetTick>
 8005008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500c:	f7fc f9a0 	bl	8001350 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e10e      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800501e:	4b39      	ldr	r3, [pc, #228]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502a:	4b36      	ldr	r3, [pc, #216]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 800502c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800502e:	4b37      	ldr	r3, [pc, #220]	@ (800510c <HAL_RCC_OscConfig+0x774>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800503a:	0112      	lsls	r2, r2, #4
 800503c:	430a      	orrs	r2, r1
 800503e:	4931      	ldr	r1, [pc, #196]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	628b      	str	r3, [r1, #40]	@ 0x28
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	3b01      	subs	r3, #1
 800504a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005052:	3b01      	subs	r3, #1
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	b29b      	uxth	r3, r3
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506c:	3b01      	subs	r3, #1
 800506e:	061b      	lsls	r3, r3, #24
 8005070:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005074:	4923      	ldr	r1, [pc, #140]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800507a:	4b22      	ldr	r3, [pc, #136]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	4a21      	ldr	r2, [pc, #132]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005086:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8005088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800508a:	4b21      	ldr	r3, [pc, #132]	@ (8005110 <HAL_RCC_OscConfig+0x778>)
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005092:	00d2      	lsls	r2, r2, #3
 8005094:	491b      	ldr	r1, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800509a:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	f023 020c 	bic.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	4917      	ldr	r1, [pc, #92]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050ac:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	f023 0202 	bic.w	r2, r3, #2
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b8:	4912      	ldr	r1, [pc, #72]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050be:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	4a10      	ldr	r2, [pc, #64]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050e2:	4b08      	ldr	r3, [pc, #32]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	4a07      	ldr	r2, [pc, #28]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ee:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a04      	ldr	r2, [pc, #16]	@ (8005104 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fc f929 	bl	8001350 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005100:	e011      	b.n	8005126 <HAL_RCC_OscConfig+0x78e>
 8005102:	bf00      	nop
 8005104:	58024400 	.word	0x58024400
 8005108:	58024800 	.word	0x58024800
 800510c:	fffffc0c 	.word	0xfffffc0c
 8005110:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005114:	f7fc f91c 	bl	8001350 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e08a      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005126:	4b47      	ldr	r3, [pc, #284]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x77c>
 8005132:	e082      	b.n	800523a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005134:	4b43      	ldr	r3, [pc, #268]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a42      	ldr	r2, [pc, #264]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 800513a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800513e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fc f906 	bl	8001350 <HAL_GetTick>
 8005144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005148:	f7fc f902 	bl	8001350 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e070      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800515a:	4b3a      	ldr	r3, [pc, #232]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x7b0>
 8005166:	e068      	b.n	800523a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005168:	4b36      	ldr	r3, [pc, #216]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800516e:	4b35      	ldr	r3, [pc, #212]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	2b01      	cmp	r3, #1
 800517a:	d031      	beq.n	80051e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0203 	and.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d12a      	bne.n	80051e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d122      	bne.n	80051e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d11a      	bne.n	80051e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	0a5b      	lsrs	r3, r3, #9
 80051ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d111      	bne.n	80051e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d108      	bne.n	80051e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	0e1b      	lsrs	r3, r3, #24
 80051d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e02b      	b.n	800523c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051e4:	4b17      	ldr	r3, [pc, #92]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 80051e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d01f      	beq.n	800523a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051fa:	4b12      	ldr	r3, [pc, #72]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	4a11      	ldr	r2, [pc, #68]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005206:	f7fc f8a3 	bl	8001350 <HAL_GetTick>
 800520a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800520c:	bf00      	nop
 800520e:	f7fc f89f 	bl	8001350 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	4293      	cmp	r3, r2
 8005218:	d0f9      	beq.n	800520e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 800521c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800521e:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <HAL_RCC_OscConfig+0x8b0>)
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005226:	00d2      	lsls	r2, r2, #3
 8005228:	4906      	ldr	r1, [pc, #24]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 800522a:	4313      	orrs	r3, r2
 800522c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800522e:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	4a04      	ldr	r2, [pc, #16]	@ (8005244 <HAL_RCC_OscConfig+0x8ac>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3730      	adds	r7, #48	@ 0x30
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	58024400 	.word	0x58024400
 8005248:	ffff0007 	.word	0xffff0007

0800524c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e19c      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b8a      	ldr	r3, [pc, #552]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d910      	bls.n	8005290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b87      	ldr	r3, [pc, #540]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 020f 	bic.w	r2, r3, #15
 8005276:	4985      	ldr	r1, [pc, #532]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b83      	ldr	r3, [pc, #524]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e184      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d908      	bls.n	80052be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052ac:	4b78      	ldr	r3, [pc, #480]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	4975      	ldr	r1, [pc, #468]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d010      	beq.n	80052ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	4b70      	ldr	r3, [pc, #448]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d908      	bls.n	80052ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052da:	4b6d      	ldr	r3, [pc, #436]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	496a      	ldr	r1, [pc, #424]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	4b64      	ldr	r3, [pc, #400]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005304:	429a      	cmp	r2, r3
 8005306:	d908      	bls.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005308:	4b61      	ldr	r3, [pc, #388]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	495e      	ldr	r1, [pc, #376]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005316:	4313      	orrs	r3, r2
 8005318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d010      	beq.n	8005348 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	4b59      	ldr	r3, [pc, #356]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005332:	429a      	cmp	r2, r3
 8005334:	d908      	bls.n	8005348 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005336:	4b56      	ldr	r3, [pc, #344]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	4953      	ldr	r1, [pc, #332]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005344:	4313      	orrs	r3, r2
 8005346:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d010      	beq.n	8005376 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	4b4d      	ldr	r3, [pc, #308]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	429a      	cmp	r2, r3
 8005362:	d908      	bls.n	8005376 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005364:	4b4a      	ldr	r3, [pc, #296]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f023 020f 	bic.w	r2, r3, #15
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4947      	ldr	r1, [pc, #284]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005372:	4313      	orrs	r3, r2
 8005374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d055      	beq.n	800542e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005382:	4b43      	ldr	r3, [pc, #268]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	4940      	ldr	r1, [pc, #256]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005390:	4313      	orrs	r3, r2
 8005392:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d107      	bne.n	80053ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800539c:	4b3c      	ldr	r3, [pc, #240]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d121      	bne.n	80053ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0f6      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d107      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053b4:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d115      	bne.n	80053ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0ea      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053cc:	4b30      	ldr	r3, [pc, #192]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0de      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0d6      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ec:	4b28      	ldr	r3, [pc, #160]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f023 0207 	bic.w	r2, r3, #7
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4925      	ldr	r1, [pc, #148]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fe:	f7fb ffa7 	bl	8001350 <HAL_GetTick>
 8005402:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005404:	e00a      	b.n	800541c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005406:	f7fb ffa3 	bl	8001350 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e0be      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541c:	4b1c      	ldr	r3, [pc, #112]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	429a      	cmp	r2, r3
 800542c:	d1eb      	bne.n	8005406 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	429a      	cmp	r2, r3
 8005448:	d208      	bcs.n	800545c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800544a:	4b11      	ldr	r3, [pc, #68]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f023 020f 	bic.w	r2, r3, #15
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	490e      	ldr	r1, [pc, #56]	@ (8005490 <HAL_RCC_ClockConfig+0x244>)
 8005458:	4313      	orrs	r3, r2
 800545a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d214      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b08      	ldr	r3, [pc, #32]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 020f 	bic.w	r2, r3, #15
 8005472:	4906      	ldr	r1, [pc, #24]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	4313      	orrs	r3, r2
 8005478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b04      	ldr	r3, [pc, #16]	@ (800548c <HAL_RCC_ClockConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d005      	beq.n	8005494 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e086      	b.n	800559a <HAL_RCC_ClockConfig+0x34e>
 800548c:	52002000 	.word	0x52002000
 8005490:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	4b3f      	ldr	r3, [pc, #252]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d208      	bcs.n	80054c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054b0:	4b3c      	ldr	r3, [pc, #240]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	4939      	ldr	r1, [pc, #228]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d010      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	4b34      	ldr	r3, [pc, #208]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054da:	429a      	cmp	r2, r3
 80054dc:	d208      	bcs.n	80054f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054de:	4b31      	ldr	r3, [pc, #196]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	492e      	ldr	r1, [pc, #184]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d010      	beq.n	800551e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	4b28      	ldr	r3, [pc, #160]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005508:	429a      	cmp	r2, r3
 800550a:	d208      	bcs.n	800551e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	4922      	ldr	r1, [pc, #136]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 800551a:	4313      	orrs	r3, r2
 800551c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005536:	429a      	cmp	r2, r3
 8005538:	d208      	bcs.n	800554c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800553a:	4b1a      	ldr	r3, [pc, #104]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	4917      	ldr	r1, [pc, #92]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 8005548:	4313      	orrs	r3, r2
 800554a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800554c:	f000 f834 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b14      	ldr	r3, [pc, #80]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	4912      	ldr	r1, [pc, #72]	@ (80055a8 <HAL_RCC_ClockConfig+0x35c>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
 8005568:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800556a:	4b0e      	ldr	r3, [pc, #56]	@ (80055a4 <HAL_RCC_ClockConfig+0x358>)
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	4a0d      	ldr	r2, [pc, #52]	@ (80055a8 <HAL_RCC_ClockConfig+0x35c>)
 8005574:	5cd3      	ldrb	r3, [r2, r3]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	4a0a      	ldr	r2, [pc, #40]	@ (80055ac <HAL_RCC_ClockConfig+0x360>)
 8005582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005584:	4a0a      	ldr	r2, [pc, #40]	@ (80055b0 <HAL_RCC_ClockConfig+0x364>)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800558a:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <HAL_RCC_ClockConfig+0x368>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fb fc26 	bl	8000de0 <HAL_InitTick>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
 80055a8:	0800e804 	.word	0x0800e804
 80055ac:	24000004 	.word	0x24000004
 80055b0:	24000000 	.word	0x24000000
 80055b4:	24000008 	.word	0x24000008

080055b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	@ 0x24
 80055bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055be:	4bb3      	ldr	r3, [pc, #716]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055c6:	2b18      	cmp	r3, #24
 80055c8:	f200 8155 	bhi.w	8005876 <HAL_RCC_GetSysClockFreq+0x2be>
 80055cc:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005639 	.word	0x08005639
 80055d8:	08005877 	.word	0x08005877
 80055dc:	08005877 	.word	0x08005877
 80055e0:	08005877 	.word	0x08005877
 80055e4:	08005877 	.word	0x08005877
 80055e8:	08005877 	.word	0x08005877
 80055ec:	08005877 	.word	0x08005877
 80055f0:	08005877 	.word	0x08005877
 80055f4:	0800565f 	.word	0x0800565f
 80055f8:	08005877 	.word	0x08005877
 80055fc:	08005877 	.word	0x08005877
 8005600:	08005877 	.word	0x08005877
 8005604:	08005877 	.word	0x08005877
 8005608:	08005877 	.word	0x08005877
 800560c:	08005877 	.word	0x08005877
 8005610:	08005877 	.word	0x08005877
 8005614:	08005665 	.word	0x08005665
 8005618:	08005877 	.word	0x08005877
 800561c:	08005877 	.word	0x08005877
 8005620:	08005877 	.word	0x08005877
 8005624:	08005877 	.word	0x08005877
 8005628:	08005877 	.word	0x08005877
 800562c:	08005877 	.word	0x08005877
 8005630:	08005877 	.word	0x08005877
 8005634:	0800566b 	.word	0x0800566b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005638:	4b94      	ldr	r3, [pc, #592]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005644:	4b91      	ldr	r3, [pc, #580]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	08db      	lsrs	r3, r3, #3
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	4a90      	ldr	r2, [pc, #576]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005656:	e111      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005658:	4b8d      	ldr	r3, [pc, #564]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800565a:	61bb      	str	r3, [r7, #24]
      break;
 800565c:	e10e      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800565e:	4b8d      	ldr	r3, [pc, #564]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005660:	61bb      	str	r3, [r7, #24]
      break;
 8005662:	e10b      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005664:	4b8c      	ldr	r3, [pc, #560]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005666:	61bb      	str	r3, [r7, #24]
      break;
 8005668:	e108      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800566a:	4b88      	ldr	r3, [pc, #544]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005674:	4b85      	ldr	r3, [pc, #532]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800567e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005680:	4b82      	ldr	r3, [pc, #520]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800568a:	4b80      	ldr	r3, [pc, #512]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568e:	08db      	lsrs	r3, r3, #3
 8005690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80e1 	beq.w	8005870 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	f000 8083 	beq.w	80057bc <HAL_RCC_GetSysClockFreq+0x204>
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	f200 80a1 	bhi.w	8005800 <HAL_RCC_GetSysClockFreq+0x248>
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0x114>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d056      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056ca:	e099      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056cc:	4b6f      	ldr	r3, [pc, #444]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02d      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056d8:	4b6c      	ldr	r3, [pc, #432]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	4a6b      	ldr	r2, [pc, #428]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
 80056e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b62      	ldr	r3, [pc, #392]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a02 	vldr	s12, [r7, #8]
 8005716:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800589c <HAL_RCC_GetSysClockFreq+0x2e4>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005732:	e087      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b51      	ldr	r3, [pc, #324]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a02 	vldr	s12, [r7, #8]
 800575a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800589c <HAL_RCC_GetSysClockFreq+0x2e4>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005776:	e065      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578a:	4b40      	ldr	r3, [pc, #256]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579a:	ed97 6a02 	vldr	s12, [r7, #8]
 800579e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800589c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ba:	e043      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b2f      	ldr	r3, [pc, #188]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a02 	vldr	s12, [r7, #8]
 80057e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800589c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057fe:	e021      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b1e      	ldr	r3, [pc, #120]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a02 	vldr	s12, [r7, #8]
 8005826:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800589c <HAL_RCC_GetSysClockFreq+0x2e4>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005842:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005844:	4b11      	ldr	r3, [pc, #68]	@ (800588c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	0a5b      	lsrs	r3, r3, #9
 800584a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584e:	3301      	adds	r3, #1
 8005850:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	ee07 3a90 	vmov	s15, r3
 8005858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800585c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005868:	ee17 3a90 	vmov	r3, s15
 800586c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800586e:	e005      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
      break;
 8005874:	e002      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005876:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005878:	61bb      	str	r3, [r7, #24]
      break;
 800587a:	bf00      	nop
  }

  return sysclockfreq;
 800587c:	69bb      	ldr	r3, [r7, #24]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3724      	adds	r7, #36	@ 0x24
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	58024400 	.word	0x58024400
 8005890:	03d09000 	.word	0x03d09000
 8005894:	003d0900 	.word	0x003d0900
 8005898:	007a1200 	.word	0x007a1200
 800589c:	46000000 	.word	0x46000000
 80058a0:	4c742400 	.word	0x4c742400
 80058a4:	4a742400 	.word	0x4a742400
 80058a8:	4af42400 	.word	0x4af42400

080058ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058b2:	f7ff fe81 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 80058b6:	4602      	mov	r2, r0
 80058b8:	4b10      	ldr	r3, [pc, #64]	@ (80058fc <HAL_RCC_GetHCLKFreq+0x50>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	490f      	ldr	r1, [pc, #60]	@ (8005900 <HAL_RCC_GetHCLKFreq+0x54>)
 80058c4:	5ccb      	ldrb	r3, [r1, r3]
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	fa22 f303 	lsr.w	r3, r2, r3
 80058ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058d0:	4b0a      	ldr	r3, [pc, #40]	@ (80058fc <HAL_RCC_GetHCLKFreq+0x50>)
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	4a09      	ldr	r2, [pc, #36]	@ (8005900 <HAL_RCC_GetHCLKFreq+0x54>)
 80058da:	5cd3      	ldrb	r3, [r2, r3]
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	fa22 f303 	lsr.w	r3, r2, r3
 80058e6:	4a07      	ldr	r2, [pc, #28]	@ (8005904 <HAL_RCC_GetHCLKFreq+0x58>)
 80058e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058ea:	4a07      	ldr	r2, [pc, #28]	@ (8005908 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058f0:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <HAL_RCC_GetHCLKFreq+0x58>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	58024400 	.word	0x58024400
 8005900:	0800e804 	.word	0x0800e804
 8005904:	24000004 	.word	0x24000004
 8005908:	24000000 	.word	0x24000000

0800590c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005910:	f7ff ffcc 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 8005914:	4602      	mov	r2, r0
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	4904      	ldr	r1, [pc, #16]	@ (8005934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005922:	5ccb      	ldrb	r3, [r1, r3]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800592c:	4618      	mov	r0, r3
 800592e:	bd80      	pop	{r7, pc}
 8005930:	58024400 	.word	0x58024400
 8005934:	0800e804 	.word	0x0800e804

08005938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800593c:	f7ff ffb6 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 8005940:	4602      	mov	r2, r0
 8005942:	4b06      	ldr	r3, [pc, #24]	@ (800595c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	4904      	ldr	r1, [pc, #16]	@ (8005960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800594e:	5ccb      	ldrb	r3, [r1, r3]
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	58024400 	.word	0x58024400
 8005960:	0800e804 	.word	0x0800e804

08005964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	223f      	movs	r2, #63	@ 0x3f
 8005972:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005974:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <HAL_RCC_GetClockConfig+0x7c>)
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0207 	and.w	r2, r3, #7
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005980:	4b17      	ldr	r3, [pc, #92]	@ (80059e0 <HAL_RCC_GetClockConfig+0x7c>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800598c:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <HAL_RCC_GetClockConfig+0x7c>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 020f 	and.w	r2, r3, #15
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005998:	4b11      	ldr	r3, [pc, #68]	@ (80059e0 <HAL_RCC_GetClockConfig+0x7c>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80059a4:	4b0e      	ldr	r3, [pc, #56]	@ (80059e0 <HAL_RCC_GetClockConfig+0x7c>)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80059b0:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <HAL_RCC_GetClockConfig+0x7c>)
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80059bc:	4b08      	ldr	r3, [pc, #32]	@ (80059e0 <HAL_RCC_GetClockConfig+0x7c>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059c8:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <HAL_RCC_GetClockConfig+0x80>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 020f 	and.w	r2, r3, #15
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	58024400 	.word	0x58024400
 80059e4:	52002000 	.word	0x52002000

080059e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ec:	b0ca      	sub	sp, #296	@ 0x128
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059fa:	2300      	movs	r3, #0
 80059fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a0c:	2500      	movs	r5, #0
 8005a0e:	ea54 0305 	orrs.w	r3, r4, r5
 8005a12:	d049      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a1e:	d02f      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a24:	d828      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a2a:	d01a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a30:	d822      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a3a:	d007      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a3c:	e01c      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a3e:	4bb8      	ldr	r3, [pc, #736]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	4ab7      	ldr	r2, [pc, #732]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a4a:	e01a      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	3308      	adds	r3, #8
 8005a52:	2102      	movs	r1, #2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 fc8f 	bl	8007378 <RCCEx_PLL2_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a60:	e00f      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	3328      	adds	r3, #40	@ 0x28
 8005a68:	2102      	movs	r1, #2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 fd36 	bl	80074dc <RCCEx_PLL3_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a76:	e004      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a7e:	e000      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a8a:	4ba5      	ldr	r3, [pc, #660]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a98:	4aa1      	ldr	r2, [pc, #644]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a9e:	e003      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ab4:	f04f 0900 	mov.w	r9, #0
 8005ab8:	ea58 0309 	orrs.w	r3, r8, r9
 8005abc:	d047      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d82a      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005ae5 	.word	0x08005ae5
 8005ad4:	08005af3 	.word	0x08005af3
 8005ad8:	08005b09 	.word	0x08005b09
 8005adc:	08005b27 	.word	0x08005b27
 8005ae0:	08005b27 	.word	0x08005b27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae4:	4b8e      	ldr	r3, [pc, #568]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	4a8d      	ldr	r2, [pc, #564]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af0:	e01a      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	3308      	adds	r3, #8
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 fc3c 	bl	8007378 <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b06:	e00f      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	3328      	adds	r3, #40	@ 0x28
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fce3 	bl	80074dc <RCCEx_PLL3_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b1c:	e004      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b30:	4b7b      	ldr	r3, [pc, #492]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	f023 0107 	bic.w	r1, r3, #7
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3e:	4a78      	ldr	r2, [pc, #480]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b5a:	f04f 0b00 	mov.w	fp, #0
 8005b5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b62:	d04c      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b6e:	d030      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b74:	d829      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b78:	d02d      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b7c:	d825      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b7e:	2b80      	cmp	r3, #128	@ 0x80
 8005b80:	d018      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b82:	2b80      	cmp	r3, #128	@ 0x80
 8005b84:	d821      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b8a:	2b40      	cmp	r3, #64	@ 0x40
 8005b8c:	d007      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b8e:	e01c      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b90:	4b63      	ldr	r3, [pc, #396]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	4a62      	ldr	r2, [pc, #392]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b9c:	e01c      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fbe6 	bl	8007378 <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bb2:	e011      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	3328      	adds	r3, #40	@ 0x28
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 fc8d 	bl	80074dc <RCCEx_PLL3_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bc8:	e006      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005be0:	4b4f      	ldr	r3, [pc, #316]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bee:	4a4c      	ldr	r2, [pc, #304]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf4:	e003      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	d053      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c2a:	d035      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c30:	d82e      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c36:	d031      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c3c:	d828      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c42:	d01a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c48:	d822      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c52:	d007      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c54:	e01c      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4b32      	ldr	r3, [pc, #200]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	4a31      	ldr	r2, [pc, #196]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c62:	e01c      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	3308      	adds	r3, #8
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fb83 	bl	8007378 <RCCEx_PLL2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c78:	e011      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	3328      	adds	r3, #40	@ 0x28
 8005c80:	2100      	movs	r1, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fc2a 	bl	80074dc <RCCEx_PLL3_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c8e:	e006      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c96:	e002      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c98:	bf00      	nop
 8005c9a:	e000      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005caa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cbc:	e003      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cdc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	d056      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cf2:	d038      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005cf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cf8:	d831      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cfa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cfe:	d034      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d04:	d82b      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d0a:	d01d      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d10:	d825      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d006      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d1c:	e01f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d1e:	bf00      	nop
 8005d20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d24:	4ba2      	ldr	r3, [pc, #648]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	4aa1      	ldr	r2, [pc, #644]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d30:	e01c      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	3308      	adds	r3, #8
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fb1c 	bl	8007378 <RCCEx_PLL2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d46:	e011      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4c:	3328      	adds	r3, #40	@ 0x28
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fbc3 	bl	80074dc <RCCEx_PLL3_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d5c:	e006      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d74:	4b8e      	ldr	r3, [pc, #568]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d84:	4a8a      	ldr	r2, [pc, #552]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d86:	430b      	orrs	r3, r1
 8005d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d8a:	e003      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005da4:	2300      	movs	r3, #0
 8005da6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005daa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dae:	460b      	mov	r3, r1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	d03a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dba:	2b30      	cmp	r3, #48	@ 0x30
 8005dbc:	d01f      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dbe:	2b30      	cmp	r3, #48	@ 0x30
 8005dc0:	d819      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d00c      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d815      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d019      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d111      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd2:	4b77      	ldr	r3, [pc, #476]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	4a76      	ldr	r2, [pc, #472]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dde:	e011      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	3308      	adds	r3, #8
 8005de6:	2102      	movs	r1, #2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fac5 	bl	8007378 <RCCEx_PLL2_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005df4:	e006      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dfc:	e002      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dfe:	bf00      	nop
 8005e00:	e000      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e0c:	4b68      	ldr	r3, [pc, #416]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1a:	4a65      	ldr	r2, [pc, #404]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e20:	e003      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4313      	orrs	r3, r2
 8005e48:	d051      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e54:	d035      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e5a:	d82e      	bhi.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e60:	d031      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e66:	d828      	bhi.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e6c:	d01a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e72:	d822      	bhi.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e7e:	e01c      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e80:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	4a4a      	ldr	r2, [pc, #296]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e8c:	e01c      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	3308      	adds	r3, #8
 8005e94:	2100      	movs	r1, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 fa6e 	bl	8007378 <RCCEx_PLL2_Config>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea2:	e011      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea8:	3328      	adds	r3, #40	@ 0x28
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 fb15 	bl	80074dc <RCCEx_PLL3_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eb8:	e006      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ec0:	e002      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ed0:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ede:	4a34      	ldr	r2, [pc, #208]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ee4:	e003      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005efe:	2300      	movs	r3, #0
 8005f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	d056      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f18:	d033      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f1e:	d82c      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f24:	d02f      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f2a:	d826      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f30:	d02b      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f36:	d820      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f3c:	d012      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f42:	d81a      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d022      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f4c:	d115      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	3308      	adds	r3, #8
 8005f54:	2101      	movs	r1, #1
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 fa0e 	bl	8007378 <RCCEx_PLL2_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f62:	e015      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	3328      	adds	r3, #40	@ 0x28
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fab5 	bl	80074dc <RCCEx_PLL3_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f78:	e00a      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f80:	e006      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10d      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa6:	4a02      	ldr	r2, [pc, #8]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fac:	e006      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	d055      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fe8:	d033      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fee:	d82c      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d02f      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffa:	d826      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ffc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006000:	d02b      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006002:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006006:	d820      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800600c:	d012      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800600e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006012:	d81a      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d022      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800601c:	d115      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	3308      	adds	r3, #8
 8006024:	2101      	movs	r1, #1
 8006026:	4618      	mov	r0, r3
 8006028:	f001 f9a6 	bl	8007378 <RCCEx_PLL2_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006032:	e015      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	3328      	adds	r3, #40	@ 0x28
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f001 fa4d 	bl	80074dc <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006048:	e00a      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006050:	e006      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006052:	bf00      	nop
 8006054:	e004      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006056:	bf00      	nop
 8006058:	e002      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800605a:	bf00      	nop
 800605c:	e000      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800605e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006068:	4ba3      	ldr	r3, [pc, #652]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006078:	4a9f      	ldr	r2, [pc, #636]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800607a:	430b      	orrs	r3, r1
 800607c:	6593      	str	r3, [r2, #88]	@ 0x58
 800607e:	e003      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006098:	2300      	movs	r3, #0
 800609a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800609e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060a2:	460b      	mov	r3, r1
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d037      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b2:	d00e      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b8:	d816      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c2:	d111      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c4:	4b8c      	ldr	r3, [pc, #560]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	4a8b      	ldr	r2, [pc, #556]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060d0:	e00f      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	3308      	adds	r3, #8
 80060d8:	2101      	movs	r1, #1
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 f94c 	bl	8007378 <RCCEx_PLL2_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060e6:	e004      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ee:	e000      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060fa:	4b7f      	ldr	r3, [pc, #508]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006108:	4a7b      	ldr	r2, [pc, #492]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610a:	430b      	orrs	r3, r1
 800610c:	6513      	str	r3, [r2, #80]	@ 0x50
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800612e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d039      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800613e:	2b03      	cmp	r3, #3
 8006140:	d81c      	bhi.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006142:	a201      	add	r2, pc, #4	@ (adr r2, 8006148 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	08006185 	.word	0x08006185
 800614c:	08006159 	.word	0x08006159
 8006150:	08006167 	.word	0x08006167
 8006154:	08006185 	.word	0x08006185
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4b67      	ldr	r3, [pc, #412]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	4a66      	ldr	r2, [pc, #408]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006164:	e00f      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	3308      	adds	r3, #8
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f001 f902 	bl	8007378 <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800617a:	e004      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800618e:	4b5a      	ldr	r3, [pc, #360]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006192:	f023 0103 	bic.w	r1, r3, #3
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619c:	4a56      	ldr	r2, [pc, #344]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619e:	430b      	orrs	r3, r1
 80061a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061a2:	e003      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061c6:	460b      	mov	r3, r1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f000 809f 	beq.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ce:	4b4b      	ldr	r3, [pc, #300]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a4a      	ldr	r2, [pc, #296]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061da:	f7fb f8b9 	bl	8001350 <HAL_GetTick>
 80061de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e2:	e00b      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e4:	f7fb f8b4 	bl	8001350 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b64      	cmp	r3, #100	@ 0x64
 80061f2:	d903      	bls.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061fa:	e005      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061fc:	4b3f      	ldr	r3, [pc, #252]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ed      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620c:	2b00      	cmp	r3, #0
 800620e:	d179      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006210:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006212:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800621c:	4053      	eors	r3, r2
 800621e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006222:	2b00      	cmp	r3, #0
 8006224:	d015      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006226:	4b34      	ldr	r3, [pc, #208]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800622e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006232:	4b31      	ldr	r3, [pc, #196]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006236:	4a30      	ldr	r2, [pc, #192]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800623c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800623e:	4b2e      	ldr	r3, [pc, #184]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006242:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006248:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800624a:	4a2b      	ldr	r2, [pc, #172]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006250:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800625a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800625e:	d118      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fb f876 	bl	8001350 <HAL_GetTick>
 8006264:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006268:	e00d      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626a:	f7fb f871 	bl	8001350 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006274:	1ad2      	subs	r2, r2, r3
 8006276:	f241 3388 	movw	r3, #5000	@ 0x1388
 800627a:	429a      	cmp	r2, r3
 800627c:	d903      	bls.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006284:	e005      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006286:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0eb      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006296:	2b00      	cmp	r3, #0
 8006298:	d129      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062aa:	d10e      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062ac:	4b12      	ldr	r3, [pc, #72]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062bc:	091a      	lsrs	r2, r3, #4
 80062be:	4b10      	ldr	r3, [pc, #64]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	4a0d      	ldr	r2, [pc, #52]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6113      	str	r3, [r2, #16]
 80062c8:	e005      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062ca:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	4a0a      	ldr	r2, [pc, #40]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062d4:	6113      	str	r3, [r2, #16]
 80062d6:	4b08      	ldr	r3, [pc, #32]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e6:	4a04      	ldr	r2, [pc, #16]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ec:	e00e      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80062f6:	e009      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80062f8:	58024400 	.word	0x58024400
 80062fc:	58024800 	.word	0x58024800
 8006300:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f002 0301 	and.w	r3, r2, #1
 8006318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800631c:	2300      	movs	r3, #0
 800631e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006322:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006326:	460b      	mov	r3, r1
 8006328:	4313      	orrs	r3, r2
 800632a:	f000 8089 	beq.w	8006440 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006334:	2b28      	cmp	r3, #40	@ 0x28
 8006336:	d86b      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006338:	a201      	add	r2, pc, #4	@ (adr r2, 8006340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006419 	.word	0x08006419
 8006344:	08006411 	.word	0x08006411
 8006348:	08006411 	.word	0x08006411
 800634c:	08006411 	.word	0x08006411
 8006350:	08006411 	.word	0x08006411
 8006354:	08006411 	.word	0x08006411
 8006358:	08006411 	.word	0x08006411
 800635c:	08006411 	.word	0x08006411
 8006360:	080063e5 	.word	0x080063e5
 8006364:	08006411 	.word	0x08006411
 8006368:	08006411 	.word	0x08006411
 800636c:	08006411 	.word	0x08006411
 8006370:	08006411 	.word	0x08006411
 8006374:	08006411 	.word	0x08006411
 8006378:	08006411 	.word	0x08006411
 800637c:	08006411 	.word	0x08006411
 8006380:	080063fb 	.word	0x080063fb
 8006384:	08006411 	.word	0x08006411
 8006388:	08006411 	.word	0x08006411
 800638c:	08006411 	.word	0x08006411
 8006390:	08006411 	.word	0x08006411
 8006394:	08006411 	.word	0x08006411
 8006398:	08006411 	.word	0x08006411
 800639c:	08006411 	.word	0x08006411
 80063a0:	08006419 	.word	0x08006419
 80063a4:	08006411 	.word	0x08006411
 80063a8:	08006411 	.word	0x08006411
 80063ac:	08006411 	.word	0x08006411
 80063b0:	08006411 	.word	0x08006411
 80063b4:	08006411 	.word	0x08006411
 80063b8:	08006411 	.word	0x08006411
 80063bc:	08006411 	.word	0x08006411
 80063c0:	08006419 	.word	0x08006419
 80063c4:	08006411 	.word	0x08006411
 80063c8:	08006411 	.word	0x08006411
 80063cc:	08006411 	.word	0x08006411
 80063d0:	08006411 	.word	0x08006411
 80063d4:	08006411 	.word	0x08006411
 80063d8:	08006411 	.word	0x08006411
 80063dc:	08006411 	.word	0x08006411
 80063e0:	08006419 	.word	0x08006419
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	3308      	adds	r3, #8
 80063ea:	2101      	movs	r1, #1
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 ffc3 	bl	8007378 <RCCEx_PLL2_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063f8:	e00f      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fe:	3328      	adds	r3, #40	@ 0x28
 8006400:	2101      	movs	r1, #1
 8006402:	4618      	mov	r0, r3
 8006404:	f001 f86a 	bl	80074dc <RCCEx_PLL3_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800640e:	e004      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006416:	e000      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006422:	4bbf      	ldr	r3, [pc, #764]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006430:	4abb      	ldr	r2, [pc, #748]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006432:	430b      	orrs	r3, r1
 8006434:	6553      	str	r3, [r2, #84]	@ 0x54
 8006436:	e003      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f002 0302 	and.w	r3, r2, #2
 800644c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006450:	2300      	movs	r3, #0
 8006452:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006456:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800645a:	460b      	mov	r3, r1
 800645c:	4313      	orrs	r3, r2
 800645e:	d041      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006466:	2b05      	cmp	r3, #5
 8006468:	d824      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800646a:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	080064bd 	.word	0x080064bd
 8006474:	08006489 	.word	0x08006489
 8006478:	0800649f 	.word	0x0800649f
 800647c:	080064bd 	.word	0x080064bd
 8006480:	080064bd 	.word	0x080064bd
 8006484:	080064bd 	.word	0x080064bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	3308      	adds	r3, #8
 800648e:	2101      	movs	r1, #1
 8006490:	4618      	mov	r0, r3
 8006492:	f000 ff71 	bl	8007378 <RCCEx_PLL2_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800649c:	e00f      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	3328      	adds	r3, #40	@ 0x28
 80064a4:	2101      	movs	r1, #1
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f818 	bl	80074dc <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064b2:	e004      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064c6:	4b96      	ldr	r3, [pc, #600]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ca:	f023 0107 	bic.w	r1, r3, #7
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064d4:	4a92      	ldr	r2, [pc, #584]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f002 0304 	and.w	r3, r2, #4
 80064f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064f4:	2300      	movs	r3, #0
 80064f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064fe:	460b      	mov	r3, r1
 8006500:	4313      	orrs	r3, r2
 8006502:	d044      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800650c:	2b05      	cmp	r3, #5
 800650e:	d825      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006510:	a201      	add	r2, pc, #4	@ (adr r2, 8006518 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	08006565 	.word	0x08006565
 800651c:	08006531 	.word	0x08006531
 8006520:	08006547 	.word	0x08006547
 8006524:	08006565 	.word	0x08006565
 8006528:	08006565 	.word	0x08006565
 800652c:	08006565 	.word	0x08006565
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	3308      	adds	r3, #8
 8006536:	2101      	movs	r1, #1
 8006538:	4618      	mov	r0, r3
 800653a:	f000 ff1d 	bl	8007378 <RCCEx_PLL2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006544:	e00f      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	3328      	adds	r3, #40	@ 0x28
 800654c:	2101      	movs	r1, #1
 800654e:	4618      	mov	r0, r3
 8006550:	f000 ffc4 	bl	80074dc <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800655a:	e004      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800656e:	4b6c      	ldr	r3, [pc, #432]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006572:	f023 0107 	bic.w	r1, r3, #7
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657e:	4a68      	ldr	r2, [pc, #416]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6593      	str	r3, [r2, #88]	@ 0x58
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f002 0320 	and.w	r3, r2, #32
 800659a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800659e:	2300      	movs	r3, #0
 80065a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065a8:	460b      	mov	r3, r1
 80065aa:	4313      	orrs	r3, r2
 80065ac:	d055      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ba:	d033      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065c0:	d82c      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c6:	d02f      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065cc:	d826      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065d2:	d02b      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065d8:	d820      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065de:	d012      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e4:	d81a      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d022      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ee:	d115      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	3308      	adds	r3, #8
 80065f6:	2100      	movs	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 febd 	bl	8007378 <RCCEx_PLL2_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006604:	e015      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660a:	3328      	adds	r3, #40	@ 0x28
 800660c:	2102      	movs	r1, #2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 ff64 	bl	80074dc <RCCEx_PLL3_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800661a:	e00a      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006622:	e006      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006624:	bf00      	nop
 8006626:	e004      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006628:	bf00      	nop
 800662a:	e002      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800663a:	4b39      	ldr	r3, [pc, #228]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800663c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	4a35      	ldr	r2, [pc, #212]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800664c:	430b      	orrs	r3, r1
 800664e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006650:	e003      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800666a:	2300      	movs	r3, #0
 800666c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006670:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d058      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006682:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006686:	d033      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006688:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800668c:	d82c      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800668e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006692:	d02f      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006698:	d826      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800669a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800669e:	d02b      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066a4:	d820      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066aa:	d012      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b0:	d81a      	bhi.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d022      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ba:	d115      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c0:	3308      	adds	r3, #8
 80066c2:	2100      	movs	r1, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fe57 	bl	8007378 <RCCEx_PLL2_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066d0:	e015      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d6:	3328      	adds	r3, #40	@ 0x28
 80066d8:	2102      	movs	r1, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fefe 	bl	80074dc <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066e6:	e00a      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ee:	e006      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066f0:	bf00      	nop
 80066f2:	e004      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066f4:	bf00      	nop
 80066f6:	e002      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10e      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006706:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006716:	4a02      	ldr	r2, [pc, #8]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006718:	430b      	orrs	r3, r1
 800671a:	6593      	str	r3, [r2, #88]	@ 0x58
 800671c:	e006      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800671e:	bf00      	nop
 8006720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800673c:	2300      	movs	r3, #0
 800673e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006742:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006746:	460b      	mov	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	d055      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006754:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006758:	d033      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800675a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800675e:	d82c      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006764:	d02f      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800676a:	d826      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800676c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006770:	d02b      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006772:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006776:	d820      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006778:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800677c:	d012      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800677e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006782:	d81a      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d022      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800678c:	d115      	bne.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	3308      	adds	r3, #8
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fdee 	bl	8007378 <RCCEx_PLL2_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067a2:	e015      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a8:	3328      	adds	r3, #40	@ 0x28
 80067aa:	2102      	movs	r1, #2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fe95 	bl	80074dc <RCCEx_PLL3_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067b8:	e00a      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067c0:	e006      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067c2:	bf00      	nop
 80067c4:	e004      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10b      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067e8:	4a9d      	ldr	r2, [pc, #628]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ea:	430b      	orrs	r3, r1
 80067ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80067ee:	e003      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f002 0308 	and.w	r3, r2, #8
 8006804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006808:	2300      	movs	r3, #0
 800680a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800680e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006812:	460b      	mov	r3, r1
 8006814:	4313      	orrs	r3, r2
 8006816:	d01e      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006824:	d10c      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	3328      	adds	r3, #40	@ 0x28
 800682c:	2102      	movs	r1, #2
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fe54 	bl	80074dc <RCCEx_PLL3_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006840:	4b87      	ldr	r3, [pc, #540]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006844:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006850:	4a83      	ldr	r2, [pc, #524]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006852:	430b      	orrs	r3, r1
 8006854:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f002 0310 	and.w	r3, r2, #16
 8006862:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006866:	2300      	movs	r3, #0
 8006868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800686c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006870:	460b      	mov	r3, r1
 8006872:	4313      	orrs	r3, r2
 8006874:	d01e      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800687e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006882:	d10c      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006888:	3328      	adds	r3, #40	@ 0x28
 800688a:	2102      	movs	r1, #2
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fe25 	bl	80074dc <RCCEx_PLL3_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800689e:	4b70      	ldr	r3, [pc, #448]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068c4:	2300      	movs	r3, #0
 80068c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068ce:	460b      	mov	r3, r1
 80068d0:	4313      	orrs	r3, r2
 80068d2:	d03e      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e0:	d022      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e6:	d81b      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d00b      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068f2:	e015      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	3308      	adds	r3, #8
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fd3b 	bl	8007378 <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006908:	e00f      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	3328      	adds	r3, #40	@ 0x28
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fde2 	bl	80074dc <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800691e:	e004      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10b      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006932:	4b4b      	ldr	r3, [pc, #300]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006936:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006942:	4a47      	ldr	r2, [pc, #284]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006944:	430b      	orrs	r3, r1
 8006946:	6593      	str	r3, [r2, #88]	@ 0x58
 8006948:	e003      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800695e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006960:	2300      	movs	r3, #0
 8006962:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006964:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006968:	460b      	mov	r3, r1
 800696a:	4313      	orrs	r3, r2
 800696c:	d03b      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006976:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800697a:	d01f      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800697c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006980:	d818      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006986:	d003      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006988:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800698c:	d007      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800698e:	e011      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006990:	4b33      	ldr	r3, [pc, #204]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	4a32      	ldr	r2, [pc, #200]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800699a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800699c:	e00f      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	3328      	adds	r3, #40	@ 0x28
 80069a4:	2101      	movs	r1, #1
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fd98 	bl	80074dc <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069b2:	e004      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069ba:	e000      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10b      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069c6:	4b26      	ldr	r3, [pc, #152]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d6:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d8:	430b      	orrs	r3, r1
 80069da:	6553      	str	r3, [r2, #84]	@ 0x54
 80069dc:	e003      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f4:	2300      	movs	r3, #0
 80069f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069fc:	460b      	mov	r3, r1
 80069fe:	4313      	orrs	r3, r2
 8006a00:	d034      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a10:	d007      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a12:	e011      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a14:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	4a11      	ldr	r2, [pc, #68]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a20:	e00e      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	3308      	adds	r3, #8
 8006a28:	2102      	movs	r1, #2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fca4 	bl	8007378 <RCCEx_PLL2_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10d      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a48:	4b05      	ldr	r3, [pc, #20]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a56:	4a02      	ldr	r2, [pc, #8]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a5c:	e006      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a82:	460b      	mov	r3, r1
 8006a84:	4313      	orrs	r3, r2
 8006a86:	d00c      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	3328      	adds	r3, #40	@ 0x28
 8006a8e:	2102      	movs	r1, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fd23 	bl	80074dc <RCCEx_PLL3_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aae:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ab4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d038      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aca:	d018      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad0:	d811      	bhi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad6:	d014      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006adc:	d80b      	bhi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d011      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae6:	d106      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae8:	4bc3      	ldr	r3, [pc, #780]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aec:	4ac2      	ldr	r2, [pc, #776]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006af4:	e008      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006afc:	e004      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006afe:	bf00      	nop
 8006b00:	e002      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10b      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b10:	4bb9      	ldr	r3, [pc, #740]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b20:	4ab5      	ldr	r2, [pc, #724]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b26:	e003      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b3e:	2300      	movs	r3, #0
 8006b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b46:	460b      	mov	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b4c:	4baa      	ldr	r3, [pc, #680]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5a:	4aa7      	ldr	r2, [pc, #668]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b6e:	2300      	movs	r3, #0
 8006b70:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b76:	460b      	mov	r3, r1
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	d00a      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b7c:	4b9e      	ldr	r3, [pc, #632]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b8c:	4a9a      	ldr	r2, [pc, #616]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d009      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bae:	4b92      	ldr	r3, [pc, #584]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bbc:	4a8e      	ldr	r2, [pc, #568]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bce:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	d00e      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bde:	4b86      	ldr	r3, [pc, #536]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	4a85      	ldr	r2, [pc, #532]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006be8:	6113      	str	r3, [r2, #16]
 8006bea:	4b83      	ldr	r3, [pc, #524]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bec:	6919      	ldr	r1, [r3, #16]
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006bf6:	4a80      	ldr	r2, [pc, #512]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf8:	430b      	orrs	r3, r1
 8006bfa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c0e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c12:	460b      	mov	r3, r1
 8006c14:	4313      	orrs	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c18:	4b77      	ldr	r3, [pc, #476]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c26:	4a74      	ldr	r2, [pc, #464]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c42:	460b      	mov	r3, r1
 8006c44:	4313      	orrs	r3, r2
 8006c46:	d00a      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c48:	4b6b      	ldr	r3, [pc, #428]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c58:	4a67      	ldr	r2, [pc, #412]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	2100      	movs	r1, #0
 8006c68:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d011      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	3308      	adds	r3, #8
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fb78 	bl	8007378 <RCCEx_PLL2_Config>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	6239      	str	r1, [r7, #32]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d011      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fb58 	bl	8007378 <RCCEx_PLL2_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	61b9      	str	r1, [r7, #24]
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	d011      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2102      	movs	r1, #2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fb38 	bl	8007378 <RCCEx_PLL2_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	2100      	movs	r1, #0
 8006d28:	6139      	str	r1, [r7, #16]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d34:	460b      	mov	r3, r1
 8006d36:	4313      	orrs	r3, r2
 8006d38:	d011      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	3328      	adds	r3, #40	@ 0x28
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fbca 	bl	80074dc <RCCEx_PLL3_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	2100      	movs	r1, #0
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d74:	460b      	mov	r3, r1
 8006d76:	4313      	orrs	r3, r2
 8006d78:	d011      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	3328      	adds	r3, #40	@ 0x28
 8006d80:	2101      	movs	r1, #1
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fbaa 	bl	80074dc <RCCEx_PLL3_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	2100      	movs	r1, #0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	607b      	str	r3, [r7, #4]
 8006db0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006db4:	460b      	mov	r3, r1
 8006db6:	4313      	orrs	r3, r2
 8006db8:	d011      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	3328      	adds	r3, #40	@ 0x28
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fb8a 	bl	80074dc <RCCEx_PLL3_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006dde:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006df2:	46bd      	mov	sp, r7
 8006df4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006df8:	58024400 	.word	0x58024400

08006dfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e00:	f7fe fd54 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4904      	ldr	r1, [pc, #16]	@ (8006e24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	58024400 	.word	0x58024400
 8006e24:	0800e804 	.word	0x0800e804

08006e28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	@ 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e30:	4ba1      	ldr	r3, [pc, #644]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	0b1b      	lsrs	r3, r3, #12
 8006e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e46:	4b9c      	ldr	r3, [pc, #624]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e52:	4b99      	ldr	r3, [pc, #612]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e56:	08db      	lsrs	r3, r3, #3
 8006e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8111 	beq.w	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	f000 8083 	beq.w	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	f200 80a1 	bhi.w	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d056      	beq.n	8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e92:	e099      	b.n	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e94:	4b88      	ldr	r3, [pc, #544]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02d      	beq.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ea0:	4b85      	ldr	r3, [pc, #532]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a84      	ldr	r2, [pc, #528]	@ (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b7b      	ldr	r3, [pc, #492]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ede:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006efa:	e087      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3e:	e065      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b59      	ldr	r3, [pc, #356]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f82:	e043      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b48      	ldr	r3, [pc, #288]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006faa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc6:	e021      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b37      	ldr	r3, [pc, #220]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800700c:	4b2a      	ldr	r3, [pc, #168]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007026:	edd7 6a07 	vldr	s13, [r7, #28]
 800702a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007032:	ee17 2a90 	vmov	r2, s15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800703a:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007054:	edd7 6a07 	vldr	s13, [r7, #28]
 8007058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007060:	ee17 2a90 	vmov	r2, s15
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007068:	4b13      	ldr	r3, [pc, #76]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706c:	0e1b      	lsrs	r3, r3, #24
 800706e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800707e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007082:	edd7 6a07 	vldr	s13, [r7, #28]
 8007086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708e:	ee17 2a90 	vmov	r2, s15
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007096:	e008      	b.n	80070aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
}
 80070aa:	bf00      	nop
 80070ac:	3724      	adds	r7, #36	@ 0x24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	03d09000 	.word	0x03d09000
 80070c0:	46000000 	.word	0x46000000
 80070c4:	4c742400 	.word	0x4c742400
 80070c8:	4a742400 	.word	0x4a742400
 80070cc:	4af42400 	.word	0x4af42400

080070d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	@ 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d8:	4ba1      	ldr	r3, [pc, #644]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070e2:	4b9f      	ldr	r3, [pc, #636]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	0d1b      	lsrs	r3, r3, #20
 80070e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070ee:	4b9c      	ldr	r3, [pc, #624]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070fa:	4b99      	ldr	r3, [pc, #612]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8111 	beq.w	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b02      	cmp	r3, #2
 8007122:	f000 8083 	beq.w	800722c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f200 80a1 	bhi.w	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d056      	beq.n	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800713a:	e099      	b.n	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800713c:	4b88      	ldr	r3, [pc, #544]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d02d      	beq.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007148:	4b85      	ldr	r3, [pc, #532]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	08db      	lsrs	r3, r3, #3
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	4a84      	ldr	r2, [pc, #528]	@ (8007364 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007172:	4b7b      	ldr	r3, [pc, #492]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007182:	ed97 6a03 	vldr	s12, [r7, #12]
 8007186:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800718a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071a2:	e087      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800736c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e6:	e065      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fa:	4b59      	ldr	r3, [pc, #356]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720a:	ed97 6a03 	vldr	s12, [r7, #12]
 800720e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800721e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722a:	e043      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800723a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723e:	4b48      	ldr	r3, [pc, #288]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007252:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726e:	e021      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	0a5b      	lsrs	r3, r3, #9
 80072ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072da:	ee17 2a90 	vmov	r2, s15
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007308:	ee17 2a90 	vmov	r2, s15
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007310:	4b13      	ldr	r3, [pc, #76]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732a:	edd7 6a07 	vldr	s13, [r7, #28]
 800732e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800733e:	e008      	b.n	8007352 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
}
 8007352:	bf00      	nop
 8007354:	3724      	adds	r7, #36	@ 0x24
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400
 8007364:	03d09000 	.word	0x03d09000
 8007368:	46000000 	.word	0x46000000
 800736c:	4c742400 	.word	0x4c742400
 8007370:	4a742400 	.word	0x4a742400
 8007374:	4af42400 	.word	0x4af42400

08007378 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007386:	4b53      	ldr	r3, [pc, #332]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b03      	cmp	r3, #3
 8007390:	d101      	bne.n	8007396 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e099      	b.n	80074ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007396:	4b4f      	ldr	r3, [pc, #316]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a4e      	ldr	r2, [pc, #312]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800739c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a2:	f7f9 ffd5 	bl	8001350 <HAL_GetTick>
 80073a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073a8:	e008      	b.n	80073bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073aa:	f7f9 ffd1 	bl	8001350 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e086      	b.n	80074ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073bc:	4b45      	ldr	r3, [pc, #276]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f0      	bne.n	80073aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073c8:	4b42      	ldr	r3, [pc, #264]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	031b      	lsls	r3, r3, #12
 80073d6:	493f      	ldr	r1, [pc, #252]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	628b      	str	r3, [r1, #40]	@ 0x28
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	025b      	lsls	r3, r3, #9
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	3b01      	subs	r3, #1
 8007406:	061b      	lsls	r3, r3, #24
 8007408:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800740c:	4931      	ldr	r1, [pc, #196]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007412:	4b30      	ldr	r3, [pc, #192]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007416:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	492d      	ldr	r1, [pc, #180]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007420:	4313      	orrs	r3, r2
 8007422:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007424:	4b2b      	ldr	r3, [pc, #172]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	f023 0220 	bic.w	r2, r3, #32
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	4928      	ldr	r1, [pc, #160]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007432:	4313      	orrs	r3, r2
 8007434:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007436:	4b27      	ldr	r3, [pc, #156]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	4a26      	ldr	r2, [pc, #152]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007442:	4b24      	ldr	r3, [pc, #144]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007446:	4b24      	ldr	r3, [pc, #144]	@ (80074d8 <RCCEx_PLL2_Config+0x160>)
 8007448:	4013      	ands	r3, r2
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	69d2      	ldr	r2, [r2, #28]
 800744e:	00d2      	lsls	r2, r2, #3
 8007450:	4920      	ldr	r1, [pc, #128]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007452:	4313      	orrs	r3, r2
 8007454:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007456:	4b1f      	ldr	r3, [pc, #124]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	4a1e      	ldr	r2, [pc, #120]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800745c:	f043 0310 	orr.w	r3, r3, #16
 8007460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007468:	4b1a      	ldr	r3, [pc, #104]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	4a19      	ldr	r2, [pc, #100]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800746e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007474:	e00f      	b.n	8007496 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d106      	bne.n	800748a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800747c:	4b15      	ldr	r3, [pc, #84]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800747e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007480:	4a14      	ldr	r2, [pc, #80]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007486:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007488:	e005      	b.n	8007496 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800748a:	4b12      	ldr	r3, [pc, #72]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	4a11      	ldr	r2, [pc, #68]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007494:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007496:	4b0f      	ldr	r3, [pc, #60]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a0e      	ldr	r2, [pc, #56]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800749c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a2:	f7f9 ff55 	bl	8001350 <HAL_GetTick>
 80074a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074a8:	e008      	b.n	80074bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074aa:	f7f9 ff51 	bl	8001350 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e006      	b.n	80074ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074bc:	4b05      	ldr	r3, [pc, #20]	@ (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	58024400 	.word	0x58024400
 80074d8:	ffff0007 	.word	0xffff0007

080074dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ea:	4b53      	ldr	r3, [pc, #332]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d101      	bne.n	80074fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e099      	b.n	800762e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007506:	f7f9 ff23 	bl	8001350 <HAL_GetTick>
 800750a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800750c:	e008      	b.n	8007520 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800750e:	f7f9 ff1f 	bl	8001350 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e086      	b.n	800762e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007520:	4b45      	ldr	r3, [pc, #276]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f0      	bne.n	800750e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800752c:	4b42      	ldr	r3, [pc, #264]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	051b      	lsls	r3, r3, #20
 800753a:	493f      	ldr	r1, [pc, #252]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 800753c:	4313      	orrs	r3, r2
 800753e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	3b01      	subs	r3, #1
 8007546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	3b01      	subs	r3, #1
 8007550:	025b      	lsls	r3, r3, #9
 8007552:	b29b      	uxth	r3, r3
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	3b01      	subs	r3, #1
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	3b01      	subs	r3, #1
 800756a:	061b      	lsls	r3, r3, #24
 800756c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007570:	4931      	ldr	r1, [pc, #196]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007576:	4b30      	ldr	r3, [pc, #192]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	492d      	ldr	r1, [pc, #180]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007584:	4313      	orrs	r3, r2
 8007586:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007588:	4b2b      	ldr	r3, [pc, #172]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	4928      	ldr	r1, [pc, #160]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800759a:	4b27      	ldr	r3, [pc, #156]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4a26      	ldr	r2, [pc, #152]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075a6:	4b24      	ldr	r3, [pc, #144]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075aa:	4b24      	ldr	r3, [pc, #144]	@ (800763c <RCCEx_PLL3_Config+0x160>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	69d2      	ldr	r2, [r2, #28]
 80075b2:	00d2      	lsls	r2, r2, #3
 80075b4:	4920      	ldr	r1, [pc, #128]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	4a1e      	ldr	r2, [pc, #120]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	4a19      	ldr	r2, [pc, #100]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075d8:	e00f      	b.n	80075fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d106      	bne.n	80075ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075e0:	4b15      	ldr	r3, [pc, #84]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	4a14      	ldr	r2, [pc, #80]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075ec:	e005      	b.n	80075fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075ee:	4b12      	ldr	r3, [pc, #72]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	4a11      	ldr	r2, [pc, #68]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007606:	f7f9 fea3 	bl	8001350 <HAL_GetTick>
 800760a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800760c:	e008      	b.n	8007620 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800760e:	f7f9 fe9f 	bl	8001350 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e006      	b.n	800762e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	58024400 	.word	0x58024400
 800763c:	ffff0007 	.word	0xffff0007

08007640 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e10f      	b.n	8007872 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a87      	ldr	r2, [pc, #540]	@ (800787c <HAL_SPI_Init+0x23c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00f      	beq.n	8007682 <HAL_SPI_Init+0x42>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a86      	ldr	r2, [pc, #536]	@ (8007880 <HAL_SPI_Init+0x240>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00a      	beq.n	8007682 <HAL_SPI_Init+0x42>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a84      	ldr	r2, [pc, #528]	@ (8007884 <HAL_SPI_Init+0x244>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d005      	beq.n	8007682 <HAL_SPI_Init+0x42>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d901      	bls.n	8007682 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e0f7      	b.n	8007872 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f900 	bl	8007888 <SPI_GetPacketSize>
 8007688:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a7b      	ldr	r2, [pc, #492]	@ (800787c <HAL_SPI_Init+0x23c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00c      	beq.n	80076ae <HAL_SPI_Init+0x6e>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a79      	ldr	r2, [pc, #484]	@ (8007880 <HAL_SPI_Init+0x240>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d007      	beq.n	80076ae <HAL_SPI_Init+0x6e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a78      	ldr	r2, [pc, #480]	@ (8007884 <HAL_SPI_Init+0x244>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d002      	beq.n	80076ae <HAL_SPI_Init+0x6e>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	d811      	bhi.n	80076d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076b2:	4a72      	ldr	r2, [pc, #456]	@ (800787c <HAL_SPI_Init+0x23c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a70      	ldr	r2, [pc, #448]	@ (8007880 <HAL_SPI_Init+0x240>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_SPI_Init+0x8c>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a6f      	ldr	r2, [pc, #444]	@ (8007884 <HAL_SPI_Init+0x244>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d104      	bne.n	80076d6 <HAL_SPI_Init+0x96>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d901      	bls.n	80076d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e0cd      	b.n	8007872 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7f9 faf2 	bl	8000cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0201 	bic.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007712:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800771c:	d119      	bne.n	8007752 <HAL_SPI_Init+0x112>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007726:	d103      	bne.n	8007730 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10c      	bne.n	8007752 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800773c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007740:	d107      	bne.n	8007752 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007750:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00f      	beq.n	800777e <HAL_SPI_Init+0x13e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	2b06      	cmp	r3, #6
 8007764:	d90b      	bls.n	800777e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e007      	b.n	800778e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800778c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69da      	ldr	r2, [r3, #28]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	431a      	orrs	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	431a      	orrs	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a0:	ea42 0103 	orr.w	r1, r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ee:	ea42 0103 	orr.w	r1, r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d113      	bne.n	800782e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007818:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800782c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40013000 	.word	0x40013000
 8007880:	40003800 	.word	0x40003800
 8007884:	40003c00 	.word	0x40003c00

08007888 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	3301      	adds	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	3307      	adds	r3, #7
 80078a6:	08db      	lsrs	r3, r3, #3
 80078a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e049      	b.n	8007964 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d106      	bne.n	80078ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f841 	bl	800796c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f000 f9e7 	bl	8007cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d001      	beq.n	8007998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e054      	b.n	8007a42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a26      	ldr	r2, [pc, #152]	@ (8007a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d022      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c2:	d01d      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a22      	ldr	r2, [pc, #136]	@ (8007a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a21      	ldr	r2, [pc, #132]	@ (8007a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1f      	ldr	r2, [pc, #124]	@ (8007a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a60 <HAL_TIM_Base_Start_IT+0xe0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a64 <HAL_TIM_Base_Start_IT+0xe4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007a68 <HAL_TIM_Base_Start_IT+0xe8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d115      	bne.n	8007a2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	4b19      	ldr	r3, [pc, #100]	@ (8007a6c <HAL_TIM_Base_Start_IT+0xec>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d015      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0xbe>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a18:	d011      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	e008      	b.n	8007a3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e000      	b.n	8007a40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40010000 	.word	0x40010000
 8007a54:	40000400 	.word	0x40000400
 8007a58:	40000800 	.word	0x40000800
 8007a5c:	40000c00 	.word	0x40000c00
 8007a60:	40010400 	.word	0x40010400
 8007a64:	40001800 	.word	0x40001800
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	00010007 	.word	0x00010007

08007a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d020      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01b      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f06f 0202 	mvn.w	r2, #2
 8007aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f8e9 	bl	8007c92 <HAL_TIM_IC_CaptureCallback>
 8007ac0:	e005      	b.n	8007ace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8db 	bl	8007c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f8ec 	bl	8007ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d020      	beq.n	8007b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01b      	beq.n	8007b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0204 	mvn.w	r2, #4
 8007af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2202      	movs	r2, #2
 8007af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f8c3 	bl	8007c92 <HAL_TIM_IC_CaptureCallback>
 8007b0c:	e005      	b.n	8007b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f8b5 	bl	8007c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8c6 	bl	8007ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d020      	beq.n	8007b6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01b      	beq.n	8007b6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0208 	mvn.w	r2, #8
 8007b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2204      	movs	r2, #4
 8007b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f89d 	bl	8007c92 <HAL_TIM_IC_CaptureCallback>
 8007b58:	e005      	b.n	8007b66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f88f 	bl	8007c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8a0 	bl	8007ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f003 0310 	and.w	r3, r3, #16
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d020      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01b      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0210 	mvn.w	r2, #16
 8007b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f877 	bl	8007c92 <HAL_TIM_IC_CaptureCallback>
 8007ba4:	e005      	b.n	8007bb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f869 	bl	8007c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f87a 	bl	8007ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00c      	beq.n	8007bdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d007      	beq.n	8007bdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0201 	mvn.w	r2, #1
 8007bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7f9 f80c 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d104      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f90d 	bl	8007e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f905 	bl	8007e38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00c      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f834 	bl	8007cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00c      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f06f 0220 	mvn.w	r2, #32
 8007c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8cd 	bl	8007e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a43      	ldr	r2, [pc, #268]	@ (8007df0 <TIM_Base_SetConfig+0x120>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d013      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cee:	d00f      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a40      	ldr	r2, [pc, #256]	@ (8007df4 <TIM_Base_SetConfig+0x124>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00b      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8007df8 <TIM_Base_SetConfig+0x128>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d007      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a3e      	ldr	r2, [pc, #248]	@ (8007dfc <TIM_Base_SetConfig+0x12c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d003      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a3d      	ldr	r2, [pc, #244]	@ (8007e00 <TIM_Base_SetConfig+0x130>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d108      	bne.n	8007d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a32      	ldr	r2, [pc, #200]	@ (8007df0 <TIM_Base_SetConfig+0x120>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01f      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d30:	d01b      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a2f      	ldr	r2, [pc, #188]	@ (8007df4 <TIM_Base_SetConfig+0x124>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d017      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8007df8 <TIM_Base_SetConfig+0x128>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a2d      	ldr	r2, [pc, #180]	@ (8007dfc <TIM_Base_SetConfig+0x12c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00f      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007e00 <TIM_Base_SetConfig+0x130>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a2b      	ldr	r2, [pc, #172]	@ (8007e04 <TIM_Base_SetConfig+0x134>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8007e08 <TIM_Base_SetConfig+0x138>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a29      	ldr	r2, [pc, #164]	@ (8007e0c <TIM_Base_SetConfig+0x13c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d108      	bne.n	8007d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	689a      	ldr	r2, [r3, #8]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a14      	ldr	r2, [pc, #80]	@ (8007df0 <TIM_Base_SetConfig+0x120>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00f      	beq.n	8007dc2 <TIM_Base_SetConfig+0xf2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a16      	ldr	r2, [pc, #88]	@ (8007e00 <TIM_Base_SetConfig+0x130>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00b      	beq.n	8007dc2 <TIM_Base_SetConfig+0xf2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a15      	ldr	r2, [pc, #84]	@ (8007e04 <TIM_Base_SetConfig+0x134>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <TIM_Base_SetConfig+0xf2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a14      	ldr	r2, [pc, #80]	@ (8007e08 <TIM_Base_SetConfig+0x138>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_Base_SetConfig+0xf2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a13      	ldr	r2, [pc, #76]	@ (8007e0c <TIM_Base_SetConfig+0x13c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d103      	bne.n	8007dca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f043 0204 	orr.w	r2, r3, #4
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40000400 	.word	0x40000400
 8007df8:	40000800 	.word	0x40000800
 8007dfc:	40000c00 	.word	0x40000c00
 8007e00:	40010400 	.word	0x40010400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400
 8007e0c:	40014800 	.word	0x40014800

08007e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e042      	b.n	8007ee4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d106      	bne.n	8007e76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7f9 f955 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2224      	movs	r2, #36	@ 0x24
 8007e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0201 	bic.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fd90 	bl	80089bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f825 	bl	8007eec <UART_SetConfig>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e01b      	b.n	8007ee4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007eca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fe0f 	bl	8008b00 <UART_CheckIdleState>
 8007ee2:	4603      	mov	r3, r0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ef0:	b092      	sub	sp, #72	@ 0x48
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	431a      	orrs	r2, r3
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4bbe      	ldr	r3, [pc, #760]	@ (8008214 <UART_SetConfig+0x328>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f24:	430b      	orrs	r3, r1
 8007f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4ab3      	ldr	r2, [pc, #716]	@ (8008218 <UART_SetConfig+0x32c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f54:	4313      	orrs	r3, r2
 8007f56:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	4baf      	ldr	r3, [pc, #700]	@ (800821c <UART_SetConfig+0x330>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	6812      	ldr	r2, [r2, #0]
 8007f66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f72:	f023 010f 	bic.w	r1, r3, #15
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4aa6      	ldr	r2, [pc, #664]	@ (8008220 <UART_SetConfig+0x334>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d177      	bne.n	800807c <UART_SetConfig+0x190>
 8007f8c:	4ba5      	ldr	r3, [pc, #660]	@ (8008224 <UART_SetConfig+0x338>)
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f94:	2b28      	cmp	r3, #40	@ 0x28
 8007f96:	d86d      	bhi.n	8008074 <UART_SetConfig+0x188>
 8007f98:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <UART_SetConfig+0xb4>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08008045 	.word	0x08008045
 8007fa4:	08008075 	.word	0x08008075
 8007fa8:	08008075 	.word	0x08008075
 8007fac:	08008075 	.word	0x08008075
 8007fb0:	08008075 	.word	0x08008075
 8007fb4:	08008075 	.word	0x08008075
 8007fb8:	08008075 	.word	0x08008075
 8007fbc:	08008075 	.word	0x08008075
 8007fc0:	0800804d 	.word	0x0800804d
 8007fc4:	08008075 	.word	0x08008075
 8007fc8:	08008075 	.word	0x08008075
 8007fcc:	08008075 	.word	0x08008075
 8007fd0:	08008075 	.word	0x08008075
 8007fd4:	08008075 	.word	0x08008075
 8007fd8:	08008075 	.word	0x08008075
 8007fdc:	08008075 	.word	0x08008075
 8007fe0:	08008055 	.word	0x08008055
 8007fe4:	08008075 	.word	0x08008075
 8007fe8:	08008075 	.word	0x08008075
 8007fec:	08008075 	.word	0x08008075
 8007ff0:	08008075 	.word	0x08008075
 8007ff4:	08008075 	.word	0x08008075
 8007ff8:	08008075 	.word	0x08008075
 8007ffc:	08008075 	.word	0x08008075
 8008000:	0800805d 	.word	0x0800805d
 8008004:	08008075 	.word	0x08008075
 8008008:	08008075 	.word	0x08008075
 800800c:	08008075 	.word	0x08008075
 8008010:	08008075 	.word	0x08008075
 8008014:	08008075 	.word	0x08008075
 8008018:	08008075 	.word	0x08008075
 800801c:	08008075 	.word	0x08008075
 8008020:	08008065 	.word	0x08008065
 8008024:	08008075 	.word	0x08008075
 8008028:	08008075 	.word	0x08008075
 800802c:	08008075 	.word	0x08008075
 8008030:	08008075 	.word	0x08008075
 8008034:	08008075 	.word	0x08008075
 8008038:	08008075 	.word	0x08008075
 800803c:	08008075 	.word	0x08008075
 8008040:	0800806d 	.word	0x0800806d
 8008044:	2301      	movs	r3, #1
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e222      	b.n	8008492 <UART_SetConfig+0x5a6>
 800804c:	2304      	movs	r3, #4
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e21e      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008054:	2308      	movs	r3, #8
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e21a      	b.n	8008492 <UART_SetConfig+0x5a6>
 800805c:	2310      	movs	r3, #16
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e216      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008064:	2320      	movs	r3, #32
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806a:	e212      	b.n	8008492 <UART_SetConfig+0x5a6>
 800806c:	2340      	movs	r3, #64	@ 0x40
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e20e      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008074:	2380      	movs	r3, #128	@ 0x80
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e20a      	b.n	8008492 <UART_SetConfig+0x5a6>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a69      	ldr	r2, [pc, #420]	@ (8008228 <UART_SetConfig+0x33c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d130      	bne.n	80080e8 <UART_SetConfig+0x1fc>
 8008086:	4b67      	ldr	r3, [pc, #412]	@ (8008224 <UART_SetConfig+0x338>)
 8008088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	2b05      	cmp	r3, #5
 8008090:	d826      	bhi.n	80080e0 <UART_SetConfig+0x1f4>
 8008092:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <UART_SetConfig+0x1ac>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	080080c1 	.word	0x080080c1
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	2300      	movs	r3, #0
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e1ec      	b.n	8008492 <UART_SetConfig+0x5a6>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e1e8      	b.n	8008492 <UART_SetConfig+0x5a6>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c6:	e1e4      	b.n	8008492 <UART_SetConfig+0x5a6>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ce:	e1e0      	b.n	8008492 <UART_SetConfig+0x5a6>
 80080d0:	2320      	movs	r3, #32
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d6:	e1dc      	b.n	8008492 <UART_SetConfig+0x5a6>
 80080d8:	2340      	movs	r3, #64	@ 0x40
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e1d8      	b.n	8008492 <UART_SetConfig+0x5a6>
 80080e0:	2380      	movs	r3, #128	@ 0x80
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e1d4      	b.n	8008492 <UART_SetConfig+0x5a6>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a4f      	ldr	r2, [pc, #316]	@ (800822c <UART_SetConfig+0x340>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d130      	bne.n	8008154 <UART_SetConfig+0x268>
 80080f2:	4b4c      	ldr	r3, [pc, #304]	@ (8008224 <UART_SetConfig+0x338>)
 80080f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d826      	bhi.n	800814c <UART_SetConfig+0x260>
 80080fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008104 <UART_SetConfig+0x218>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	0800811d 	.word	0x0800811d
 8008108:	08008125 	.word	0x08008125
 800810c:	0800812d 	.word	0x0800812d
 8008110:	08008135 	.word	0x08008135
 8008114:	0800813d 	.word	0x0800813d
 8008118:	08008145 	.word	0x08008145
 800811c:	2300      	movs	r3, #0
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008122:	e1b6      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e1b2      	b.n	8008492 <UART_SetConfig+0x5a6>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008132:	e1ae      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813a:	e1aa      	b.n	8008492 <UART_SetConfig+0x5a6>
 800813c:	2320      	movs	r3, #32
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008142:	e1a6      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008144:	2340      	movs	r3, #64	@ 0x40
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814a:	e1a2      	b.n	8008492 <UART_SetConfig+0x5a6>
 800814c:	2380      	movs	r3, #128	@ 0x80
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008152:	e19e      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a35      	ldr	r2, [pc, #212]	@ (8008230 <UART_SetConfig+0x344>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d130      	bne.n	80081c0 <UART_SetConfig+0x2d4>
 800815e:	4b31      	ldr	r3, [pc, #196]	@ (8008224 <UART_SetConfig+0x338>)
 8008160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	2b05      	cmp	r3, #5
 8008168:	d826      	bhi.n	80081b8 <UART_SetConfig+0x2cc>
 800816a:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <UART_SetConfig+0x284>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008189 	.word	0x08008189
 8008174:	08008191 	.word	0x08008191
 8008178:	08008199 	.word	0x08008199
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081a9 	.word	0x080081a9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	2300      	movs	r3, #0
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818e:	e180      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008196:	e17c      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e178      	b.n	8008492 <UART_SetConfig+0x5a6>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e174      	b.n	8008492 <UART_SetConfig+0x5a6>
 80081a8:	2320      	movs	r3, #32
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ae:	e170      	b.n	8008492 <UART_SetConfig+0x5a6>
 80081b0:	2340      	movs	r3, #64	@ 0x40
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b6:	e16c      	b.n	8008492 <UART_SetConfig+0x5a6>
 80081b8:	2380      	movs	r3, #128	@ 0x80
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081be:	e168      	b.n	8008492 <UART_SetConfig+0x5a6>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008234 <UART_SetConfig+0x348>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d142      	bne.n	8008250 <UART_SetConfig+0x364>
 80081ca:	4b16      	ldr	r3, [pc, #88]	@ (8008224 <UART_SetConfig+0x338>)
 80081cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d838      	bhi.n	8008248 <UART_SetConfig+0x35c>
 80081d6:	a201      	add	r2, pc, #4	@ (adr r2, 80081dc <UART_SetConfig+0x2f0>)
 80081d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081dc:	080081f5 	.word	0x080081f5
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008205 	.word	0x08008205
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008239 	.word	0x08008239
 80081f0:	08008241 	.word	0x08008241
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e14a      	b.n	8008492 <UART_SetConfig+0x5a6>
 80081fc:	2304      	movs	r3, #4
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e146      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008204:	2308      	movs	r3, #8
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e142      	b.n	8008492 <UART_SetConfig+0x5a6>
 800820c:	2310      	movs	r3, #16
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e13e      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008214:	cfff69f3 	.word	0xcfff69f3
 8008218:	58000c00 	.word	0x58000c00
 800821c:	11fff4ff 	.word	0x11fff4ff
 8008220:	40011000 	.word	0x40011000
 8008224:	58024400 	.word	0x58024400
 8008228:	40004400 	.word	0x40004400
 800822c:	40004800 	.word	0x40004800
 8008230:	40004c00 	.word	0x40004c00
 8008234:	40005000 	.word	0x40005000
 8008238:	2320      	movs	r3, #32
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e128      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008240:	2340      	movs	r3, #64	@ 0x40
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e124      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008248:	2380      	movs	r3, #128	@ 0x80
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e120      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4acb      	ldr	r2, [pc, #812]	@ (8008584 <UART_SetConfig+0x698>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d176      	bne.n	8008348 <UART_SetConfig+0x45c>
 800825a:	4bcb      	ldr	r3, [pc, #812]	@ (8008588 <UART_SetConfig+0x69c>)
 800825c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008262:	2b28      	cmp	r3, #40	@ 0x28
 8008264:	d86c      	bhi.n	8008340 <UART_SetConfig+0x454>
 8008266:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <UART_SetConfig+0x380>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008311 	.word	0x08008311
 8008270:	08008341 	.word	0x08008341
 8008274:	08008341 	.word	0x08008341
 8008278:	08008341 	.word	0x08008341
 800827c:	08008341 	.word	0x08008341
 8008280:	08008341 	.word	0x08008341
 8008284:	08008341 	.word	0x08008341
 8008288:	08008341 	.word	0x08008341
 800828c:	08008319 	.word	0x08008319
 8008290:	08008341 	.word	0x08008341
 8008294:	08008341 	.word	0x08008341
 8008298:	08008341 	.word	0x08008341
 800829c:	08008341 	.word	0x08008341
 80082a0:	08008341 	.word	0x08008341
 80082a4:	08008341 	.word	0x08008341
 80082a8:	08008341 	.word	0x08008341
 80082ac:	08008321 	.word	0x08008321
 80082b0:	08008341 	.word	0x08008341
 80082b4:	08008341 	.word	0x08008341
 80082b8:	08008341 	.word	0x08008341
 80082bc:	08008341 	.word	0x08008341
 80082c0:	08008341 	.word	0x08008341
 80082c4:	08008341 	.word	0x08008341
 80082c8:	08008341 	.word	0x08008341
 80082cc:	08008329 	.word	0x08008329
 80082d0:	08008341 	.word	0x08008341
 80082d4:	08008341 	.word	0x08008341
 80082d8:	08008341 	.word	0x08008341
 80082dc:	08008341 	.word	0x08008341
 80082e0:	08008341 	.word	0x08008341
 80082e4:	08008341 	.word	0x08008341
 80082e8:	08008341 	.word	0x08008341
 80082ec:	08008331 	.word	0x08008331
 80082f0:	08008341 	.word	0x08008341
 80082f4:	08008341 	.word	0x08008341
 80082f8:	08008341 	.word	0x08008341
 80082fc:	08008341 	.word	0x08008341
 8008300:	08008341 	.word	0x08008341
 8008304:	08008341 	.word	0x08008341
 8008308:	08008341 	.word	0x08008341
 800830c:	08008339 	.word	0x08008339
 8008310:	2301      	movs	r3, #1
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e0bc      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e0b8      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e0b4      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e0b0      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008330:	2320      	movs	r3, #32
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e0ac      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008338:	2340      	movs	r3, #64	@ 0x40
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e0a8      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008340:	2380      	movs	r3, #128	@ 0x80
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e0a4      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a8f      	ldr	r2, [pc, #572]	@ (800858c <UART_SetConfig+0x6a0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d130      	bne.n	80083b4 <UART_SetConfig+0x4c8>
 8008352:	4b8d      	ldr	r3, [pc, #564]	@ (8008588 <UART_SetConfig+0x69c>)
 8008354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b05      	cmp	r3, #5
 800835c:	d826      	bhi.n	80083ac <UART_SetConfig+0x4c0>
 800835e:	a201      	add	r2, pc, #4	@ (adr r2, 8008364 <UART_SetConfig+0x478>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	0800837d 	.word	0x0800837d
 8008368:	08008385 	.word	0x08008385
 800836c:	0800838d 	.word	0x0800838d
 8008370:	08008395 	.word	0x08008395
 8008374:	0800839d 	.word	0x0800839d
 8008378:	080083a5 	.word	0x080083a5
 800837c:	2300      	movs	r3, #0
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e086      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008384:	2304      	movs	r3, #4
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e082      	b.n	8008492 <UART_SetConfig+0x5a6>
 800838c:	2308      	movs	r3, #8
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e07e      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008394:	2310      	movs	r3, #16
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839a:	e07a      	b.n	8008492 <UART_SetConfig+0x5a6>
 800839c:	2320      	movs	r3, #32
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e076      	b.n	8008492 <UART_SetConfig+0x5a6>
 80083a4:	2340      	movs	r3, #64	@ 0x40
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e072      	b.n	8008492 <UART_SetConfig+0x5a6>
 80083ac:	2380      	movs	r3, #128	@ 0x80
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e06e      	b.n	8008492 <UART_SetConfig+0x5a6>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a75      	ldr	r2, [pc, #468]	@ (8008590 <UART_SetConfig+0x6a4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d130      	bne.n	8008420 <UART_SetConfig+0x534>
 80083be:	4b72      	ldr	r3, [pc, #456]	@ (8008588 <UART_SetConfig+0x69c>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d826      	bhi.n	8008418 <UART_SetConfig+0x52c>
 80083ca:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <UART_SetConfig+0x4e4>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	080083f9 	.word	0x080083f9
 80083dc:	08008401 	.word	0x08008401
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008411 	.word	0x08008411
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ee:	e050      	b.n	8008492 <UART_SetConfig+0x5a6>
 80083f0:	2304      	movs	r3, #4
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f6:	e04c      	b.n	8008492 <UART_SetConfig+0x5a6>
 80083f8:	2308      	movs	r3, #8
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e048      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008400:	2310      	movs	r3, #16
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008406:	e044      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008408:	2320      	movs	r3, #32
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840e:	e040      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008410:	2340      	movs	r3, #64	@ 0x40
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e03c      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008418:	2380      	movs	r3, #128	@ 0x80
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e038      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a5b      	ldr	r2, [pc, #364]	@ (8008594 <UART_SetConfig+0x6a8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d130      	bne.n	800848c <UART_SetConfig+0x5a0>
 800842a:	4b57      	ldr	r3, [pc, #348]	@ (8008588 <UART_SetConfig+0x69c>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	2b05      	cmp	r3, #5
 8008434:	d826      	bhi.n	8008484 <UART_SetConfig+0x598>
 8008436:	a201      	add	r2, pc, #4	@ (adr r2, 800843c <UART_SetConfig+0x550>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	08008455 	.word	0x08008455
 8008440:	0800845d 	.word	0x0800845d
 8008444:	08008465 	.word	0x08008465
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008475 	.word	0x08008475
 8008450:	0800847d 	.word	0x0800847d
 8008454:	2302      	movs	r3, #2
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845a:	e01a      	b.n	8008492 <UART_SetConfig+0x5a6>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e016      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e012      	b.n	8008492 <UART_SetConfig+0x5a6>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e00e      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008474:	2320      	movs	r3, #32
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e00a      	b.n	8008492 <UART_SetConfig+0x5a6>
 800847c:	2340      	movs	r3, #64	@ 0x40
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e006      	b.n	8008492 <UART_SetConfig+0x5a6>
 8008484:	2380      	movs	r3, #128	@ 0x80
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e002      	b.n	8008492 <UART_SetConfig+0x5a6>
 800848c:	2380      	movs	r3, #128	@ 0x80
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a3f      	ldr	r2, [pc, #252]	@ (8008594 <UART_SetConfig+0x6a8>)
 8008498:	4293      	cmp	r3, r2
 800849a:	f040 80f8 	bne.w	800868e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800849e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	dc46      	bgt.n	8008534 <UART_SetConfig+0x648>
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	f2c0 8082 	blt.w	80085b0 <UART_SetConfig+0x6c4>
 80084ac:	3b02      	subs	r3, #2
 80084ae:	2b1e      	cmp	r3, #30
 80084b0:	d87e      	bhi.n	80085b0 <UART_SetConfig+0x6c4>
 80084b2:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <UART_SetConfig+0x5cc>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	0800853b 	.word	0x0800853b
 80084bc:	080085b1 	.word	0x080085b1
 80084c0:	08008543 	.word	0x08008543
 80084c4:	080085b1 	.word	0x080085b1
 80084c8:	080085b1 	.word	0x080085b1
 80084cc:	080085b1 	.word	0x080085b1
 80084d0:	08008553 	.word	0x08008553
 80084d4:	080085b1 	.word	0x080085b1
 80084d8:	080085b1 	.word	0x080085b1
 80084dc:	080085b1 	.word	0x080085b1
 80084e0:	080085b1 	.word	0x080085b1
 80084e4:	080085b1 	.word	0x080085b1
 80084e8:	080085b1 	.word	0x080085b1
 80084ec:	080085b1 	.word	0x080085b1
 80084f0:	08008563 	.word	0x08008563
 80084f4:	080085b1 	.word	0x080085b1
 80084f8:	080085b1 	.word	0x080085b1
 80084fc:	080085b1 	.word	0x080085b1
 8008500:	080085b1 	.word	0x080085b1
 8008504:	080085b1 	.word	0x080085b1
 8008508:	080085b1 	.word	0x080085b1
 800850c:	080085b1 	.word	0x080085b1
 8008510:	080085b1 	.word	0x080085b1
 8008514:	080085b1 	.word	0x080085b1
 8008518:	080085b1 	.word	0x080085b1
 800851c:	080085b1 	.word	0x080085b1
 8008520:	080085b1 	.word	0x080085b1
 8008524:	080085b1 	.word	0x080085b1
 8008528:	080085b1 	.word	0x080085b1
 800852c:	080085b1 	.word	0x080085b1
 8008530:	080085a3 	.word	0x080085a3
 8008534:	2b40      	cmp	r3, #64	@ 0x40
 8008536:	d037      	beq.n	80085a8 <UART_SetConfig+0x6bc>
 8008538:	e03a      	b.n	80085b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800853a:	f7fe fc5f 	bl	8006dfc <HAL_RCCEx_GetD3PCLK1Freq>
 800853e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008540:	e03c      	b.n	80085bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fc6e 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800854c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008550:	e034      	b.n	80085bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008552:	f107 0318 	add.w	r3, r7, #24
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fdba 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008560:	e02c      	b.n	80085bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008562:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <UART_SetConfig+0x69c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b00      	cmp	r3, #0
 800856c:	d016      	beq.n	800859c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800856e:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <UART_SetConfig+0x69c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	08db      	lsrs	r3, r3, #3
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	4a07      	ldr	r2, [pc, #28]	@ (8008598 <UART_SetConfig+0x6ac>)
 800857a:	fa22 f303 	lsr.w	r3, r2, r3
 800857e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008580:	e01c      	b.n	80085bc <UART_SetConfig+0x6d0>
 8008582:	bf00      	nop
 8008584:	40011400 	.word	0x40011400
 8008588:	58024400 	.word	0x58024400
 800858c:	40007800 	.word	0x40007800
 8008590:	40007c00 	.word	0x40007c00
 8008594:	58000c00 	.word	0x58000c00
 8008598:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800859c:	4b9d      	ldr	r3, [pc, #628]	@ (8008814 <UART_SetConfig+0x928>)
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a0:	e00c      	b.n	80085bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085a2:	4b9d      	ldr	r3, [pc, #628]	@ (8008818 <UART_SetConfig+0x92c>)
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a6:	e009      	b.n	80085bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ae:	e005      	b.n	80085bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80085ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 81de 	beq.w	8008980 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c8:	4a94      	ldr	r2, [pc, #592]	@ (800881c <UART_SetConfig+0x930>)
 80085ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ce:	461a      	mov	r2, r3
 80085d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	4413      	add	r3, r2
 80085e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d305      	bcc.n	80085f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d903      	bls.n	80085fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80085fa:	e1c1      	b.n	8008980 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fe:	2200      	movs	r2, #0
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	60fa      	str	r2, [r7, #12]
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008608:	4a84      	ldr	r2, [pc, #528]	@ (800881c <UART_SetConfig+0x930>)
 800860a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860e:	b29b      	uxth	r3, r3
 8008610:	2200      	movs	r2, #0
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	607a      	str	r2, [r7, #4]
 8008616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800861a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800861e:	f7f7 fe5f 	bl	80002e0 <__aeabi_uldivmod>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	f04f 0200 	mov.w	r2, #0
 800862e:	f04f 0300 	mov.w	r3, #0
 8008632:	020b      	lsls	r3, r1, #8
 8008634:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008638:	0202      	lsls	r2, r0, #8
 800863a:	6979      	ldr	r1, [r7, #20]
 800863c:	6849      	ldr	r1, [r1, #4]
 800863e:	0849      	lsrs	r1, r1, #1
 8008640:	2000      	movs	r0, #0
 8008642:	460c      	mov	r4, r1
 8008644:	4605      	mov	r5, r0
 8008646:	eb12 0804 	adds.w	r8, r2, r4
 800864a:	eb43 0905 	adc.w	r9, r3, r5
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	469a      	mov	sl, r3
 8008656:	4693      	mov	fp, r2
 8008658:	4652      	mov	r2, sl
 800865a:	465b      	mov	r3, fp
 800865c:	4640      	mov	r0, r8
 800865e:	4649      	mov	r1, r9
 8008660:	f7f7 fe3e 	bl	80002e0 <__aeabi_uldivmod>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4613      	mov	r3, r2
 800866a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800866c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008672:	d308      	bcc.n	8008686 <UART_SetConfig+0x79a>
 8008674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800867a:	d204      	bcs.n	8008686 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008682:	60da      	str	r2, [r3, #12]
 8008684:	e17c      	b.n	8008980 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800868c:	e178      	b.n	8008980 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008696:	f040 80c5 	bne.w	8008824 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800869a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800869e:	2b20      	cmp	r3, #32
 80086a0:	dc48      	bgt.n	8008734 <UART_SetConfig+0x848>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	db7b      	blt.n	800879e <UART_SetConfig+0x8b2>
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d879      	bhi.n	800879e <UART_SetConfig+0x8b2>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <UART_SetConfig+0x7c4>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	0800873b 	.word	0x0800873b
 80086b4:	08008743 	.word	0x08008743
 80086b8:	0800879f 	.word	0x0800879f
 80086bc:	0800879f 	.word	0x0800879f
 80086c0:	0800874b 	.word	0x0800874b
 80086c4:	0800879f 	.word	0x0800879f
 80086c8:	0800879f 	.word	0x0800879f
 80086cc:	0800879f 	.word	0x0800879f
 80086d0:	0800875b 	.word	0x0800875b
 80086d4:	0800879f 	.word	0x0800879f
 80086d8:	0800879f 	.word	0x0800879f
 80086dc:	0800879f 	.word	0x0800879f
 80086e0:	0800879f 	.word	0x0800879f
 80086e4:	0800879f 	.word	0x0800879f
 80086e8:	0800879f 	.word	0x0800879f
 80086ec:	0800879f 	.word	0x0800879f
 80086f0:	0800876b 	.word	0x0800876b
 80086f4:	0800879f 	.word	0x0800879f
 80086f8:	0800879f 	.word	0x0800879f
 80086fc:	0800879f 	.word	0x0800879f
 8008700:	0800879f 	.word	0x0800879f
 8008704:	0800879f 	.word	0x0800879f
 8008708:	0800879f 	.word	0x0800879f
 800870c:	0800879f 	.word	0x0800879f
 8008710:	0800879f 	.word	0x0800879f
 8008714:	0800879f 	.word	0x0800879f
 8008718:	0800879f 	.word	0x0800879f
 800871c:	0800879f 	.word	0x0800879f
 8008720:	0800879f 	.word	0x0800879f
 8008724:	0800879f 	.word	0x0800879f
 8008728:	0800879f 	.word	0x0800879f
 800872c:	0800879f 	.word	0x0800879f
 8008730:	08008791 	.word	0x08008791
 8008734:	2b40      	cmp	r3, #64	@ 0x40
 8008736:	d02e      	beq.n	8008796 <UART_SetConfig+0x8aa>
 8008738:	e031      	b.n	800879e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800873a:	f7fd f8e7 	bl	800590c <HAL_RCC_GetPCLK1Freq>
 800873e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008740:	e033      	b.n	80087aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008742:	f7fd f8f9 	bl	8005938 <HAL_RCC_GetPCLK2Freq>
 8008746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008748:	e02f      	b.n	80087aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800874a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fb6a 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008758:	e027      	b.n	80087aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875a:	f107 0318 	add.w	r3, r7, #24
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fcb6 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008768:	e01f      	b.n	80087aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800876a:	4b2d      	ldr	r3, [pc, #180]	@ (8008820 <UART_SetConfig+0x934>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008776:	4b2a      	ldr	r3, [pc, #168]	@ (8008820 <UART_SetConfig+0x934>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	08db      	lsrs	r3, r3, #3
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	4a24      	ldr	r2, [pc, #144]	@ (8008814 <UART_SetConfig+0x928>)
 8008782:	fa22 f303 	lsr.w	r3, r2, r3
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008788:	e00f      	b.n	80087aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800878a:	4b22      	ldr	r3, [pc, #136]	@ (8008814 <UART_SetConfig+0x928>)
 800878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800878e:	e00c      	b.n	80087aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008790:	4b21      	ldr	r3, [pc, #132]	@ (8008818 <UART_SetConfig+0x92c>)
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008794:	e009      	b.n	80087aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879c:	e005      	b.n	80087aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80e7 	beq.w	8008980 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	4a19      	ldr	r2, [pc, #100]	@ (800881c <UART_SetConfig+0x930>)
 80087b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087bc:	461a      	mov	r2, r3
 80087be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c4:	005a      	lsls	r2, r3, #1
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	441a      	add	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	d916      	bls.n	800880c <UART_SetConfig+0x920>
 80087de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e4:	d212      	bcs.n	800880c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f023 030f 	bic.w	r3, r3, #15
 80087ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80087fe:	4313      	orrs	r3, r2
 8008800:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	e0b9      	b.n	8008980 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008812:	e0b5      	b.n	8008980 <UART_SetConfig+0xa94>
 8008814:	03d09000 	.word	0x03d09000
 8008818:	003d0900 	.word	0x003d0900
 800881c:	0800e81c 	.word	0x0800e81c
 8008820:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008824:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008828:	2b20      	cmp	r3, #32
 800882a:	dc49      	bgt.n	80088c0 <UART_SetConfig+0x9d4>
 800882c:	2b00      	cmp	r3, #0
 800882e:	db7c      	blt.n	800892a <UART_SetConfig+0xa3e>
 8008830:	2b20      	cmp	r3, #32
 8008832:	d87a      	bhi.n	800892a <UART_SetConfig+0xa3e>
 8008834:	a201      	add	r2, pc, #4	@ (adr r2, 800883c <UART_SetConfig+0x950>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	080088c7 	.word	0x080088c7
 8008840:	080088cf 	.word	0x080088cf
 8008844:	0800892b 	.word	0x0800892b
 8008848:	0800892b 	.word	0x0800892b
 800884c:	080088d7 	.word	0x080088d7
 8008850:	0800892b 	.word	0x0800892b
 8008854:	0800892b 	.word	0x0800892b
 8008858:	0800892b 	.word	0x0800892b
 800885c:	080088e7 	.word	0x080088e7
 8008860:	0800892b 	.word	0x0800892b
 8008864:	0800892b 	.word	0x0800892b
 8008868:	0800892b 	.word	0x0800892b
 800886c:	0800892b 	.word	0x0800892b
 8008870:	0800892b 	.word	0x0800892b
 8008874:	0800892b 	.word	0x0800892b
 8008878:	0800892b 	.word	0x0800892b
 800887c:	080088f7 	.word	0x080088f7
 8008880:	0800892b 	.word	0x0800892b
 8008884:	0800892b 	.word	0x0800892b
 8008888:	0800892b 	.word	0x0800892b
 800888c:	0800892b 	.word	0x0800892b
 8008890:	0800892b 	.word	0x0800892b
 8008894:	0800892b 	.word	0x0800892b
 8008898:	0800892b 	.word	0x0800892b
 800889c:	0800892b 	.word	0x0800892b
 80088a0:	0800892b 	.word	0x0800892b
 80088a4:	0800892b 	.word	0x0800892b
 80088a8:	0800892b 	.word	0x0800892b
 80088ac:	0800892b 	.word	0x0800892b
 80088b0:	0800892b 	.word	0x0800892b
 80088b4:	0800892b 	.word	0x0800892b
 80088b8:	0800892b 	.word	0x0800892b
 80088bc:	0800891d 	.word	0x0800891d
 80088c0:	2b40      	cmp	r3, #64	@ 0x40
 80088c2:	d02e      	beq.n	8008922 <UART_SetConfig+0xa36>
 80088c4:	e031      	b.n	800892a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c6:	f7fd f821 	bl	800590c <HAL_RCC_GetPCLK1Freq>
 80088ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088cc:	e033      	b.n	8008936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088ce:	f7fd f833 	bl	8005938 <HAL_RCC_GetPCLK2Freq>
 80088d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088d4:	e02f      	b.n	8008936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe faa4 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e4:	e027      	b.n	8008936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e6:	f107 0318 	add.w	r3, r7, #24
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fbf0 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f4:	e01f      	b.n	8008936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088f6:	4b2d      	ldr	r3, [pc, #180]	@ (80089ac <UART_SetConfig+0xac0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008902:	4b2a      	ldr	r3, [pc, #168]	@ (80089ac <UART_SetConfig+0xac0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	08db      	lsrs	r3, r3, #3
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	4a28      	ldr	r2, [pc, #160]	@ (80089b0 <UART_SetConfig+0xac4>)
 800890e:	fa22 f303 	lsr.w	r3, r2, r3
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008914:	e00f      	b.n	8008936 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008916:	4b26      	ldr	r3, [pc, #152]	@ (80089b0 <UART_SetConfig+0xac4>)
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891a:	e00c      	b.n	8008936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800891c:	4b25      	ldr	r3, [pc, #148]	@ (80089b4 <UART_SetConfig+0xac8>)
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008920:	e009      	b.n	8008936 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008928:	e005      	b.n	8008936 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008934:	bf00      	nop
    }

    if (pclk != 0U)
 8008936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d021      	beq.n	8008980 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008940:	4a1d      	ldr	r2, [pc, #116]	@ (80089b8 <UART_SetConfig+0xacc>)
 8008942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008946:	461a      	mov	r2, r3
 8008948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894a:	fbb3 f2f2 	udiv	r2, r3, r2
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	441a      	add	r2, r3
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	fbb2 f3f3 	udiv	r3, r2, r3
 800895e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008962:	2b0f      	cmp	r3, #15
 8008964:	d909      	bls.n	800897a <UART_SetConfig+0xa8e>
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800896c:	d205      	bcs.n	800897a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	b29a      	uxth	r2, r3
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60da      	str	r2, [r3, #12]
 8008978:	e002      	b.n	8008980 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2201      	movs	r2, #1
 8008984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2201      	movs	r2, #1
 800898c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2200      	movs	r2, #0
 8008994:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2200      	movs	r2, #0
 800899a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800899c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3748      	adds	r7, #72	@ 0x48
 80089a4:	46bd      	mov	sp, r7
 80089a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	03d09000 	.word	0x03d09000
 80089b4:	003d0900 	.word	0x003d0900
 80089b8:	0800e81c 	.word	0x0800e81c

080089bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c8:	f003 0308 	and.w	r3, r3, #8
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00a      	beq.n	80089e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	f003 0310 	and.w	r3, r3, #16
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01a      	beq.n	8008ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aba:	d10a      	bne.n	8008ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	430a      	orrs	r2, r1
 8008af2:	605a      	str	r2, [r3, #4]
  }
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b098      	sub	sp, #96	@ 0x60
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b10:	f7f8 fc1e 	bl	8001350 <HAL_GetTick>
 8008b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	d12f      	bne.n	8008b84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f88e 	bl	8008c54 <UART_WaitOnFlagUntilTimeout>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d022      	beq.n	8008b84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e6      	bne.n	8008b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e063      	b.n	8008c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d149      	bne.n	8008c26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f857 	bl	8008c54 <UART_WaitOnFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d03c      	beq.n	8008c26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e6      	bne.n	8008bac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3308      	adds	r3, #8
 8008be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	e853 3f00 	ldrex	r3, [r3]
 8008bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f023 0301 	bic.w	r3, r3, #1
 8008bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bfe:	61fa      	str	r2, [r7, #28]
 8008c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	69b9      	ldr	r1, [r7, #24]
 8008c04:	69fa      	ldr	r2, [r7, #28]
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e5      	bne.n	8008bde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e012      	b.n	8008c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3758      	adds	r7, #88	@ 0x58
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c64:	e04f      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d04b      	beq.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c6e:	f7f8 fb6f 	bl	8001350 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d302      	bcc.n	8008c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e04e      	b.n	8008d26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d037      	beq.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b80      	cmp	r3, #128	@ 0x80
 8008c9a:	d034      	beq.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ca0:	d031      	beq.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d110      	bne.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2208      	movs	r2, #8
 8008cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 f839 	bl	8008d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e029      	b.n	8008d26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ce0:	d111      	bne.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 f81f 	bl	8008d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e00f      	b.n	8008d26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69da      	ldr	r2, [r3, #28]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	bf0c      	ite	eq
 8008d16:	2301      	moveq	r3, #1
 8008d18:	2300      	movne	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d0a0      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b095      	sub	sp, #84	@ 0x54
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e6      	bne.n	8008d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8008df8 <UART_EndRxTransfer+0xc8>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3308      	adds	r3, #8
 8008d88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e5      	bne.n	8008d6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d118      	bne.n	8008dd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f023 0310 	bic.w	r3, r3, #16
 8008dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6979      	ldr	r1, [r7, #20]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e6      	bne.n	8008da6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008dec:	bf00      	nop
 8008dee:	3754      	adds	r7, #84	@ 0x54
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	effffffe 	.word	0xeffffffe

08008dfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e027      	b.n	8008e62 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2224      	movs	r2, #36	@ 0x24
 8008e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0201 	bic.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e02d      	b.n	8008ee2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2224      	movs	r2, #36	@ 0x24
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0201 	bic.w	r2, r2, #1
 8008eac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f850 	bl	8008f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e02d      	b.n	8008f5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2224      	movs	r2, #36	@ 0x24
 8008f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f022 0201 	bic.w	r2, r2, #1
 8008f28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f812 	bl	8008f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d108      	bne.n	8008f8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f88:	e031      	b.n	8008fee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f8a:	2310      	movs	r3, #16
 8008f8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f8e:	2310      	movs	r3, #16
 8008f90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	0e5b      	lsrs	r3, r3, #25
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	0f5b      	lsrs	r3, r3, #29
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 0307 	and.w	r3, r3, #7
 8008fb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	7b3a      	ldrb	r2, [r7, #12]
 8008fb6:	4911      	ldr	r1, [pc, #68]	@ (8008ffc <UARTEx_SetNbDataToProcess+0x94>)
 8008fb8:	5c8a      	ldrb	r2, [r1, r2]
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fbe:	7b3a      	ldrb	r2, [r7, #12]
 8008fc0:	490f      	ldr	r1, [pc, #60]	@ (8009000 <UARTEx_SetNbDataToProcess+0x98>)
 8008fc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	7b7a      	ldrb	r2, [r7, #13]
 8008fd4:	4909      	ldr	r1, [pc, #36]	@ (8008ffc <UARTEx_SetNbDataToProcess+0x94>)
 8008fd6:	5c8a      	ldrb	r2, [r1, r2]
 8008fd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fdc:	7b7a      	ldrb	r2, [r7, #13]
 8008fde:	4908      	ldr	r1, [pc, #32]	@ (8009000 <UARTEx_SetNbDataToProcess+0x98>)
 8008fe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	0800e834 	.word	0x0800e834
 8009000:	0800e83c 	.word	0x0800e83c

08009004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009004:	b084      	sub	sp, #16
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	f107 001c 	add.w	r0, r7, #28
 8009012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009016:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800901a:	2b01      	cmp	r3, #1
 800901c:	d121      	bne.n	8009062 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009022:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	4b2c      	ldr	r3, [pc, #176]	@ (80090e0 <USB_CoreInit+0xdc>)
 8009030:	4013      	ands	r3, r2
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009042:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009046:	2b01      	cmp	r3, #1
 8009048:	d105      	bne.n	8009056 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fafa 	bl	800a650 <USB_CoreReset>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	e01b      	b.n	800909a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 faee 	bl	800a650 <USB_CoreReset>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009078:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
 800908c:	e005      	b.n	800909a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009092:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800909a:	7fbb      	ldrb	r3, [r7, #30]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d116      	bne.n	80090ce <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80090ae:	4b0d      	ldr	r3, [pc, #52]	@ (80090e4 <USB_CoreInit+0xe0>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f043 0206 	orr.w	r2, r3, #6
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f043 0220 	orr.w	r2, r3, #32
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090da:	b004      	add	sp, #16
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	ffbdffbf 	.word	0xffbdffbf
 80090e4:	03ee0000 	.word	0x03ee0000

080090e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d165      	bne.n	80091c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4a41      	ldr	r2, [pc, #260]	@ (8009204 <USB_SetTurnaroundTime+0x11c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d906      	bls.n	8009112 <USB_SetTurnaroundTime+0x2a>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4a40      	ldr	r2, [pc, #256]	@ (8009208 <USB_SetTurnaroundTime+0x120>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d202      	bcs.n	8009112 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800910c:	230f      	movs	r3, #15
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	e062      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	4a3c      	ldr	r2, [pc, #240]	@ (8009208 <USB_SetTurnaroundTime+0x120>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d306      	bcc.n	8009128 <USB_SetTurnaroundTime+0x40>
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	4a3b      	ldr	r2, [pc, #236]	@ (800920c <USB_SetTurnaroundTime+0x124>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d202      	bcs.n	8009128 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009122:	230e      	movs	r3, #14
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e057      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4a38      	ldr	r2, [pc, #224]	@ (800920c <USB_SetTurnaroundTime+0x124>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d306      	bcc.n	800913e <USB_SetTurnaroundTime+0x56>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4a37      	ldr	r2, [pc, #220]	@ (8009210 <USB_SetTurnaroundTime+0x128>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d202      	bcs.n	800913e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009138:	230d      	movs	r3, #13
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e04c      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4a33      	ldr	r2, [pc, #204]	@ (8009210 <USB_SetTurnaroundTime+0x128>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d306      	bcc.n	8009154 <USB_SetTurnaroundTime+0x6c>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4a32      	ldr	r2, [pc, #200]	@ (8009214 <USB_SetTurnaroundTime+0x12c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d802      	bhi.n	8009154 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800914e:	230c      	movs	r3, #12
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	e041      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4a2f      	ldr	r2, [pc, #188]	@ (8009214 <USB_SetTurnaroundTime+0x12c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d906      	bls.n	800916a <USB_SetTurnaroundTime+0x82>
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4a2e      	ldr	r2, [pc, #184]	@ (8009218 <USB_SetTurnaroundTime+0x130>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d802      	bhi.n	800916a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009164:	230b      	movs	r3, #11
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e036      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a2a      	ldr	r2, [pc, #168]	@ (8009218 <USB_SetTurnaroundTime+0x130>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d906      	bls.n	8009180 <USB_SetTurnaroundTime+0x98>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4a29      	ldr	r2, [pc, #164]	@ (800921c <USB_SetTurnaroundTime+0x134>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d802      	bhi.n	8009180 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800917a:	230a      	movs	r3, #10
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e02b      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4a26      	ldr	r2, [pc, #152]	@ (800921c <USB_SetTurnaroundTime+0x134>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d906      	bls.n	8009196 <USB_SetTurnaroundTime+0xae>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4a25      	ldr	r2, [pc, #148]	@ (8009220 <USB_SetTurnaroundTime+0x138>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d202      	bcs.n	8009196 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009190:	2309      	movs	r3, #9
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e020      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	4a21      	ldr	r2, [pc, #132]	@ (8009220 <USB_SetTurnaroundTime+0x138>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d306      	bcc.n	80091ac <USB_SetTurnaroundTime+0xc4>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4a20      	ldr	r2, [pc, #128]	@ (8009224 <USB_SetTurnaroundTime+0x13c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d802      	bhi.n	80091ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80091a6:	2308      	movs	r3, #8
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	e015      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009224 <USB_SetTurnaroundTime+0x13c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d906      	bls.n	80091c2 <USB_SetTurnaroundTime+0xda>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009228 <USB_SetTurnaroundTime+0x140>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d202      	bcs.n	80091c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80091bc:	2307      	movs	r3, #7
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	e00a      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80091c2:	2306      	movs	r3, #6
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	e007      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d102      	bne.n	80091d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80091ce:	2309      	movs	r3, #9
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e001      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80091d4:	2309      	movs	r3, #9
 80091d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	029b      	lsls	r3, r3, #10
 80091ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	00d8acbf 	.word	0x00d8acbf
 8009208:	00e4e1c0 	.word	0x00e4e1c0
 800920c:	00f42400 	.word	0x00f42400
 8009210:	01067380 	.word	0x01067380
 8009214:	011a499f 	.word	0x011a499f
 8009218:	01312cff 	.word	0x01312cff
 800921c:	014ca43f 	.word	0x014ca43f
 8009220:	016e3600 	.word	0x016e3600
 8009224:	01a6ab1f 	.word	0x01a6ab1f
 8009228:	01e84800 	.word	0x01e84800

0800922c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f043 0201 	orr.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f023 0201 	bic.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d115      	bne.n	80092be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800929e:	200a      	movs	r0, #10
 80092a0:	f7f8 f862 	bl	8001368 <HAL_Delay>
      ms += 10U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	330a      	adds	r3, #10
 80092a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 f93f 	bl	800a52e <USB_GetMode>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d01e      	beq.n	80092f4 <USB_SetCurrentMode+0x84>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80092ba:	d9f0      	bls.n	800929e <USB_SetCurrentMode+0x2e>
 80092bc:	e01a      	b.n	80092f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d115      	bne.n	80092f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80092d0:	200a      	movs	r0, #10
 80092d2:	f7f8 f849 	bl	8001368 <HAL_Delay>
      ms += 10U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	330a      	adds	r3, #10
 80092da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f926 	bl	800a52e <USB_GetMode>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <USB_SetCurrentMode+0x84>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80092ec:	d9f0      	bls.n	80092d0 <USB_SetCurrentMode+0x60>
 80092ee:	e001      	b.n	80092f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e005      	b.n	8009300 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80092f8:	d101      	bne.n	80092fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009308:	b084      	sub	sp, #16
 800930a:	b580      	push	{r7, lr}
 800930c:	b086      	sub	sp, #24
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	e009      	b.n	800933c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	3340      	adds	r3, #64	@ 0x40
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	2200      	movs	r2, #0
 8009334:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3301      	adds	r3, #1
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b0e      	cmp	r3, #14
 8009340:	d9f2      	bls.n	8009328 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009342:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009346:	2b00      	cmp	r3, #0
 8009348:	d11c      	bne.n	8009384 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009358:	f043 0302 	orr.w	r3, r3, #2
 800935c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	e005      	b.n	8009390 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009388:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009396:	461a      	mov	r2, r3
 8009398:	2300      	movs	r3, #0
 800939a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800939c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d10d      	bne.n	80093c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80093a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d104      	bne.n	80093b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80093ac:	2100      	movs	r1, #0
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f968 	bl	8009684 <USB_SetDevSpeed>
 80093b4:	e008      	b.n	80093c8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80093b6:	2101      	movs	r1, #1
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f963 	bl	8009684 <USB_SetDevSpeed>
 80093be:	e003      	b.n	80093c8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80093c0:	2103      	movs	r1, #3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f95e 	bl	8009684 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093c8:	2110      	movs	r1, #16
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8fa 	bl	80095c4 <USB_FlushTxFifo>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f924 	bl	8009628 <USB_FlushRxFifo>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f0:	461a      	mov	r2, r3
 80093f2:	2300      	movs	r3, #0
 80093f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093fc:	461a      	mov	r2, r3
 80093fe:	2300      	movs	r3, #0
 8009400:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009408:	461a      	mov	r2, r3
 800940a:	2300      	movs	r3, #0
 800940c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800940e:	2300      	movs	r3, #0
 8009410:	613b      	str	r3, [r7, #16]
 8009412:	e043      	b.n	800949c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009426:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800942a:	d118      	bne.n	800945e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800943e:	461a      	mov	r2, r3
 8009440:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	e013      	b.n	8009470 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009454:	461a      	mov	r2, r3
 8009456:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	e008      	b.n	8009470 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800946a:	461a      	mov	r2, r3
 800946c:	2300      	movs	r3, #0
 800946e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947c:	461a      	mov	r2, r3
 800947e:	2300      	movs	r3, #0
 8009480:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800948e:	461a      	mov	r2, r3
 8009490:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009494:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094a0:	461a      	mov	r2, r3
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d3b5      	bcc.n	8009414 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	e043      	b.n	8009536 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094c4:	d118      	bne.n	80094f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d8:	461a      	mov	r2, r3
 80094da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	e013      	b.n	800950a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ee:	461a      	mov	r2, r3
 80094f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	e008      	b.n	800950a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009504:	461a      	mov	r2, r3
 8009506:	2300      	movs	r3, #0
 8009508:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009516:	461a      	mov	r2, r3
 8009518:	2300      	movs	r3, #0
 800951a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009528:	461a      	mov	r2, r3
 800952a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800952e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	3301      	adds	r3, #1
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800953a:	461a      	mov	r2, r3
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	4293      	cmp	r3, r2
 8009540:	d3b5      	bcc.n	80094ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009554:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009562:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009568:	2b00      	cmp	r3, #0
 800956a:	d105      	bne.n	8009578 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	f043 0210 	orr.w	r2, r3, #16
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	699a      	ldr	r2, [r3, #24]
 800957c:	4b0f      	ldr	r3, [pc, #60]	@ (80095bc <USB_DevInit+0x2b4>)
 800957e:	4313      	orrs	r3, r2
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009584:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009588:	2b00      	cmp	r3, #0
 800958a:	d005      	beq.n	8009598 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f043 0208 	orr.w	r2, r3, #8
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009598:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800959c:	2b01      	cmp	r3, #1
 800959e:	d105      	bne.n	80095ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699a      	ldr	r2, [r3, #24]
 80095a4:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <USB_DevInit+0x2b8>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095b8:	b004      	add	sp, #16
 80095ba:	4770      	bx	lr
 80095bc:	803c3800 	.word	0x803c3800
 80095c0:	40000004 	.word	0x40000004

080095c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095de:	d901      	bls.n	80095e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e01b      	b.n	800961c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	daf2      	bge.n	80095d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	019b      	lsls	r3, r3, #6
 80095f4:	f043 0220 	orr.w	r2, r3, #32
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009608:	d901      	bls.n	800960e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e006      	b.n	800961c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b20      	cmp	r3, #32
 8009618:	d0f0      	beq.n	80095fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3301      	adds	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009640:	d901      	bls.n	8009646 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e018      	b.n	8009678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	daf2      	bge.n	8009634 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2210      	movs	r2, #16
 8009656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009664:	d901      	bls.n	800966a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e006      	b.n	8009678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f003 0310 	and.w	r3, r3, #16
 8009672:	2b10      	cmp	r3, #16
 8009674:	d0f0      	beq.n	8009658 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096a4:	4313      	orrs	r3, r2
 80096a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b087      	sub	sp, #28
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f003 0306 	and.w	r3, r3, #6
 80096ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d102      	bne.n	80096dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80096d6:	2300      	movs	r3, #0
 80096d8:	75fb      	strb	r3, [r7, #23]
 80096da:	e00a      	b.n	80096f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d002      	beq.n	80096e8 <USB_GetDevSpeed+0x32>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b06      	cmp	r3, #6
 80096e6:	d102      	bne.n	80096ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096e8:	2302      	movs	r3, #2
 80096ea:	75fb      	strb	r3, [r7, #23]
 80096ec:	e001      	b.n	80096f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096ee:	230f      	movs	r3, #15
 80096f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	785b      	ldrb	r3, [r3, #1]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d139      	bne.n	8009790 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	2101      	movs	r1, #1
 800972e:	fa01 f303 	lsl.w	r3, r1, r3
 8009732:	b29b      	uxth	r3, r3
 8009734:	68f9      	ldr	r1, [r7, #12]
 8009736:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800973a:	4313      	orrs	r3, r2
 800973c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d153      	bne.n	80097fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	791b      	ldrb	r3, [r3, #4]
 800976e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009770:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	059b      	lsls	r3, r3, #22
 8009776:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009778:	431a      	orrs	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	0159      	lsls	r1, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	440b      	add	r3, r1
 8009782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009786:	4619      	mov	r1, r3
 8009788:	4b20      	ldr	r3, [pc, #128]	@ (800980c <USB_ActivateEndpoint+0x10c>)
 800978a:	4313      	orrs	r3, r2
 800978c:	600b      	str	r3, [r1, #0]
 800978e:	e035      	b.n	80097fc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009796:	69da      	ldr	r2, [r3, #28]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	2101      	movs	r1, #1
 80097a2:	fa01 f303 	lsl.w	r3, r1, r3
 80097a6:	041b      	lsls	r3, r3, #16
 80097a8:	68f9      	ldr	r1, [r7, #12]
 80097aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097ae:	4313      	orrs	r3, r2
 80097b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d119      	bne.n	80097fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	791b      	ldrb	r3, [r3, #4]
 80097e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097e4:	430b      	orrs	r3, r1
 80097e6:	431a      	orrs	r2, r3
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	0159      	lsls	r1, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	440b      	add	r3, r1
 80097f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f4:	4619      	mov	r1, r3
 80097f6:	4b05      	ldr	r3, [pc, #20]	@ (800980c <USB_ActivateEndpoint+0x10c>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	10008000 	.word	0x10008000

08009810 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	785b      	ldrb	r3, [r3, #1]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d161      	bne.n	80098f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800983e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009842:	d11f      	bne.n	8009884 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	440a      	add	r2, r1
 800985a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800985e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009862:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	0151      	lsls	r1, r2, #5
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	440a      	add	r2, r1
 800987a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800987e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800988a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	2101      	movs	r1, #1
 8009896:	fa01 f303 	lsl.w	r3, r1, r3
 800989a:	b29b      	uxth	r3, r3
 800989c:	43db      	mvns	r3, r3
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098a4:	4013      	ands	r3, r2
 80098a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ae:	69da      	ldr	r2, [r3, #28]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f003 030f 	and.w	r3, r3, #15
 80098b8:	2101      	movs	r1, #1
 80098ba:	fa01 f303 	lsl.w	r3, r1, r3
 80098be:	b29b      	uxth	r3, r3
 80098c0:	43db      	mvns	r3, r3
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098c8:	4013      	ands	r3, r2
 80098ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	0159      	lsls	r1, r3, #5
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	440b      	add	r3, r1
 80098e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098e6:	4619      	mov	r1, r3
 80098e8:	4b35      	ldr	r3, [pc, #212]	@ (80099c0 <USB_DeactivateEndpoint+0x1b0>)
 80098ea:	4013      	ands	r3, r2
 80098ec:	600b      	str	r3, [r1, #0]
 80098ee:	e060      	b.n	80099b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009906:	d11f      	bne.n	8009948 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	0151      	lsls	r1, r2, #5
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	440a      	add	r2, r1
 800991e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009922:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009926:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	0151      	lsls	r1, r2, #5
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	440a      	add	r2, r1
 800993e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009942:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009946:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800994e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	2101      	movs	r1, #1
 800995a:	fa01 f303 	lsl.w	r3, r1, r3
 800995e:	041b      	lsls	r3, r3, #16
 8009960:	43db      	mvns	r3, r3
 8009962:	68f9      	ldr	r1, [r7, #12]
 8009964:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009968:	4013      	ands	r3, r2
 800996a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009972:	69da      	ldr	r2, [r3, #28]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	f003 030f 	and.w	r3, r3, #15
 800997c:	2101      	movs	r1, #1
 800997e:	fa01 f303 	lsl.w	r3, r1, r3
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	43db      	mvns	r3, r3
 8009986:	68f9      	ldr	r1, [r7, #12]
 8009988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800998c:	4013      	ands	r3, r2
 800998e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	0159      	lsls	r1, r3, #5
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	440b      	add	r3, r1
 80099a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099aa:	4619      	mov	r1, r3
 80099ac:	4b05      	ldr	r3, [pc, #20]	@ (80099c4 <USB_DeactivateEndpoint+0x1b4>)
 80099ae:	4013      	ands	r3, r2
 80099b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	ec337800 	.word	0xec337800
 80099c4:	eff37800 	.word	0xeff37800

080099c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08a      	sub	sp, #40	@ 0x28
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	4613      	mov	r3, r2
 80099d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	785b      	ldrb	r3, [r3, #1]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	f040 8185 	bne.w	8009cf4 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d132      	bne.n	8009a58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	0159      	lsls	r1, r3, #5
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	440b      	add	r3, r1
 8009a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4ba7      	ldr	r3, [pc, #668]	@ (8009cac <USB_EPStartXfer+0x2e4>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	0151      	lsls	r1, r2, #5
 8009a26:	69fa      	ldr	r2, [r7, #28]
 8009a28:	440a      	add	r2, r1
 8009a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a40:	691a      	ldr	r2, [r3, #16]
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	0159      	lsls	r1, r3, #5
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	440b      	add	r3, r1
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4b97      	ldr	r3, [pc, #604]	@ (8009cb0 <USB_EPStartXfer+0x2e8>)
 8009a52:	4013      	ands	r3, r2
 8009a54:	610b      	str	r3, [r1, #16]
 8009a56:	e097      	b.n	8009b88 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a64:	691a      	ldr	r2, [r3, #16]
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	0159      	lsls	r1, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	440b      	add	r3, r1
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a72:	4619      	mov	r1, r3
 8009a74:	4b8e      	ldr	r3, [pc, #568]	@ (8009cb0 <USB_EPStartXfer+0x2e8>)
 8009a76:	4013      	ands	r3, r2
 8009a78:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a86:	691a      	ldr	r2, [r3, #16]
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	0159      	lsls	r1, r3, #5
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	440b      	add	r3, r1
 8009a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a94:	4619      	mov	r1, r3
 8009a96:	4b85      	ldr	r3, [pc, #532]	@ (8009cac <USB_EPStartXfer+0x2e4>)
 8009a98:	4013      	ands	r3, r2
 8009a9a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d11a      	bne.n	8009ad8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	691a      	ldr	r2, [r3, #16]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d903      	bls.n	8009ab6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	69ba      	ldr	r2, [r7, #24]
 8009ac6:	0151      	lsls	r1, r2, #5
 8009ac8:	69fa      	ldr	r2, [r7, #28]
 8009aca:	440a      	add	r2, r1
 8009acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ad0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ad4:	6113      	str	r3, [r2, #16]
 8009ad6:	e044      	b.n	8009b62 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	1e5a      	subs	r2, r3, #1
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	8afb      	ldrh	r3, [r7, #22]
 8009afe:	04d9      	lsls	r1, r3, #19
 8009b00:	4b6c      	ldr	r3, [pc, #432]	@ (8009cb4 <USB_EPStartXfer+0x2ec>)
 8009b02:	400b      	ands	r3, r1
 8009b04:	69b9      	ldr	r1, [r7, #24]
 8009b06:	0148      	lsls	r0, r1, #5
 8009b08:	69f9      	ldr	r1, [r7, #28]
 8009b0a:	4401      	add	r1, r0
 8009b0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b10:	4313      	orrs	r3, r2
 8009b12:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	791b      	ldrb	r3, [r3, #4]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d122      	bne.n	8009b62 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	0151      	lsls	r1, r2, #5
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	440a      	add	r2, r1
 8009b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b36:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009b3a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	8afb      	ldrh	r3, [r7, #22]
 8009b4c:	075b      	lsls	r3, r3, #29
 8009b4e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009b52:	69b9      	ldr	r1, [r7, #24]
 8009b54:	0148      	lsls	r0, r1, #5
 8009b56:	69f9      	ldr	r1, [r7, #28]
 8009b58:	4401      	add	r1, r0
 8009b5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6e:	691a      	ldr	r2, [r3, #16]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b78:	69b9      	ldr	r1, [r7, #24]
 8009b7a:	0148      	lsls	r0, r1, #5
 8009b7c:	69f9      	ldr	r1, [r7, #28]
 8009b7e:	4401      	add	r1, r0
 8009b80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b84:	4313      	orrs	r3, r2
 8009b86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d14b      	bne.n	8009c26 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d009      	beq.n	8009baa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	791b      	ldrb	r3, [r3, #4]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d128      	bne.n	8009c04 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d110      	bne.n	8009be4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	e00f      	b.n	8009c04 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	0151      	lsls	r1, r2, #5
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	440a      	add	r2, r1
 8009bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c02:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	0151      	lsls	r1, r2, #5
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	440a      	add	r2, r1
 8009c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	e169      	b.n	8009efa <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	0151      	lsls	r1, r2, #5
 8009c38:	69fa      	ldr	r2, [r7, #28]
 8009c3a:	440a      	add	r2, r1
 8009c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c44:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	791b      	ldrb	r3, [r3, #4]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d015      	beq.n	8009c7a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 8151 	beq.w	8009efa <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 030f 	and.w	r3, r3, #15
 8009c68:	2101      	movs	r1, #1
 8009c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c6e:	69f9      	ldr	r1, [r7, #28]
 8009c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c74:	4313      	orrs	r3, r2
 8009c76:	634b      	str	r3, [r1, #52]	@ 0x34
 8009c78:	e13f      	b.n	8009efa <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d116      	bne.n	8009cb8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	0151      	lsls	r1, r2, #5
 8009c9c:	69fa      	ldr	r2, [r7, #28]
 8009c9e:	440a      	add	r2, r1
 8009ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ca4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	e015      	b.n	8009cd8 <USB_EPStartXfer+0x310>
 8009cac:	e007ffff 	.word	0xe007ffff
 8009cb0:	fff80000 	.word	0xfff80000
 8009cb4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	69ba      	ldr	r2, [r7, #24]
 8009cc8:	0151      	lsls	r1, r2, #5
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	440a      	add	r2, r1
 8009cce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cd6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	68d9      	ldr	r1, [r3, #12]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	b298      	uxth	r0, r3
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	4603      	mov	r3, r0
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f9b9 	bl	800a064 <USB_WritePacket>
 8009cf2:	e102      	b.n	8009efa <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	015a      	lsls	r2, r3, #5
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d00:	691a      	ldr	r2, [r3, #16]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	0159      	lsls	r1, r3, #5
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	440b      	add	r3, r1
 8009d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4b7c      	ldr	r3, [pc, #496]	@ (8009f04 <USB_EPStartXfer+0x53c>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	0159      	lsls	r1, r3, #5
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	440b      	add	r3, r1
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d30:	4619      	mov	r1, r3
 8009d32:	4b75      	ldr	r3, [pc, #468]	@ (8009f08 <USB_EPStartXfer+0x540>)
 8009d34:	4013      	ands	r3, r2
 8009d36:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d12f      	bne.n	8009d9e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	689a      	ldr	r2, [r3, #8]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d6c:	69b9      	ldr	r1, [r7, #24]
 8009d6e:	0148      	lsls	r0, r1, #5
 8009d70:	69f9      	ldr	r1, [r7, #28]
 8009d72:	4401      	add	r1, r0
 8009d74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	0151      	lsls	r1, r2, #5
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	440a      	add	r2, r1
 8009d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d9a:	6113      	str	r3, [r2, #16]
 8009d9c:	e05f      	b.n	8009e5e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d123      	bne.n	8009dee <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dbc:	69b9      	ldr	r1, [r7, #24]
 8009dbe:	0148      	lsls	r0, r1, #5
 8009dc0:	69f9      	ldr	r1, [r7, #28]
 8009dc2:	4401      	add	r1, r0
 8009dc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dea:	6113      	str	r3, [r2, #16]
 8009dec:	e037      	b.n	8009e5e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	691a      	ldr	r2, [r3, #16]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	4413      	add	r3, r2
 8009df8:	1e5a      	subs	r2, r3, #1
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e02:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	8afa      	ldrh	r2, [r7, #22]
 8009e0a:	fb03 f202 	mul.w	r2, r3, r2
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	8afb      	ldrh	r3, [r7, #22]
 8009e22:	04d9      	lsls	r1, r3, #19
 8009e24:	4b39      	ldr	r3, [pc, #228]	@ (8009f0c <USB_EPStartXfer+0x544>)
 8009e26:	400b      	ands	r3, r1
 8009e28:	69b9      	ldr	r1, [r7, #24]
 8009e2a:	0148      	lsls	r0, r1, #5
 8009e2c:	69f9      	ldr	r1, [r7, #28]
 8009e2e:	4401      	add	r1, r0
 8009e30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e34:	4313      	orrs	r3, r2
 8009e36:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e44:	691a      	ldr	r2, [r3, #16]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e4e:	69b9      	ldr	r1, [r7, #24]
 8009e50:	0148      	lsls	r0, r1, #5
 8009e52:	69f9      	ldr	r1, [r7, #28]
 8009e54:	4401      	add	r1, r0
 8009e56:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d10d      	bne.n	8009e80 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d009      	beq.n	8009e80 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	68d9      	ldr	r1, [r3, #12]
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e7c:	460a      	mov	r2, r1
 8009e7e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	791b      	ldrb	r3, [r3, #4]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d128      	bne.n	8009eda <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d110      	bne.n	8009eba <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	0151      	lsls	r1, r2, #5
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	440a      	add	r2, r1
 8009eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	e00f      	b.n	8009eda <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	0151      	lsls	r1, r2, #5
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	440a      	add	r2, r1
 8009ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ed8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	0151      	lsls	r1, r2, #5
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	440a      	add	r2, r1
 8009ef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ef4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ef8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	fff80000 	.word	0xfff80000
 8009f08:	e007ffff 	.word	0xe007ffff
 8009f0c:	1ff80000 	.word	0x1ff80000

08009f10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d14a      	bne.n	8009fc4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f46:	f040 8086 	bne.w	800a056 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	7812      	ldrb	r2, [r2, #0]
 8009f5e:	0151      	lsls	r1, r2, #5
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	440a      	add	r2, r1
 8009f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	7812      	ldrb	r2, [r2, #0]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3301      	adds	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d902      	bls.n	8009fa8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa6:	e056      	b.n	800a056 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fc0:	d0e7      	beq.n	8009f92 <USB_EPStopXfer+0x82>
 8009fc2:	e048      	b.n	800a056 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fdc:	d13b      	bne.n	800a056 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	7812      	ldrb	r2, [r2, #0]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ffc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a000:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	7812      	ldrb	r2, [r2, #0]
 800a016:	0151      	lsls	r1, r2, #5
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	440a      	add	r2, r1
 800a01c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a024:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a032:	4293      	cmp	r3, r2
 800a034:	d902      	bls.n	800a03c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]
          break;
 800a03a:	e00c      	b.n	800a056 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	4413      	add	r3, r2
 800a046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a054:	d0e7      	beq.n	800a026 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a064:	b480      	push	{r7}
 800a066:	b089      	sub	sp, #36	@ 0x24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4611      	mov	r1, r2
 800a070:	461a      	mov	r2, r3
 800a072:	460b      	mov	r3, r1
 800a074:	71fb      	strb	r3, [r7, #7]
 800a076:	4613      	mov	r3, r2
 800a078:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a086:	2b00      	cmp	r3, #0
 800a088:	d123      	bne.n	800a0d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a08a:	88bb      	ldrh	r3, [r7, #4]
 800a08c:	3303      	adds	r3, #3
 800a08e:	089b      	lsrs	r3, r3, #2
 800a090:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a092:	2300      	movs	r3, #0
 800a094:	61bb      	str	r3, [r7, #24]
 800a096:	e018      	b.n	800a0ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	031a      	lsls	r2, r3, #12
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d3e2      	bcc.n	800a098 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3724      	adds	r7, #36	@ 0x24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b08b      	sub	sp, #44	@ 0x2c
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	089b      	lsrs	r3, r3, #2
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a106:	2300      	movs	r3, #0
 800a108:	623b      	str	r3, [r7, #32]
 800a10a:	e014      	b.n	800a136 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	601a      	str	r2, [r3, #0]
    pDest++;
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	3301      	adds	r3, #1
 800a11c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	3301      	adds	r3, #1
 800a122:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	3301      	adds	r3, #1
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	3301      	adds	r3, #1
 800a12e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	3301      	adds	r3, #1
 800a134:	623b      	str	r3, [r7, #32]
 800a136:	6a3a      	ldr	r2, [r7, #32]
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d3e6      	bcc.n	800a10c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a13e:	8bfb      	ldrh	r3, [r7, #30]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d01e      	beq.n	800a182 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a14e:	461a      	mov	r2, r3
 800a150:	f107 0310 	add.w	r3, r7, #16
 800a154:	6812      	ldr	r2, [r2, #0]
 800a156:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	b2da      	uxtb	r2, r3
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	701a      	strb	r2, [r3, #0]
      i++;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	3301      	adds	r3, #1
 800a16e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a172:	3301      	adds	r3, #1
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a176:	8bfb      	ldrh	r3, [r7, #30]
 800a178:	3b01      	subs	r3, #1
 800a17a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a17c:	8bfb      	ldrh	r3, [r7, #30]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1ea      	bne.n	800a158 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a184:	4618      	mov	r0, r3
 800a186:	372c      	adds	r7, #44	@ 0x2c
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d12c      	bne.n	800a206 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	db12      	blt.n	800a1e4 <USB_EPSetStall+0x54>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00f      	beq.n	800a1e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a1e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a202:	6013      	str	r3, [r2, #0]
 800a204:	e02b      	b.n	800a25e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	db12      	blt.n	800a23e <USB_EPSetStall+0xae>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00f      	beq.n	800a23e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	0151      	lsls	r1, r2, #5
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	440a      	add	r2, r1
 800a234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a238:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a23c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a25c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d128      	bne.n	800a2da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	0151      	lsls	r1, r2, #5
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	440a      	add	r2, r1
 800a29e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	791b      	ldrb	r3, [r3, #4]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d003      	beq.n	800a2b8 <USB_EPClearStall+0x4c>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	791b      	ldrb	r3, [r3, #4]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d138      	bne.n	800a32a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	0151      	lsls	r1, r2, #5
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	440a      	add	r2, r1
 800a2ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	e027      	b.n	800a32a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	791b      	ldrb	r3, [r3, #4]
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d003      	beq.n	800a30a <USB_EPClearStall+0x9e>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	2b02      	cmp	r3, #2
 800a308:	d10f      	bne.n	800a32a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a328:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a356:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a35a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a36c:	68f9      	ldr	r1, [r7, #12]
 800a36e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a372:	4313      	orrs	r3, r2
 800a374:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a39e:	f023 0303 	bic.w	r3, r3, #3
 800a3a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3b2:	f023 0302 	bic.w	r3, r3, #2
 800a3b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3f4:	f043 0302 	orr.w	r3, r3, #2
 800a3f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	4013      	ands	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a420:	68fb      	ldr	r3, [r7, #12]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	4013      	ands	r3, r2
 800a450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	0c1b      	lsrs	r3, r3, #16
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a462:	b480      	push	{r7}
 800a464:	b085      	sub	sp, #20
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a47e:	69db      	ldr	r3, [r3, #28]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	4013      	ands	r3, r2
 800a484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	b29b      	uxth	r3, r3
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b087      	sub	sp, #28
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	f003 030f 	and.w	r3, r3, #15
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a502:	01db      	lsls	r3, r3, #7
 800a504:	b2db      	uxtb	r3, r3
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4313      	orrs	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4013      	ands	r3, r2
 800a51e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a520:	68bb      	ldr	r3, [r7, #8]
}
 800a522:	4618      	mov	r0, r3
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	f003 0301 	and.w	r3, r3, #1
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a566:	4619      	mov	r1, r3
 800a568:	4b09      	ldr	r3, [pc, #36]	@ (800a590 <USB_ActivateSetup+0x44>)
 800a56a:	4013      	ands	r3, r2
 800a56c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a57c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	fffff800 	.word	0xfffff800

0800a594 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	460b      	mov	r3, r1
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	333c      	adds	r3, #60	@ 0x3c
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	4a26      	ldr	r2, [pc, #152]	@ (800a64c <USB_EP0_OutStart+0xb8>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d90a      	bls.n	800a5ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5c8:	d101      	bne.n	800a5ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e037      	b.n	800a63e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5fc:	f043 0318 	orr.w	r3, r3, #24
 800a600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a610:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a614:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a616:	7afb      	ldrb	r3, [r7, #11]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d10f      	bne.n	800a63c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a622:	461a      	mov	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a636:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a63a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	371c      	adds	r7, #28
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	4f54300a 	.word	0x4f54300a

0800a650 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a668:	d901      	bls.n	800a66e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e01b      	b.n	800a6a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	daf2      	bge.n	800a65c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f043 0201 	orr.w	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a692:	d901      	bls.n	800a698 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e006      	b.n	800a6a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d0f0      	beq.n	800a686 <USB_CoreReset+0x36>

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a6c4:	f003 ff1c 	bl	800e500 <USBD_static_malloc>
 800a6c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32b0      	adds	r2, #176	@ 0xb0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e0d4      	b.n	800a88e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a6e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f003 ff4c 	bl	800e588 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	32b0      	adds	r2, #176	@ 0xb0
 800a6fa:	68f9      	ldr	r1, [r7, #12]
 800a6fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32b0      	adds	r2, #176	@ 0xb0
 800a70a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7c1b      	ldrb	r3, [r3, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d138      	bne.n	800a78e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a71c:	4b5e      	ldr	r3, [pc, #376]	@ (800a898 <USBD_CDC_Init+0x1e4>)
 800a71e:	7819      	ldrb	r1, [r3, #0]
 800a720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a724:	2202      	movs	r2, #2
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f003 fdc7 	bl	800e2ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a72c:	4b5a      	ldr	r3, [pc, #360]	@ (800a898 <USBD_CDC_Init+0x1e4>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 020f 	and.w	r2, r3, #15
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	3324      	adds	r3, #36	@ 0x24
 800a742:	2201      	movs	r2, #1
 800a744:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a746:	4b55      	ldr	r3, [pc, #340]	@ (800a89c <USBD_CDC_Init+0x1e8>)
 800a748:	7819      	ldrb	r1, [r3, #0]
 800a74a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a74e:	2202      	movs	r2, #2
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f003 fdb2 	bl	800e2ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a756:	4b51      	ldr	r3, [pc, #324]	@ (800a89c <USBD_CDC_Init+0x1e8>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	f003 020f 	and.w	r2, r3, #15
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a76e:	2201      	movs	r2, #1
 800a770:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a772:	4b4b      	ldr	r3, [pc, #300]	@ (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	f003 020f 	and.w	r2, r3, #15
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	4613      	mov	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	440b      	add	r3, r1
 800a786:	3326      	adds	r3, #38	@ 0x26
 800a788:	2210      	movs	r2, #16
 800a78a:	801a      	strh	r2, [r3, #0]
 800a78c:	e035      	b.n	800a7fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a78e:	4b42      	ldr	r3, [pc, #264]	@ (800a898 <USBD_CDC_Init+0x1e4>)
 800a790:	7819      	ldrb	r1, [r3, #0]
 800a792:	2340      	movs	r3, #64	@ 0x40
 800a794:	2202      	movs	r2, #2
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f003 fd8f 	bl	800e2ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a79c:	4b3e      	ldr	r3, [pc, #248]	@ (800a898 <USBD_CDC_Init+0x1e4>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3324      	adds	r3, #36	@ 0x24
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7b6:	4b39      	ldr	r3, [pc, #228]	@ (800a89c <USBD_CDC_Init+0x1e8>)
 800a7b8:	7819      	ldrb	r1, [r3, #0]
 800a7ba:	2340      	movs	r3, #64	@ 0x40
 800a7bc:	2202      	movs	r2, #2
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f003 fd7b 	bl	800e2ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7c4:	4b35      	ldr	r3, [pc, #212]	@ (800a89c <USBD_CDC_Init+0x1e8>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	f003 020f 	and.w	r2, r3, #15
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7dc:	2201      	movs	r2, #1
 800a7de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a7e0:	4b2f      	ldr	r3, [pc, #188]	@ (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 020f 	and.w	r2, r3, #15
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3326      	adds	r3, #38	@ 0x26
 800a7f6:	2210      	movs	r2, #16
 800a7f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a7fa:	4b29      	ldr	r3, [pc, #164]	@ (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a7fc:	7819      	ldrb	r1, [r3, #0]
 800a7fe:	2308      	movs	r3, #8
 800a800:	2203      	movs	r2, #3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f003 fd59 	bl	800e2ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a808:	4b25      	ldr	r3, [pc, #148]	@ (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f003 020f 	and.w	r2, r3, #15
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	3324      	adds	r3, #36	@ 0x24
 800a81e:	2201      	movs	r2, #1
 800a820:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	33b0      	adds	r3, #176	@ 0xb0
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a858:	2302      	movs	r3, #2
 800a85a:	e018      	b.n	800a88e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	7c1b      	ldrb	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a864:	4b0d      	ldr	r3, [pc, #52]	@ (800a89c <USBD_CDC_Init+0x1e8>)
 800a866:	7819      	ldrb	r1, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a86e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f003 fe10 	bl	800e498 <USBD_LL_PrepareReceive>
 800a878:	e008      	b.n	800a88c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a87a:	4b08      	ldr	r3, [pc, #32]	@ (800a89c <USBD_CDC_Init+0x1e8>)
 800a87c:	7819      	ldrb	r1, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a884:	2340      	movs	r3, #64	@ 0x40
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f003 fe06 	bl	800e498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	24000097 	.word	0x24000097
 800a89c:	24000098 	.word	0x24000098
 800a8a0:	24000099 	.word	0x24000099

0800a8a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8b0:	4b3a      	ldr	r3, [pc, #232]	@ (800a99c <USBD_CDC_DeInit+0xf8>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f003 fd25 	bl	800e306 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a8bc:	4b37      	ldr	r3, [pc, #220]	@ (800a99c <USBD_CDC_DeInit+0xf8>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	f003 020f 	and.w	r2, r3, #15
 800a8c4:	6879      	ldr	r1, [r7, #4]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	440b      	add	r3, r1
 800a8d0:	3324      	adds	r3, #36	@ 0x24
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a8d6:	4b32      	ldr	r3, [pc, #200]	@ (800a9a0 <USBD_CDC_DeInit+0xfc>)
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f003 fd12 	bl	800e306 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a8e2:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a0 <USBD_CDC_DeInit+0xfc>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	f003 020f 	and.w	r2, r3, #15
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	440b      	add	r3, r1
 800a8f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a8fe:	4b29      	ldr	r3, [pc, #164]	@ (800a9a4 <USBD_CDC_DeInit+0x100>)
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f003 fcfe 	bl	800e306 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a90a:	4b26      	ldr	r3, [pc, #152]	@ (800a9a4 <USBD_CDC_DeInit+0x100>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 020f 	and.w	r2, r3, #15
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	440b      	add	r3, r1
 800a91e:	3324      	adds	r3, #36	@ 0x24
 800a920:	2200      	movs	r2, #0
 800a922:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a924:	4b1f      	ldr	r3, [pc, #124]	@ (800a9a4 <USBD_CDC_DeInit+0x100>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 020f 	and.w	r2, r3, #15
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	440b      	add	r3, r1
 800a938:	3326      	adds	r3, #38	@ 0x26
 800a93a:	2200      	movs	r2, #0
 800a93c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	32b0      	adds	r2, #176	@ 0xb0
 800a948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d01f      	beq.n	800a990 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	33b0      	adds	r3, #176	@ 0xb0
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	32b0      	adds	r2, #176	@ 0xb0
 800a96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a972:	4618      	mov	r0, r3
 800a974:	f003 fdd2 	bl	800e51c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	32b0      	adds	r2, #176	@ 0xb0
 800a982:	2100      	movs	r1, #0
 800a984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	24000097 	.word	0x24000097
 800a9a0:	24000098 	.word	0x24000098
 800a9a4:	24000099 	.word	0x24000099

0800a9a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	32b0      	adds	r2, #176	@ 0xb0
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e0bf      	b.n	800ab58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d050      	beq.n	800aa86 <USBD_CDC_Setup+0xde>
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	f040 80af 	bne.w	800ab48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	88db      	ldrh	r3, [r3, #6]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d03a      	beq.n	800aa68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b25b      	sxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da1b      	bge.n	800aa34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	33b0      	adds	r3, #176	@ 0xb0
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4413      	add	r3, r2
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	88d2      	ldrh	r2, [r2, #6]
 800aa18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	88db      	ldrh	r3, [r3, #6]
 800aa1e:	2b07      	cmp	r3, #7
 800aa20:	bf28      	it	cs
 800aa22:	2307      	movcs	r3, #7
 800aa24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	89fa      	ldrh	r2, [r7, #14]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 fd7d 	bl	800c52c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa32:	e090      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	785a      	ldrb	r2, [r3, #1]
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	88db      	ldrh	r3, [r3, #6]
 800aa42:	2b3f      	cmp	r3, #63	@ 0x3f
 800aa44:	d803      	bhi.n	800aa4e <USBD_CDC_Setup+0xa6>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	88db      	ldrh	r3, [r3, #6]
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	e000      	b.n	800aa50 <USBD_CDC_Setup+0xa8>
 800aa4e:	2240      	movs	r2, #64	@ 0x40
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa56:	6939      	ldr	r1, [r7, #16]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 fd8f 	bl	800c584 <USBD_CtlPrepareRx>
      break;
 800aa66:	e076      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	33b0      	adds	r3, #176	@ 0xb0
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	7850      	ldrb	r0, [r2, #1]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	4798      	blx	r3
      break;
 800aa84:	e067      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	785b      	ldrb	r3, [r3, #1]
 800aa8a:	2b0b      	cmp	r3, #11
 800aa8c:	d851      	bhi.n	800ab32 <USBD_CDC_Setup+0x18a>
 800aa8e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <USBD_CDC_Setup+0xec>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aac5 	.word	0x0800aac5
 800aa98:	0800ab41 	.word	0x0800ab41
 800aa9c:	0800ab33 	.word	0x0800ab33
 800aaa0:	0800ab33 	.word	0x0800ab33
 800aaa4:	0800ab33 	.word	0x0800ab33
 800aaa8:	0800ab33 	.word	0x0800ab33
 800aaac:	0800ab33 	.word	0x0800ab33
 800aab0:	0800ab33 	.word	0x0800ab33
 800aab4:	0800ab33 	.word	0x0800ab33
 800aab8:	0800ab33 	.word	0x0800ab33
 800aabc:	0800aaef 	.word	0x0800aaef
 800aac0:	0800ab19 	.word	0x0800ab19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d107      	bne.n	800aae0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aad0:	f107 030a 	add.w	r3, r7, #10
 800aad4:	2202      	movs	r2, #2
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 fd27 	bl	800c52c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aade:	e032      	b.n	800ab46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 fca5 	bl	800c432 <USBD_CtlError>
            ret = USBD_FAIL;
 800aae8:	2303      	movs	r3, #3
 800aaea:	75fb      	strb	r3, [r7, #23]
          break;
 800aaec:	e02b      	b.n	800ab46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d107      	bne.n	800ab0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aafa:	f107 030d 	add.w	r3, r7, #13
 800aafe:	2201      	movs	r2, #1
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 fd12 	bl	800c52c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab08:	e01d      	b.n	800ab46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 fc90 	bl	800c432 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab12:	2303      	movs	r3, #3
 800ab14:	75fb      	strb	r3, [r7, #23]
          break;
 800ab16:	e016      	b.n	800ab46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d00f      	beq.n	800ab44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 fc83 	bl	800c432 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab30:	e008      	b.n	800ab44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 fc7c 	bl	800c432 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	75fb      	strb	r3, [r7, #23]
          break;
 800ab3e:	e002      	b.n	800ab46 <USBD_CDC_Setup+0x19e>
          break;
 800ab40:	bf00      	nop
 800ab42:	e008      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>
          break;
 800ab44:	bf00      	nop
      }
      break;
 800ab46:	e006      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 fc71 	bl	800c432 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab50:	2303      	movs	r3, #3
 800ab52:	75fb      	strb	r3, [r7, #23]
      break;
 800ab54:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	32b0      	adds	r2, #176	@ 0xb0
 800ab7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e065      	b.n	800ac56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	32b0      	adds	r2, #176	@ 0xb0
 800ab94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	f003 020f 	and.w	r2, r3, #15
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	440b      	add	r3, r1
 800abac:	3318      	adds	r3, #24
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d02f      	beq.n	800ac14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	f003 020f 	and.w	r2, r3, #15
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	440b      	add	r3, r1
 800abc6:	3318      	adds	r3, #24
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	78fb      	ldrb	r3, [r7, #3]
 800abcc:	f003 010f 	and.w	r1, r3, #15
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	460b      	mov	r3, r1
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	440b      	add	r3, r1
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4403      	add	r3, r0
 800abdc:	331c      	adds	r3, #28
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	fbb2 f1f3 	udiv	r1, r2, r3
 800abe4:	fb01 f303 	mul.w	r3, r1, r3
 800abe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abea:	2b00      	cmp	r3, #0
 800abec:	d112      	bne.n	800ac14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800abee:	78fb      	ldrb	r3, [r7, #3]
 800abf0:	f003 020f 	and.w	r2, r3, #15
 800abf4:	6879      	ldr	r1, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	3318      	adds	r3, #24
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac06:	78f9      	ldrb	r1, [r7, #3]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f003 fc22 	bl	800e456 <USBD_LL_Transmit>
 800ac12:	e01f      	b.n	800ac54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	33b0      	adds	r3, #176	@ 0xb0
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d010      	beq.n	800ac54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	33b0      	adds	r3, #176	@ 0xb0
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ac50:	78fa      	ldrb	r2, [r7, #3]
 800ac52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	32b0      	adds	r2, #176	@ 0xb0
 800ac74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	32b0      	adds	r2, #176	@ 0xb0
 800ac84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e01a      	b.n	800acc6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f003 fc20 	bl	800e4da <USBD_LL_GetRxDataSize>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	33b0      	adds	r3, #176	@ 0xb0
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800acc0:	4611      	mov	r1, r2
 800acc2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	32b0      	adds	r2, #176	@ 0xb0
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	e024      	b.n	800ad3a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	33b0      	adds	r3, #176	@ 0xb0
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d019      	beq.n	800ad38 <USBD_CDC_EP0_RxReady+0x6a>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ad0a:	2bff      	cmp	r3, #255	@ 0xff
 800ad0c:	d014      	beq.n	800ad38 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	33b0      	adds	r3, #176	@ 0xb0
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	22ff      	movs	r2, #255	@ 0xff
 800ad34:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
	...

0800ad44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad4c:	2182      	movs	r1, #130	@ 0x82
 800ad4e:	4818      	ldr	r0, [pc, #96]	@ (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad50:	f000 fd0f 	bl	800b772 <USBD_GetEpDesc>
 800ad54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad56:	2101      	movs	r1, #1
 800ad58:	4815      	ldr	r0, [pc, #84]	@ (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad5a:	f000 fd0a 	bl	800b772 <USBD_GetEpDesc>
 800ad5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad60:	2181      	movs	r1, #129	@ 0x81
 800ad62:	4813      	ldr	r0, [pc, #76]	@ (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad64:	f000 fd05 	bl	800b772 <USBD_GetEpDesc>
 800ad68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2210      	movs	r2, #16
 800ad74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d006      	beq.n	800ad8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad84:	711a      	strb	r2, [r3, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d006      	beq.n	800ad9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad98:	711a      	strb	r2, [r3, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2243      	movs	r2, #67	@ 0x43
 800ada2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ada4:	4b02      	ldr	r3, [pc, #8]	@ (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	24000054 	.word	0x24000054

0800adb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adbc:	2182      	movs	r1, #130	@ 0x82
 800adbe:	4818      	ldr	r0, [pc, #96]	@ (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adc0:	f000 fcd7 	bl	800b772 <USBD_GetEpDesc>
 800adc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adc6:	2101      	movs	r1, #1
 800adc8:	4815      	ldr	r0, [pc, #84]	@ (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adca:	f000 fcd2 	bl	800b772 <USBD_GetEpDesc>
 800adce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800add0:	2181      	movs	r1, #129	@ 0x81
 800add2:	4813      	ldr	r0, [pc, #76]	@ (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800add4:	f000 fccd 	bl	800b772 <USBD_GetEpDesc>
 800add8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2210      	movs	r2, #16
 800ade4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d006      	beq.n	800adfa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2200      	movs	r2, #0
 800adf0:	711a      	strb	r2, [r3, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f042 0202 	orr.w	r2, r2, #2
 800adf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	711a      	strb	r2, [r3, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f042 0202 	orr.w	r2, r2, #2
 800ae0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2243      	movs	r2, #67	@ 0x43
 800ae12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae14:	4b02      	ldr	r3, [pc, #8]	@ (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	24000054 	.word	0x24000054

0800ae24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae2c:	2182      	movs	r1, #130	@ 0x82
 800ae2e:	4818      	ldr	r0, [pc, #96]	@ (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae30:	f000 fc9f 	bl	800b772 <USBD_GetEpDesc>
 800ae34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae36:	2101      	movs	r1, #1
 800ae38:	4815      	ldr	r0, [pc, #84]	@ (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae3a:	f000 fc9a 	bl	800b772 <USBD_GetEpDesc>
 800ae3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae40:	2181      	movs	r1, #129	@ 0x81
 800ae42:	4813      	ldr	r0, [pc, #76]	@ (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae44:	f000 fc95 	bl	800b772 <USBD_GetEpDesc>
 800ae48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2210      	movs	r2, #16
 800ae54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d006      	beq.n	800ae6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae64:	711a      	strb	r2, [r3, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae78:	711a      	strb	r2, [r3, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2243      	movs	r2, #67	@ 0x43
 800ae82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae84:	4b02      	ldr	r3, [pc, #8]	@ (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	24000054 	.word	0x24000054

0800ae94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	220a      	movs	r2, #10
 800aea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aea2:	4b03      	ldr	r3, [pc, #12]	@ (800aeb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	24000010 	.word	0x24000010

0800aeb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e009      	b.n	800aedc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	33b0      	adds	r3, #176	@ 0xb0
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	32b0      	adds	r2, #176	@ 0xb0
 800aefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e008      	b.n	800af20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	371c      	adds	r7, #28
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	32b0      	adds	r2, #176	@ 0xb0
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e004      	b.n	800af5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
	...

0800af68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	32b0      	adds	r2, #176	@ 0xb0
 800af7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	32b0      	adds	r2, #176	@ 0xb0
 800af8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af92:	2303      	movs	r3, #3
 800af94:	e018      	b.n	800afc8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7c1b      	ldrb	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10a      	bne.n	800afb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af9e:	4b0c      	ldr	r3, [pc, #48]	@ (800afd0 <USBD_CDC_ReceivePacket+0x68>)
 800afa0:	7819      	ldrb	r1, [r3, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f003 fa73 	bl	800e498 <USBD_LL_PrepareReceive>
 800afb2:	e008      	b.n	800afc6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afb4:	4b06      	ldr	r3, [pc, #24]	@ (800afd0 <USBD_CDC_ReceivePacket+0x68>)
 800afb6:	7819      	ldrb	r1, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afbe:	2340      	movs	r3, #64	@ 0x40
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f003 fa69 	bl	800e498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	24000098 	.word	0x24000098

0800afd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	4613      	mov	r3, r2
 800afe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afe8:	2303      	movs	r3, #3
 800afea:	e01f      	b.n	800b02c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	79fa      	ldrb	r2, [r7, #7]
 800b01e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f003 f8df 	bl	800e1e4 <USBD_LL_Init>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b048:	2303      	movs	r3, #3
 800b04a:	e025      	b.n	800b098 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	32ae      	adds	r2, #174	@ 0xae
 800b05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00f      	beq.n	800b088 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32ae      	adds	r2, #174	@ 0xae
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b078:	f107 020e 	add.w	r2, r7, #14
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	4602      	mov	r2, r0
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f003 f8eb 	bl	800e284 <USBD_LL_Start>
 800b0ae:	4603      	mov	r3, r0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d009      	beq.n	800b0fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	78fa      	ldrb	r2, [r7, #3]
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	4798      	blx	r3
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b084      	sub	sp, #16
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	78fa      	ldrb	r2, [r7, #3]
 800b120:	4611      	mov	r1, r2
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b12c:	2303      	movs	r3, #3
 800b12e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b130:	7bfb      	ldrb	r3, [r7, #15]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 f936 	bl	800c3be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b160:	461a      	mov	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b16e:	f003 031f 	and.w	r3, r3, #31
 800b172:	2b02      	cmp	r3, #2
 800b174:	d01a      	beq.n	800b1ac <USBD_LL_SetupStage+0x72>
 800b176:	2b02      	cmp	r3, #2
 800b178:	d822      	bhi.n	800b1c0 <USBD_LL_SetupStage+0x86>
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <USBD_LL_SetupStage+0x4a>
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d00a      	beq.n	800b198 <USBD_LL_SetupStage+0x5e>
 800b182:	e01d      	b.n	800b1c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fb63 	bl	800b858 <USBD_StdDevReq>
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]
      break;
 800b196:	e020      	b.n	800b1da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fbcb 	bl	800b93c <USBD_StdItfReq>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1aa:	e016      	b.n	800b1da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fc2d 	bl	800ba14 <USBD_StdEPReq>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b1be:	e00c      	b.n	800b1da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f003 f8b8 	bl	800e344 <USBD_LL_StallEP>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d8:	bf00      	nop
  }

  return ret;
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d16e      	bne.n	800b2da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b202:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	f040 8098 	bne.w	800b340 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d913      	bls.n	800b244 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	689a      	ldr	r2, [r3, #8]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	1ad2      	subs	r2, r2, r3
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	4293      	cmp	r3, r2
 800b234:	bf28      	it	cs
 800b236:	4613      	movcs	r3, r2
 800b238:	461a      	mov	r2, r3
 800b23a:	6879      	ldr	r1, [r7, #4]
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f001 f9be 	bl	800c5be <USBD_CtlContinueRx>
 800b242:	e07d      	b.n	800b340 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b24a:	f003 031f 	and.w	r3, r3, #31
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d014      	beq.n	800b27c <USBD_LL_DataOutStage+0x98>
 800b252:	2b02      	cmp	r3, #2
 800b254:	d81d      	bhi.n	800b292 <USBD_LL_DataOutStage+0xae>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <USBD_LL_DataOutStage+0x7c>
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d003      	beq.n	800b266 <USBD_LL_DataOutStage+0x82>
 800b25e:	e018      	b.n	800b292 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	75bb      	strb	r3, [r7, #22]
            break;
 800b264:	e018      	b.n	800b298 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	4619      	mov	r1, r3
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 fa64 	bl	800b73e <USBD_CoreFindIF>
 800b276:	4603      	mov	r3, r0
 800b278:	75bb      	strb	r3, [r7, #22]
            break;
 800b27a:	e00d      	b.n	800b298 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b282:	b2db      	uxtb	r3, r3
 800b284:	4619      	mov	r1, r3
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f000 fa66 	bl	800b758 <USBD_CoreFindEP>
 800b28c:	4603      	mov	r3, r0
 800b28e:	75bb      	strb	r3, [r7, #22]
            break;
 800b290:	e002      	b.n	800b298 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	75bb      	strb	r3, [r7, #22]
            break;
 800b296:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b298:	7dbb      	ldrb	r3, [r7, #22]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d119      	bne.n	800b2d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d113      	bne.n	800b2d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2aa:	7dba      	ldrb	r2, [r7, #22]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	32ae      	adds	r2, #174	@ 0xae
 800b2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00b      	beq.n	800b2d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2ba:	7dba      	ldrb	r2, [r7, #22]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2c2:	7dba      	ldrb	r2, [r7, #22]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	32ae      	adds	r2, #174	@ 0xae
 800b2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f001 f984 	bl	800c5e0 <USBD_CtlSendStatus>
 800b2d8:	e032      	b.n	800b340 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2da:	7afb      	ldrb	r3, [r7, #11]
 800b2dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f000 fa37 	bl	800b758 <USBD_CoreFindEP>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ee:	7dbb      	ldrb	r3, [r7, #22]
 800b2f0:	2bff      	cmp	r3, #255	@ 0xff
 800b2f2:	d025      	beq.n	800b340 <USBD_LL_DataOutStage+0x15c>
 800b2f4:	7dbb      	ldrb	r3, [r7, #22]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d122      	bne.n	800b340 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b03      	cmp	r3, #3
 800b304:	d117      	bne.n	800b336 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b306:	7dba      	ldrb	r2, [r7, #22]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	32ae      	adds	r2, #174	@ 0xae
 800b30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00f      	beq.n	800b336 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b316:	7dba      	ldrb	r2, [r7, #22]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b31e:	7dba      	ldrb	r2, [r7, #22]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	32ae      	adds	r2, #174	@ 0xae
 800b324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	7afa      	ldrb	r2, [r7, #11]
 800b32c:	4611      	mov	r1, r2
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	4798      	blx	r3
 800b332:	4603      	mov	r3, r0
 800b334:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b336:	7dfb      	ldrb	r3, [r7, #23]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
 800b33e:	e000      	b.n	800b342 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3718      	adds	r7, #24
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b086      	sub	sp, #24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	460b      	mov	r3, r1
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b358:	7afb      	ldrb	r3, [r7, #11]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d16f      	bne.n	800b43e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3314      	adds	r3, #20
 800b362:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d15a      	bne.n	800b424 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	689a      	ldr	r2, [r3, #8]
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	429a      	cmp	r2, r3
 800b378:	d914      	bls.n	800b3a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	689a      	ldr	r2, [r3, #8]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	1ad2      	subs	r2, r2, r3
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	461a      	mov	r2, r3
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f001 f8e6 	bl	800c562 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b396:	2300      	movs	r3, #0
 800b398:	2200      	movs	r2, #0
 800b39a:	2100      	movs	r1, #0
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f003 f87b 	bl	800e498 <USBD_LL_PrepareReceive>
 800b3a2:	e03f      	b.n	800b424 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d11c      	bne.n	800b3ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d316      	bcc.n	800b3ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d20f      	bcs.n	800b3ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f001 f8c7 	bl	800c562 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f003 f858 	bl	800e498 <USBD_LL_PrepareReceive>
 800b3e8:	e01c      	b.n	800b424 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b03      	cmp	r3, #3
 800b3f4:	d10f      	bne.n	800b416 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d009      	beq.n	800b416 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b416:	2180      	movs	r1, #128	@ 0x80
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f002 ff93 	bl	800e344 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f001 f8f1 	bl	800c606 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d03a      	beq.n	800b4a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7ff fe42 	bl	800b0b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b43c:	e032      	b.n	800b4a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b43e:	7afb      	ldrb	r3, [r7, #11]
 800b440:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b444:	b2db      	uxtb	r3, r3
 800b446:	4619      	mov	r1, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 f985 	bl	800b758 <USBD_CoreFindEP>
 800b44e:	4603      	mov	r3, r0
 800b450:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	2bff      	cmp	r3, #255	@ 0xff
 800b456:	d025      	beq.n	800b4a4 <USBD_LL_DataInStage+0x15a>
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d122      	bne.n	800b4a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b03      	cmp	r3, #3
 800b468:	d11c      	bne.n	800b4a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b46a:	7dfa      	ldrb	r2, [r7, #23]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	32ae      	adds	r2, #174	@ 0xae
 800b470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d014      	beq.n	800b4a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b47a:	7dfa      	ldrb	r2, [r7, #23]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b482:	7dfa      	ldrb	r2, [r7, #23]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	32ae      	adds	r2, #174	@ 0xae
 800b488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	7afa      	ldrb	r2, [r7, #11]
 800b490:	4611      	mov	r1, r2
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	4798      	blx	r3
 800b496:	4603      	mov	r3, r0
 800b498:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b49a:	7dbb      	ldrb	r3, [r7, #22]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b4a0:	7dbb      	ldrb	r3, [r7, #22]
 800b4a2:	e000      	b.n	800b4a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d014      	beq.n	800b514 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00e      	beq.n	800b514 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	6852      	ldr	r2, [r2, #4]
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	4611      	mov	r1, r2
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	4798      	blx	r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b510:	2303      	movs	r3, #3
 800b512:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b514:	2340      	movs	r3, #64	@ 0x40
 800b516:	2200      	movs	r2, #0
 800b518:	2100      	movs	r1, #0
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f002 fecd 	bl	800e2ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2240      	movs	r2, #64	@ 0x40
 800b52c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b530:	2340      	movs	r3, #64	@ 0x40
 800b532:	2200      	movs	r2, #0
 800b534:	2180      	movs	r1, #128	@ 0x80
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f002 febf 	bl	800e2ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2240      	movs	r2, #64	@ 0x40
 800b546:	621a      	str	r2, [r3, #32]

  return ret;
 800b548:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	460b      	mov	r3, r1
 800b55c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	78fa      	ldrb	r2, [r7, #3]
 800b562:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b04      	cmp	r3, #4
 800b584:	d006      	beq.n	800b594 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2204      	movs	r2, #4
 800b598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d106      	bne.n	800b5cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b082      	sub	sp, #8
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d110      	bne.n	800b610 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00b      	beq.n	800b610 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b082      	sub	sp, #8
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	32ae      	adds	r2, #174	@ 0xae
 800b630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	e01c      	b.n	800b676 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b03      	cmp	r3, #3
 800b646:	d115      	bne.n	800b674 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	32ae      	adds	r2, #174	@ 0xae
 800b652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b656:	6a1b      	ldr	r3, [r3, #32]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00b      	beq.n	800b674 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	32ae      	adds	r2, #174	@ 0xae
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	4611      	mov	r1, r2
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b082      	sub	sp, #8
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	460b      	mov	r3, r1
 800b688:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	32ae      	adds	r2, #174	@ 0xae
 800b694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e01c      	b.n	800b6da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d115      	bne.n	800b6d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	32ae      	adds	r2, #174	@ 0xae
 800b6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00b      	beq.n	800b6d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	32ae      	adds	r2, #174	@ 0xae
 800b6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d0:	78fa      	ldrb	r2, [r7, #3]
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00e      	beq.n	800b734 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6852      	ldr	r2, [r2, #4]
 800b722:	b2d2      	uxtb	r2, r2
 800b724:	4611      	mov	r1, r2
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	4798      	blx	r3
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b730:	2303      	movs	r3, #3
 800b732:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b73e:	b480      	push	{r7}
 800b740:	b083      	sub	sp, #12
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b74a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b764:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b086      	sub	sp, #24
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	460b      	mov	r3, r1
 800b77c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b786:	2300      	movs	r3, #0
 800b788:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	7812      	ldrb	r2, [r2, #0]
 800b794:	4293      	cmp	r3, r2
 800b796:	d91f      	bls.n	800b7d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b79e:	e013      	b.n	800b7c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b7a0:	f107 030a 	add.w	r3, r7, #10
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6978      	ldr	r0, [r7, #20]
 800b7a8:	f000 f81b 	bl	800b7e2 <USBD_GetNextDesc>
 800b7ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	2b05      	cmp	r3, #5
 800b7b4:	d108      	bne.n	800b7c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	789b      	ldrb	r3, [r3, #2]
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d008      	beq.n	800b7d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	885b      	ldrh	r3, [r3, #2]
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	897b      	ldrh	r3, [r7, #10]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d8e5      	bhi.n	800b7a0 <USBD_GetEpDesc+0x2e>
 800b7d4:	e000      	b.n	800b7d8 <USBD_GetEpDesc+0x66>
          break;
 800b7d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7d8:	693b      	ldr	r3, [r7, #16]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	7812      	ldrb	r2, [r2, #0]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4413      	add	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b80c:	68fb      	ldr	r3, [r7, #12]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b81a:	b480      	push	{r7}
 800b81c:	b087      	sub	sp, #28
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	3301      	adds	r3, #1
 800b830:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b838:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b83c:	021b      	lsls	r3, r3, #8
 800b83e:	b21a      	sxth	r2, r3
 800b840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b844:	4313      	orrs	r3, r2
 800b846:	b21b      	sxth	r3, r3
 800b848:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b84a:	89fb      	ldrh	r3, [r7, #14]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	371c      	adds	r7, #28
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b86e:	2b40      	cmp	r3, #64	@ 0x40
 800b870:	d005      	beq.n	800b87e <USBD_StdDevReq+0x26>
 800b872:	2b40      	cmp	r3, #64	@ 0x40
 800b874:	d857      	bhi.n	800b926 <USBD_StdDevReq+0xce>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00f      	beq.n	800b89a <USBD_StdDevReq+0x42>
 800b87a:	2b20      	cmp	r3, #32
 800b87c:	d153      	bne.n	800b926 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	32ae      	adds	r2, #174	@ 0xae
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	4798      	blx	r3
 800b894:	4603      	mov	r3, r0
 800b896:	73fb      	strb	r3, [r7, #15]
      break;
 800b898:	e04a      	b.n	800b930 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	785b      	ldrb	r3, [r3, #1]
 800b89e:	2b09      	cmp	r3, #9
 800b8a0:	d83b      	bhi.n	800b91a <USBD_StdDevReq+0xc2>
 800b8a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a8 <USBD_StdDevReq+0x50>)
 800b8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a8:	0800b8fd 	.word	0x0800b8fd
 800b8ac:	0800b911 	.word	0x0800b911
 800b8b0:	0800b91b 	.word	0x0800b91b
 800b8b4:	0800b907 	.word	0x0800b907
 800b8b8:	0800b91b 	.word	0x0800b91b
 800b8bc:	0800b8db 	.word	0x0800b8db
 800b8c0:	0800b8d1 	.word	0x0800b8d1
 800b8c4:	0800b91b 	.word	0x0800b91b
 800b8c8:	0800b8f3 	.word	0x0800b8f3
 800b8cc:	0800b8e5 	.word	0x0800b8e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fa3c 	bl	800bd50 <USBD_GetDescriptor>
          break;
 800b8d8:	e024      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fbcb 	bl	800c078 <USBD_SetAddress>
          break;
 800b8e2:	e01f      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fc0a 	bl	800c100 <USBD_SetConfig>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
          break;
 800b8f0:	e018      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fcad 	bl	800c254 <USBD_GetConfig>
          break;
 800b8fa:	e013      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fcde 	bl	800c2c0 <USBD_GetStatus>
          break;
 800b904:	e00e      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fd0d 	bl	800c328 <USBD_SetFeature>
          break;
 800b90e:	e009      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fd31 	bl	800c37a <USBD_ClrFeature>
          break;
 800b918:	e004      	b.n	800b924 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fd88 	bl	800c432 <USBD_CtlError>
          break;
 800b922:	bf00      	nop
      }
      break;
 800b924:	e004      	b.n	800b930 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fd82 	bl	800c432 <USBD_CtlError>
      break;
 800b92e:	bf00      	nop
  }

  return ret;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop

0800b93c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b952:	2b40      	cmp	r3, #64	@ 0x40
 800b954:	d005      	beq.n	800b962 <USBD_StdItfReq+0x26>
 800b956:	2b40      	cmp	r3, #64	@ 0x40
 800b958:	d852      	bhi.n	800ba00 <USBD_StdItfReq+0xc4>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <USBD_StdItfReq+0x26>
 800b95e:	2b20      	cmp	r3, #32
 800b960:	d14e      	bne.n	800ba00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d840      	bhi.n	800b9f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	889b      	ldrh	r3, [r3, #4]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b01      	cmp	r3, #1
 800b978:	d836      	bhi.n	800b9e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	889b      	ldrh	r3, [r3, #4]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fedb 	bl	800b73e <USBD_CoreFindIF>
 800b988:	4603      	mov	r3, r0
 800b98a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	2bff      	cmp	r3, #255	@ 0xff
 800b990:	d01d      	beq.n	800b9ce <USBD_StdItfReq+0x92>
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d11a      	bne.n	800b9ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b998:	7bba      	ldrb	r2, [r7, #14]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	32ae      	adds	r2, #174	@ 0xae
 800b99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00f      	beq.n	800b9c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b9a8:	7bba      	ldrb	r2, [r7, #14]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9b0:	7bba      	ldrb	r2, [r7, #14]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	32ae      	adds	r2, #174	@ 0xae
 800b9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	4798      	blx	r3
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9c6:	e004      	b.n	800b9d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9cc:	e001      	b.n	800b9d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	88db      	ldrh	r3, [r3, #6]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d110      	bne.n	800b9fc <USBD_StdItfReq+0xc0>
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10d      	bne.n	800b9fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fdfd 	bl	800c5e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9e6:	e009      	b.n	800b9fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fd21 	bl	800c432 <USBD_CtlError>
          break;
 800b9f0:	e004      	b.n	800b9fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fd1c 	bl	800c432 <USBD_CtlError>
          break;
 800b9fa:	e000      	b.n	800b9fe <USBD_StdItfReq+0xc2>
          break;
 800b9fc:	bf00      	nop
      }
      break;
 800b9fe:	e004      	b.n	800ba0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fd15 	bl	800c432 <USBD_CtlError>
      break;
 800ba08:	bf00      	nop
  }

  return ret;
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	889b      	ldrh	r3, [r3, #4]
 800ba26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba30:	2b40      	cmp	r3, #64	@ 0x40
 800ba32:	d007      	beq.n	800ba44 <USBD_StdEPReq+0x30>
 800ba34:	2b40      	cmp	r3, #64	@ 0x40
 800ba36:	f200 817f 	bhi.w	800bd38 <USBD_StdEPReq+0x324>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d02a      	beq.n	800ba94 <USBD_StdEPReq+0x80>
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	f040 817a 	bne.w	800bd38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fe85 	bl	800b758 <USBD_CoreFindEP>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba52:	7b7b      	ldrb	r3, [r7, #13]
 800ba54:	2bff      	cmp	r3, #255	@ 0xff
 800ba56:	f000 8174 	beq.w	800bd42 <USBD_StdEPReq+0x32e>
 800ba5a:	7b7b      	ldrb	r3, [r7, #13]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 8170 	bne.w	800bd42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba62:	7b7a      	ldrb	r2, [r7, #13]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba6a:	7b7a      	ldrb	r2, [r7, #13]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	32ae      	adds	r2, #174	@ 0xae
 800ba70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8163 	beq.w	800bd42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba7c:	7b7a      	ldrb	r2, [r7, #13]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	32ae      	adds	r2, #174	@ 0xae
 800ba82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba92:	e156      	b.n	800bd42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	785b      	ldrb	r3, [r3, #1]
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d008      	beq.n	800baae <USBD_StdEPReq+0x9a>
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	f300 8145 	bgt.w	800bd2c <USBD_StdEPReq+0x318>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 809b 	beq.w	800bbde <USBD_StdEPReq+0x1ca>
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d03c      	beq.n	800bb26 <USBD_StdEPReq+0x112>
 800baac:	e13e      	b.n	800bd2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d002      	beq.n	800bac0 <USBD_StdEPReq+0xac>
 800baba:	2b03      	cmp	r3, #3
 800babc:	d016      	beq.n	800baec <USBD_StdEPReq+0xd8>
 800babe:	e02c      	b.n	800bb1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00d      	beq.n	800bae2 <USBD_StdEPReq+0xce>
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	2b80      	cmp	r3, #128	@ 0x80
 800baca:	d00a      	beq.n	800bae2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f002 fc37 	bl	800e344 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bad6:	2180      	movs	r1, #128	@ 0x80
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f002 fc33 	bl	800e344 <USBD_LL_StallEP>
 800bade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bae0:	e020      	b.n	800bb24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fca4 	bl	800c432 <USBD_CtlError>
              break;
 800baea:	e01b      	b.n	800bb24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	885b      	ldrh	r3, [r3, #2]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10e      	bne.n	800bb12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00b      	beq.n	800bb12 <USBD_StdEPReq+0xfe>
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	2b80      	cmp	r3, #128	@ 0x80
 800bafe:	d008      	beq.n	800bb12 <USBD_StdEPReq+0xfe>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	88db      	ldrh	r3, [r3, #6]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d104      	bne.n	800bb12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f002 fc19 	bl	800e344 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fd64 	bl	800c5e0 <USBD_CtlSendStatus>

              break;
 800bb18:	e004      	b.n	800bb24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fc88 	bl	800c432 <USBD_CtlError>
              break;
 800bb22:	bf00      	nop
          }
          break;
 800bb24:	e107      	b.n	800bd36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d002      	beq.n	800bb38 <USBD_StdEPReq+0x124>
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d016      	beq.n	800bb64 <USBD_StdEPReq+0x150>
 800bb36:	e04b      	b.n	800bbd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00d      	beq.n	800bb5a <USBD_StdEPReq+0x146>
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	2b80      	cmp	r3, #128	@ 0x80
 800bb42:	d00a      	beq.n	800bb5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f002 fbfb 	bl	800e344 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb4e:	2180      	movs	r1, #128	@ 0x80
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f002 fbf7 	bl	800e344 <USBD_LL_StallEP>
 800bb56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb58:	e040      	b.n	800bbdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fc68 	bl	800c432 <USBD_CtlError>
              break;
 800bb62:	e03b      	b.n	800bbdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	885b      	ldrh	r3, [r3, #2]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d136      	bne.n	800bbda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f002 fc01 	bl	800e382 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fd2d 	bl	800c5e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fde4 	bl	800b758 <USBD_CoreFindEP>
 800bb90:	4603      	mov	r3, r0
 800bb92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb94:	7b7b      	ldrb	r3, [r7, #13]
 800bb96:	2bff      	cmp	r3, #255	@ 0xff
 800bb98:	d01f      	beq.n	800bbda <USBD_StdEPReq+0x1c6>
 800bb9a:	7b7b      	ldrb	r3, [r7, #13]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d11c      	bne.n	800bbda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bba0:	7b7a      	ldrb	r2, [r7, #13]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bba8:	7b7a      	ldrb	r2, [r7, #13]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	32ae      	adds	r2, #174	@ 0xae
 800bbae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d010      	beq.n	800bbda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bbb8:	7b7a      	ldrb	r2, [r7, #13]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	32ae      	adds	r2, #174	@ 0xae
 800bbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	4798      	blx	r3
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbce:	e004      	b.n	800bbda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fc2d 	bl	800c432 <USBD_CtlError>
              break;
 800bbd8:	e000      	b.n	800bbdc <USBD_StdEPReq+0x1c8>
              break;
 800bbda:	bf00      	nop
          }
          break;
 800bbdc:	e0ab      	b.n	800bd36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d002      	beq.n	800bbf0 <USBD_StdEPReq+0x1dc>
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	d032      	beq.n	800bc54 <USBD_StdEPReq+0x240>
 800bbee:	e097      	b.n	800bd20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <USBD_StdEPReq+0x1f2>
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
 800bbf8:	2b80      	cmp	r3, #128	@ 0x80
 800bbfa:	d004      	beq.n	800bc06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fc17 	bl	800c432 <USBD_CtlError>
                break;
 800bc04:	e091      	b.n	800bd2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	da0b      	bge.n	800bc26 <USBD_StdEPReq+0x212>
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	3310      	adds	r3, #16
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	4413      	add	r3, r2
 800bc22:	3304      	adds	r3, #4
 800bc24:	e00b      	b.n	800bc3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2202      	movs	r2, #2
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fc6d 	bl	800c52c <USBD_CtlSendData>
              break;
 800bc52:	e06a      	b.n	800bd2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da11      	bge.n	800bc80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	f003 020f 	and.w	r2, r3, #15
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	3324      	adds	r3, #36	@ 0x24
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d117      	bne.n	800bca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fbda 	bl	800c432 <USBD_CtlError>
                  break;
 800bc7e:	e054      	b.n	800bd2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	f003 020f 	and.w	r2, r3, #15
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	440b      	add	r3, r1
 800bc92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d104      	bne.n	800bca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fbc7 	bl	800c432 <USBD_CtlError>
                  break;
 800bca4:	e041      	b.n	800bd2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	da0b      	bge.n	800bcc6 <USBD_StdEPReq+0x2b2>
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	3310      	adds	r3, #16
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	e00b      	b.n	800bcde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	4413      	add	r3, r2
 800bcdc:	3304      	adds	r3, #4
 800bcde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <USBD_StdEPReq+0x2d8>
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b80      	cmp	r3, #128	@ 0x80
 800bcea:	d103      	bne.n	800bcf4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e00e      	b.n	800bd12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f002 fb61 	bl	800e3c0 <USBD_LL_IsStallEP>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	e002      	b.n	800bd12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	2202      	movs	r2, #2
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fc07 	bl	800c52c <USBD_CtlSendData>
              break;
 800bd1e:	e004      	b.n	800bd2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fb85 	bl	800c432 <USBD_CtlError>
              break;
 800bd28:	bf00      	nop
          }
          break;
 800bd2a:	e004      	b.n	800bd36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fb7f 	bl	800c432 <USBD_CtlError>
          break;
 800bd34:	bf00      	nop
      }
      break;
 800bd36:	e005      	b.n	800bd44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fb79 	bl	800c432 <USBD_CtlError>
      break;
 800bd40:	e000      	b.n	800bd44 <USBD_StdEPReq+0x330>
      break;
 800bd42:	bf00      	nop
  }

  return ret;
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	885b      	ldrh	r3, [r3, #2]
 800bd6a:	0a1b      	lsrs	r3, r3, #8
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	2b0e      	cmp	r3, #14
 800bd72:	f200 8152 	bhi.w	800c01a <USBD_GetDescriptor+0x2ca>
 800bd76:	a201      	add	r2, pc, #4	@ (adr r2, 800bd7c <USBD_GetDescriptor+0x2c>)
 800bd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7c:	0800bded 	.word	0x0800bded
 800bd80:	0800be05 	.word	0x0800be05
 800bd84:	0800be45 	.word	0x0800be45
 800bd88:	0800c01b 	.word	0x0800c01b
 800bd8c:	0800c01b 	.word	0x0800c01b
 800bd90:	0800bfbb 	.word	0x0800bfbb
 800bd94:	0800bfe7 	.word	0x0800bfe7
 800bd98:	0800c01b 	.word	0x0800c01b
 800bd9c:	0800c01b 	.word	0x0800c01b
 800bda0:	0800c01b 	.word	0x0800c01b
 800bda4:	0800c01b 	.word	0x0800c01b
 800bda8:	0800c01b 	.word	0x0800c01b
 800bdac:	0800c01b 	.word	0x0800c01b
 800bdb0:	0800c01b 	.word	0x0800c01b
 800bdb4:	0800bdb9 	.word	0x0800bdb9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	7c12      	ldrb	r2, [r2, #16]
 800bdd0:	f107 0108 	add.w	r1, r7, #8
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
 800bdd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdda:	e126      	b.n	800c02a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fb27 	bl	800c432 <USBD_CtlError>
        err++;
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	3301      	adds	r3, #1
 800bde8:	72fb      	strb	r3, [r7, #11]
      break;
 800bdea:	e11e      	b.n	800c02a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	7c12      	ldrb	r2, [r2, #16]
 800bdf8:	f107 0108 	add.w	r1, r7, #8
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4798      	blx	r3
 800be00:	60f8      	str	r0, [r7, #12]
      break;
 800be02:	e112      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7c1b      	ldrb	r3, [r3, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10d      	bne.n	800be28 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be14:	f107 0208 	add.w	r2, r7, #8
 800be18:	4610      	mov	r0, r2
 800be1a:	4798      	blx	r3
 800be1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3301      	adds	r3, #1
 800be22:	2202      	movs	r2, #2
 800be24:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be26:	e100      	b.n	800c02a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be30:	f107 0208 	add.w	r2, r7, #8
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
 800be38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3301      	adds	r3, #1
 800be3e:	2202      	movs	r2, #2
 800be40:	701a      	strb	r2, [r3, #0]
      break;
 800be42:	e0f2      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	885b      	ldrh	r3, [r3, #2]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b05      	cmp	r3, #5
 800be4c:	f200 80ac 	bhi.w	800bfa8 <USBD_GetDescriptor+0x258>
 800be50:	a201      	add	r2, pc, #4	@ (adr r2, 800be58 <USBD_GetDescriptor+0x108>)
 800be52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be56:	bf00      	nop
 800be58:	0800be71 	.word	0x0800be71
 800be5c:	0800bea5 	.word	0x0800bea5
 800be60:	0800bed9 	.word	0x0800bed9
 800be64:	0800bf0d 	.word	0x0800bf0d
 800be68:	0800bf41 	.word	0x0800bf41
 800be6c:	0800bf75 	.word	0x0800bf75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	7c12      	ldrb	r2, [r2, #16]
 800be88:	f107 0108 	add.w	r1, r7, #8
 800be8c:	4610      	mov	r0, r2
 800be8e:	4798      	blx	r3
 800be90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be92:	e091      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 facb 	bl	800c432 <USBD_CtlError>
            err++;
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	3301      	adds	r3, #1
 800bea0:	72fb      	strb	r3, [r7, #11]
          break;
 800bea2:	e089      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	7c12      	ldrb	r2, [r2, #16]
 800bebc:	f107 0108 	add.w	r1, r7, #8
 800bec0:	4610      	mov	r0, r2
 800bec2:	4798      	blx	r3
 800bec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec6:	e077      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fab1 	bl	800c432 <USBD_CtlError>
            err++;
 800bed0:	7afb      	ldrb	r3, [r7, #11]
 800bed2:	3301      	adds	r3, #1
 800bed4:	72fb      	strb	r3, [r7, #11]
          break;
 800bed6:	e06f      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	f107 0108 	add.w	r1, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befa:	e05d      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa97 	bl	800c432 <USBD_CtlError>
            err++;
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	3301      	adds	r3, #1
 800bf08:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0a:	e055      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	7c12      	ldrb	r2, [r2, #16]
 800bf24:	f107 0108 	add.w	r1, r7, #8
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4798      	blx	r3
 800bf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2e:	e043      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa7d 	bl	800c432 <USBD_CtlError>
            err++;
 800bf38:	7afb      	ldrb	r3, [r7, #11]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3e:	e03b      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf62:	e029      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa63 	bl	800c432 <USBD_CtlError>
            err++;
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	72fb      	strb	r3, [r7, #11]
          break;
 800bf72:	e021      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	7c12      	ldrb	r2, [r2, #16]
 800bf8c:	f107 0108 	add.w	r1, r7, #8
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf96:	e00f      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa49 	bl	800c432 <USBD_CtlError>
            err++;
 800bfa0:	7afb      	ldrb	r3, [r7, #11]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa6:	e007      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fa41 	bl	800c432 <USBD_CtlError>
          err++;
 800bfb0:	7afb      	ldrb	r3, [r7, #11]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bfb6:	bf00      	nop
      }
      break;
 800bfb8:	e037      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	7c1b      	ldrb	r3, [r3, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d109      	bne.n	800bfd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfca:	f107 0208 	add.w	r2, r7, #8
 800bfce:	4610      	mov	r0, r2
 800bfd0:	4798      	blx	r3
 800bfd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfd4:	e029      	b.n	800c02a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fa2a 	bl	800c432 <USBD_CtlError>
        err++;
 800bfde:	7afb      	ldrb	r3, [r7, #11]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	72fb      	strb	r3, [r7, #11]
      break;
 800bfe4:	e021      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	7c1b      	ldrb	r3, [r3, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10d      	bne.n	800c00a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bff6:	f107 0208 	add.w	r2, r7, #8
 800bffa:	4610      	mov	r0, r2
 800bffc:	4798      	blx	r3
 800bffe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3301      	adds	r3, #1
 800c004:	2207      	movs	r2, #7
 800c006:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c008:	e00f      	b.n	800c02a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fa10 	bl	800c432 <USBD_CtlError>
        err++;
 800c012:	7afb      	ldrb	r3, [r7, #11]
 800c014:	3301      	adds	r3, #1
 800c016:	72fb      	strb	r3, [r7, #11]
      break;
 800c018:	e007      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fa08 	bl	800c432 <USBD_CtlError>
      err++;
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	3301      	adds	r3, #1
 800c026:	72fb      	strb	r3, [r7, #11]
      break;
 800c028:	bf00      	nop
  }

  if (err != 0U)
 800c02a:	7afb      	ldrb	r3, [r7, #11]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d11e      	bne.n	800c06e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	88db      	ldrh	r3, [r3, #6]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d016      	beq.n	800c066 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c038:	893b      	ldrh	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00e      	beq.n	800c05c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	88da      	ldrh	r2, [r3, #6]
 800c042:	893b      	ldrh	r3, [r7, #8]
 800c044:	4293      	cmp	r3, r2
 800c046:	bf28      	it	cs
 800c048:	4613      	movcs	r3, r2
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c04e:	893b      	ldrh	r3, [r7, #8]
 800c050:	461a      	mov	r2, r3
 800c052:	68f9      	ldr	r1, [r7, #12]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fa69 	bl	800c52c <USBD_CtlSendData>
 800c05a:	e009      	b.n	800c070 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f9e7 	bl	800c432 <USBD_CtlError>
 800c064:	e004      	b.n	800c070 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 faba 	bl	800c5e0 <USBD_CtlSendStatus>
 800c06c:	e000      	b.n	800c070 <USBD_GetDescriptor+0x320>
    return;
 800c06e:	bf00      	nop
  }
}
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop

0800c078 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	889b      	ldrh	r3, [r3, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d131      	bne.n	800c0ee <USBD_SetAddress+0x76>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	88db      	ldrh	r3, [r3, #6]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d12d      	bne.n	800c0ee <USBD_SetAddress+0x76>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	885b      	ldrh	r3, [r3, #2]
 800c096:	2b7f      	cmp	r3, #127	@ 0x7f
 800c098:	d829      	bhi.n	800c0ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	885b      	ldrh	r3, [r3, #2]
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d104      	bne.n	800c0bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f9bc 	bl	800c432 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ba:	e01d      	b.n	800c0f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7bfa      	ldrb	r2, [r7, #15]
 800c0c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f002 f9a5 	bl	800e418 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fa86 	bl	800c5e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e2:	e009      	b.n	800c0f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ec:	e004      	b.n	800c0f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f99e 	bl	800c432 <USBD_CtlError>
  }
}
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	885b      	ldrh	r3, [r3, #2]
 800c112:	b2da      	uxtb	r2, r3
 800c114:	4b4e      	ldr	r3, [pc, #312]	@ (800c250 <USBD_SetConfig+0x150>)
 800c116:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c118:	4b4d      	ldr	r3, [pc, #308]	@ (800c250 <USBD_SetConfig+0x150>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d905      	bls.n	800c12c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f985 	bl	800c432 <USBD_CtlError>
    return USBD_FAIL;
 800c128:	2303      	movs	r3, #3
 800c12a:	e08c      	b.n	800c246 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b02      	cmp	r3, #2
 800c136:	d002      	beq.n	800c13e <USBD_SetConfig+0x3e>
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d029      	beq.n	800c190 <USBD_SetConfig+0x90>
 800c13c:	e075      	b.n	800c22a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c13e:	4b44      	ldr	r3, [pc, #272]	@ (800c250 <USBD_SetConfig+0x150>)
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d020      	beq.n	800c188 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c146:	4b42      	ldr	r3, [pc, #264]	@ (800c250 <USBD_SetConfig+0x150>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c150:	4b3f      	ldr	r3, [pc, #252]	@ (800c250 <USBD_SetConfig+0x150>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7fe ffb9 	bl	800b0ce <USBD_SetClassConfig>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c160:	7bfb      	ldrb	r3, [r7, #15]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d008      	beq.n	800c178 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 f962 	bl	800c432 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2202      	movs	r2, #2
 800c172:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c176:	e065      	b.n	800c244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa31 	bl	800c5e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2203      	movs	r2, #3
 800c182:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c186:	e05d      	b.n	800c244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fa29 	bl	800c5e0 <USBD_CtlSendStatus>
      break;
 800c18e:	e059      	b.n	800c244 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c190:	4b2f      	ldr	r3, [pc, #188]	@ (800c250 <USBD_SetConfig+0x150>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d112      	bne.n	800c1be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c1a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1aa:	4b29      	ldr	r3, [pc, #164]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7fe ffa8 	bl	800b106 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fa12 	bl	800c5e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1bc:	e042      	b.n	800c244 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c1be:	4b24      	ldr	r3, [pc, #144]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d02a      	beq.n	800c222 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7fe ff96 	bl	800b106 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1da:	4b1d      	ldr	r3, [pc, #116]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7fe ff6f 	bl	800b0ce <USBD_SetClassConfig>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00f      	beq.n	800c21a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f918 	bl	800c432 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7fe ff7b 	bl	800b106 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2202      	movs	r2, #2
 800c214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c218:	e014      	b.n	800c244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f9e0 	bl	800c5e0 <USBD_CtlSendStatus>
      break;
 800c220:	e010      	b.n	800c244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f9dc 	bl	800c5e0 <USBD_CtlSendStatus>
      break;
 800c228:	e00c      	b.n	800c244 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f900 	bl	800c432 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c232:	4b07      	ldr	r3, [pc, #28]	@ (800c250 <USBD_SetConfig+0x150>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7fe ff64 	bl	800b106 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c23e:	2303      	movs	r3, #3
 800c240:	73fb      	strb	r3, [r7, #15]
      break;
 800c242:	bf00      	nop
  }

  return ret;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	24000600 	.word	0x24000600

0800c254 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	88db      	ldrh	r3, [r3, #6]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d004      	beq.n	800c270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f8e2 	bl	800c432 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c26e:	e023      	b.n	800c2b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b02      	cmp	r3, #2
 800c27a:	dc02      	bgt.n	800c282 <USBD_GetConfig+0x2e>
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	dc03      	bgt.n	800c288 <USBD_GetConfig+0x34>
 800c280:	e015      	b.n	800c2ae <USBD_GetConfig+0x5a>
 800c282:	2b03      	cmp	r3, #3
 800c284:	d00b      	beq.n	800c29e <USBD_GetConfig+0x4a>
 800c286:	e012      	b.n	800c2ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3308      	adds	r3, #8
 800c292:	2201      	movs	r2, #1
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f948 	bl	800c52c <USBD_CtlSendData>
        break;
 800c29c:	e00c      	b.n	800c2b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f940 	bl	800c52c <USBD_CtlSendData>
        break;
 800c2ac:	e004      	b.n	800c2b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f8be 	bl	800c432 <USBD_CtlError>
        break;
 800c2b6:	bf00      	nop
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d81e      	bhi.n	800c316 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	88db      	ldrh	r3, [r3, #6]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d004      	beq.n	800c2ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f8a5 	bl	800c432 <USBD_CtlError>
        break;
 800c2e8:	e01a      	b.n	800c320 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	f043 0202 	orr.w	r2, r3, #2
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	330c      	adds	r3, #12
 800c30a:	2202      	movs	r2, #2
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f90c 	bl	800c52c <USBD_CtlSendData>
      break;
 800c314:	e004      	b.n	800c320 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f88a 	bl	800c432 <USBD_CtlError>
      break;
 800c31e:	bf00      	nop
  }
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d107      	bne.n	800c34a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f94c 	bl	800c5e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c348:	e013      	b.n	800c372 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	885b      	ldrh	r3, [r3, #2]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d10b      	bne.n	800c36a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	889b      	ldrh	r3, [r3, #4]
 800c356:	0a1b      	lsrs	r3, r3, #8
 800c358:	b29b      	uxth	r3, r3
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f93c 	bl	800c5e0 <USBD_CtlSendStatus>
}
 800c368:	e003      	b.n	800c372 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f860 	bl	800c432 <USBD_CtlError>
}
 800c372:	bf00      	nop
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	3b01      	subs	r3, #1
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d80b      	bhi.n	800c3aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	885b      	ldrh	r3, [r3, #2]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d10c      	bne.n	800c3b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f91c 	bl	800c5e0 <USBD_CtlSendStatus>
      }
      break;
 800c3a8:	e004      	b.n	800c3b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f840 	bl	800c432 <USBD_CtlError>
      break;
 800c3b2:	e000      	b.n	800c3b6 <USBD_ClrFeature+0x3c>
      break;
 800c3b4:	bf00      	nop
  }
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	781a      	ldrb	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	781a      	ldrb	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff fa16 	bl	800b81a <SWAPBYTE>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3301      	adds	r3, #1
 800c400:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f7ff fa09 	bl	800b81a <SWAPBYTE>
 800c408:	4603      	mov	r3, r0
 800c40a:	461a      	mov	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3301      	adds	r3, #1
 800c414:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3301      	adds	r3, #1
 800c41a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff f9fc 	bl	800b81a <SWAPBYTE>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	80da      	strh	r2, [r3, #6]
}
 800c42a:	bf00      	nop
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c43c:	2180      	movs	r1, #128	@ 0x80
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f001 ff80 	bl	800e344 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c444:	2100      	movs	r1, #0
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f001 ff7c 	bl	800e344 <USBD_LL_StallEP>
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c460:	2300      	movs	r3, #0
 800c462:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d042      	beq.n	800c4f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c46e:	6938      	ldr	r0, [r7, #16]
 800c470:	f000 f842 	bl	800c4f8 <USBD_GetLen>
 800c474:	4603      	mov	r3, r0
 800c476:	3301      	adds	r3, #1
 800c478:	005b      	lsls	r3, r3, #1
 800c47a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c47e:	d808      	bhi.n	800c492 <USBD_GetString+0x3e>
 800c480:	6938      	ldr	r0, [r7, #16]
 800c482:	f000 f839 	bl	800c4f8 <USBD_GetLen>
 800c486:	4603      	mov	r3, r0
 800c488:	3301      	adds	r3, #1
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	005b      	lsls	r3, r3, #1
 800c48e:	b29a      	uxth	r2, r3
 800c490:	e001      	b.n	800c496 <USBD_GetString+0x42>
 800c492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	4413      	add	r3, r2
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	7812      	ldrb	r2, [r2, #0]
 800c4a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c4bc:	e013      	b.n	800c4e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	7812      	ldrb	r2, [r2, #0]
 800c4c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	613b      	str	r3, [r7, #16]
    idx++;
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	4413      	add	r3, r2
 800c4dc:	2200      	movs	r2, #0
 800c4de:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1e7      	bne.n	800c4be <USBD_GetString+0x6a>
 800c4ee:	e000      	b.n	800c4f2 <USBD_GetString+0x9e>
    return;
 800c4f0:	bf00      	nop
  }
}
 800c4f2:	3718      	adds	r7, #24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c500:	2300      	movs	r3, #0
 800c502:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c508:	e005      	b.n	800c516 <USBD_GetLen+0x1e>
  {
    len++;
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	3301      	adds	r3, #1
 800c50e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	3301      	adds	r3, #1
 800c514:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1f5      	bne.n	800c50a <USBD_GetLen+0x12>
  }

  return len;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2202      	movs	r2, #2
 800c53c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	2100      	movs	r1, #0
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f001 ff7f 	bl	800e456 <USBD_LL_Transmit>

  return USBD_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b084      	sub	sp, #16
 800c566:	af00      	add	r7, sp, #0
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	2100      	movs	r1, #0
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f001 ff6e 	bl	800e456 <USBD_LL_Transmit>

  return USBD_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2203      	movs	r2, #3
 800c594:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f001 ff72 	bl	800e498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	60f8      	str	r0, [r7, #12]
 800c5c6:	60b9      	str	r1, [r7, #8]
 800c5c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f001 ff61 	bl	800e498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 ff2d 	bl	800e456 <USBD_LL_Transmit>

  return USBD_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b082      	sub	sp, #8
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2205      	movs	r2, #5
 800c612:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c616:	2300      	movs	r3, #0
 800c618:	2200      	movs	r2, #0
 800c61a:	2100      	movs	r1, #0
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f001 ff3b 	bl	800e498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c636:	2300      	movs	r3, #0
 800c638:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c63a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c63e:	2b84      	cmp	r3, #132	@ 0x84
 800c640:	d005      	beq.n	800c64e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4413      	add	r3, r2
 800c64a:	3303      	adds	r3, #3
 800c64c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c64e:	68fb      	ldr	r3, [r7, #12]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c660:	f000 fb04 	bl	800cc6c <vTaskStartScheduler>
  
  return osOK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	bd80      	pop	{r7, pc}

0800c66a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c66a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66c:	b089      	sub	sp, #36	@ 0x24
 800c66e:	af04      	add	r7, sp, #16
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d020      	beq.n	800c6be <osThreadCreate+0x54>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d01c      	beq.n	800c6be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685c      	ldr	r4, [r3, #4]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	691e      	ldr	r6, [r3, #16]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff ffc8 	bl	800c62c <makeFreeRtosPriority>
 800c69c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6a6:	9202      	str	r2, [sp, #8]
 800c6a8:	9301      	str	r3, [sp, #4]
 800c6aa:	9100      	str	r1, [sp, #0]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f000 f8ed 	bl	800c892 <xTaskCreateStatic>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	e01c      	b.n	800c6f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	685c      	ldr	r4, [r3, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff ffaa 	bl	800c62c <makeFreeRtosPriority>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	f107 030c 	add.w	r3, r7, #12
 800c6de:	9301      	str	r3, [sp, #4]
 800c6e0:	9200      	str	r2, [sp, #0]
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	4632      	mov	r2, r6
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 f932 	bl	800c952 <xTaskCreate>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d001      	beq.n	800c6f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e000      	b.n	800c6fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c702 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b084      	sub	sp, #16
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <osDelay+0x16>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	e000      	b.n	800c71a <osDelay+0x18>
 800c718:	2301      	movs	r3, #1
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 fa70 	bl	800cc00 <vTaskDelay>
  
  return osOK;
 800c720:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c72a:	b480      	push	{r7}
 800c72c:	b083      	sub	sp, #12
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f103 0208 	add.w	r2, r3, #8
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f04f 32ff 	mov.w	r2, #4294967295
 800c742:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f103 0208 	add.w	r2, r3, #8
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f103 0208 	add.w	r2, r3, #8
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c75e:	bf00      	nop
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c778:	bf00      	nop
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	689a      	ldr	r2, [r3, #8]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	601a      	str	r2, [r3, #0]
}
 800c7c0:	bf00      	nop
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e2:	d103      	bne.n	800c7ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e00c      	b.n	800c806 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	e002      	b.n	800c7fa <vListInsert+0x2e>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	429a      	cmp	r2, r3
 800c804:	d2f6      	bcs.n	800c7f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	685a      	ldr	r2, [r3, #4]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	601a      	str	r2, [r3, #0]
}
 800c832:	bf00      	nop
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c83e:	b480      	push	{r7}
 800c840:	b085      	sub	sp, #20
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	6892      	ldr	r2, [r2, #8]
 800c854:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	6852      	ldr	r2, [r2, #4]
 800c85e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d103      	bne.n	800c872 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689a      	ldr	r2, [r3, #8]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	1e5a      	subs	r2, r3, #1
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c892:	b580      	push	{r7, lr}
 800c894:	b08e      	sub	sp, #56	@ 0x38
 800c896:	af04      	add	r7, sp, #16
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
 800c89e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10b      	bne.n	800c8be <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8b8:	bf00      	nop
 800c8ba:	bf00      	nop
 800c8bc:	e7fd      	b.n	800c8ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10b      	bne.n	800c8dc <xTaskCreateStatic+0x4a>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	61fb      	str	r3, [r7, #28]
}
 800c8d6:	bf00      	nop
 800c8d8:	bf00      	nop
 800c8da:	e7fd      	b.n	800c8d8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8dc:	23a0      	movs	r3, #160	@ 0xa0
 800c8de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	2ba0      	cmp	r3, #160	@ 0xa0
 800c8e4:	d00b      	beq.n	800c8fe <xTaskCreateStatic+0x6c>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	61bb      	str	r3, [r7, #24]
}
 800c8f8:	bf00      	nop
 800c8fa:	bf00      	nop
 800c8fc:	e7fd      	b.n	800c8fa <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	2b00      	cmp	r3, #0
 800c904:	d01e      	beq.n	800c944 <xTaskCreateStatic+0xb2>
 800c906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01b      	beq.n	800c944 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c914:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	2202      	movs	r2, #2
 800c91a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c91e:	2300      	movs	r3, #0
 800c920:	9303      	str	r3, [sp, #12]
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	9302      	str	r3, [sp, #8]
 800c926:	f107 0314 	add.w	r3, r7, #20
 800c92a:	9301      	str	r3, [sp, #4]
 800c92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	68b9      	ldr	r1, [r7, #8]
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f000 f850 	bl	800c9dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c93c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c93e:	f000 f8f5 	bl	800cb2c <prvAddNewTaskToReadyList>
 800c942:	e001      	b.n	800c948 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c944:	2300      	movs	r3, #0
 800c946:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c948:	697b      	ldr	r3, [r7, #20]
	}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3728      	adds	r7, #40	@ 0x28
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c952:	b580      	push	{r7, lr}
 800c954:	b08c      	sub	sp, #48	@ 0x30
 800c956:	af04      	add	r7, sp, #16
 800c958:	60f8      	str	r0, [r7, #12]
 800c95a:	60b9      	str	r1, [r7, #8]
 800c95c:	603b      	str	r3, [r7, #0]
 800c95e:	4613      	mov	r3, r2
 800c960:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c962:	88fb      	ldrh	r3, [r7, #6]
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4618      	mov	r0, r3
 800c968:	f000 ff06 	bl	800d778 <pvPortMalloc>
 800c96c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00e      	beq.n	800c992 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c974:	20a0      	movs	r0, #160	@ 0xa0
 800c976:	f000 feff 	bl	800d778 <pvPortMalloc>
 800c97a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d003      	beq.n	800c98a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	697a      	ldr	r2, [r7, #20]
 800c986:	631a      	str	r2, [r3, #48]	@ 0x30
 800c988:	e005      	b.n	800c996 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c98a:	6978      	ldr	r0, [r7, #20]
 800c98c:	f000 ffc2 	bl	800d914 <vPortFree>
 800c990:	e001      	b.n	800c996 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d017      	beq.n	800c9cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c9a4:	88fa      	ldrh	r2, [r7, #6]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	9303      	str	r3, [sp, #12]
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	9302      	str	r3, [sp, #8]
 800c9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b0:	9301      	str	r3, [sp, #4]
 800c9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	68b9      	ldr	r1, [r7, #8]
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f000 f80e 	bl	800c9dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9c0:	69f8      	ldr	r0, [r7, #28]
 800c9c2:	f000 f8b3 	bl	800cb2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	61bb      	str	r3, [r7, #24]
 800c9ca:	e002      	b.n	800c9d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c9d2:	69bb      	ldr	r3, [r7, #24]
	}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b088      	sub	sp, #32
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
 800c9e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	21a5      	movs	r1, #165	@ 0xa5
 800c9f6:	f001 fdc7 	bl	800e588 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9fe:	6879      	ldr	r1, [r7, #4]
 800ca00:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ca04:	440b      	add	r3, r1
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	f023 0307 	bic.w	r3, r3, #7
 800ca12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00b      	beq.n	800ca36 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	617b      	str	r3, [r7, #20]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01f      	beq.n	800ca7c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	61fb      	str	r3, [r7, #28]
 800ca40:	e012      	b.n	800ca68 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	4413      	add	r3, r2
 800ca48:	7819      	ldrb	r1, [r3, #0]
 800ca4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	4413      	add	r3, r2
 800ca50:	3334      	adds	r3, #52	@ 0x34
 800ca52:	460a      	mov	r2, r1
 800ca54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d006      	beq.n	800ca70 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	3301      	adds	r3, #1
 800ca66:	61fb      	str	r3, [r7, #28]
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	2b0f      	cmp	r3, #15
 800ca6c:	d9e9      	bls.n	800ca42 <prvInitialiseNewTask+0x66>
 800ca6e:	e000      	b.n	800ca72 <prvInitialiseNewTask+0x96>
			{
				break;
 800ca70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ca7a:	e003      	b.n	800ca84 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca86:	2b06      	cmp	r3, #6
 800ca88:	d901      	bls.n	800ca8e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca8a:	2306      	movs	r3, #6
 800ca8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca92:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca98:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800caa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa2:	3304      	adds	r3, #4
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7ff fe60 	bl	800c76a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800caaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caac:	3318      	adds	r3, #24
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff fe5b 	bl	800c76a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cab8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cabc:	f1c3 0207 	rsb	r2, r3, #7
 800cac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cac8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800caca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cacc:	2200      	movs	r2, #0
 800cace:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cadc:	334c      	adds	r3, #76	@ 0x4c
 800cade:	224c      	movs	r2, #76	@ 0x4c
 800cae0:	2100      	movs	r1, #0
 800cae2:	4618      	mov	r0, r3
 800cae4:	f001 fd50 	bl	800e588 <memset>
 800cae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caea:	4a0d      	ldr	r2, [pc, #52]	@ (800cb20 <prvInitialiseNewTask+0x144>)
 800caec:	651a      	str	r2, [r3, #80]	@ 0x50
 800caee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf0:	4a0c      	ldr	r2, [pc, #48]	@ (800cb24 <prvInitialiseNewTask+0x148>)
 800caf2:	655a      	str	r2, [r3, #84]	@ 0x54
 800caf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf6:	4a0c      	ldr	r2, [pc, #48]	@ (800cb28 <prvInitialiseNewTask+0x14c>)
 800caf8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	68f9      	ldr	r1, [r7, #12]
 800cafe:	69b8      	ldr	r0, [r7, #24]
 800cb00:	f000 fc2a 	bl	800d358 <pxPortInitialiseStack>
 800cb04:	4602      	mov	r2, r0
 800cb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d002      	beq.n	800cb16 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb16:	bf00      	nop
 800cb18:	3720      	adds	r7, #32
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	24005f38 	.word	0x24005f38
 800cb24:	24005fa0 	.word	0x24005fa0
 800cb28:	24006008 	.word	0x24006008

0800cb2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb34:	f000 fd40 	bl	800d5b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb38:	4b2a      	ldr	r3, [pc, #168]	@ (800cbe4 <prvAddNewTaskToReadyList+0xb8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	4a29      	ldr	r2, [pc, #164]	@ (800cbe4 <prvAddNewTaskToReadyList+0xb8>)
 800cb40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb42:	4b29      	ldr	r3, [pc, #164]	@ (800cbe8 <prvAddNewTaskToReadyList+0xbc>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d109      	bne.n	800cb5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb4a:	4a27      	ldr	r2, [pc, #156]	@ (800cbe8 <prvAddNewTaskToReadyList+0xbc>)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb50:	4b24      	ldr	r3, [pc, #144]	@ (800cbe4 <prvAddNewTaskToReadyList+0xb8>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d110      	bne.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb58:	f000 fad4 	bl	800d104 <prvInitialiseTaskLists>
 800cb5c:	e00d      	b.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb5e:	4b23      	ldr	r3, [pc, #140]	@ (800cbec <prvAddNewTaskToReadyList+0xc0>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d109      	bne.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb66:	4b20      	ldr	r3, [pc, #128]	@ (800cbe8 <prvAddNewTaskToReadyList+0xbc>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d802      	bhi.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb74:	4a1c      	ldr	r2, [pc, #112]	@ (800cbe8 <prvAddNewTaskToReadyList+0xbc>)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb7a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbf0 <prvAddNewTaskToReadyList+0xc4>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	4a1b      	ldr	r2, [pc, #108]	@ (800cbf0 <prvAddNewTaskToReadyList+0xc4>)
 800cb82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb88:	2201      	movs	r2, #1
 800cb8a:	409a      	lsls	r2, r3
 800cb8c:	4b19      	ldr	r3, [pc, #100]	@ (800cbf4 <prvAddNewTaskToReadyList+0xc8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	4a18      	ldr	r2, [pc, #96]	@ (800cbf4 <prvAddNewTaskToReadyList+0xc8>)
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4a15      	ldr	r2, [pc, #84]	@ (800cbf8 <prvAddNewTaskToReadyList+0xcc>)
 800cba4:	441a      	add	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	3304      	adds	r3, #4
 800cbaa:	4619      	mov	r1, r3
 800cbac:	4610      	mov	r0, r2
 800cbae:	f7ff fde9 	bl	800c784 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cbb2:	f000 fd33 	bl	800d61c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800cbec <prvAddNewTaskToReadyList+0xc0>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00e      	beq.n	800cbdc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe8 <prvAddNewTaskToReadyList+0xbc>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d207      	bcs.n	800cbdc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cbcc:	4b0b      	ldr	r3, [pc, #44]	@ (800cbfc <prvAddNewTaskToReadyList+0xd0>)
 800cbce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	24000704 	.word	0x24000704
 800cbe8:	24000604 	.word	0x24000604
 800cbec:	24000710 	.word	0x24000710
 800cbf0:	24000720 	.word	0x24000720
 800cbf4:	2400070c 	.word	0x2400070c
 800cbf8:	24000608 	.word	0x24000608
 800cbfc:	e000ed04 	.word	0xe000ed04

0800cc00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d018      	beq.n	800cc44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc12:	4b14      	ldr	r3, [pc, #80]	@ (800cc64 <vTaskDelay+0x64>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00b      	beq.n	800cc32 <vTaskDelay+0x32>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	60bb      	str	r3, [r7, #8]
}
 800cc2c:	bf00      	nop
 800cc2e:	bf00      	nop
 800cc30:	e7fd      	b.n	800cc2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc32:	f000 f885 	bl	800cd40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc36:	2100      	movs	r1, #0
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fb27 	bl	800d28c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc3e:	f000 f88d 	bl	800cd5c <xTaskResumeAll>
 800cc42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d107      	bne.n	800cc5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cc4a:	4b07      	ldr	r3, [pc, #28]	@ (800cc68 <vTaskDelay+0x68>)
 800cc4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc5a:	bf00      	nop
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	2400072c 	.word	0x2400072c
 800cc68:	e000ed04 	.word	0xe000ed04

0800cc6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08a      	sub	sp, #40	@ 0x28
 800cc70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc76:	2300      	movs	r3, #0
 800cc78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc7a:	463a      	mov	r2, r7
 800cc7c:	1d39      	adds	r1, r7, #4
 800cc7e:	f107 0308 	add.w	r3, r7, #8
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7f3 fce2 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	9202      	str	r2, [sp, #8]
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	2300      	movs	r3, #0
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	2300      	movs	r3, #0
 800cc98:	460a      	mov	r2, r1
 800cc9a:	4921      	ldr	r1, [pc, #132]	@ (800cd20 <vTaskStartScheduler+0xb4>)
 800cc9c:	4821      	ldr	r0, [pc, #132]	@ (800cd24 <vTaskStartScheduler+0xb8>)
 800cc9e:	f7ff fdf8 	bl	800c892 <xTaskCreateStatic>
 800cca2:	4603      	mov	r3, r0
 800cca4:	4a20      	ldr	r2, [pc, #128]	@ (800cd28 <vTaskStartScheduler+0xbc>)
 800cca6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cca8:	4b1f      	ldr	r3, [pc, #124]	@ (800cd28 <vTaskStartScheduler+0xbc>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	617b      	str	r3, [r7, #20]
 800ccb4:	e001      	b.n	800ccba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d11b      	bne.n	800ccf8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	613b      	str	r3, [r7, #16]
}
 800ccd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccd4:	4b15      	ldr	r3, [pc, #84]	@ (800cd2c <vTaskStartScheduler+0xc0>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	334c      	adds	r3, #76	@ 0x4c
 800ccda:	4a15      	ldr	r2, [pc, #84]	@ (800cd30 <vTaskStartScheduler+0xc4>)
 800ccdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccde:	4b15      	ldr	r3, [pc, #84]	@ (800cd34 <vTaskStartScheduler+0xc8>)
 800cce0:	f04f 32ff 	mov.w	r2, #4294967295
 800cce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cce6:	4b14      	ldr	r3, [pc, #80]	@ (800cd38 <vTaskStartScheduler+0xcc>)
 800cce8:	2201      	movs	r2, #1
 800ccea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccec:	4b13      	ldr	r3, [pc, #76]	@ (800cd3c <vTaskStartScheduler+0xd0>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccf2:	f000 fbbd 	bl	800d470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccf6:	e00f      	b.n	800cd18 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfe:	d10b      	bne.n	800cd18 <vTaskStartScheduler+0xac>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	60fb      	str	r3, [r7, #12]
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	e7fd      	b.n	800cd14 <vTaskStartScheduler+0xa8>
}
 800cd18:	bf00      	nop
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	0800e7b4 	.word	0x0800e7b4
 800cd24:	0800d0d5 	.word	0x0800d0d5
 800cd28:	24000728 	.word	0x24000728
 800cd2c:	24000604 	.word	0x24000604
 800cd30:	24000108 	.word	0x24000108
 800cd34:	24000724 	.word	0x24000724
 800cd38:	24000710 	.word	0x24000710
 800cd3c:	24000708 	.word	0x24000708

0800cd40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd40:	b480      	push	{r7}
 800cd42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd44:	4b04      	ldr	r3, [pc, #16]	@ (800cd58 <vTaskSuspendAll+0x18>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	4a03      	ldr	r2, [pc, #12]	@ (800cd58 <vTaskSuspendAll+0x18>)
 800cd4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd4e:	bf00      	nop
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	2400072c 	.word	0x2400072c

0800cd5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd6a:	4b42      	ldr	r3, [pc, #264]	@ (800ce74 <xTaskResumeAll+0x118>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10b      	bne.n	800cd8a <xTaskResumeAll+0x2e>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	603b      	str	r3, [r7, #0]
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	e7fd      	b.n	800cd86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd8a:	f000 fc15 	bl	800d5b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd8e:	4b39      	ldr	r3, [pc, #228]	@ (800ce74 <xTaskResumeAll+0x118>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	4a37      	ldr	r2, [pc, #220]	@ (800ce74 <xTaskResumeAll+0x118>)
 800cd96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd98:	4b36      	ldr	r3, [pc, #216]	@ (800ce74 <xTaskResumeAll+0x118>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d161      	bne.n	800ce64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cda0:	4b35      	ldr	r3, [pc, #212]	@ (800ce78 <xTaskResumeAll+0x11c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d05d      	beq.n	800ce64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cda8:	e02e      	b.n	800ce08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdaa:	4b34      	ldr	r3, [pc, #208]	@ (800ce7c <xTaskResumeAll+0x120>)
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3318      	adds	r3, #24
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fd41 	bl	800c83e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fd3c 	bl	800c83e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdca:	2201      	movs	r2, #1
 800cdcc:	409a      	lsls	r2, r3
 800cdce:	4b2c      	ldr	r3, [pc, #176]	@ (800ce80 <xTaskResumeAll+0x124>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	4a2a      	ldr	r2, [pc, #168]	@ (800ce80 <xTaskResumeAll+0x124>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cddc:	4613      	mov	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4a27      	ldr	r2, [pc, #156]	@ (800ce84 <xTaskResumeAll+0x128>)
 800cde6:	441a      	add	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f7ff fcc8 	bl	800c784 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdf8:	4b23      	ldr	r3, [pc, #140]	@ (800ce88 <xTaskResumeAll+0x12c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d302      	bcc.n	800ce08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce02:	4b22      	ldr	r3, [pc, #136]	@ (800ce8c <xTaskResumeAll+0x130>)
 800ce04:	2201      	movs	r2, #1
 800ce06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce08:	4b1c      	ldr	r3, [pc, #112]	@ (800ce7c <xTaskResumeAll+0x120>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1cc      	bne.n	800cdaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d001      	beq.n	800ce1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce16:	f000 fa19 	bl	800d24c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ce90 <xTaskResumeAll+0x134>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d010      	beq.n	800ce48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce26:	f000 f837 	bl	800ce98 <xTaskIncrementTick>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce30:	4b16      	ldr	r3, [pc, #88]	@ (800ce8c <xTaskResumeAll+0x130>)
 800ce32:	2201      	movs	r2, #1
 800ce34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1f1      	bne.n	800ce26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce42:	4b13      	ldr	r3, [pc, #76]	@ (800ce90 <xTaskResumeAll+0x134>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce48:	4b10      	ldr	r3, [pc, #64]	@ (800ce8c <xTaskResumeAll+0x130>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d009      	beq.n	800ce64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce50:	2301      	movs	r3, #1
 800ce52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce54:	4b0f      	ldr	r3, [pc, #60]	@ (800ce94 <xTaskResumeAll+0x138>)
 800ce56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce64:	f000 fbda 	bl	800d61c <vPortExitCritical>

	return xAlreadyYielded;
 800ce68:	68bb      	ldr	r3, [r7, #8]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	2400072c 	.word	0x2400072c
 800ce78:	24000704 	.word	0x24000704
 800ce7c:	240006c4 	.word	0x240006c4
 800ce80:	2400070c 	.word	0x2400070c
 800ce84:	24000608 	.word	0x24000608
 800ce88:	24000604 	.word	0x24000604
 800ce8c:	24000718 	.word	0x24000718
 800ce90:	24000714 	.word	0x24000714
 800ce94:	e000ed04 	.word	0xe000ed04

0800ce98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea2:	4b4f      	ldr	r3, [pc, #316]	@ (800cfe0 <xTaskIncrementTick+0x148>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f040 808f 	bne.w	800cfca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ceac:	4b4d      	ldr	r3, [pc, #308]	@ (800cfe4 <xTaskIncrementTick+0x14c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ceb4:	4a4b      	ldr	r2, [pc, #300]	@ (800cfe4 <xTaskIncrementTick+0x14c>)
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d121      	bne.n	800cf04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cec0:	4b49      	ldr	r3, [pc, #292]	@ (800cfe8 <xTaskIncrementTick+0x150>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00b      	beq.n	800cee2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	603b      	str	r3, [r7, #0]
}
 800cedc:	bf00      	nop
 800cede:	bf00      	nop
 800cee0:	e7fd      	b.n	800cede <xTaskIncrementTick+0x46>
 800cee2:	4b41      	ldr	r3, [pc, #260]	@ (800cfe8 <xTaskIncrementTick+0x150>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	4b40      	ldr	r3, [pc, #256]	@ (800cfec <xTaskIncrementTick+0x154>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a3e      	ldr	r2, [pc, #248]	@ (800cfe8 <xTaskIncrementTick+0x150>)
 800ceee:	6013      	str	r3, [r2, #0]
 800cef0:	4a3e      	ldr	r2, [pc, #248]	@ (800cfec <xTaskIncrementTick+0x154>)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	4b3e      	ldr	r3, [pc, #248]	@ (800cff0 <xTaskIncrementTick+0x158>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3301      	adds	r3, #1
 800cefc:	4a3c      	ldr	r2, [pc, #240]	@ (800cff0 <xTaskIncrementTick+0x158>)
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	f000 f9a4 	bl	800d24c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf04:	4b3b      	ldr	r3, [pc, #236]	@ (800cff4 <xTaskIncrementTick+0x15c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d348      	bcc.n	800cfa0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf0e:	4b36      	ldr	r3, [pc, #216]	@ (800cfe8 <xTaskIncrementTick+0x150>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d104      	bne.n	800cf22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf18:	4b36      	ldr	r3, [pc, #216]	@ (800cff4 <xTaskIncrementTick+0x15c>)
 800cf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1e:	601a      	str	r2, [r3, #0]
					break;
 800cf20:	e03e      	b.n	800cfa0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf22:	4b31      	ldr	r3, [pc, #196]	@ (800cfe8 <xTaskIncrementTick+0x150>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d203      	bcs.n	800cf42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf3a:	4a2e      	ldr	r2, [pc, #184]	@ (800cff4 <xTaskIncrementTick+0x15c>)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf40:	e02e      	b.n	800cfa0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	3304      	adds	r3, #4
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff fc79 	bl	800c83e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d004      	beq.n	800cf5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	3318      	adds	r3, #24
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff fc70 	bl	800c83e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf62:	2201      	movs	r2, #1
 800cf64:	409a      	lsls	r2, r3
 800cf66:	4b24      	ldr	r3, [pc, #144]	@ (800cff8 <xTaskIncrementTick+0x160>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	4a22      	ldr	r2, [pc, #136]	@ (800cff8 <xTaskIncrementTick+0x160>)
 800cf6e:	6013      	str	r3, [r2, #0]
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf74:	4613      	mov	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4413      	add	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4a1f      	ldr	r2, [pc, #124]	@ (800cffc <xTaskIncrementTick+0x164>)
 800cf7e:	441a      	add	r2, r3
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	3304      	adds	r3, #4
 800cf84:	4619      	mov	r1, r3
 800cf86:	4610      	mov	r0, r2
 800cf88:	f7ff fbfc 	bl	800c784 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf90:	4b1b      	ldr	r3, [pc, #108]	@ (800d000 <xTaskIncrementTick+0x168>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d3b9      	bcc.n	800cf0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf9e:	e7b6      	b.n	800cf0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfa0:	4b17      	ldr	r3, [pc, #92]	@ (800d000 <xTaskIncrementTick+0x168>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa6:	4915      	ldr	r1, [pc, #84]	@ (800cffc <xTaskIncrementTick+0x164>)
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	440b      	add	r3, r1
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d901      	bls.n	800cfbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfbc:	4b11      	ldr	r3, [pc, #68]	@ (800d004 <xTaskIncrementTick+0x16c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d007      	beq.n	800cfd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	617b      	str	r3, [r7, #20]
 800cfc8:	e004      	b.n	800cfd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfca:	4b0f      	ldr	r3, [pc, #60]	@ (800d008 <xTaskIncrementTick+0x170>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	4a0d      	ldr	r2, [pc, #52]	@ (800d008 <xTaskIncrementTick+0x170>)
 800cfd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfd4:	697b      	ldr	r3, [r7, #20]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3718      	adds	r7, #24
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	2400072c 	.word	0x2400072c
 800cfe4:	24000708 	.word	0x24000708
 800cfe8:	240006bc 	.word	0x240006bc
 800cfec:	240006c0 	.word	0x240006c0
 800cff0:	2400071c 	.word	0x2400071c
 800cff4:	24000724 	.word	0x24000724
 800cff8:	2400070c 	.word	0x2400070c
 800cffc:	24000608 	.word	0x24000608
 800d000:	24000604 	.word	0x24000604
 800d004:	24000718 	.word	0x24000718
 800d008:	24000714 	.word	0x24000714

0800d00c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d00c:	b480      	push	{r7}
 800d00e:	b087      	sub	sp, #28
 800d010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d012:	4b2a      	ldr	r3, [pc, #168]	@ (800d0bc <vTaskSwitchContext+0xb0>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d01a:	4b29      	ldr	r3, [pc, #164]	@ (800d0c0 <vTaskSwitchContext+0xb4>)
 800d01c:	2201      	movs	r2, #1
 800d01e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d020:	e045      	b.n	800d0ae <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800d022:	4b27      	ldr	r3, [pc, #156]	@ (800d0c0 <vTaskSwitchContext+0xb4>)
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d028:	4b26      	ldr	r3, [pc, #152]	@ (800d0c4 <vTaskSwitchContext+0xb8>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	fab3 f383 	clz	r3, r3
 800d034:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d036:	7afb      	ldrb	r3, [r7, #11]
 800d038:	f1c3 031f 	rsb	r3, r3, #31
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	4922      	ldr	r1, [pc, #136]	@ (800d0c8 <vTaskSwitchContext+0xbc>)
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	4613      	mov	r3, r2
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	4413      	add	r3, r2
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	440b      	add	r3, r1
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10b      	bne.n	800d06a <vTaskSwitchContext+0x5e>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	607b      	str	r3, [r7, #4]
}
 800d064:	bf00      	nop
 800d066:	bf00      	nop
 800d068:	e7fd      	b.n	800d066 <vTaskSwitchContext+0x5a>
 800d06a:	697a      	ldr	r2, [r7, #20]
 800d06c:	4613      	mov	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4a14      	ldr	r2, [pc, #80]	@ (800d0c8 <vTaskSwitchContext+0xbc>)
 800d076:	4413      	add	r3, r2
 800d078:	613b      	str	r3, [r7, #16]
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	605a      	str	r2, [r3, #4]
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	3308      	adds	r3, #8
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d104      	bne.n	800d09a <vTaskSwitchContext+0x8e>
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	605a      	str	r2, [r3, #4]
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d0cc <vTaskSwitchContext+0xc0>)
 800d0a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d0a4:	4b09      	ldr	r3, [pc, #36]	@ (800d0cc <vTaskSwitchContext+0xc0>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	334c      	adds	r3, #76	@ 0x4c
 800d0aa:	4a09      	ldr	r2, [pc, #36]	@ (800d0d0 <vTaskSwitchContext+0xc4>)
 800d0ac:	6013      	str	r3, [r2, #0]
}
 800d0ae:	bf00      	nop
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	2400072c 	.word	0x2400072c
 800d0c0:	24000718 	.word	0x24000718
 800d0c4:	2400070c 	.word	0x2400070c
 800d0c8:	24000608 	.word	0x24000608
 800d0cc:	24000604 	.word	0x24000604
 800d0d0:	24000108 	.word	0x24000108

0800d0d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0dc:	f000 f852 	bl	800d184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0e0:	4b06      	ldr	r3, [pc, #24]	@ (800d0fc <prvIdleTask+0x28>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d9f9      	bls.n	800d0dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0e8:	4b05      	ldr	r3, [pc, #20]	@ (800d100 <prvIdleTask+0x2c>)
 800d0ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0ee:	601a      	str	r2, [r3, #0]
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d0f8:	e7f0      	b.n	800d0dc <prvIdleTask+0x8>
 800d0fa:	bf00      	nop
 800d0fc:	24000608 	.word	0x24000608
 800d100:	e000ed04 	.word	0xe000ed04

0800d104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d10a:	2300      	movs	r3, #0
 800d10c:	607b      	str	r3, [r7, #4]
 800d10e:	e00c      	b.n	800d12a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	4613      	mov	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4a12      	ldr	r2, [pc, #72]	@ (800d164 <prvInitialiseTaskLists+0x60>)
 800d11c:	4413      	add	r3, r2
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff fb03 	bl	800c72a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3301      	adds	r3, #1
 800d128:	607b      	str	r3, [r7, #4]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b06      	cmp	r3, #6
 800d12e:	d9ef      	bls.n	800d110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d130:	480d      	ldr	r0, [pc, #52]	@ (800d168 <prvInitialiseTaskLists+0x64>)
 800d132:	f7ff fafa 	bl	800c72a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d136:	480d      	ldr	r0, [pc, #52]	@ (800d16c <prvInitialiseTaskLists+0x68>)
 800d138:	f7ff faf7 	bl	800c72a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d13c:	480c      	ldr	r0, [pc, #48]	@ (800d170 <prvInitialiseTaskLists+0x6c>)
 800d13e:	f7ff faf4 	bl	800c72a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d142:	480c      	ldr	r0, [pc, #48]	@ (800d174 <prvInitialiseTaskLists+0x70>)
 800d144:	f7ff faf1 	bl	800c72a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d148:	480b      	ldr	r0, [pc, #44]	@ (800d178 <prvInitialiseTaskLists+0x74>)
 800d14a:	f7ff faee 	bl	800c72a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d14e:	4b0b      	ldr	r3, [pc, #44]	@ (800d17c <prvInitialiseTaskLists+0x78>)
 800d150:	4a05      	ldr	r2, [pc, #20]	@ (800d168 <prvInitialiseTaskLists+0x64>)
 800d152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d154:	4b0a      	ldr	r3, [pc, #40]	@ (800d180 <prvInitialiseTaskLists+0x7c>)
 800d156:	4a05      	ldr	r2, [pc, #20]	@ (800d16c <prvInitialiseTaskLists+0x68>)
 800d158:	601a      	str	r2, [r3, #0]
}
 800d15a:	bf00      	nop
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	24000608 	.word	0x24000608
 800d168:	24000694 	.word	0x24000694
 800d16c:	240006a8 	.word	0x240006a8
 800d170:	240006c4 	.word	0x240006c4
 800d174:	240006d8 	.word	0x240006d8
 800d178:	240006f0 	.word	0x240006f0
 800d17c:	240006bc 	.word	0x240006bc
 800d180:	240006c0 	.word	0x240006c0

0800d184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d18a:	e019      	b.n	800d1c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d18c:	f000 fa14 	bl	800d5b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d190:	4b10      	ldr	r3, [pc, #64]	@ (800d1d4 <prvCheckTasksWaitingTermination+0x50>)
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	3304      	adds	r3, #4
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fb4e 	bl	800c83e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d1d8 <prvCheckTasksWaitingTermination+0x54>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	4a0b      	ldr	r2, [pc, #44]	@ (800d1d8 <prvCheckTasksWaitingTermination+0x54>)
 800d1aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d1dc <prvCheckTasksWaitingTermination+0x58>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	4a0a      	ldr	r2, [pc, #40]	@ (800d1dc <prvCheckTasksWaitingTermination+0x58>)
 800d1b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1b6:	f000 fa31 	bl	800d61c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f810 	bl	800d1e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1c0:	4b06      	ldr	r3, [pc, #24]	@ (800d1dc <prvCheckTasksWaitingTermination+0x58>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1e1      	bne.n	800d18c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1c8:	bf00      	nop
 800d1ca:	bf00      	nop
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	240006d8 	.word	0x240006d8
 800d1d8:	24000704 	.word	0x24000704
 800d1dc:	240006ec 	.word	0x240006ec

0800d1e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	334c      	adds	r3, #76	@ 0x4c
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f001 f9d3 	bl	800e598 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d108      	bne.n	800d20e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fb87 	bl	800d914 <vPortFree>
				vPortFree( pxTCB );
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fb84 	bl	800d914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d20c:	e019      	b.n	800d242 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d214:	2b01      	cmp	r3, #1
 800d216:	d103      	bne.n	800d220 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fb7b 	bl	800d914 <vPortFree>
	}
 800d21e:	e010      	b.n	800d242 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d226:	2b02      	cmp	r3, #2
 800d228:	d00b      	beq.n	800d242 <prvDeleteTCB+0x62>
	__asm volatile
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	60fb      	str	r3, [r7, #12]
}
 800d23c:	bf00      	nop
 800d23e:	bf00      	nop
 800d240:	e7fd      	b.n	800d23e <prvDeleteTCB+0x5e>
	}
 800d242:	bf00      	nop
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d252:	4b0c      	ldr	r3, [pc, #48]	@ (800d284 <prvResetNextTaskUnblockTime+0x38>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d104      	bne.n	800d266 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d25c:	4b0a      	ldr	r3, [pc, #40]	@ (800d288 <prvResetNextTaskUnblockTime+0x3c>)
 800d25e:	f04f 32ff 	mov.w	r2, #4294967295
 800d262:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d264:	e008      	b.n	800d278 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d266:	4b07      	ldr	r3, [pc, #28]	@ (800d284 <prvResetNextTaskUnblockTime+0x38>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	4a04      	ldr	r2, [pc, #16]	@ (800d288 <prvResetNextTaskUnblockTime+0x3c>)
 800d276:	6013      	str	r3, [r2, #0]
}
 800d278:	bf00      	nop
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	240006bc 	.word	0x240006bc
 800d288:	24000724 	.word	0x24000724

0800d28c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d296:	4b29      	ldr	r3, [pc, #164]	@ (800d33c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d29c:	4b28      	ldr	r3, [pc, #160]	@ (800d340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff facb 	bl	800c83e <uxListRemove>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10b      	bne.n	800d2c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d2ae:	4b24      	ldr	r3, [pc, #144]	@ (800d340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ba:	43da      	mvns	r2, r3
 800d2bc:	4b21      	ldr	r3, [pc, #132]	@ (800d344 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	4a20      	ldr	r2, [pc, #128]	@ (800d344 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d2c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2cc:	d10a      	bne.n	800d2e4 <prvAddCurrentTaskToDelayedList+0x58>
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d007      	beq.n	800d2e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2d4:	4b1a      	ldr	r3, [pc, #104]	@ (800d340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3304      	adds	r3, #4
 800d2da:	4619      	mov	r1, r3
 800d2dc:	481a      	ldr	r0, [pc, #104]	@ (800d348 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d2de:	f7ff fa51 	bl	800c784 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d2e2:	e026      	b.n	800d332 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2ec:	4b14      	ldr	r3, [pc, #80]	@ (800d340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d209      	bcs.n	800d310 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2fc:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	4b0f      	ldr	r3, [pc, #60]	@ (800d340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3304      	adds	r3, #4
 800d306:	4619      	mov	r1, r3
 800d308:	4610      	mov	r0, r2
 800d30a:	f7ff fa5f 	bl	800c7cc <vListInsert>
}
 800d30e:	e010      	b.n	800d332 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d310:	4b0f      	ldr	r3, [pc, #60]	@ (800d350 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	4b0a      	ldr	r3, [pc, #40]	@ (800d340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3304      	adds	r3, #4
 800d31a:	4619      	mov	r1, r3
 800d31c:	4610      	mov	r0, r2
 800d31e:	f7ff fa55 	bl	800c7cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d322:	4b0c      	ldr	r3, [pc, #48]	@ (800d354 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d202      	bcs.n	800d332 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d32c:	4a09      	ldr	r2, [pc, #36]	@ (800d354 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6013      	str	r3, [r2, #0]
}
 800d332:	bf00      	nop
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	24000708 	.word	0x24000708
 800d340:	24000604 	.word	0x24000604
 800d344:	2400070c 	.word	0x2400070c
 800d348:	240006f0 	.word	0x240006f0
 800d34c:	240006c0 	.word	0x240006c0
 800d350:	240006bc 	.word	0x240006bc
 800d354:	24000724 	.word	0x24000724

0800d358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3b04      	subs	r3, #4
 800d368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3b04      	subs	r3, #4
 800d376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f023 0201 	bic.w	r2, r3, #1
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3b04      	subs	r3, #4
 800d386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d388:	4a0c      	ldr	r2, [pc, #48]	@ (800d3bc <pxPortInitialiseStack+0x64>)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3b14      	subs	r3, #20
 800d392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3b04      	subs	r3, #4
 800d39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f06f 0202 	mvn.w	r2, #2
 800d3a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3b20      	subs	r3, #32
 800d3ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	0800d3c1 	.word	0x0800d3c1

0800d3c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3ca:	4b13      	ldr	r3, [pc, #76]	@ (800d418 <prvTaskExitError+0x58>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d00b      	beq.n	800d3ec <prvTaskExitError+0x2c>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	60fb      	str	r3, [r7, #12]
}
 800d3e6:	bf00      	nop
 800d3e8:	bf00      	nop
 800d3ea:	e7fd      	b.n	800d3e8 <prvTaskExitError+0x28>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	60bb      	str	r3, [r7, #8]
}
 800d3fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d400:	bf00      	nop
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0fc      	beq.n	800d402 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d408:	bf00      	nop
 800d40a:	bf00      	nop
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	2400009c 	.word	0x2400009c
 800d41c:	00000000 	.word	0x00000000

0800d420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d420:	4b07      	ldr	r3, [pc, #28]	@ (800d440 <pxCurrentTCBConst2>)
 800d422:	6819      	ldr	r1, [r3, #0]
 800d424:	6808      	ldr	r0, [r1, #0]
 800d426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42a:	f380 8809 	msr	PSP, r0
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f04f 0000 	mov.w	r0, #0
 800d436:	f380 8811 	msr	BASEPRI, r0
 800d43a:	4770      	bx	lr
 800d43c:	f3af 8000 	nop.w

0800d440 <pxCurrentTCBConst2>:
 800d440:	24000604 	.word	0x24000604
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop

0800d448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d448:	4808      	ldr	r0, [pc, #32]	@ (800d46c <prvPortStartFirstTask+0x24>)
 800d44a:	6800      	ldr	r0, [r0, #0]
 800d44c:	6800      	ldr	r0, [r0, #0]
 800d44e:	f380 8808 	msr	MSP, r0
 800d452:	f04f 0000 	mov.w	r0, #0
 800d456:	f380 8814 	msr	CONTROL, r0
 800d45a:	b662      	cpsie	i
 800d45c:	b661      	cpsie	f
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	df00      	svc	0
 800d468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d46a:	bf00      	nop
 800d46c:	e000ed08 	.word	0xe000ed08

0800d470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d476:	4b47      	ldr	r3, [pc, #284]	@ (800d594 <xPortStartScheduler+0x124>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a47      	ldr	r2, [pc, #284]	@ (800d598 <xPortStartScheduler+0x128>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d10b      	bne.n	800d498 <xPortStartScheduler+0x28>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	60fb      	str	r3, [r7, #12]
}
 800d492:	bf00      	nop
 800d494:	bf00      	nop
 800d496:	e7fd      	b.n	800d494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d498:	4b3e      	ldr	r3, [pc, #248]	@ (800d594 <xPortStartScheduler+0x124>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a3f      	ldr	r2, [pc, #252]	@ (800d59c <xPortStartScheduler+0x12c>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d10b      	bne.n	800d4ba <xPortStartScheduler+0x4a>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	613b      	str	r3, [r7, #16]
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop
 800d4b8:	e7fd      	b.n	800d4b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4ba:	4b39      	ldr	r3, [pc, #228]	@ (800d5a0 <xPortStartScheduler+0x130>)
 800d4bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	22ff      	movs	r2, #255	@ 0xff
 800d4ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	4b31      	ldr	r3, [pc, #196]	@ (800d5a4 <xPortStartScheduler+0x134>)
 800d4e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d4e2:	4b31      	ldr	r3, [pc, #196]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d4e4:	2207      	movs	r2, #7
 800d4e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4e8:	e009      	b.n	800d4fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	4a2d      	ldr	r2, [pc, #180]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d4f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4f4:	78fb      	ldrb	r3, [r7, #3]
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4fe:	78fb      	ldrb	r3, [r7, #3]
 800d500:	b2db      	uxtb	r3, r3
 800d502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d506:	2b80      	cmp	r3, #128	@ 0x80
 800d508:	d0ef      	beq.n	800d4ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d50a:	4b27      	ldr	r3, [pc, #156]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f1c3 0307 	rsb	r3, r3, #7
 800d512:	2b04      	cmp	r3, #4
 800d514:	d00b      	beq.n	800d52e <xPortStartScheduler+0xbe>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	60bb      	str	r3, [r7, #8]
}
 800d528:	bf00      	nop
 800d52a:	bf00      	nop
 800d52c:	e7fd      	b.n	800d52a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d52e:	4b1e      	ldr	r3, [pc, #120]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	021b      	lsls	r3, r3, #8
 800d534:	4a1c      	ldr	r2, [pc, #112]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d538:	4b1b      	ldr	r3, [pc, #108]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d540:	4a19      	ldr	r2, [pc, #100]	@ (800d5a8 <xPortStartScheduler+0x138>)
 800d542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	b2da      	uxtb	r2, r3
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d54c:	4b17      	ldr	r3, [pc, #92]	@ (800d5ac <xPortStartScheduler+0x13c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a16      	ldr	r2, [pc, #88]	@ (800d5ac <xPortStartScheduler+0x13c>)
 800d552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d558:	4b14      	ldr	r3, [pc, #80]	@ (800d5ac <xPortStartScheduler+0x13c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a13      	ldr	r2, [pc, #76]	@ (800d5ac <xPortStartScheduler+0x13c>)
 800d55e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d564:	f000 f8da 	bl	800d71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d568:	4b11      	ldr	r3, [pc, #68]	@ (800d5b0 <xPortStartScheduler+0x140>)
 800d56a:	2200      	movs	r2, #0
 800d56c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d56e:	f000 f8f9 	bl	800d764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d572:	4b10      	ldr	r3, [pc, #64]	@ (800d5b4 <xPortStartScheduler+0x144>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a0f      	ldr	r2, [pc, #60]	@ (800d5b4 <xPortStartScheduler+0x144>)
 800d578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d57c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d57e:	f7ff ff63 	bl	800d448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d582:	f7ff fd43 	bl	800d00c <vTaskSwitchContext>
	prvTaskExitError();
 800d586:	f7ff ff1b 	bl	800d3c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	e000ed00 	.word	0xe000ed00
 800d598:	410fc271 	.word	0x410fc271
 800d59c:	410fc270 	.word	0x410fc270
 800d5a0:	e000e400 	.word	0xe000e400
 800d5a4:	24000730 	.word	0x24000730
 800d5a8:	24000734 	.word	0x24000734
 800d5ac:	e000ed20 	.word	0xe000ed20
 800d5b0:	2400009c 	.word	0x2400009c
 800d5b4:	e000ef34 	.word	0xe000ef34

0800d5b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	607b      	str	r3, [r7, #4]
}
 800d5d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5d2:	4b10      	ldr	r3, [pc, #64]	@ (800d614 <vPortEnterCritical+0x5c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	4a0e      	ldr	r2, [pc, #56]	@ (800d614 <vPortEnterCritical+0x5c>)
 800d5da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d5dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d614 <vPortEnterCritical+0x5c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d110      	bne.n	800d606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d618 <vPortEnterCritical+0x60>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00b      	beq.n	800d606 <vPortEnterCritical+0x4e>
	__asm volatile
 800d5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	603b      	str	r3, [r7, #0]
}
 800d600:	bf00      	nop
 800d602:	bf00      	nop
 800d604:	e7fd      	b.n	800d602 <vPortEnterCritical+0x4a>
	}
}
 800d606:	bf00      	nop
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	2400009c 	.word	0x2400009c
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d622:	4b12      	ldr	r3, [pc, #72]	@ (800d66c <vPortExitCritical+0x50>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10b      	bne.n	800d642 <vPortExitCritical+0x26>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	607b      	str	r3, [r7, #4]
}
 800d63c:	bf00      	nop
 800d63e:	bf00      	nop
 800d640:	e7fd      	b.n	800d63e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d642:	4b0a      	ldr	r3, [pc, #40]	@ (800d66c <vPortExitCritical+0x50>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	3b01      	subs	r3, #1
 800d648:	4a08      	ldr	r2, [pc, #32]	@ (800d66c <vPortExitCritical+0x50>)
 800d64a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d64c:	4b07      	ldr	r3, [pc, #28]	@ (800d66c <vPortExitCritical+0x50>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d105      	bne.n	800d660 <vPortExitCritical+0x44>
 800d654:	2300      	movs	r3, #0
 800d656:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d65e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d660:	bf00      	nop
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr
 800d66c:	2400009c 	.word	0x2400009c

0800d670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d670:	f3ef 8009 	mrs	r0, PSP
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	4b15      	ldr	r3, [pc, #84]	@ (800d6d0 <pxCurrentTCBConst>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	f01e 0f10 	tst.w	lr, #16
 800d680:	bf08      	it	eq
 800d682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	6010      	str	r0, [r2, #0]
 800d68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d694:	f380 8811 	msr	BASEPRI, r0
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f7ff fcb4 	bl	800d00c <vTaskSwitchContext>
 800d6a4:	f04f 0000 	mov.w	r0, #0
 800d6a8:	f380 8811 	msr	BASEPRI, r0
 800d6ac:	bc09      	pop	{r0, r3}
 800d6ae:	6819      	ldr	r1, [r3, #0]
 800d6b0:	6808      	ldr	r0, [r1, #0]
 800d6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b6:	f01e 0f10 	tst.w	lr, #16
 800d6ba:	bf08      	it	eq
 800d6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6c0:	f380 8809 	msr	PSP, r0
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w

0800d6d0 <pxCurrentTCBConst>:
 800d6d0:	24000604 	.word	0x24000604
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop

0800d6d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	607b      	str	r3, [r7, #4]
}
 800d6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6f2:	f7ff fbd1 	bl	800ce98 <xTaskIncrementTick>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6fc:	4b06      	ldr	r3, [pc, #24]	@ (800d718 <SysTick_Handler+0x40>)
 800d6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d702:	601a      	str	r2, [r3, #0]
 800d704:	2300      	movs	r3, #0
 800d706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	f383 8811 	msr	BASEPRI, r3
}
 800d70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	e000ed04 	.word	0xe000ed04

0800d71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d71c:	b480      	push	{r7}
 800d71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d720:	4b0b      	ldr	r3, [pc, #44]	@ (800d750 <vPortSetupTimerInterrupt+0x34>)
 800d722:	2200      	movs	r2, #0
 800d724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d726:	4b0b      	ldr	r3, [pc, #44]	@ (800d754 <vPortSetupTimerInterrupt+0x38>)
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d72c:	4b0a      	ldr	r3, [pc, #40]	@ (800d758 <vPortSetupTimerInterrupt+0x3c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a0a      	ldr	r2, [pc, #40]	@ (800d75c <vPortSetupTimerInterrupt+0x40>)
 800d732:	fba2 2303 	umull	r2, r3, r2, r3
 800d736:	099b      	lsrs	r3, r3, #6
 800d738:	4a09      	ldr	r2, [pc, #36]	@ (800d760 <vPortSetupTimerInterrupt+0x44>)
 800d73a:	3b01      	subs	r3, #1
 800d73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d73e:	4b04      	ldr	r3, [pc, #16]	@ (800d750 <vPortSetupTimerInterrupt+0x34>)
 800d740:	2207      	movs	r2, #7
 800d742:	601a      	str	r2, [r3, #0]
}
 800d744:	bf00      	nop
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	e000e010 	.word	0xe000e010
 800d754:	e000e018 	.word	0xe000e018
 800d758:	24000000 	.word	0x24000000
 800d75c:	10624dd3 	.word	0x10624dd3
 800d760:	e000e014 	.word	0xe000e014

0800d764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d774 <vPortEnableVFP+0x10>
 800d768:	6801      	ldr	r1, [r0, #0]
 800d76a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d76e:	6001      	str	r1, [r0, #0]
 800d770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d772:	bf00      	nop
 800d774:	e000ed88 	.word	0xe000ed88

0800d778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08a      	sub	sp, #40	@ 0x28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d780:	2300      	movs	r3, #0
 800d782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d784:	f7ff fadc 	bl	800cd40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d788:	4b5c      	ldr	r3, [pc, #368]	@ (800d8fc <pvPortMalloc+0x184>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d790:	f000 f924 	bl	800d9dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d794:	4b5a      	ldr	r3, [pc, #360]	@ (800d900 <pvPortMalloc+0x188>)
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4013      	ands	r3, r2
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f040 8095 	bne.w	800d8cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d01e      	beq.n	800d7e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d7a8:	2208      	movs	r2, #8
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f003 0307 	and.w	r3, r3, #7
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d015      	beq.n	800d7e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f023 0307 	bic.w	r3, r3, #7
 800d7c0:	3308      	adds	r3, #8
 800d7c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00b      	beq.n	800d7e6 <pvPortMalloc+0x6e>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	617b      	str	r3, [r7, #20]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d06f      	beq.n	800d8cc <pvPortMalloc+0x154>
 800d7ec:	4b45      	ldr	r3, [pc, #276]	@ (800d904 <pvPortMalloc+0x18c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d86a      	bhi.n	800d8cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7f6:	4b44      	ldr	r3, [pc, #272]	@ (800d908 <pvPortMalloc+0x190>)
 800d7f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7fa:	4b43      	ldr	r3, [pc, #268]	@ (800d908 <pvPortMalloc+0x190>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d800:	e004      	b.n	800d80c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d804:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	429a      	cmp	r2, r3
 800d814:	d903      	bls.n	800d81e <pvPortMalloc+0xa6>
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1f1      	bne.n	800d802 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d81e:	4b37      	ldr	r3, [pc, #220]	@ (800d8fc <pvPortMalloc+0x184>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d824:	429a      	cmp	r2, r3
 800d826:	d051      	beq.n	800d8cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2208      	movs	r2, #8
 800d82e:	4413      	add	r3, r2
 800d830:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	6a3b      	ldr	r3, [r7, #32]
 800d838:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	1ad2      	subs	r2, r2, r3
 800d842:	2308      	movs	r3, #8
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	429a      	cmp	r2, r3
 800d848:	d920      	bls.n	800d88c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d84a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4413      	add	r3, r2
 800d850:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	f003 0307 	and.w	r3, r3, #7
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00b      	beq.n	800d874 <pvPortMalloc+0xfc>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	613b      	str	r3, [r7, #16]
}
 800d86e:	bf00      	nop
 800d870:	bf00      	nop
 800d872:	e7fd      	b.n	800d870 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d876:	685a      	ldr	r2, [r3, #4]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	1ad2      	subs	r2, r2, r3
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d886:	69b8      	ldr	r0, [r7, #24]
 800d888:	f000 f90a 	bl	800daa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d88c:	4b1d      	ldr	r3, [pc, #116]	@ (800d904 <pvPortMalloc+0x18c>)
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	4a1b      	ldr	r2, [pc, #108]	@ (800d904 <pvPortMalloc+0x18c>)
 800d898:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d89a:	4b1a      	ldr	r3, [pc, #104]	@ (800d904 <pvPortMalloc+0x18c>)
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	4b1b      	ldr	r3, [pc, #108]	@ (800d90c <pvPortMalloc+0x194>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d203      	bcs.n	800d8ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d8a6:	4b17      	ldr	r3, [pc, #92]	@ (800d904 <pvPortMalloc+0x18c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a18      	ldr	r2, [pc, #96]	@ (800d90c <pvPortMalloc+0x194>)
 800d8ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	685a      	ldr	r2, [r3, #4]
 800d8b2:	4b13      	ldr	r3, [pc, #76]	@ (800d900 <pvPortMalloc+0x188>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	431a      	orrs	r2, r3
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	2200      	movs	r2, #0
 800d8c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d8c2:	4b13      	ldr	r3, [pc, #76]	@ (800d910 <pvPortMalloc+0x198>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	4a11      	ldr	r2, [pc, #68]	@ (800d910 <pvPortMalloc+0x198>)
 800d8ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8cc:	f7ff fa46 	bl	800cd5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00b      	beq.n	800d8f2 <pvPortMalloc+0x17a>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	60fb      	str	r3, [r7, #12]
}
 800d8ec:	bf00      	nop
 800d8ee:	bf00      	nop
 800d8f0:	e7fd      	b.n	800d8ee <pvPortMalloc+0x176>
	return pvReturn;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3728      	adds	r7, #40	@ 0x28
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	24004340 	.word	0x24004340
 800d900:	24004354 	.word	0x24004354
 800d904:	24004344 	.word	0x24004344
 800d908:	24004338 	.word	0x24004338
 800d90c:	24004348 	.word	0x24004348
 800d910:	2400434c 	.word	0x2400434c

0800d914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d04f      	beq.n	800d9c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d926:	2308      	movs	r3, #8
 800d928:	425b      	negs	r3, r3
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	4413      	add	r3, r2
 800d92e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	4b25      	ldr	r3, [pc, #148]	@ (800d9d0 <vPortFree+0xbc>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4013      	ands	r3, r2
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10b      	bne.n	800d95a <vPortFree+0x46>
	__asm volatile
 800d942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d946:	f383 8811 	msr	BASEPRI, r3
 800d94a:	f3bf 8f6f 	isb	sy
 800d94e:	f3bf 8f4f 	dsb	sy
 800d952:	60fb      	str	r3, [r7, #12]
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop
 800d958:	e7fd      	b.n	800d956 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00b      	beq.n	800d97a <vPortFree+0x66>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	60bb      	str	r3, [r7, #8]
}
 800d974:	bf00      	nop
 800d976:	bf00      	nop
 800d978:	e7fd      	b.n	800d976 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	4b14      	ldr	r3, [pc, #80]	@ (800d9d0 <vPortFree+0xbc>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4013      	ands	r3, r2
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01e      	beq.n	800d9c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d11a      	bne.n	800d9c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	685a      	ldr	r2, [r3, #4]
 800d994:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d0 <vPortFree+0xbc>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	43db      	mvns	r3, r3
 800d99a:	401a      	ands	r2, r3
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d9a0:	f7ff f9ce 	bl	800cd40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d4 <vPortFree+0xc0>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	4a09      	ldr	r2, [pc, #36]	@ (800d9d4 <vPortFree+0xc0>)
 800d9b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d9b2:	6938      	ldr	r0, [r7, #16]
 800d9b4:	f000 f874 	bl	800daa0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d9b8:	4b07      	ldr	r3, [pc, #28]	@ (800d9d8 <vPortFree+0xc4>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	4a06      	ldr	r2, [pc, #24]	@ (800d9d8 <vPortFree+0xc4>)
 800d9c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d9c2:	f7ff f9cb 	bl	800cd5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9c6:	bf00      	nop
 800d9c8:	3718      	adds	r7, #24
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	24004354 	.word	0x24004354
 800d9d4:	24004344 	.word	0x24004344
 800d9d8:	24004350 	.word	0x24004350

0800d9dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d9e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9e8:	4b27      	ldr	r3, [pc, #156]	@ (800da88 <prvHeapInit+0xac>)
 800d9ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f003 0307 	and.w	r3, r3, #7
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00c      	beq.n	800da10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	3307      	adds	r3, #7
 800d9fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f023 0307 	bic.w	r3, r3, #7
 800da02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	4a1f      	ldr	r2, [pc, #124]	@ (800da88 <prvHeapInit+0xac>)
 800da0c:	4413      	add	r3, r2
 800da0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da14:	4a1d      	ldr	r2, [pc, #116]	@ (800da8c <prvHeapInit+0xb0>)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da1a:	4b1c      	ldr	r3, [pc, #112]	@ (800da8c <prvHeapInit+0xb0>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	4413      	add	r3, r2
 800da26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da28:	2208      	movs	r2, #8
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	1a9b      	subs	r3, r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f023 0307 	bic.w	r3, r3, #7
 800da36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	4a15      	ldr	r2, [pc, #84]	@ (800da90 <prvHeapInit+0xb4>)
 800da3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da3e:	4b14      	ldr	r3, [pc, #80]	@ (800da90 <prvHeapInit+0xb4>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2200      	movs	r2, #0
 800da44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da46:	4b12      	ldr	r3, [pc, #72]	@ (800da90 <prvHeapInit+0xb4>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2200      	movs	r2, #0
 800da4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da5c:	4b0c      	ldr	r3, [pc, #48]	@ (800da90 <prvHeapInit+0xb4>)
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	4a0a      	ldr	r2, [pc, #40]	@ (800da94 <prvHeapInit+0xb8>)
 800da6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	4a09      	ldr	r2, [pc, #36]	@ (800da98 <prvHeapInit+0xbc>)
 800da72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da74:	4b09      	ldr	r3, [pc, #36]	@ (800da9c <prvHeapInit+0xc0>)
 800da76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800da7a:	601a      	str	r2, [r3, #0]
}
 800da7c:	bf00      	nop
 800da7e:	3714      	adds	r7, #20
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr
 800da88:	24000738 	.word	0x24000738
 800da8c:	24004338 	.word	0x24004338
 800da90:	24004340 	.word	0x24004340
 800da94:	24004348 	.word	0x24004348
 800da98:	24004344 	.word	0x24004344
 800da9c:	24004354 	.word	0x24004354

0800daa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800daa8:	4b28      	ldr	r3, [pc, #160]	@ (800db4c <prvInsertBlockIntoFreeList+0xac>)
 800daaa:	60fb      	str	r3, [r7, #12]
 800daac:	e002      	b.n	800dab4 <prvInsertBlockIntoFreeList+0x14>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d8f7      	bhi.n	800daae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	4413      	add	r3, r2
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d108      	bne.n	800dae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	441a      	add	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	441a      	add	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d118      	bne.n	800db28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	4b15      	ldr	r3, [pc, #84]	@ (800db50 <prvInsertBlockIntoFreeList+0xb0>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d00d      	beq.n	800db1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	441a      	add	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	e008      	b.n	800db30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db1e:	4b0c      	ldr	r3, [pc, #48]	@ (800db50 <prvInsertBlockIntoFreeList+0xb0>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	e003      	b.n	800db30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	429a      	cmp	r2, r3
 800db36:	d002      	beq.n	800db3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db3e:	bf00      	nop
 800db40:	3714      	adds	r7, #20
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	24004338 	.word	0x24004338
 800db50:	24004340 	.word	0x24004340

0800db54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db58:	2200      	movs	r2, #0
 800db5a:	4913      	ldr	r1, [pc, #76]	@ (800dba8 <MX_USB_DEVICE_Init+0x54>)
 800db5c:	4813      	ldr	r0, [pc, #76]	@ (800dbac <MX_USB_DEVICE_Init+0x58>)
 800db5e:	f7fd fa39 	bl	800afd4 <USBD_Init>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d001      	beq.n	800db6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db68:	f7f3 f856 	bl	8000c18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db6c:	4910      	ldr	r1, [pc, #64]	@ (800dbb0 <MX_USB_DEVICE_Init+0x5c>)
 800db6e:	480f      	ldr	r0, [pc, #60]	@ (800dbac <MX_USB_DEVICE_Init+0x58>)
 800db70:	f7fd fa60 	bl	800b034 <USBD_RegisterClass>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db7a:	f7f3 f84d 	bl	8000c18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db7e:	490d      	ldr	r1, [pc, #52]	@ (800dbb4 <MX_USB_DEVICE_Init+0x60>)
 800db80:	480a      	ldr	r0, [pc, #40]	@ (800dbac <MX_USB_DEVICE_Init+0x58>)
 800db82:	f7fd f997 	bl	800aeb4 <USBD_CDC_RegisterInterface>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db8c:	f7f3 f844 	bl	8000c18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db90:	4806      	ldr	r0, [pc, #24]	@ (800dbac <MX_USB_DEVICE_Init+0x58>)
 800db92:	f7fd fa85 	bl	800b0a0 <USBD_Start>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db9c:	f7f3 f83c 	bl	8000c18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800dba0:	f7f6 feea 	bl	8004978 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dba4:	bf00      	nop
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	240000b4 	.word	0x240000b4
 800dbac:	24004358 	.word	0x24004358
 800dbb0:	2400001c 	.word	0x2400001c
 800dbb4:	240000a0 	.word	0x240000a0

0800dbb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	4905      	ldr	r1, [pc, #20]	@ (800dbd4 <CDC_Init_FS+0x1c>)
 800dbc0:	4805      	ldr	r0, [pc, #20]	@ (800dbd8 <CDC_Init_FS+0x20>)
 800dbc2:	f7fd f991 	bl	800aee8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dbc6:	4905      	ldr	r1, [pc, #20]	@ (800dbdc <CDC_Init_FS+0x24>)
 800dbc8:	4803      	ldr	r0, [pc, #12]	@ (800dbd8 <CDC_Init_FS+0x20>)
 800dbca:	f7fd f9af 	bl	800af2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	24004e34 	.word	0x24004e34
 800dbd8:	24004358 	.word	0x24004358
 800dbdc:	24004634 	.word	0x24004634

0800dbe0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbe4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	6039      	str	r1, [r7, #0]
 800dbfa:	71fb      	strb	r3, [r7, #7]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	2b23      	cmp	r3, #35	@ 0x23
 800dc04:	d84a      	bhi.n	800dc9c <CDC_Control_FS+0xac>
 800dc06:	a201      	add	r2, pc, #4	@ (adr r2, 800dc0c <CDC_Control_FS+0x1c>)
 800dc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc0c:	0800dc9d 	.word	0x0800dc9d
 800dc10:	0800dc9d 	.word	0x0800dc9d
 800dc14:	0800dc9d 	.word	0x0800dc9d
 800dc18:	0800dc9d 	.word	0x0800dc9d
 800dc1c:	0800dc9d 	.word	0x0800dc9d
 800dc20:	0800dc9d 	.word	0x0800dc9d
 800dc24:	0800dc9d 	.word	0x0800dc9d
 800dc28:	0800dc9d 	.word	0x0800dc9d
 800dc2c:	0800dc9d 	.word	0x0800dc9d
 800dc30:	0800dc9d 	.word	0x0800dc9d
 800dc34:	0800dc9d 	.word	0x0800dc9d
 800dc38:	0800dc9d 	.word	0x0800dc9d
 800dc3c:	0800dc9d 	.word	0x0800dc9d
 800dc40:	0800dc9d 	.word	0x0800dc9d
 800dc44:	0800dc9d 	.word	0x0800dc9d
 800dc48:	0800dc9d 	.word	0x0800dc9d
 800dc4c:	0800dc9d 	.word	0x0800dc9d
 800dc50:	0800dc9d 	.word	0x0800dc9d
 800dc54:	0800dc9d 	.word	0x0800dc9d
 800dc58:	0800dc9d 	.word	0x0800dc9d
 800dc5c:	0800dc9d 	.word	0x0800dc9d
 800dc60:	0800dc9d 	.word	0x0800dc9d
 800dc64:	0800dc9d 	.word	0x0800dc9d
 800dc68:	0800dc9d 	.word	0x0800dc9d
 800dc6c:	0800dc9d 	.word	0x0800dc9d
 800dc70:	0800dc9d 	.word	0x0800dc9d
 800dc74:	0800dc9d 	.word	0x0800dc9d
 800dc78:	0800dc9d 	.word	0x0800dc9d
 800dc7c:	0800dc9d 	.word	0x0800dc9d
 800dc80:	0800dc9d 	.word	0x0800dc9d
 800dc84:	0800dc9d 	.word	0x0800dc9d
 800dc88:	0800dc9d 	.word	0x0800dc9d
 800dc8c:	0800dc9d 	.word	0x0800dc9d
 800dc90:	0800dc9d 	.word	0x0800dc9d
 800dc94:	0800dc9d 	.word	0x0800dc9d
 800dc98:	0800dc9d 	.word	0x0800dc9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc9c:	bf00      	nop
  }

  return (USBD_OK);
 800dc9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dcb6:	6879      	ldr	r1, [r7, #4]
 800dcb8:	4805      	ldr	r0, [pc, #20]	@ (800dcd0 <CDC_Receive_FS+0x24>)
 800dcba:	f7fd f937 	bl	800af2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dcbe:	4804      	ldr	r0, [pc, #16]	@ (800dcd0 <CDC_Receive_FS+0x24>)
 800dcc0:	f7fd f952 	bl	800af68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dcc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	24004358 	.word	0x24004358

0800dcd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b087      	sub	sp, #28
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4613      	mov	r3, r2
 800dce0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	371c      	adds	r7, #28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	6039      	str	r1, [r7, #0]
 800dd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2212      	movs	r2, #18
 800dd08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd0a:	4b03      	ldr	r3, [pc, #12]	@ (800dd18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	240000d4 	.word	0x240000d4

0800dd1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2204      	movs	r2, #4
 800dd2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd2e:	4b03      	ldr	r3, [pc, #12]	@ (800dd3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	240000e8 	.word	0x240000e8

0800dd40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	6039      	str	r1, [r7, #0]
 800dd4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd4c:	79fb      	ldrb	r3, [r7, #7]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d105      	bne.n	800dd5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	4907      	ldr	r1, [pc, #28]	@ (800dd74 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd56:	4808      	ldr	r0, [pc, #32]	@ (800dd78 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd58:	f7fe fb7c 	bl	800c454 <USBD_GetString>
 800dd5c:	e004      	b.n	800dd68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd5e:	683a      	ldr	r2, [r7, #0]
 800dd60:	4904      	ldr	r1, [pc, #16]	@ (800dd74 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd62:	4805      	ldr	r0, [pc, #20]	@ (800dd78 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd64:	f7fe fb76 	bl	800c454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd68:	4b02      	ldr	r3, [pc, #8]	@ (800dd74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	24005634 	.word	0x24005634
 800dd78:	0800e7bc 	.word	0x0800e7bc

0800dd7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	6039      	str	r1, [r7, #0]
 800dd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	4904      	ldr	r1, [pc, #16]	@ (800dd9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd8c:	4804      	ldr	r0, [pc, #16]	@ (800dda0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd8e:	f7fe fb61 	bl	800c454 <USBD_GetString>
  return USBD_StrDesc;
 800dd92:	4b02      	ldr	r3, [pc, #8]	@ (800dd9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	24005634 	.word	0x24005634
 800dda0:	0800e7d4 	.word	0x0800e7d4

0800dda4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	221a      	movs	r2, #26
 800ddb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddb6:	f000 f843 	bl	800de40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ddba:	4b02      	ldr	r3, [pc, #8]	@ (800ddc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	240000ec 	.word	0x240000ec

0800ddc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	6039      	str	r1, [r7, #0]
 800ddd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d105      	bne.n	800dde6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	4907      	ldr	r1, [pc, #28]	@ (800ddfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddde:	4808      	ldr	r0, [pc, #32]	@ (800de00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dde0:	f7fe fb38 	bl	800c454 <USBD_GetString>
 800dde4:	e004      	b.n	800ddf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	4904      	ldr	r1, [pc, #16]	@ (800ddfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddea:	4805      	ldr	r0, [pc, #20]	@ (800de00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddec:	f7fe fb32 	bl	800c454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddf0:	4b02      	ldr	r3, [pc, #8]	@ (800ddfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	24005634 	.word	0x24005634
 800de00:	0800e7e8 	.word	0x0800e7e8

0800de04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	6039      	str	r1, [r7, #0]
 800de0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d105      	bne.n	800de22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	4907      	ldr	r1, [pc, #28]	@ (800de38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de1a:	4808      	ldr	r0, [pc, #32]	@ (800de3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de1c:	f7fe fb1a 	bl	800c454 <USBD_GetString>
 800de20:	e004      	b.n	800de2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	4904      	ldr	r1, [pc, #16]	@ (800de38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de26:	4805      	ldr	r0, [pc, #20]	@ (800de3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de28:	f7fe fb14 	bl	800c454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de2c:	4b02      	ldr	r3, [pc, #8]	@ (800de38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	24005634 	.word	0x24005634
 800de3c:	0800e7f4 	.word	0x0800e7f4

0800de40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de46:	4b0f      	ldr	r3, [pc, #60]	@ (800de84 <Get_SerialNum+0x44>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de4c:	4b0e      	ldr	r3, [pc, #56]	@ (800de88 <Get_SerialNum+0x48>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de52:	4b0e      	ldr	r3, [pc, #56]	@ (800de8c <Get_SerialNum+0x4c>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	4413      	add	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d009      	beq.n	800de7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de66:	2208      	movs	r2, #8
 800de68:	4909      	ldr	r1, [pc, #36]	@ (800de90 <Get_SerialNum+0x50>)
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f000 f814 	bl	800de98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de70:	2204      	movs	r2, #4
 800de72:	4908      	ldr	r1, [pc, #32]	@ (800de94 <Get_SerialNum+0x54>)
 800de74:	68b8      	ldr	r0, [r7, #8]
 800de76:	f000 f80f 	bl	800de98 <IntToUnicode>
  }
}
 800de7a:	bf00      	nop
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	1ff1e800 	.word	0x1ff1e800
 800de88:	1ff1e804 	.word	0x1ff1e804
 800de8c:	1ff1e808 	.word	0x1ff1e808
 800de90:	240000ee 	.word	0x240000ee
 800de94:	240000fe 	.word	0x240000fe

0800de98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de98:	b480      	push	{r7}
 800de9a:	b087      	sub	sp, #28
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	4613      	mov	r3, r2
 800dea4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800deaa:	2300      	movs	r3, #0
 800deac:	75fb      	strb	r3, [r7, #23]
 800deae:	e027      	b.n	800df00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	0f1b      	lsrs	r3, r3, #28
 800deb4:	2b09      	cmp	r3, #9
 800deb6:	d80b      	bhi.n	800ded0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	0f1b      	lsrs	r3, r3, #28
 800debc:	b2da      	uxtb	r2, r3
 800debe:	7dfb      	ldrb	r3, [r7, #23]
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	4619      	mov	r1, r3
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	440b      	add	r3, r1
 800dec8:	3230      	adds	r2, #48	@ 0x30
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]
 800dece:	e00a      	b.n	800dee6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	0f1b      	lsrs	r3, r3, #28
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	4619      	mov	r1, r3
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	440b      	add	r3, r1
 800dee0:	3237      	adds	r2, #55	@ 0x37
 800dee2:	b2d2      	uxtb	r2, r2
 800dee4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	011b      	lsls	r3, r3, #4
 800deea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800deec:	7dfb      	ldrb	r3, [r7, #23]
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	3301      	adds	r3, #1
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	4413      	add	r3, r2
 800def6:	2200      	movs	r2, #0
 800def8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800defa:	7dfb      	ldrb	r3, [r7, #23]
 800defc:	3301      	adds	r3, #1
 800defe:	75fb      	strb	r3, [r7, #23]
 800df00:	7dfa      	ldrb	r2, [r7, #23]
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	429a      	cmp	r2, r3
 800df06:	d3d3      	bcc.n	800deb0 <IntToUnicode+0x18>
  }
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
	...

0800df18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b0ba      	sub	sp, #232	@ 0xe8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
 800df28:	605a      	str	r2, [r3, #4]
 800df2a:	609a      	str	r2, [r3, #8]
 800df2c:	60da      	str	r2, [r3, #12]
 800df2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800df30:	f107 0310 	add.w	r3, r7, #16
 800df34:	22c0      	movs	r2, #192	@ 0xc0
 800df36:	2100      	movs	r1, #0
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fb25 	bl	800e588 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a2c      	ldr	r2, [pc, #176]	@ (800dff4 <HAL_PCD_MspInit+0xdc>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d151      	bne.n	800dfec <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800df48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800df4c:	f04f 0300 	mov.w	r3, #0
 800df50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800df54:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800df58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800df5c:	f107 0310 	add.w	r3, r7, #16
 800df60:	4618      	mov	r0, r3
 800df62:	f7f7 fd41 	bl	80059e8 <HAL_RCCEx_PeriphCLKConfig>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800df6c:	f7f2 fe54 	bl	8000c18 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800df70:	f7f6 fd02 	bl	8004978 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df74:	4b20      	ldr	r3, [pc, #128]	@ (800dff8 <HAL_PCD_MspInit+0xe0>)
 800df76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df7a:	4a1f      	ldr	r2, [pc, #124]	@ (800dff8 <HAL_PCD_MspInit+0xe0>)
 800df7c:	f043 0301 	orr.w	r3, r3, #1
 800df80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800df84:	4b1c      	ldr	r3, [pc, #112]	@ (800dff8 <HAL_PCD_MspInit+0xe0>)
 800df86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	60fb      	str	r3, [r7, #12]
 800df90:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800df92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800df96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df9a:	2302      	movs	r3, #2
 800df9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800dfac:	230a      	movs	r3, #10
 800dfae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	4810      	ldr	r0, [pc, #64]	@ (800dffc <HAL_PCD_MspInit+0xe4>)
 800dfba:	f7f5 f81f 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dfbe:	4b0e      	ldr	r3, [pc, #56]	@ (800dff8 <HAL_PCD_MspInit+0xe0>)
 800dfc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800dfc4:	4a0c      	ldr	r2, [pc, #48]	@ (800dff8 <HAL_PCD_MspInit+0xe0>)
 800dfc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dfca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800dfce:	4b0a      	ldr	r3, [pc, #40]	@ (800dff8 <HAL_PCD_MspInit+0xe0>)
 800dfd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800dfd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dfd8:	60bb      	str	r3, [r7, #8]
 800dfda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dfdc:	2200      	movs	r2, #0
 800dfde:	2105      	movs	r1, #5
 800dfe0:	2065      	movs	r0, #101	@ 0x65
 800dfe2:	f7f3 faa9 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dfe6:	2065      	movs	r0, #101	@ 0x65
 800dfe8:	f7f3 fac0 	bl	800156c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dfec:	bf00      	nop
 800dfee:	37e8      	adds	r7, #232	@ 0xe8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	40080000 	.word	0x40080000
 800dff8:	58024400 	.word	0x58024400
 800dffc:	58020000 	.word	0x58020000

0800e000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e014:	4619      	mov	r1, r3
 800e016:	4610      	mov	r0, r2
 800e018:	f7fd f88f 	bl	800b13a <USBD_LL_SetupStage>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e036:	78fa      	ldrb	r2, [r7, #3]
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	4613      	mov	r3, r2
 800e03c:	00db      	lsls	r3, r3, #3
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	440b      	add	r3, r1
 800e044:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	78fb      	ldrb	r3, [r7, #3]
 800e04c:	4619      	mov	r1, r3
 800e04e:	f7fd f8c9 	bl	800b1e4 <USBD_LL_DataOutStage>
}
 800e052:	bf00      	nop
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	460b      	mov	r3, r1
 800e064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e06c:	78fa      	ldrb	r2, [r7, #3]
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	4613      	mov	r3, r2
 800e072:	00db      	lsls	r3, r3, #3
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	440b      	add	r3, r1
 800e07a:	3320      	adds	r3, #32
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	78fb      	ldrb	r3, [r7, #3]
 800e080:	4619      	mov	r1, r3
 800e082:	f7fd f962 	bl	800b34a <USBD_LL_DataInStage>
}
 800e086:	bf00      	nop
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b082      	sub	sp, #8
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fd fa9c 	bl	800b5da <USBD_LL_SOF>
}
 800e0a2:	bf00      	nop
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	79db      	ldrb	r3, [r3, #7]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d102      	bne.n	800e0c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	73fb      	strb	r3, [r7, #15]
 800e0c2:	e008      	b.n	800e0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	79db      	ldrb	r3, [r3, #7]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d102      	bne.n	800e0d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	73fb      	strb	r3, [r7, #15]
 800e0d0:	e001      	b.n	800e0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e0d2:	f7f2 fda1 	bl	8000c18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e0dc:	7bfa      	ldrb	r2, [r7, #15]
 800e0de:	4611      	mov	r1, r2
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fd fa36 	bl	800b552 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fd f9de 	bl	800b4ae <USBD_LL_Reset>
}
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
	...

0800e0fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fd fa31 	bl	800b572 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	6812      	ldr	r2, [r2, #0]
 800e11e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e122:	f043 0301 	orr.w	r3, r3, #1
 800e126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	7adb      	ldrb	r3, [r3, #11]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d005      	beq.n	800e13c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e130:	4b04      	ldr	r3, [pc, #16]	@ (800e144 <HAL_PCD_SuspendCallback+0x48>)
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	4a03      	ldr	r2, [pc, #12]	@ (800e144 <HAL_PCD_SuspendCallback+0x48>)
 800e136:	f043 0306 	orr.w	r3, r3, #6
 800e13a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	e000ed00 	.word	0xe000ed00

0800e148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e156:	4618      	mov	r0, r3
 800e158:	f7fd fa27 	bl	800b5aa <USBD_LL_Resume>
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e176:	78fa      	ldrb	r2, [r7, #3]
 800e178:	4611      	mov	r1, r2
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fd fa7f 	bl	800b67e <USBD_LL_IsoOUTIncomplete>
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fd fa3b 	bl	800b61a <USBD_LL_IsoINIncomplete>
}
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fd fa91 	bl	800b6e2 <USBD_LL_DevConnected>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fd fa8e 	bl	800b6f8 <USBD_LL_DevDisconnected>
}
 800e1dc:	bf00      	nop
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d13e      	bne.n	800e272 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e1f4:	4a21      	ldr	r2, [pc, #132]	@ (800e27c <USBD_LL_Init+0x98>)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a1f      	ldr	r2, [pc, #124]	@ (800e27c <USBD_LL_Init+0x98>)
 800e200:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e204:	4b1d      	ldr	r3, [pc, #116]	@ (800e27c <USBD_LL_Init+0x98>)
 800e206:	4a1e      	ldr	r2, [pc, #120]	@ (800e280 <USBD_LL_Init+0x9c>)
 800e208:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e20a:	4b1c      	ldr	r3, [pc, #112]	@ (800e27c <USBD_LL_Init+0x98>)
 800e20c:	2209      	movs	r2, #9
 800e20e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e210:	4b1a      	ldr	r3, [pc, #104]	@ (800e27c <USBD_LL_Init+0x98>)
 800e212:	2202      	movs	r2, #2
 800e214:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e216:	4b19      	ldr	r3, [pc, #100]	@ (800e27c <USBD_LL_Init+0x98>)
 800e218:	2200      	movs	r2, #0
 800e21a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e21c:	4b17      	ldr	r3, [pc, #92]	@ (800e27c <USBD_LL_Init+0x98>)
 800e21e:	2202      	movs	r2, #2
 800e220:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e222:	4b16      	ldr	r3, [pc, #88]	@ (800e27c <USBD_LL_Init+0x98>)
 800e224:	2200      	movs	r2, #0
 800e226:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e228:	4b14      	ldr	r3, [pc, #80]	@ (800e27c <USBD_LL_Init+0x98>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e22e:	4b13      	ldr	r3, [pc, #76]	@ (800e27c <USBD_LL_Init+0x98>)
 800e230:	2200      	movs	r2, #0
 800e232:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e234:	4b11      	ldr	r3, [pc, #68]	@ (800e27c <USBD_LL_Init+0x98>)
 800e236:	2200      	movs	r2, #0
 800e238:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e23a:	4b10      	ldr	r3, [pc, #64]	@ (800e27c <USBD_LL_Init+0x98>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e240:	4b0e      	ldr	r3, [pc, #56]	@ (800e27c <USBD_LL_Init+0x98>)
 800e242:	2200      	movs	r2, #0
 800e244:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e246:	480d      	ldr	r0, [pc, #52]	@ (800e27c <USBD_LL_Init+0x98>)
 800e248:	f7f5 f8bb 	bl	80033c2 <HAL_PCD_Init>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d001      	beq.n	800e256 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e252:	f7f2 fce1 	bl	8000c18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e256:	2180      	movs	r1, #128	@ 0x80
 800e258:	4808      	ldr	r0, [pc, #32]	@ (800e27c <USBD_LL_Init+0x98>)
 800e25a:	f7f6 fb12 	bl	8004882 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e25e:	2240      	movs	r2, #64	@ 0x40
 800e260:	2100      	movs	r1, #0
 800e262:	4806      	ldr	r0, [pc, #24]	@ (800e27c <USBD_LL_Init+0x98>)
 800e264:	f7f6 fac6 	bl	80047f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e268:	2280      	movs	r2, #128	@ 0x80
 800e26a:	2101      	movs	r1, #1
 800e26c:	4803      	ldr	r0, [pc, #12]	@ (800e27c <USBD_LL_Init+0x98>)
 800e26e:	f7f6 fac1 	bl	80047f4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	24005834 	.word	0x24005834
 800e280:	40080000 	.word	0x40080000

0800e284 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f5 f99d 	bl	80035da <HAL_PCD_Start>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f942 	bl	800e530 <USBD_Get_USB_Status>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b084      	sub	sp, #16
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	4608      	mov	r0, r1
 800e2c4:	4611      	mov	r1, r2
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	70fb      	strb	r3, [r7, #3]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70bb      	strb	r3, [r7, #2]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2e2:	78bb      	ldrb	r3, [r7, #2]
 800e2e4:	883a      	ldrh	r2, [r7, #0]
 800e2e6:	78f9      	ldrb	r1, [r7, #3]
 800e2e8:	f7f5 fe9e 	bl	8004028 <HAL_PCD_EP_Open>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f000 f91c 	bl	800e530 <USBD_Get_USB_Status>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b084      	sub	sp, #16
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	460b      	mov	r3, r1
 800e310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e312:	2300      	movs	r3, #0
 800e314:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e320:	78fa      	ldrb	r2, [r7, #3]
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f7f5 fee9 	bl	80040fc <HAL_PCD_EP_Close>
 800e32a:	4603      	mov	r3, r0
 800e32c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
 800e330:	4618      	mov	r0, r3
 800e332:	f000 f8fd 	bl	800e530 <USBD_Get_USB_Status>
 800e336:	4603      	mov	r3, r0
 800e338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3710      	adds	r7, #16
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	460b      	mov	r3, r1
 800e34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e354:	2300      	movs	r3, #0
 800e356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e35e:	78fa      	ldrb	r2, [r7, #3]
 800e360:	4611      	mov	r1, r2
 800e362:	4618      	mov	r0, r3
 800e364:	f7f5 ffa1 	bl	80042aa <HAL_PCD_EP_SetStall>
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 f8de 	bl	800e530 <USBD_Get_USB_Status>
 800e374:	4603      	mov	r3, r0
 800e376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e378:	7bbb      	ldrb	r3, [r7, #14]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	460b      	mov	r3, r1
 800e38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e392:	2300      	movs	r3, #0
 800e394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e39c:	78fa      	ldrb	r2, [r7, #3]
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7f5 ffe5 	bl	8004370 <HAL_PCD_EP_ClrStall>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f000 f8bf 	bl	800e530 <USBD_Get_USB_Status>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e3d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	da0b      	bge.n	800e3f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e3dc:	78fb      	ldrb	r3, [r7, #3]
 800e3de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3e2:	68f9      	ldr	r1, [r7, #12]
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	00db      	lsls	r3, r3, #3
 800e3e8:	4413      	add	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	440b      	add	r3, r1
 800e3ee:	3316      	adds	r3, #22
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	e00b      	b.n	800e40c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3fa:	68f9      	ldr	r1, [r7, #12]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	00db      	lsls	r3, r3, #3
 800e400:	4413      	add	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	440b      	add	r3, r1
 800e406:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e40a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3714      	adds	r7, #20
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	460b      	mov	r3, r1
 800e422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e428:	2300      	movs	r3, #0
 800e42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e432:	78fa      	ldrb	r2, [r7, #3]
 800e434:	4611      	mov	r1, r2
 800e436:	4618      	mov	r0, r3
 800e438:	f7f5 fdd2 	bl	8003fe0 <HAL_PCD_SetAddress>
 800e43c:	4603      	mov	r3, r0
 800e43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	4618      	mov	r0, r3
 800e444:	f000 f874 	bl	800e530 <USBD_Get_USB_Status>
 800e448:	4603      	mov	r3, r0
 800e44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b086      	sub	sp, #24
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	60f8      	str	r0, [r7, #12]
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	603b      	str	r3, [r7, #0]
 800e462:	460b      	mov	r3, r1
 800e464:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e474:	7af9      	ldrb	r1, [r7, #11]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	f7f5 fedc 	bl	8004236 <HAL_PCD_EP_Transmit>
 800e47e:	4603      	mov	r3, r0
 800e480:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e482:	7dfb      	ldrb	r3, [r7, #23]
 800e484:	4618      	mov	r0, r3
 800e486:	f000 f853 	bl	800e530 <USBD_Get_USB_Status>
 800e48a:	4603      	mov	r3, r0
 800e48c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e48e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b086      	sub	sp, #24
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	607a      	str	r2, [r7, #4]
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4b6:	7af9      	ldrb	r1, [r7, #11]
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	f7f5 fe68 	bl	8004190 <HAL_PCD_EP_Receive>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 f832 	bl	800e530 <USBD_Get_USB_Status>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4ec:	78fa      	ldrb	r2, [r7, #3]
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7f5 fe88 	bl	8004206 <HAL_PCD_EP_GetRxCount>
 800e4f6:	4603      	mov	r3, r0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e508:	4b03      	ldr	r3, [pc, #12]	@ (800e518 <USBD_static_malloc+0x18>)
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	24005d18 	.word	0x24005d18

0800e51c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e524:	bf00      	nop
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	4603      	mov	r3, r0
 800e538:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e53a:	2300      	movs	r3, #0
 800e53c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	2b03      	cmp	r3, #3
 800e542:	d817      	bhi.n	800e574 <USBD_Get_USB_Status+0x44>
 800e544:	a201      	add	r2, pc, #4	@ (adr r2, 800e54c <USBD_Get_USB_Status+0x1c>)
 800e546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54a:	bf00      	nop
 800e54c:	0800e55d 	.word	0x0800e55d
 800e550:	0800e563 	.word	0x0800e563
 800e554:	0800e569 	.word	0x0800e569
 800e558:	0800e56f 	.word	0x0800e56f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e55c:	2300      	movs	r3, #0
 800e55e:	73fb      	strb	r3, [r7, #15]
    break;
 800e560:	e00b      	b.n	800e57a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e562:	2303      	movs	r3, #3
 800e564:	73fb      	strb	r3, [r7, #15]
    break;
 800e566:	e008      	b.n	800e57a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e568:	2301      	movs	r3, #1
 800e56a:	73fb      	strb	r3, [r7, #15]
    break;
 800e56c:	e005      	b.n	800e57a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e56e:	2303      	movs	r3, #3
 800e570:	73fb      	strb	r3, [r7, #15]
    break;
 800e572:	e002      	b.n	800e57a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e574:	2303      	movs	r3, #3
 800e576:	73fb      	strb	r3, [r7, #15]
    break;
 800e578:	bf00      	nop
  }
  return usb_status;
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3714      	adds	r7, #20
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <memset>:
 800e588:	4402      	add	r2, r0
 800e58a:	4603      	mov	r3, r0
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d100      	bne.n	800e592 <memset+0xa>
 800e590:	4770      	bx	lr
 800e592:	f803 1b01 	strb.w	r1, [r3], #1
 800e596:	e7f9      	b.n	800e58c <memset+0x4>

0800e598 <_reclaim_reent>:
 800e598:	4b2d      	ldr	r3, [pc, #180]	@ (800e650 <_reclaim_reent+0xb8>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4283      	cmp	r3, r0
 800e59e:	b570      	push	{r4, r5, r6, lr}
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	d053      	beq.n	800e64c <_reclaim_reent+0xb4>
 800e5a4:	69c3      	ldr	r3, [r0, #28]
 800e5a6:	b31b      	cbz	r3, 800e5f0 <_reclaim_reent+0x58>
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	b163      	cbz	r3, 800e5c6 <_reclaim_reent+0x2e>
 800e5ac:	2500      	movs	r5, #0
 800e5ae:	69e3      	ldr	r3, [r4, #28]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	5959      	ldr	r1, [r3, r5]
 800e5b4:	b9b1      	cbnz	r1, 800e5e4 <_reclaim_reent+0x4c>
 800e5b6:	3504      	adds	r5, #4
 800e5b8:	2d80      	cmp	r5, #128	@ 0x80
 800e5ba:	d1f8      	bne.n	800e5ae <_reclaim_reent+0x16>
 800e5bc:	69e3      	ldr	r3, [r4, #28]
 800e5be:	4620      	mov	r0, r4
 800e5c0:	68d9      	ldr	r1, [r3, #12]
 800e5c2:	f000 f86d 	bl	800e6a0 <_free_r>
 800e5c6:	69e3      	ldr	r3, [r4, #28]
 800e5c8:	6819      	ldr	r1, [r3, #0]
 800e5ca:	b111      	cbz	r1, 800e5d2 <_reclaim_reent+0x3a>
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	f000 f867 	bl	800e6a0 <_free_r>
 800e5d2:	69e3      	ldr	r3, [r4, #28]
 800e5d4:	689d      	ldr	r5, [r3, #8]
 800e5d6:	b15d      	cbz	r5, 800e5f0 <_reclaim_reent+0x58>
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4620      	mov	r0, r4
 800e5dc:	682d      	ldr	r5, [r5, #0]
 800e5de:	f000 f85f 	bl	800e6a0 <_free_r>
 800e5e2:	e7f8      	b.n	800e5d6 <_reclaim_reent+0x3e>
 800e5e4:	680e      	ldr	r6, [r1, #0]
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f000 f85a 	bl	800e6a0 <_free_r>
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	e7e1      	b.n	800e5b4 <_reclaim_reent+0x1c>
 800e5f0:	6961      	ldr	r1, [r4, #20]
 800e5f2:	b111      	cbz	r1, 800e5fa <_reclaim_reent+0x62>
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 f853 	bl	800e6a0 <_free_r>
 800e5fa:	69e1      	ldr	r1, [r4, #28]
 800e5fc:	b111      	cbz	r1, 800e604 <_reclaim_reent+0x6c>
 800e5fe:	4620      	mov	r0, r4
 800e600:	f000 f84e 	bl	800e6a0 <_free_r>
 800e604:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e606:	b111      	cbz	r1, 800e60e <_reclaim_reent+0x76>
 800e608:	4620      	mov	r0, r4
 800e60a:	f000 f849 	bl	800e6a0 <_free_r>
 800e60e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e610:	b111      	cbz	r1, 800e618 <_reclaim_reent+0x80>
 800e612:	4620      	mov	r0, r4
 800e614:	f000 f844 	bl	800e6a0 <_free_r>
 800e618:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e61a:	b111      	cbz	r1, 800e622 <_reclaim_reent+0x8a>
 800e61c:	4620      	mov	r0, r4
 800e61e:	f000 f83f 	bl	800e6a0 <_free_r>
 800e622:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e624:	b111      	cbz	r1, 800e62c <_reclaim_reent+0x94>
 800e626:	4620      	mov	r0, r4
 800e628:	f000 f83a 	bl	800e6a0 <_free_r>
 800e62c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e62e:	b111      	cbz	r1, 800e636 <_reclaim_reent+0x9e>
 800e630:	4620      	mov	r0, r4
 800e632:	f000 f835 	bl	800e6a0 <_free_r>
 800e636:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e638:	b111      	cbz	r1, 800e640 <_reclaim_reent+0xa8>
 800e63a:	4620      	mov	r0, r4
 800e63c:	f000 f830 	bl	800e6a0 <_free_r>
 800e640:	6a23      	ldr	r3, [r4, #32]
 800e642:	b11b      	cbz	r3, 800e64c <_reclaim_reent+0xb4>
 800e644:	4620      	mov	r0, r4
 800e646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e64a:	4718      	bx	r3
 800e64c:	bd70      	pop	{r4, r5, r6, pc}
 800e64e:	bf00      	nop
 800e650:	24000108 	.word	0x24000108

0800e654 <__libc_init_array>:
 800e654:	b570      	push	{r4, r5, r6, lr}
 800e656:	4d0d      	ldr	r5, [pc, #52]	@ (800e68c <__libc_init_array+0x38>)
 800e658:	4c0d      	ldr	r4, [pc, #52]	@ (800e690 <__libc_init_array+0x3c>)
 800e65a:	1b64      	subs	r4, r4, r5
 800e65c:	10a4      	asrs	r4, r4, #2
 800e65e:	2600      	movs	r6, #0
 800e660:	42a6      	cmp	r6, r4
 800e662:	d109      	bne.n	800e678 <__libc_init_array+0x24>
 800e664:	4d0b      	ldr	r5, [pc, #44]	@ (800e694 <__libc_init_array+0x40>)
 800e666:	4c0c      	ldr	r4, [pc, #48]	@ (800e698 <__libc_init_array+0x44>)
 800e668:	f000 f870 	bl	800e74c <_init>
 800e66c:	1b64      	subs	r4, r4, r5
 800e66e:	10a4      	asrs	r4, r4, #2
 800e670:	2600      	movs	r6, #0
 800e672:	42a6      	cmp	r6, r4
 800e674:	d105      	bne.n	800e682 <__libc_init_array+0x2e>
 800e676:	bd70      	pop	{r4, r5, r6, pc}
 800e678:	f855 3b04 	ldr.w	r3, [r5], #4
 800e67c:	4798      	blx	r3
 800e67e:	3601      	adds	r6, #1
 800e680:	e7ee      	b.n	800e660 <__libc_init_array+0xc>
 800e682:	f855 3b04 	ldr.w	r3, [r5], #4
 800e686:	4798      	blx	r3
 800e688:	3601      	adds	r6, #1
 800e68a:	e7f2      	b.n	800e672 <__libc_init_array+0x1e>
 800e68c:	0800e84c 	.word	0x0800e84c
 800e690:	0800e84c 	.word	0x0800e84c
 800e694:	0800e84c 	.word	0x0800e84c
 800e698:	0800e850 	.word	0x0800e850

0800e69c <__retarget_lock_acquire_recursive>:
 800e69c:	4770      	bx	lr

0800e69e <__retarget_lock_release_recursive>:
 800e69e:	4770      	bx	lr

0800e6a0 <_free_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4605      	mov	r5, r0
 800e6a4:	2900      	cmp	r1, #0
 800e6a6:	d041      	beq.n	800e72c <_free_r+0x8c>
 800e6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ac:	1f0c      	subs	r4, r1, #4
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bfb8      	it	lt
 800e6b2:	18e4      	addlt	r4, r4, r3
 800e6b4:	f000 f83e 	bl	800e734 <__malloc_lock>
 800e6b8:	4a1d      	ldr	r2, [pc, #116]	@ (800e730 <_free_r+0x90>)
 800e6ba:	6813      	ldr	r3, [r2, #0]
 800e6bc:	b933      	cbnz	r3, 800e6cc <_free_r+0x2c>
 800e6be:	6063      	str	r3, [r4, #4]
 800e6c0:	6014      	str	r4, [r2, #0]
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6c8:	f000 b83a 	b.w	800e740 <__malloc_unlock>
 800e6cc:	42a3      	cmp	r3, r4
 800e6ce:	d908      	bls.n	800e6e2 <_free_r+0x42>
 800e6d0:	6820      	ldr	r0, [r4, #0]
 800e6d2:	1821      	adds	r1, r4, r0
 800e6d4:	428b      	cmp	r3, r1
 800e6d6:	bf01      	itttt	eq
 800e6d8:	6819      	ldreq	r1, [r3, #0]
 800e6da:	685b      	ldreq	r3, [r3, #4]
 800e6dc:	1809      	addeq	r1, r1, r0
 800e6de:	6021      	streq	r1, [r4, #0]
 800e6e0:	e7ed      	b.n	800e6be <_free_r+0x1e>
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	b10b      	cbz	r3, 800e6ec <_free_r+0x4c>
 800e6e8:	42a3      	cmp	r3, r4
 800e6ea:	d9fa      	bls.n	800e6e2 <_free_r+0x42>
 800e6ec:	6811      	ldr	r1, [r2, #0]
 800e6ee:	1850      	adds	r0, r2, r1
 800e6f0:	42a0      	cmp	r0, r4
 800e6f2:	d10b      	bne.n	800e70c <_free_r+0x6c>
 800e6f4:	6820      	ldr	r0, [r4, #0]
 800e6f6:	4401      	add	r1, r0
 800e6f8:	1850      	adds	r0, r2, r1
 800e6fa:	4283      	cmp	r3, r0
 800e6fc:	6011      	str	r1, [r2, #0]
 800e6fe:	d1e0      	bne.n	800e6c2 <_free_r+0x22>
 800e700:	6818      	ldr	r0, [r3, #0]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	6053      	str	r3, [r2, #4]
 800e706:	4408      	add	r0, r1
 800e708:	6010      	str	r0, [r2, #0]
 800e70a:	e7da      	b.n	800e6c2 <_free_r+0x22>
 800e70c:	d902      	bls.n	800e714 <_free_r+0x74>
 800e70e:	230c      	movs	r3, #12
 800e710:	602b      	str	r3, [r5, #0]
 800e712:	e7d6      	b.n	800e6c2 <_free_r+0x22>
 800e714:	6820      	ldr	r0, [r4, #0]
 800e716:	1821      	adds	r1, r4, r0
 800e718:	428b      	cmp	r3, r1
 800e71a:	bf04      	itt	eq
 800e71c:	6819      	ldreq	r1, [r3, #0]
 800e71e:	685b      	ldreq	r3, [r3, #4]
 800e720:	6063      	str	r3, [r4, #4]
 800e722:	bf04      	itt	eq
 800e724:	1809      	addeq	r1, r1, r0
 800e726:	6021      	streq	r1, [r4, #0]
 800e728:	6054      	str	r4, [r2, #4]
 800e72a:	e7ca      	b.n	800e6c2 <_free_r+0x22>
 800e72c:	bd38      	pop	{r3, r4, r5, pc}
 800e72e:	bf00      	nop
 800e730:	24006074 	.word	0x24006074

0800e734 <__malloc_lock>:
 800e734:	4801      	ldr	r0, [pc, #4]	@ (800e73c <__malloc_lock+0x8>)
 800e736:	f7ff bfb1 	b.w	800e69c <__retarget_lock_acquire_recursive>
 800e73a:	bf00      	nop
 800e73c:	24006070 	.word	0x24006070

0800e740 <__malloc_unlock>:
 800e740:	4801      	ldr	r0, [pc, #4]	@ (800e748 <__malloc_unlock+0x8>)
 800e742:	f7ff bfac 	b.w	800e69e <__retarget_lock_release_recursive>
 800e746:	bf00      	nop
 800e748:	24006070 	.word	0x24006070

0800e74c <_init>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	bf00      	nop
 800e750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e752:	bc08      	pop	{r3}
 800e754:	469e      	mov	lr, r3
 800e756:	4770      	bx	lr

0800e758 <_fini>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	bf00      	nop
 800e75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e75e:	bc08      	pop	{r3}
 800e760:	469e      	mov	lr, r3
 800e762:	4770      	bx	lr
