
TEST_LORENZO_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c34  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08010ed4  08010ed4  00011ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010fb4  08010fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010fbc  08010fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010fc0  08010fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000170  24000000  08010fc4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006058  24000170  08011134  00012170  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240061c8  08011134  000121c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012170  2**0
                  CONTENTS, READONLY
 10 .debug_info   000315af  00000000  00000000  0001219e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006af1  00000000  00000000  0004374d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023a8  00000000  00000000  0004a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b74  00000000  00000000  0004c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040492  00000000  00000000  0004e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035cbe  00000000  00000000  0008e5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177278  00000000  00000000  000c42ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023b524  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009764  00000000  00000000  0023b568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00244ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010ebc 	.word	0x08010ebc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	08010ebc 	.word	0x08010ebc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ADXL343_WriteReg>:

HAL_StatusTypeDef ADXL343_INT_HANDLER(adxl343_t *dev, uint32_t timeout_ms);


// Write one register.
static inline HAL_StatusTypeDef ADXL343_WriteReg(adxl343_t *dev, uint8_t reg, uint8_t value, uint32_t to_ms) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af04      	add	r7, sp, #16
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	72fb      	strb	r3, [r7, #11]
 800061a:	4613      	mov	r3, r2
 800061c:	72bb      	strb	r3, [r7, #10]
return ADXL343_Transfer(dev, reg, false, false, &value, NULL, 1, to_ms);
 800061e:	7af9      	ldrb	r1, [r7, #11]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	9303      	str	r3, [sp, #12]
 8000624:	2301      	movs	r3, #1
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	f107 030a 	add.w	r3, r7, #10
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 f842 	bl	80006c0 <ADXL343_Transfer>
 800063c:	4603      	mov	r3, r0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <ADXL343_ReadReg>:


// Read one register
static inline HAL_StatusTypeDef ADXL343_ReadReg(adxl343_t *dev, uint8_t reg, uint8_t *value, uint32_t to_ms) {
 8000646:	b580      	push	{r7, lr}
 8000648:	b088      	sub	sp, #32
 800064a:	af04      	add	r7, sp, #16
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	72fb      	strb	r3, [r7, #11]
return ADXL343_Transfer(dev, reg, false, true, NULL, value, 1, to_ms);
 8000656:	7af9      	ldrb	r1, [r7, #11]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	2301      	movs	r3, #1
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2300      	movs	r3, #0
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	2200      	movs	r2, #0
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 f827 	bl	80006c0 <ADXL343_Transfer>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <adxl343_cmd>:
#define ADXL343_CS_HIGH(dev) HAL_GPIO_WritePin((dev)->cs_port, (dev)->cs_pin, GPIO_PIN_SET)
#endif


// Internal helper: build command byte per SPI rules.
static inline uint8_t adxl343_cmd(uint8_t reg, bool multi, bool is_read) {
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
uint8_t cmd = reg & 0x3Fu;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000694:	73fb      	strb	r3, [r7, #15]
if (multi) cmd |= ADXL343_SPI_MB;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d003      	beq.n	80006a4 <adxl343_cmd+0x28>
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a2:	73fb      	strb	r3, [r7, #15]
if (is_read) cmd |= ADXL343_SPI_RW_READ;
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <adxl343_cmd+0x36>
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006b0:	73fb      	strb	r3, [r7, #15]
return cmd;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <ADXL343_Transfer>:


HAL_StatusTypeDef ADXL343_Transfer(adxl343_t *dev, uint8_t reg, bool multi, bool is_read,
const uint8_t *tx, uint8_t *rx, size_t len, uint32_t timeout_ms)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	4608      	mov	r0, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	461a      	mov	r2, r3
 80006ce:	4603      	mov	r3, r0
 80006d0:	70fb      	strb	r3, [r7, #3]
 80006d2:	460b      	mov	r3, r1
 80006d4:	70bb      	strb	r3, [r7, #2]
 80006d6:	4613      	mov	r3, r2
 80006d8:	707b      	strb	r3, [r7, #1]
if (!dev || !dev->hspi) return HAL_ERROR;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <ADXL343_Transfer+0x28>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <ADXL343_Transfer+0x2c>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e067      	b.n	80007bc <ADXL343_Transfer+0xfc>


HAL_StatusTypeDef st = HAL_OK;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]
uint8_t cmd = adxl343_cmd(reg, multi || (len>1), is_read);
 80006f0:	78bb      	ldrb	r3, [r7, #2]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <ADXL343_Transfer+0x3c>
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d901      	bls.n	8000700 <ADXL343_Transfer+0x40>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <ADXL343_Transfer+0x42>
 8000700:	2300      	movs	r3, #0
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	b2d9      	uxtb	r1, r3
 8000708:	787a      	ldrb	r2, [r7, #1]
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffb5 	bl	800067c <adxl343_cmd>
 8000712:	4603      	mov	r3, r0
 8000714:	73bb      	strb	r3, [r7, #14]


ADXL343_CS_LOW(dev);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	891b      	ldrh	r3, [r3, #8]
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	f003 ff59 	bl	80045d8 <HAL_GPIO_WritePin>


// Send command/address
st = HAL_SPI_Transmit(dev->hspi, &cmd, 1, timeout_ms);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	f107 010e 	add.w	r1, r7, #14
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	2201      	movs	r2, #1
 8000732:	f008 fb35 	bl	8008da0 <HAL_SPI_Transmit>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
if (st != HAL_OK) { ADXL343_CS_HIGH(dev); return st; }
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d009      	beq.n	8000754 <ADXL343_Transfer+0x94>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6858      	ldr	r0, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	891b      	ldrh	r3, [r3, #8]
 8000748:	2201      	movs	r2, #1
 800074a:	4619      	mov	r1, r3
 800074c:	f003 ff44 	bl	80045d8 <HAL_GPIO_WritePin>
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	e033      	b.n	80007bc <ADXL343_Transfer+0xfc>


if (is_read) {
 8000754:	787b      	ldrb	r3, [r7, #1]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d010      	beq.n	800077c <ADXL343_Transfer+0xbc>
// Read len bytes. Use dummy 0x00 on MOSI.
if (rx == NULL) rx = dev->_rx; // internal buffer fallback
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <ADXL343_Transfer+0xa6>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	332c      	adds	r3, #44	@ 0x2c
 8000764:	61fb      	str	r3, [r7, #28]
st = HAL_SPI_Receive(dev->hspi, rx, (uint16_t)len, timeout_ms);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	b29a      	uxth	r2, r3
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	69f9      	ldr	r1, [r7, #28]
 8000772:	f008 fd03 	bl	800917c <HAL_SPI_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e016      	b.n	80007aa <ADXL343_Transfer+0xea>
} else {
// Write len bytes from tx
if (tx == NULL) { ADXL343_CS_HIGH(dev); return HAL_ERROR; }
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d109      	bne.n	8000796 <ADXL343_Transfer+0xd6>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6858      	ldr	r0, [r3, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	891b      	ldrh	r3, [r3, #8]
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f003 ff23 	bl	80045d8 <HAL_GPIO_WritePin>
 8000792:	2301      	movs	r3, #1
 8000794:	e012      	b.n	80007bc <ADXL343_Transfer+0xfc>
st = HAL_SPI_Transmit(dev->hspi, (uint8_t*)tx, (uint16_t)len, timeout_ms);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	b29a      	uxth	r2, r3
 800079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a0:	69b9      	ldr	r1, [r7, #24]
 80007a2:	f008 fafd 	bl	8008da0 <HAL_SPI_Transmit>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
}


ADXL343_CS_HIGH(dev);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6858      	ldr	r0, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	891b      	ldrh	r3, [r3, #8]
 80007b2:	2201      	movs	r2, #1
 80007b4:	4619      	mov	r1, r3
 80007b6:	f003 ff0f 	bl	80045d8 <HAL_GPIO_WritePin>
return st;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <ADXL343_Init>:


HAL_StatusTypeDef ADXL343_Init(adxl343_t *dev, SPI_HandleTypeDef *hspi,
GPIO_TypeDef *cs_port, uint16_t cs_pin,
uint8_t bw_rate, uint8_t range, uint32_t timeout_ms)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	807b      	strh	r3, [r7, #2]
if (!dev) return HAL_ERROR;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <ADXL343_Init+0x18>
 80007d8:	2301      	movs	r3, #1
 80007da:	e0d4      	b.n	8000986 <ADXL343_Init+0x1c2>
dev->hspi = hspi;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	601a      	str	r2, [r3, #0]
dev->cs_port = cs_port;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	605a      	str	r2, [r3, #4]
dev->cs_pin = cs_pin;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	887a      	ldrh	r2, [r7, #2]
 80007ec:	811a      	strh	r2, [r3, #8]


// Ensure CS high
ADXL343_CS_HIGH(dev);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6858      	ldr	r0, [r3, #4]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	891b      	ldrh	r3, [r3, #8]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	f003 feed 	bl	80045d8 <HAL_GPIO_WritePin>


// Check DEVID
uint8_t devid = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	75bb      	strb	r3, [r7, #22]
HAL_StatusTypeDef st = ADXL343_ReadReg(dev, ADXL343_REG_DEVID, &devid, timeout_ms);
 8000802:	f107 0216 	add.w	r2, r7, #22
 8000806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000808:	2100      	movs	r1, #0
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f7ff ff1b 	bl	8000646 <ADXL343_ReadReg>
 8000810:	4603      	mov	r3, r0
 8000812:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <ADXL343_Init+0x5a>
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	e0b3      	b.n	8000986 <ADXL343_Init+0x1c2>
if (devid != ADXL343_DEVID_VALUE) return HAL_ERROR;
 800081e:	7dbb      	ldrb	r3, [r7, #22]
 8000820:	2be5      	cmp	r3, #229	@ 0xe5
 8000822:	d001      	beq.n	8000828 <ADXL343_Init+0x64>
 8000824:	2301      	movs	r3, #1
 8000826:	e0ae      	b.n	8000986 <ADXL343_Init+0x1c2>


// Configure BW_RATE (output data rate)
dev->bw_rate = bw_rate;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800082e:	72da      	strb	r2, [r3, #11]
st = ADXL343_WriteReg(dev, ADXL343_REG_BW_RATE, bw_rate, timeout_ms);
 8000830:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000836:	212c      	movs	r1, #44	@ 0x2c
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fee7 	bl	800060c <ADXL343_WriteReg>
 800083e:	4603      	mov	r3, r0
 8000840:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <ADXL343_Init+0x88>
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	e09c      	b.n	8000986 <ADXL343_Init+0x1c2>


// DATA_FORMAT: full-res + range, right-justified, 4-wire SPI
dev->data_format = (uint8_t)(ADXL343_DATA_FMT_FULL_RES | (range & 0x03u));
 800084c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000850:	f003 0303 	and.w	r3, r3, #3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	b2da      	uxtb	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	729a      	strb	r2, [r3, #10]
st = ADXL343_WriteReg(dev, ADXL343_REG_DATA_FORMAT, dev->data_format, timeout_ms);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	7a9a      	ldrb	r2, [r3, #10]
 8000864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000866:	2131      	movs	r1, #49	@ 0x31
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f7ff fecf 	bl	800060c <ADXL343_WriteReg>
 800086e:	4603      	mov	r3, r0
 8000870:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <ADXL343_Init+0xb8>
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	e084      	b.n	8000986 <ADXL343_Init+0x1c2>


// Scale factor
if (dev->data_format & ADXL343_DATA_FMT_FULL_RES) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	7a9b      	ldrb	r3, [r3, #10]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	2b00      	cmp	r3, #0
 8000886:	d004      	beq.n	8000892 <ADXL343_Init+0xce>
dev->lsb_per_g = 1.0f / 256.0f; // ~0.0039 g/LSB
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f04f 526e 	mov.w	r2, #998244352	@ 0x3b800000
 800088e:	621a      	str	r2, [r3, #32]
 8000890:	e020      	b.n	80008d4 <ADXL343_Init+0x110>
} else {
// Non full-res: 10-bit fixed scale: 256 LSB/g at ±2g, 128 at ±4g, etc.
switch (range & 0x03u) {
 8000892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	2b02      	cmp	r3, #2
 800089c:	d010      	beq.n	80008c0 <ADXL343_Init+0xfc>
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d813      	bhi.n	80008ca <ADXL343_Init+0x106>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <ADXL343_Init+0xe8>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d005      	beq.n	80008b6 <ADXL343_Init+0xf2>
 80008aa:	e00e      	b.n	80008ca <ADXL343_Init+0x106>
case ADXL343_DATA_FMT_RANGE_2G: dev->lsb_per_g = 256.0f; break;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f04f 4287 	mov.w	r2, #1132462080	@ 0x43800000
 80008b2:	621a      	str	r2, [r3, #32]
 80008b4:	e00e      	b.n	80008d4 <ADXL343_Init+0x110>
case ADXL343_DATA_FMT_RANGE_4G: dev->lsb_per_g = 128.0f; break;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f04f 4286 	mov.w	r2, #1124073472	@ 0x43000000
 80008bc:	621a      	str	r2, [r3, #32]
 80008be:	e009      	b.n	80008d4 <ADXL343_Init+0x110>
case ADXL343_DATA_FMT_RANGE_8G: dev->lsb_per_g = 64.0f; break;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 80008c6:	621a      	str	r2, [r3, #32]
 80008c8:	e004      	b.n	80008d4 <ADXL343_Init+0x110>
default: dev->lsb_per_g = 32.0f; break; // 16g
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80008d0:	621a      	str	r2, [r3, #32]
 80008d2:	bf00      	nop
}
// convert later as g = raw / lsb_per_g
}


st = ADXL343_WriteReg(dev, ADXL343_REG_THRESH_TAP, ADXL343_TRESHOLD_VALUE, timeout_ms);
 80008d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d6:	2230      	movs	r2, #48	@ 0x30
 80008d8:	211d      	movs	r1, #29
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff fe96 	bl	800060c <ADXL343_WriteReg>
 80008e0:	4603      	mov	r3, r0
 80008e2:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <ADXL343_Init+0x12a>
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	e04b      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_DUR, ADXL343_REG_DUR_VALUE, timeout_ms);
 80008ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	2121      	movs	r1, #33	@ 0x21
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe89 	bl	800060c <ADXL343_WriteReg>
 80008fa:	4603      	mov	r3, r0
 80008fc:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <ADXL343_Init+0x144>
 8000904:	7dfb      	ldrb	r3, [r7, #23]
 8000906:	e03e      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_TAP_AXES, ADXL343_REG_TAP_AXES_VALUE, timeout_ms);
 8000908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800090a:	2206      	movs	r2, #6
 800090c:	212a      	movs	r1, #42	@ 0x2a
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f7ff fe7c 	bl	800060c <ADXL343_WriteReg>
 8000914:	4603      	mov	r3, r0
 8000916:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <ADXL343_Init+0x15e>
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	e031      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_INT_MAP, ADXL343_REG_INTMAP_VALUE, timeout_ms);
 8000922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000924:	22bf      	movs	r2, #191	@ 0xbf
 8000926:	212f      	movs	r1, #47	@ 0x2f
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f7ff fe6f 	bl	800060c <ADXL343_WriteReg>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <ADXL343_Init+0x178>
 8000938:	7dfb      	ldrb	r3, [r7, #23]
 800093a:	e024      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_INT_ENABLE, ADXL343_REG_INTEN_VALUE, timeout_ms);
 800093c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800093e:	2240      	movs	r2, #64	@ 0x40
 8000940:	212e      	movs	r1, #46	@ 0x2e
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f7ff fe62 	bl	800060c <ADXL343_WriteReg>
 8000948:	4603      	mov	r3, r0
 800094a:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <ADXL343_Init+0x192>
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	e017      	b.n	8000986 <ADXL343_Init+0x1c2>



// Enter measurement mode
st = ADXL343_WriteReg(dev, ADXL343_REG_POWER_CTL, ADXL343_POWER_MEASURE, timeout_ms);
 8000956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000958:	2208      	movs	r2, #8
 800095a:	212d      	movs	r1, #45	@ 0x2d
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f7ff fe55 	bl	800060c <ADXL343_WriteReg>
 8000962:	4603      	mov	r3, r0
 8000964:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <ADXL343_Init+0x1ac>
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	e00a      	b.n	8000986 <ADXL343_Init+0x1c2>


// Optional: flush FIFO / set bypass
(void)ADXL343_WriteReg(dev, ADXL343_REG_FIFO_CTL, 0x00u, timeout_ms);
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	2200      	movs	r2, #0
 8000974:	2138      	movs	r1, #56	@ 0x38
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f7ff fe48 	bl	800060c <ADXL343_WriteReg>


// Prime one reading
return ADXL343_ReadXYZ(dev, timeout_ms);
 800097c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 f806 	bl	8000990 <ADXL343_ReadXYZ>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <ADXL343_ReadXYZ>:




HAL_StatusTypeDef ADXL343_ReadXYZ(adxl343_t *dev, uint32_t timeout_ms)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af04      	add	r7, sp, #16
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
uint8_t buf[6];
HAL_StatusTypeDef st = ADXL343_Transfer(dev, ADXL343_REG_DATAX0, true, true,
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	2306      	movs	r3, #6
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	2201      	movs	r2, #1
 80009b0:	2132      	movs	r1, #50	@ 0x32
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fe84 	bl	80006c0 <ADXL343_Transfer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]
NULL, buf, sizeof(buf), timeout_ms);
if (st != HAL_OK) return st;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <ADXL343_ReadXYZ+0x36>
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	e07c      	b.n	8000ac0 <ADXL343_ReadXYZ+0x130>


// Little-endian sign-extended 16-bit (right-justified)
dev->raw[0] = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);
 80009c6:	7a7b      	ldrb	r3, [r7, #9]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	021b      	lsls	r3, r3, #8
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	7a3b      	ldrb	r3, [r7, #8]
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	819a      	strh	r2, [r3, #12]
dev->raw[1] = (int16_t)((uint16_t)buf[3] << 8 | buf[2]);
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	7abb      	ldrb	r3, [r7, #10]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	81da      	strh	r2, [r3, #14]
dev->raw[2] = (int16_t)((uint16_t)buf[5] << 8 | buf[4]);
 80009ee:	7b7b      	ldrb	r3, [r7, #13]
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	7b3b      	ldrb	r3, [r7, #12]
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	821a      	strh	r2, [r3, #16]


if (dev->data_format & ADXL343_DATA_FMT_FULL_RES) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7a9b      	ldrb	r3, [r3, #10]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d02a      	beq.n	8000a64 <ADXL343_ReadXYZ+0xd4>
// In full-res, 3.9 mg/LSB independent of range
dev->g[0] = dev->raw[0] * (1.0f/256.0f);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000ac8 <ADXL343_ReadXYZ+0x138>
 8000a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	edc3 7a05 	vstr	s15, [r3, #20]
dev->g[1] = dev->raw[1] * (1.0f/256.0f);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a38:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000ac8 <ADXL343_ReadXYZ+0x138>
 8000a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edc3 7a06 	vstr	s15, [r3, #24]
dev->g[2] = dev->raw[2] * (1.0f/256.0f);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a54:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000ac8 <ADXL343_ReadXYZ+0x138>
 8000a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	edc3 7a07 	vstr	s15, [r3, #28]
 8000a62:	e02c      	b.n	8000abe <ADXL343_ReadXYZ+0x12e>
} else {
dev->g[0] = (float)dev->raw[0] / dev->lsb_per_g;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	ed93 7a08 	vldr	s14, [r3, #32]
 8000a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	edc3 7a05 	vstr	s15, [r3, #20]
dev->g[1] = (float)dev->raw[1] / dev->lsb_per_g;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a88:	ee07 3a90 	vmov	s15, r3
 8000a8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	ed93 7a08 	vldr	s14, [r3, #32]
 8000a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	edc3 7a06 	vstr	s15, [r3, #24]
dev->g[2] = (float)dev->raw[2] / dev->lsb_per_g;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	edc3 7a07 	vstr	s15, [r3, #28]
}
return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	3b800000 	.word	0x3b800000

08000acc <ADXL343_INT_HANDLER>:


HAL_StatusTypeDef ADXL343_INT_HANDLER(adxl343_t *dev, uint32_t timeout_ms){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]

	dev->tap_event=1;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	uint8_t registerstate=0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef st = ADXL343_ReadReg(dev, ADXL343_REG_ACT_TAP_STATUS, &registerstate, timeout_ms);
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	212b      	movs	r1, #43	@ 0x2b
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fdab 	bl	8000646 <ADXL343_ReadReg>
 8000af0:	4603      	mov	r3, r0
 8000af2:	73fb      	strb	r3, [r7, #15]
	if (st != HAL_OK) return st;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <ADXL343_INT_HANDLER+0x32>
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	e02b      	b.n	8000b56 <ADXL343_INT_HANDLER+0x8a>

	if(registerstate & 0x01){
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <ADXL343_INT_HANDLER+0x44>
		dev->z_tap=1;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	}
	if(registerstate & 0x02){
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <ADXL343_INT_HANDLER+0x56>
		dev->y_tap=1;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	}
	if(registerstate & 0x04){
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <ADXL343_INT_HANDLER+0x68>
		dev->x_tap=1;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	}

	uint8_t intsourcestate=0x00;
 8000b34:	2300      	movs	r3, #0
 8000b36:	737b      	strb	r3, [r7, #13]
	st = ADXL343_ReadReg(dev, ADXL343_REG_INT_SOURCE, &intsourcestate, timeout_ms);
 8000b38:	f107 020d 	add.w	r2, r7, #13
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2130      	movs	r1, #48	@ 0x30
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fd80 	bl	8000646 <ADXL343_ReadReg>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
	if (st != HAL_OK) return st;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <ADXL343_INT_HANDLER+0x88>
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	e000      	b.n	8000b56 <ADXL343_INT_HANDLER+0x8a>

	return st;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_DMA_Init+0x3c>)
 8000b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <MX_DMA_Init+0x3c>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_DMA_Init+0x3c>)
 8000b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2105      	movs	r1, #5
 8000b88:	200b      	movs	r0, #11
 8000b8a:	f001 fe13 	bl	80027b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b8e:	200b      	movs	r0, #11
 8000b90:	f001 fe2a 	bl	80027e8 <HAL_NVIC_EnableIRQ>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58024400 	.word	0x58024400

08000ba0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <vApplicationGetIdleTaskMemory+0x2c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <vApplicationGetIdleTaskMemory+0x30>)
 8000bb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	24000194 	.word	0x24000194
 8000bd0:	24000234 	.word	0x24000234

08000bd4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bd4:	b5b0      	push	{r4, r5, r7, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of maintask */
  osThreadDef(maintask, Startmaintask, osPriorityNormal, 0, 256);
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_FREERTOS_Init+0x58>)
 8000bdc:	f107 041c 	add.w	r4, r7, #28
 8000be0:	461d      	mov	r5, r3
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  maintaskHandle = osThreadCreate(osThread(maintask), NULL);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00e f8ef 	bl	800edd8 <osThreadCreate>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <MX_FREERTOS_Init+0x5c>)
 8000bfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of lidarparse */
  osThreadDef(lidarparse, Startlidarparse, osPriorityIdle, 0, 500);
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_FREERTOS_Init+0x60>)
 8000c02:	463c      	mov	r4, r7
 8000c04:	461d      	mov	r5, r3
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lidarparseHandle = osThreadCreate(osThread(lidarparse), NULL);
 8000c12:	463b      	mov	r3, r7
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00e f8de 	bl	800edd8 <osThreadCreate>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a06      	ldr	r2, [pc, #24]	@ (8000c38 <MX_FREERTOS_Init+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	@ 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08010ee0 	.word	0x08010ee0
 8000c30:	2400018c 	.word	0x2400018c
 8000c34:	08010f08 	.word	0x08010f08
 8000c38:	24000190 	.word	0x24000190

08000c3c <Startmaintask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmaintask */
void Startmaintask(void const * argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c44:	f00f fb3e 	bl	80102c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN Startmaintask */
  /* Infinite loop */
  for(;;)
  {

	 HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
 8000c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4c:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <Startmaintask+0x20>)
 8000c4e:	f003 fcdc 	bl	800460a <HAL_GPIO_TogglePin>
    osDelay(100);
 8000c52:	2064      	movs	r0, #100	@ 0x64
 8000c54:	f00e f90c 	bl	800ee70 <osDelay>
	 HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
 8000c58:	bf00      	nop
 8000c5a:	e7f5      	b.n	8000c48 <Startmaintask+0xc>
 8000c5c:	58020c00 	.word	0x58020c00

08000c60 <Startlidarparse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlidarparse */
void Startlidarparse(void const * argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  {
//	  while (ylidar_read_index!=ylidar_write_index){
//		  ylidar_fsm();
//      }
//	  trackObject();
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_11);
 8000c68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <Startlidarparse+0x24>)
 8000c6e:	f003 fccc 	bl	800460a <HAL_GPIO_TogglePin>
	  ADXL343_ReadXYZ(&adxldata, 100);
 8000c72:	2164      	movs	r1, #100	@ 0x64
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <Startlidarparse+0x28>)
 8000c76:	f7ff fe8b 	bl	8000990 <ADXL343_ReadXYZ>

	  osDelay(50);
 8000c7a:	2032      	movs	r0, #50	@ 0x32
 8000c7c:	f00e f8f8 	bl	800ee70 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_11);
 8000c80:	bf00      	nop
 8000c82:	e7f1      	b.n	8000c68 <Startlidarparse+0x8>
 8000c84:	58020c00 	.word	0x58020c00
 8000c88:	24000488 	.word	0x24000488

08000c8c <MX_GPIO_Init>:
     PB1   ------> S_TIM3_CH4
     PD8   ------> USART3_TX
     PD12   ------> I2C4_SCL
*/
void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	@ 0x30
 8000c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	4bb7      	ldr	r3, [pc, #732]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	4ab5      	ldr	r2, [pc, #724]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb2:	4bb3      	ldr	r3, [pc, #716]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4baf      	ldr	r3, [pc, #700]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	4aae      	ldr	r2, [pc, #696]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd0:	4bab      	ldr	r3, [pc, #684]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4ba8      	ldr	r3, [pc, #672]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	4aa6      	ldr	r2, [pc, #664]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cee:	4ba4      	ldr	r3, [pc, #656]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfc:	4ba0      	ldr	r3, [pc, #640]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	4a9f      	ldr	r2, [pc, #636]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0c:	4b9c      	ldr	r3, [pc, #624]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	4b99      	ldr	r3, [pc, #612]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a97      	ldr	r2, [pc, #604]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b95      	ldr	r3, [pc, #596]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	4b91      	ldr	r3, [pc, #580]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a90      	ldr	r2, [pc, #576]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b8d      	ldr	r3, [pc, #564]	@ (8000f80 <MX_GPIO_Init+0x2f4>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5c:	4889      	ldr	r0, [pc, #548]	@ (8000f84 <MX_GPIO_Init+0x2f8>)
 8000d5e:	f003 fc3b 	bl	80045d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BLUE_Pin|GREEN_Pin|RED_Pin|LED0_Pin
 8000d62:	2200      	movs	r2, #0
 8000d64:	f640 412c 	movw	r1, #3116	@ 0xc2c
 8000d68:	4887      	ldr	r0, [pc, #540]	@ (8000f88 <MX_GPIO_Init+0x2fc>)
 8000d6a:	f003 fc35 	bl	80045d8 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_CS_GPIO_Port, ACCEL_CS_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	4886      	ldr	r0, [pc, #536]	@ (8000f8c <MX_GPIO_Init+0x300>)
 8000d74:	f003 fc30 	bl	80045d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000d78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7e:	2312      	movs	r3, #18
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	487e      	ldr	r0, [pc, #504]	@ (8000f90 <MX_GPIO_Init+0x304>)
 8000d96:	f003 fa6f 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d9a:	2380      	movs	r3, #128	@ 0x80
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4876      	ldr	r0, [pc, #472]	@ (8000f90 <MX_GPIO_Init+0x304>)
 8000db6:	f003 fa5f 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	486c      	ldr	r0, [pc, #432]	@ (8000f84 <MX_GPIO_Init+0x2f8>)
 8000dd4:	f003 fa50 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin RED_Pin LED0_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin|LED0_Pin
 8000dd8:	f640 432c 	movw	r3, #3116	@ 0xc2c
 8000ddc:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4865      	ldr	r0, [pc, #404]	@ (8000f88 <MX_GPIO_Init+0x2fc>)
 8000df2:	f003 fa41 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1;
 8000df6:	2313      	movs	r3, #19
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	485d      	ldr	r0, [pc, #372]	@ (8000f88 <MX_GPIO_Init+0x2fc>)
 8000e12:	f003 fa31 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4854      	ldr	r0, [pc, #336]	@ (8000f84 <MX_GPIO_Init+0x2f8>)
 8000e34:	f003 fa20 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	484f      	ldr	r0, [pc, #316]	@ (8000f8c <MX_GPIO_Init+0x300>)
 8000e4e:	f003 fa13 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e64:	2304      	movs	r3, #4
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4847      	ldr	r0, [pc, #284]	@ (8000f8c <MX_GPIO_Init+0x300>)
 8000e70:	f003 fa02 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e74:	23c0      	movs	r3, #192	@ 0xc0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000e84:	2307      	movs	r3, #7
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	483f      	ldr	r0, [pc, #252]	@ (8000f8c <MX_GPIO_Init+0x300>)
 8000e90:	f003 f9f2 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4838      	ldr	r0, [pc, #224]	@ (8000f8c <MX_GPIO_Init+0x300>)
 8000eac:	f003 f9e4 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8000eb0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4830      	ldr	r0, [pc, #192]	@ (8000f90 <MX_GPIO_Init+0x304>)
 8000ece:	f003 f9d3 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ed2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4829      	ldr	r0, [pc, #164]	@ (8000f94 <MX_GPIO_Init+0x308>)
 8000ef0:	f003 f9c2 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000ef4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f06:	2307      	movs	r3, #7
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481d      	ldr	r0, [pc, #116]	@ (8000f88 <MX_GPIO_Init+0x2fc>)
 8000f12:	f003 f9b1 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000f16:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <MX_GPIO_Init+0x2fc>)
 8000f34:	f003 f9a0 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	480f      	ldr	r0, [pc, #60]	@ (8000f90 <MX_GPIO_Init+0x304>)
 8000f54:	f003 f990 	bl	8004278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	2006      	movs	r0, #6
 8000f5e:	f001 fc29 	bl	80027b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f62:	2006      	movs	r0, #6
 8000f64:	f001 fc40 	bl	80027e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2105      	movs	r1, #5
 8000f6c:	2008      	movs	r0, #8
 8000f6e:	f001 fc21 	bl	80027b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f72:	2008      	movs	r0, #8
 8000f74:	f001 fc38 	bl	80027e8 <HAL_NVIC_EnableIRQ>

}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	@ 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020000 	.word	0x58020000
 8000f88:	58020c00 	.word	0x58020c00
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020400 	.word	0x58020400
 8000f94:	58021000 	.word	0x58021000

08000f98 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_I2C2_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <MX_I2C2_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <MX_I2C2_Init+0x7c>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_I2C2_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fd4:	f003 fb4e 	bl	8004674 <HAL_I2C_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f000 f9b1 	bl	8001344 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fe6:	f003 fbe1 	bl	80047ac <HAL_I2CEx_ConfigAnalogFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f000 f9a8 	bl	8001344 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_I2C2_Init+0x74>)
 8000ff8:	f003 fc23 	bl	8004842 <HAL_I2CEx_ConfigDigitalFilter>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f99f 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	24000434 	.word	0x24000434
 8001010:	40005800 	.word	0x40005800
 8001014:	00b03fdb 	.word	0x00b03fdb

08001018 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ba      	sub	sp, #232	@ 0xe8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00f fe5d 	bl	8010cf8 <memset>
  if(i2cHandle->Instance==I2C2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <HAL_I2C_MspInit+0xc8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d146      	bne.n	80010d6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001048:	f04f 0208 	mov.w	r2, #8
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4618      	mov	r0, r3
 8001060:	f005 ff4e 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800106a:	f000 f96b 	bl	8001344 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800108c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001090:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010a6:	2304      	movs	r3, #4
 80010a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <HAL_I2C_MspInit+0xd0>)
 80010b4:	f003 f8e0 	bl	8004278 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 80010c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	37e8      	adds	r7, #232	@ 0xe8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40005800 	.word	0x40005800
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020400 	.word	0x58020400

080010ec <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d12f      	bne.n	800115c <HAL_GPIO_EXTI_Callback+0x70>

		if(flag == 0 ){
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x78>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10e      	bne.n	8001122 <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,1);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	4817      	ldr	r0, [pc, #92]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x7c>)
 800110a:	f003 fa65 	bl	80045d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 800110e:	2200      	movs	r2, #0
 8001110:	2104      	movs	r1, #4
 8001112:	4815      	ldr	r0, [pc, #84]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001114:	f003 fa60 	bl	80045d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 8001118:	2200      	movs	r2, #0
 800111a:	2120      	movs	r1, #32
 800111c:	4812      	ldr	r0, [pc, #72]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x7c>)
 800111e:	f003 fa5b 	bl	80045d8 <HAL_GPIO_WritePin>

		}
		if(flag == 1){
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x78>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10e      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x5c>

			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 800112a:	2200      	movs	r2, #0
 800112c:	2108      	movs	r1, #8
 800112e:	480e      	ldr	r0, [pc, #56]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001130:	f003 fa52 	bl	80045d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8001134:	2201      	movs	r2, #1
 8001136:	2104      	movs	r1, #4
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x7c>)
 800113a:	f003 fa4d 	bl	80045d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 800113e:	2200      	movs	r2, #0
 8001140:	2120      	movs	r1, #32
 8001142:	4809      	ldr	r0, [pc, #36]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001144:	f003 fa48 	bl	80045d8 <HAL_GPIO_WritePin>

		}

		flag=1-flag;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x78>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1c3 0301 	rsb	r3, r3, #1
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x78>)
 8001152:	6013      	str	r3, [r2, #0]

		ADXL343_INT_HANDLER(&adxldata, 100);
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <HAL_GPIO_EXTI_Callback+0x80>)
 8001158:	f7ff fcb8 	bl	8000acc <ADXL343_INT_HANDLER>


	}


}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	240004c0 	.word	0x240004c0
 8001168:	58020c00 	.word	0x58020c00
 800116c:	24000488 	.word	0x24000488

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001176:	f000 f8a7 	bl	80012c8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f001 f9d7 	bl	800252c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f827 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f7ff fd83 	bl	8000c8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001186:	f7ff fceb 	bl	8000b60 <MX_DMA_Init>
  MX_UART8_Init();
 800118a:	f000 fbd7 	bl	800193c <MX_UART8_Init>
  MX_SPI4_Init();
 800118e:	f000 f935 	bl	80013fc <MX_SPI4_Init>
  MX_SPI1_Init();
 8001192:	f000 f8dd 	bl	8001350 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001196:	f00b fd81 	bl	800cc9c <MX_FATFS_Init>
  MX_I2C2_Init();
 800119a:	f7ff fefd 	bl	8000f98 <MX_I2C2_Init>

//  HAL_UART_Abort(&huart8);
//  HAL_UART_Receive_DMA(&huart8, (uint8_t *)ylidar_circular_buffer, YLIDAR_CIRC_BUF_SIZE);
//  __HAL_DMA_ENABLE_IT(huart8.hdmarx,DMA_IT_HT);

  ADXL343_Init(&adxldata, &hspi4, ACCEL_CS_GPIO_Port, ACCEL_CS_Pin,ADXL343_BW_RATE_VALUE, ADXL343_DATA_FMT_RANGE_4G,100);
 800119e:	2364      	movs	r3, #100	@ 0x64
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	230a      	movs	r3, #10
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2302      	movs	r3, #2
 80011ac:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <main+0x54>)
 80011ae:	4906      	ldr	r1, [pc, #24]	@ (80011c8 <main+0x58>)
 80011b0:	4806      	ldr	r0, [pc, #24]	@ (80011cc <main+0x5c>)
 80011b2:	f7ff fb07 	bl	80007c4 <ADXL343_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80011b6:	f7ff fd0d 	bl	8000bd4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011ba:	f00d fe06 	bl	800edca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011be:	bf00      	nop
 80011c0:	e7fd      	b.n	80011be <main+0x4e>
 80011c2:	bf00      	nop
 80011c4:	58020800 	.word	0x58020800
 80011c8:	2400054c 	.word	0x2400054c
 80011cc:	24000488 	.word	0x24000488

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	@ 0x70
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011da:	224c      	movs	r2, #76	@ 0x4c
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00f fd8a 	bl	8010cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2220      	movs	r2, #32
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00f fd84 	bl	8010cf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f004 fe13 	bl	8005e1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <SystemClock_Config+0xf0>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a30      	ldr	r2, [pc, #192]	@ (80012c0 <SystemClock_Config+0xf0>)
 8001200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b2e      	ldr	r3, [pc, #184]	@ (80012c0 <SystemClock_Config+0xf0>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <SystemClock_Config+0xf4>)
 8001212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001214:	4a2b      	ldr	r2, [pc, #172]	@ (80012c4 <SystemClock_Config+0xf4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800121c:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <SystemClock_Config+0xf4>)
 800121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	bf00      	nop
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <SystemClock_Config+0xf0>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001236:	d1f8      	bne.n	800122a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001238:	2321      	movs	r3, #33	@ 0x21
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001242:	2301      	movs	r3, #1
 8001244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124a:	2302      	movs	r3, #2
 800124c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001252:	2378      	movs	r3, #120	@ 0x78
 8001254:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001262:	230c      	movs	r3, #12
 8001264:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001266:	2300      	movs	r3, #0
 8001268:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fe1c 	bl	8005eb0 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800127e:	f000 f861 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	233f      	movs	r3, #63	@ 0x3f
 8001284:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2303      	movs	r3, #3
 8001288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800128e:	2308      	movs	r3, #8
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001292:	2340      	movs	r3, #64	@ 0x40
 8001294:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001296:	2340      	movs	r3, #64	@ 0x40
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800129a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012a0:	2340      	movs	r3, #64	@ 0x40
 80012a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2104      	movs	r1, #4
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fa5b 	bl	8006764 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80012b4:	f000 f846 	bl	8001344 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3770      	adds	r7, #112	@ 0x70
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	58024800 	.word	0x58024800
 80012c4:	58000400 	.word	0x58000400

080012c8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012da:	f001 fa93 	bl	8002804 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012de:	2301      	movs	r3, #1
 80012e0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012ea:	231f      	movs	r3, #31
 80012ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012ee:	2387      	movs	r3, #135	@ 0x87
 80012f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012f6:	2300      	movs	r3, #0
 80012f8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012fe:	2301      	movs	r3, #1
 8001300:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800130a:	463b      	mov	r3, r7
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fab1 	bl	8002874 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001312:	2004      	movs	r0, #4
 8001314:	f001 fa8e 	bl	8002834 <HAL_MPU_Enable>

}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001332:	f001 f937 	bl	80025a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <Error_Handler+0x8>

08001350 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001356:	4a28      	ldr	r2, [pc, #160]	@ (80013f8 <MX_SPI1_Init+0xa8>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800135c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001360:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800136a:	2207      	movs	r2, #7
 800136c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800137c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001380:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001388:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001396:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013e2:	f007 fbb9 	bl	8008b58 <HAL_SPI_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80013ec:	f7ff ffaa 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	240004c4 	.word	0x240004c4
 80013f8:	40013000 	.word	0x40013000

080013fc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001400:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001402:	4a29      	ldr	r2, [pc, #164]	@ (80014a8 <MX_SPI4_Init+0xac>)
 8001404:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001406:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001408:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800140c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800140e:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001414:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001416:	2207      	movs	r2, #7
 8001418:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800141c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001420:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001428:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800142c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001430:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001434:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001438:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001458:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001468:	2200      	movs	r2, #0
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001474:	2200      	movs	r2, #0
 8001476:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_SPI4_Init+0xa8>)
 8001492:	f007 fb61 	bl	8008b58 <HAL_SPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 800149c:	f7ff ff52 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2400054c 	.word	0x2400054c
 80014a8:	40013400 	.word	0x40013400

080014ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0bc      	sub	sp, #240	@ 0xf0
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	22c0      	movs	r2, #192	@ 0xc0
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00f fc13 	bl	8010cf8 <memset>
  if(spiHandle->Instance==SPI1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a54      	ldr	r2, [pc, #336]	@ (8001628 <HAL_SPI_MspInit+0x17c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d157      	bne.n	800158c <HAL_SPI_MspInit+0xe0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 130;
 80014ec:	2382      	movs	r3, #130	@ 0x82
 80014ee:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 80014f0:	230a      	movs	r3, #10
 80014f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80014fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001500:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001502:	2300      	movs	r3, #0
 8001504:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800150a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fcf3 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8001520:	f7ff ff10 	bl	8001344 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001524:	4b41      	ldr	r3, [pc, #260]	@ (800162c <HAL_SPI_MspInit+0x180>)
 8001526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800152a:	4a40      	ldr	r2, [pc, #256]	@ (800162c <HAL_SPI_MspInit+0x180>)
 800152c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001530:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <HAL_SPI_MspInit+0x180>)
 8001536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800153a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <HAL_SPI_MspInit+0x180>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001548:	4a38      	ldr	r2, [pc, #224]	@ (800162c <HAL_SPI_MspInit+0x180>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001552:	4b36      	ldr	r3, [pc, #216]	@ (800162c <HAL_SPI_MspInit+0x180>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB4 (NJTRST)     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_5;
 8001560:	2338      	movs	r3, #56	@ 0x38
 8001562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001578:	2305      	movs	r3, #5
 800157a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001582:	4619      	mov	r1, r3
 8001584:	482a      	ldr	r0, [pc, #168]	@ (8001630 <HAL_SPI_MspInit+0x184>)
 8001586:	f002 fe77 	bl	8004278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800158a:	e049      	b.n	8001620 <HAL_SPI_MspInit+0x174>
  else if(spiHandle->Instance==SPI4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a28      	ldr	r2, [pc, #160]	@ (8001634 <HAL_SPI_MspInit+0x188>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d144      	bne.n	8001620 <HAL_SPI_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001596:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 fca8 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_SPI_MspInit+0x10e>
      Error_Handler();
 80015b6:	f7ff fec5 	bl	8001344 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_SPI_MspInit+0x180>)
 80015bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015c0:	4a1a      	ldr	r2, [pc, #104]	@ (800162c <HAL_SPI_MspInit+0x180>)
 80015c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_SPI_MspInit+0x180>)
 80015cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <HAL_SPI_MspInit+0x180>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015de:	4a13      	ldr	r2, [pc, #76]	@ (800162c <HAL_SPI_MspInit+0x180>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_SPI_MspInit+0x180>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015f6:	2364      	movs	r3, #100	@ 0x64
 80015f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800160e:	2305      	movs	r3, #5
 8001610:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001614:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <HAL_SPI_MspInit+0x18c>)
 800161c:	f002 fe2c 	bl	8004278 <HAL_GPIO_Init>
}
 8001620:	bf00      	nop
 8001622:	37f0      	adds	r7, #240	@ 0xf0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40013000 	.word	0x40013000
 800162c:	58024400 	.word	0x58024400
 8001630:	58020400 	.word	0x58020400
 8001634:	40013400 	.word	0x40013400
 8001638:	58021000 	.word	0x58021000

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_MspInit+0x38>)
 8001644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_MspInit+0x38>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_MspInit+0x38>)
 8001654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	210f      	movs	r1, #15
 8001664:	f06f 0001 	mvn.w	r0, #1
 8001668:	f001 f8a4 	bl	80027b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58024400 	.word	0x58024400

08001678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	@ 0x38
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	d844      	bhi.n	8001710 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001686:	2200      	movs	r2, #0
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	2019      	movs	r0, #25
 800168c:	f001 f892 	bl	80027b4 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001690:	2019      	movs	r0, #25
 8001692:	f001 f8a9 	bl	80027e8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001696:	4a24      	ldr	r2, [pc, #144]	@ (8001728 <HAL_InitTick+0xb0>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800169c:	4b23      	ldr	r3, [pc, #140]	@ (800172c <HAL_InitTick+0xb4>)
 800169e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a2:	4a22      	ldr	r2, [pc, #136]	@ (800172c <HAL_InitTick+0xb4>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <HAL_InitTick+0xb4>)
 80016ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ba:	f107 020c 	add.w	r2, r7, #12
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f005 fbd9 	bl	8006e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016ca:	f005 fbc1 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 80016ce:	4603      	mov	r3, r0
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016d6:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <HAL_InitTick+0xb8>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	3b01      	subs	r3, #1
 80016e0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <HAL_InitTick+0xbc>)
 80016e4:	4a14      	ldr	r2, [pc, #80]	@ (8001738 <HAL_InitTick+0xc0>)
 80016e6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0xbc>)
 80016ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016ee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016f0:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_InitTick+0xbc>)
 80016f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016f4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_InitTick+0xbc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <HAL_InitTick+0xbc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <HAL_InitTick+0xbc>)
 8001704:	f008 fbcf 	bl	8009ea6 <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <HAL_InitTick+0xa6>
 800170e:	e001      	b.n	8001714 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e005      	b.n	8001720 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001714:	4807      	ldr	r0, [pc, #28]	@ (8001734 <HAL_InitTick+0xbc>)
 8001716:	f008 fc27 	bl	8009f68 <HAL_TIM_Base_Start_IT>
 800171a:	4603      	mov	r3, r0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3738      	adds	r7, #56	@ 0x38
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2400000c 	.word	0x2400000c
 800172c:	58024400 	.word	0x58024400
 8001730:	431bde83 	.word	0x431bde83
 8001734:	240005d4 	.word	0x240005d4
 8001738:	40010000 	.word	0x40010000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <NMI_Handler+0x4>

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <MemManage_Handler+0x4>

08001754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <UsageFault_Handler+0x4>

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8001776:	2001      	movs	r0, #1
 8001778:	f002 ff61 	bl	800463e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8001784:	2004      	movs	r0, #4
 8001786:	f002 ff5a 	bl	800463e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001796:	f001 fc09 	bl	8002fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	240006b4 	.word	0x240006b4

080017a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM1_UP_IRQHandler+0x10>)
 80017aa:	f008 fc55 	bl	800a058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	240005d4 	.word	0x240005d4

080017b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <OTG_FS_IRQHandler+0x10>)
 80017be:	f003 f9cd 	bl	8004b5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	24005984 	.word	0x24005984

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d0:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <SystemInit+0x114>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d6:	4a42      	ldr	r2, [pc, #264]	@ (80018e0 <SystemInit+0x114>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e0:	4b40      	ldr	r3, [pc, #256]	@ (80018e4 <SystemInit+0x118>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d807      	bhi.n	80017fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ec:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <SystemInit+0x118>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 030f 	bic.w	r3, r3, #15
 80017f4:	4a3b      	ldr	r2, [pc, #236]	@ (80018e4 <SystemInit+0x118>)
 80017f6:	f043 0307 	orr.w	r3, r3, #7
 80017fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017fc:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <SystemInit+0x11c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a39      	ldr	r2, [pc, #228]	@ (80018e8 <SystemInit+0x11c>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001808:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <SystemInit+0x11c>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800180e:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <SystemInit+0x11c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4935      	ldr	r1, [pc, #212]	@ (80018e8 <SystemInit+0x11c>)
 8001814:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <SystemInit+0x120>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800181a:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <SystemInit+0x118>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001826:	4b2f      	ldr	r3, [pc, #188]	@ (80018e4 <SystemInit+0x118>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 030f 	bic.w	r3, r3, #15
 800182e:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <SystemInit+0x118>)
 8001830:	f043 0307 	orr.w	r3, r3, #7
 8001834:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001836:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <SystemInit+0x11c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <SystemInit+0x11c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001842:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <SystemInit+0x11c>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001848:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <SystemInit+0x11c>)
 800184a:	4a29      	ldr	r2, [pc, #164]	@ (80018f0 <SystemInit+0x124>)
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800184e:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <SystemInit+0x11c>)
 8001850:	4a28      	ldr	r2, [pc, #160]	@ (80018f4 <SystemInit+0x128>)
 8001852:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <SystemInit+0x11c>)
 8001856:	4a28      	ldr	r2, [pc, #160]	@ (80018f8 <SystemInit+0x12c>)
 8001858:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <SystemInit+0x11c>)
 800185c:	2200      	movs	r2, #0
 800185e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <SystemInit+0x11c>)
 8001862:	4a25      	ldr	r2, [pc, #148]	@ (80018f8 <SystemInit+0x12c>)
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <SystemInit+0x11c>)
 8001868:	2200      	movs	r2, #0
 800186a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <SystemInit+0x11c>)
 800186e:	4a22      	ldr	r2, [pc, #136]	@ (80018f8 <SystemInit+0x12c>)
 8001870:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <SystemInit+0x11c>)
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <SystemInit+0x11c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <SystemInit+0x11c>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001882:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001884:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <SystemInit+0x11c>)
 8001886:	2200      	movs	r2, #0
 8001888:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <SystemInit+0x130>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <SystemInit+0x134>)
 8001890:	4013      	ands	r3, r2
 8001892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001896:	d202      	bcs.n	800189e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <SystemInit+0x138>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <SystemInit+0x11c>)
 80018a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d113      	bne.n	80018d4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <SystemInit+0x11c>)
 80018ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018b2:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <SystemInit+0x11c>)
 80018b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <SystemInit+0x13c>)
 80018be:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018c2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <SystemInit+0x11c>)
 80018c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018ca:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <SystemInit+0x11c>)
 80018cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	52002000 	.word	0x52002000
 80018e8:	58024400 	.word	0x58024400
 80018ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80018f0:	02020200 	.word	0x02020200
 80018f4:	01ff0000 	.word	0x01ff0000
 80018f8:	01010280 	.word	0x01010280
 80018fc:	5c001000 	.word	0x5c001000
 8001900:	ffff0000 	.word	0xffff0000
 8001904:	51008108 	.word	0x51008108
 8001908:	52004000 	.word	0x52004000

0800190c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <ExitRun0Mode+0x2c>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <ExitRun0Mode+0x2c>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800191c:	bf00      	nop
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <ExitRun0Mode+0x2c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f9      	beq.n	800191e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	58024800 	.word	0x58024800

0800193c <MX_UART8_Init>:
UART_HandleTypeDef huart8;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <MX_UART8_Init+0x90>)
 8001942:	4a23      	ldr	r2, [pc, #140]	@ (80019d0 <MX_UART8_Init+0x94>)
 8001944:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <MX_UART8_Init+0x90>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <MX_UART8_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <MX_UART8_Init+0x90>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800195a:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <MX_UART8_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <MX_UART8_Init+0x90>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <MX_UART8_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <MX_UART8_Init+0x90>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001972:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <MX_UART8_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <MX_UART8_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197e:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <MX_UART8_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001984:	4811      	ldr	r0, [pc, #68]	@ (80019cc <MX_UART8_Init+0x90>)
 8001986:	f008 fd55 	bl	800a434 <HAL_UART_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001990:	f7ff fcd8 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001994:	2100      	movs	r1, #0
 8001996:	480d      	ldr	r0, [pc, #52]	@ (80019cc <MX_UART8_Init+0x90>)
 8001998:	f009 fd5d 	bl	800b456 <HAL_UARTEx_SetTxFifoThreshold>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80019a2:	f7ff fccf 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4808      	ldr	r0, [pc, #32]	@ (80019cc <MX_UART8_Init+0x90>)
 80019aa:	f009 fd92 	bl	800b4d2 <HAL_UARTEx_SetRxFifoThreshold>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80019b4:	f7ff fcc6 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	@ (80019cc <MX_UART8_Init+0x90>)
 80019ba:	f009 fd13 	bl	800b3e4 <HAL_UARTEx_DisableFifoMode>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80019c4:	f7ff fcbe 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	24000620 	.word	0x24000620
 80019d0:	40007c00 	.word	0x40007c00

080019d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0ba      	sub	sp, #232	@ 0xe8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	22c0      	movs	r2, #192	@ 0xc0
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00f f97f 	bl	8010cf8 <memset>
  if(uartHandle->Instance==UART8)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a3e      	ldr	r2, [pc, #248]	@ (8001af8 <HAL_UART_MspInit+0x124>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d174      	bne.n	8001aee <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001a04:	f04f 0202 	mov.w	r2, #2
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fa70 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a26:	f7ff fc8d 	bl	8001344 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001a2a:	4b34      	ldr	r3, [pc, #208]	@ (8001afc <HAL_UART_MspInit+0x128>)
 8001a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a30:	4a32      	ldr	r2, [pc, #200]	@ (8001afc <HAL_UART_MspInit+0x128>)
 8001a32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a3a:	4b30      	ldr	r3, [pc, #192]	@ (8001afc <HAL_UART_MspInit+0x128>)
 8001a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <HAL_UART_MspInit+0x128>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001afc <HAL_UART_MspInit+0x128>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a58:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HAL_UART_MspInit+0x128>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001a7e:	2308      	movs	r3, #8
 8001a80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481d      	ldr	r0, [pc, #116]	@ (8001b00 <HAL_UART_MspInit+0x12c>)
 8001a8c:	f002 fbf4 	bl	8004278 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001a92:	4a1d      	ldr	r2, [pc, #116]	@ (8001b08 <HAL_UART_MspInit+0x134>)
 8001a94:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001a98:	2251      	movs	r2, #81	@ 0x51
 8001a9a:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001aaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aae:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ac2:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001ad2:	f000 ff0f 	bl	80028f4 <HAL_DMA_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001adc:	f7ff fc32 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ae8:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <HAL_UART_MspInit+0x130>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001aee:	bf00      	nop
 8001af0:	37e8      	adds	r7, #232	@ 0xe8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40007c00 	.word	0x40007c00
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58021000 	.word	0x58021000
 8001b04:	240006b4 	.word	0x240006b4
 8001b08:	40020010 	.word	0x40020010

08001b0c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8001b14:	f000 fd5a 	bl	80025cc <HAL_GetTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <SPI_Timer_On+0x20>)
 8001b1c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <SPI_Timer_On+0x24>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	24000730 	.word	0x24000730
 8001b30:	24000734 	.word	0x24000734

08001b34 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001b38:	f000 fd48 	bl	80025cc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <SPI_Timer_Status+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	1ad2      	subs	r2, r2, r3
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <SPI_Timer_Status+0x28>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	bf34      	ite	cc
 8001b4c:	2301      	movcc	r3, #1
 8001b4e:	2300      	movcs	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	24000730 	.word	0x24000730
 8001b5c:	24000734 	.word	0x24000734

08001b60 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8001b6a:	f107 020f 	add.w	r2, r7, #15
 8001b6e:	1df9      	adds	r1, r7, #7
 8001b70:	2332      	movs	r3, #50	@ 0x32
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <xchg_spi+0x28>)
 8001b78:	f007 fd72 	bl	8009660 <HAL_SPI_TransmitReceive>
    return rxDat;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	240004c4 	.word	0x240004c4

08001b8c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e00a      	b.n	8001bb2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	18d4      	adds	r4, r2, r3
 8001ba2:	20ff      	movs	r0, #255	@ 0xff
 8001ba4:	f7ff ffdc 	bl	8001b60 <xchg_spi>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3f0      	bcc.n	8001b9c <rcvr_spi_multi+0x10>
	}
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd90      	pop	{r4, r7, pc}

08001bc4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e009      	b.n	8001be8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ffbf 	bl	8001b60 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d3f1      	bcc.n	8001bd4 <xmit_spi_multi+0x10>
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001c02:	f000 fce3 	bl	80025cc <HAL_GetTick>
 8001c06:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8001c0c:	20ff      	movs	r0, #255	@ 0xff
 8001c0e:	f7ff ffa7 	bl	8001b60 <xchg_spi>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2bff      	cmp	r3, #255	@ 0xff
 8001c1a:	d007      	beq.n	8001c2c <wait_ready+0x32>
 8001c1c:	f000 fcd6 	bl	80025cc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8ef      	bhi.n	8001c0c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2bff      	cmp	r3, #255	@ 0xff
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c4a:	4804      	ldr	r0, [pc, #16]	@ (8001c5c <despiselect+0x1c>)
 8001c4c:	f002 fcc4 	bl	80045d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001c50:	20ff      	movs	r0, #255	@ 0xff
 8001c52:	f7ff ff85 	bl	8001b60 <xchg_spi>

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	58020000 	.word	0x58020000

08001c60 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c6a:	480a      	ldr	r0, [pc, #40]	@ (8001c94 <spiselect+0x34>)
 8001c6c:	f002 fcb4 	bl	80045d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001c70:	20ff      	movs	r0, #255	@ 0xff
 8001c72:	f7ff ff75 	bl	8001b60 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001c76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c7a:	f7ff ffbe 	bl	8001bfa <wait_ready>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <spiselect+0x28>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e002      	b.n	8001c8e <spiselect+0x2e>

	despiselect();
 8001c88:	f7ff ffda 	bl	8001c40 <despiselect>
	return 0;	/* Timeout */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	58020000 	.word	0x58020000

08001c98 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8001ca2:	20c8      	movs	r0, #200	@ 0xc8
 8001ca4:	f7ff ff32 	bl	8001b0c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8001ca8:	20ff      	movs	r0, #255	@ 0xff
 8001caa:	f7ff ff59 	bl	8001b60 <xchg_spi>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2bff      	cmp	r3, #255	@ 0xff
 8001cb6:	d104      	bne.n	8001cc2 <rcvr_datablock+0x2a>
 8001cb8:	f7ff ff3c 	bl	8001b34 <SPI_Timer_Status>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f2      	bne.n	8001ca8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2bfe      	cmp	r3, #254	@ 0xfe
 8001cc6:	d001      	beq.n	8001ccc <rcvr_datablock+0x34>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e00a      	b.n	8001ce2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8001ccc:	6839      	ldr	r1, [r7, #0]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff5c 	bl	8001b8c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001cd4:	20ff      	movs	r0, #255	@ 0xff
 8001cd6:	f7ff ff43 	bl	8001b60 <xchg_spi>
 8001cda:	20ff      	movs	r0, #255	@ 0xff
 8001cdc:	f7ff ff40 	bl	8001b60 <xchg_spi>

	return 1;						/* Function succeeded */
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8001cf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cfa:	f7ff ff7e 	bl	8001bfa <wait_ready>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <xmit_datablock+0x1e>
 8001d04:	2300      	movs	r3, #0
 8001d06:	e01e      	b.n	8001d46 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff28 	bl	8001b60 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	2bfd      	cmp	r3, #253	@ 0xfd
 8001d14:	d016      	beq.n	8001d44 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8001d16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff52 	bl	8001bc4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001d20:	20ff      	movs	r0, #255	@ 0xff
 8001d22:	f7ff ff1d 	bl	8001b60 <xchg_spi>
 8001d26:	20ff      	movs	r0, #255	@ 0xff
 8001d28:	f7ff ff1a 	bl	8001b60 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8001d2c:	20ff      	movs	r0, #255	@ 0xff
 8001d2e:	f7ff ff17 	bl	8001b60 <xchg_spi>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d001      	beq.n	8001d44 <xmit_datablock+0x5a>
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <xmit_datablock+0x5c>
	}
	return 1;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	6039      	str	r1, [r7, #0]
 8001d58:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da0e      	bge.n	8001d80 <send_cmd+0x32>
		cmd &= 0x7F;
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d68:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2037      	movs	r0, #55	@ 0x37
 8001d6e:	f7ff ffee 	bl	8001d4e <send_cmd>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d901      	bls.n	8001d80 <send_cmd+0x32>
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	e051      	b.n	8001e24 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d008      	beq.n	8001d98 <send_cmd+0x4a>
		despiselect();
 8001d86:	f7ff ff5b 	bl	8001c40 <despiselect>
		if (!spiselect()) return 0xFF;
 8001d8a:	f7ff ff69 	bl	8001c60 <spiselect>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <send_cmd+0x4a>
 8001d94:	23ff      	movs	r3, #255	@ 0xff
 8001d96:	e045      	b.n	8001e24 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fedd 	bl	8001b60 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	0e1b      	lsrs	r3, r3, #24
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fed7 	bl	8001b60 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fed1 	bl	8001b60 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fecb 	bl	8001b60 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fec6 	bl	8001b60 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <send_cmd+0x94>
 8001dde:	2395      	movs	r3, #149	@ 0x95
 8001de0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d101      	bne.n	8001dec <send_cmd+0x9e>
 8001de8:	2387      	movs	r3, #135	@ 0x87
 8001dea:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff feb6 	bl	8001b60 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d102      	bne.n	8001e00 <send_cmd+0xb2>
 8001dfa:	20ff      	movs	r0, #255	@ 0xff
 8001dfc:	f7ff feb0 	bl	8001b60 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8001e00:	230a      	movs	r3, #10
 8001e02:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8001e04:	20ff      	movs	r0, #255	@ 0xff
 8001e06:	f7ff feab 	bl	8001b60 <xchg_spi>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8001e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da05      	bge.n	8001e22 <send_cmd+0xd4>
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <send_cmd+0xb6>

	return res;							/* Return received response */
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <USER_SPI_initialize+0x14>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d6      	b.n	8001fee <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8001e40:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff8 <USER_SPI_initialize+0x1cc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <USER_SPI_initialize+0x2a>
 8001e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff8 <USER_SPI_initialize+0x1cc>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	e0cb      	b.n	8001fee <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8001e56:	4b69      	ldr	r3, [pc, #420]	@ (8001ffc <USER_SPI_initialize+0x1d0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001e60:	4b66      	ldr	r3, [pc, #408]	@ (8001ffc <USER_SPI_initialize+0x1d0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 42c0 	orr.w	r2, r2, #1610612736	@ 0x60000000
 8001e68:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e005      	b.n	8001e7c <USER_SPI_initialize+0x50>
 8001e70:	20ff      	movs	r0, #255	@ 0xff
 8001e72:	f7ff fe75 	bl	8001b60 <xchg_spi>
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f6      	bne.n	8001e70 <USER_SPI_initialize+0x44>

	ty = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8001e86:	2100      	movs	r1, #0
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff ff60 	bl	8001d4e <send_cmd>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 808b 	bne.w	8001fac <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8001e96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e9a:	f7ff fe37 	bl	8001b0c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8001e9e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001ea2:	2008      	movs	r0, #8
 8001ea4:	f7ff ff53 	bl	8001d4e <send_cmd>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d151      	bne.n	8001f52 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e00d      	b.n	8001ed0 <USER_SPI_initialize+0xa4>
 8001eb4:	7bfc      	ldrb	r4, [r7, #15]
 8001eb6:	20ff      	movs	r0, #255	@ 0xff
 8001eb8:	f7ff fe52 	bl	8001b60 <xchg_spi>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f104 0310 	add.w	r3, r4, #16
 8001ec4:	443b      	add	r3, r7
 8001ec6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d9ee      	bls.n	8001eb4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8001ed6:	7abb      	ldrb	r3, [r7, #10]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d167      	bne.n	8001fac <USER_SPI_initialize+0x180>
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	2baa      	cmp	r3, #170	@ 0xaa
 8001ee0:	d164      	bne.n	8001fac <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8001ee2:	bf00      	nop
 8001ee4:	f7ff fe26 	bl	8001b34 <SPI_Timer_Status>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <USER_SPI_initialize+0xd2>
 8001eee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ef2:	20a9      	movs	r0, #169	@ 0xa9
 8001ef4:	f7ff ff2b 	bl	8001d4e <send_cmd>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8001efe:	f7ff fe19 	bl	8001b34 <SPI_Timer_Status>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d051      	beq.n	8001fac <USER_SPI_initialize+0x180>
 8001f08:	2100      	movs	r1, #0
 8001f0a:	203a      	movs	r0, #58	@ 0x3a
 8001f0c:	f7ff ff1f 	bl	8001d4e <send_cmd>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d14a      	bne.n	8001fac <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e00d      	b.n	8001f38 <USER_SPI_initialize+0x10c>
 8001f1c:	7bfc      	ldrb	r4, [r7, #15]
 8001f1e:	20ff      	movs	r0, #255	@ 0xff
 8001f20:	f7ff fe1e 	bl	8001b60 <xchg_spi>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	f104 0310 	add.w	r3, r4, #16
 8001f2c:	443b      	add	r3, r7
 8001f2e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	3301      	adds	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d9ee      	bls.n	8001f1c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8001f3e:	7a3b      	ldrb	r3, [r7, #8]
 8001f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <USER_SPI_initialize+0x120>
 8001f48:	230c      	movs	r3, #12
 8001f4a:	e000      	b.n	8001f4e <USER_SPI_initialize+0x122>
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	737b      	strb	r3, [r7, #13]
 8001f50:	e02c      	b.n	8001fac <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001f52:	2100      	movs	r1, #0
 8001f54:	20a9      	movs	r0, #169	@ 0xa9
 8001f56:	f7ff fefa 	bl	8001d4e <send_cmd>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d804      	bhi.n	8001f6a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001f60:	2302      	movs	r3, #2
 8001f62:	737b      	strb	r3, [r7, #13]
 8001f64:	23a9      	movs	r3, #169	@ 0xa9
 8001f66:	73bb      	strb	r3, [r7, #14]
 8001f68:	e003      	b.n	8001f72 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	737b      	strb	r3, [r7, #13]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8001f72:	bf00      	nop
 8001f74:	f7ff fdde 	bl	8001b34 <SPI_Timer_Status>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <USER_SPI_initialize+0x162>
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fee3 	bl	8001d4e <send_cmd>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f2      	bne.n	8001f74 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8001f8e:	f7ff fdd1 	bl	8001b34 <SPI_Timer_Status>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <USER_SPI_initialize+0x17c>
 8001f98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f9c:	2010      	movs	r0, #16
 8001f9e:	f7ff fed6 	bl	8001d4e <send_cmd>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <USER_SPI_initialize+0x180>
				ty = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <USER_SPI_initialize+0x1d4>)
 8001fae:	7b7b      	ldrb	r3, [r7, #13]
 8001fb0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8001fb2:	f7ff fe45 	bl	8001c40 <despiselect>

	if (ty) {			/* OK */
 8001fb6:	7b7b      	ldrb	r3, [r7, #13]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <USER_SPI_initialize+0x1d0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <USER_SPI_initialize+0x1d0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001fce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <USER_SPI_initialize+0x1cc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <USER_SPI_initialize+0x1cc>)
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e002      	b.n	8001fe8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8001fe2:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <USER_SPI_initialize+0x1cc>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <USER_SPI_initialize+0x1cc>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b2db      	uxtb	r3, r3
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	24000008 	.word	0x24000008
 8001ffc:	240004c4 	.word	0x240004c4
 8002000:	2400072c 	.word	0x2400072c

08002004 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <USER_SPI_status+0x14>
 8002014:	2301      	movs	r3, #1
 8002016:	e002      	b.n	800201e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <USER_SPI_status+0x28>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	24000008 	.word	0x24000008

08002030 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <USER_SPI_read+0x1c>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <USER_SPI_read+0x20>
 800204c:	2304      	movs	r3, #4
 800204e:	e04d      	b.n	80020ec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002050:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <USER_SPI_read+0xc4>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <USER_SPI_read+0x32>
 800205e:	2303      	movs	r3, #3
 8002060:	e044      	b.n	80020ec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002062:	4b25      	ldr	r3, [pc, #148]	@ (80020f8 <USER_SPI_read+0xc8>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <USER_SPI_read+0x44>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d111      	bne.n	800209e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	2011      	movs	r0, #17
 800207e:	f7ff fe66 	bl	8001d4e <send_cmd>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d129      	bne.n	80020dc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002088:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800208c:	68b8      	ldr	r0, [r7, #8]
 800208e:	f7ff fe03 	bl	8001c98 <rcvr_datablock>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d021      	beq.n	80020dc <USER_SPI_read+0xac>
			count = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	e01e      	b.n	80020dc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	2012      	movs	r0, #18
 80020a2:	f7ff fe54 	bl	8001d4e <send_cmd>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d117      	bne.n	80020dc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80020ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020b0:	68b8      	ldr	r0, [r7, #8]
 80020b2:	f7ff fdf1 	bl	8001c98 <rcvr_datablock>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <USER_SPI_read+0xa2>
				buff += 512;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80020c2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ed      	bne.n	80020ac <USER_SPI_read+0x7c>
 80020d0:	e000      	b.n	80020d4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80020d2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80020d4:	2100      	movs	r1, #0
 80020d6:	200c      	movs	r0, #12
 80020d8:	f7ff fe39 	bl	8001d4e <send_cmd>
		}
	}
	despiselect();
 80020dc:	f7ff fdb0 	bl	8001c40 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	24000008 	.word	0x24000008
 80020f8:	2400072c 	.word	0x2400072c

080020fc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <USER_SPI_write+0x1c>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <USER_SPI_write+0x20>
 8002118:	2304      	movs	r3, #4
 800211a:	e063      	b.n	80021e4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800211c:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <USER_SPI_write+0xf0>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <USER_SPI_write+0x32>
 800212a:	2303      	movs	r3, #3
 800212c:	e05a      	b.n	80021e4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800212e:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <USER_SPI_write+0xf0>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <USER_SPI_write+0x44>
 800213c:	2302      	movs	r3, #2
 800213e:	e051      	b.n	80021e4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002140:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <USER_SPI_write+0xf4>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <USER_SPI_write+0x56>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d110      	bne.n	800217a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	2018      	movs	r0, #24
 800215c:	f7ff fdf7 	bl	8001d4e <send_cmd>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d136      	bne.n	80021d4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002166:	21fe      	movs	r1, #254	@ 0xfe
 8002168:	68b8      	ldr	r0, [r7, #8]
 800216a:	f7ff fdbe 	bl	8001cea <xmit_datablock>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d02f      	beq.n	80021d4 <USER_SPI_write+0xd8>
			count = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	e02c      	b.n	80021d4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <USER_SPI_write+0xf4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f003 0306 	and.w	r3, r3, #6
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <USER_SPI_write+0x92>
 8002186:	6839      	ldr	r1, [r7, #0]
 8002188:	2097      	movs	r0, #151	@ 0x97
 800218a:	f7ff fde0 	bl	8001d4e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	2019      	movs	r0, #25
 8002192:	f7ff fddc 	bl	8001d4e <send_cmd>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d11b      	bne.n	80021d4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800219c:	21fc      	movs	r1, #252	@ 0xfc
 800219e:	68b8      	ldr	r0, [r7, #8]
 80021a0:	f7ff fda3 	bl	8001cea <xmit_datablock>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <USER_SPI_write+0xc4>
				buff += 512;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ee      	bne.n	800219c <USER_SPI_write+0xa0>
 80021be:	e000      	b.n	80021c2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80021c0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80021c2:	21fd      	movs	r1, #253	@ 0xfd
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fd90 	bl	8001cea <xmit_datablock>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <USER_SPI_write+0xd8>
 80021d0:	2301      	movs	r3, #1
 80021d2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80021d4:	f7ff fd34 	bl	8001c40 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf14      	ite	ne
 80021de:	2301      	movne	r3, #1
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	24000008 	.word	0x24000008
 80021f0:	2400072c 	.word	0x2400072c

080021f4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	@ 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	603a      	str	r2, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	460b      	mov	r3, r1
 8002202:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <USER_SPI_ioctl+0x1a>
 800220a:	2304      	movs	r3, #4
 800220c:	e15a      	b.n	80024c4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800220e:	4baf      	ldr	r3, [pc, #700]	@ (80024cc <USER_SPI_ioctl+0x2d8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <USER_SPI_ioctl+0x2c>
 800221c:	2303      	movs	r3, #3
 800221e:	e151      	b.n	80024c4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8002226:	79bb      	ldrb	r3, [r7, #6]
 8002228:	2b04      	cmp	r3, #4
 800222a:	f200 8136 	bhi.w	800249a <USER_SPI_ioctl+0x2a6>
 800222e:	a201      	add	r2, pc, #4	@ (adr r2, 8002234 <USER_SPI_ioctl+0x40>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002249 	.word	0x08002249
 8002238:	0800225d 	.word	0x0800225d
 800223c:	0800249b 	.word	0x0800249b
 8002240:	08002309 	.word	0x08002309
 8002244:	080023ff 	.word	0x080023ff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002248:	f7ff fd0a 	bl	8001c60 <spiselect>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8127 	beq.w	80024a2 <USER_SPI_ioctl+0x2ae>
 8002254:	2300      	movs	r3, #0
 8002256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800225a:	e122      	b.n	80024a2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800225c:	2100      	movs	r1, #0
 800225e:	2009      	movs	r0, #9
 8002260:	f7ff fd75 	bl	8001d4e <send_cmd>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 811d 	bne.w	80024a6 <USER_SPI_ioctl+0x2b2>
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2110      	movs	r1, #16
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fd10 	bl	8001c98 <rcvr_datablock>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8113 	beq.w	80024a6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002280:	7b3b      	ldrb	r3, [r7, #12]
 8002282:	099b      	lsrs	r3, r3, #6
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d111      	bne.n	80022ae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800228a:	7d7b      	ldrb	r3, [r7, #21]
 800228c:	461a      	mov	r2, r3
 800228e:	7d3b      	ldrb	r3, [r7, #20]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	4413      	add	r3, r2
 8002294:	461a      	mov	r2, r3
 8002296:	7cfb      	ldrb	r3, [r7, #19]
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800229e:	4413      	add	r3, r2
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	029a      	lsls	r2, r3, #10
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e028      	b.n	8002300 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80022ae:	7c7b      	ldrb	r3, [r7, #17]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	7dbb      	ldrb	r3, [r7, #22]
 80022b8:	09db      	lsrs	r3, r3, #7
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4413      	add	r3, r2
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	7d7b      	ldrb	r3, [r7, #21]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f003 0306 	and.w	r3, r3, #6
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3302      	adds	r3, #2
 80022d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80022d6:	7d3b      	ldrb	r3, [r7, #20]
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	7cbb      	ldrb	r3, [r7, #18]
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022ec:	4413      	add	r3, r2
 80022ee:	3301      	adds	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80022f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022f6:	3b09      	subs	r3, #9
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	409a      	lsls	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002306:	e0ce      	b.n	80024a6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002308:	4b71      	ldr	r3, [pc, #452]	@ (80024d0 <USER_SPI_ioctl+0x2dc>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d031      	beq.n	8002378 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002314:	2100      	movs	r1, #0
 8002316:	208d      	movs	r0, #141	@ 0x8d
 8002318:	f7ff fd19 	bl	8001d4e <send_cmd>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80c3 	bne.w	80024aa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002324:	20ff      	movs	r0, #255	@ 0xff
 8002326:	f7ff fc1b 	bl	8001b60 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	2110      	movs	r1, #16
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fcb1 	bl	8001c98 <rcvr_datablock>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80b6 	beq.w	80024aa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800233e:	2330      	movs	r3, #48	@ 0x30
 8002340:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002344:	e007      	b.n	8002356 <USER_SPI_ioctl+0x162>
 8002346:	20ff      	movs	r0, #255	@ 0xff
 8002348:	f7ff fc0a 	bl	8001b60 <xchg_spi>
 800234c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002350:	3b01      	subs	r3, #1
 8002352:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f3      	bne.n	8002346 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800235e:	7dbb      	ldrb	r3, [r7, #22]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	2310      	movs	r3, #16
 8002368:	fa03 f202 	lsl.w	r2, r3, r2
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002376:	e098      	b.n	80024aa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002378:	2100      	movs	r1, #0
 800237a:	2009      	movs	r0, #9
 800237c:	f7ff fce7 	bl	8001d4e <send_cmd>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8091 	bne.w	80024aa <USER_SPI_ioctl+0x2b6>
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2110      	movs	r1, #16
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fc82 	bl	8001c98 <rcvr_datablock>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8087 	beq.w	80024aa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800239c:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <USER_SPI_ioctl+0x2dc>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d012      	beq.n	80023ce <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80023a8:	7dbb      	ldrb	r3, [r7, #22]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80023b0:	7dfa      	ldrb	r2, [r7, #23]
 80023b2:	09d2      	lsrs	r2, r2, #7
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	4413      	add	r3, r2
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	7e7b      	ldrb	r3, [r7, #25]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e013      	b.n	80023f6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80023ce:	7dbb      	ldrb	r3, [r7, #22]
 80023d0:	109b      	asrs	r3, r3, #2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	3301      	adds	r3, #1
 80023da:	7dfa      	ldrb	r2, [r7, #23]
 80023dc:	00d2      	lsls	r2, r2, #3
 80023de:	f002 0218 	and.w	r2, r2, #24
 80023e2:	7df9      	ldrb	r1, [r7, #23]
 80023e4:	0949      	lsrs	r1, r1, #5
 80023e6:	b2c9      	uxtb	r1, r1
 80023e8:	440a      	add	r2, r1
 80023ea:	3201      	adds	r2, #1
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80023fc:	e055      	b.n	80024aa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <USER_SPI_ioctl+0x2dc>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f003 0306 	and.w	r3, r3, #6
 8002406:	2b00      	cmp	r3, #0
 8002408:	d051      	beq.n	80024ae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800240a:	f107 020c 	add.w	r2, r7, #12
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	210b      	movs	r1, #11
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff feee 	bl	80021f4 <USER_SPI_ioctl>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d149      	bne.n	80024b2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800241e:	7b3b      	ldrb	r3, [r7, #12]
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d104      	bne.n	8002432 <USER_SPI_ioctl+0x23e>
 8002428:	7dbb      	ldrb	r3, [r7, #22]
 800242a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d041      	beq.n	80024b6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <USER_SPI_ioctl+0x2dc>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800244e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002450:	025b      	lsls	r3, r3, #9
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	025b      	lsls	r3, r3, #9
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800245a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800245c:	2020      	movs	r0, #32
 800245e:	f7ff fc76 	bl	8001d4e <send_cmd>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d128      	bne.n	80024ba <USER_SPI_ioctl+0x2c6>
 8002468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800246a:	2021      	movs	r0, #33	@ 0x21
 800246c:	f7ff fc6f 	bl	8001d4e <send_cmd>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d121      	bne.n	80024ba <USER_SPI_ioctl+0x2c6>
 8002476:	2100      	movs	r1, #0
 8002478:	2026      	movs	r0, #38	@ 0x26
 800247a:	f7ff fc68 	bl	8001d4e <send_cmd>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11a      	bne.n	80024ba <USER_SPI_ioctl+0x2c6>
 8002484:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002488:	f7ff fbb7 	bl	8001bfa <wait_ready>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d013      	beq.n	80024ba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002492:	2300      	movs	r3, #0
 8002494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002498:	e00f      	b.n	80024ba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800249a:	2304      	movs	r3, #4
 800249c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80024a0:	e00c      	b.n	80024bc <USER_SPI_ioctl+0x2c8>
		break;
 80024a2:	bf00      	nop
 80024a4:	e00a      	b.n	80024bc <USER_SPI_ioctl+0x2c8>
		break;
 80024a6:	bf00      	nop
 80024a8:	e008      	b.n	80024bc <USER_SPI_ioctl+0x2c8>
		break;
 80024aa:	bf00      	nop
 80024ac:	e006      	b.n	80024bc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80024ae:	bf00      	nop
 80024b0:	e004      	b.n	80024bc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <USER_SPI_ioctl+0x2c8>
		break;
 80024ba:	bf00      	nop
	}

	despiselect();
 80024bc:	f7ff fbc0 	bl	8001c40 <despiselect>

	return res;
 80024c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3730      	adds	r7, #48	@ 0x30
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	24000008 	.word	0x24000008
 80024d0:	2400072c 	.word	0x2400072c

080024d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024d4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002510 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80024d8:	f7ff fa18 	bl	800190c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024dc:	f7ff f976 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e0:	480c      	ldr	r0, [pc, #48]	@ (8002514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024e2:	490d      	ldr	r1, [pc, #52]	@ (8002518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e4:	4a0d      	ldr	r2, [pc, #52]	@ (800251c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e8:	e002      	b.n	80024f0 <LoopCopyDataInit>

080024ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ee:	3304      	adds	r3, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f4:	d3f9      	bcc.n	80024ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024fc:	e001      	b.n	8002502 <LoopFillZerobss>

080024fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002500:	3204      	adds	r2, #4

08002502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002504:	d3fb      	bcc.n	80024fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002506:	f00e fc5d 	bl	8010dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800250a:	f7fe fe31 	bl	8001170 <main>
  bx  lr
 800250e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002510:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002514:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002518:	24000170 	.word	0x24000170
  ldr r2, =_sidata
 800251c:	08010fc4 	.word	0x08010fc4
  ldr r2, =_sbss
 8002520:	24000170 	.word	0x24000170
  ldr r4, =_ebss
 8002524:	240061c8 	.word	0x240061c8

08002528 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC3_IRQHandler>
	...

0800252c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002532:	2003      	movs	r0, #3
 8002534:	f000 f933 	bl	800279e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002538:	f004 faca 	bl	8006ad0 <HAL_RCC_GetSysClockFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <HAL_Init+0x68>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	4913      	ldr	r1, [pc, #76]	@ (8002598 <HAL_Init+0x6c>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002556:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <HAL_Init+0x68>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	4a0e      	ldr	r2, [pc, #56]	@ (8002598 <HAL_Init+0x6c>)
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <HAL_Init+0x70>)
 800256e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002570:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <HAL_Init+0x74>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002576:	200f      	movs	r0, #15
 8002578:	f7ff f87e 	bl	8001678 <HAL_InitTick>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e002      	b.n	800258c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002586:	f7ff f859 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58024400 	.word	0x58024400
 8002598:	08010f74 	.word	0x08010f74
 800259c:	24000004 	.word	0x24000004
 80025a0:	24000000 	.word	0x24000000

080025a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_IncTick+0x20>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_IncTick+0x24>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_IncTick+0x24>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	24000010 	.word	0x24000010
 80025c8:	24000738 	.word	0x24000738

080025cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return uwTick;
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_GetTick+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	24000738 	.word	0x24000738

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff ffee 	bl	80025cc <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffde 	bl	80025cc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	24000010 	.word	0x24000010

0800262c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <HAL_GetREVID+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0c1b      	lsrs	r3, r3, #16
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	5c001000 	.word	0x5c001000

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <__NVIC_SetPriorityGrouping+0x40>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800266c:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <__NVIC_SetPriorityGrouping+0x40>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00
 8002688:	05fa0000 	.word	0x05fa0000

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	@ (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	@ (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff4c 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c2:	f7ff ff63 	bl	800268c <__NVIC_GetPriorityGrouping>
 80027c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f7ff ffb3 	bl	8002738 <NVIC_EncodePriority>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff82 	bl	80026e4 <__NVIC_SetPriority>
}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff56 	bl	80026a8 <__NVIC_EnableIRQ>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002808:	f3bf 8f5f 	dmb	sy
}
 800280c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <HAL_MPU_Disable+0x28>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	4a06      	ldr	r2, [pc, #24]	@ (800282c <HAL_MPU_Disable+0x28>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002818:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_MPU_Disable+0x2c>)
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	e000ed90 	.word	0xe000ed90

08002834 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800283c:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <HAL_MPU_Enable+0x38>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_MPU_Enable+0x3c>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_MPU_Enable+0x3c>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002852:	f3bf 8f4f 	dsb	sy
}
 8002856:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002858:	f3bf 8f6f 	isb	sy
}
 800285c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed90 	.word	0xe000ed90
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	785a      	ldrb	r2, [r3, #1]
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_MPU_ConfigRegion+0x7c>)
 8002882:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002884:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <HAL_MPU_ConfigRegion+0x7c>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <HAL_MPU_ConfigRegion+0x7c>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002890:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_MPU_ConfigRegion+0x7c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7b1b      	ldrb	r3, [r3, #12]
 800289c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7adb      	ldrb	r3, [r3, #11]
 80028a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7a9b      	ldrb	r3, [r3, #10]
 80028aa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7b5b      	ldrb	r3, [r3, #13]
 80028b2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7b9b      	ldrb	r3, [r3, #14]
 80028ba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7bdb      	ldrb	r3, [r3, #15]
 80028c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7a5b      	ldrb	r3, [r3, #9]
 80028ca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7a1b      	ldrb	r3, [r3, #8]
 80028d2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028d4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028dc:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028de:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028e0:	6113      	str	r3, [r2, #16]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed90 	.word	0xe000ed90

080028f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff fe66 	bl	80025cc <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e316      	b.n	8002f3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a66      	ldr	r2, [pc, #408]	@ (8002aac <HAL_DMA_Init+0x1b8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d04a      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <HAL_DMA_Init+0x1bc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d045      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a63      	ldr	r2, [pc, #396]	@ (8002ab4 <HAL_DMA_Init+0x1c0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d040      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a62      	ldr	r2, [pc, #392]	@ (8002ab8 <HAL_DMA_Init+0x1c4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d03b      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a60      	ldr	r2, [pc, #384]	@ (8002abc <HAL_DMA_Init+0x1c8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d036      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a5f      	ldr	r2, [pc, #380]	@ (8002ac0 <HAL_DMA_Init+0x1cc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d031      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac4 <HAL_DMA_Init+0x1d0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d02c      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac8 <HAL_DMA_Init+0x1d4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d027      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5a      	ldr	r2, [pc, #360]	@ (8002acc <HAL_DMA_Init+0x1d8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d022      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a59      	ldr	r2, [pc, #356]	@ (8002ad0 <HAL_DMA_Init+0x1dc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d01d      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a57      	ldr	r2, [pc, #348]	@ (8002ad4 <HAL_DMA_Init+0x1e0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d018      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a56      	ldr	r2, [pc, #344]	@ (8002ad8 <HAL_DMA_Init+0x1e4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a54      	ldr	r2, [pc, #336]	@ (8002adc <HAL_DMA_Init+0x1e8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00e      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a53      	ldr	r2, [pc, #332]	@ (8002ae0 <HAL_DMA_Init+0x1ec>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a51      	ldr	r2, [pc, #324]	@ (8002ae4 <HAL_DMA_Init+0x1f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_Init+0xb8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a50      	ldr	r2, [pc, #320]	@ (8002ae8 <HAL_DMA_Init+0x1f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_DMA_Init+0xbc>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_DMA_Init+0xbe>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 813b 	beq.w	8002c2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a37      	ldr	r2, [pc, #220]	@ (8002aac <HAL_DMA_Init+0x1b8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d04a      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a36      	ldr	r2, [pc, #216]	@ (8002ab0 <HAL_DMA_Init+0x1bc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d045      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a34      	ldr	r2, [pc, #208]	@ (8002ab4 <HAL_DMA_Init+0x1c0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d040      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a33      	ldr	r2, [pc, #204]	@ (8002ab8 <HAL_DMA_Init+0x1c4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d03b      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a31      	ldr	r2, [pc, #196]	@ (8002abc <HAL_DMA_Init+0x1c8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d036      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a30      	ldr	r2, [pc, #192]	@ (8002ac0 <HAL_DMA_Init+0x1cc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d031      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2e      	ldr	r2, [pc, #184]	@ (8002ac4 <HAL_DMA_Init+0x1d0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02c      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac8 <HAL_DMA_Init+0x1d4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d027      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002acc <HAL_DMA_Init+0x1d8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d022      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad0 <HAL_DMA_Init+0x1dc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d01d      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a28      	ldr	r2, [pc, #160]	@ (8002ad4 <HAL_DMA_Init+0x1e0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d018      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a27      	ldr	r2, [pc, #156]	@ (8002ad8 <HAL_DMA_Init+0x1e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a25      	ldr	r2, [pc, #148]	@ (8002adc <HAL_DMA_Init+0x1e8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a24      	ldr	r2, [pc, #144]	@ (8002ae0 <HAL_DMA_Init+0x1ec>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a22      	ldr	r2, [pc, #136]	@ (8002ae4 <HAL_DMA_Init+0x1f0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_DMA_Init+0x174>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a21      	ldr	r2, [pc, #132]	@ (8002ae8 <HAL_DMA_Init+0x1f4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <HAL_DMA_Init+0x186>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e007      	b.n	8002a8a <HAL_DMA_Init+0x196>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a8a:	e02f      	b.n	8002aec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8c:	f7ff fd9e 	bl	80025cc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d928      	bls.n	8002aec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e246      	b.n	8002f3a <HAL_DMA_Init+0x646>
 8002aac:	40020010 	.word	0x40020010
 8002ab0:	40020028 	.word	0x40020028
 8002ab4:	40020040 	.word	0x40020040
 8002ab8:	40020058 	.word	0x40020058
 8002abc:	40020070 	.word	0x40020070
 8002ac0:	40020088 	.word	0x40020088
 8002ac4:	400200a0 	.word	0x400200a0
 8002ac8:	400200b8 	.word	0x400200b8
 8002acc:	40020410 	.word	0x40020410
 8002ad0:	40020428 	.word	0x40020428
 8002ad4:	40020440 	.word	0x40020440
 8002ad8:	40020458 	.word	0x40020458
 8002adc:	40020470 	.word	0x40020470
 8002ae0:	40020488 	.word	0x40020488
 8002ae4:	400204a0 	.word	0x400204a0
 8002ae8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1c8      	bne.n	8002a8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4b83      	ldr	r3, [pc, #524]	@ (8002d14 <HAL_DMA_Init+0x420>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b50:	4b71      	ldr	r3, [pc, #452]	@ (8002d18 <HAL_DMA_Init+0x424>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b71      	ldr	r3, [pc, #452]	@ (8002d1c <HAL_DMA_Init+0x428>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b5c:	d328      	bcc.n	8002bb0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b28      	cmp	r3, #40	@ 0x28
 8002b64:	d903      	bls.n	8002b6e <HAL_DMA_Init+0x27a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b6c:	d917      	bls.n	8002b9e <HAL_DMA_Init+0x2aa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b74:	d903      	bls.n	8002b7e <HAL_DMA_Init+0x28a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b42      	cmp	r3, #66	@ 0x42
 8002b7c:	d90f      	bls.n	8002b9e <HAL_DMA_Init+0x2aa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b46      	cmp	r3, #70	@ 0x46
 8002b84:	d903      	bls.n	8002b8e <HAL_DMA_Init+0x29a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b48      	cmp	r3, #72	@ 0x48
 8002b8c:	d907      	bls.n	8002b9e <HAL_DMA_Init+0x2aa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b94:	d905      	bls.n	8002ba2 <HAL_DMA_Init+0x2ae>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b52      	cmp	r3, #82	@ 0x52
 8002b9c:	d801      	bhi.n	8002ba2 <HAL_DMA_Init+0x2ae>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_DMA_Init+0x2b0>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d117      	bne.n	8002c0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f001 f9b9 	bl	8003f64 <DMA_CheckFifoParam>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e197      	b.n	8002f3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f001 f8f4 	bl	8003e00 <DMA_CalcBaseAndBitshift>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	223f      	movs	r2, #63	@ 0x3f
 8002c26:	409a      	lsls	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e0cd      	b.n	8002dca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	@ (8002d20 <HAL_DMA_Init+0x42c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d022      	beq.n	8002c7e <HAL_DMA_Init+0x38a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a39      	ldr	r2, [pc, #228]	@ (8002d24 <HAL_DMA_Init+0x430>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01d      	beq.n	8002c7e <HAL_DMA_Init+0x38a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a38      	ldr	r2, [pc, #224]	@ (8002d28 <HAL_DMA_Init+0x434>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d018      	beq.n	8002c7e <HAL_DMA_Init+0x38a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a36      	ldr	r2, [pc, #216]	@ (8002d2c <HAL_DMA_Init+0x438>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_DMA_Init+0x38a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a35      	ldr	r2, [pc, #212]	@ (8002d30 <HAL_DMA_Init+0x43c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_DMA_Init+0x38a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a33      	ldr	r2, [pc, #204]	@ (8002d34 <HAL_DMA_Init+0x440>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_DMA_Init+0x38a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a32      	ldr	r2, [pc, #200]	@ (8002d38 <HAL_DMA_Init+0x444>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d004      	beq.n	8002c7e <HAL_DMA_Init+0x38a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a30      	ldr	r2, [pc, #192]	@ (8002d3c <HAL_DMA_Init+0x448>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_DMA_Init+0x38e>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_DMA_Init+0x390>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8097 	beq.w	8002db8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a24      	ldr	r2, [pc, #144]	@ (8002d20 <HAL_DMA_Init+0x42c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d021      	beq.n	8002cd8 <HAL_DMA_Init+0x3e4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a22      	ldr	r2, [pc, #136]	@ (8002d24 <HAL_DMA_Init+0x430>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01c      	beq.n	8002cd8 <HAL_DMA_Init+0x3e4>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <HAL_DMA_Init+0x434>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d017      	beq.n	8002cd8 <HAL_DMA_Init+0x3e4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <HAL_DMA_Init+0x438>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d012      	beq.n	8002cd8 <HAL_DMA_Init+0x3e4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d30 <HAL_DMA_Init+0x43c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00d      	beq.n	8002cd8 <HAL_DMA_Init+0x3e4>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d34 <HAL_DMA_Init+0x440>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d008      	beq.n	8002cd8 <HAL_DMA_Init+0x3e4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	@ (8002d38 <HAL_DMA_Init+0x444>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <HAL_DMA_Init+0x3e4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	@ (8002d3c <HAL_DMA_Init+0x448>)
 8002cd6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_DMA_Init+0x44c>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b40      	cmp	r3, #64	@ 0x40
 8002cfe:	d021      	beq.n	8002d44 <HAL_DMA_Init+0x450>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b80      	cmp	r3, #128	@ 0x80
 8002d06:	d102      	bne.n	8002d0e <HAL_DMA_Init+0x41a>
 8002d08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d0c:	e01b      	b.n	8002d46 <HAL_DMA_Init+0x452>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e019      	b.n	8002d46 <HAL_DMA_Init+0x452>
 8002d12:	bf00      	nop
 8002d14:	fe10803f 	.word	0xfe10803f
 8002d18:	5c001000 	.word	0x5c001000
 8002d1c:	ffff0000 	.word	0xffff0000
 8002d20:	58025408 	.word	0x58025408
 8002d24:	5802541c 	.word	0x5802541c
 8002d28:	58025430 	.word	0x58025430
 8002d2c:	58025444 	.word	0x58025444
 8002d30:	58025458 	.word	0x58025458
 8002d34:	5802546c 	.word	0x5802546c
 8002d38:	58025480 	.word	0x58025480
 8002d3c:	58025494 	.word	0x58025494
 8002d40:	fffe000f 	.word	0xfffe000f
 8002d44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002f44 <HAL_DMA_Init+0x650>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f48 <HAL_DMA_Init+0x654>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	009a      	lsls	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f001 f82f 	bl	8003e00 <DMA_CalcBaseAndBitshift>
 8002da2:	4603      	mov	r3, r0
 8002da4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e008      	b.n	8002dca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2240      	movs	r2, #64	@ 0x40
 8002dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0b7      	b.n	8002f3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5f      	ldr	r2, [pc, #380]	@ (8002f4c <HAL_DMA_Init+0x658>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d072      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f50 <HAL_DMA_Init+0x65c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d06d      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f54 <HAL_DMA_Init+0x660>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d068      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5a      	ldr	r2, [pc, #360]	@ (8002f58 <HAL_DMA_Init+0x664>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d063      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a59      	ldr	r2, [pc, #356]	@ (8002f5c <HAL_DMA_Init+0x668>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d05e      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a57      	ldr	r2, [pc, #348]	@ (8002f60 <HAL_DMA_Init+0x66c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d059      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a56      	ldr	r2, [pc, #344]	@ (8002f64 <HAL_DMA_Init+0x670>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d054      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a54      	ldr	r2, [pc, #336]	@ (8002f68 <HAL_DMA_Init+0x674>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04f      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a53      	ldr	r2, [pc, #332]	@ (8002f6c <HAL_DMA_Init+0x678>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04a      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a51      	ldr	r2, [pc, #324]	@ (8002f70 <HAL_DMA_Init+0x67c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d045      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a50      	ldr	r2, [pc, #320]	@ (8002f74 <HAL_DMA_Init+0x680>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d040      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f78 <HAL_DMA_Init+0x684>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d03b      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a4d      	ldr	r2, [pc, #308]	@ (8002f7c <HAL_DMA_Init+0x688>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d036      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a4b      	ldr	r2, [pc, #300]	@ (8002f80 <HAL_DMA_Init+0x68c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d031      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f84 <HAL_DMA_Init+0x690>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d02c      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a48      	ldr	r2, [pc, #288]	@ (8002f88 <HAL_DMA_Init+0x694>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d027      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a47      	ldr	r2, [pc, #284]	@ (8002f8c <HAL_DMA_Init+0x698>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a45      	ldr	r2, [pc, #276]	@ (8002f90 <HAL_DMA_Init+0x69c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a44      	ldr	r2, [pc, #272]	@ (8002f94 <HAL_DMA_Init+0x6a0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d018      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a42      	ldr	r2, [pc, #264]	@ (8002f98 <HAL_DMA_Init+0x6a4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a41      	ldr	r2, [pc, #260]	@ (8002f9c <HAL_DMA_Init+0x6a8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa0 <HAL_DMA_Init+0x6ac>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa4 <HAL_DMA_Init+0x6b0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_DMA_Init+0x5c6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa8 <HAL_DMA_Init+0x6b4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_DMA_Init+0x5ca>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_DMA_Init+0x5cc>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d032      	beq.n	8002f2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f001 f8c9 	bl	800405c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b80      	cmp	r3, #128	@ 0x80
 8002ed0:	d102      	bne.n	8002ed8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002eec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <HAL_DMA_Init+0x624>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d80c      	bhi.n	8002f18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f001 f946 	bl	8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	e008      	b.n	8002f2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	a7fdabf8 	.word	0xa7fdabf8
 8002f48:	cccccccd 	.word	0xcccccccd
 8002f4c:	40020010 	.word	0x40020010
 8002f50:	40020028 	.word	0x40020028
 8002f54:	40020040 	.word	0x40020040
 8002f58:	40020058 	.word	0x40020058
 8002f5c:	40020070 	.word	0x40020070
 8002f60:	40020088 	.word	0x40020088
 8002f64:	400200a0 	.word	0x400200a0
 8002f68:	400200b8 	.word	0x400200b8
 8002f6c:	40020410 	.word	0x40020410
 8002f70:	40020428 	.word	0x40020428
 8002f74:	40020440 	.word	0x40020440
 8002f78:	40020458 	.word	0x40020458
 8002f7c:	40020470 	.word	0x40020470
 8002f80:	40020488 	.word	0x40020488
 8002f84:	400204a0 	.word	0x400204a0
 8002f88:	400204b8 	.word	0x400204b8
 8002f8c:	58025408 	.word	0x58025408
 8002f90:	5802541c 	.word	0x5802541c
 8002f94:	58025430 	.word	0x58025430
 8002f98:	58025444 	.word	0x58025444
 8002f9c:	58025458 	.word	0x58025458
 8002fa0:	5802546c 	.word	0x5802546c
 8002fa4:	58025480 	.word	0x58025480
 8002fa8:	58025494 	.word	0x58025494

08002fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	@ 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb8:	4b67      	ldr	r3, [pc, #412]	@ (8003158 <HAL_DMA_IRQHandler+0x1ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a67      	ldr	r2, [pc, #412]	@ (800315c <HAL_DMA_IRQHandler+0x1b0>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a5f      	ldr	r2, [pc, #380]	@ (8003160 <HAL_DMA_IRQHandler+0x1b4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d04a      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5d      	ldr	r2, [pc, #372]	@ (8003164 <HAL_DMA_IRQHandler+0x1b8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d045      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8003168 <HAL_DMA_IRQHandler+0x1bc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d040      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5a      	ldr	r2, [pc, #360]	@ (800316c <HAL_DMA_IRQHandler+0x1c0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d03b      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a59      	ldr	r2, [pc, #356]	@ (8003170 <HAL_DMA_IRQHandler+0x1c4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d036      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <HAL_DMA_IRQHandler+0x1c8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d031      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a56      	ldr	r2, [pc, #344]	@ (8003178 <HAL_DMA_IRQHandler+0x1cc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d02c      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a54      	ldr	r2, [pc, #336]	@ (800317c <HAL_DMA_IRQHandler+0x1d0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d027      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a53      	ldr	r2, [pc, #332]	@ (8003180 <HAL_DMA_IRQHandler+0x1d4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a51      	ldr	r2, [pc, #324]	@ (8003184 <HAL_DMA_IRQHandler+0x1d8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01d      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a50      	ldr	r2, [pc, #320]	@ (8003188 <HAL_DMA_IRQHandler+0x1dc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a4e      	ldr	r2, [pc, #312]	@ (800318c <HAL_DMA_IRQHandler+0x1e0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4d      	ldr	r2, [pc, #308]	@ (8003190 <HAL_DMA_IRQHandler+0x1e4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a4b      	ldr	r2, [pc, #300]	@ (8003194 <HAL_DMA_IRQHandler+0x1e8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <HAL_DMA_IRQHandler+0x1ec>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_DMA_IRQHandler+0xd2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a48      	ldr	r2, [pc, #288]	@ (800319c <HAL_DMA_IRQHandler+0x1f0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_DMA_IRQHandler+0xd6>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_DMA_IRQHandler+0xd8>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 842b 	beq.w	80038e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2208      	movs	r2, #8
 8003094:	409a      	lsls	r2, r3
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80a2 	beq.w	80031e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003160 <HAL_DMA_IRQHandler+0x1b4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04a      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003164 <HAL_DMA_IRQHandler+0x1b8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d045      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <HAL_DMA_IRQHandler+0x1bc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d040      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a2a      	ldr	r2, [pc, #168]	@ (800316c <HAL_DMA_IRQHandler+0x1c0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d03b      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <HAL_DMA_IRQHandler+0x1c4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d036      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <HAL_DMA_IRQHandler+0x1c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d031      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a25      	ldr	r2, [pc, #148]	@ (8003178 <HAL_DMA_IRQHandler+0x1cc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02c      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a24      	ldr	r2, [pc, #144]	@ (800317c <HAL_DMA_IRQHandler+0x1d0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d027      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a22      	ldr	r2, [pc, #136]	@ (8003180 <HAL_DMA_IRQHandler+0x1d4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d022      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a21      	ldr	r2, [pc, #132]	@ (8003184 <HAL_DMA_IRQHandler+0x1d8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d01d      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1f      	ldr	r2, [pc, #124]	@ (8003188 <HAL_DMA_IRQHandler+0x1dc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <HAL_DMA_IRQHandler+0x1e0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <HAL_DMA_IRQHandler+0x1e4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1b      	ldr	r2, [pc, #108]	@ (8003194 <HAL_DMA_IRQHandler+0x1e8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a19      	ldr	r2, [pc, #100]	@ (8003198 <HAL_DMA_IRQHandler+0x1ec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_DMA_IRQHandler+0x194>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_DMA_IRQHandler+0x1f0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d12f      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x1f4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e02e      	b.n	80031b4 <HAL_DMA_IRQHandler+0x208>
 8003156:	bf00      	nop
 8003158:	24000000 	.word	0x24000000
 800315c:	1b4e81b5 	.word	0x1b4e81b5
 8003160:	40020010 	.word	0x40020010
 8003164:	40020028 	.word	0x40020028
 8003168:	40020040 	.word	0x40020040
 800316c:	40020058 	.word	0x40020058
 8003170:	40020070 	.word	0x40020070
 8003174:	40020088 	.word	0x40020088
 8003178:	400200a0 	.word	0x400200a0
 800317c:	400200b8 	.word	0x400200b8
 8003180:	40020410 	.word	0x40020410
 8003184:	40020428 	.word	0x40020428
 8003188:	40020440 	.word	0x40020440
 800318c:	40020458 	.word	0x40020458
 8003190:	40020470 	.word	0x40020470
 8003194:	40020488 	.word	0x40020488
 8003198:	400204a0 	.word	0x400204a0
 800319c:	400204b8 	.word	0x400204b8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d015      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2208      	movs	r2, #8
 80031d2:	409a      	lsls	r2, r3
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06e      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a69      	ldr	r2, [pc, #420]	@ (80033a4 <HAL_DMA_IRQHandler+0x3f8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d04a      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a67      	ldr	r2, [pc, #412]	@ (80033a8 <HAL_DMA_IRQHandler+0x3fc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d045      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a66      	ldr	r2, [pc, #408]	@ (80033ac <HAL_DMA_IRQHandler+0x400>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d040      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a64      	ldr	r2, [pc, #400]	@ (80033b0 <HAL_DMA_IRQHandler+0x404>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d03b      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a63      	ldr	r2, [pc, #396]	@ (80033b4 <HAL_DMA_IRQHandler+0x408>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d036      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a61      	ldr	r2, [pc, #388]	@ (80033b8 <HAL_DMA_IRQHandler+0x40c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d031      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a60      	ldr	r2, [pc, #384]	@ (80033bc <HAL_DMA_IRQHandler+0x410>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d02c      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5e      	ldr	r2, [pc, #376]	@ (80033c0 <HAL_DMA_IRQHandler+0x414>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d027      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a5d      	ldr	r2, [pc, #372]	@ (80033c4 <HAL_DMA_IRQHandler+0x418>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d022      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5b      	ldr	r2, [pc, #364]	@ (80033c8 <HAL_DMA_IRQHandler+0x41c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01d      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a5a      	ldr	r2, [pc, #360]	@ (80033cc <HAL_DMA_IRQHandler+0x420>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d018      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a58      	ldr	r2, [pc, #352]	@ (80033d0 <HAL_DMA_IRQHandler+0x424>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a57      	ldr	r2, [pc, #348]	@ (80033d4 <HAL_DMA_IRQHandler+0x428>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00e      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a55      	ldr	r2, [pc, #340]	@ (80033d8 <HAL_DMA_IRQHandler+0x42c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a54      	ldr	r2, [pc, #336]	@ (80033dc <HAL_DMA_IRQHandler+0x430>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ee>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_DMA_IRQHandler+0x434>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10a      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x304>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e003      	b.n	80032b8 <HAL_DMA_IRQHandler+0x30c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2204      	movs	r2, #4
 80032e2:	409a      	lsls	r2, r3
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 808f 	beq.w	800340c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2c      	ldr	r2, [pc, #176]	@ (80033a4 <HAL_DMA_IRQHandler+0x3f8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04a      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <HAL_DMA_IRQHandler+0x3fc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d045      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_DMA_IRQHandler+0x400>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d040      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a27      	ldr	r2, [pc, #156]	@ (80033b0 <HAL_DMA_IRQHandler+0x404>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03b      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a26      	ldr	r2, [pc, #152]	@ (80033b4 <HAL_DMA_IRQHandler+0x408>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d036      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a24      	ldr	r2, [pc, #144]	@ (80033b8 <HAL_DMA_IRQHandler+0x40c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a23      	ldr	r2, [pc, #140]	@ (80033bc <HAL_DMA_IRQHandler+0x410>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d02c      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a21      	ldr	r2, [pc, #132]	@ (80033c0 <HAL_DMA_IRQHandler+0x414>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a20      	ldr	r2, [pc, #128]	@ (80033c4 <HAL_DMA_IRQHandler+0x418>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1e      	ldr	r2, [pc, #120]	@ (80033c8 <HAL_DMA_IRQHandler+0x41c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01d      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_DMA_IRQHandler+0x420>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_DMA_IRQHandler+0x424>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <HAL_DMA_IRQHandler+0x428>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_DMA_IRQHandler+0x42c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <HAL_DMA_IRQHandler+0x430>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_DMA_IRQHandler+0x3e2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <HAL_DMA_IRQHandler+0x434>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d12a      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x438>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e023      	b.n	80033ec <HAL_DMA_IRQHandler+0x440>
 80033a4:	40020010 	.word	0x40020010
 80033a8:	40020028 	.word	0x40020028
 80033ac:	40020040 	.word	0x40020040
 80033b0:	40020058 	.word	0x40020058
 80033b4:	40020070 	.word	0x40020070
 80033b8:	40020088 	.word	0x40020088
 80033bc:	400200a0 	.word	0x400200a0
 80033c0:	400200b8 	.word	0x400200b8
 80033c4:	40020410 	.word	0x40020410
 80033c8:	40020428 	.word	0x40020428
 80033cc:	40020440 	.word	0x40020440
 80033d0:	40020458 	.word	0x40020458
 80033d4:	40020470 	.word	0x40020470
 80033d8:	40020488 	.word	0x40020488
 80033dc:	400204a0 	.word	0x400204a0
 80033e0:	400204b8 	.word	0x400204b8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2210      	movs	r2, #16
 8003416:	409a      	lsls	r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a6 	beq.w	800356e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a85      	ldr	r2, [pc, #532]	@ (800363c <HAL_DMA_IRQHandler+0x690>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a83      	ldr	r2, [pc, #524]	@ (8003640 <HAL_DMA_IRQHandler+0x694>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a82      	ldr	r2, [pc, #520]	@ (8003644 <HAL_DMA_IRQHandler+0x698>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a80      	ldr	r2, [pc, #512]	@ (8003648 <HAL_DMA_IRQHandler+0x69c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7f      	ldr	r2, [pc, #508]	@ (800364c <HAL_DMA_IRQHandler+0x6a0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7d      	ldr	r2, [pc, #500]	@ (8003650 <HAL_DMA_IRQHandler+0x6a4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7c      	ldr	r2, [pc, #496]	@ (8003654 <HAL_DMA_IRQHandler+0x6a8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a7a      	ldr	r2, [pc, #488]	@ (8003658 <HAL_DMA_IRQHandler+0x6ac>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a79      	ldr	r2, [pc, #484]	@ (800365c <HAL_DMA_IRQHandler+0x6b0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a77      	ldr	r2, [pc, #476]	@ (8003660 <HAL_DMA_IRQHandler+0x6b4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a76      	ldr	r2, [pc, #472]	@ (8003664 <HAL_DMA_IRQHandler+0x6b8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a74      	ldr	r2, [pc, #464]	@ (8003668 <HAL_DMA_IRQHandler+0x6bc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a73      	ldr	r2, [pc, #460]	@ (800366c <HAL_DMA_IRQHandler+0x6c0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a71      	ldr	r2, [pc, #452]	@ (8003670 <HAL_DMA_IRQHandler+0x6c4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a70      	ldr	r2, [pc, #448]	@ (8003674 <HAL_DMA_IRQHandler+0x6c8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x516>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003678 <HAL_DMA_IRQHandler+0x6cc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10a      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x52c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e009      	b.n	80034ec <HAL_DMA_IRQHandler+0x540>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03e      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2210      	movs	r2, #16
 80034fa:	409a      	lsls	r2, r3
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d024      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
 800352c:	e01f      	b.n	800356e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01b      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
 800353e:	e016      	b.n	800356e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2220      	movs	r2, #32
 8003578:	409a      	lsls	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8110 	beq.w	80037a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2c      	ldr	r2, [pc, #176]	@ (800363c <HAL_DMA_IRQHandler+0x690>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2b      	ldr	r2, [pc, #172]	@ (8003640 <HAL_DMA_IRQHandler+0x694>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a29      	ldr	r2, [pc, #164]	@ (8003644 <HAL_DMA_IRQHandler+0x698>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a28      	ldr	r2, [pc, #160]	@ (8003648 <HAL_DMA_IRQHandler+0x69c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a26      	ldr	r2, [pc, #152]	@ (800364c <HAL_DMA_IRQHandler+0x6a0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a25      	ldr	r2, [pc, #148]	@ (8003650 <HAL_DMA_IRQHandler+0x6a4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a23      	ldr	r2, [pc, #140]	@ (8003654 <HAL_DMA_IRQHandler+0x6a8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a22      	ldr	r2, [pc, #136]	@ (8003658 <HAL_DMA_IRQHandler+0x6ac>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a20      	ldr	r2, [pc, #128]	@ (800365c <HAL_DMA_IRQHandler+0x6b0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_DMA_IRQHandler+0x6b4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <HAL_DMA_IRQHandler+0x6b8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <HAL_DMA_IRQHandler+0x6bc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1a      	ldr	r2, [pc, #104]	@ (800366c <HAL_DMA_IRQHandler+0x6c0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_DMA_IRQHandler+0x6c4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a17      	ldr	r2, [pc, #92]	@ (8003674 <HAL_DMA_IRQHandler+0x6c8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_IRQHandler+0x678>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a16      	ldr	r2, [pc, #88]	@ (8003678 <HAL_DMA_IRQHandler+0x6cc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d12b      	bne.n	800367c <HAL_DMA_IRQHandler+0x6d0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e02a      	b.n	8003690 <HAL_DMA_IRQHandler+0x6e4>
 800363a:	bf00      	nop
 800363c:	40020010 	.word	0x40020010
 8003640:	40020028 	.word	0x40020028
 8003644:	40020040 	.word	0x40020040
 8003648:	40020058 	.word	0x40020058
 800364c:	40020070 	.word	0x40020070
 8003650:	40020088 	.word	0x40020088
 8003654:	400200a0 	.word	0x400200a0
 8003658:	400200b8 	.word	0x400200b8
 800365c:	40020410 	.word	0x40020410
 8003660:	40020428 	.word	0x40020428
 8003664:	40020440 	.word	0x40020440
 8003668:	40020458 	.word	0x40020458
 800366c:	40020470 	.word	0x40020470
 8003670:	40020488 	.word	0x40020488
 8003674:	400204a0 	.word	0x400204a0
 8003678:	400204b8 	.word	0x400204b8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8087 	beq.w	80037a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2220      	movs	r2, #32
 80036a0:	409a      	lsls	r2, r3
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d139      	bne.n	8003726 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0216 	bic.w	r2, r2, #22
 80036c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_DMA_IRQHandler+0x736>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	223f      	movs	r2, #63	@ 0x3f
 80036fc:	409a      	lsls	r2, r3
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 834a 	beq.w	8003db0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
          }
          return;
 8003724:	e344      	b.n	8003db0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d018      	beq.n	8003766 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02c      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
 8003752:	e027      	b.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e01e      	b.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10f      	bne.n	8003794 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0210 	bic.w	r2, r2, #16
 8003782:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8306 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8088 	beq.w	80038cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	@ (80039b4 <HAL_DMA_IRQHandler+0xa08>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d04a      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a79      	ldr	r2, [pc, #484]	@ (80039b8 <HAL_DMA_IRQHandler+0xa0c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d045      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a77      	ldr	r2, [pc, #476]	@ (80039bc <HAL_DMA_IRQHandler+0xa10>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d040      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a76      	ldr	r2, [pc, #472]	@ (80039c0 <HAL_DMA_IRQHandler+0xa14>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a74      	ldr	r2, [pc, #464]	@ (80039c4 <HAL_DMA_IRQHandler+0xa18>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	@ (80039c8 <HAL_DMA_IRQHandler+0xa1c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a71      	ldr	r2, [pc, #452]	@ (80039cc <HAL_DMA_IRQHandler+0xa20>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	@ (80039d0 <HAL_DMA_IRQHandler+0xa24>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d027      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_DMA_IRQHandler+0xa28>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6d      	ldr	r2, [pc, #436]	@ (80039d8 <HAL_DMA_IRQHandler+0xa2c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d01d      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6b      	ldr	r2, [pc, #428]	@ (80039dc <HAL_DMA_IRQHandler+0xa30>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6a      	ldr	r2, [pc, #424]	@ (80039e0 <HAL_DMA_IRQHandler+0xa34>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a68      	ldr	r2, [pc, #416]	@ (80039e4 <HAL_DMA_IRQHandler+0xa38>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a67      	ldr	r2, [pc, #412]	@ (80039e8 <HAL_DMA_IRQHandler+0xa3c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a65      	ldr	r2, [pc, #404]	@ (80039ec <HAL_DMA_IRQHandler+0xa40>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_IRQHandler+0x8b8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a64      	ldr	r2, [pc, #400]	@ (80039f0 <HAL_DMA_IRQHandler+0xa44>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <HAL_DMA_IRQHandler+0x8ca>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e007      	b.n	8003886 <HAL_DMA_IRQHandler+0x8da>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388e:	429a      	cmp	r2, r3
 8003890:	d307      	bcc.n	80038a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f2      	bne.n	8003886 <HAL_DMA_IRQHandler+0x8da>
 80038a0:	e000      	b.n	80038a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2203      	movs	r2, #3
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80038ba:	e003      	b.n	80038c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8272 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
 80038de:	e26c      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a43      	ldr	r2, [pc, #268]	@ (80039f4 <HAL_DMA_IRQHandler+0xa48>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a42      	ldr	r2, [pc, #264]	@ (80039f8 <HAL_DMA_IRQHandler+0xa4c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01d      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <HAL_DMA_IRQHandler+0xa50>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3f      	ldr	r2, [pc, #252]	@ (8003a00 <HAL_DMA_IRQHandler+0xa54>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a04 <HAL_DMA_IRQHandler+0xa58>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3c      	ldr	r2, [pc, #240]	@ (8003a08 <HAL_DMA_IRQHandler+0xa5c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3a      	ldr	r2, [pc, #232]	@ (8003a0c <HAL_DMA_IRQHandler+0xa60>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_DMA_IRQHandler+0x984>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a39      	ldr	r2, [pc, #228]	@ (8003a10 <HAL_DMA_IRQHandler+0xa64>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_DMA_IRQHandler+0x988>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x98a>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 823f 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2204      	movs	r2, #4
 800394e:	409a      	lsls	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80cd 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xb48>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80c7 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2204      	movs	r2, #4
 8003970:	409a      	lsls	r2, r3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d049      	beq.n	8003a14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8210 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800399c:	e20a      	b.n	8003db4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8206 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b0:	e200      	b.n	8003db4 <HAL_DMA_IRQHandler+0xe08>
 80039b2:	bf00      	nop
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
 80039f4:	58025408 	.word	0x58025408
 80039f8:	5802541c 	.word	0x5802541c
 80039fc:	58025430 	.word	0x58025430
 8003a00:	58025444 	.word	0x58025444
 8003a04:	58025458 	.word	0x58025458
 8003a08:	5802546c 	.word	0x5802546c
 8003a0c:	58025480 	.word	0x58025480
 8003a10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d160      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7f      	ldr	r2, [pc, #508]	@ (8003c20 <HAL_DMA_IRQHandler+0xc74>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d04a      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c24 <HAL_DMA_IRQHandler+0xc78>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d045      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7c      	ldr	r2, [pc, #496]	@ (8003c28 <HAL_DMA_IRQHandler+0xc7c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d040      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a7a      	ldr	r2, [pc, #488]	@ (8003c2c <HAL_DMA_IRQHandler+0xc80>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d03b      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a79      	ldr	r2, [pc, #484]	@ (8003c30 <HAL_DMA_IRQHandler+0xc84>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d036      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a77      	ldr	r2, [pc, #476]	@ (8003c34 <HAL_DMA_IRQHandler+0xc88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d031      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a76      	ldr	r2, [pc, #472]	@ (8003c38 <HAL_DMA_IRQHandler+0xc8c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d02c      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a74      	ldr	r2, [pc, #464]	@ (8003c3c <HAL_DMA_IRQHandler+0xc90>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d027      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a73      	ldr	r2, [pc, #460]	@ (8003c40 <HAL_DMA_IRQHandler+0xc94>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a71      	ldr	r2, [pc, #452]	@ (8003c44 <HAL_DMA_IRQHandler+0xc98>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01d      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a70      	ldr	r2, [pc, #448]	@ (8003c48 <HAL_DMA_IRQHandler+0xc9c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a6e      	ldr	r2, [pc, #440]	@ (8003c4c <HAL_DMA_IRQHandler+0xca0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c50 <HAL_DMA_IRQHandler+0xca4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c54 <HAL_DMA_IRQHandler+0xca8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6a      	ldr	r2, [pc, #424]	@ (8003c58 <HAL_DMA_IRQHandler+0xcac>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_DMA_IRQHandler+0xb12>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a68      	ldr	r2, [pc, #416]	@ (8003c5c <HAL_DMA_IRQHandler+0xcb0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0xb24>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0208 	bic.w	r2, r2, #8
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e007      	b.n	8003ae0 <HAL_DMA_IRQHandler+0xb34>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8165 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af2:	e15f      	b.n	8003db4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2202      	movs	r2, #2
 8003afe:	409a      	lsls	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80c5 	beq.w	8003c94 <HAL_DMA_IRQHandler+0xce8>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80bf 	beq.w	8003c94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2202      	movs	r2, #2
 8003b20:	409a      	lsls	r2, r3
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 813a 	beq.w	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b4c:	e134      	b.n	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8130 	beq.w	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b60:	e12a      	b.n	8003db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 8089 	bne.w	8003c80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2b      	ldr	r2, [pc, #172]	@ (8003c20 <HAL_DMA_IRQHandler+0xc74>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d04a      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a29      	ldr	r2, [pc, #164]	@ (8003c24 <HAL_DMA_IRQHandler+0xc78>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d045      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a28      	ldr	r2, [pc, #160]	@ (8003c28 <HAL_DMA_IRQHandler+0xc7c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d040      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a26      	ldr	r2, [pc, #152]	@ (8003c2c <HAL_DMA_IRQHandler+0xc80>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d03b      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a25      	ldr	r2, [pc, #148]	@ (8003c30 <HAL_DMA_IRQHandler+0xc84>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d036      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a23      	ldr	r2, [pc, #140]	@ (8003c34 <HAL_DMA_IRQHandler+0xc88>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d031      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a22      	ldr	r2, [pc, #136]	@ (8003c38 <HAL_DMA_IRQHandler+0xc8c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d02c      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <HAL_DMA_IRQHandler+0xc90>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d027      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_DMA_IRQHandler+0xc94>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c44 <HAL_DMA_IRQHandler+0xc98>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01d      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c48 <HAL_DMA_IRQHandler+0xc9c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <HAL_DMA_IRQHandler+0xca0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a19      	ldr	r2, [pc, #100]	@ (8003c50 <HAL_DMA_IRQHandler+0xca4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <HAL_DMA_IRQHandler+0xca8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	@ (8003c58 <HAL_DMA_IRQHandler+0xcac>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xc62>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a14      	ldr	r2, [pc, #80]	@ (8003c5c <HAL_DMA_IRQHandler+0xcb0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d128      	bne.n	8003c60 <HAL_DMA_IRQHandler+0xcb4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0214 	bic.w	r2, r2, #20
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e027      	b.n	8003c70 <HAL_DMA_IRQHandler+0xcc4>
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40020028 	.word	0x40020028
 8003c28:	40020040 	.word	0x40020040
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	40020070 	.word	0x40020070
 8003c34:	40020088 	.word	0x40020088
 8003c38:	400200a0 	.word	0x400200a0
 8003c3c:	400200b8 	.word	0x400200b8
 8003c40:	40020410 	.word	0x40020410
 8003c44:	40020428 	.word	0x40020428
 8003c48:	40020440 	.word	0x40020440
 8003c4c:	40020458 	.word	0x40020458
 8003c50:	40020470 	.word	0x40020470
 8003c54:	40020488 	.word	0x40020488
 8003c58:	400204a0 	.word	0x400204a0
 8003c5c:	400204b8 	.word	0x400204b8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020a 	bic.w	r2, r2, #10
 8003c6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8097 	beq.w	8003db8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c92:	e091      	b.n	8003db8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8088 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8082 	beq.w	8003dba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a41      	ldr	r2, [pc, #260]	@ (8003dc0 <HAL_DMA_IRQHandler+0xe14>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04a      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc4 <HAL_DMA_IRQHandler+0xe18>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d045      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc8 <HAL_DMA_IRQHandler+0xe1c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d040      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dcc <HAL_DMA_IRQHandler+0xe20>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d03b      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd0 <HAL_DMA_IRQHandler+0xe24>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d036      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a39      	ldr	r2, [pc, #228]	@ (8003dd4 <HAL_DMA_IRQHandler+0xe28>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d031      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a38      	ldr	r2, [pc, #224]	@ (8003dd8 <HAL_DMA_IRQHandler+0xe2c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d02c      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a36      	ldr	r2, [pc, #216]	@ (8003ddc <HAL_DMA_IRQHandler+0xe30>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d027      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a35      	ldr	r2, [pc, #212]	@ (8003de0 <HAL_DMA_IRQHandler+0xe34>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d022      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a33      	ldr	r2, [pc, #204]	@ (8003de4 <HAL_DMA_IRQHandler+0xe38>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01d      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a32      	ldr	r2, [pc, #200]	@ (8003de8 <HAL_DMA_IRQHandler+0xe3c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d018      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a30      	ldr	r2, [pc, #192]	@ (8003dec <HAL_DMA_IRQHandler+0xe40>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2f      	ldr	r2, [pc, #188]	@ (8003df0 <HAL_DMA_IRQHandler+0xe44>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003df4 <HAL_DMA_IRQHandler+0xe48>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d009      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2c      	ldr	r2, [pc, #176]	@ (8003df8 <HAL_DMA_IRQHandler+0xe4c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_DMA_IRQHandler+0xdaa>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2a      	ldr	r2, [pc, #168]	@ (8003dfc <HAL_DMA_IRQHandler+0xe50>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <HAL_DMA_IRQHandler+0xdbc>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 021c 	bic.w	r2, r2, #28
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e007      	b.n	8003d78 <HAL_DMA_IRQHandler+0xdcc>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 020e 	bic.w	r2, r2, #14
 8003d76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
 8003dae:	e004      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dba:	3728      	adds	r7, #40	@ 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40020010 	.word	0x40020010
 8003dc4:	40020028 	.word	0x40020028
 8003dc8:	40020040 	.word	0x40020040
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	40020070 	.word	0x40020070
 8003dd4:	40020088 	.word	0x40020088
 8003dd8:	400200a0 	.word	0x400200a0
 8003ddc:	400200b8 	.word	0x400200b8
 8003de0:	40020410 	.word	0x40020410
 8003de4:	40020428 	.word	0x40020428
 8003de8:	40020440 	.word	0x40020440
 8003dec:	40020458 	.word	0x40020458
 8003df0:	40020470 	.word	0x40020470
 8003df4:	40020488 	.word	0x40020488
 8003df8:	400204a0 	.word	0x400204a0
 8003dfc:	400204b8 	.word	0x400204b8

08003e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a42      	ldr	r2, [pc, #264]	@ (8003f18 <DMA_CalcBaseAndBitshift+0x118>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a41      	ldr	r2, [pc, #260]	@ (8003f1c <DMA_CalcBaseAndBitshift+0x11c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3f      	ldr	r2, [pc, #252]	@ (8003f20 <DMA_CalcBaseAndBitshift+0x120>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f24 <DMA_CalcBaseAndBitshift+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3c      	ldr	r2, [pc, #240]	@ (8003f28 <DMA_CalcBaseAndBitshift+0x128>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f2c <DMA_CalcBaseAndBitshift+0x12c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a39      	ldr	r2, [pc, #228]	@ (8003f30 <DMA_CalcBaseAndBitshift+0x130>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a38      	ldr	r2, [pc, #224]	@ (8003f34 <DMA_CalcBaseAndBitshift+0x134>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a36      	ldr	r2, [pc, #216]	@ (8003f38 <DMA_CalcBaseAndBitshift+0x138>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <DMA_CalcBaseAndBitshift+0x13c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a33      	ldr	r2, [pc, #204]	@ (8003f40 <DMA_CalcBaseAndBitshift+0x140>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a32      	ldr	r2, [pc, #200]	@ (8003f44 <DMA_CalcBaseAndBitshift+0x144>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <DMA_CalcBaseAndBitshift+0x148>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f4c <DMA_CalcBaseAndBitshift+0x14c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <DMA_CalcBaseAndBitshift+0x150>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f54 <DMA_CalcBaseAndBitshift+0x154>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <DMA_CalcBaseAndBitshift+0xac>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <DMA_CalcBaseAndBitshift+0xae>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d024      	beq.n	8003efc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3b10      	subs	r3, #16
 8003eba:	4a27      	ldr	r2, [pc, #156]	@ (8003f58 <DMA_CalcBaseAndBitshift+0x158>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	4a24      	ldr	r2, [pc, #144]	@ (8003f5c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d908      	bls.n	8003eec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <DMA_CalcBaseAndBitshift+0x160>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eea:	e00d      	b.n	8003f08 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f60 <DMA_CalcBaseAndBitshift+0x160>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efa:	e005      	b.n	8003f08 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40020010 	.word	0x40020010
 8003f1c:	40020028 	.word	0x40020028
 8003f20:	40020040 	.word	0x40020040
 8003f24:	40020058 	.word	0x40020058
 8003f28:	40020070 	.word	0x40020070
 8003f2c:	40020088 	.word	0x40020088
 8003f30:	400200a0 	.word	0x400200a0
 8003f34:	400200b8 	.word	0x400200b8
 8003f38:	40020410 	.word	0x40020410
 8003f3c:	40020428 	.word	0x40020428
 8003f40:	40020440 	.word	0x40020440
 8003f44:	40020458 	.word	0x40020458
 8003f48:	40020470 	.word	0x40020470
 8003f4c:	40020488 	.word	0x40020488
 8003f50:	400204a0 	.word	0x400204a0
 8003f54:	400204b8 	.word	0x400204b8
 8003f58:	aaaaaaab 	.word	0xaaaaaaab
 8003f5c:	08010f84 	.word	0x08010f84
 8003f60:	fffffc00 	.word	0xfffffc00

08003f64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d120      	bne.n	8003fba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d858      	bhi.n	8004032 <DMA_CheckFifoParam+0xce>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <DMA_CheckFifoParam+0x24>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fab 	.word	0x08003fab
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	08004033 	.word	0x08004033
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d048      	beq.n	8004036 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fa8:	e045      	b.n	8004036 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fb2:	d142      	bne.n	800403a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fb8:	e03f      	b.n	800403a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc2:	d123      	bne.n	800400c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d838      	bhi.n	800403e <DMA_CheckFifoParam+0xda>
 8003fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd4 <DMA_CheckFifoParam+0x70>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003feb 	.word	0x08003feb
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	08003ffd 	.word	0x08003ffd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
        break;
 8003fe8:	e030      	b.n	800404c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d025      	beq.n	8004042 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ffa:	e022      	b.n	8004042 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004004:	d11f      	bne.n	8004046 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800400a:	e01c      	b.n	8004046 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	2b02      	cmp	r3, #2
 8004012:	d902      	bls.n	800401a <DMA_CheckFifoParam+0xb6>
 8004014:	2b03      	cmp	r3, #3
 8004016:	d003      	beq.n	8004020 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004018:	e018      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
        break;
 800401e:	e015      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
    break;
 8004030:	e00b      	b.n	800404a <DMA_CheckFifoParam+0xe6>
        break;
 8004032:	bf00      	nop
 8004034:	e00a      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 8004036:	bf00      	nop
 8004038:	e008      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 800403a:	bf00      	nop
 800403c:	e006      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 800403e:	bf00      	nop
 8004040:	e004      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <DMA_CheckFifoParam+0xe8>
        break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <DMA_CheckFifoParam+0xe8>
    break;
 800404a:	bf00      	nop
    }
  }

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop

0800405c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a38      	ldr	r2, [pc, #224]	@ (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a36      	ldr	r2, [pc, #216]	@ (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01d      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a35      	ldr	r2, [pc, #212]	@ (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a33      	ldr	r2, [pc, #204]	@ (800415c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a32      	ldr	r2, [pc, #200]	@ (8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a30      	ldr	r2, [pc, #192]	@ (8004164 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2d      	ldr	r2, [pc, #180]	@ (800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01a      	beq.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	3b08      	subs	r3, #8
 80040cc:	4a28      	ldr	r2, [pc, #160]	@ (8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040f8:	e024      	b.n	8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3b10      	subs	r3, #16
 8004102:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d806      	bhi.n	8004122 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d902      	bls.n	8004122 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3308      	adds	r3, #8
 8004120:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4b18      	ldr	r3, [pc, #96]	@ (8004188 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a16      	ldr	r2, [pc, #88]	@ (800418c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004134:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2201      	movs	r2, #1
 800413e:	409a      	lsls	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	58025408 	.word	0x58025408
 8004154:	5802541c 	.word	0x5802541c
 8004158:	58025430 	.word	0x58025430
 800415c:	58025444 	.word	0x58025444
 8004160:	58025458 	.word	0x58025458
 8004164:	5802546c 	.word	0x5802546c
 8004168:	58025480 	.word	0x58025480
 800416c:	58025494 	.word	0x58025494
 8004170:	cccccccd 	.word	0xcccccccd
 8004174:	16009600 	.word	0x16009600
 8004178:	58025880 	.word	0x58025880
 800417c:	aaaaaaab 	.word	0xaaaaaaab
 8004180:	400204b8 	.word	0x400204b8
 8004184:	4002040f 	.word	0x4002040f
 8004188:	10008200 	.word	0x10008200
 800418c:	40020880 	.word	0x40020880

08004190 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04a      	beq.n	800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d847      	bhi.n	800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a25      	ldr	r2, [pc, #148]	@ (8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a24      	ldr	r2, [pc, #144]	@ (800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d01d      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a22      	ldr	r2, [pc, #136]	@ (8004250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004218:	671a      	str	r2, [r3, #112]	@ 0x70
 800421a:	e009      	b.n	8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a11      	ldr	r2, [pc, #68]	@ (8004274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800422e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b01      	subs	r3, #1
 8004234:	2201      	movs	r2, #1
 8004236:	409a      	lsls	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	58025408 	.word	0x58025408
 800424c:	5802541c 	.word	0x5802541c
 8004250:	58025430 	.word	0x58025430
 8004254:	58025444 	.word	0x58025444
 8004258:	58025458 	.word	0x58025458
 800425c:	5802546c 	.word	0x5802546c
 8004260:	58025480 	.word	0x58025480
 8004264:	58025494 	.word	0x58025494
 8004268:	1600963f 	.word	0x1600963f
 800426c:	58025940 	.word	0x58025940
 8004270:	1000823f 	.word	0x1000823f
 8004274:	40020940 	.word	0x40020940

08004278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	@ 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004286:	4b89      	ldr	r3, [pc, #548]	@ (80044ac <HAL_GPIO_Init+0x234>)
 8004288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800428a:	e194      	b.n	80045b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8186 	beq.w	80045b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <HAL_GPIO_Init+0x44>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d130      	bne.n	800431e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042f2:	2201      	movs	r2, #1
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0201 	and.w	r2, r3, #1
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b03      	cmp	r3, #3
 8004328:	d017      	beq.n	800435a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d123      	bne.n	80043ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	08da      	lsrs	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3208      	adds	r2, #8
 800436e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	08da      	lsrs	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3208      	adds	r2, #8
 80043a8:	69b9      	ldr	r1, [r7, #24]
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	2203      	movs	r2, #3
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0203 	and.w	r2, r3, #3
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80e0 	beq.w	80045b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f0:	4b2f      	ldr	r3, [pc, #188]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 80043f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043f6:	4a2e      	ldr	r2, [pc, #184]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004400:	4b2b      	ldr	r3, [pc, #172]	@ (80044b0 <HAL_GPIO_Init+0x238>)
 8004402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440e:	4a29      	ldr	r2, [pc, #164]	@ (80044b4 <HAL_GPIO_Init+0x23c>)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	220f      	movs	r2, #15
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a20      	ldr	r2, [pc, #128]	@ (80044b8 <HAL_GPIO_Init+0x240>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d052      	beq.n	80044e0 <HAL_GPIO_Init+0x268>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1f      	ldr	r2, [pc, #124]	@ (80044bc <HAL_GPIO_Init+0x244>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_GPIO_Init+0x22e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_GPIO_Init+0x248>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d02b      	beq.n	80044a2 <HAL_GPIO_Init+0x22a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <HAL_GPIO_Init+0x24c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d025      	beq.n	800449e <HAL_GPIO_Init+0x226>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1c      	ldr	r2, [pc, #112]	@ (80044c8 <HAL_GPIO_Init+0x250>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01f      	beq.n	800449a <HAL_GPIO_Init+0x222>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <HAL_GPIO_Init+0x254>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d019      	beq.n	8004496 <HAL_GPIO_Init+0x21e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <HAL_GPIO_Init+0x258>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_GPIO_Init+0x21a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <HAL_GPIO_Init+0x25c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00d      	beq.n	800448e <HAL_GPIO_Init+0x216>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <HAL_GPIO_Init+0x260>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <HAL_GPIO_Init+0x212>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <HAL_GPIO_Init+0x264>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_GPIO_Init+0x20e>
 8004482:	2309      	movs	r3, #9
 8004484:	e02d      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004486:	230a      	movs	r3, #10
 8004488:	e02b      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800448a:	2308      	movs	r3, #8
 800448c:	e029      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800448e:	2307      	movs	r3, #7
 8004490:	e027      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004492:	2306      	movs	r3, #6
 8004494:	e025      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 8004496:	2305      	movs	r3, #5
 8004498:	e023      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800449a:	2304      	movs	r3, #4
 800449c:	e021      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 800449e:	2303      	movs	r3, #3
 80044a0:	e01f      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e01d      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e01b      	b.n	80044e2 <HAL_GPIO_Init+0x26a>
 80044aa:	bf00      	nop
 80044ac:	58000080 	.word	0x58000080
 80044b0:	58024400 	.word	0x58024400
 80044b4:	58000400 	.word	0x58000400
 80044b8:	58020000 	.word	0x58020000
 80044bc:	58020400 	.word	0x58020400
 80044c0:	58020800 	.word	0x58020800
 80044c4:	58020c00 	.word	0x58020c00
 80044c8:	58021000 	.word	0x58021000
 80044cc:	58021400 	.word	0x58021400
 80044d0:	58021800 	.word	0x58021800
 80044d4:	58021c00 	.word	0x58021c00
 80044d8:	58022000 	.word	0x58022000
 80044dc:	58022400 	.word	0x58022400
 80044e0:	2300      	movs	r3, #0
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	f002 0203 	and.w	r2, r2, #3
 80044e8:	0092      	lsls	r2, r2, #2
 80044ea:	4093      	lsls	r3, r2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f2:	4938      	ldr	r1, [pc, #224]	@ (80045d4 <HAL_GPIO_Init+0x35c>)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3302      	adds	r3, #2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f ae63 	bne.w	800428c <HAL_GPIO_Init+0x14>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	3724      	adds	r7, #36	@ 0x24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	58000400 	.word	0x58000400

080045d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
 80045e4:	4613      	mov	r3, r2
 80045e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045e8:	787b      	ldrb	r3, [r7, #1]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80045f4:	e003      	b.n	80045fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045f6:	887b      	ldrh	r3, [r7, #2]
 80045f8:	041a      	lsls	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	619a      	str	r2, [r3, #24]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	041a      	lsls	r2, r3, #16
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43d9      	mvns	r1, r3
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	400b      	ands	r3, r1
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800464c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004658:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fc fd41 	bl	80010ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e08b      	b.n	800479e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fcbc 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	@ 0x24
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d107      	bne.n	80046ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	e006      	b.n	80046fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80046fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d108      	bne.n	8004716 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	e007      	b.n	8004726 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <HAL_I2C_Init+0x134>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004744:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69d9      	ldr	r1, [r3, #28]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1a      	ldr	r2, [r3, #32]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	02008000 	.word	0x02008000

080047ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d138      	bne.n	8004834 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e032      	b.n	8004836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2224      	movs	r2, #36	@ 0x24
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6819      	ldr	r1, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	e000      	b.n	8004836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004834:	2302      	movs	r3, #2
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b20      	cmp	r3, #32
 8004856:	d139      	bne.n	80048cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004862:	2302      	movs	r3, #2
 8004864:	e033      	b.n	80048ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2224      	movs	r2, #36	@ 0x24
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004894:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e000      	b.n	80048ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048cc:	2302      	movs	r3, #2
  }
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af02      	add	r7, sp, #8
 80048e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0fe      	b.n	8004aea <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f00b fec1 	bl	8010688 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2203      	movs	r2, #3
 800490a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f006 ff8f 	bl	800b836 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	7c1a      	ldrb	r2, [r3, #16]
 8004920:	f88d 2000 	strb.w	r2, [sp]
 8004924:	3304      	adds	r3, #4
 8004926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004928:	f006 fe60 	bl	800b5ec <USB_CoreInit>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2202      	movs	r2, #2
 8004936:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0d5      	b.n	8004aea <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f006 ff87 	bl	800b858 <USB_SetCurrentMode>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0c6      	b.n	8004aea <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e04a      	b.n	80049f8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	3315      	adds	r3, #21
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3314      	adds	r3, #20
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	b298      	uxth	r0, r3
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	332e      	adds	r3, #46	@ 0x2e
 800499e:	4602      	mov	r2, r0
 80049a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049a2:	7bfa      	ldrb	r2, [r7, #15]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3318      	adds	r3, #24
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049b6:	7bfa      	ldrb	r2, [r7, #15]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	331c      	adds	r3, #28
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049ca:	7bfa      	ldrb	r2, [r7, #15]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	3320      	adds	r3, #32
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3324      	adds	r3, #36	@ 0x24
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	3301      	adds	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	791b      	ldrb	r3, [r3, #4]
 80049fc:	7bfa      	ldrb	r2, [r7, #15]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3af      	bcc.n	8004962 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	e044      	b.n	8004a92 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a08:	7bfa      	ldrb	r2, [r7, #15]
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a76:	7bfa      	ldrb	r2, [r7, #15]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	791b      	ldrb	r3, [r3, #4]
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d3b5      	bcc.n	8004a08 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7c1a      	ldrb	r2, [r3, #16]
 8004aa4:	f88d 2000 	strb.w	r2, [sp]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aac:	f006 ff20 	bl	800b8f0 <USB_DevInit>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e013      	b.n	8004aea <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7b1b      	ldrb	r3, [r3, #12]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d102      	bne.n	8004ade <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f001 f96f 	bl	8005dbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f007 ff63 	bl	800c9ae <USB_DevDisconnect>

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_PCD_Start+0x1c>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e022      	b.n	8004b54 <HAL_PCD_Start+0x62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d105      	bne.n	8004b36 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f006 fe6a 	bl	800b814 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f007 ff11 	bl	800c96c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b08d      	sub	sp, #52	@ 0x34
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f007 ffcf 	bl	800cb16 <USB_GetMode>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 84b9 	bne.w	80054f2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f007 ff33 	bl	800c9f0 <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 84af 	beq.w	80054f0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f007 ff20 	bl	800c9f0 <USB_ReadInterrupts>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d107      	bne.n	8004bca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f002 0202 	and.w	r2, r2, #2
 8004bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f007 ff0e 	bl	800c9f0 <USB_ReadInterrupts>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d161      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0210 	bic.w	r2, r2, #16
 8004bec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004c14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c18:	d124      	bne.n	8004c64 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d035      	beq.n	8004c92 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	6a38      	ldr	r0, [r7, #32]
 8004c3a:	f007 fd45 	bl	800c6c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c4a:	441a      	add	r2, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c5c:	441a      	add	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	615a      	str	r2, [r3, #20]
 8004c62:	e016      	b.n	8004c92 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004c6a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c6e:	d110      	bne.n	8004c92 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c76:	2208      	movs	r2, #8
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6a38      	ldr	r0, [r7, #32]
 8004c7c:	f007 fd24 	bl	800c6c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c8c:	441a      	add	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0210 	orr.w	r2, r2, #16
 8004ca0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f007 fea2 	bl	800c9f0 <USB_ReadInterrupts>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cb6:	f040 80a7 	bne.w	8004e08 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f007 fea7 	bl	800ca16 <USB_ReadDevAllOutEpInterrupt>
 8004cc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004cca:	e099      	b.n	8004e00 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 808e 	beq.w	8004df4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f007 fecb 	bl	800ca7e <USB_ReadDevOutEPInterrupt>
 8004ce8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00c      	beq.n	8004d0e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d00:	461a      	mov	r2, r3
 8004d02:	2301      	movs	r3, #1
 8004d04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fed1 	bl	8005ab0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00c      	beq.n	8004d32 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	2308      	movs	r3, #8
 8004d28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 ffa7 	bl	8005c80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2310      	movs	r3, #16
 8004d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d030      	beq.n	8004dba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d60:	2b80      	cmp	r3, #128	@ 0x80
 8004d62:	d109      	bne.n	8004d78 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d76:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	78db      	ldrb	r3, [r3, #3]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d108      	bne.n	8004da8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f00b fd96 	bl	80108d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	461a      	mov	r2, r3
 8004db6:	2302      	movs	r3, #2
 8004db8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004df2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	3301      	adds	r3, #1
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f47f af62 	bne.w	8004ccc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f007 fdef 	bl	800c9f0 <USB_ReadInterrupts>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e1c:	f040 80db 	bne.w	8004fd6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f007 fe10 	bl	800ca4a <USB_ReadDevAllInEpInterrupt>
 8004e2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004e30:	e0cd      	b.n	8004fce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80c2 	beq.w	8004fc2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f007 fe36 	bl	800caba <USB_ReadDevInEPInterrupt>
 8004e4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d057      	beq.n	8004f0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2201      	movs	r2, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	69f9      	ldr	r1, [r7, #28]
 8004e76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	799b      	ldrb	r3, [r3, #6]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d132      	bne.n	8004efe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3320      	adds	r3, #32
 8004ea8:	6819      	ldr	r1, [r3, #0]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eae:	4613      	mov	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4403      	add	r3, r0
 8004eb8:	331c      	adds	r3, #28
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4419      	add	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4403      	add	r3, r0
 8004ecc:	3320      	adds	r3, #32
 8004ece:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d113      	bne.n	8004efe <HAL_PCD_IRQHandler+0x3a2>
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3324      	adds	r3, #36	@ 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2101      	movs	r1, #1
 8004efa:	f007 fe3f 	bl	800cb7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f00b fc60 	bl	80107ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f20:	461a      	mov	r2, r3
 8004f22:	2308      	movs	r3, #8
 8004f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2310      	movs	r3, #16
 8004f40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2340      	movs	r3, #64	@ 0x40
 8004f5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004f68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f6a:	6a38      	ldr	r0, [r7, #32]
 8004f6c:	f006 fe1e 	bl	800bbac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f72:	4613      	mov	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	3310      	adds	r3, #16
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	3304      	adds	r3, #4
 8004f82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	78db      	ldrb	r3, [r3, #3]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d108      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f00b fcad 	bl	80108f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004faa:	461a      	mov	r2, r3
 8004fac:	2302      	movs	r3, #2
 8004fae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004fba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fcea 	bl	8005996 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f af2e 	bne.w	8004e32 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f007 fd08 	bl	800c9f0 <USB_ReadInterrupts>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fea:	d122      	bne.n	8005032 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005006:	2b01      	cmp	r3, #1
 8005008:	d108      	bne.n	800501c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fef5 	bl	8005e04 <HAL_PCDEx_LPM_Callback>
 800501a:	e002      	b.n	8005022 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f00b fc4b 	bl	80108b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f007 fcda 	bl	800c9f0 <USB_ReadInterrupts>
 800503c:	4603      	mov	r3, r0
 800503e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005046:	d112      	bne.n	800506e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d102      	bne.n	800505e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f00b fc07 	bl	801086c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800506c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f007 fcbc 	bl	800c9f0 <USB_ReadInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800507e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005082:	d121      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005092:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800509a:	2b00      	cmp	r3, #0
 800509c:	d111      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	f003 020f 	and.w	r2, r3, #15
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050b8:	2101      	movs	r1, #1
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fea2 	bl	8005e04 <HAL_PCDEx_LPM_Callback>
 80050c0:	e002      	b.n	80050c8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f00b fbd2 	bl	801086c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f007 fc8f 	bl	800c9f0 <USB_ReadInterrupts>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050dc:	f040 80b7 	bne.w	800524e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2110      	movs	r1, #16
 80050fa:	4618      	mov	r0, r3
 80050fc:	f006 fd56 	bl	800bbac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005104:	e046      	b.n	8005194 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005112:	461a      	mov	r2, r3
 8005114:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005118:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005134:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005138:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800513a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800514c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005168:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800516c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005188:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800518c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800518e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005190:	3301      	adds	r3, #1
 8005192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	791b      	ldrb	r3, [r3, #4]
 8005198:	461a      	mov	r2, r3
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519c:	4293      	cmp	r3, r2
 800519e:	d3b2      	bcc.n	8005106 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80051b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7bdb      	ldrb	r3, [r3, #15]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d016      	beq.n	80051ea <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051cc:	f043 030b 	orr.w	r3, r3, #11
 80051d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051e2:	f043 030b 	orr.w	r3, r3, #11
 80051e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80051e8:	e015      	b.n	8005216 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f8:	4619      	mov	r1, r3
 80051fa:	f242 032b 	movw	r3, #8235	@ 0x202b
 80051fe:	4313      	orrs	r3, r2
 8005200:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005210:	f043 030b 	orr.w	r3, r3, #11
 8005214:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005224:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005228:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005238:	461a      	mov	r2, r3
 800523a:	f007 fc9f 	bl	800cb7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800524c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f007 fbcc 	bl	800c9f0 <USB_ReadInterrupts>
 8005258:	4603      	mov	r3, r0
 800525a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005262:	d123      	bne.n	80052ac <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f007 fc63 	bl	800cb34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f006 fd13 	bl	800bc9e <USB_GetDevSpeed>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681c      	ldr	r4, [r3, #0]
 8005284:	f001 fd9e 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8005288:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800528e:	461a      	mov	r2, r3
 8005290:	4620      	mov	r0, r4
 8005292:	f006 fa1d 	bl	800b6d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f00b fabf 	bl	801081a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80052aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f007 fb9d 	bl	800c9f0 <USB_ReadInterrupts>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d10a      	bne.n	80052d6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f00b fa9c 	bl	80107fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f002 0208 	and.w	r2, r2, #8
 80052d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f007 fb88 	bl	800c9f0 <USB_ReadInterrupts>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b80      	cmp	r3, #128	@ 0x80
 80052e8:	d123      	bne.n	8005332 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052f6:	2301      	movs	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fa:	e014      	b.n	8005326 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005300:	4613      	mov	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	b2db      	uxtb	r3, r3
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb0a 	bl	8005934 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	3301      	adds	r3, #1
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	791b      	ldrb	r3, [r3, #4]
 800532a:	461a      	mov	r2, r3
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	4293      	cmp	r3, r2
 8005330:	d3e4      	bcc.n	80052fc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f007 fb5a 	bl	800c9f0 <USB_ReadInterrupts>
 800533c:	4603      	mov	r3, r0
 800533e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005346:	d13c      	bne.n	80053c2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005348:	2301      	movs	r3, #1
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
 800534c:	e02b      	b.n	80053a6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3318      	adds	r3, #24
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d115      	bne.n	80053a0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005374:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005376:	2b00      	cmp	r3, #0
 8005378:	da12      	bge.n	80053a0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800537e:	4613      	mov	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	3317      	adds	r3, #23
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005396:	b2db      	uxtb	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 faca 	bl	8005934 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	3301      	adds	r3, #1
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	791b      	ldrb	r3, [r3, #4]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d3cd      	bcc.n	800534e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80053c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f007 fb12 	bl	800c9f0 <USB_ReadInterrupts>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053d6:	d156      	bne.n	8005486 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053d8:	2301      	movs	r3, #1
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
 80053dc:	e045      	b.n	800546a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f2:	4613      	mov	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d12e      	bne.n	8005464 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005406:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005408:	2b00      	cmp	r3, #0
 800540a:	da2b      	bge.n	8005464 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	0c1a      	lsrs	r2, r3, #16
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005416:	4053      	eors	r3, r2
 8005418:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800541c:	2b00      	cmp	r3, #0
 800541e:	d121      	bne.n	8005464 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800545c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005460:	6053      	str	r3, [r2, #4]
            break;
 8005462:	e008      	b.n	8005476 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	3301      	adds	r3, #1
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	791b      	ldrb	r3, [r3, #4]
 800546e:	461a      	mov	r2, r3
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	4293      	cmp	r3, r2
 8005474:	d3b3      	bcc.n	80053de <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f007 fab0 	bl	800c9f0 <USB_ReadInterrupts>
 8005490:	4603      	mov	r3, r0
 8005492:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549a:	d10a      	bne.n	80054b2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f00b fa3d 	bl	801091c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80054b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f007 fa9a 	bl	800c9f0 <USB_ReadInterrupts>
 80054bc:	4603      	mov	r3, r0
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d115      	bne.n	80054f2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f00b fa2d 	bl	8010938 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6859      	ldr	r1, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	e000      	b.n	80054f2 <HAL_PCD_IRQHandler+0x996>
      return;
 80054f0:	bf00      	nop
    }
  }
}
 80054f2:	3734      	adds	r7, #52	@ 0x34
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd90      	pop	{r4, r7, pc}

080054f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_PCD_SetAddress+0x1a>
 800550e:	2302      	movs	r3, #2
 8005510:	e012      	b.n	8005538 <HAL_PCD_SetAddress+0x40>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f007 f9f9 	bl	800c920 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	461a      	mov	r2, r3
 800554e:	4603      	mov	r3, r0
 8005550:	70fb      	strb	r3, [r7, #3]
 8005552:	460b      	mov	r3, r1
 8005554:	803b      	strh	r3, [r7, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800555e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005562:	2b00      	cmp	r3, #0
 8005564:	da0f      	bge.n	8005586 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	f003 020f 	and.w	r2, r3, #15
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	3310      	adds	r3, #16
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	3304      	adds	r3, #4
 800557c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	705a      	strb	r2, [r3, #1]
 8005584:	e00f      	b.n	80055a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4413      	add	r3, r2
 800559c:	3304      	adds	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80055b2:	883b      	ldrh	r3, [r7, #0]
 80055b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	78ba      	ldrb	r2, [r7, #2]
 80055c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055d4:	78bb      	ldrb	r3, [r7, #2]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d102      	bne.n	80055e0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_PCD_EP_Open+0xae>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e00e      	b.n	800560c <HAL_PCD_EP_Open+0xcc>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f006 fb73 	bl	800bce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800560a:	7afb      	ldrb	r3, [r7, #11]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005624:	2b00      	cmp	r3, #0
 8005626:	da0f      	bge.n	8005648 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	f003 020f 	and.w	r2, r3, #15
 800562e:	4613      	mov	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	3310      	adds	r3, #16
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	4413      	add	r3, r2
 800563c:	3304      	adds	r3, #4
 800563e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	705a      	strb	r2, [r3, #1]
 8005646:	e00f      	b.n	8005668 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	3304      	adds	r3, #4
 8005660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_PCD_EP_Close+0x6e>
 800567e:	2302      	movs	r3, #2
 8005680:	e00e      	b.n	80056a0 <HAL_PCD_EP_Close+0x8c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	4618      	mov	r0, r3
 8005692:	f006 fbb1 	bl	800bdf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	460b      	mov	r3, r1
 80056b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056b8:	7afb      	ldrb	r3, [r7, #11]
 80056ba:	f003 020f 	and.w	r2, r3, #15
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	3304      	adds	r3, #4
 80056d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2200      	movs	r2, #0
 80056e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ea:	7afb      	ldrb	r3, [r7, #11]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	799b      	ldrb	r3, [r3, #6]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d102      	bne.n	8005704 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	799b      	ldrb	r3, [r3, #6]
 800570c:	461a      	mov	r2, r3
 800570e:	6979      	ldr	r1, [r7, #20]
 8005710:	f006 fc4e 	bl	800bfb0 <USB_EPStartXfer>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005740:	681b      	ldr	r3, [r3, #0]
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b086      	sub	sp, #24
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	460b      	mov	r3, r1
 800575c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800575e:	7afb      	ldrb	r3, [r7, #11]
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	3310      	adds	r3, #16
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	3304      	adds	r3, #4
 8005774:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2201      	movs	r2, #1
 800578c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800578e:	7afb      	ldrb	r3, [r7, #11]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	b2da      	uxtb	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	799b      	ldrb	r3, [r3, #6]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d102      	bne.n	80057a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	799b      	ldrb	r3, [r3, #6]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	f006 fbfc 	bl	800bfb0 <USB_EPStartXfer>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	460b      	mov	r3, r1
 80057cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	7912      	ldrb	r2, [r2, #4]
 80057d8:	4293      	cmp	r3, r2
 80057da:	d901      	bls.n	80057e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e04f      	b.n	8005880 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da0f      	bge.n	8005808 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	f003 020f 	and.w	r2, r3, #15
 80057ee:	4613      	mov	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	3310      	adds	r3, #16
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4413      	add	r3, r2
 80057fc:	3304      	adds	r3, #4
 80057fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	705a      	strb	r2, [r3, #1]
 8005806:	e00d      	b.n	8005824 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4413      	add	r3, r2
 800581a:	3304      	adds	r3, #4
 800581c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	b2da      	uxtb	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_PCD_EP_SetStall+0x82>
 8005840:	2302      	movs	r3, #2
 8005842:	e01d      	b.n	8005880 <HAL_PCD_EP_SetStall+0xbe>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68f9      	ldr	r1, [r7, #12]
 8005852:	4618      	mov	r0, r3
 8005854:	f006 ff90 	bl	800c778 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	2b00      	cmp	r3, #0
 8005860:	d109      	bne.n	8005876 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	7999      	ldrb	r1, [r3, #6]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005870:	461a      	mov	r2, r3
 8005872:	f007 f983 	bl	800cb7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	7912      	ldrb	r2, [r2, #4]
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e042      	b.n	800592c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	da0f      	bge.n	80058ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	3310      	adds	r3, #16
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	3304      	adds	r3, #4
 80058c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	705a      	strb	r2, [r3, #1]
 80058cc:	e00f      	b.n	80058ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	f003 020f 	and.w	r2, r3, #15
 80058d4:	4613      	mov	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	4413      	add	r3, r2
 80058e4:	3304      	adds	r3, #4
 80058e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_PCD_EP_ClrStall+0x86>
 800590a:	2302      	movs	r3, #2
 800590c:	e00e      	b.n	800592c <HAL_PCD_EP_ClrStall+0xa4>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	4618      	mov	r0, r3
 800591e:	f006 ff99 	bl	800c854 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005944:	2b00      	cmp	r3, #0
 8005946:	da0c      	bge.n	8005962 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	f003 020f 	and.w	r2, r3, #15
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	3310      	adds	r3, #16
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	4413      	add	r3, r2
 800595c:	3304      	adds	r3, #4
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e00c      	b.n	800597c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	f003 020f 	and.w	r2, r3, #15
 8005968:	4613      	mov	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	3304      	adds	r3, #4
 800597a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	4618      	mov	r0, r3
 8005984:	f006 fdb8 	bl	800c4f8 <USB_EPStopXfer>
 8005988:	4603      	mov	r3, r0
 800598a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800598c:	7afb      	ldrb	r3, [r7, #11]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b08a      	sub	sp, #40	@ 0x28
 800599a:	af02      	add	r7, sp, #8
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	3310      	adds	r3, #16
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d901      	bls.n	80059ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e06b      	b.n	8005aa6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d902      	bls.n	80059ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3303      	adds	r3, #3
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059f2:	e02a      	b.n	8005a4a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d902      	bls.n	8005a10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	3303      	adds	r3, #3
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68d9      	ldr	r1, [r3, #12]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	6978      	ldr	r0, [r7, #20]
 8005a2e:	f006 fe0d 	bl	800c64c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	441a      	add	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d809      	bhi.n	8005a74 <PCD_WriteEmptyTxFifo+0xde>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d203      	bcs.n	8005a74 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1bf      	bne.n	80059f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d811      	bhi.n	8005aa4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	2201      	movs	r2, #1
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	6939      	ldr	r1, [r7, #16]
 8005a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	333c      	adds	r3, #60	@ 0x3c
 8005ac8:	3304      	adds	r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	799b      	ldrb	r3, [r3, #6]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d17b      	bne.n	8005bde <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d015      	beq.n	8005b1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4a61      	ldr	r2, [pc, #388]	@ (8005c78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f240 80b9 	bls.w	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80b3 	beq.w	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	461a      	mov	r2, r3
 8005b14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b18:	6093      	str	r3, [r2, #8]
 8005b1a:	e0a7      	b.n	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	461a      	mov	r2, r3
 8005b34:	2320      	movs	r3, #32
 8005b36:	6093      	str	r3, [r2, #8]
 8005b38:	e098      	b.n	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 8093 	bne.w	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4a4b      	ldr	r2, [pc, #300]	@ (8005c78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d90f      	bls.n	8005b6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b6a:	6093      	str	r3, [r2, #8]
 8005b6c:	e07e      	b.n	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4413      	add	r3, r2
 8005b80:	3304      	adds	r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	0159      	lsls	r1, r3, #5
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	440b      	add	r3, r1
 8005b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d114      	bne.n	8005bd0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2101      	movs	r1, #1
 8005bbc:	f006 ffde 	bl	800cb7c <USB_EP0_OutStart>
 8005bc0:	e006      	b.n	8005bd0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	441a      	add	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f00a fddc 	bl	8010794 <HAL_PCD_DataOutStageCallback>
 8005bdc:	e046      	b.n	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4a26      	ldr	r2, [pc, #152]	@ (8005c7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d124      	bne.n	8005c30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c02:	6093      	str	r3, [r2, #8]
 8005c04:	e032      	b.n	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2320      	movs	r3, #32
 8005c20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f00a fdb3 	bl	8010794 <HAL_PCD_DataOutStageCallback>
 8005c2e:	e01d      	b.n	8005c6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d114      	bne.n	8005c60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d108      	bne.n	8005c60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	f006 ff8e 	bl	800cb7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f00a fd94 	bl	8010794 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	4f54300a 	.word	0x4f54300a
 8005c7c:	4f54310a 	.word	0x4f54310a

08005c80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	333c      	adds	r3, #60	@ 0x3c
 8005c98:	3304      	adds	r3, #4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	@ (8005d08 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d90e      	bls.n	8005cd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f00a fd4b 	bl	8010770 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8005d08 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d90c      	bls.n	8005cfc <PCD_EP_OutSetupPacket_int+0x7c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	799b      	ldrb	r3, [r3, #6]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d108      	bne.n	8005cfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	f006 ff40 	bl	800cb7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	4f54300a 	.word	0x4f54300a

08005d0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d107      	bne.n	8005d3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d2a:	883b      	ldrh	r3, [r7, #0]
 8005d2c:	0419      	lsls	r1, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d38:	e028      	b.n	8005d8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	e00d      	b.n	8005d6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	3340      	adds	r3, #64	@ 0x40
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	4413      	add	r3, r2
 8005d62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	3301      	adds	r3, #1
 8005d68:	73fb      	strb	r3, [r7, #15]
 8005d6a:	7bfa      	ldrb	r2, [r7, #15]
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d3ec      	bcc.n	8005d4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d74:	883b      	ldrh	r3, [r7, #0]
 8005d76:	0418      	lsls	r0, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4302      	orrs	r2, r0
 8005d84:	3340      	adds	r3, #64	@ 0x40
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dea:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <HAL_PCDEx_ActivateLPM+0x44>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	10000003 	.word	0x10000003

08005e04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e24:	4b19      	ldr	r3, [pc, #100]	@ (8005e8c <HAL_PWREx_ConfigSupply+0x70>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d00a      	beq.n	8005e46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e30:	4b16      	ldr	r3, [pc, #88]	@ (8005e8c <HAL_PWREx_ConfigSupply+0x70>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d001      	beq.n	8005e42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e01f      	b.n	8005e82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e01d      	b.n	8005e82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e46:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <HAL_PWREx_ConfigSupply+0x70>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f023 0207 	bic.w	r2, r3, #7
 8005e4e:	490f      	ldr	r1, [pc, #60]	@ (8005e8c <HAL_PWREx_ConfigSupply+0x70>)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e56:	f7fc fbb9 	bl	80025cc <HAL_GetTick>
 8005e5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e5c:	e009      	b.n	8005e72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e5e:	f7fc fbb5 	bl	80025cc <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e6c:	d901      	bls.n	8005e72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e007      	b.n	8005e82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e72:	4b06      	ldr	r3, [pc, #24]	@ (8005e8c <HAL_PWREx_ConfigSupply+0x70>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e7e:	d1ee      	bne.n	8005e5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	58024800 	.word	0x58024800

08005e90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e94:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a04      	ldr	r2, [pc, #16]	@ (8005eac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e9e:	60d3      	str	r3, [r2, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	58024800 	.word	0x58024800

08005eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08c      	sub	sp, #48	@ 0x30
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f000 bc48 	b.w	8006754 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8088 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed2:	4b99      	ldr	r3, [pc, #612]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005edc:	4b96      	ldr	r3, [pc, #600]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d007      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x48>
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	2b18      	cmp	r3, #24
 8005eec:	d111      	bne.n	8005f12 <HAL_RCC_OscConfig+0x62>
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d10c      	bne.n	8005f12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d06d      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x130>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d169      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f000 bc21 	b.w	8006754 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1a:	d106      	bne.n	8005f2a <HAL_RCC_OscConfig+0x7a>
 8005f1c:	4b86      	ldr	r3, [pc, #536]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a85      	ldr	r2, [pc, #532]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e02e      	b.n	8005f88 <HAL_RCC_OscConfig+0xd8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x9c>
 8005f32:	4b81      	ldr	r3, [pc, #516]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a80      	ldr	r2, [pc, #512]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	4b7e      	ldr	r3, [pc, #504]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a7d      	ldr	r2, [pc, #500]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	e01d      	b.n	8005f88 <HAL_RCC_OscConfig+0xd8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f54:	d10c      	bne.n	8005f70 <HAL_RCC_OscConfig+0xc0>
 8005f56:	4b78      	ldr	r3, [pc, #480]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a77      	ldr	r2, [pc, #476]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	4b75      	ldr	r3, [pc, #468]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a74      	ldr	r2, [pc, #464]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCC_OscConfig+0xd8>
 8005f70:	4b71      	ldr	r3, [pc, #452]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a70      	ldr	r2, [pc, #448]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6d      	ldr	r2, [pc, #436]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fc fb1c 	bl	80025cc <HAL_GetTick>
 8005f94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f98:	f7fc fb18 	bl	80025cc <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b64      	cmp	r3, #100	@ 0x64
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e3d4      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005faa:	4b63      	ldr	r3, [pc, #396]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0xe8>
 8005fb6:	e014      	b.n	8005fe2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fc fb08 	bl	80025cc <HAL_GetTick>
 8005fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc0:	f7fc fb04 	bl	80025cc <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	@ 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e3c0      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fd2:	4b59      	ldr	r3, [pc, #356]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x110>
 8005fde:	e000      	b.n	8005fe2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 80ca 	beq.w	8006184 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff0:	4b51      	ldr	r3, [pc, #324]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ff8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_RCC_OscConfig+0x166>
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	2b18      	cmp	r3, #24
 800600a:	d156      	bne.n	80060ba <HAL_RCC_OscConfig+0x20a>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d151      	bne.n	80060ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006016:	4b48      	ldr	r3, [pc, #288]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_RCC_OscConfig+0x17e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e392      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800602e:	4b42      	ldr	r3, [pc, #264]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 0219 	bic.w	r2, r3, #25
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	493f      	ldr	r1, [pc, #252]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fc fac4 	bl	80025cc <HAL_GetTick>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006048:	f7fc fac0 	bl	80025cc <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e37c      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605a:	4b37      	ldr	r3, [pc, #220]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006066:	f7fc fae1 	bl	800262c <HAL_GetREVID>
 800606a:	4603      	mov	r3, r0
 800606c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006070:	4293      	cmp	r3, r2
 8006072:	d817      	bhi.n	80060a4 <HAL_RCC_OscConfig+0x1f4>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d108      	bne.n	800608e <HAL_RCC_OscConfig+0x1de>
 800607c:	4b2e      	ldr	r3, [pc, #184]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006084:	4a2c      	ldr	r2, [pc, #176]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800608c:	e07a      	b.n	8006184 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608e:	4b2a      	ldr	r3, [pc, #168]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	031b      	lsls	r3, r3, #12
 800609c:	4926      	ldr	r1, [pc, #152]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a2:	e06f      	b.n	8006184 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a4:	4b24      	ldr	r3, [pc, #144]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	4921      	ldr	r1, [pc, #132]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060b8:	e064      	b.n	8006184 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d047      	beq.n	8006152 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 0219 	bic.w	r2, r3, #25
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	491a      	ldr	r1, [pc, #104]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fc fa7a 	bl	80025cc <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060dc:	f7fc fa76 	bl	80025cc <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e332      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060ee:	4b12      	ldr	r3, [pc, #72]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fa:	f7fc fa97 	bl	800262c <HAL_GetREVID>
 80060fe:	4603      	mov	r3, r0
 8006100:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006104:	4293      	cmp	r3, r2
 8006106:	d819      	bhi.n	800613c <HAL_RCC_OscConfig+0x28c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b40      	cmp	r3, #64	@ 0x40
 800610e:	d108      	bne.n	8006122 <HAL_RCC_OscConfig+0x272>
 8006110:	4b09      	ldr	r3, [pc, #36]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006118:	4a07      	ldr	r2, [pc, #28]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 800611a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611e:	6053      	str	r3, [r2, #4]
 8006120:	e030      	b.n	8006184 <HAL_RCC_OscConfig+0x2d4>
 8006122:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	031b      	lsls	r3, r3, #12
 8006130:	4901      	ldr	r1, [pc, #4]	@ (8006138 <HAL_RCC_OscConfig+0x288>)
 8006132:	4313      	orrs	r3, r2
 8006134:	604b      	str	r3, [r1, #4]
 8006136:	e025      	b.n	8006184 <HAL_RCC_OscConfig+0x2d4>
 8006138:	58024400 	.word	0x58024400
 800613c:	4b9a      	ldr	r3, [pc, #616]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	061b      	lsls	r3, r3, #24
 800614a:	4997      	ldr	r1, [pc, #604]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800614c:	4313      	orrs	r3, r2
 800614e:	604b      	str	r3, [r1, #4]
 8006150:	e018      	b.n	8006184 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006152:	4b95      	ldr	r3, [pc, #596]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a94      	ldr	r2, [pc, #592]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fc fa35 	bl	80025cc <HAL_GetTick>
 8006162:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006166:	f7fc fa31 	bl	80025cc <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e2ed      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006178:	4b8b      	ldr	r3, [pc, #556]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f0      	bne.n	8006166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80a9 	beq.w	80062e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006192:	4b85      	ldr	r3, [pc, #532]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800619a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800619c:	4b82      	ldr	r3, [pc, #520]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d007      	beq.n	80061b8 <HAL_RCC_OscConfig+0x308>
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b18      	cmp	r3, #24
 80061ac:	d13a      	bne.n	8006224 <HAL_RCC_OscConfig+0x374>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d135      	bne.n	8006224 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061b8:	4b7b      	ldr	r3, [pc, #492]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_OscConfig+0x320>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	2b80      	cmp	r3, #128	@ 0x80
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e2c1      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061d0:	f7fc fa2c 	bl	800262c <HAL_GetREVID>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061da:	4293      	cmp	r3, r2
 80061dc:	d817      	bhi.n	800620e <HAL_RCC_OscConfig+0x35e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d108      	bne.n	80061f8 <HAL_RCC_OscConfig+0x348>
 80061e6:	4b70      	ldr	r3, [pc, #448]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061ee:	4a6e      	ldr	r2, [pc, #440]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061f6:	e075      	b.n	80062e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061f8:	4b6b      	ldr	r3, [pc, #428]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	069b      	lsls	r3, r3, #26
 8006206:	4968      	ldr	r1, [pc, #416]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006208:	4313      	orrs	r3, r2
 800620a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800620c:	e06a      	b.n	80062e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800620e:	4b66      	ldr	r3, [pc, #408]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	061b      	lsls	r3, r3, #24
 800621c:	4962      	ldr	r1, [pc, #392]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800621e:	4313      	orrs	r3, r2
 8006220:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006222:	e05f      	b.n	80062e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d042      	beq.n	80062b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800622c:	4b5e      	ldr	r3, [pc, #376]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a5d      	ldr	r2, [pc, #372]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fc f9c8 	bl	80025cc <HAL_GetTick>
 800623c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006240:	f7fc f9c4 	bl	80025cc <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e280      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006252:	4b55      	ldr	r3, [pc, #340]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800625e:	f7fc f9e5 	bl	800262c <HAL_GetREVID>
 8006262:	4603      	mov	r3, r0
 8006264:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006268:	4293      	cmp	r3, r2
 800626a:	d817      	bhi.n	800629c <HAL_RCC_OscConfig+0x3ec>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	2b20      	cmp	r3, #32
 8006272:	d108      	bne.n	8006286 <HAL_RCC_OscConfig+0x3d6>
 8006274:	4b4c      	ldr	r3, [pc, #304]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800627c:	4a4a      	ldr	r2, [pc, #296]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800627e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006282:	6053      	str	r3, [r2, #4]
 8006284:	e02e      	b.n	80062e4 <HAL_RCC_OscConfig+0x434>
 8006286:	4b48      	ldr	r3, [pc, #288]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	069b      	lsls	r3, r3, #26
 8006294:	4944      	ldr	r1, [pc, #272]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006296:	4313      	orrs	r3, r2
 8006298:	604b      	str	r3, [r1, #4]
 800629a:	e023      	b.n	80062e4 <HAL_RCC_OscConfig+0x434>
 800629c:	4b42      	ldr	r3, [pc, #264]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	061b      	lsls	r3, r3, #24
 80062aa:	493f      	ldr	r1, [pc, #252]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60cb      	str	r3, [r1, #12]
 80062b0:	e018      	b.n	80062e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062b2:	4b3d      	ldr	r3, [pc, #244]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a3c      	ldr	r2, [pc, #240]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80062b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062be:	f7fc f985 	bl	80025cc <HAL_GetTick>
 80062c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062c6:	f7fc f981 	bl	80025cc <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e23d      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062d8:	4b33      	ldr	r3, [pc, #204]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f0      	bne.n	80062c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d036      	beq.n	800635e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d019      	beq.n	800632c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062f8:	4b2b      	ldr	r3, [pc, #172]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80062fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fc:	4a2a      	ldr	r2, [pc, #168]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006304:	f7fc f962 	bl	80025cc <HAL_GetTick>
 8006308:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800630c:	f7fc f95e 	bl	80025cc <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e21a      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800631e:	4b22      	ldr	r3, [pc, #136]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0x45c>
 800632a:	e018      	b.n	800635e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800632c:	4b1e      	ldr	r3, [pc, #120]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800632e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006330:	4a1d      	ldr	r2, [pc, #116]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006338:	f7fc f948 	bl	80025cc <HAL_GetTick>
 800633c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006340:	f7fc f944 	bl	80025cc <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e200      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006352:	4b15      	ldr	r3, [pc, #84]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d039      	beq.n	80063de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01c      	beq.n	80063ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a0c      	ldr	r2, [pc, #48]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 8006378:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800637c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800637e:	f7fc f925 	bl	80025cc <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006386:	f7fc f921 	bl	80025cc <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e1dd      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006398:	4b03      	ldr	r3, [pc, #12]	@ (80063a8 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x4d6>
 80063a4:	e01b      	b.n	80063de <HAL_RCC_OscConfig+0x52e>
 80063a6:	bf00      	nop
 80063a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063ac:	4b9b      	ldr	r3, [pc, #620]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a9a      	ldr	r2, [pc, #616]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80063b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063b8:	f7fc f908 	bl	80025cc <HAL_GetTick>
 80063bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063c0:	f7fc f904 	bl	80025cc <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e1c0      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063d2:	4b92      	ldr	r3, [pc, #584]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8081 	beq.w	80064ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063ec:	4b8c      	ldr	r3, [pc, #560]	@ (8006620 <HAL_RCC_OscConfig+0x770>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a8b      	ldr	r2, [pc, #556]	@ (8006620 <HAL_RCC_OscConfig+0x770>)
 80063f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063f8:	f7fc f8e8 	bl	80025cc <HAL_GetTick>
 80063fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006400:	f7fc f8e4 	bl	80025cc <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b64      	cmp	r3, #100	@ 0x64
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e1a0      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006412:	4b83      	ldr	r3, [pc, #524]	@ (8006620 <HAL_RCC_OscConfig+0x770>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d106      	bne.n	8006434 <HAL_RCC_OscConfig+0x584>
 8006426:	4b7d      	ldr	r3, [pc, #500]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642a:	4a7c      	ldr	r2, [pc, #496]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	6713      	str	r3, [r2, #112]	@ 0x70
 8006432:	e02d      	b.n	8006490 <HAL_RCC_OscConfig+0x5e0>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10c      	bne.n	8006456 <HAL_RCC_OscConfig+0x5a6>
 800643c:	4b77      	ldr	r3, [pc, #476]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800643e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006440:	4a76      	ldr	r2, [pc, #472]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	6713      	str	r3, [r2, #112]	@ 0x70
 8006448:	4b74      	ldr	r3, [pc, #464]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800644a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644c:	4a73      	ldr	r2, [pc, #460]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800644e:	f023 0304 	bic.w	r3, r3, #4
 8006452:	6713      	str	r3, [r2, #112]	@ 0x70
 8006454:	e01c      	b.n	8006490 <HAL_RCC_OscConfig+0x5e0>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b05      	cmp	r3, #5
 800645c:	d10c      	bne.n	8006478 <HAL_RCC_OscConfig+0x5c8>
 800645e:	4b6f      	ldr	r3, [pc, #444]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006462:	4a6e      	ldr	r2, [pc, #440]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006464:	f043 0304 	orr.w	r3, r3, #4
 8006468:	6713      	str	r3, [r2, #112]	@ 0x70
 800646a:	4b6c      	ldr	r3, [pc, #432]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	4a6b      	ldr	r2, [pc, #428]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	6713      	str	r3, [r2, #112]	@ 0x70
 8006476:	e00b      	b.n	8006490 <HAL_RCC_OscConfig+0x5e0>
 8006478:	4b68      	ldr	r3, [pc, #416]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800647a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647c:	4a67      	ldr	r2, [pc, #412]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800647e:	f023 0301 	bic.w	r3, r3, #1
 8006482:	6713      	str	r3, [r2, #112]	@ 0x70
 8006484:	4b65      	ldr	r3, [pc, #404]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006488:	4a64      	ldr	r2, [pc, #400]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800648a:	f023 0304 	bic.w	r3, r3, #4
 800648e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d015      	beq.n	80064c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006498:	f7fc f898 	bl	80025cc <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800649e:	e00a      	b.n	80064b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a0:	f7fc f894 	bl	80025cc <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e14e      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064b6:	4b59      	ldr	r3, [pc, #356]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ee      	beq.n	80064a0 <HAL_RCC_OscConfig+0x5f0>
 80064c2:	e014      	b.n	80064ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c4:	f7fc f882 	bl	80025cc <HAL_GetTick>
 80064c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064ca:	e00a      	b.n	80064e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064cc:	f7fc f87e 	bl	80025cc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e138      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064e2:	4b4e      	ldr	r3, [pc, #312]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1ee      	bne.n	80064cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 812d 	beq.w	8006752 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064f8:	4b48      	ldr	r3, [pc, #288]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006500:	2b18      	cmp	r3, #24
 8006502:	f000 80bd 	beq.w	8006680 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	2b02      	cmp	r3, #2
 800650c:	f040 809e 	bne.w	800664c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006510:	4b42      	ldr	r3, [pc, #264]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a41      	ldr	r2, [pc, #260]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800651a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651c:	f7fc f856 	bl	80025cc <HAL_GetTick>
 8006520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006524:	f7fc f852 	bl	80025cc <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e10e      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006536:	4b39      	ldr	r3, [pc, #228]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006542:	4b36      	ldr	r3, [pc, #216]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006546:	4b37      	ldr	r3, [pc, #220]	@ (8006624 <HAL_RCC_OscConfig+0x774>)
 8006548:	4013      	ands	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006552:	0112      	lsls	r2, r2, #4
 8006554:	430a      	orrs	r2, r1
 8006556:	4931      	ldr	r1, [pc, #196]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006558:	4313      	orrs	r3, r2
 800655a:	628b      	str	r3, [r1, #40]	@ 0x28
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	3b01      	subs	r3, #1
 8006562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656a:	3b01      	subs	r3, #1
 800656c:	025b      	lsls	r3, r3, #9
 800656e:	b29b      	uxth	r3, r3
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	3b01      	subs	r3, #1
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006584:	3b01      	subs	r3, #1
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800658c:	4923      	ldr	r1, [pc, #140]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800658e:	4313      	orrs	r3, r2
 8006590:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006592:	4b22      	ldr	r3, [pc, #136]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006596:	4a21      	ldr	r2, [pc, #132]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006598:	f023 0301 	bic.w	r3, r3, #1
 800659c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800659e:	4b1f      	ldr	r3, [pc, #124]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065a2:	4b21      	ldr	r3, [pc, #132]	@ (8006628 <HAL_RCC_OscConfig+0x778>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065aa:	00d2      	lsls	r2, r2, #3
 80065ac:	491b      	ldr	r1, [pc, #108]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065b2:	4b1a      	ldr	r3, [pc, #104]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	f023 020c 	bic.w	r2, r3, #12
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	4917      	ldr	r1, [pc, #92]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065c4:	4b15      	ldr	r3, [pc, #84]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c8:	f023 0202 	bic.w	r2, r3, #2
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d0:	4912      	ldr	r1, [pc, #72]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065d6:	4b11      	ldr	r3, [pc, #68]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	4a10      	ldr	r2, [pc, #64]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e2:	4b0e      	ldr	r3, [pc, #56]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e6:	4a0d      	ldr	r2, [pc, #52]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065ee:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	4a0a      	ldr	r2, [pc, #40]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065fa:	4b08      	ldr	r3, [pc, #32]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	4a07      	ldr	r2, [pc, #28]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a04      	ldr	r2, [pc, #16]	@ (800661c <HAL_RCC_OscConfig+0x76c>)
 800660c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006612:	f7fb ffdb 	bl	80025cc <HAL_GetTick>
 8006616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006618:	e011      	b.n	800663e <HAL_RCC_OscConfig+0x78e>
 800661a:	bf00      	nop
 800661c:	58024400 	.word	0x58024400
 8006620:	58024800 	.word	0x58024800
 8006624:	fffffc0c 	.word	0xfffffc0c
 8006628:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662c:	f7fb ffce 	bl	80025cc <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e08a      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800663e:	4b47      	ldr	r3, [pc, #284]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0x77c>
 800664a:	e082      	b.n	8006752 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664c:	4b43      	ldr	r3, [pc, #268]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a42      	ldr	r2, [pc, #264]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fb ffb8 	bl	80025cc <HAL_GetTick>
 800665c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006660:	f7fb ffb4 	bl	80025cc <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e070      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006672:	4b3a      	ldr	r3, [pc, #232]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x7b0>
 800667e:	e068      	b.n	8006752 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006680:	4b36      	ldr	r3, [pc, #216]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006686:	4b35      	ldr	r3, [pc, #212]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	2b01      	cmp	r3, #1
 8006692:	d031      	beq.n	80066f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f003 0203 	and.w	r2, r3, #3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669e:	429a      	cmp	r2, r3
 80066a0:	d12a      	bne.n	80066f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	091b      	lsrs	r3, r3, #4
 80066a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d122      	bne.n	80066f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d11a      	bne.n	80066f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	0a5b      	lsrs	r3, r3, #9
 80066c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d111      	bne.n	80066f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d108      	bne.n	80066f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	0e1b      	lsrs	r3, r3, #24
 80066ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e02b      	b.n	8006754 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066fc:	4b17      	ldr	r3, [pc, #92]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 80066fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006706:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	429a      	cmp	r2, r3
 8006710:	d01f      	beq.n	8006752 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006712:	4b12      	ldr	r3, [pc, #72]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	4a11      	ldr	r2, [pc, #68]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800671e:	f7fb ff55 	bl	80025cc <HAL_GetTick>
 8006722:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006724:	bf00      	nop
 8006726:	f7fb ff51 	bl	80025cc <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	4293      	cmp	r3, r2
 8006730:	d0f9      	beq.n	8006726 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006732:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006736:	4b0a      	ldr	r3, [pc, #40]	@ (8006760 <HAL_RCC_OscConfig+0x8b0>)
 8006738:	4013      	ands	r3, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800673e:	00d2      	lsls	r2, r2, #3
 8006740:	4906      	ldr	r1, [pc, #24]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006742:	4313      	orrs	r3, r2
 8006744:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006746:	4b05      	ldr	r3, [pc, #20]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	4a04      	ldr	r2, [pc, #16]	@ (800675c <HAL_RCC_OscConfig+0x8ac>)
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3730      	adds	r7, #48	@ 0x30
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	58024400 	.word	0x58024400
 8006760:	ffff0007 	.word	0xffff0007

08006764 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e19c      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006778:	4b8a      	ldr	r3, [pc, #552]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d910      	bls.n	80067a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006786:	4b87      	ldr	r3, [pc, #540]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 020f 	bic.w	r2, r3, #15
 800678e:	4985      	ldr	r1, [pc, #532]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	4313      	orrs	r3, r2
 8006794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006796:	4b83      	ldr	r3, [pc, #524]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d001      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e184      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d010      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	4b7b      	ldr	r3, [pc, #492]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d908      	bls.n	80067d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067c4:	4b78      	ldr	r3, [pc, #480]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	4975      	ldr	r1, [pc, #468]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d010      	beq.n	8006804 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	4b70      	ldr	r3, [pc, #448]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d908      	bls.n	8006804 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067f2:	4b6d      	ldr	r3, [pc, #436]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	496a      	ldr	r1, [pc, #424]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006800:	4313      	orrs	r3, r2
 8006802:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	4b64      	ldr	r3, [pc, #400]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800681c:	429a      	cmp	r2, r3
 800681e:	d908      	bls.n	8006832 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006820:	4b61      	ldr	r3, [pc, #388]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	495e      	ldr	r1, [pc, #376]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 800682e:	4313      	orrs	r3, r2
 8006830:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d010      	beq.n	8006860 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69da      	ldr	r2, [r3, #28]
 8006842:	4b59      	ldr	r3, [pc, #356]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800684a:	429a      	cmp	r2, r3
 800684c:	d908      	bls.n	8006860 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800684e:	4b56      	ldr	r3, [pc, #344]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	4953      	ldr	r1, [pc, #332]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 800685c:	4313      	orrs	r3, r2
 800685e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d010      	beq.n	800688e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	4b4d      	ldr	r3, [pc, #308]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	429a      	cmp	r2, r3
 800687a:	d908      	bls.n	800688e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800687c:	4b4a      	ldr	r3, [pc, #296]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f023 020f 	bic.w	r2, r3, #15
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4947      	ldr	r1, [pc, #284]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 800688a:	4313      	orrs	r3, r2
 800688c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d055      	beq.n	8006946 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800689a:	4b43      	ldr	r3, [pc, #268]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	4940      	ldr	r1, [pc, #256]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d107      	bne.n	80068c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068b4:	4b3c      	ldr	r3, [pc, #240]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d121      	bne.n	8006904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0f6      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d107      	bne.n	80068dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068cc:	4b36      	ldr	r3, [pc, #216]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d115      	bne.n	8006904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0ea      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d107      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068e4:	4b30      	ldr	r3, [pc, #192]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0de      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068f4:	4b2c      	ldr	r3, [pc, #176]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0d6      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006904:	4b28      	ldr	r3, [pc, #160]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f023 0207 	bic.w	r2, r3, #7
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4925      	ldr	r1, [pc, #148]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006912:	4313      	orrs	r3, r2
 8006914:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006916:	f7fb fe59 	bl	80025cc <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691c:	e00a      	b.n	8006934 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800691e:	f7fb fe55 	bl	80025cc <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e0be      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006934:	4b1c      	ldr	r3, [pc, #112]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	429a      	cmp	r2, r3
 8006944:	d1eb      	bne.n	800691e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	4b14      	ldr	r3, [pc, #80]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	429a      	cmp	r2, r3
 8006960:	d208      	bcs.n	8006974 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006962:	4b11      	ldr	r3, [pc, #68]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f023 020f 	bic.w	r2, r3, #15
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	490e      	ldr	r1, [pc, #56]	@ (80069a8 <HAL_RCC_ClockConfig+0x244>)
 8006970:	4313      	orrs	r3, r2
 8006972:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d214      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b08      	ldr	r3, [pc, #32]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 020f 	bic.w	r2, r3, #15
 800698a:	4906      	ldr	r1, [pc, #24]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006992:	4b04      	ldr	r3, [pc, #16]	@ (80069a4 <HAL_RCC_ClockConfig+0x240>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d005      	beq.n	80069ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e086      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x34e>
 80069a4:	52002000 	.word	0x52002000
 80069a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d010      	beq.n	80069da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	4b3f      	ldr	r3, [pc, #252]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d208      	bcs.n	80069da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069c8:	4b3c      	ldr	r3, [pc, #240]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	4939      	ldr	r1, [pc, #228]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d010      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695a      	ldr	r2, [r3, #20]
 80069ea:	4b34      	ldr	r3, [pc, #208]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d208      	bcs.n	8006a08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069f6:	4b31      	ldr	r3, [pc, #196]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	492e      	ldr	r1, [pc, #184]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d010      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699a      	ldr	r2, [r3, #24]
 8006a18:	4b28      	ldr	r3, [pc, #160]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d208      	bcs.n	8006a36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a24:	4b25      	ldr	r3, [pc, #148]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	4922      	ldr	r1, [pc, #136]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d010      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69da      	ldr	r2, [r3, #28]
 8006a46:	4b1d      	ldr	r3, [pc, #116]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d208      	bcs.n	8006a64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a52:	4b1a      	ldr	r3, [pc, #104]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	4917      	ldr	r1, [pc, #92]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a64:	f000 f834 	bl	8006ad0 <HAL_RCC_GetSysClockFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b14      	ldr	r3, [pc, #80]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	0a1b      	lsrs	r3, r3, #8
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	4912      	ldr	r1, [pc, #72]	@ (8006ac0 <HAL_RCC_ClockConfig+0x35c>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a82:	4b0e      	ldr	r3, [pc, #56]	@ (8006abc <HAL_RCC_ClockConfig+0x358>)
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac0 <HAL_RCC_ClockConfig+0x35c>)
 8006a8c:	5cd3      	ldrb	r3, [r2, r3]
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
 8006a98:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac4 <HAL_RCC_ClockConfig+0x360>)
 8006a9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac8 <HAL_RCC_ClockConfig+0x364>)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <HAL_RCC_ClockConfig+0x368>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fa fde6 	bl	8001678 <HAL_InitTick>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	08010f74 	.word	0x08010f74
 8006ac4:	24000004 	.word	0x24000004
 8006ac8:	24000000 	.word	0x24000000
 8006acc:	2400000c 	.word	0x2400000c

08006ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	@ 0x24
 8006ad4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ad6:	4bb3      	ldr	r3, [pc, #716]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ade:	2b18      	cmp	r3, #24
 8006ae0:	f200 8155 	bhi.w	8006d8e <HAL_RCC_GetSysClockFreq+0x2be>
 8006ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b51 	.word	0x08006b51
 8006af0:	08006d8f 	.word	0x08006d8f
 8006af4:	08006d8f 	.word	0x08006d8f
 8006af8:	08006d8f 	.word	0x08006d8f
 8006afc:	08006d8f 	.word	0x08006d8f
 8006b00:	08006d8f 	.word	0x08006d8f
 8006b04:	08006d8f 	.word	0x08006d8f
 8006b08:	08006d8f 	.word	0x08006d8f
 8006b0c:	08006b77 	.word	0x08006b77
 8006b10:	08006d8f 	.word	0x08006d8f
 8006b14:	08006d8f 	.word	0x08006d8f
 8006b18:	08006d8f 	.word	0x08006d8f
 8006b1c:	08006d8f 	.word	0x08006d8f
 8006b20:	08006d8f 	.word	0x08006d8f
 8006b24:	08006d8f 	.word	0x08006d8f
 8006b28:	08006d8f 	.word	0x08006d8f
 8006b2c:	08006b7d 	.word	0x08006b7d
 8006b30:	08006d8f 	.word	0x08006d8f
 8006b34:	08006d8f 	.word	0x08006d8f
 8006b38:	08006d8f 	.word	0x08006d8f
 8006b3c:	08006d8f 	.word	0x08006d8f
 8006b40:	08006d8f 	.word	0x08006d8f
 8006b44:	08006d8f 	.word	0x08006d8f
 8006b48:	08006d8f 	.word	0x08006d8f
 8006b4c:	08006b83 	.word	0x08006b83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b50:	4b94      	ldr	r3, [pc, #592]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b5c:	4b91      	ldr	r3, [pc, #580]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	08db      	lsrs	r3, r3, #3
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	4a90      	ldr	r2, [pc, #576]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b6e:	e111      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b70:	4b8d      	ldr	r3, [pc, #564]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b72:	61bb      	str	r3, [r7, #24]
      break;
 8006b74:	e10e      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b76:	4b8d      	ldr	r3, [pc, #564]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b78:	61bb      	str	r3, [r7, #24]
      break;
 8006b7a:	e10b      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b7e:	61bb      	str	r3, [r7, #24]
      break;
 8006b80:	e108      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b82:	4b88      	ldr	r3, [pc, #544]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b8c:	4b85      	ldr	r3, [pc, #532]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	091b      	lsrs	r3, r3, #4
 8006b92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b96:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b98:	4b82      	ldr	r3, [pc, #520]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ba2:	4b80      	ldr	r3, [pc, #512]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba6:	08db      	lsrs	r3, r3, #3
 8006ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80e1 	beq.w	8006d88 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	f000 8083 	beq.w	8006cd4 <HAL_RCC_GetSysClockFreq+0x204>
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	f200 80a1 	bhi.w	8006d18 <HAL_RCC_GetSysClockFreq+0x248>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_RCC_GetSysClockFreq+0x114>
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d056      	beq.n	8006c90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006be2:	e099      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be4:	4b6f      	ldr	r3, [pc, #444]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02d      	beq.n	8006c4c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	08db      	lsrs	r3, r3, #3
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	4a6b      	ldr	r2, [pc, #428]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006c00:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1a:	4b62      	ldr	r3, [pc, #392]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c2e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c46:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c4a:	e087      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006db8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5e:	4b51      	ldr	r3, [pc, #324]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c72:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c8e:	e065      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006dbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca2:	4b40      	ldr	r3, [pc, #256]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cd2:	e043      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006dc0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cfa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d16:	e021      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006dbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d5c:	4b11      	ldr	r3, [pc, #68]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d60:	0a5b      	lsrs	r3, r3, #9
 8006d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d66:	3301      	adds	r3, #1
 8006d68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d80:	ee17 3a90 	vmov	r3, s15
 8006d84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d86:	e005      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61bb      	str	r3, [r7, #24]
      break;
 8006d8c:	e002      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d90:	61bb      	str	r3, [r7, #24]
      break;
 8006d92:	bf00      	nop
  }

  return sysclockfreq;
 8006d94:	69bb      	ldr	r3, [r7, #24]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3724      	adds	r7, #36	@ 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	007a1200 	.word	0x007a1200
 8006db4:	46000000 	.word	0x46000000
 8006db8:	4c742400 	.word	0x4c742400
 8006dbc:	4a742400 	.word	0x4a742400
 8006dc0:	4af42400 	.word	0x4af42400

08006dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dca:	f7ff fe81 	bl	8006ad0 <HAL_RCC_GetSysClockFreq>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	4b10      	ldr	r3, [pc, #64]	@ (8006e14 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	0a1b      	lsrs	r3, r3, #8
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	490f      	ldr	r1, [pc, #60]	@ (8006e18 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ddc:	5ccb      	ldrb	r3, [r1, r3]
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	fa22 f303 	lsr.w	r3, r2, r3
 8006de6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006de8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	4a09      	ldr	r2, [pc, #36]	@ (8006e18 <HAL_RCC_GetHCLKFreq+0x54>)
 8006df2:	5cd3      	ldrb	r3, [r2, r3]
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfe:	4a07      	ldr	r2, [pc, #28]	@ (8006e1c <HAL_RCC_GetHCLKFreq+0x58>)
 8006e00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e02:	4a07      	ldr	r2, [pc, #28]	@ (8006e20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e08:	4b04      	ldr	r3, [pc, #16]	@ (8006e1c <HAL_RCC_GetHCLKFreq+0x58>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	58024400 	.word	0x58024400
 8006e18:	08010f74 	.word	0x08010f74
 8006e1c:	24000004 	.word	0x24000004
 8006e20:	24000000 	.word	0x24000000

08006e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e28:	f7ff ffcc 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	4904      	ldr	r1, [pc, #16]	@ (8006e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	08010f74 	.word	0x08010f74

08006e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e54:	f7ff ffb6 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4904      	ldr	r1, [pc, #16]	@ (8006e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	58024400 	.word	0x58024400
 8006e78:	08010f74 	.word	0x08010f74

08006e7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	223f      	movs	r2, #63	@ 0x3f
 8006e8a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x7c>)
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0207 	and.w	r2, r3, #7
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006e98:	4b17      	ldr	r3, [pc, #92]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x7c>)
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006ea4:	4b14      	ldr	r3, [pc, #80]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x7c>)
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006eb0:	4b11      	ldr	r3, [pc, #68]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x7c>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x7c>)
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x7c>)
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006ed4:	4b08      	ldr	r3, [pc, #32]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x7c>)
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ee0:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <HAL_RCC_GetClockConfig+0x80>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 020f 	and.w	r2, r3, #15
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	601a      	str	r2, [r3, #0]
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	58024400 	.word	0x58024400
 8006efc:	52002000 	.word	0x52002000

08006f00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f04:	b0ca      	sub	sp, #296	@ 0x128
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f12:	2300      	movs	r3, #0
 8006f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f24:	2500      	movs	r5, #0
 8006f26:	ea54 0305 	orrs.w	r3, r4, r5
 8006f2a:	d049      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f36:	d02f      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006f38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f3c:	d828      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f42:	d01a      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f48:	d822      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f52:	d007      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f54:	e01c      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f56:	4bb8      	ldr	r3, [pc, #736]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	4ab7      	ldr	r2, [pc, #732]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f62:	e01a      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f68:	3308      	adds	r3, #8
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f001 fc8f 	bl	8008890 <RCCEx_PLL2_Config>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f78:	e00f      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	3328      	adds	r3, #40	@ 0x28
 8006f80:	2102      	movs	r1, #2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fd36 	bl	80089f4 <RCCEx_PLL3_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f8e:	e004      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f96:	e000      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fa2:	4ba5      	ldr	r3, [pc, #660]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fb0:	4aa1      	ldr	r2, [pc, #644]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fb6:	e003      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006fcc:	f04f 0900 	mov.w	r9, #0
 8006fd0:	ea58 0309 	orrs.w	r3, r8, r9
 8006fd4:	d047      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d82a      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	08006ffd 	.word	0x08006ffd
 8006fec:	0800700b 	.word	0x0800700b
 8006ff0:	08007021 	.word	0x08007021
 8006ff4:	0800703f 	.word	0x0800703f
 8006ff8:	0800703f 	.word	0x0800703f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffc:	4b8e      	ldr	r3, [pc, #568]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a8d      	ldr	r2, [pc, #564]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007008:	e01a      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700e:	3308      	adds	r3, #8
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f001 fc3c 	bl	8008890 <RCCEx_PLL2_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800701e:	e00f      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007024:	3328      	adds	r3, #40	@ 0x28
 8007026:	2100      	movs	r1, #0
 8007028:	4618      	mov	r0, r3
 800702a:	f001 fce3 	bl	80089f4 <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007034:	e004      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800703c:	e000      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800703e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007048:	4b7b      	ldr	r3, [pc, #492]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800704a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704c:	f023 0107 	bic.w	r1, r3, #7
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007056:	4a78      	ldr	r2, [pc, #480]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007058:	430b      	orrs	r3, r1
 800705a:	6513      	str	r3, [r2, #80]	@ 0x50
 800705c:	e003      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007072:	f04f 0b00 	mov.w	fp, #0
 8007076:	ea5a 030b 	orrs.w	r3, sl, fp
 800707a:	d04c      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007086:	d030      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800708c:	d829      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800708e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007090:	d02d      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007092:	2bc0      	cmp	r3, #192	@ 0xc0
 8007094:	d825      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007096:	2b80      	cmp	r3, #128	@ 0x80
 8007098:	d018      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800709a:	2b80      	cmp	r3, #128	@ 0x80
 800709c:	d821      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80070a2:	2b40      	cmp	r3, #64	@ 0x40
 80070a4:	d007      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80070a6:	e01c      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a8:	4b63      	ldr	r3, [pc, #396]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ac:	4a62      	ldr	r2, [pc, #392]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070b4:	e01c      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ba:	3308      	adds	r3, #8
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 fbe6 	bl	8008890 <RCCEx_PLL2_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070ca:	e011      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d0:	3328      	adds	r3, #40	@ 0x28
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fc8d 	bl	80089f4 <RCCEx_PLL3_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80070e0:	e006      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80070ea:	bf00      	nop
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80070ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070f8:	4b4f      	ldr	r3, [pc, #316]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007106:	4a4c      	ldr	r2, [pc, #304]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007108:	430b      	orrs	r3, r1
 800710a:	6513      	str	r3, [r2, #80]	@ 0x50
 800710c:	e003      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007122:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007126:	2300      	movs	r3, #0
 8007128:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800712c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007130:	460b      	mov	r3, r1
 8007132:	4313      	orrs	r3, r2
 8007134:	d053      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800713e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007142:	d035      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007144:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007148:	d82e      	bhi.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800714a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800714e:	d031      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007150:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007154:	d828      	bhi.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800715a:	d01a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800715c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007160:	d822      	bhi.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800716a:	d007      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800716c:	e01c      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716e:	4b32      	ldr	r3, [pc, #200]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	4a31      	ldr	r2, [pc, #196]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800717a:	e01c      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800717c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007180:	3308      	adds	r3, #8
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fb83 	bl	8008890 <RCCEx_PLL2_Config>
 800718a:	4603      	mov	r3, r0
 800718c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007190:	e011      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007196:	3328      	adds	r3, #40	@ 0x28
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f001 fc2a 	bl	80089f4 <RCCEx_PLL3_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a6:	e006      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ae:	e002      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80071b0:	bf00      	nop
 80071b2:	e000      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80071b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071be:	4b1e      	ldr	r3, [pc, #120]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071d4:	e003      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80071ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80071ee:	2300      	movs	r3, #0
 80071f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80071f8:	460b      	mov	r3, r1
 80071fa:	4313      	orrs	r3, r2
 80071fc:	d056      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007206:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800720a:	d038      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800720c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007210:	d831      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007216:	d034      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007218:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800721c:	d82b      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800721e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007222:	d01d      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007224:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007228:	d825      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d006      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800722e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007234:	e01f      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007236:	bf00      	nop
 8007238:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800723c:	4ba2      	ldr	r3, [pc, #648]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800723e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007240:	4aa1      	ldr	r2, [pc, #644]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007248:	e01c      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	3308      	adds	r3, #8
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fb1c 	bl	8008890 <RCCEx_PLL2_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800725e:	e011      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007264:	3328      	adds	r3, #40	@ 0x28
 8007266:	2100      	movs	r1, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f001 fbc3 	bl	80089f4 <RCCEx_PLL3_Config>
 800726e:	4603      	mov	r3, r0
 8007270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007274:	e006      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800727c:	e002      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800727e:	bf00      	nop
 8007280:	e000      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800728c:	4b8e      	ldr	r3, [pc, #568]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800728e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007290:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800729c:	4a8a      	ldr	r2, [pc, #552]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800729e:	430b      	orrs	r3, r1
 80072a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80072b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	d03a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d2:	2b30      	cmp	r3, #48	@ 0x30
 80072d4:	d01f      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80072d6:	2b30      	cmp	r3, #48	@ 0x30
 80072d8:	d819      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d00c      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d815      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d019      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80072e6:	2b10      	cmp	r3, #16
 80072e8:	d111      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ea:	4b77      	ldr	r3, [pc, #476]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	4a76      	ldr	r2, [pc, #472]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80072f6:	e011      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	3308      	adds	r3, #8
 80072fe:	2102      	movs	r1, #2
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fac5 	bl	8008890 <RCCEx_PLL2_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800730c:	e006      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007314:	e002      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007316:	bf00      	nop
 8007318:	e000      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800731a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007324:	4b68      	ldr	r3, [pc, #416]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007328:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800732c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007332:	4a65      	ldr	r2, [pc, #404]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007334:	430b      	orrs	r3, r1
 8007336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007338:	e003      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800734e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007352:	2300      	movs	r3, #0
 8007354:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007358:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800735c:	460b      	mov	r3, r1
 800735e:	4313      	orrs	r3, r2
 8007360:	d051      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800736c:	d035      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800736e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007372:	d82e      	bhi.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007374:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007378:	d031      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800737a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800737e:	d828      	bhi.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007384:	d01a      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800738a:	d822      	bhi.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007394:	d007      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007396:	e01c      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007398:	4b4b      	ldr	r3, [pc, #300]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	4a4a      	ldr	r2, [pc, #296]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800739e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073a4:	e01c      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	3308      	adds	r3, #8
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 fa6e 	bl	8008890 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073ba:	e011      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c0:	3328      	adds	r3, #40	@ 0x28
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 fb15 	bl	80089f4 <RCCEx_PLL3_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073d0:	e006      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d8:	e002      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80073da:	bf00      	nop
 80073dc:	e000      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80073de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80073e8:	4b37      	ldr	r3, [pc, #220]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80073f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073f6:	4a34      	ldr	r2, [pc, #208]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80073fc:	e003      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007412:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007416:	2300      	movs	r3, #0
 8007418:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800741c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007420:	460b      	mov	r3, r1
 8007422:	4313      	orrs	r3, r2
 8007424:	d056      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800742c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007430:	d033      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007432:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007436:	d82c      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007438:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800743c:	d02f      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800743e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007442:	d826      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007444:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007448:	d02b      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800744a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800744e:	d820      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007454:	d012      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800745a:	d81a      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d022      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007464:	d115      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746a:	3308      	adds	r3, #8
 800746c:	2101      	movs	r1, #1
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fa0e 	bl	8008890 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800747a:	e015      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007480:	3328      	adds	r3, #40	@ 0x28
 8007482:	2101      	movs	r1, #1
 8007484:	4618      	mov	r0, r3
 8007486:	f001 fab5 	bl	80089f4 <RCCEx_PLL3_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007490:	e00a      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007498:	e006      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800749a:	bf00      	nop
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800749e:	bf00      	nop
 80074a0:	e002      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074a2:	bf00      	nop
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10d      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074b0:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074be:	4a02      	ldr	r2, [pc, #8]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074c0:	430b      	orrs	r3, r1
 80074c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80074c4:	e006      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80074c6:	bf00      	nop
 80074c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80074e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	d055      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007500:	d033      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007506:	d82c      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750c:	d02f      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800750e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007512:	d826      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007514:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007518:	d02b      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800751a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800751e:	d820      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007524:	d012      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800752a:	d81a      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d022      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007534:	d115      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753a:	3308      	adds	r3, #8
 800753c:	2101      	movs	r1, #1
 800753e:	4618      	mov	r0, r3
 8007540:	f001 f9a6 	bl	8008890 <RCCEx_PLL2_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800754a:	e015      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007550:	3328      	adds	r3, #40	@ 0x28
 8007552:	2101      	movs	r1, #1
 8007554:	4618      	mov	r0, r3
 8007556:	f001 fa4d 	bl	80089f4 <RCCEx_PLL3_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007560:	e00a      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007568:	e006      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800756a:	bf00      	nop
 800756c:	e004      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800756e:	bf00      	nop
 8007570:	e002      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10b      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007580:	4ba3      	ldr	r3, [pc, #652]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007584:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007590:	4a9f      	ldr	r2, [pc, #636]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007592:	430b      	orrs	r3, r1
 8007594:	6593      	str	r3, [r2, #88]	@ 0x58
 8007596:	e003      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80075ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075b0:	2300      	movs	r3, #0
 80075b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075ba:	460b      	mov	r3, r1
 80075bc:	4313      	orrs	r3, r2
 80075be:	d037      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ca:	d00e      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80075cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075d0:	d816      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d018      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80075d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075da:	d111      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075dc:	4b8c      	ldr	r3, [pc, #560]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	4a8b      	ldr	r2, [pc, #556]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80075e8:	e00f      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ee:	3308      	adds	r3, #8
 80075f0:	2101      	movs	r1, #1
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 f94c 	bl	8008890 <RCCEx_PLL2_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80075fe:	e004      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007606:	e000      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007612:	4b7f      	ldr	r3, [pc, #508]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007616:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007620:	4a7b      	ldr	r2, [pc, #492]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007622:	430b      	orrs	r3, r1
 8007624:	6513      	str	r3, [r2, #80]	@ 0x50
 8007626:	e003      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800762c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800763c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007640:	2300      	movs	r3, #0
 8007642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007646:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800764a:	460b      	mov	r3, r1
 800764c:	4313      	orrs	r3, r2
 800764e:	d039      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007656:	2b03      	cmp	r3, #3
 8007658:	d81c      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800765a:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	0800769d 	.word	0x0800769d
 8007664:	08007671 	.word	0x08007671
 8007668:	0800767f 	.word	0x0800767f
 800766c:	0800769d 	.word	0x0800769d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007670:	4b67      	ldr	r3, [pc, #412]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	4a66      	ldr	r2, [pc, #408]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800767a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800767c:	e00f      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007682:	3308      	adds	r3, #8
 8007684:	2102      	movs	r1, #2
 8007686:	4618      	mov	r0, r3
 8007688:	f001 f902 	bl	8008890 <RCCEx_PLL2_Config>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007692:	e004      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800769a:	e000      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800769c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076a6:	4b5a      	ldr	r3, [pc, #360]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076aa:	f023 0103 	bic.w	r1, r3, #3
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b4:	4a56      	ldr	r2, [pc, #344]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b6:	430b      	orrs	r3, r1
 80076b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076ba:	e003      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80076d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076d4:	2300      	movs	r3, #0
 80076d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076de:	460b      	mov	r3, r1
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f000 809f 	beq.w	8007824 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076e6:	4b4b      	ldr	r3, [pc, #300]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a4a      	ldr	r2, [pc, #296]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80076ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076f2:	f7fa ff6b 	bl	80025cc <HAL_GetTick>
 80076f6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076fa:	e00b      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076fc:	f7fa ff66 	bl	80025cc <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b64      	cmp	r3, #100	@ 0x64
 800770a:	d903      	bls.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007712:	e005      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007714:	4b3f      	ldr	r3, [pc, #252]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0ed      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007724:	2b00      	cmp	r3, #0
 8007726:	d179      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007728:	4b39      	ldr	r3, [pc, #228]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800772a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007730:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007734:	4053      	eors	r3, r2
 8007736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800773a:	2b00      	cmp	r3, #0
 800773c:	d015      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800773e:	4b34      	ldr	r3, [pc, #208]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007746:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800774a:	4b31      	ldr	r3, [pc, #196]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774e:	4a30      	ldr	r2, [pc, #192]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007754:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007756:	4b2e      	ldr	r3, [pc, #184]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775a:	4a2d      	ldr	r2, [pc, #180]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800775c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007760:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007762:	4a2b      	ldr	r2, [pc, #172]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007768:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007776:	d118      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007778:	f7fa ff28 	bl	80025cc <HAL_GetTick>
 800777c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007780:	e00d      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007782:	f7fa ff23 	bl	80025cc <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800778c:	1ad2      	subs	r2, r2, r3
 800778e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007792:	429a      	cmp	r2, r3
 8007794:	d903      	bls.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800779c:	e005      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800779e:	4b1c      	ldr	r3, [pc, #112]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0eb      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80077aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d129      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077c2:	d10e      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80077c4:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077d4:	091a      	lsrs	r2, r3, #4
 80077d6:	4b10      	ldr	r3, [pc, #64]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80077d8:	4013      	ands	r3, r2
 80077da:	4a0d      	ldr	r2, [pc, #52]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077dc:	430b      	orrs	r3, r1
 80077de:	6113      	str	r3, [r2, #16]
 80077e0:	e005      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80077e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077ec:	6113      	str	r3, [r2, #16]
 80077ee:	4b08      	ldr	r3, [pc, #32]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077fe:	4a04      	ldr	r2, [pc, #16]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007800:	430b      	orrs	r3, r1
 8007802:	6713      	str	r3, [r2, #112]	@ 0x70
 8007804:	e00e      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800780a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800780e:	e009      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007810:	58024400 	.word	0x58024400
 8007814:	58024800 	.word	0x58024800
 8007818:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f002 0301 	and.w	r3, r2, #1
 8007830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800783a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800783e:	460b      	mov	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	f000 8089 	beq.w	8007958 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800784c:	2b28      	cmp	r3, #40	@ 0x28
 800784e:	d86b      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007850:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007931 	.word	0x08007931
 800785c:	08007929 	.word	0x08007929
 8007860:	08007929 	.word	0x08007929
 8007864:	08007929 	.word	0x08007929
 8007868:	08007929 	.word	0x08007929
 800786c:	08007929 	.word	0x08007929
 8007870:	08007929 	.word	0x08007929
 8007874:	08007929 	.word	0x08007929
 8007878:	080078fd 	.word	0x080078fd
 800787c:	08007929 	.word	0x08007929
 8007880:	08007929 	.word	0x08007929
 8007884:	08007929 	.word	0x08007929
 8007888:	08007929 	.word	0x08007929
 800788c:	08007929 	.word	0x08007929
 8007890:	08007929 	.word	0x08007929
 8007894:	08007929 	.word	0x08007929
 8007898:	08007913 	.word	0x08007913
 800789c:	08007929 	.word	0x08007929
 80078a0:	08007929 	.word	0x08007929
 80078a4:	08007929 	.word	0x08007929
 80078a8:	08007929 	.word	0x08007929
 80078ac:	08007929 	.word	0x08007929
 80078b0:	08007929 	.word	0x08007929
 80078b4:	08007929 	.word	0x08007929
 80078b8:	08007931 	.word	0x08007931
 80078bc:	08007929 	.word	0x08007929
 80078c0:	08007929 	.word	0x08007929
 80078c4:	08007929 	.word	0x08007929
 80078c8:	08007929 	.word	0x08007929
 80078cc:	08007929 	.word	0x08007929
 80078d0:	08007929 	.word	0x08007929
 80078d4:	08007929 	.word	0x08007929
 80078d8:	08007931 	.word	0x08007931
 80078dc:	08007929 	.word	0x08007929
 80078e0:	08007929 	.word	0x08007929
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007929 	.word	0x08007929
 80078ec:	08007929 	.word	0x08007929
 80078f0:	08007929 	.word	0x08007929
 80078f4:	08007929 	.word	0x08007929
 80078f8:	08007931 	.word	0x08007931
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	3308      	adds	r3, #8
 8007902:	2101      	movs	r1, #1
 8007904:	4618      	mov	r0, r3
 8007906:	f000 ffc3 	bl	8008890 <RCCEx_PLL2_Config>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007910:	e00f      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007916:	3328      	adds	r3, #40	@ 0x28
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f001 f86a 	bl	80089f4 <RCCEx_PLL3_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007926:	e004      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800792e:	e000      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800793a:	4bbf      	ldr	r3, [pc, #764]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800793c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007948:	4abb      	ldr	r2, [pc, #748]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800794a:	430b      	orrs	r3, r1
 800794c:	6553      	str	r3, [r2, #84]	@ 0x54
 800794e:	e003      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f002 0302 	and.w	r3, r2, #2
 8007964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007968:	2300      	movs	r3, #0
 800796a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800796e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007972:	460b      	mov	r3, r1
 8007974:	4313      	orrs	r3, r2
 8007976:	d041      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800797e:	2b05      	cmp	r3, #5
 8007980:	d824      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007982:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079d5 	.word	0x080079d5
 800798c:	080079a1 	.word	0x080079a1
 8007990:	080079b7 	.word	0x080079b7
 8007994:	080079d5 	.word	0x080079d5
 8007998:	080079d5 	.word	0x080079d5
 800799c:	080079d5 	.word	0x080079d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a4:	3308      	adds	r3, #8
 80079a6:	2101      	movs	r1, #1
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 ff71 	bl	8008890 <RCCEx_PLL2_Config>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079b4:	e00f      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	3328      	adds	r3, #40	@ 0x28
 80079bc:	2101      	movs	r1, #1
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 f818 	bl	80089f4 <RCCEx_PLL3_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80079ca:	e004      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079d2:	e000      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80079d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079de:	4b96      	ldr	r3, [pc, #600]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e2:	f023 0107 	bic.w	r1, r3, #7
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ec:	4a92      	ldr	r2, [pc, #584]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079ee:	430b      	orrs	r3, r1
 80079f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80079f2:	e003      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f002 0304 	and.w	r3, r2, #4
 8007a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	d044      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a24:	2b05      	cmp	r3, #5
 8007a26:	d825      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007a28:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007a7d 	.word	0x08007a7d
 8007a34:	08007a49 	.word	0x08007a49
 8007a38:	08007a5f 	.word	0x08007a5f
 8007a3c:	08007a7d 	.word	0x08007a7d
 8007a40:	08007a7d 	.word	0x08007a7d
 8007a44:	08007a7d 	.word	0x08007a7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 ff1d 	bl	8008890 <RCCEx_PLL2_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a5c:	e00f      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	3328      	adds	r3, #40	@ 0x28
 8007a64:	2101      	movs	r1, #1
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 ffc4 	bl	80089f4 <RCCEx_PLL3_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007a72:	e004      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a86:	4b6c      	ldr	r3, [pc, #432]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8a:	f023 0107 	bic.w	r1, r3, #7
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a96:	4a68      	ldr	r2, [pc, #416]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a9c:	e003      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f002 0320 	and.w	r3, r2, #32
 8007ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	d055      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ad2:	d033      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ad8:	d82c      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ade:	d02f      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ae4:	d826      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ae6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007aea:	d02b      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007aec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007af0:	d820      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af6:	d012      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007afc:	d81a      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d022      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b06:	d115      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	2100      	movs	r1, #0
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 febd 	bl	8008890 <RCCEx_PLL2_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b1c:	e015      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	3328      	adds	r3, #40	@ 0x28
 8007b24:	2102      	movs	r1, #2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 ff64 	bl	80089f4 <RCCEx_PLL3_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b32:	e00a      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b3a:	e006      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b3c:	bf00      	nop
 8007b3e:	e004      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b40:	bf00      	nop
 8007b42:	e002      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b44:	bf00      	nop
 8007b46:	e000      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10b      	bne.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b52:	4b39      	ldr	r3, [pc, #228]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b56:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b62:	4a35      	ldr	r2, [pc, #212]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b82:	2300      	movs	r3, #0
 8007b84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	d058      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b9e:	d033      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007ba0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ba4:	d82c      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007baa:	d02f      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb0:	d826      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bb6:	d02b      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007bb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bbc:	d820      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bc2:	d012      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bc8:	d81a      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d022      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd2:	d115      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd8:	3308      	adds	r3, #8
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fe57 	bl	8008890 <RCCEx_PLL2_Config>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007be8:	e015      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bee:	3328      	adds	r3, #40	@ 0x28
 8007bf0:	2102      	movs	r1, #2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fefe 	bl	80089f4 <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007bfe:	e00a      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c06:	e006      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c08:	bf00      	nop
 8007c0a:	e004      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c0c:	bf00      	nop
 8007c0e:	e002      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c10:	bf00      	nop
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10e      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c1e:	4b06      	ldr	r3, [pc, #24]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c22:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c2e:	4a02      	ldr	r2, [pc, #8]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c34:	e006      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007c36:	bf00      	nop
 8007c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c54:	2300      	movs	r3, #0
 8007c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4313      	orrs	r3, r2
 8007c62:	d055      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c70:	d033      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007c72:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007c76:	d82c      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c7c:	d02f      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c82:	d826      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c84:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c88:	d02b      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007c8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007c8e:	d820      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c94:	d012      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c9a:	d81a      	bhi.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d022      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca4:	d115      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007caa:	3308      	adds	r3, #8
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fdee 	bl	8008890 <RCCEx_PLL2_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cba:	e015      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc0:	3328      	adds	r3, #40	@ 0x28
 8007cc2:	2102      	movs	r1, #2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fe95 	bl	80089f4 <RCCEx_PLL3_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007cd0:	e00a      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cd8:	e006      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cda:	bf00      	nop
 8007cdc:	e004      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007cde:	bf00      	nop
 8007ce0:	e002      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ce2:	bf00      	nop
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007cf0:	4ba1      	ldr	r3, [pc, #644]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d00:	4a9d      	ldr	r2, [pc, #628]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d02:	430b      	orrs	r3, r1
 8007d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d06:	e003      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f002 0308 	and.w	r3, r2, #8
 8007d1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d20:	2300      	movs	r3, #0
 8007d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	d01e      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	3328      	adds	r3, #40	@ 0x28
 8007d44:	2102      	movs	r1, #2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fe54 	bl	80089f4 <RCCEx_PLL3_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d58:	4b87      	ldr	r3, [pc, #540]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d68:	4a83      	ldr	r2, [pc, #524]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f002 0310 	and.w	r3, r2, #16
 8007d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d84:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	d01e      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d9a:	d10c      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da0:	3328      	adds	r3, #40	@ 0x28
 8007da2:	2102      	movs	r1, #2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fe25 	bl	80089f4 <RCCEx_PLL3_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007db6:	4b70      	ldr	r3, [pc, #448]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007dd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007de2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007de6:	460b      	mov	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	d03e      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007df8:	d022      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007dfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dfe:	d81b      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e08:	d00b      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007e0a:	e015      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e10:	3308      	adds	r3, #8
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fd3b 	bl	8008890 <RCCEx_PLL2_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e20:	e00f      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	3328      	adds	r3, #40	@ 0x28
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fde2 	bl	80089f4 <RCCEx_PLL3_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e36:	e004      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e3e:	e000      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e5a:	4a47      	ldr	r2, [pc, #284]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e60:	e003      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007e76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e78:	2300      	movs	r3, #0
 8007e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e80:	460b      	mov	r3, r1
 8007e82:	4313      	orrs	r3, r2
 8007e84:	d03b      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e92:	d01f      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007e94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e98:	d818      	bhi.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9e:	d003      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ea4:	d007      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007ea6:	e011      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea8:	4b33      	ldr	r3, [pc, #204]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eac:	4a32      	ldr	r2, [pc, #200]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007eb4:	e00f      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eba:	3328      	adds	r3, #40	@ 0x28
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fd98 	bl	80089f4 <RCCEx_PLL3_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007eca:	e004      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ede:	4b26      	ldr	r3, [pc, #152]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eee:	4a22      	ldr	r2, [pc, #136]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ef4:	e003      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f14:	460b      	mov	r3, r1
 8007f16:	4313      	orrs	r3, r2
 8007f18:	d034      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f28:	d007      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007f2a:	e011      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f2c:	4b12      	ldr	r3, [pc, #72]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	4a11      	ldr	r2, [pc, #68]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f38:	e00e      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	3308      	adds	r3, #8
 8007f40:	2102      	movs	r1, #2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fca4 	bl	8008890 <RCCEx_PLL2_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f4e:	e003      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10d      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f60:	4b05      	ldr	r3, [pc, #20]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f64:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6e:	4a02      	ldr	r2, [pc, #8]	@ (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f70:	430b      	orrs	r3, r1
 8007f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f74:	e006      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007f76:	bf00      	nop
 8007f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f92:	2300      	movs	r3, #0
 8007f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	d00c      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	3328      	adds	r3, #40	@ 0x28
 8007fa6:	2102      	movs	r1, #2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fd23 	bl	80089f4 <RCCEx_PLL3_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007fc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fc8:	2300      	movs	r3, #0
 8007fca:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fcc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d038      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fe2:	d018      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007fe4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fe8:	d811      	bhi.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fee:	d014      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff4:	d80b      	bhi.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d011      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ffe:	d106      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008000:	4bc3      	ldr	r3, [pc, #780]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008004:	4ac2      	ldr	r2, [pc, #776]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800800a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800800c:	e008      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008014:	e004      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008016:	bf00      	nop
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800801a:	bf00      	nop
 800801c:	e000      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800801e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008028:	4bb9      	ldr	r3, [pc, #740]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800802a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008038:	4ab5      	ldr	r2, [pc, #724]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800803a:	430b      	orrs	r3, r1
 800803c:	6553      	str	r3, [r2, #84]	@ 0x54
 800803e:	e003      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008054:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008056:	2300      	movs	r3, #0
 8008058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800805a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800805e:	460b      	mov	r3, r1
 8008060:	4313      	orrs	r3, r2
 8008062:	d009      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008064:	4baa      	ldr	r3, [pc, #680]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008068:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800806c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008072:	4aa7      	ldr	r2, [pc, #668]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008084:	653b      	str	r3, [r7, #80]	@ 0x50
 8008086:	2300      	movs	r3, #0
 8008088:	657b      	str	r3, [r7, #84]	@ 0x54
 800808a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800808e:	460b      	mov	r3, r1
 8008090:	4313      	orrs	r3, r2
 8008092:	d00a      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008094:	4b9e      	ldr	r3, [pc, #632]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80080a4:	4a9a      	ldr	r2, [pc, #616]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080a6:	430b      	orrs	r3, r1
 80080a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80080b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080b8:	2300      	movs	r3, #0
 80080ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80080c0:	460b      	mov	r3, r1
 80080c2:	4313      	orrs	r3, r2
 80080c4:	d009      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080c6:	4b92      	ldr	r3, [pc, #584]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080d4:	4a8e      	ldr	r2, [pc, #568]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80080e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80080e8:	2300      	movs	r3, #0
 80080ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80080f0:	460b      	mov	r3, r1
 80080f2:	4313      	orrs	r3, r2
 80080f4:	d00e      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080f6:	4b86      	ldr	r3, [pc, #536]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	4a85      	ldr	r2, [pc, #532]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008100:	6113      	str	r3, [r2, #16]
 8008102:	4b83      	ldr	r3, [pc, #524]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008104:	6919      	ldr	r1, [r3, #16]
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800810e:	4a80      	ldr	r2, [pc, #512]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008110:	430b      	orrs	r3, r1
 8008112:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008122:	2300      	movs	r3, #0
 8008124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008126:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800812a:	460b      	mov	r3, r1
 800812c:	4313      	orrs	r3, r2
 800812e:	d009      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008130:	4b77      	ldr	r3, [pc, #476]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008134:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	4a74      	ldr	r2, [pc, #464]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008140:	430b      	orrs	r3, r1
 8008142:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008150:	633b      	str	r3, [r7, #48]	@ 0x30
 8008152:	2300      	movs	r3, #0
 8008154:	637b      	str	r3, [r7, #52]	@ 0x34
 8008156:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800815a:	460b      	mov	r3, r1
 800815c:	4313      	orrs	r3, r2
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008160:	4b6b      	ldr	r3, [pc, #428]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008164:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008170:	4a67      	ldr	r2, [pc, #412]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008172:	430b      	orrs	r3, r1
 8008174:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	2100      	movs	r1, #0
 8008180:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008188:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800818c:	460b      	mov	r3, r1
 800818e:	4313      	orrs	r3, r2
 8008190:	d011      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	3308      	adds	r3, #8
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fb78 	bl	8008890 <RCCEx_PLL2_Config>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	2100      	movs	r1, #0
 80081c0:	6239      	str	r1, [r7, #32]
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d011      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	3308      	adds	r3, #8
 80081d8:	2101      	movs	r1, #1
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fb58 	bl	8008890 <RCCEx_PLL2_Config>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	2100      	movs	r1, #0
 8008200:	61b9      	str	r1, [r7, #24]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800820c:	460b      	mov	r3, r1
 800820e:	4313      	orrs	r3, r2
 8008210:	d011      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008216:	3308      	adds	r3, #8
 8008218:	2102      	movs	r1, #2
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fb38 	bl	8008890 <RCCEx_PLL2_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	2100      	movs	r1, #0
 8008240:	6139      	str	r1, [r7, #16]
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800824c:	460b      	mov	r3, r1
 800824e:	4313      	orrs	r3, r2
 8008250:	d011      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	3328      	adds	r3, #40	@ 0x28
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fbca 	bl	80089f4 <RCCEx_PLL3_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	2100      	movs	r1, #0
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800828c:	460b      	mov	r3, r1
 800828e:	4313      	orrs	r3, r2
 8008290:	d011      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008296:	3328      	adds	r3, #40	@ 0x28
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fbaa 	bl	80089f4 <RCCEx_PLL3_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	2100      	movs	r1, #0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	607b      	str	r3, [r7, #4]
 80082c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80082cc:	460b      	mov	r3, r1
 80082ce:	4313      	orrs	r3, r2
 80082d0:	d011      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	3328      	adds	r3, #40	@ 0x28
 80082d8:	2102      	movs	r1, #2
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fb8a 	bl	80089f4 <RCCEx_PLL3_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80082f6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
}
 8008304:	4618      	mov	r0, r3
 8008306:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800830a:	46bd      	mov	sp, r7
 800830c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008310:	58024400 	.word	0x58024400

08008314 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008318:	f7fe fd54 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 800831c:	4602      	mov	r2, r0
 800831e:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	091b      	lsrs	r3, r3, #4
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	4904      	ldr	r1, [pc, #16]	@ (800833c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800832a:	5ccb      	ldrb	r3, [r1, r3]
 800832c:	f003 031f 	and.w	r3, r3, #31
 8008330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008334:	4618      	mov	r0, r3
 8008336:	bd80      	pop	{r7, pc}
 8008338:	58024400 	.word	0x58024400
 800833c:	08010f74 	.word	0x08010f74

08008340 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008340:	b480      	push	{r7}
 8008342:	b089      	sub	sp, #36	@ 0x24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008348:	4ba1      	ldr	r3, [pc, #644]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008352:	4b9f      	ldr	r3, [pc, #636]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008356:	0b1b      	lsrs	r3, r3, #12
 8008358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800835c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800835e:	4b9c      	ldr	r3, [pc, #624]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	091b      	lsrs	r3, r3, #4
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800836a:	4b99      	ldr	r3, [pc, #612]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836e:	08db      	lsrs	r3, r3, #3
 8008370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8111 	beq.w	80085b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b02      	cmp	r3, #2
 8008392:	f000 8083 	beq.w	800849c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b02      	cmp	r3, #2
 800839a:	f200 80a1 	bhi.w	80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d056      	beq.n	8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083aa:	e099      	b.n	80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ac:	4b88      	ldr	r3, [pc, #544]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d02d      	beq.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b8:	4b85      	ldr	r3, [pc, #532]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	08db      	lsrs	r3, r3, #3
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	4a84      	ldr	r2, [pc, #528]	@ (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e2:	4b7b      	ldr	r3, [pc, #492]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008412:	e087      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008426:	4b6a      	ldr	r3, [pc, #424]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008436:	ed97 6a03 	vldr	s12, [r7, #12]
 800843a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800843e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800844a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008456:	e065      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846a:	4b59      	ldr	r3, [pc, #356]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	ed97 6a03 	vldr	s12, [r7, #12]
 800847e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800849a:	e043      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ae:	4b48      	ldr	r3, [pc, #288]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084be:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084de:	e021      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f2:	4b37      	ldr	r3, [pc, #220]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008502:	ed97 6a03 	vldr	s12, [r7, #12]
 8008506:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800850a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800850e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800851e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008522:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008524:	4b2a      	ldr	r3, [pc, #168]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008528:	0a5b      	lsrs	r3, r3, #9
 800852a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800853a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800853e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854a:	ee17 2a90 	vmov	r2, s15
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008552:	4b1f      	ldr	r3, [pc, #124]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008556:	0c1b      	lsrs	r3, r3, #16
 8008558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008564:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800856c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008578:	ee17 2a90 	vmov	r2, s15
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008580:	4b13      	ldr	r3, [pc, #76]	@ (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008584:	0e1b      	lsrs	r3, r3, #24
 8008586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800859a:	edd7 6a07 	vldr	s13, [r7, #28]
 800859e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a6:	ee17 2a90 	vmov	r2, s15
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085ae:	e008      	b.n	80085c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	609a      	str	r2, [r3, #8]
}
 80085c2:	bf00      	nop
 80085c4:	3724      	adds	r7, #36	@ 0x24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	58024400 	.word	0x58024400
 80085d4:	03d09000 	.word	0x03d09000
 80085d8:	46000000 	.word	0x46000000
 80085dc:	4c742400 	.word	0x4c742400
 80085e0:	4a742400 	.word	0x4a742400
 80085e4:	4af42400 	.word	0x4af42400

080085e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b089      	sub	sp, #36	@ 0x24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f0:	4ba1      	ldr	r3, [pc, #644]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80085fa:	4b9f      	ldr	r3, [pc, #636]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fe:	0d1b      	lsrs	r3, r3, #20
 8008600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008604:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008606:	4b9c      	ldr	r3, [pc, #624]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008612:	4b99      	ldr	r3, [pc, #612]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008616:	08db      	lsrs	r3, r3, #3
 8008618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8111 	beq.w	8008858 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b02      	cmp	r3, #2
 800863a:	f000 8083 	beq.w	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b02      	cmp	r3, #2
 8008642:	f200 80a1 	bhi.w	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d056      	beq.n	8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008652:	e099      	b.n	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008654:	4b88      	ldr	r3, [pc, #544]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d02d      	beq.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008660:	4b85      	ldr	r3, [pc, #532]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	08db      	lsrs	r3, r3, #3
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	4a84      	ldr	r2, [pc, #528]	@ (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b7b      	ldr	r3, [pc, #492]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086ba:	e087      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086fe:	e065      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b59      	ldr	r3, [pc, #356]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008742:	e043      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800888c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008756:	4b48      	ldr	r3, [pc, #288]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	ed97 6a03 	vldr	s12, [r7, #12]
 800876a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008786:	e021      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b37      	ldr	r3, [pc, #220]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800879c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80087cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d0:	0a5b      	lsrs	r3, r3, #9
 80087d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f2:	ee17 2a90 	vmov	r2, s15
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80087fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008814:	edd7 6a07 	vldr	s13, [r7, #28]
 8008818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800881c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008820:	ee17 2a90 	vmov	r2, s15
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008828:	4b13      	ldr	r3, [pc, #76]	@ (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800883e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008842:	edd7 6a07 	vldr	s13, [r7, #28]
 8008846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884e:	ee17 2a90 	vmov	r2, s15
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008856:	e008      	b.n	800886a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	609a      	str	r2, [r3, #8]
}
 800886a:	bf00      	nop
 800886c:	3724      	adds	r7, #36	@ 0x24
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
 800887c:	03d09000 	.word	0x03d09000
 8008880:	46000000 	.word	0x46000000
 8008884:	4c742400 	.word	0x4c742400
 8008888:	4a742400 	.word	0x4a742400
 800888c:	4af42400 	.word	0x4af42400

08008890 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800889e:	4b53      	ldr	r3, [pc, #332]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d101      	bne.n	80088ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e099      	b.n	80089e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088ae:	4b4f      	ldr	r3, [pc, #316]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a4e      	ldr	r2, [pc, #312]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ba:	f7f9 fe87 	bl	80025cc <HAL_GetTick>
 80088be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088c0:	e008      	b.n	80088d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088c2:	f7f9 fe83 	bl	80025cc <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e086      	b.n	80089e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088d4:	4b45      	ldr	r3, [pc, #276]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f0      	bne.n	80088c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088e0:	4b42      	ldr	r3, [pc, #264]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	031b      	lsls	r3, r3, #12
 80088ee:	493f      	ldr	r1, [pc, #252]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	3b01      	subs	r3, #1
 8008904:	025b      	lsls	r3, r3, #9
 8008906:	b29b      	uxth	r3, r3
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	3b01      	subs	r3, #1
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	3b01      	subs	r3, #1
 800891e:	061b      	lsls	r3, r3, #24
 8008920:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008924:	4931      	ldr	r1, [pc, #196]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008926:	4313      	orrs	r3, r2
 8008928:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800892a:	4b30      	ldr	r3, [pc, #192]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 800892c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	492d      	ldr	r1, [pc, #180]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008938:	4313      	orrs	r3, r2
 800893a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800893c:	4b2b      	ldr	r3, [pc, #172]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	f023 0220 	bic.w	r2, r3, #32
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	4928      	ldr	r1, [pc, #160]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 800894a:	4313      	orrs	r3, r2
 800894c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800894e:	4b27      	ldr	r3, [pc, #156]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008952:	4a26      	ldr	r2, [pc, #152]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008954:	f023 0310 	bic.w	r3, r3, #16
 8008958:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800895a:	4b24      	ldr	r3, [pc, #144]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 800895c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800895e:	4b24      	ldr	r3, [pc, #144]	@ (80089f0 <RCCEx_PLL2_Config+0x160>)
 8008960:	4013      	ands	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	69d2      	ldr	r2, [r2, #28]
 8008966:	00d2      	lsls	r2, r2, #3
 8008968:	4920      	ldr	r1, [pc, #128]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 800896a:	4313      	orrs	r3, r2
 800896c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800896e:	4b1f      	ldr	r3, [pc, #124]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008972:	4a1e      	ldr	r2, [pc, #120]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008974:	f043 0310 	orr.w	r3, r3, #16
 8008978:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d106      	bne.n	800898e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008980:	4b1a      	ldr	r3, [pc, #104]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	4a19      	ldr	r2, [pc, #100]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008986:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800898a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800898c:	e00f      	b.n	80089ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d106      	bne.n	80089a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008994:	4b15      	ldr	r3, [pc, #84]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008998:	4a14      	ldr	r2, [pc, #80]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 800899a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800899e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089a0:	e005      	b.n	80089ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089a2:	4b12      	ldr	r3, [pc, #72]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a6:	4a11      	ldr	r2, [pc, #68]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089ae:	4b0f      	ldr	r3, [pc, #60]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a0e      	ldr	r2, [pc, #56]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ba:	f7f9 fe07 	bl	80025cc <HAL_GetTick>
 80089be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089c0:	e008      	b.n	80089d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089c2:	f7f9 fe03 	bl	80025cc <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e006      	b.n	80089e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089d4:	4b05      	ldr	r3, [pc, #20]	@ (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	58024400 	.word	0x58024400
 80089f0:	ffff0007 	.word	0xffff0007

080089f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a02:	4b53      	ldr	r3, [pc, #332]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d101      	bne.n	8008a12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e099      	b.n	8008b46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a12:	4b4f      	ldr	r3, [pc, #316]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a4e      	ldr	r2, [pc, #312]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a1e:	f7f9 fdd5 	bl	80025cc <HAL_GetTick>
 8008a22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a24:	e008      	b.n	8008a38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a26:	f7f9 fdd1 	bl	80025cc <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e086      	b.n	8008b46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a38:	4b45      	ldr	r3, [pc, #276]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f0      	bne.n	8008a26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a44:	4b42      	ldr	r3, [pc, #264]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a48:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	051b      	lsls	r3, r3, #20
 8008a52:	493f      	ldr	r1, [pc, #252]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	025b      	lsls	r3, r3, #9
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	041b      	lsls	r3, r3, #16
 8008a76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	061b      	lsls	r3, r3, #24
 8008a84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a88:	4931      	ldr	r1, [pc, #196]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a8e:	4b30      	ldr	r3, [pc, #192]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	492d      	ldr	r1, [pc, #180]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	4928      	ldr	r1, [pc, #160]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ab2:	4b27      	ldr	r3, [pc, #156]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	4a26      	ldr	r2, [pc, #152]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008abe:	4b24      	ldr	r3, [pc, #144]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ac2:	4b24      	ldr	r3, [pc, #144]	@ (8008b54 <RCCEx_PLL3_Config+0x160>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	69d2      	ldr	r2, [r2, #28]
 8008aca:	00d2      	lsls	r2, r2, #3
 8008acc:	4920      	ldr	r1, [pc, #128]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d106      	bne.n	8008af2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae8:	4a19      	ldr	r2, [pc, #100]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008aea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008af0:	e00f      	b.n	8008b12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d106      	bne.n	8008b06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008af8:	4b15      	ldr	r3, [pc, #84]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	4a14      	ldr	r2, [pc, #80]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008afe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b04:	e005      	b.n	8008b12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b06:	4b12      	ldr	r3, [pc, #72]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0a:	4a11      	ldr	r2, [pc, #68]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b12:	4b0f      	ldr	r3, [pc, #60]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a0e      	ldr	r2, [pc, #56]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b1e:	f7f9 fd55 	bl	80025cc <HAL_GetTick>
 8008b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b24:	e008      	b.n	8008b38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b26:	f7f9 fd51 	bl	80025cc <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d901      	bls.n	8008b38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e006      	b.n	8008b46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b38:	4b05      	ldr	r3, [pc, #20]	@ (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0f0      	beq.n	8008b26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	58024400 	.word	0x58024400
 8008b54:	ffff0007 	.word	0xffff0007

08008b58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e10f      	b.n	8008d8a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a87      	ldr	r2, [pc, #540]	@ (8008d94 <HAL_SPI_Init+0x23c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00f      	beq.n	8008b9a <HAL_SPI_Init+0x42>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a86      	ldr	r2, [pc, #536]	@ (8008d98 <HAL_SPI_Init+0x240>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00a      	beq.n	8008b9a <HAL_SPI_Init+0x42>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a84      	ldr	r2, [pc, #528]	@ (8008d9c <HAL_SPI_Init+0x244>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d005      	beq.n	8008b9a <HAL_SPI_Init+0x42>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	d901      	bls.n	8008b9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e0f7      	b.n	8008d8a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 f968 	bl	8009e70 <SPI_GetPacketSize>
 8008ba0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a7b      	ldr	r2, [pc, #492]	@ (8008d94 <HAL_SPI_Init+0x23c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d00c      	beq.n	8008bc6 <HAL_SPI_Init+0x6e>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a79      	ldr	r2, [pc, #484]	@ (8008d98 <HAL_SPI_Init+0x240>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <HAL_SPI_Init+0x6e>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a78      	ldr	r2, [pc, #480]	@ (8008d9c <HAL_SPI_Init+0x244>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SPI_Init+0x6e>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d811      	bhi.n	8008bea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bca:	4a72      	ldr	r2, [pc, #456]	@ (8008d94 <HAL_SPI_Init+0x23c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a70      	ldr	r2, [pc, #448]	@ (8008d98 <HAL_SPI_Init+0x240>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_SPI_Init+0x8c>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a6f      	ldr	r2, [pc, #444]	@ (8008d9c <HAL_SPI_Init+0x244>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d104      	bne.n	8008bee <HAL_SPI_Init+0x96>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d901      	bls.n	8008bee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e0cd      	b.n	8008d8a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7f8 fc52 	bl	80014ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0201 	bic.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008c2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c34:	d119      	bne.n	8008c6a <HAL_SPI_Init+0x112>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c3e:	d103      	bne.n	8008c48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10c      	bne.n	8008c6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c58:	d107      	bne.n	8008c6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00f      	beq.n	8008c96 <HAL_SPI_Init+0x13e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	2b06      	cmp	r3, #6
 8008c7c:	d90b      	bls.n	8008c96 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e007      	b.n	8008ca6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ca4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69da      	ldr	r2, [r3, #28]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb8:	ea42 0103 	orr.w	r1, r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	431a      	orrs	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d06:	ea42 0103 	orr.w	r1, r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d113      	bne.n	8008d46 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d30:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d44:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0201 	bic.w	r2, r2, #1
 8008d54:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40013000 	.word	0x40013000
 8008d98:	40003800 	.word	0x40003800
 8008d9c:	40003c00 	.word	0x40003c00

08008da0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3320      	adds	r3, #32
 8008db6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008db8:	f7f9 fc08 	bl	80025cc <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d001      	beq.n	8008dce <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e1d1      	b.n	8009172 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <HAL_SPI_Transmit+0x3a>
 8008dd4:	88fb      	ldrh	r3, [r7, #6]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e1c9      	b.n	8009172 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_SPI_Transmit+0x4c>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e1c2      	b.n	8009172 <HAL_SPI_Transmit+0x3d2>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2203      	movs	r2, #3
 8008df8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	88fa      	ldrh	r2, [r7, #6]
 8008e16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008e44:	d108      	bne.n	8008e58 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	e009      	b.n	8008e6c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008e6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	4b96      	ldr	r3, [pc, #600]	@ (80090cc <HAL_SPI_Transmit+0x32c>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	88f9      	ldrh	r1, [r7, #6]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	6812      	ldr	r2, [r2, #0]
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0201 	orr.w	r2, r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e98:	d107      	bne.n	8008eaa <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	2b0f      	cmp	r3, #15
 8008eb0:	d947      	bls.n	8008f42 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008eb2:	e03f      	b.n	8008f34 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d114      	bne.n	8008eec <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6812      	ldr	r2, [r2, #0]
 8008ecc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008eea:	e023      	b.n	8008f34 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eec:	f7f9 fb6e 	bl	80025cc <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d803      	bhi.n	8008f04 <HAL_SPI_Transmit+0x164>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d102      	bne.n	8008f0a <HAL_SPI_Transmit+0x16a>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d114      	bne.n	8008f34 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fee2 	bl	8009cd4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e11e      	b.n	8009172 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1b9      	bne.n	8008eb4 <HAL_SPI_Transmit+0x114>
 8008f40:	e0f1      	b.n	8009126 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	2b07      	cmp	r3, #7
 8008f48:	f240 80e6 	bls.w	8009118 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008f4c:	e05d      	b.n	800900a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d132      	bne.n	8008fc2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d918      	bls.n	8008f9a <HAL_SPI_Transmit+0x1fa>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d014      	beq.n	8008f9a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f80:	1d1a      	adds	r2, r3, #4
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	3b02      	subs	r3, #2
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008f98:	e037      	b.n	800900a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f9e:	881a      	ldrh	r2, [r3, #0]
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fa8:	1c9a      	adds	r2, r3, #2
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008fc0:	e023      	b.n	800900a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fc2:	f7f9 fb03 	bl	80025cc <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d803      	bhi.n	8008fda <HAL_SPI_Transmit+0x23a>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d102      	bne.n	8008fe0 <HAL_SPI_Transmit+0x240>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d114      	bne.n	800900a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fe77 	bl	8009cd4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e0b3      	b.n	8009172 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d19b      	bne.n	8008f4e <HAL_SPI_Transmit+0x1ae>
 8009016:	e086      	b.n	8009126 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b02      	cmp	r3, #2
 8009024:	d154      	bne.n	80090d0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800902c:	b29b      	uxth	r3, r3
 800902e:	2b03      	cmp	r3, #3
 8009030:	d918      	bls.n	8009064 <HAL_SPI_Transmit+0x2c4>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009036:	2b40      	cmp	r3, #64	@ 0x40
 8009038:	d914      	bls.n	8009064 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6812      	ldr	r2, [r2, #0]
 8009044:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800904a:	1d1a      	adds	r2, r3, #4
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b04      	subs	r3, #4
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009062:	e059      	b.n	8009118 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b01      	cmp	r3, #1
 800906e:	d917      	bls.n	80090a0 <HAL_SPI_Transmit+0x300>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d013      	beq.n	80090a0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800907c:	881a      	ldrh	r2, [r3, #0]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009086:	1c9a      	adds	r2, r3, #2
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009092:	b29b      	uxth	r3, r3
 8009094:	3b02      	subs	r3, #2
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800909e:	e03b      	b.n	8009118 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3320      	adds	r3, #32
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80090ca:	e025      	b.n	8009118 <HAL_SPI_Transmit+0x378>
 80090cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090d0:	f7f9 fa7c 	bl	80025cc <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d803      	bhi.n	80090e8 <HAL_SPI_Transmit+0x348>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d102      	bne.n	80090ee <HAL_SPI_Transmit+0x34e>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d114      	bne.n	8009118 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fdf0 	bl	8009cd4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e02c      	b.n	8009172 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800911e:	b29b      	uxth	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	f47f af79 	bne.w	8009018 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2200      	movs	r2, #0
 800912e:	2108      	movs	r1, #8
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fe6f 	bl	8009e14 <SPI_WaitOnFlagUntilTimeout>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d007      	beq.n	800914c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009142:	f043 0220 	orr.w	r2, r3, #32
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fdc1 	bl	8009cd4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e000      	b.n	8009172 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009170:	2300      	movs	r3, #0
  }
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop

0800917c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	4613      	mov	r3, r2
 800918a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	b29b      	uxth	r3, r3
 8009194:	3301      	adds	r3, #1
 8009196:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3330      	adds	r3, #48	@ 0x30
 800919e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091a0:	f7f9 fa14 	bl	80025cc <HAL_GetTick>
 80091a4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d001      	beq.n	80091b6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80091b2:	2302      	movs	r3, #2
 80091b4:	e250      	b.n	8009658 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <HAL_SPI_Receive+0x46>
 80091bc:	88fb      	ldrh	r3, [r7, #6]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e248      	b.n	8009658 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_SPI_Receive+0x58>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e241      	b.n	8009658 <HAL_SPI_Receive+0x4dc>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2204      	movs	r2, #4
 80091e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	88fa      	ldrh	r2, [r7, #6]
 80091f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	88fa      	ldrh	r2, [r7, #6]
 80091fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800922c:	d108      	bne.n	8009240 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	e009      	b.n	8009254 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009252:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	4b95      	ldr	r3, [pc, #596]	@ (80094b0 <HAL_SPI_Receive+0x334>)
 800925c:	4013      	ands	r3, r2
 800925e:	88f9      	ldrh	r1, [r7, #6]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	6812      	ldr	r2, [r2, #0]
 8009264:	430b      	orrs	r3, r1
 8009266:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009280:	d107      	bne.n	8009292 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009290:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	2b0f      	cmp	r3, #15
 8009298:	d96c      	bls.n	8009374 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800929a:	e064      	b.n	8009366 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d114      	bne.n	80092dc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80092bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092c2:	1d1a      	adds	r2, r3, #4
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	3b01      	subs	r3, #1
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80092da:	e044      	b.n	8009366 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	8bfa      	ldrh	r2, [r7, #30]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d919      	bls.n	800931e <HAL_SPI_Receive+0x1a2>
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d014      	beq.n	800931e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80092fe:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800931c:	e023      	b.n	8009366 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800931e:	f7f9 f955 	bl	80025cc <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d803      	bhi.n	8009336 <HAL_SPI_Receive+0x1ba>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d102      	bne.n	800933c <HAL_SPI_Receive+0x1c0>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d114      	bne.n	8009366 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fcc9 	bl	8009cd4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009348:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e178      	b.n	8009658 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800936c:	b29b      	uxth	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d194      	bne.n	800929c <HAL_SPI_Receive+0x120>
 8009372:	e15e      	b.n	8009632 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	2b07      	cmp	r3, #7
 800937a:	f240 8153 	bls.w	8009624 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800937e:	e08f      	b.n	80094a0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b01      	cmp	r3, #1
 8009394:	d114      	bne.n	80093c0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	8812      	ldrh	r2, [r2, #0]
 800939e:	b292      	uxth	r2, r2
 80093a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093a6:	1c9a      	adds	r2, r3, #2
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80093be:	e06f      	b.n	80094a0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	8bfa      	ldrh	r2, [r7, #30]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d924      	bls.n	8009418 <HAL_SPI_Receive+0x29c>
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01f      	beq.n	8009418 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	8812      	ldrh	r2, [r2, #0]
 80093e0:	b292      	uxth	r2, r2
 80093e2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e8:	1c9a      	adds	r2, r3, #2
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	8812      	ldrh	r2, [r2, #0]
 80093f6:	b292      	uxth	r2, r2
 80093f8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093fe:	1c9a      	adds	r2, r3, #2
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b02      	subs	r3, #2
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009416:	e043      	b.n	80094a0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800941e:	b29b      	uxth	r3, r3
 8009420:	2b01      	cmp	r3, #1
 8009422:	d119      	bne.n	8009458 <HAL_SPI_Receive+0x2dc>
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d014      	beq.n	8009458 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	8812      	ldrh	r2, [r2, #0]
 8009436:	b292      	uxth	r2, r2
 8009438:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943e:	1c9a      	adds	r2, r3, #2
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800944a:	b29b      	uxth	r3, r3
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009456:	e023      	b.n	80094a0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009458:	f7f9 f8b8 	bl	80025cc <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d803      	bhi.n	8009470 <HAL_SPI_Receive+0x2f4>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946e:	d102      	bne.n	8009476 <HAL_SPI_Receive+0x2fa>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d114      	bne.n	80094a0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fc2c 	bl	8009cd4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009482:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e0db      	b.n	8009658 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f47f af69 	bne.w	8009380 <HAL_SPI_Receive+0x204>
 80094ae:	e0c0      	b.n	8009632 <HAL_SPI_Receive+0x4b6>
 80094b0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d117      	bne.n	80094fa <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094d6:	7812      	ldrb	r2, [r2, #0]
 80094d8:	b2d2      	uxtb	r2, r2
 80094da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80094f8:	e094      	b.n	8009624 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009500:	b29b      	uxth	r3, r3
 8009502:	8bfa      	ldrh	r2, [r7, #30]
 8009504:	429a      	cmp	r2, r3
 8009506:	d946      	bls.n	8009596 <HAL_SPI_Receive+0x41a>
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d041      	beq.n	8009596 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800951e:	7812      	ldrb	r2, [r2, #0]
 8009520:	b2d2      	uxtb	r2, r2
 8009522:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800953a:	7812      	ldrb	r2, [r2, #0]
 800953c:	b2d2      	uxtb	r2, r2
 800953e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009556:	7812      	ldrb	r2, [r2, #0]
 8009558:	b2d2      	uxtb	r2, r2
 800955a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009572:	7812      	ldrb	r2, [r2, #0]
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b04      	subs	r3, #4
 800958c:	b29a      	uxth	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009594:	e046      	b.n	8009624 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800959c:	b29b      	uxth	r3, r3
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d81c      	bhi.n	80095dc <HAL_SPI_Receive+0x460>
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d017      	beq.n	80095dc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80095da:	e023      	b.n	8009624 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095dc:	f7f8 fff6 	bl	80025cc <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d803      	bhi.n	80095f4 <HAL_SPI_Receive+0x478>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d102      	bne.n	80095fa <HAL_SPI_Receive+0x47e>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d114      	bne.n	8009624 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 fb6a 	bl	8009cd4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e019      	b.n	8009658 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800962a:	b29b      	uxth	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	f47f af41 	bne.w	80094b4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 fb4e 	bl	8009cd4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8009656:	2300      	movs	r3, #0
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3720      	adds	r7, #32
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08e      	sub	sp, #56	@ 0x38
 8009664:	af02      	add	r7, sp, #8
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
 800966c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3320      	adds	r3, #32
 8009674:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3330      	adds	r3, #48	@ 0x30
 800967c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009682:	095b      	lsrs	r3, r3, #5
 8009684:	b29b      	uxth	r3, r3
 8009686:	3301      	adds	r3, #1
 8009688:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800968a:	f7f8 ff9f 	bl	80025cc <HAL_GetTick>
 800968e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8009690:	887b      	ldrh	r3, [r7, #2]
 8009692:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8009694:	887b      	ldrh	r3, [r7, #2]
 8009696:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d001      	beq.n	80096a8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
 80096a6:	e310      	b.n	8009cca <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <HAL_SPI_TransmitReceive+0x5a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <HAL_SPI_TransmitReceive+0x5a>
 80096b4:	887b      	ldrh	r3, [r7, #2]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e305      	b.n	8009cca <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_SPI_TransmitReceive+0x6c>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e2fe      	b.n	8009cca <HAL_SPI_TransmitReceive+0x66a>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2205      	movs	r2, #5
 80096d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	887a      	ldrh	r2, [r7, #2]
 80096ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	887a      	ldrh	r2, [r7, #2]
 80096f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	887a      	ldrh	r2, [r7, #2]
 8009704:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	887a      	ldrh	r2, [r7, #2]
 800970c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800972a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a70      	ldr	r2, [pc, #448]	@ (80098f4 <HAL_SPI_TransmitReceive+0x294>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d009      	beq.n	800974a <HAL_SPI_TransmitReceive+0xea>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a6f      	ldr	r2, [pc, #444]	@ (80098f8 <HAL_SPI_TransmitReceive+0x298>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d004      	beq.n	800974a <HAL_SPI_TransmitReceive+0xea>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a6d      	ldr	r2, [pc, #436]	@ (80098fc <HAL_SPI_TransmitReceive+0x29c>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d102      	bne.n	8009750 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800974a:	2310      	movs	r3, #16
 800974c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800974e:	e001      	b.n	8009754 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009750:	2308      	movs	r3, #8
 8009752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	4b69      	ldr	r3, [pc, #420]	@ (8009900 <HAL_SPI_TransmitReceive+0x2a0>)
 800975c:	4013      	ands	r3, r2
 800975e:	8879      	ldrh	r1, [r7, #2]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	6812      	ldr	r2, [r2, #0]
 8009764:	430b      	orrs	r3, r1
 8009766:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0201 	orr.w	r2, r2, #1
 8009776:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009780:	d107      	bne.n	8009792 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	2b0f      	cmp	r3, #15
 8009798:	f240 80a2 	bls.w	80098e0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800979c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979e:	089b      	lsrs	r3, r3, #2
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80097a2:	e094      	b.n	80098ce <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d120      	bne.n	80097f4 <HAL_SPI_TransmitReceive+0x194>
 80097b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d01d      	beq.n	80097f4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80097b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80097ba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80097bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097be:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d217      	bcs.n	80097f4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6812      	ldr	r2, [r2, #0]
 80097ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097d4:	1d1a      	adds	r2, r3, #4
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80097fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d065      	beq.n	80098ce <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b01      	cmp	r3, #1
 800980e:	d118      	bne.n	8009842 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009818:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800981a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009820:	1d1a      	adds	r2, r3, #4
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800983e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009840:	e045      	b.n	80098ce <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009842:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009844:	8bfb      	ldrh	r3, [r7, #30]
 8009846:	429a      	cmp	r2, r3
 8009848:	d21d      	bcs.n	8009886 <HAL_SPI_TransmitReceive+0x226>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d018      	beq.n	8009886 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800985c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800985e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009864:	1d1a      	adds	r2, r3, #4
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009870:	b29b      	uxth	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009882:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009884:	e023      	b.n	80098ce <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009886:	f7f8 fea1 	bl	80025cc <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009892:	429a      	cmp	r2, r3
 8009894:	d803      	bhi.n	800989e <HAL_SPI_TransmitReceive+0x23e>
 8009896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989c:	d102      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x244>
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d114      	bne.n	80098ce <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 fa15 	bl	8009cd4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e1fd      	b.n	8009cca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80098ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f47f af67 	bne.w	80097a4 <HAL_SPI_TransmitReceive+0x144>
 80098d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f47f af63 	bne.w	80097a4 <HAL_SPI_TransmitReceive+0x144>
 80098de:	e1ce      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	2b07      	cmp	r3, #7
 80098e6:	f240 81c2 	bls.w	8009c6e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80098ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ec:	085b      	lsrs	r3, r3, #1
 80098ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80098f0:	e0c9      	b.n	8009a86 <HAL_SPI_TransmitReceive+0x426>
 80098f2:	bf00      	nop
 80098f4:	40013000 	.word	0x40013000
 80098f8:	40003800 	.word	0x40003800
 80098fc:	40003c00 	.word	0x40003c00
 8009900:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b02      	cmp	r3, #2
 8009910:	d11f      	bne.n	8009952 <HAL_SPI_TransmitReceive+0x2f2>
 8009912:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01c      	beq.n	8009952 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009918:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800991a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800991c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009920:	429a      	cmp	r2, r3
 8009922:	d216      	bcs.n	8009952 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009928:	881a      	ldrh	r2, [r3, #0]
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009932:	1c9a      	adds	r2, r3, #2
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009950:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800995a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 8092 	beq.w	8009a86 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b01      	cmp	r3, #1
 800996e:	d118      	bne.n	80099a2 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009974:	6a3a      	ldr	r2, [r7, #32]
 8009976:	8812      	ldrh	r2, [r2, #0]
 8009978:	b292      	uxth	r2, r2
 800997a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009980:	1c9a      	adds	r2, r3, #2
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800999e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80099a0:	e071      	b.n	8009a86 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80099a2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80099a4:	8bfb      	ldrh	r3, [r7, #30]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d228      	bcs.n	80099fc <HAL_SPI_TransmitReceive+0x39c>
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d023      	beq.n	80099fc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099b8:	6a3a      	ldr	r2, [r7, #32]
 80099ba:	8812      	ldrh	r2, [r2, #0]
 80099bc:	b292      	uxth	r2, r2
 80099be:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099c4:	1c9a      	adds	r2, r3, #2
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ce:	6a3a      	ldr	r2, [r7, #32]
 80099d0:	8812      	ldrh	r2, [r2, #0]
 80099d2:	b292      	uxth	r2, r2
 80099d4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099da:	1c9a      	adds	r2, r3, #2
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b02      	subs	r3, #2
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80099fa:	e044      	b.n	8009a86 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80099fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d11d      	bne.n	8009a3e <HAL_SPI_TransmitReceive+0x3de>
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d018      	beq.n	8009a3e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a10:	6a3a      	ldr	r2, [r7, #32]
 8009a12:	8812      	ldrh	r2, [r2, #0]
 8009a14:	b292      	uxth	r2, r2
 8009a16:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a1c:	1c9a      	adds	r2, r3, #2
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009a3c:	e023      	b.n	8009a86 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a3e:	f7f8 fdc5 	bl	80025cc <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d803      	bhi.n	8009a56 <HAL_SPI_TransmitReceive+0x3f6>
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a54:	d102      	bne.n	8009a5c <HAL_SPI_TransmitReceive+0x3fc>
 8009a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d114      	bne.n	8009a86 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 f939 	bl	8009cd4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e121      	b.n	8009cca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009a86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f47f af3b 	bne.w	8009904 <HAL_SPI_TransmitReceive+0x2a4>
 8009a8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f47f af37 	bne.w	8009904 <HAL_SPI_TransmitReceive+0x2a4>
 8009a96:	e0f2      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d121      	bne.n	8009aea <HAL_SPI_TransmitReceive+0x48a>
 8009aa6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01e      	beq.n	8009aea <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009aac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009aae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d218      	bcs.n	8009aea <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3320      	adds	r3, #32
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ae8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009af2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80ba 	beq.w	8009c6e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d11b      	bne.n	8009b40 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b14:	7812      	ldrb	r2, [r2, #0]
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b3c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009b3e:	e096      	b.n	8009c6e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009b40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009b42:	8bfb      	ldrh	r3, [r7, #30]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d24a      	bcs.n	8009bde <HAL_SPI_TransmitReceive+0x57e>
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d045      	beq.n	8009bde <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b5e:	7812      	ldrb	r2, [r2, #0]
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b7a:	7812      	ldrb	r2, [r2, #0]
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b96:	7812      	ldrb	r2, [r2, #0]
 8009b98:	b2d2      	uxtb	r2, r2
 8009b9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bb2:	7812      	ldrb	r2, [r2, #0]
 8009bb4:	b2d2      	uxtb	r2, r2
 8009bb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b04      	subs	r3, #4
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009bdc:	e047      	b.n	8009c6e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009bde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009be0:	2b03      	cmp	r3, #3
 8009be2:	d820      	bhi.n	8009c26 <HAL_SPI_TransmitReceive+0x5c6>
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01b      	beq.n	8009c26 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bfa:	7812      	ldrb	r2, [r2, #0]
 8009bfc:	b2d2      	uxtb	r2, r2
 8009bfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c22:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009c24:	e023      	b.n	8009c6e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c26:	f7f8 fcd1 	bl	80025cc <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d803      	bhi.n	8009c3e <HAL_SPI_TransmitReceive+0x5de>
 8009c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d102      	bne.n	8009c44 <HAL_SPI_TransmitReceive+0x5e4>
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d114      	bne.n	8009c6e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 f845 	bl	8009cd4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e02d      	b.n	8009cca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009c6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f47f af11 	bne.w	8009a98 <HAL_SPI_TransmitReceive+0x438>
 8009c76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f47f af0d 	bne.w	8009a98 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c84:	2200      	movs	r2, #0
 8009c86:	2108      	movs	r1, #8
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f8c3 	bl	8009e14 <SPI_WaitOnFlagUntilTimeout>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f815 	bl	8009cd4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e000      	b.n	8009cca <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
  }
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3730      	adds	r7, #48	@ 0x30
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop

08009cd4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0208 	orr.w	r2, r2, #8
 8009cf2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	699a      	ldr	r2, [r3, #24]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0210 	orr.w	r2, r2, #16
 8009d02:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6919      	ldr	r1, [r3, #16]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e10 <SPI_CloseTransfer+0x13c>)
 8009d20:	400b      	ands	r3, r1
 8009d22:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689a      	ldr	r2, [r3, #8]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d32:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b04      	cmp	r3, #4
 8009d3e:	d014      	beq.n	8009d6a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00f      	beq.n	8009d6a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699a      	ldr	r2, [r3, #24]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f042 0220 	orr.w	r2, r2, #32
 8009d68:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d014      	beq.n	8009da0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d86:	f043 0204 	orr.w	r2, r3, #4
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d9e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00f      	beq.n	8009dca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009db0:	f043 0201 	orr.w	r2, r3, #1
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699a      	ldr	r2, [r3, #24]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dc8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00f      	beq.n	8009df4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dda:	f043 0208 	orr.w	r2, r3, #8
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699a      	ldr	r2, [r3, #24]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009df2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009e04:	bf00      	nop
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	fffffc90 	.word	0xfffffc90

08009e14 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4613      	mov	r3, r2
 8009e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e24:	e010      	b.n	8009e48 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e26:	f7f8 fbd1 	bl	80025cc <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d803      	bhi.n	8009e3e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3c:	d102      	bne.n	8009e44 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e00f      	b.n	8009e68 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	695a      	ldr	r2, [r3, #20]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	4013      	ands	r3, r2
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	bf0c      	ite	eq
 8009e58:	2301      	moveq	r3, #1
 8009e5a:	2300      	movne	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	461a      	mov	r2, r3
 8009e60:	79fb      	ldrb	r3, [r7, #7]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d0df      	beq.n	8009e26 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e7c:	095b      	lsrs	r3, r3, #5
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3307      	adds	r3, #7
 8009e8e:	08db      	lsrs	r3, r3, #3
 8009e90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b082      	sub	sp, #8
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e049      	b.n	8009f4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d106      	bne.n	8009ed2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f841 	bl	8009f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	f000 f9e7 	bl	800a2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d001      	beq.n	8009f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e054      	b.n	800a02a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f042 0201 	orr.w	r2, r2, #1
 8009f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a26      	ldr	r2, [pc, #152]	@ (800a038 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d022      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009faa:	d01d      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a22      	ldr	r2, [pc, #136]	@ (800a03c <HAL_TIM_Base_Start_IT+0xd4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d018      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a21      	ldr	r2, [pc, #132]	@ (800a040 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d013      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a1f      	ldr	r2, [pc, #124]	@ (800a044 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d00e      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a1e      	ldr	r2, [pc, #120]	@ (800a048 <HAL_TIM_Base_Start_IT+0xe0>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d009      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <HAL_TIM_Base_Start_IT+0xe4>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d004      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a1b      	ldr	r2, [pc, #108]	@ (800a050 <HAL_TIM_Base_Start_IT+0xe8>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d115      	bne.n	800a014 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	4b19      	ldr	r3, [pc, #100]	@ (800a054 <HAL_TIM_Base_Start_IT+0xec>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b06      	cmp	r3, #6
 8009ff8:	d015      	beq.n	800a026 <HAL_TIM_Base_Start_IT+0xbe>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a000:	d011      	beq.n	800a026 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f042 0201 	orr.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a012:	e008      	b.n	800a026 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0201 	orr.w	r2, r2, #1
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	e000      	b.n	800a028 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40010000 	.word	0x40010000
 800a03c:	40000400 	.word	0x40000400
 800a040:	40000800 	.word	0x40000800
 800a044:	40000c00 	.word	0x40000c00
 800a048:	40010400 	.word	0x40010400
 800a04c:	40001800 	.word	0x40001800
 800a050:	40014000 	.word	0x40014000
 800a054:	00010007 	.word	0x00010007

0800a058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d020      	beq.n	800a0bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f003 0302 	and.w	r3, r3, #2
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01b      	beq.n	800a0bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f06f 0202 	mvn.w	r2, #2
 800a08c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f8e9 	bl	800a27a <HAL_TIM_IC_CaptureCallback>
 800a0a8:	e005      	b.n	800a0b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f8db 	bl	800a266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f8ec 	bl	800a28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f003 0304 	and.w	r3, r3, #4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d020      	beq.n	800a108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01b      	beq.n	800a108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0204 	mvn.w	r2, #4
 800a0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f8c3 	bl	800a27a <HAL_TIM_IC_CaptureCallback>
 800a0f4:	e005      	b.n	800a102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f8b5 	bl	800a266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f8c6 	bl	800a28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d020      	beq.n	800a154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01b      	beq.n	800a154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f06f 0208 	mvn.w	r2, #8
 800a124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2204      	movs	r2, #4
 800a12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f89d 	bl	800a27a <HAL_TIM_IC_CaptureCallback>
 800a140:	e005      	b.n	800a14e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f88f 	bl	800a266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f8a0 	bl	800a28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f003 0310 	and.w	r3, r3, #16
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d020      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f003 0310 	and.w	r3, r3, #16
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01b      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f06f 0210 	mvn.w	r2, #16
 800a170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2208      	movs	r2, #8
 800a176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f877 	bl	800a27a <HAL_TIM_IC_CaptureCallback>
 800a18c:	e005      	b.n	800a19a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f869 	bl	800a266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f87a 	bl	800a28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00c      	beq.n	800a1c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d007      	beq.n	800a1c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f06f 0201 	mvn.w	r2, #1
 800a1bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7f7 f8ae 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d104      	bne.n	800a1d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00c      	beq.n	800a1f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d007      	beq.n	800a1f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f90d 	bl	800a40c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00c      	beq.n	800a216 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f905 	bl	800a420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00c      	beq.n	800a23a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f834 	bl	800a2a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00c      	beq.n	800a25e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d007      	beq.n	800a25e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f06f 0220 	mvn.w	r2, #32
 800a256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f8cd 	bl	800a3f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a296:	bf00      	nop
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a43      	ldr	r2, [pc, #268]	@ (800a3d8 <TIM_Base_SetConfig+0x120>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d013      	beq.n	800a2f8 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2d6:	d00f      	beq.n	800a2f8 <TIM_Base_SetConfig+0x40>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a40      	ldr	r2, [pc, #256]	@ (800a3dc <TIM_Base_SetConfig+0x124>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d00b      	beq.n	800a2f8 <TIM_Base_SetConfig+0x40>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a3f      	ldr	r2, [pc, #252]	@ (800a3e0 <TIM_Base_SetConfig+0x128>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d007      	beq.n	800a2f8 <TIM_Base_SetConfig+0x40>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a3e      	ldr	r2, [pc, #248]	@ (800a3e4 <TIM_Base_SetConfig+0x12c>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d003      	beq.n	800a2f8 <TIM_Base_SetConfig+0x40>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a3d      	ldr	r2, [pc, #244]	@ (800a3e8 <TIM_Base_SetConfig+0x130>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d108      	bne.n	800a30a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	4313      	orrs	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a32      	ldr	r2, [pc, #200]	@ (800a3d8 <TIM_Base_SetConfig+0x120>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d01f      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a318:	d01b      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a2f      	ldr	r2, [pc, #188]	@ (800a3dc <TIM_Base_SetConfig+0x124>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d017      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a2e      	ldr	r2, [pc, #184]	@ (800a3e0 <TIM_Base_SetConfig+0x128>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d013      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a2d      	ldr	r2, [pc, #180]	@ (800a3e4 <TIM_Base_SetConfig+0x12c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00f      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a2c      	ldr	r2, [pc, #176]	@ (800a3e8 <TIM_Base_SetConfig+0x130>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00b      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a2b      	ldr	r2, [pc, #172]	@ (800a3ec <TIM_Base_SetConfig+0x134>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d007      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a2a      	ldr	r2, [pc, #168]	@ (800a3f0 <TIM_Base_SetConfig+0x138>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d003      	beq.n	800a352 <TIM_Base_SetConfig+0x9a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a29      	ldr	r2, [pc, #164]	@ (800a3f4 <TIM_Base_SetConfig+0x13c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d108      	bne.n	800a364 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4313      	orrs	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	4313      	orrs	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a14      	ldr	r2, [pc, #80]	@ (800a3d8 <TIM_Base_SetConfig+0x120>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d00f      	beq.n	800a3aa <TIM_Base_SetConfig+0xf2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a16      	ldr	r2, [pc, #88]	@ (800a3e8 <TIM_Base_SetConfig+0x130>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d00b      	beq.n	800a3aa <TIM_Base_SetConfig+0xf2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a15      	ldr	r2, [pc, #84]	@ (800a3ec <TIM_Base_SetConfig+0x134>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d007      	beq.n	800a3aa <TIM_Base_SetConfig+0xf2>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a14      	ldr	r2, [pc, #80]	@ (800a3f0 <TIM_Base_SetConfig+0x138>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d003      	beq.n	800a3aa <TIM_Base_SetConfig+0xf2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a13      	ldr	r2, [pc, #76]	@ (800a3f4 <TIM_Base_SetConfig+0x13c>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d103      	bne.n	800a3b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f043 0204 	orr.w	r2, r3, #4
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	601a      	str	r2, [r3, #0]
}
 800a3ca:	bf00      	nop
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	40010000 	.word	0x40010000
 800a3dc:	40000400 	.word	0x40000400
 800a3e0:	40000800 	.word	0x40000800
 800a3e4:	40000c00 	.word	0x40000c00
 800a3e8:	40010400 	.word	0x40010400
 800a3ec:	40014000 	.word	0x40014000
 800a3f0:	40014400 	.word	0x40014400
 800a3f4:	40014800 	.word	0x40014800

0800a3f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e042      	b.n	800a4cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d106      	bne.n	800a45e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7f7 fabb 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2224      	movs	r2, #36	@ 0x24
 800a462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f022 0201 	bic.w	r2, r2, #1
 800a474:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fd90 	bl	800afa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f825 	bl	800a4d4 <UART_SetConfig>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e01b      	b.n	800a4cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0201 	orr.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fe0f 	bl	800b0e8 <UART_CheckIdleState>
 800a4ca:	4603      	mov	r3, r0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d8:	b092      	sub	sp, #72	@ 0x48
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	4bbe      	ldr	r3, [pc, #760]	@ (800a7fc <UART_SetConfig+0x328>)
 800a504:	4013      	ands	r3, r2
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a50c:	430b      	orrs	r3, r1
 800a50e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4ab3      	ldr	r2, [pc, #716]	@ (800a800 <UART_SetConfig+0x32c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d004      	beq.n	800a540 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a53c:	4313      	orrs	r3, r2
 800a53e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	4baf      	ldr	r3, [pc, #700]	@ (800a804 <UART_SetConfig+0x330>)
 800a548:	4013      	ands	r3, r2
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a550:	430b      	orrs	r3, r1
 800a552:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55a:	f023 010f 	bic.w	r1, r3, #15
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4aa6      	ldr	r2, [pc, #664]	@ (800a808 <UART_SetConfig+0x334>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d177      	bne.n	800a664 <UART_SetConfig+0x190>
 800a574:	4ba5      	ldr	r3, [pc, #660]	@ (800a80c <UART_SetConfig+0x338>)
 800a576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a578:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a57c:	2b28      	cmp	r3, #40	@ 0x28
 800a57e:	d86d      	bhi.n	800a65c <UART_SetConfig+0x188>
 800a580:	a201      	add	r2, pc, #4	@ (adr r2, 800a588 <UART_SetConfig+0xb4>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a62d 	.word	0x0800a62d
 800a58c:	0800a65d 	.word	0x0800a65d
 800a590:	0800a65d 	.word	0x0800a65d
 800a594:	0800a65d 	.word	0x0800a65d
 800a598:	0800a65d 	.word	0x0800a65d
 800a59c:	0800a65d 	.word	0x0800a65d
 800a5a0:	0800a65d 	.word	0x0800a65d
 800a5a4:	0800a65d 	.word	0x0800a65d
 800a5a8:	0800a635 	.word	0x0800a635
 800a5ac:	0800a65d 	.word	0x0800a65d
 800a5b0:	0800a65d 	.word	0x0800a65d
 800a5b4:	0800a65d 	.word	0x0800a65d
 800a5b8:	0800a65d 	.word	0x0800a65d
 800a5bc:	0800a65d 	.word	0x0800a65d
 800a5c0:	0800a65d 	.word	0x0800a65d
 800a5c4:	0800a65d 	.word	0x0800a65d
 800a5c8:	0800a63d 	.word	0x0800a63d
 800a5cc:	0800a65d 	.word	0x0800a65d
 800a5d0:	0800a65d 	.word	0x0800a65d
 800a5d4:	0800a65d 	.word	0x0800a65d
 800a5d8:	0800a65d 	.word	0x0800a65d
 800a5dc:	0800a65d 	.word	0x0800a65d
 800a5e0:	0800a65d 	.word	0x0800a65d
 800a5e4:	0800a65d 	.word	0x0800a65d
 800a5e8:	0800a645 	.word	0x0800a645
 800a5ec:	0800a65d 	.word	0x0800a65d
 800a5f0:	0800a65d 	.word	0x0800a65d
 800a5f4:	0800a65d 	.word	0x0800a65d
 800a5f8:	0800a65d 	.word	0x0800a65d
 800a5fc:	0800a65d 	.word	0x0800a65d
 800a600:	0800a65d 	.word	0x0800a65d
 800a604:	0800a65d 	.word	0x0800a65d
 800a608:	0800a64d 	.word	0x0800a64d
 800a60c:	0800a65d 	.word	0x0800a65d
 800a610:	0800a65d 	.word	0x0800a65d
 800a614:	0800a65d 	.word	0x0800a65d
 800a618:	0800a65d 	.word	0x0800a65d
 800a61c:	0800a65d 	.word	0x0800a65d
 800a620:	0800a65d 	.word	0x0800a65d
 800a624:	0800a65d 	.word	0x0800a65d
 800a628:	0800a655 	.word	0x0800a655
 800a62c:	2301      	movs	r3, #1
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a632:	e222      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a634:	2304      	movs	r3, #4
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63a:	e21e      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a63c:	2308      	movs	r3, #8
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e21a      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a644:	2310      	movs	r3, #16
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e216      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a64c:	2320      	movs	r3, #32
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e212      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a654:	2340      	movs	r3, #64	@ 0x40
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e20e      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a65c:	2380      	movs	r3, #128	@ 0x80
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e20a      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a69      	ldr	r2, [pc, #420]	@ (800a810 <UART_SetConfig+0x33c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d130      	bne.n	800a6d0 <UART_SetConfig+0x1fc>
 800a66e:	4b67      	ldr	r3, [pc, #412]	@ (800a80c <UART_SetConfig+0x338>)
 800a670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	2b05      	cmp	r3, #5
 800a678:	d826      	bhi.n	800a6c8 <UART_SetConfig+0x1f4>
 800a67a:	a201      	add	r2, pc, #4	@ (adr r2, 800a680 <UART_SetConfig+0x1ac>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a699 	.word	0x0800a699
 800a684:	0800a6a1 	.word	0x0800a6a1
 800a688:	0800a6a9 	.word	0x0800a6a9
 800a68c:	0800a6b1 	.word	0x0800a6b1
 800a690:	0800a6b9 	.word	0x0800a6b9
 800a694:	0800a6c1 	.word	0x0800a6c1
 800a698:	2300      	movs	r3, #0
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69e:	e1ec      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a6:	e1e8      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a6a8:	2308      	movs	r3, #8
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e1e4      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a6b0:	2310      	movs	r3, #16
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e1e0      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a6b8:	2320      	movs	r3, #32
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6be:	e1dc      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a6c0:	2340      	movs	r3, #64	@ 0x40
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e1d8      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a6c8:	2380      	movs	r3, #128	@ 0x80
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e1d4      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a4f      	ldr	r2, [pc, #316]	@ (800a814 <UART_SetConfig+0x340>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d130      	bne.n	800a73c <UART_SetConfig+0x268>
 800a6da:	4b4c      	ldr	r3, [pc, #304]	@ (800a80c <UART_SetConfig+0x338>)
 800a6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	2b05      	cmp	r3, #5
 800a6e4:	d826      	bhi.n	800a734 <UART_SetConfig+0x260>
 800a6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ec <UART_SetConfig+0x218>)
 800a6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ec:	0800a705 	.word	0x0800a705
 800a6f0:	0800a70d 	.word	0x0800a70d
 800a6f4:	0800a715 	.word	0x0800a715
 800a6f8:	0800a71d 	.word	0x0800a71d
 800a6fc:	0800a725 	.word	0x0800a725
 800a700:	0800a72d 	.word	0x0800a72d
 800a704:	2300      	movs	r3, #0
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70a:	e1b6      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a70c:	2304      	movs	r3, #4
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a712:	e1b2      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a714:	2308      	movs	r3, #8
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71a:	e1ae      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a71c:	2310      	movs	r3, #16
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a722:	e1aa      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a724:	2320      	movs	r3, #32
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72a:	e1a6      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a72c:	2340      	movs	r3, #64	@ 0x40
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e1a2      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a734:	2380      	movs	r3, #128	@ 0x80
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e19e      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a35      	ldr	r2, [pc, #212]	@ (800a818 <UART_SetConfig+0x344>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d130      	bne.n	800a7a8 <UART_SetConfig+0x2d4>
 800a746:	4b31      	ldr	r3, [pc, #196]	@ (800a80c <UART_SetConfig+0x338>)
 800a748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	2b05      	cmp	r3, #5
 800a750:	d826      	bhi.n	800a7a0 <UART_SetConfig+0x2cc>
 800a752:	a201      	add	r2, pc, #4	@ (adr r2, 800a758 <UART_SetConfig+0x284>)
 800a754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a758:	0800a771 	.word	0x0800a771
 800a75c:	0800a779 	.word	0x0800a779
 800a760:	0800a781 	.word	0x0800a781
 800a764:	0800a789 	.word	0x0800a789
 800a768:	0800a791 	.word	0x0800a791
 800a76c:	0800a799 	.word	0x0800a799
 800a770:	2300      	movs	r3, #0
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e180      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a778:	2304      	movs	r3, #4
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e17c      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a780:	2308      	movs	r3, #8
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e178      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a788:	2310      	movs	r3, #16
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e174      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a790:	2320      	movs	r3, #32
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e170      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a798:	2340      	movs	r3, #64	@ 0x40
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e16c      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a7a0:	2380      	movs	r3, #128	@ 0x80
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e168      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a81c <UART_SetConfig+0x348>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d142      	bne.n	800a838 <UART_SetConfig+0x364>
 800a7b2:	4b16      	ldr	r3, [pc, #88]	@ (800a80c <UART_SetConfig+0x338>)
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d838      	bhi.n	800a830 <UART_SetConfig+0x35c>
 800a7be:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c4 <UART_SetConfig+0x2f0>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a7dd 	.word	0x0800a7dd
 800a7c8:	0800a7e5 	.word	0x0800a7e5
 800a7cc:	0800a7ed 	.word	0x0800a7ed
 800a7d0:	0800a7f5 	.word	0x0800a7f5
 800a7d4:	0800a821 	.word	0x0800a821
 800a7d8:	0800a829 	.word	0x0800a829
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e14a      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e146      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a7ec:	2308      	movs	r3, #8
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e142      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e13e      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a7fc:	cfff69f3 	.word	0xcfff69f3
 800a800:	58000c00 	.word	0x58000c00
 800a804:	11fff4ff 	.word	0x11fff4ff
 800a808:	40011000 	.word	0x40011000
 800a80c:	58024400 	.word	0x58024400
 800a810:	40004400 	.word	0x40004400
 800a814:	40004800 	.word	0x40004800
 800a818:	40004c00 	.word	0x40004c00
 800a81c:	40005000 	.word	0x40005000
 800a820:	2320      	movs	r3, #32
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e128      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a828:	2340      	movs	r3, #64	@ 0x40
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e124      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a830:	2380      	movs	r3, #128	@ 0x80
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e120      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4acb      	ldr	r2, [pc, #812]	@ (800ab6c <UART_SetConfig+0x698>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d176      	bne.n	800a930 <UART_SetConfig+0x45c>
 800a842:	4bcb      	ldr	r3, [pc, #812]	@ (800ab70 <UART_SetConfig+0x69c>)
 800a844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a846:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a84a:	2b28      	cmp	r3, #40	@ 0x28
 800a84c:	d86c      	bhi.n	800a928 <UART_SetConfig+0x454>
 800a84e:	a201      	add	r2, pc, #4	@ (adr r2, 800a854 <UART_SetConfig+0x380>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a8f9 	.word	0x0800a8f9
 800a858:	0800a929 	.word	0x0800a929
 800a85c:	0800a929 	.word	0x0800a929
 800a860:	0800a929 	.word	0x0800a929
 800a864:	0800a929 	.word	0x0800a929
 800a868:	0800a929 	.word	0x0800a929
 800a86c:	0800a929 	.word	0x0800a929
 800a870:	0800a929 	.word	0x0800a929
 800a874:	0800a901 	.word	0x0800a901
 800a878:	0800a929 	.word	0x0800a929
 800a87c:	0800a929 	.word	0x0800a929
 800a880:	0800a929 	.word	0x0800a929
 800a884:	0800a929 	.word	0x0800a929
 800a888:	0800a929 	.word	0x0800a929
 800a88c:	0800a929 	.word	0x0800a929
 800a890:	0800a929 	.word	0x0800a929
 800a894:	0800a909 	.word	0x0800a909
 800a898:	0800a929 	.word	0x0800a929
 800a89c:	0800a929 	.word	0x0800a929
 800a8a0:	0800a929 	.word	0x0800a929
 800a8a4:	0800a929 	.word	0x0800a929
 800a8a8:	0800a929 	.word	0x0800a929
 800a8ac:	0800a929 	.word	0x0800a929
 800a8b0:	0800a929 	.word	0x0800a929
 800a8b4:	0800a911 	.word	0x0800a911
 800a8b8:	0800a929 	.word	0x0800a929
 800a8bc:	0800a929 	.word	0x0800a929
 800a8c0:	0800a929 	.word	0x0800a929
 800a8c4:	0800a929 	.word	0x0800a929
 800a8c8:	0800a929 	.word	0x0800a929
 800a8cc:	0800a929 	.word	0x0800a929
 800a8d0:	0800a929 	.word	0x0800a929
 800a8d4:	0800a919 	.word	0x0800a919
 800a8d8:	0800a929 	.word	0x0800a929
 800a8dc:	0800a929 	.word	0x0800a929
 800a8e0:	0800a929 	.word	0x0800a929
 800a8e4:	0800a929 	.word	0x0800a929
 800a8e8:	0800a929 	.word	0x0800a929
 800a8ec:	0800a929 	.word	0x0800a929
 800a8f0:	0800a929 	.word	0x0800a929
 800a8f4:	0800a921 	.word	0x0800a921
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fe:	e0bc      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a900:	2304      	movs	r3, #4
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e0b8      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a908:	2308      	movs	r3, #8
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e0b4      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a910:	2310      	movs	r3, #16
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e0b0      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a918:	2320      	movs	r3, #32
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e0ac      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a920:	2340      	movs	r3, #64	@ 0x40
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e0a8      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a928:	2380      	movs	r3, #128	@ 0x80
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e0a4      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a8f      	ldr	r2, [pc, #572]	@ (800ab74 <UART_SetConfig+0x6a0>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d130      	bne.n	800a99c <UART_SetConfig+0x4c8>
 800a93a:	4b8d      	ldr	r3, [pc, #564]	@ (800ab70 <UART_SetConfig+0x69c>)
 800a93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	2b05      	cmp	r3, #5
 800a944:	d826      	bhi.n	800a994 <UART_SetConfig+0x4c0>
 800a946:	a201      	add	r2, pc, #4	@ (adr r2, 800a94c <UART_SetConfig+0x478>)
 800a948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94c:	0800a965 	.word	0x0800a965
 800a950:	0800a96d 	.word	0x0800a96d
 800a954:	0800a975 	.word	0x0800a975
 800a958:	0800a97d 	.word	0x0800a97d
 800a95c:	0800a985 	.word	0x0800a985
 800a960:	0800a98d 	.word	0x0800a98d
 800a964:	2300      	movs	r3, #0
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96a:	e086      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a96c:	2304      	movs	r3, #4
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a972:	e082      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a974:	2308      	movs	r3, #8
 800a976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97a:	e07e      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a97c:	2310      	movs	r3, #16
 800a97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a982:	e07a      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a984:	2320      	movs	r3, #32
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98a:	e076      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a98c:	2340      	movs	r3, #64	@ 0x40
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a992:	e072      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a994:	2380      	movs	r3, #128	@ 0x80
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99a:	e06e      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a75      	ldr	r2, [pc, #468]	@ (800ab78 <UART_SetConfig+0x6a4>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d130      	bne.n	800aa08 <UART_SetConfig+0x534>
 800a9a6:	4b72      	ldr	r3, [pc, #456]	@ (800ab70 <UART_SetConfig+0x69c>)
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	2b05      	cmp	r3, #5
 800a9b0:	d826      	bhi.n	800aa00 <UART_SetConfig+0x52c>
 800a9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <UART_SetConfig+0x4e4>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800a9d1 	.word	0x0800a9d1
 800a9bc:	0800a9d9 	.word	0x0800a9d9
 800a9c0:	0800a9e1 	.word	0x0800a9e1
 800a9c4:	0800a9e9 	.word	0x0800a9e9
 800a9c8:	0800a9f1 	.word	0x0800a9f1
 800a9cc:	0800a9f9 	.word	0x0800a9f9
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d6:	e050      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a9d8:	2304      	movs	r3, #4
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9de:	e04c      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e048      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ee:	e044      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e040      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800a9f8:	2340      	movs	r3, #64	@ 0x40
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e03c      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa00:	2380      	movs	r3, #128	@ 0x80
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e038      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a5b      	ldr	r2, [pc, #364]	@ (800ab7c <UART_SetConfig+0x6a8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d130      	bne.n	800aa74 <UART_SetConfig+0x5a0>
 800aa12:	4b57      	ldr	r3, [pc, #348]	@ (800ab70 <UART_SetConfig+0x69c>)
 800aa14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	d826      	bhi.n	800aa6c <UART_SetConfig+0x598>
 800aa1e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa24 <UART_SetConfig+0x550>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa3d 	.word	0x0800aa3d
 800aa28:	0800aa45 	.word	0x0800aa45
 800aa2c:	0800aa4d 	.word	0x0800aa4d
 800aa30:	0800aa55 	.word	0x0800aa55
 800aa34:	0800aa5d 	.word	0x0800aa5d
 800aa38:	0800aa65 	.word	0x0800aa65
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e01a      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa44:	2304      	movs	r3, #4
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e016      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa52:	e012      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa54:	2310      	movs	r3, #16
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5a:	e00e      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa62:	e00a      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa64:	2340      	movs	r3, #64	@ 0x40
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	e006      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa6c:	2380      	movs	r3, #128	@ 0x80
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa72:	e002      	b.n	800aa7a <UART_SetConfig+0x5a6>
 800aa74:	2380      	movs	r3, #128	@ 0x80
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a3f      	ldr	r2, [pc, #252]	@ (800ab7c <UART_SetConfig+0x6a8>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	f040 80f8 	bne.w	800ac76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa8a:	2b20      	cmp	r3, #32
 800aa8c:	dc46      	bgt.n	800ab1c <UART_SetConfig+0x648>
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	f2c0 8082 	blt.w	800ab98 <UART_SetConfig+0x6c4>
 800aa94:	3b02      	subs	r3, #2
 800aa96:	2b1e      	cmp	r3, #30
 800aa98:	d87e      	bhi.n	800ab98 <UART_SetConfig+0x6c4>
 800aa9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa0 <UART_SetConfig+0x5cc>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800ab23 	.word	0x0800ab23
 800aaa4:	0800ab99 	.word	0x0800ab99
 800aaa8:	0800ab2b 	.word	0x0800ab2b
 800aaac:	0800ab99 	.word	0x0800ab99
 800aab0:	0800ab99 	.word	0x0800ab99
 800aab4:	0800ab99 	.word	0x0800ab99
 800aab8:	0800ab3b 	.word	0x0800ab3b
 800aabc:	0800ab99 	.word	0x0800ab99
 800aac0:	0800ab99 	.word	0x0800ab99
 800aac4:	0800ab99 	.word	0x0800ab99
 800aac8:	0800ab99 	.word	0x0800ab99
 800aacc:	0800ab99 	.word	0x0800ab99
 800aad0:	0800ab99 	.word	0x0800ab99
 800aad4:	0800ab99 	.word	0x0800ab99
 800aad8:	0800ab4b 	.word	0x0800ab4b
 800aadc:	0800ab99 	.word	0x0800ab99
 800aae0:	0800ab99 	.word	0x0800ab99
 800aae4:	0800ab99 	.word	0x0800ab99
 800aae8:	0800ab99 	.word	0x0800ab99
 800aaec:	0800ab99 	.word	0x0800ab99
 800aaf0:	0800ab99 	.word	0x0800ab99
 800aaf4:	0800ab99 	.word	0x0800ab99
 800aaf8:	0800ab99 	.word	0x0800ab99
 800aafc:	0800ab99 	.word	0x0800ab99
 800ab00:	0800ab99 	.word	0x0800ab99
 800ab04:	0800ab99 	.word	0x0800ab99
 800ab08:	0800ab99 	.word	0x0800ab99
 800ab0c:	0800ab99 	.word	0x0800ab99
 800ab10:	0800ab99 	.word	0x0800ab99
 800ab14:	0800ab99 	.word	0x0800ab99
 800ab18:	0800ab8b 	.word	0x0800ab8b
 800ab1c:	2b40      	cmp	r3, #64	@ 0x40
 800ab1e:	d037      	beq.n	800ab90 <UART_SetConfig+0x6bc>
 800ab20:	e03a      	b.n	800ab98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab22:	f7fd fbf7 	bl	8008314 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab28:	e03c      	b.n	800aba4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fd fc06 	bl	8008340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e034      	b.n	800aba4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab3a:	f107 0318 	add.w	r3, r7, #24
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fd fd52 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab48:	e02c      	b.n	800aba4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab4a:	4b09      	ldr	r3, [pc, #36]	@ (800ab70 <UART_SetConfig+0x69c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d016      	beq.n	800ab84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab56:	4b06      	ldr	r3, [pc, #24]	@ (800ab70 <UART_SetConfig+0x69c>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	08db      	lsrs	r3, r3, #3
 800ab5c:	f003 0303 	and.w	r3, r3, #3
 800ab60:	4a07      	ldr	r2, [pc, #28]	@ (800ab80 <UART_SetConfig+0x6ac>)
 800ab62:	fa22 f303 	lsr.w	r3, r2, r3
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab68:	e01c      	b.n	800aba4 <UART_SetConfig+0x6d0>
 800ab6a:	bf00      	nop
 800ab6c:	40011400 	.word	0x40011400
 800ab70:	58024400 	.word	0x58024400
 800ab74:	40007800 	.word	0x40007800
 800ab78:	40007c00 	.word	0x40007c00
 800ab7c:	58000c00 	.word	0x58000c00
 800ab80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ab84:	4b9d      	ldr	r3, [pc, #628]	@ (800adfc <UART_SetConfig+0x928>)
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab88:	e00c      	b.n	800aba4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab8a:	4b9d      	ldr	r3, [pc, #628]	@ (800ae00 <UART_SetConfig+0x92c>)
 800ab8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8e:	e009      	b.n	800aba4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab96:	e005      	b.n	800aba4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aba2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 81de 	beq.w	800af68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb0:	4a94      	ldr	r2, [pc, #592]	@ (800ae04 <UART_SetConfig+0x930>)
 800abb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abb6:	461a      	mov	r2, r3
 800abb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abba:	fbb3 f3f2 	udiv	r3, r3, r2
 800abbe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	4613      	mov	r3, r2
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	4413      	add	r3, r2
 800abca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abcc:	429a      	cmp	r2, r3
 800abce:	d305      	bcc.n	800abdc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd8:	429a      	cmp	r2, r3
 800abda:	d903      	bls.n	800abe4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abe2:	e1c1      	b.n	800af68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe6:	2200      	movs	r2, #0
 800abe8:	60bb      	str	r3, [r7, #8]
 800abea:	60fa      	str	r2, [r7, #12]
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf0:	4a84      	ldr	r2, [pc, #528]	@ (800ae04 <UART_SetConfig+0x930>)
 800abf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	2200      	movs	r2, #0
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	607a      	str	r2, [r7, #4]
 800abfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac06:	f7f5 fb6b 	bl	80002e0 <__aeabi_uldivmod>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4610      	mov	r0, r2
 800ac10:	4619      	mov	r1, r3
 800ac12:	f04f 0200 	mov.w	r2, #0
 800ac16:	f04f 0300 	mov.w	r3, #0
 800ac1a:	020b      	lsls	r3, r1, #8
 800ac1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac20:	0202      	lsls	r2, r0, #8
 800ac22:	6979      	ldr	r1, [r7, #20]
 800ac24:	6849      	ldr	r1, [r1, #4]
 800ac26:	0849      	lsrs	r1, r1, #1
 800ac28:	2000      	movs	r0, #0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	eb12 0804 	adds.w	r8, r2, r4
 800ac32:	eb43 0905 	adc.w	r9, r3, r5
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	469a      	mov	sl, r3
 800ac3e:	4693      	mov	fp, r2
 800ac40:	4652      	mov	r2, sl
 800ac42:	465b      	mov	r3, fp
 800ac44:	4640      	mov	r0, r8
 800ac46:	4649      	mov	r1, r9
 800ac48:	f7f5 fb4a 	bl	80002e0 <__aeabi_uldivmod>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4613      	mov	r3, r2
 800ac52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac5a:	d308      	bcc.n	800ac6e <UART_SetConfig+0x79a>
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac62:	d204      	bcs.n	800ac6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac6a:	60da      	str	r2, [r3, #12]
 800ac6c:	e17c      	b.n	800af68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac74:	e178      	b.n	800af68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac7e:	f040 80c5 	bne.w	800ae0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ac82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	dc48      	bgt.n	800ad1c <UART_SetConfig+0x848>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	db7b      	blt.n	800ad86 <UART_SetConfig+0x8b2>
 800ac8e:	2b20      	cmp	r3, #32
 800ac90:	d879      	bhi.n	800ad86 <UART_SetConfig+0x8b2>
 800ac92:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <UART_SetConfig+0x7c4>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800ad23 	.word	0x0800ad23
 800ac9c:	0800ad2b 	.word	0x0800ad2b
 800aca0:	0800ad87 	.word	0x0800ad87
 800aca4:	0800ad87 	.word	0x0800ad87
 800aca8:	0800ad33 	.word	0x0800ad33
 800acac:	0800ad87 	.word	0x0800ad87
 800acb0:	0800ad87 	.word	0x0800ad87
 800acb4:	0800ad87 	.word	0x0800ad87
 800acb8:	0800ad43 	.word	0x0800ad43
 800acbc:	0800ad87 	.word	0x0800ad87
 800acc0:	0800ad87 	.word	0x0800ad87
 800acc4:	0800ad87 	.word	0x0800ad87
 800acc8:	0800ad87 	.word	0x0800ad87
 800accc:	0800ad87 	.word	0x0800ad87
 800acd0:	0800ad87 	.word	0x0800ad87
 800acd4:	0800ad87 	.word	0x0800ad87
 800acd8:	0800ad53 	.word	0x0800ad53
 800acdc:	0800ad87 	.word	0x0800ad87
 800ace0:	0800ad87 	.word	0x0800ad87
 800ace4:	0800ad87 	.word	0x0800ad87
 800ace8:	0800ad87 	.word	0x0800ad87
 800acec:	0800ad87 	.word	0x0800ad87
 800acf0:	0800ad87 	.word	0x0800ad87
 800acf4:	0800ad87 	.word	0x0800ad87
 800acf8:	0800ad87 	.word	0x0800ad87
 800acfc:	0800ad87 	.word	0x0800ad87
 800ad00:	0800ad87 	.word	0x0800ad87
 800ad04:	0800ad87 	.word	0x0800ad87
 800ad08:	0800ad87 	.word	0x0800ad87
 800ad0c:	0800ad87 	.word	0x0800ad87
 800ad10:	0800ad87 	.word	0x0800ad87
 800ad14:	0800ad87 	.word	0x0800ad87
 800ad18:	0800ad79 	.word	0x0800ad79
 800ad1c:	2b40      	cmp	r3, #64	@ 0x40
 800ad1e:	d02e      	beq.n	800ad7e <UART_SetConfig+0x8aa>
 800ad20:	e031      	b.n	800ad86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad22:	f7fc f87f 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 800ad26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad28:	e033      	b.n	800ad92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad2a:	f7fc f891 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 800ad2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad30:	e02f      	b.n	800ad92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fd fb02 	bl	8008340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad40:	e027      	b.n	800ad92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad42:	f107 0318 	add.w	r3, r7, #24
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fd fc4e 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad50:	e01f      	b.n	800ad92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad52:	4b2d      	ldr	r3, [pc, #180]	@ (800ae08 <UART_SetConfig+0x934>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d009      	beq.n	800ad72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad5e:	4b2a      	ldr	r3, [pc, #168]	@ (800ae08 <UART_SetConfig+0x934>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	08db      	lsrs	r3, r3, #3
 800ad64:	f003 0303 	and.w	r3, r3, #3
 800ad68:	4a24      	ldr	r2, [pc, #144]	@ (800adfc <UART_SetConfig+0x928>)
 800ad6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad70:	e00f      	b.n	800ad92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ad72:	4b22      	ldr	r3, [pc, #136]	@ (800adfc <UART_SetConfig+0x928>)
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad76:	e00c      	b.n	800ad92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad78:	4b21      	ldr	r3, [pc, #132]	@ (800ae00 <UART_SetConfig+0x92c>)
 800ad7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7c:	e009      	b.n	800ad92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad84:	e005      	b.n	800ad92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 80e7 	beq.w	800af68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad9e:	4a19      	ldr	r2, [pc, #100]	@ (800ae04 <UART_SetConfig+0x930>)
 800ada0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ada4:	461a      	mov	r2, r3
 800ada6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adac:	005a      	lsls	r2, r3, #1
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	085b      	lsrs	r3, r3, #1
 800adb4:	441a      	add	r2, r3
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	fbb2 f3f3 	udiv	r3, r2, r3
 800adbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	2b0f      	cmp	r3, #15
 800adc4:	d916      	bls.n	800adf4 <UART_SetConfig+0x920>
 800adc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adcc:	d212      	bcs.n	800adf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add0:	b29b      	uxth	r3, r3
 800add2:	f023 030f 	bic.w	r3, r3, #15
 800add6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800add8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adda:	085b      	lsrs	r3, r3, #1
 800addc:	b29b      	uxth	r3, r3
 800adde:	f003 0307 	and.w	r3, r3, #7
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ade6:	4313      	orrs	r3, r2
 800ade8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800adf0:	60da      	str	r2, [r3, #12]
 800adf2:	e0b9      	b.n	800af68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800adfa:	e0b5      	b.n	800af68 <UART_SetConfig+0xa94>
 800adfc:	03d09000 	.word	0x03d09000
 800ae00:	003d0900 	.word	0x003d0900
 800ae04:	08010f8c 	.word	0x08010f8c
 800ae08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae10:	2b20      	cmp	r3, #32
 800ae12:	dc49      	bgt.n	800aea8 <UART_SetConfig+0x9d4>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	db7c      	blt.n	800af12 <UART_SetConfig+0xa3e>
 800ae18:	2b20      	cmp	r3, #32
 800ae1a:	d87a      	bhi.n	800af12 <UART_SetConfig+0xa3e>
 800ae1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <UART_SetConfig+0x950>)
 800ae1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae22:	bf00      	nop
 800ae24:	0800aeaf 	.word	0x0800aeaf
 800ae28:	0800aeb7 	.word	0x0800aeb7
 800ae2c:	0800af13 	.word	0x0800af13
 800ae30:	0800af13 	.word	0x0800af13
 800ae34:	0800aebf 	.word	0x0800aebf
 800ae38:	0800af13 	.word	0x0800af13
 800ae3c:	0800af13 	.word	0x0800af13
 800ae40:	0800af13 	.word	0x0800af13
 800ae44:	0800aecf 	.word	0x0800aecf
 800ae48:	0800af13 	.word	0x0800af13
 800ae4c:	0800af13 	.word	0x0800af13
 800ae50:	0800af13 	.word	0x0800af13
 800ae54:	0800af13 	.word	0x0800af13
 800ae58:	0800af13 	.word	0x0800af13
 800ae5c:	0800af13 	.word	0x0800af13
 800ae60:	0800af13 	.word	0x0800af13
 800ae64:	0800aedf 	.word	0x0800aedf
 800ae68:	0800af13 	.word	0x0800af13
 800ae6c:	0800af13 	.word	0x0800af13
 800ae70:	0800af13 	.word	0x0800af13
 800ae74:	0800af13 	.word	0x0800af13
 800ae78:	0800af13 	.word	0x0800af13
 800ae7c:	0800af13 	.word	0x0800af13
 800ae80:	0800af13 	.word	0x0800af13
 800ae84:	0800af13 	.word	0x0800af13
 800ae88:	0800af13 	.word	0x0800af13
 800ae8c:	0800af13 	.word	0x0800af13
 800ae90:	0800af13 	.word	0x0800af13
 800ae94:	0800af13 	.word	0x0800af13
 800ae98:	0800af13 	.word	0x0800af13
 800ae9c:	0800af13 	.word	0x0800af13
 800aea0:	0800af13 	.word	0x0800af13
 800aea4:	0800af05 	.word	0x0800af05
 800aea8:	2b40      	cmp	r3, #64	@ 0x40
 800aeaa:	d02e      	beq.n	800af0a <UART_SetConfig+0xa36>
 800aeac:	e031      	b.n	800af12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeae:	f7fb ffb9 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 800aeb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aeb4:	e033      	b.n	800af1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeb6:	f7fb ffcb 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 800aeba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aebc:	e02f      	b.n	800af1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fd fa3c 	bl	8008340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aecc:	e027      	b.n	800af1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aece:	f107 0318 	add.w	r3, r7, #24
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fd fb88 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aedc:	e01f      	b.n	800af1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aede:	4b2d      	ldr	r3, [pc, #180]	@ (800af94 <UART_SetConfig+0xac0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0320 	and.w	r3, r3, #32
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d009      	beq.n	800aefe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aeea:	4b2a      	ldr	r3, [pc, #168]	@ (800af94 <UART_SetConfig+0xac0>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	08db      	lsrs	r3, r3, #3
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	4a28      	ldr	r2, [pc, #160]	@ (800af98 <UART_SetConfig+0xac4>)
 800aef6:	fa22 f303 	lsr.w	r3, r2, r3
 800aefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aefc:	e00f      	b.n	800af1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aefe:	4b26      	ldr	r3, [pc, #152]	@ (800af98 <UART_SetConfig+0xac4>)
 800af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af02:	e00c      	b.n	800af1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af04:	4b25      	ldr	r3, [pc, #148]	@ (800af9c <UART_SetConfig+0xac8>)
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af08:	e009      	b.n	800af1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af10:	e005      	b.n	800af1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af1c:	bf00      	nop
    }

    if (pclk != 0U)
 800af1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af20:	2b00      	cmp	r3, #0
 800af22:	d021      	beq.n	800af68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af28:	4a1d      	ldr	r2, [pc, #116]	@ (800afa0 <UART_SetConfig+0xacc>)
 800af2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af2e:	461a      	mov	r2, r3
 800af30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af32:	fbb3 f2f2 	udiv	r2, r3, r2
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	085b      	lsrs	r3, r3, #1
 800af3c:	441a      	add	r2, r3
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	fbb2 f3f3 	udiv	r3, r2, r3
 800af46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4a:	2b0f      	cmp	r3, #15
 800af4c:	d909      	bls.n	800af62 <UART_SetConfig+0xa8e>
 800af4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af54:	d205      	bcs.n	800af62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af58:	b29a      	uxth	r2, r3
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	60da      	str	r2, [r3, #12]
 800af60:	e002      	b.n	800af68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2201      	movs	r2, #1
 800af74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2200      	movs	r2, #0
 800af7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2200      	movs	r2, #0
 800af82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3748      	adds	r7, #72	@ 0x48
 800af8c:	46bd      	mov	sp, r7
 800af8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af92:	bf00      	nop
 800af94:	58024400 	.word	0x58024400
 800af98:	03d09000 	.word	0x03d09000
 800af9c:	003d0900 	.word	0x003d0900
 800afa0:	08010f8c 	.word	0x08010f8c

0800afa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b016:	f003 0304 	and.w	r3, r3, #4
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b038:	f003 0310 	and.w	r3, r3, #16
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b05a:	f003 0320 	and.w	r3, r3, #32
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00a      	beq.n	800b078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d01a      	beq.n	800b0ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b09e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0a2:	d10a      	bne.n	800b0ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	605a      	str	r2, [r3, #4]
  }
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b098      	sub	sp, #96	@ 0x60
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0f8:	f7f7 fa68 	bl	80025cc <HAL_GetTick>
 800b0fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0308 	and.w	r3, r3, #8
 800b108:	2b08      	cmp	r3, #8
 800b10a:	d12f      	bne.n	800b16c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b10c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b114:	2200      	movs	r2, #0
 800b116:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f88e 	bl	800b23c <UART_WaitOnFlagUntilTimeout>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d022      	beq.n	800b16c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b13a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b144:	647b      	str	r3, [r7, #68]	@ 0x44
 800b146:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b148:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b14a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e6      	bne.n	800b126 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2220      	movs	r2, #32
 800b15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e063      	b.n	800b234 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0304 	and.w	r3, r3, #4
 800b176:	2b04      	cmp	r3, #4
 800b178:	d149      	bne.n	800b20e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b17a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b182:	2200      	movs	r2, #0
 800b184:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f857 	bl	800b23c <UART_WaitOnFlagUntilTimeout>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d03c      	beq.n	800b20e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1ba:	e841 2300 	strex	r3, r2, [r1]
 800b1be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e6      	bne.n	800b194 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f023 0301 	bic.w	r3, r3, #1
 800b1dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1e6:	61fa      	str	r2, [r7, #28]
 800b1e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	69b9      	ldr	r1, [r7, #24]
 800b1ec:	69fa      	ldr	r2, [r7, #28]
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e5      	bne.n	800b1c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e012      	b.n	800b234 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3758      	adds	r7, #88	@ 0x58
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	4613      	mov	r3, r2
 800b24a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b24c:	e04f      	b.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b254:	d04b      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b256:	f7f7 f9b9 	bl	80025cc <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	429a      	cmp	r2, r3
 800b264:	d302      	bcc.n	800b26c <UART_WaitOnFlagUntilTimeout+0x30>
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e04e      	b.n	800b30e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 0304 	and.w	r3, r3, #4
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d037      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2b80      	cmp	r3, #128	@ 0x80
 800b282:	d034      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b40      	cmp	r3, #64	@ 0x40
 800b288:	d031      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	f003 0308 	and.w	r3, r3, #8
 800b294:	2b08      	cmp	r3, #8
 800b296:	d110      	bne.n	800b2ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2208      	movs	r2, #8
 800b29e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f839 	bl	800b318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2208      	movs	r2, #8
 800b2aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e029      	b.n	800b30e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2c8:	d111      	bne.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 f81f 	bl	800b318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e00f      	b.n	800b30e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69da      	ldr	r2, [r3, #28]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	bf0c      	ite	eq
 800b2fe:	2301      	moveq	r3, #1
 800b300:	2300      	movne	r3, #0
 800b302:	b2db      	uxtb	r3, r3
 800b304:	461a      	mov	r2, r3
 800b306:	79fb      	ldrb	r3, [r7, #7]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d0a0      	beq.n	800b24e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b095      	sub	sp, #84	@ 0x54
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b33e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b340:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b344:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e6      	bne.n	800b320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3308      	adds	r3, #8
 800b358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	61fb      	str	r3, [r7, #28]
   return(result);
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	4b1e      	ldr	r3, [pc, #120]	@ (800b3e0 <UART_EndRxTransfer+0xc8>)
 800b366:	4013      	ands	r3, r2
 800b368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3308      	adds	r3, #8
 800b370:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e5      	bne.n	800b352 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d118      	bne.n	800b3c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f023 0310 	bic.w	r3, r3, #16
 800b3a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b0:	6979      	ldr	r1, [r7, #20]
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	e841 2300 	strex	r3, r2, [r1]
 800b3b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e6      	bne.n	800b38e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2220      	movs	r2, #32
 800b3c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b3d4:	bf00      	nop
 800b3d6:	3754      	adds	r7, #84	@ 0x54
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	effffffe 	.word	0xeffffffe

0800b3e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d101      	bne.n	800b3fa <HAL_UARTEx_DisableFifoMode+0x16>
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	e027      	b.n	800b44a <HAL_UARTEx_DisableFifoMode+0x66>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2224      	movs	r2, #36	@ 0x24
 800b406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f022 0201 	bic.w	r2, r2, #1
 800b420:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b428:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b466:	2b01      	cmp	r3, #1
 800b468:	d101      	bne.n	800b46e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b46a:	2302      	movs	r3, #2
 800b46c:	e02d      	b.n	800b4ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2224      	movs	r2, #36	@ 0x24
 800b47a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f022 0201 	bic.w	r2, r2, #1
 800b494:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f850 	bl	800b550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2220      	movs	r2, #32
 800b4bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d101      	bne.n	800b4ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	e02d      	b.n	800b546 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2224      	movs	r2, #36	@ 0x24
 800b4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f022 0201 	bic.w	r2, r2, #1
 800b510:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f812 	bl	800b550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2220      	movs	r2, #32
 800b538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d108      	bne.n	800b572 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b570:	e031      	b.n	800b5d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b572:	2310      	movs	r3, #16
 800b574:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b576:	2310      	movs	r3, #16
 800b578:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	0e5b      	lsrs	r3, r3, #25
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 0307 	and.w	r3, r3, #7
 800b588:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	0f5b      	lsrs	r3, r3, #29
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f003 0307 	and.w	r3, r3, #7
 800b598:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b59a:	7bbb      	ldrb	r3, [r7, #14]
 800b59c:	7b3a      	ldrb	r2, [r7, #12]
 800b59e:	4911      	ldr	r1, [pc, #68]	@ (800b5e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b5a0:	5c8a      	ldrb	r2, [r1, r2]
 800b5a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5a6:	7b3a      	ldrb	r2, [r7, #12]
 800b5a8:	490f      	ldr	r1, [pc, #60]	@ (800b5e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b5aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	7b7a      	ldrb	r2, [r7, #13]
 800b5bc:	4909      	ldr	r1, [pc, #36]	@ (800b5e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b5be:	5c8a      	ldrb	r2, [r1, r2]
 800b5c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5c4:	7b7a      	ldrb	r2, [r7, #13]
 800b5c6:	4908      	ldr	r1, [pc, #32]	@ (800b5e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b5c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b5d6:	bf00      	nop
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	08010fa4 	.word	0x08010fa4
 800b5e8:	08010fac 	.word	0x08010fac

0800b5ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	f107 001c 	add.w	r0, r7, #28
 800b5fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b602:	2b01      	cmp	r3, #1
 800b604:	d121      	bne.n	800b64a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b60a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	4b2c      	ldr	r3, [pc, #176]	@ (800b6c8 <USB_CoreInit+0xdc>)
 800b618:	4013      	ands	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b62a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d105      	bne.n	800b63e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 fafa 	bl	800cc38 <USB_CoreReset>
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
 800b648:	e01b      	b.n	800b682 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 faee 	bl	800cc38 <USB_CoreReset>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b660:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b66c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	639a      	str	r2, [r3, #56]	@ 0x38
 800b674:	e005      	b.n	800b682 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b67a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b682:	7fbb      	ldrb	r3, [r7, #30]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d116      	bne.n	800b6b6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b696:	4b0d      	ldr	r3, [pc, #52]	@ (800b6cc <USB_CoreInit+0xe0>)
 800b698:	4313      	orrs	r3, r2
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f043 0206 	orr.w	r2, r3, #6
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f043 0220 	orr.w	r2, r3, #32
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6c2:	b004      	add	sp, #16
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	ffbdffbf 	.word	0xffbdffbf
 800b6cc:	03ee0000 	.word	0x03ee0000

0800b6d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d165      	bne.n	800b7b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	4a41      	ldr	r2, [pc, #260]	@ (800b7ec <USB_SetTurnaroundTime+0x11c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d906      	bls.n	800b6fa <USB_SetTurnaroundTime+0x2a>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4a40      	ldr	r2, [pc, #256]	@ (800b7f0 <USB_SetTurnaroundTime+0x120>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d202      	bcs.n	800b6fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b6f4:	230f      	movs	r3, #15
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	e062      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	4a3c      	ldr	r2, [pc, #240]	@ (800b7f0 <USB_SetTurnaroundTime+0x120>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d306      	bcc.n	800b710 <USB_SetTurnaroundTime+0x40>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4a3b      	ldr	r2, [pc, #236]	@ (800b7f4 <USB_SetTurnaroundTime+0x124>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d202      	bcs.n	800b710 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b70a:	230e      	movs	r3, #14
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	e057      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4a38      	ldr	r2, [pc, #224]	@ (800b7f4 <USB_SetTurnaroundTime+0x124>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d306      	bcc.n	800b726 <USB_SetTurnaroundTime+0x56>
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	4a37      	ldr	r2, [pc, #220]	@ (800b7f8 <USB_SetTurnaroundTime+0x128>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d202      	bcs.n	800b726 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b720:	230d      	movs	r3, #13
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e04c      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4a33      	ldr	r2, [pc, #204]	@ (800b7f8 <USB_SetTurnaroundTime+0x128>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d306      	bcc.n	800b73c <USB_SetTurnaroundTime+0x6c>
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	4a32      	ldr	r2, [pc, #200]	@ (800b7fc <USB_SetTurnaroundTime+0x12c>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d802      	bhi.n	800b73c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b736:	230c      	movs	r3, #12
 800b738:	617b      	str	r3, [r7, #20]
 800b73a:	e041      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4a2f      	ldr	r2, [pc, #188]	@ (800b7fc <USB_SetTurnaroundTime+0x12c>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d906      	bls.n	800b752 <USB_SetTurnaroundTime+0x82>
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	4a2e      	ldr	r2, [pc, #184]	@ (800b800 <USB_SetTurnaroundTime+0x130>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d802      	bhi.n	800b752 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b74c:	230b      	movs	r3, #11
 800b74e:	617b      	str	r3, [r7, #20]
 800b750:	e036      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	4a2a      	ldr	r2, [pc, #168]	@ (800b800 <USB_SetTurnaroundTime+0x130>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d906      	bls.n	800b768 <USB_SetTurnaroundTime+0x98>
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	4a29      	ldr	r2, [pc, #164]	@ (800b804 <USB_SetTurnaroundTime+0x134>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d802      	bhi.n	800b768 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b762:	230a      	movs	r3, #10
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	e02b      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4a26      	ldr	r2, [pc, #152]	@ (800b804 <USB_SetTurnaroundTime+0x134>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d906      	bls.n	800b77e <USB_SetTurnaroundTime+0xae>
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4a25      	ldr	r2, [pc, #148]	@ (800b808 <USB_SetTurnaroundTime+0x138>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d202      	bcs.n	800b77e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b778:	2309      	movs	r3, #9
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	e020      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4a21      	ldr	r2, [pc, #132]	@ (800b808 <USB_SetTurnaroundTime+0x138>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d306      	bcc.n	800b794 <USB_SetTurnaroundTime+0xc4>
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	4a20      	ldr	r2, [pc, #128]	@ (800b80c <USB_SetTurnaroundTime+0x13c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d802      	bhi.n	800b794 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b78e:	2308      	movs	r3, #8
 800b790:	617b      	str	r3, [r7, #20]
 800b792:	e015      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4a1d      	ldr	r2, [pc, #116]	@ (800b80c <USB_SetTurnaroundTime+0x13c>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d906      	bls.n	800b7aa <USB_SetTurnaroundTime+0xda>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	4a1c      	ldr	r2, [pc, #112]	@ (800b810 <USB_SetTurnaroundTime+0x140>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d202      	bcs.n	800b7aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7a4:	2307      	movs	r3, #7
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	e00a      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7aa:	2306      	movs	r3, #6
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e007      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d102      	bne.n	800b7bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b7b6:	2309      	movs	r3, #9
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	e001      	b.n	800b7c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b7bc:	2309      	movs	r3, #9
 800b7be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	029b      	lsls	r3, r3, #10
 800b7d4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b7d8:	431a      	orrs	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	371c      	adds	r7, #28
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	00d8acbf 	.word	0x00d8acbf
 800b7f0:	00e4e1c0 	.word	0x00e4e1c0
 800b7f4:	00f42400 	.word	0x00f42400
 800b7f8:	01067380 	.word	0x01067380
 800b7fc:	011a499f 	.word	0x011a499f
 800b800:	01312cff 	.word	0x01312cff
 800b804:	014ca43f 	.word	0x014ca43f
 800b808:	016e3600 	.word	0x016e3600
 800b80c:	01a6ab1f 	.word	0x01a6ab1f
 800b810:	01e84800 	.word	0x01e84800

0800b814 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f043 0201 	orr.w	r2, r3, #1
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b836:	b480      	push	{r7}
 800b838:	b083      	sub	sp, #12
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f023 0201 	bic.w	r2, r3, #1
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	460b      	mov	r3, r1
 800b862:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b874:	78fb      	ldrb	r3, [r7, #3]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d115      	bne.n	800b8a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b886:	200a      	movs	r0, #10
 800b888:	f7f6 feac 	bl	80025e4 <HAL_Delay>
      ms += 10U;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	330a      	adds	r3, #10
 800b890:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f001 f93f 	bl	800cb16 <USB_GetMode>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d01e      	beq.n	800b8dc <USB_SetCurrentMode+0x84>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2bc7      	cmp	r3, #199	@ 0xc7
 800b8a2:	d9f0      	bls.n	800b886 <USB_SetCurrentMode+0x2e>
 800b8a4:	e01a      	b.n	800b8dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8a6:	78fb      	ldrb	r3, [r7, #3]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d115      	bne.n	800b8d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b8b8:	200a      	movs	r0, #10
 800b8ba:	f7f6 fe93 	bl	80025e4 <HAL_Delay>
      ms += 10U;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	330a      	adds	r3, #10
 800b8c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 f926 	bl	800cb16 <USB_GetMode>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d005      	beq.n	800b8dc <USB_SetCurrentMode+0x84>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b8d4:	d9f0      	bls.n	800b8b8 <USB_SetCurrentMode+0x60>
 800b8d6:	e001      	b.n	800b8dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e005      	b.n	800b8e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2bc8      	cmp	r3, #200	@ 0xc8
 800b8e0:	d101      	bne.n	800b8e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b086      	sub	sp, #24
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b8fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b90a:	2300      	movs	r3, #0
 800b90c:	613b      	str	r3, [r7, #16]
 800b90e:	e009      	b.n	800b924 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	3340      	adds	r3, #64	@ 0x40
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4413      	add	r3, r2
 800b91a:	2200      	movs	r2, #0
 800b91c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3301      	adds	r3, #1
 800b922:	613b      	str	r3, [r7, #16]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	2b0e      	cmp	r3, #14
 800b928:	d9f2      	bls.n	800b910 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b92a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d11c      	bne.n	800b96c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b940:	f043 0302 	orr.w	r3, r3, #2
 800b944:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b94a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	e005      	b.n	800b978 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b970:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b97e:	461a      	mov	r2, r3
 800b980:	2300      	movs	r3, #0
 800b982:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b984:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d10d      	bne.n	800b9a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b98c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b990:	2b00      	cmp	r3, #0
 800b992:	d104      	bne.n	800b99e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b994:	2100      	movs	r1, #0
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f968 	bl	800bc6c <USB_SetDevSpeed>
 800b99c:	e008      	b.n	800b9b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b99e:	2101      	movs	r1, #1
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 f963 	bl	800bc6c <USB_SetDevSpeed>
 800b9a6:	e003      	b.n	800b9b0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9a8:	2103      	movs	r1, #3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f95e 	bl	800bc6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9b0:	2110      	movs	r1, #16
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f8fa 	bl	800bbac <USB_FlushTxFifo>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f924 	bl	800bc10 <USB_FlushRxFifo>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9d8:	461a      	mov	r2, r3
 800b9da:	2300      	movs	r3, #0
 800b9dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	613b      	str	r3, [r7, #16]
 800b9fa:	e043      	b.n	800ba84 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba12:	d118      	bne.n	800ba46 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10a      	bne.n	800ba30 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba26:	461a      	mov	r2, r3
 800ba28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	e013      	b.n	800ba58 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	015a      	lsls	r2, r3, #5
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4413      	add	r3, r2
 800ba38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	e008      	b.n	800ba58 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba52:	461a      	mov	r2, r3
 800ba54:	2300      	movs	r3, #0
 800ba56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba64:	461a      	mov	r2, r3
 800ba66:	2300      	movs	r3, #0
 800ba68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba76:	461a      	mov	r2, r3
 800ba78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ba7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	3301      	adds	r3, #1
 800ba82:	613b      	str	r3, [r7, #16]
 800ba84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ba88:	461a      	mov	r2, r3
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d3b5      	bcc.n	800b9fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba90:	2300      	movs	r3, #0
 800ba92:	613b      	str	r3, [r7, #16]
 800ba94:	e043      	b.n	800bb1e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800baa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baac:	d118      	bne.n	800bae0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac0:	461a      	mov	r2, r3
 800bac2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bac6:	6013      	str	r3, [r2, #0]
 800bac8:	e013      	b.n	800baf2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bad6:	461a      	mov	r2, r3
 800bad8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	e008      	b.n	800baf2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baec:	461a      	mov	r2, r3
 800baee:	2300      	movs	r3, #0
 800baf0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	015a      	lsls	r2, r3, #5
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	4413      	add	r3, r2
 800bafa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bafe:	461a      	mov	r2, r3
 800bb00:	2300      	movs	r3, #0
 800bb02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb10:	461a      	mov	r2, r3
 800bb12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	613b      	str	r3, [r7, #16]
 800bb1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bb22:	461a      	mov	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d3b5      	bcc.n	800ba96 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bb4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d105      	bne.n	800bb60 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	f043 0210 	orr.w	r2, r3, #16
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	699a      	ldr	r2, [r3, #24]
 800bb64:	4b0f      	ldr	r3, [pc, #60]	@ (800bba4 <USB_DevInit+0x2b4>)
 800bb66:	4313      	orrs	r3, r2
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	f043 0208 	orr.w	r2, r3, #8
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bb80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d105      	bne.n	800bb94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	699a      	ldr	r2, [r3, #24]
 800bb8c:	4b06      	ldr	r3, [pc, #24]	@ (800bba8 <USB_DevInit+0x2b8>)
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3718      	adds	r7, #24
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bba0:	b004      	add	sp, #16
 800bba2:	4770      	bx	lr
 800bba4:	803c3800 	.word	0x803c3800
 800bba8:	40000004 	.word	0x40000004

0800bbac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbc6:	d901      	bls.n	800bbcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e01b      	b.n	800bc04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	daf2      	bge.n	800bbba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	019b      	lsls	r3, r3, #6
 800bbdc:	f043 0220 	orr.w	r2, r3, #32
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbf0:	d901      	bls.n	800bbf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e006      	b.n	800bc04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f003 0320 	and.w	r3, r3, #32
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	d0f0      	beq.n	800bbe4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc28:	d901      	bls.n	800bc2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e018      	b.n	800bc60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	daf2      	bge.n	800bc1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc36:	2300      	movs	r3, #0
 800bc38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2210      	movs	r2, #16
 800bc3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	3301      	adds	r3, #1
 800bc44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc4c:	d901      	bls.n	800bc52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e006      	b.n	800bc60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	f003 0310 	and.w	r3, r3, #16
 800bc5a:	2b10      	cmp	r3, #16
 800bc5c:	d0f0      	beq.n	800bc40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	68f9      	ldr	r1, [r7, #12]
 800bc88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b087      	sub	sp, #28
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f003 0306 	and.w	r3, r3, #6
 800bcb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d102      	bne.n	800bcc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75fb      	strb	r3, [r7, #23]
 800bcc2:	e00a      	b.n	800bcda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d002      	beq.n	800bcd0 <USB_GetDevSpeed+0x32>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2b06      	cmp	r3, #6
 800bcce:	d102      	bne.n	800bcd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	75fb      	strb	r3, [r7, #23]
 800bcd4:	e001      	b.n	800bcda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bcd6:	230f      	movs	r3, #15
 800bcd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d139      	bne.n	800bd78 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd0a:	69da      	ldr	r2, [r3, #28]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	2101      	movs	r1, #1
 800bd16:	fa01 f303 	lsl.w	r3, r1, r3
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	68f9      	ldr	r1, [r7, #12]
 800bd1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd22:	4313      	orrs	r3, r2
 800bd24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	015a      	lsls	r2, r3, #5
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d153      	bne.n	800bde4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	791b      	ldrb	r3, [r3, #4]
 800bd56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	059b      	lsls	r3, r3, #22
 800bd5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd60:	431a      	orrs	r2, r3
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	0159      	lsls	r1, r3, #5
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	440b      	add	r3, r1
 800bd6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4b20      	ldr	r3, [pc, #128]	@ (800bdf4 <USB_ActivateEndpoint+0x10c>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	600b      	str	r3, [r1, #0]
 800bd76:	e035      	b.n	800bde4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd7e:	69da      	ldr	r2, [r3, #28]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	f003 030f 	and.w	r3, r3, #15
 800bd88:	2101      	movs	r1, #1
 800bd8a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd8e:	041b      	lsls	r3, r3, #16
 800bd90:	68f9      	ldr	r1, [r7, #12]
 800bd92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd96:	4313      	orrs	r3, r2
 800bd98:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	015a      	lsls	r2, r3, #5
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	4413      	add	r3, r2
 800bda2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d119      	bne.n	800bde4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	791b      	ldrb	r3, [r3, #4]
 800bdca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdcc:	430b      	orrs	r3, r1
 800bdce:	431a      	orrs	r2, r3
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	0159      	lsls	r1, r3, #5
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	440b      	add	r3, r1
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bddc:	4619      	mov	r1, r3
 800bdde:	4b05      	ldr	r3, [pc, #20]	@ (800bdf4 <USB_ActivateEndpoint+0x10c>)
 800bde0:	4313      	orrs	r3, r2
 800bde2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	10008000 	.word	0x10008000

0800bdf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	785b      	ldrb	r3, [r3, #1]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d161      	bne.n	800bed8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	015a      	lsls	r2, r3, #5
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be2a:	d11f      	bne.n	800be6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	0151      	lsls	r1, r2, #5
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	440a      	add	r2, r1
 800be42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	015a      	lsls	r2, r3, #5
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4413      	add	r3, r2
 800be54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	0151      	lsls	r1, r2, #5
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	440a      	add	r2, r1
 800be62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	f003 030f 	and.w	r3, r3, #15
 800be7c:	2101      	movs	r1, #1
 800be7e:	fa01 f303 	lsl.w	r3, r1, r3
 800be82:	b29b      	uxth	r3, r3
 800be84:	43db      	mvns	r3, r3
 800be86:	68f9      	ldr	r1, [r7, #12]
 800be88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be8c:	4013      	ands	r3, r2
 800be8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be96:	69da      	ldr	r2, [r3, #28]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f003 030f 	and.w	r3, r3, #15
 800bea0:	2101      	movs	r1, #1
 800bea2:	fa01 f303 	lsl.w	r3, r1, r3
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	43db      	mvns	r3, r3
 800beaa:	68f9      	ldr	r1, [r7, #12]
 800beac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800beb0:	4013      	ands	r3, r2
 800beb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	0159      	lsls	r1, r3, #5
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	440b      	add	r3, r1
 800beca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bece:	4619      	mov	r1, r3
 800bed0:	4b35      	ldr	r3, [pc, #212]	@ (800bfa8 <USB_DeactivateEndpoint+0x1b0>)
 800bed2:	4013      	ands	r3, r2
 800bed4:	600b      	str	r3, [r1, #0]
 800bed6:	e060      	b.n	800bf9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800beea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800beee:	d11f      	bne.n	800bf30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	0151      	lsls	r1, r2, #5
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	440a      	add	r2, r1
 800bf06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	0151      	lsls	r1, r2, #5
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	440a      	add	r2, r1
 800bf26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 030f 	and.w	r3, r3, #15
 800bf40:	2101      	movs	r1, #1
 800bf42:	fa01 f303 	lsl.w	r3, r1, r3
 800bf46:	041b      	lsls	r3, r3, #16
 800bf48:	43db      	mvns	r3, r3
 800bf4a:	68f9      	ldr	r1, [r7, #12]
 800bf4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf50:	4013      	ands	r3, r2
 800bf52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf5a:	69da      	ldr	r2, [r3, #28]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	f003 030f 	and.w	r3, r3, #15
 800bf64:	2101      	movs	r1, #1
 800bf66:	fa01 f303 	lsl.w	r3, r1, r3
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	43db      	mvns	r3, r3
 800bf6e:	68f9      	ldr	r1, [r7, #12]
 800bf70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf74:	4013      	ands	r3, r2
 800bf76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	0159      	lsls	r1, r3, #5
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	440b      	add	r3, r1
 800bf8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf92:	4619      	mov	r1, r3
 800bf94:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <USB_DeactivateEndpoint+0x1b4>)
 800bf96:	4013      	ands	r3, r2
 800bf98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	ec337800 	.word	0xec337800
 800bfac:	eff37800 	.word	0xeff37800

0800bfb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	@ 0x28
 800bfb4:	af02      	add	r7, sp, #8
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	f040 8185 	bne.w	800c2dc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d132      	bne.n	800c040 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	015a      	lsls	r2, r3, #5
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfe6:	691a      	ldr	r2, [r3, #16]
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	0159      	lsls	r1, r3, #5
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	440b      	add	r3, r1
 800bff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bff4:	4619      	mov	r1, r3
 800bff6:	4ba7      	ldr	r3, [pc, #668]	@ (800c294 <USB_EPStartXfer+0x2e4>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	0151      	lsls	r1, r2, #5
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	440a      	add	r2, r1
 800c012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c01a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c028:	691a      	ldr	r2, [r3, #16]
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	0159      	lsls	r1, r3, #5
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	440b      	add	r3, r1
 800c032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c036:	4619      	mov	r1, r3
 800c038:	4b97      	ldr	r3, [pc, #604]	@ (800c298 <USB_EPStartXfer+0x2e8>)
 800c03a:	4013      	ands	r3, r2
 800c03c:	610b      	str	r3, [r1, #16]
 800c03e:	e097      	b.n	800c170 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c04c:	691a      	ldr	r2, [r3, #16]
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	0159      	lsls	r1, r3, #5
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	440b      	add	r3, r1
 800c056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c05a:	4619      	mov	r1, r3
 800c05c:	4b8e      	ldr	r3, [pc, #568]	@ (800c298 <USB_EPStartXfer+0x2e8>)
 800c05e:	4013      	ands	r3, r2
 800c060:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	015a      	lsls	r2, r3, #5
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	4413      	add	r3, r2
 800c06a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c06e:	691a      	ldr	r2, [r3, #16]
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	0159      	lsls	r1, r3, #5
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	440b      	add	r3, r1
 800c078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c07c:	4619      	mov	r1, r3
 800c07e:	4b85      	ldr	r3, [pc, #532]	@ (800c294 <USB_EPStartXfer+0x2e4>)
 800c080:	4013      	ands	r3, r2
 800c082:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d11a      	bne.n	800c0c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	691a      	ldr	r2, [r3, #16]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	429a      	cmp	r2, r3
 800c094:	d903      	bls.n	800c09e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	689a      	ldr	r2, [r3, #8]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	015a      	lsls	r2, r3, #5
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	69ba      	ldr	r2, [r7, #24]
 800c0ae:	0151      	lsls	r1, r2, #5
 800c0b0:	69fa      	ldr	r2, [r7, #28]
 800c0b2:	440a      	add	r2, r1
 800c0b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c0bc:	6113      	str	r3, [r2, #16]
 800c0be:	e044      	b.n	800c14a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	691a      	ldr	r2, [r3, #16]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	1e5a      	subs	r2, r3, #1
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0d4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	015a      	lsls	r2, r3, #5
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	4413      	add	r3, r2
 800c0de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0e2:	691a      	ldr	r2, [r3, #16]
 800c0e4:	8afb      	ldrh	r3, [r7, #22]
 800c0e6:	04d9      	lsls	r1, r3, #19
 800c0e8:	4b6c      	ldr	r3, [pc, #432]	@ (800c29c <USB_EPStartXfer+0x2ec>)
 800c0ea:	400b      	ands	r3, r1
 800c0ec:	69b9      	ldr	r1, [r7, #24]
 800c0ee:	0148      	lsls	r0, r1, #5
 800c0f0:	69f9      	ldr	r1, [r7, #28]
 800c0f2:	4401      	add	r1, r0
 800c0f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	791b      	ldrb	r3, [r3, #4]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d122      	bne.n	800c14a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	015a      	lsls	r2, r3, #5
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	4413      	add	r3, r2
 800c10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	0151      	lsls	r1, r2, #5
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	440a      	add	r2, r1
 800c11a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c11e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c122:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	015a      	lsls	r2, r3, #5
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	4413      	add	r3, r2
 800c12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c130:	691a      	ldr	r2, [r3, #16]
 800c132:	8afb      	ldrh	r3, [r7, #22]
 800c134:	075b      	lsls	r3, r3, #29
 800c136:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c13a:	69b9      	ldr	r1, [r7, #24]
 800c13c:	0148      	lsls	r0, r1, #5
 800c13e:	69f9      	ldr	r1, [r7, #28]
 800c140:	4401      	add	r1, r0
 800c142:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c146:	4313      	orrs	r3, r2
 800c148:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c156:	691a      	ldr	r2, [r3, #16]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c160:	69b9      	ldr	r1, [r7, #24]
 800c162:	0148      	lsls	r0, r1, #5
 800c164:	69f9      	ldr	r1, [r7, #28]
 800c166:	4401      	add	r1, r0
 800c168:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c16c:	4313      	orrs	r3, r2
 800c16e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d14b      	bne.n	800c20e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d009      	beq.n	800c192 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	015a      	lsls	r2, r3, #5
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	4413      	add	r3, r2
 800c186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c18a:	461a      	mov	r2, r3
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	69db      	ldr	r3, [r3, #28]
 800c190:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	791b      	ldrb	r3, [r3, #4]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d128      	bne.n	800c1ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d110      	bne.n	800c1cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	015a      	lsls	r2, r3, #5
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	0151      	lsls	r1, r2, #5
 800c1bc:	69fa      	ldr	r2, [r7, #28]
 800c1be:	440a      	add	r2, r1
 800c1c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	e00f      	b.n	800c1ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	015a      	lsls	r2, r3, #5
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	0151      	lsls	r1, r2, #5
 800c1de:	69fa      	ldr	r2, [r7, #28]
 800c1e0:	440a      	add	r2, r1
 800c1e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	69ba      	ldr	r2, [r7, #24]
 800c1fc:	0151      	lsls	r1, r2, #5
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	440a      	add	r2, r1
 800c202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c206:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	e169      	b.n	800c4e2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	69ba      	ldr	r2, [r7, #24]
 800c21e:	0151      	lsls	r1, r2, #5
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	440a      	add	r2, r1
 800c224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c228:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c22c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	791b      	ldrb	r3, [r3, #4]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d015      	beq.n	800c262 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 8151 	beq.w	800c4e2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	f003 030f 	and.w	r3, r3, #15
 800c250:	2101      	movs	r1, #1
 800c252:	fa01 f303 	lsl.w	r3, r1, r3
 800c256:	69f9      	ldr	r1, [r7, #28]
 800c258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c25c:	4313      	orrs	r3, r2
 800c25e:	634b      	str	r3, [r1, #52]	@ 0x34
 800c260:	e13f      	b.n	800c4e2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d116      	bne.n	800c2a0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	0151      	lsls	r1, r2, #5
 800c284:	69fa      	ldr	r2, [r7, #28]
 800c286:	440a      	add	r2, r1
 800c288:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c28c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	e015      	b.n	800c2c0 <USB_EPStartXfer+0x310>
 800c294:	e007ffff 	.word	0xe007ffff
 800c298:	fff80000 	.word	0xfff80000
 800c29c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	015a      	lsls	r2, r3, #5
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	69ba      	ldr	r2, [r7, #24]
 800c2b0:	0151      	lsls	r1, r2, #5
 800c2b2:	69fa      	ldr	r2, [r7, #28]
 800c2b4:	440a      	add	r2, r1
 800c2b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c2be:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	68d9      	ldr	r1, [r3, #12]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	781a      	ldrb	r2, [r3, #0]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	b298      	uxth	r0, r3
 800c2ce:	79fb      	ldrb	r3, [r7, #7]
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 f9b9 	bl	800c64c <USB_WritePacket>
 800c2da:	e102      	b.n	800c4e2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	015a      	lsls	r2, r3, #5
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2e8:	691a      	ldr	r2, [r3, #16]
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	0159      	lsls	r1, r3, #5
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	440b      	add	r3, r1
 800c2f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	4b7c      	ldr	r3, [pc, #496]	@ (800c4ec <USB_EPStartXfer+0x53c>)
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	015a      	lsls	r2, r3, #5
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	4413      	add	r3, r2
 800c306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c30a:	691a      	ldr	r2, [r3, #16]
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	0159      	lsls	r1, r3, #5
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	440b      	add	r3, r1
 800c314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c318:	4619      	mov	r1, r3
 800c31a:	4b75      	ldr	r3, [pc, #468]	@ (800c4f0 <USB_EPStartXfer+0x540>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d12f      	bne.n	800c386 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	689a      	ldr	r2, [r3, #8]
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c34a:	691a      	ldr	r2, [r3, #16]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c354:	69b9      	ldr	r1, [r7, #24]
 800c356:	0148      	lsls	r0, r1, #5
 800c358:	69f9      	ldr	r1, [r7, #28]
 800c35a:	4401      	add	r1, r0
 800c35c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c360:	4313      	orrs	r3, r2
 800c362:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	015a      	lsls	r2, r3, #5
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	4413      	add	r3, r2
 800c36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	69ba      	ldr	r2, [r7, #24]
 800c374:	0151      	lsls	r1, r2, #5
 800c376:	69fa      	ldr	r2, [r7, #28]
 800c378:	440a      	add	r2, r1
 800c37a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c37e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c382:	6113      	str	r3, [r2, #16]
 800c384:	e05f      	b.n	800c446 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d123      	bne.n	800c3d6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c39a:	691a      	ldr	r2, [r3, #16]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3a4:	69b9      	ldr	r1, [r7, #24]
 800c3a6:	0148      	lsls	r0, r1, #5
 800c3a8:	69f9      	ldr	r1, [r7, #28]
 800c3aa:	4401      	add	r1, r0
 800c3ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	015a      	lsls	r2, r3, #5
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	69ba      	ldr	r2, [r7, #24]
 800c3c4:	0151      	lsls	r1, r2, #5
 800c3c6:	69fa      	ldr	r2, [r7, #28]
 800c3c8:	440a      	add	r2, r1
 800c3ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c3d2:	6113      	str	r3, [r2, #16]
 800c3d4:	e037      	b.n	800c446 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	691a      	ldr	r2, [r3, #16]
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	4413      	add	r3, r2
 800c3e0:	1e5a      	subs	r2, r3, #1
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ea:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	8afa      	ldrh	r2, [r7, #22]
 800c3f2:	fb03 f202 	mul.w	r2, r3, r2
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	015a      	lsls	r2, r3, #5
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	4413      	add	r3, r2
 800c402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c406:	691a      	ldr	r2, [r3, #16]
 800c408:	8afb      	ldrh	r3, [r7, #22]
 800c40a:	04d9      	lsls	r1, r3, #19
 800c40c:	4b39      	ldr	r3, [pc, #228]	@ (800c4f4 <USB_EPStartXfer+0x544>)
 800c40e:	400b      	ands	r3, r1
 800c410:	69b9      	ldr	r1, [r7, #24]
 800c412:	0148      	lsls	r0, r1, #5
 800c414:	69f9      	ldr	r1, [r7, #28]
 800c416:	4401      	add	r1, r0
 800c418:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c41c:	4313      	orrs	r3, r2
 800c41e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	015a      	lsls	r2, r3, #5
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	4413      	add	r3, r2
 800c428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c42c:	691a      	ldr	r2, [r3, #16]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c436:	69b9      	ldr	r1, [r7, #24]
 800c438:	0148      	lsls	r0, r1, #5
 800c43a:	69f9      	ldr	r1, [r7, #28]
 800c43c:	4401      	add	r1, r0
 800c43e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c442:	4313      	orrs	r3, r2
 800c444:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d10d      	bne.n	800c468 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d009      	beq.n	800c468 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	68d9      	ldr	r1, [r3, #12]
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c464:	460a      	mov	r2, r1
 800c466:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	791b      	ldrb	r3, [r3, #4]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d128      	bne.n	800c4c2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d110      	bne.n	800c4a2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	69ba      	ldr	r2, [r7, #24]
 800c490:	0151      	lsls	r1, r2, #5
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	440a      	add	r2, r1
 800c496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c49a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	e00f      	b.n	800c4c2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	69ba      	ldr	r2, [r7, #24]
 800c4b2:	0151      	lsls	r1, r2, #5
 800c4b4:	69fa      	ldr	r2, [r7, #28]
 800c4b6:	440a      	add	r2, r1
 800c4b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4c0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	69ba      	ldr	r2, [r7, #24]
 800c4d2:	0151      	lsls	r1, r2, #5
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c4e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3720      	adds	r7, #32
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	fff80000 	.word	0xfff80000
 800c4f0:	e007ffff 	.word	0xe007ffff
 800c4f4:	1ff80000 	.word	0x1ff80000

0800c4f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	785b      	ldrb	r3, [r3, #1]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d14a      	bne.n	800c5ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c52a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c52e:	f040 8086 	bne.w	800c63e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	015a      	lsls	r2, r3, #5
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	4413      	add	r3, r2
 800c53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	7812      	ldrb	r2, [r2, #0]
 800c546:	0151      	lsls	r1, r2, #5
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	440a      	add	r2, r1
 800c54c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c550:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c554:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	7812      	ldrb	r2, [r2, #0]
 800c56a:	0151      	lsls	r1, r2, #5
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	440a      	add	r2, r1
 800c570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c574:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c578:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3301      	adds	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c586:	4293      	cmp	r3, r2
 800c588:	d902      	bls.n	800c590 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	75fb      	strb	r3, [r7, #23]
          break;
 800c58e:	e056      	b.n	800c63e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	015a      	lsls	r2, r3, #5
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	4413      	add	r3, r2
 800c59a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5a8:	d0e7      	beq.n	800c57a <USB_EPStopXfer+0x82>
 800c5aa:	e048      	b.n	800c63e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	015a      	lsls	r2, r3, #5
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5c4:	d13b      	bne.n	800c63e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	7812      	ldrb	r2, [r2, #0]
 800c5da:	0151      	lsls	r1, r2, #5
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	440a      	add	r2, r1
 800c5e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c5e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c5e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	7812      	ldrb	r2, [r2, #0]
 800c5fe:	0151      	lsls	r1, r2, #5
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	440a      	add	r2, r1
 800c604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c608:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c60c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3301      	adds	r3, #1
 800c612:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d902      	bls.n	800c624 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	75fb      	strb	r3, [r7, #23]
          break;
 800c622:	e00c      	b.n	800c63e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	015a      	lsls	r2, r3, #5
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	4413      	add	r3, r2
 800c62e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c63c:	d0e7      	beq.n	800c60e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c640:	4618      	mov	r0, r3
 800c642:	371c      	adds	r7, #28
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b089      	sub	sp, #36	@ 0x24
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	4611      	mov	r1, r2
 800c658:	461a      	mov	r2, r3
 800c65a:	460b      	mov	r3, r1
 800c65c:	71fb      	strb	r3, [r7, #7]
 800c65e:	4613      	mov	r3, r2
 800c660:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c66a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d123      	bne.n	800c6ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c672:	88bb      	ldrh	r3, [r7, #4]
 800c674:	3303      	adds	r3, #3
 800c676:	089b      	lsrs	r3, r3, #2
 800c678:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c67a:	2300      	movs	r3, #0
 800c67c:	61bb      	str	r3, [r7, #24]
 800c67e:	e018      	b.n	800c6b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c680:	79fb      	ldrb	r3, [r7, #7]
 800c682:	031a      	lsls	r2, r3, #12
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	4413      	add	r3, r2
 800c688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c68c:	461a      	mov	r2, r3
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	3301      	adds	r3, #1
 800c698:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	3301      	adds	r3, #1
 800c69e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	61bb      	str	r3, [r7, #24]
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d3e2      	bcc.n	800c680 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3724      	adds	r7, #36	@ 0x24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b08b      	sub	sp, #44	@ 0x2c
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c6de:	88fb      	ldrh	r3, [r7, #6]
 800c6e0:	089b      	lsrs	r3, r3, #2
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c6e6:	88fb      	ldrh	r3, [r7, #6]
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	623b      	str	r3, [r7, #32]
 800c6f2:	e014      	b.n	800c71e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800c700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c702:	3301      	adds	r3, #1
 800c704:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	3301      	adds	r3, #1
 800c70a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70e:	3301      	adds	r3, #1
 800c710:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c714:	3301      	adds	r3, #1
 800c716:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	3301      	adds	r3, #1
 800c71c:	623b      	str	r3, [r7, #32]
 800c71e:	6a3a      	ldr	r2, [r7, #32]
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	429a      	cmp	r2, r3
 800c724:	d3e6      	bcc.n	800c6f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c726:	8bfb      	ldrh	r3, [r7, #30]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d01e      	beq.n	800c76a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c72c:	2300      	movs	r3, #0
 800c72e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c736:	461a      	mov	r2, r3
 800c738:	f107 0310 	add.w	r3, r7, #16
 800c73c:	6812      	ldr	r2, [r2, #0]
 800c73e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	b2db      	uxtb	r3, r3
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	fa22 f303 	lsr.w	r3, r2, r3
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c750:	701a      	strb	r2, [r3, #0]
      i++;
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	3301      	adds	r3, #1
 800c756:	623b      	str	r3, [r7, #32]
      pDest++;
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	3301      	adds	r3, #1
 800c75c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c75e:	8bfb      	ldrh	r3, [r7, #30]
 800c760:	3b01      	subs	r3, #1
 800c762:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c764:	8bfb      	ldrh	r3, [r7, #30]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1ea      	bne.n	800c740 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	372c      	adds	r7, #44	@ 0x2c
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	785b      	ldrb	r3, [r3, #1]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d12c      	bne.n	800c7ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	db12      	blt.n	800c7cc <USB_EPSetStall+0x54>
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00f      	beq.n	800c7cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	015a      	lsls	r2, r3, #5
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	0151      	lsls	r1, r2, #5
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	440a      	add	r2, r1
 800c7c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c7ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	015a      	lsls	r2, r3, #5
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	0151      	lsls	r1, r2, #5
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	440a      	add	r2, r1
 800c7e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	e02b      	b.n	800c846 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	db12      	blt.n	800c826 <USB_EPSetStall+0xae>
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00f      	beq.n	800c826 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	015a      	lsls	r2, r3, #5
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	4413      	add	r3, r2
 800c80e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	0151      	lsls	r1, r2, #5
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	440a      	add	r2, r1
 800c81c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c820:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c824:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	015a      	lsls	r2, r3, #5
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	4413      	add	r3, r2
 800c82e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	0151      	lsls	r1, r2, #5
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	440a      	add	r2, r1
 800c83c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c844:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	785b      	ldrb	r3, [r3, #1]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d128      	bne.n	800c8c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	4413      	add	r3, r2
 800c878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	0151      	lsls	r1, r2, #5
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	440a      	add	r2, r1
 800c886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c88a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c88e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	791b      	ldrb	r3, [r3, #4]
 800c894:	2b03      	cmp	r3, #3
 800c896:	d003      	beq.n	800c8a0 <USB_EPClearStall+0x4c>
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	791b      	ldrb	r3, [r3, #4]
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d138      	bne.n	800c912 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	015a      	lsls	r2, r3, #5
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	0151      	lsls	r1, r2, #5
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	440a      	add	r2, r1
 800c8b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	e027      	b.n	800c912 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	0151      	lsls	r1, r2, #5
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	440a      	add	r2, r1
 800c8d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	791b      	ldrb	r3, [r3, #4]
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	d003      	beq.n	800c8f2 <USB_EPClearStall+0x9e>
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	791b      	ldrb	r3, [r3, #4]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d10f      	bne.n	800c912 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	015a      	lsls	r2, r3, #5
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	0151      	lsls	r1, r2, #5
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	440a      	add	r2, r1
 800c908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c90c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c910:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c93e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c942:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	78fb      	ldrb	r3, [r7, #3]
 800c94e:	011b      	lsls	r3, r3, #4
 800c950:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c954:	68f9      	ldr	r1, [r7, #12]
 800c956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c95a:	4313      	orrs	r3, r2
 800c95c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c986:	f023 0303 	bic.w	r3, r3, #3
 800c98a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c99a:	f023 0302 	bic.w	r3, r3, #2
 800c99e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b085      	sub	sp, #20
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c9c8:	f023 0303 	bic.w	r3, r3, #3
 800c9cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9dc:	f043 0302 	orr.w	r3, r3, #2
 800c9e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	695b      	ldr	r3, [r3, #20]
 800c9fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	4013      	ands	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca08:	68fb      	ldr	r3, [r7, #12]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b085      	sub	sp, #20
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca32:	69db      	ldr	r3, [r3, #28]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	4013      	ands	r3, r2
 800ca38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	0c1b      	lsrs	r3, r3, #16
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b085      	sub	sp, #20
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca66:	69db      	ldr	r3, [r3, #28]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	b29b      	uxth	r3, r3
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b085      	sub	sp, #20
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	460b      	mov	r3, r1
 800ca88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ca8e:	78fb      	ldrb	r3, [r7, #3]
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	4013      	ands	r3, r2
 800caaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800caac:	68bb      	ldr	r3, [r7, #8]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3714      	adds	r7, #20
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800caba:	b480      	push	{r7}
 800cabc:	b087      	sub	sp, #28
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	460b      	mov	r3, r1
 800cac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cadc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cade:	78fb      	ldrb	r3, [r7, #3]
 800cae0:	f003 030f 	and.w	r3, r3, #15
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	fa22 f303 	lsr.w	r3, r2, r3
 800caea:	01db      	lsls	r3, r3, #7
 800caec:	b2db      	uxtb	r3, r3
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800caf4:	78fb      	ldrb	r3, [r7, #3]
 800caf6:	015a      	lsls	r2, r3, #5
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	4413      	add	r3, r2
 800cafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	4013      	ands	r3, r2
 800cb06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb08:	68bb      	ldr	r3, [r7, #8]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	371c      	adds	r7, #28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	f003 0301 	and.w	r3, r3, #1
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4b09      	ldr	r3, [pc, #36]	@ (800cb78 <USB_ActivateSetup+0x44>)
 800cb52:	4013      	ands	r3, r2
 800cb54:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3714      	adds	r7, #20
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	fffff800 	.word	0xfffff800

0800cb7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b087      	sub	sp, #28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	460b      	mov	r3, r1
 800cb86:	607a      	str	r2, [r7, #4]
 800cb88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	333c      	adds	r3, #60	@ 0x3c
 800cb92:	3304      	adds	r3, #4
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	4a26      	ldr	r2, [pc, #152]	@ (800cc34 <USB_EP0_OutStart+0xb8>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d90a      	bls.n	800cbb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbb0:	d101      	bne.n	800cbb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e037      	b.n	800cc26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	697a      	ldr	r2, [r7, #20]
 800cbcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cbd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbdc:	691b      	ldr	r3, [r3, #16]
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbe4:	f043 0318 	orr.w	r3, r3, #24
 800cbe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbf8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cbfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cbfe:	7afb      	ldrb	r3, [r7, #11]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d10f      	bne.n	800cc24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cc22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	371c      	adds	r7, #28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	4f54300a 	.word	0x4f54300a

0800cc38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3301      	adds	r3, #1
 800cc48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc50:	d901      	bls.n	800cc56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e01b      	b.n	800cc8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	daf2      	bge.n	800cc44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	f043 0201 	orr.w	r2, r3, #1
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3301      	adds	r3, #1
 800cc72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc7a:	d901      	bls.n	800cc80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	e006      	b.n	800cc8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d0f0      	beq.n	800cc6e <USB_CoreReset+0x36>

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
	...

0800cc9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cca0:	4904      	ldr	r1, [pc, #16]	@ (800ccb4 <MX_FATFS_Init+0x18>)
 800cca2:	4805      	ldr	r0, [pc, #20]	@ (800ccb8 <MX_FATFS_Init+0x1c>)
 800cca4:	f002 f86a 	bl	800ed7c <FATFS_LinkDriver>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	461a      	mov	r2, r3
 800ccac:	4b03      	ldr	r3, [pc, #12]	@ (800ccbc <MX_FATFS_Init+0x20>)
 800ccae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ccb0:	bf00      	nop
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	24000740 	.word	0x24000740
 800ccb8:	24000014 	.word	0x24000014
 800ccbc:	2400073c 	.word	0x2400073c

0800ccc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7f5 f8ad 	bl	8001e2c <USER_SPI_initialize>
 800ccd2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800cce6:	79fb      	ldrb	r3, [r7, #7]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7f5 f98b 	bl	8002004 <USER_SPI_status>
 800ccee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	607a      	str	r2, [r7, #4]
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	4603      	mov	r3, r0
 800cd06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800cd08:	7bf8      	ldrb	r0, [r7, #15]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	68b9      	ldr	r1, [r7, #8]
 800cd10:	f7f5 f98e 	bl	8002030 <USER_SPI_read>
 800cd14:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	603b      	str	r3, [r7, #0]
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800cd2e:	7bf8      	ldrb	r0, [r7, #15]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	f7f5 f9e1 	bl	80020fc <USER_SPI_write>
 800cd3a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	603a      	str	r2, [r7, #0]
 800cd4e:	71fb      	strb	r3, [r7, #7]
 800cd50:	460b      	mov	r3, r1
 800cd52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800cd54:	79b9      	ldrb	r1, [r7, #6]
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7f5 fa4a 	bl	80021f4 <USER_SPI_ioctl>
 800cd60:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cd78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cd7c:	f003 ff78 	bl	8010c70 <USBD_static_malloc>
 800cd80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d109      	bne.n	800cd9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	32b0      	adds	r2, #176	@ 0xb0
 800cd92:	2100      	movs	r1, #0
 800cd94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd98:	2302      	movs	r3, #2
 800cd9a:	e0d4      	b.n	800cf46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cda0:	2100      	movs	r1, #0
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f003 ffa8 	bl	8010cf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	32b0      	adds	r2, #176	@ 0xb0
 800cdb2:	68f9      	ldr	r1, [r7, #12]
 800cdb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	32b0      	adds	r2, #176	@ 0xb0
 800cdc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	7c1b      	ldrb	r3, [r3, #16]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d138      	bne.n	800ce46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cdd4:	4b5e      	ldr	r3, [pc, #376]	@ (800cf50 <USBD_CDC_Init+0x1e4>)
 800cdd6:	7819      	ldrb	r1, [r3, #0]
 800cdd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cddc:	2202      	movs	r2, #2
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f003 fe23 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cde4:	4b5a      	ldr	r3, [pc, #360]	@ (800cf50 <USBD_CDC_Init+0x1e4>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	f003 020f 	and.w	r2, r3, #15
 800cdec:	6879      	ldr	r1, [r7, #4]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	440b      	add	r3, r1
 800cdf8:	3324      	adds	r3, #36	@ 0x24
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdfe:	4b55      	ldr	r3, [pc, #340]	@ (800cf54 <USBD_CDC_Init+0x1e8>)
 800ce00:	7819      	ldrb	r1, [r3, #0]
 800ce02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce06:	2202      	movs	r2, #2
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f003 fe0e 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce0e:	4b51      	ldr	r3, [pc, #324]	@ (800cf54 <USBD_CDC_Init+0x1e8>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	f003 020f 	and.w	r2, r3, #15
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	440b      	add	r3, r1
 800ce22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce26:	2201      	movs	r2, #1
 800ce28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ce2a:	4b4b      	ldr	r3, [pc, #300]	@ (800cf58 <USBD_CDC_Init+0x1ec>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	f003 020f 	and.w	r2, r3, #15
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	4613      	mov	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	440b      	add	r3, r1
 800ce3e:	3326      	adds	r3, #38	@ 0x26
 800ce40:	2210      	movs	r2, #16
 800ce42:	801a      	strh	r2, [r3, #0]
 800ce44:	e035      	b.n	800ceb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce46:	4b42      	ldr	r3, [pc, #264]	@ (800cf50 <USBD_CDC_Init+0x1e4>)
 800ce48:	7819      	ldrb	r1, [r3, #0]
 800ce4a:	2340      	movs	r3, #64	@ 0x40
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f003 fdeb 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce54:	4b3e      	ldr	r3, [pc, #248]	@ (800cf50 <USBD_CDC_Init+0x1e4>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	f003 020f 	and.w	r2, r3, #15
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	440b      	add	r3, r1
 800ce68:	3324      	adds	r3, #36	@ 0x24
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce6e:	4b39      	ldr	r3, [pc, #228]	@ (800cf54 <USBD_CDC_Init+0x1e8>)
 800ce70:	7819      	ldrb	r1, [r3, #0]
 800ce72:	2340      	movs	r3, #64	@ 0x40
 800ce74:	2202      	movs	r2, #2
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f003 fdd7 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce7c:	4b35      	ldr	r3, [pc, #212]	@ (800cf54 <USBD_CDC_Init+0x1e8>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	f003 020f 	and.w	r2, r3, #15
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	4613      	mov	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	440b      	add	r3, r1
 800ce90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce94:	2201      	movs	r2, #1
 800ce96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce98:	4b2f      	ldr	r3, [pc, #188]	@ (800cf58 <USBD_CDC_Init+0x1ec>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	f003 020f 	and.w	r2, r3, #15
 800cea0:	6879      	ldr	r1, [r7, #4]
 800cea2:	4613      	mov	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	440b      	add	r3, r1
 800ceac:	3326      	adds	r3, #38	@ 0x26
 800ceae:	2210      	movs	r2, #16
 800ceb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ceb2:	4b29      	ldr	r3, [pc, #164]	@ (800cf58 <USBD_CDC_Init+0x1ec>)
 800ceb4:	7819      	ldrb	r1, [r3, #0]
 800ceb6:	2308      	movs	r3, #8
 800ceb8:	2203      	movs	r2, #3
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f003 fdb5 	bl	8010a2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cec0:	4b25      	ldr	r3, [pc, #148]	@ (800cf58 <USBD_CDC_Init+0x1ec>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	f003 020f 	and.w	r2, r3, #15
 800cec8:	6879      	ldr	r1, [r7, #4]
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	440b      	add	r3, r1
 800ced4:	3324      	adds	r3, #36	@ 0x24
 800ced6:	2201      	movs	r2, #1
 800ced8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	33b0      	adds	r3, #176	@ 0xb0
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cf10:	2302      	movs	r3, #2
 800cf12:	e018      	b.n	800cf46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7c1b      	ldrb	r3, [r3, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d10a      	bne.n	800cf32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf54 <USBD_CDC_Init+0x1e8>)
 800cf1e:	7819      	ldrb	r1, [r3, #0]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f003 fe6c 	bl	8010c08 <USBD_LL_PrepareReceive>
 800cf30:	e008      	b.n	800cf44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf32:	4b08      	ldr	r3, [pc, #32]	@ (800cf54 <USBD_CDC_Init+0x1e8>)
 800cf34:	7819      	ldrb	r1, [r3, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf3c:	2340      	movs	r3, #64	@ 0x40
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f003 fe62 	bl	8010c08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	240000af 	.word	0x240000af
 800cf54:	240000b0 	.word	0x240000b0
 800cf58:	240000b1 	.word	0x240000b1

0800cf5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf68:	4b3a      	ldr	r3, [pc, #232]	@ (800d054 <USBD_CDC_DeInit+0xf8>)
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f003 fd81 	bl	8010a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cf74:	4b37      	ldr	r3, [pc, #220]	@ (800d054 <USBD_CDC_DeInit+0xf8>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	f003 020f 	and.w	r2, r3, #15
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	440b      	add	r3, r1
 800cf88:	3324      	adds	r3, #36	@ 0x24
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf8e:	4b32      	ldr	r3, [pc, #200]	@ (800d058 <USBD_CDC_DeInit+0xfc>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f003 fd6e 	bl	8010a76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf9a:	4b2f      	ldr	r3, [pc, #188]	@ (800d058 <USBD_CDC_DeInit+0xfc>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	f003 020f 	and.w	r2, r3, #15
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	440b      	add	r3, r1
 800cfae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cfb6:	4b29      	ldr	r3, [pc, #164]	@ (800d05c <USBD_CDC_DeInit+0x100>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f003 fd5a 	bl	8010a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cfc2:	4b26      	ldr	r3, [pc, #152]	@ (800d05c <USBD_CDC_DeInit+0x100>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	f003 020f 	and.w	r2, r3, #15
 800cfca:	6879      	ldr	r1, [r7, #4]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4413      	add	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	440b      	add	r3, r1
 800cfd6:	3324      	adds	r3, #36	@ 0x24
 800cfd8:	2200      	movs	r2, #0
 800cfda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cfdc:	4b1f      	ldr	r3, [pc, #124]	@ (800d05c <USBD_CDC_DeInit+0x100>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	f003 020f 	and.w	r2, r3, #15
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4413      	add	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	440b      	add	r3, r1
 800cff0:	3326      	adds	r3, #38	@ 0x26
 800cff2:	2200      	movs	r2, #0
 800cff4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	32b0      	adds	r2, #176	@ 0xb0
 800d000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d01f      	beq.n	800d048 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	33b0      	adds	r3, #176	@ 0xb0
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	32b0      	adds	r2, #176	@ 0xb0
 800d026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f003 fe2e 	bl	8010c8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	32b0      	adds	r2, #176	@ 0xb0
 800d03a:	2100      	movs	r1, #0
 800d03c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	240000af 	.word	0x240000af
 800d058:	240000b0 	.word	0x240000b0
 800d05c:	240000b1 	.word	0x240000b1

0800d060 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	32b0      	adds	r2, #176	@ 0xb0
 800d074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d078:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d07e:	2300      	movs	r3, #0
 800d080:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d08c:	2303      	movs	r3, #3
 800d08e:	e0bf      	b.n	800d210 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d050      	beq.n	800d13e <USBD_CDC_Setup+0xde>
 800d09c:	2b20      	cmp	r3, #32
 800d09e:	f040 80af 	bne.w	800d200 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	88db      	ldrh	r3, [r3, #6]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d03a      	beq.n	800d120 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	b25b      	sxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	da1b      	bge.n	800d0ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	33b0      	adds	r3, #176	@ 0xb0
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d0ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	88d2      	ldrh	r2, [r2, #6]
 800d0d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	88db      	ldrh	r3, [r3, #6]
 800d0d6:	2b07      	cmp	r3, #7
 800d0d8:	bf28      	it	cs
 800d0da:	2307      	movcs	r3, #7
 800d0dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	89fa      	ldrh	r2, [r7, #14]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 fd7d 	bl	800ebe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d0ea:	e090      	b.n	800d20e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	785a      	ldrb	r2, [r3, #1]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	88db      	ldrh	r3, [r3, #6]
 800d0fa:	2b3f      	cmp	r3, #63	@ 0x3f
 800d0fc:	d803      	bhi.n	800d106 <USBD_CDC_Setup+0xa6>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	88db      	ldrh	r3, [r3, #6]
 800d102:	b2da      	uxtb	r2, r3
 800d104:	e000      	b.n	800d108 <USBD_CDC_Setup+0xa8>
 800d106:	2240      	movs	r2, #64	@ 0x40
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d10e:	6939      	ldr	r1, [r7, #16]
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d116:	461a      	mov	r2, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f001 fd8f 	bl	800ec3c <USBD_CtlPrepareRx>
      break;
 800d11e:	e076      	b.n	800d20e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	33b0      	adds	r3, #176	@ 0xb0
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	7850      	ldrb	r0, [r2, #1]
 800d136:	2200      	movs	r2, #0
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	4798      	blx	r3
      break;
 800d13c:	e067      	b.n	800d20e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	785b      	ldrb	r3, [r3, #1]
 800d142:	2b0b      	cmp	r3, #11
 800d144:	d851      	bhi.n	800d1ea <USBD_CDC_Setup+0x18a>
 800d146:	a201      	add	r2, pc, #4	@ (adr r2, 800d14c <USBD_CDC_Setup+0xec>)
 800d148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14c:	0800d17d 	.word	0x0800d17d
 800d150:	0800d1f9 	.word	0x0800d1f9
 800d154:	0800d1eb 	.word	0x0800d1eb
 800d158:	0800d1eb 	.word	0x0800d1eb
 800d15c:	0800d1eb 	.word	0x0800d1eb
 800d160:	0800d1eb 	.word	0x0800d1eb
 800d164:	0800d1eb 	.word	0x0800d1eb
 800d168:	0800d1eb 	.word	0x0800d1eb
 800d16c:	0800d1eb 	.word	0x0800d1eb
 800d170:	0800d1eb 	.word	0x0800d1eb
 800d174:	0800d1a7 	.word	0x0800d1a7
 800d178:	0800d1d1 	.word	0x0800d1d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b03      	cmp	r3, #3
 800d186:	d107      	bne.n	800d198 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d188:	f107 030a 	add.w	r3, r7, #10
 800d18c:	2202      	movs	r2, #2
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f001 fd27 	bl	800ebe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d196:	e032      	b.n	800d1fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f001 fca5 	bl	800eaea <USBD_CtlError>
            ret = USBD_FAIL;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	75fb      	strb	r3, [r7, #23]
          break;
 800d1a4:	e02b      	b.n	800d1fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d107      	bne.n	800d1c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1b2:	f107 030d 	add.w	r3, r7, #13
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f001 fd12 	bl	800ebe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1c0:	e01d      	b.n	800d1fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d1c2:	6839      	ldr	r1, [r7, #0]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f001 fc90 	bl	800eaea <USBD_CtlError>
            ret = USBD_FAIL;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	75fb      	strb	r3, [r7, #23]
          break;
 800d1ce:	e016      	b.n	800d1fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b03      	cmp	r3, #3
 800d1da:	d00f      	beq.n	800d1fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d1dc:	6839      	ldr	r1, [r7, #0]
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f001 fc83 	bl	800eaea <USBD_CtlError>
            ret = USBD_FAIL;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1e8:	e008      	b.n	800d1fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 fc7c 	bl	800eaea <USBD_CtlError>
          ret = USBD_FAIL;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	75fb      	strb	r3, [r7, #23]
          break;
 800d1f6:	e002      	b.n	800d1fe <USBD_CDC_Setup+0x19e>
          break;
 800d1f8:	bf00      	nop
 800d1fa:	e008      	b.n	800d20e <USBD_CDC_Setup+0x1ae>
          break;
 800d1fc:	bf00      	nop
      }
      break;
 800d1fe:	e006      	b.n	800d20e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f001 fc71 	bl	800eaea <USBD_CtlError>
      ret = USBD_FAIL;
 800d208:	2303      	movs	r3, #3
 800d20a:	75fb      	strb	r3, [r7, #23]
      break;
 800d20c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	460b      	mov	r3, r1
 800d222:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d22a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	32b0      	adds	r2, #176	@ 0xb0
 800d236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d101      	bne.n	800d242 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d23e:	2303      	movs	r3, #3
 800d240:	e065      	b.n	800d30e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	32b0      	adds	r2, #176	@ 0xb0
 800d24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d250:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d252:	78fb      	ldrb	r3, [r7, #3]
 800d254:	f003 020f 	and.w	r2, r3, #15
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	4613      	mov	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	440b      	add	r3, r1
 800d264:	3318      	adds	r3, #24
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d02f      	beq.n	800d2cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d26c:	78fb      	ldrb	r3, [r7, #3]
 800d26e:	f003 020f 	and.w	r2, r3, #15
 800d272:	6879      	ldr	r1, [r7, #4]
 800d274:	4613      	mov	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	3318      	adds	r3, #24
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	78fb      	ldrb	r3, [r7, #3]
 800d284:	f003 010f 	and.w	r1, r3, #15
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	460b      	mov	r3, r1
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	440b      	add	r3, r1
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4403      	add	r3, r0
 800d294:	331c      	adds	r3, #28
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	fbb2 f1f3 	udiv	r1, r2, r3
 800d29c:	fb01 f303 	mul.w	r3, r1, r3
 800d2a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d112      	bne.n	800d2cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d2a6:	78fb      	ldrb	r3, [r7, #3]
 800d2a8:	f003 020f 	and.w	r2, r3, #15
 800d2ac:	6879      	ldr	r1, [r7, #4]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	440b      	add	r3, r1
 800d2b8:	3318      	adds	r3, #24
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d2be:	78f9      	ldrb	r1, [r7, #3]
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f003 fc7e 	bl	8010bc6 <USBD_LL_Transmit>
 800d2ca:	e01f      	b.n	800d30c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	33b0      	adds	r3, #176	@ 0xb0
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d010      	beq.n	800d30c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	33b0      	adds	r3, #176	@ 0xb0
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d308:	78fa      	ldrb	r2, [r7, #3]
 800d30a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	460b      	mov	r3, r1
 800d320:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	32b0      	adds	r2, #176	@ 0xb0
 800d32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d330:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	32b0      	adds	r2, #176	@ 0xb0
 800d33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d101      	bne.n	800d348 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d344:	2303      	movs	r3, #3
 800d346:	e01a      	b.n	800d37e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d348:	78fb      	ldrb	r3, [r7, #3]
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f003 fc7c 	bl	8010c4a <USBD_LL_GetRxDataSize>
 800d352:	4602      	mov	r2, r0
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	33b0      	adds	r3, #176	@ 0xb0
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d378:	4611      	mov	r1, r2
 800d37a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b084      	sub	sp, #16
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	32b0      	adds	r2, #176	@ 0xb0
 800d398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d39c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e024      	b.n	800d3f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	33b0      	adds	r3, #176	@ 0xb0
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4413      	add	r3, r2
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d019      	beq.n	800d3f0 <USBD_CDC_EP0_RxReady+0x6a>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d3c2:	2bff      	cmp	r3, #255	@ 0xff
 800d3c4:	d014      	beq.n	800d3f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	33b0      	adds	r3, #176	@ 0xb0
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d3de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	22ff      	movs	r2, #255	@ 0xff
 800d3ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
	...

0800d3fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d404:	2182      	movs	r1, #130	@ 0x82
 800d406:	4818      	ldr	r0, [pc, #96]	@ (800d468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d408:	f000 fd0f 	bl	800de2a <USBD_GetEpDesc>
 800d40c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d40e:	2101      	movs	r1, #1
 800d410:	4815      	ldr	r0, [pc, #84]	@ (800d468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d412:	f000 fd0a 	bl	800de2a <USBD_GetEpDesc>
 800d416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d418:	2181      	movs	r1, #129	@ 0x81
 800d41a:	4813      	ldr	r0, [pc, #76]	@ (800d468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d41c:	f000 fd05 	bl	800de2a <USBD_GetEpDesc>
 800d420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	2210      	movs	r2, #16
 800d42c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d006      	beq.n	800d442 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	2200      	movs	r2, #0
 800d438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d43c:	711a      	strb	r2, [r3, #4]
 800d43e:	2200      	movs	r2, #0
 800d440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d006      	beq.n	800d456 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d450:	711a      	strb	r2, [r3, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2243      	movs	r2, #67	@ 0x43
 800d45a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d45c:	4b02      	ldr	r3, [pc, #8]	@ (800d468 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	2400006c 	.word	0x2400006c

0800d46c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d474:	2182      	movs	r1, #130	@ 0x82
 800d476:	4818      	ldr	r0, [pc, #96]	@ (800d4d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d478:	f000 fcd7 	bl	800de2a <USBD_GetEpDesc>
 800d47c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d47e:	2101      	movs	r1, #1
 800d480:	4815      	ldr	r0, [pc, #84]	@ (800d4d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d482:	f000 fcd2 	bl	800de2a <USBD_GetEpDesc>
 800d486:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d488:	2181      	movs	r1, #129	@ 0x81
 800d48a:	4813      	ldr	r0, [pc, #76]	@ (800d4d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d48c:	f000 fccd 	bl	800de2a <USBD_GetEpDesc>
 800d490:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	2210      	movs	r2, #16
 800d49c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d006      	beq.n	800d4b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	711a      	strb	r2, [r3, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f042 0202 	orr.w	r2, r2, #2
 800d4b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d006      	beq.n	800d4c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	711a      	strb	r2, [r3, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f042 0202 	orr.w	r2, r2, #2
 800d4c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2243      	movs	r2, #67	@ 0x43
 800d4ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4cc:	4b02      	ldr	r3, [pc, #8]	@ (800d4d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3718      	adds	r7, #24
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	2400006c 	.word	0x2400006c

0800d4dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b086      	sub	sp, #24
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4e4:	2182      	movs	r1, #130	@ 0x82
 800d4e6:	4818      	ldr	r0, [pc, #96]	@ (800d548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4e8:	f000 fc9f 	bl	800de2a <USBD_GetEpDesc>
 800d4ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	4815      	ldr	r0, [pc, #84]	@ (800d548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4f2:	f000 fc9a 	bl	800de2a <USBD_GetEpDesc>
 800d4f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4f8:	2181      	movs	r1, #129	@ 0x81
 800d4fa:	4813      	ldr	r0, [pc, #76]	@ (800d548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4fc:	f000 fc95 	bl	800de2a <USBD_GetEpDesc>
 800d500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d002      	beq.n	800d50e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	2210      	movs	r2, #16
 800d50c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d006      	beq.n	800d522 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2200      	movs	r2, #0
 800d518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d51c:	711a      	strb	r2, [r3, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d006      	beq.n	800d536 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d530:	711a      	strb	r2, [r3, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2243      	movs	r2, #67	@ 0x43
 800d53a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d53c:	4b02      	ldr	r3, [pc, #8]	@ (800d548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3718      	adds	r7, #24
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	2400006c 	.word	0x2400006c

0800d54c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	220a      	movs	r2, #10
 800d558:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d55a:	4b03      	ldr	r3, [pc, #12]	@ (800d568 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	24000028 	.word	0x24000028

0800d56c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d101      	bne.n	800d580 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d57c:	2303      	movs	r3, #3
 800d57e:	e009      	b.n	800d594 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	33b0      	adds	r3, #176	@ 0xb0
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	32b0      	adds	r2, #176	@ 0xb0
 800d5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e008      	b.n	800d5d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	371c      	adds	r7, #28
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	32b0      	adds	r2, #176	@ 0xb0
 800d5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d101      	bne.n	800d608 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d604:	2303      	movs	r3, #3
 800d606:	e004      	b.n	800d612 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
	...

0800d620 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	32b0      	adds	r2, #176	@ 0xb0
 800d632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d636:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	32b0      	adds	r2, #176	@ 0xb0
 800d642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d64a:	2303      	movs	r3, #3
 800d64c:	e018      	b.n	800d680 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	7c1b      	ldrb	r3, [r3, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10a      	bne.n	800d66c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d656:	4b0c      	ldr	r3, [pc, #48]	@ (800d688 <USBD_CDC_ReceivePacket+0x68>)
 800d658:	7819      	ldrb	r1, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f003 facf 	bl	8010c08 <USBD_LL_PrepareReceive>
 800d66a:	e008      	b.n	800d67e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d66c:	4b06      	ldr	r3, [pc, #24]	@ (800d688 <USBD_CDC_ReceivePacket+0x68>)
 800d66e:	7819      	ldrb	r1, [r3, #0]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d676:	2340      	movs	r3, #64	@ 0x40
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f003 fac5 	bl	8010c08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3710      	adds	r7, #16
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	240000b0 	.word	0x240000b0

0800d68c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e01f      	b.n	800d6e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d003      	beq.n	800d6ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	79fa      	ldrb	r2, [r7, #7]
 800d6d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f003 f93b 	bl	8010954 <USBD_LL_Init>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d700:	2303      	movs	r3, #3
 800d702:	e025      	b.n	800d750 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	683a      	ldr	r2, [r7, #0]
 800d708:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	32ae      	adds	r2, #174	@ 0xae
 800d716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00f      	beq.n	800d740 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	32ae      	adds	r2, #174	@ 0xae
 800d72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d730:	f107 020e 	add.w	r2, r7, #14
 800d734:	4610      	mov	r0, r2
 800d736:	4798      	blx	r3
 800d738:	4602      	mov	r2, r0
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f003 f947 	bl	80109f4 <USBD_LL_Start>
 800d766:	4603      	mov	r3, r0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d778:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
 800d78e:	460b      	mov	r3, r1
 800d790:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d009      	beq.n	800d7b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	78fa      	ldrb	r2, [r7, #3]
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	4798      	blx	r3
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b084      	sub	sp, #16
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	78fa      	ldrb	r2, [r7, #3]
 800d7d8:	4611      	mov	r1, r2
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	4798      	blx	r3
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d001      	beq.n	800d7e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	4618      	mov	r0, r3
 800d806:	f001 f936 	bl	800ea76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d818:	461a      	mov	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d826:	f003 031f 	and.w	r3, r3, #31
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d01a      	beq.n	800d864 <USBD_LL_SetupStage+0x72>
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d822      	bhi.n	800d878 <USBD_LL_SetupStage+0x86>
 800d832:	2b00      	cmp	r3, #0
 800d834:	d002      	beq.n	800d83c <USBD_LL_SetupStage+0x4a>
 800d836:	2b01      	cmp	r3, #1
 800d838:	d00a      	beq.n	800d850 <USBD_LL_SetupStage+0x5e>
 800d83a:	e01d      	b.n	800d878 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fb63 	bl	800df10 <USBD_StdDevReq>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73fb      	strb	r3, [r7, #15]
      break;
 800d84e:	e020      	b.n	800d892 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d856:	4619      	mov	r1, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fbcb 	bl	800dff4 <USBD_StdItfReq>
 800d85e:	4603      	mov	r3, r0
 800d860:	73fb      	strb	r3, [r7, #15]
      break;
 800d862:	e016      	b.n	800d892 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d86a:	4619      	mov	r1, r3
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 fc2d 	bl	800e0cc <USBD_StdEPReq>
 800d872:	4603      	mov	r3, r0
 800d874:	73fb      	strb	r3, [r7, #15]
      break;
 800d876:	e00c      	b.n	800d892 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d87e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d882:	b2db      	uxtb	r3, r3
 800d884:	4619      	mov	r1, r3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f003 f914 	bl	8010ab4 <USBD_LL_StallEP>
 800d88c:	4603      	mov	r3, r0
 800d88e:	73fb      	strb	r3, [r7, #15]
      break;
 800d890:	bf00      	nop
  }

  return ret;
 800d892:	7bfb      	ldrb	r3, [r7, #15]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	607a      	str	r2, [r7, #4]
 800d8a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d8ae:	7afb      	ldrb	r3, [r7, #11]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d16e      	bne.n	800d992 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d8ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	f040 8098 	bne.w	800d9f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	689a      	ldr	r2, [r3, #8]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d913      	bls.n	800d8fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	689a      	ldr	r2, [r3, #8]
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	1ad2      	subs	r2, r2, r3
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	68da      	ldr	r2, [r3, #12]
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	bf28      	it	cs
 800d8ee:	4613      	movcs	r3, r2
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	6879      	ldr	r1, [r7, #4]
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f001 f9be 	bl	800ec76 <USBD_CtlContinueRx>
 800d8fa:	e07d      	b.n	800d9f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d902:	f003 031f 	and.w	r3, r3, #31
 800d906:	2b02      	cmp	r3, #2
 800d908:	d014      	beq.n	800d934 <USBD_LL_DataOutStage+0x98>
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d81d      	bhi.n	800d94a <USBD_LL_DataOutStage+0xae>
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d002      	beq.n	800d918 <USBD_LL_DataOutStage+0x7c>
 800d912:	2b01      	cmp	r3, #1
 800d914:	d003      	beq.n	800d91e <USBD_LL_DataOutStage+0x82>
 800d916:	e018      	b.n	800d94a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d918:	2300      	movs	r3, #0
 800d91a:	75bb      	strb	r3, [r7, #22]
            break;
 800d91c:	e018      	b.n	800d950 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d924:	b2db      	uxtb	r3, r3
 800d926:	4619      	mov	r1, r3
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f000 fa64 	bl	800ddf6 <USBD_CoreFindIF>
 800d92e:	4603      	mov	r3, r0
 800d930:	75bb      	strb	r3, [r7, #22]
            break;
 800d932:	e00d      	b.n	800d950 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	4619      	mov	r1, r3
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f000 fa66 	bl	800de10 <USBD_CoreFindEP>
 800d944:	4603      	mov	r3, r0
 800d946:	75bb      	strb	r3, [r7, #22]
            break;
 800d948:	e002      	b.n	800d950 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d94a:	2300      	movs	r3, #0
 800d94c:	75bb      	strb	r3, [r7, #22]
            break;
 800d94e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d950:	7dbb      	ldrb	r3, [r7, #22]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d119      	bne.n	800d98a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d113      	bne.n	800d98a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d962:	7dba      	ldrb	r2, [r7, #22]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	32ae      	adds	r2, #174	@ 0xae
 800d968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00b      	beq.n	800d98a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d972:	7dba      	ldrb	r2, [r7, #22]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d97a:	7dba      	ldrb	r2, [r7, #22]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	32ae      	adds	r2, #174	@ 0xae
 800d980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d984:	691b      	ldr	r3, [r3, #16]
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f001 f984 	bl	800ec98 <USBD_CtlSendStatus>
 800d990:	e032      	b.n	800d9f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d992:	7afb      	ldrb	r3, [r7, #11]
 800d994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	4619      	mov	r1, r3
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 fa37 	bl	800de10 <USBD_CoreFindEP>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9a6:	7dbb      	ldrb	r3, [r7, #22]
 800d9a8:	2bff      	cmp	r3, #255	@ 0xff
 800d9aa:	d025      	beq.n	800d9f8 <USBD_LL_DataOutStage+0x15c>
 800d9ac:	7dbb      	ldrb	r3, [r7, #22]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d122      	bne.n	800d9f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d117      	bne.n	800d9ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d9be:	7dba      	ldrb	r2, [r7, #22]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	32ae      	adds	r2, #174	@ 0xae
 800d9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c8:	699b      	ldr	r3, [r3, #24]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00f      	beq.n	800d9ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d9ce:	7dba      	ldrb	r2, [r7, #22]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d9d6:	7dba      	ldrb	r2, [r7, #22]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	32ae      	adds	r2, #174	@ 0xae
 800d9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	7afa      	ldrb	r2, [r7, #11]
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	4798      	blx	r3
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d9f4:	7dfb      	ldrb	r3, [r7, #23]
 800d9f6:	e000      	b.n	800d9fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3718      	adds	r7, #24
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b086      	sub	sp, #24
 800da06:	af00      	add	r7, sp, #0
 800da08:	60f8      	str	r0, [r7, #12]
 800da0a:	460b      	mov	r3, r1
 800da0c:	607a      	str	r2, [r7, #4]
 800da0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da10:	7afb      	ldrb	r3, [r7, #11]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d16f      	bne.n	800daf6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	3314      	adds	r3, #20
 800da1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800da22:	2b02      	cmp	r3, #2
 800da24:	d15a      	bne.n	800dadc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	689a      	ldr	r2, [r3, #8]
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d914      	bls.n	800da5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	689a      	ldr	r2, [r3, #8]
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	1ad2      	subs	r2, r2, r3
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	461a      	mov	r2, r3
 800da46:	6879      	ldr	r1, [r7, #4]
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f001 f8e6 	bl	800ec1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da4e:	2300      	movs	r3, #0
 800da50:	2200      	movs	r2, #0
 800da52:	2100      	movs	r1, #0
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f003 f8d7 	bl	8010c08 <USBD_LL_PrepareReceive>
 800da5a:	e03f      	b.n	800dadc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	68da      	ldr	r2, [r3, #12]
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	429a      	cmp	r2, r3
 800da66:	d11c      	bne.n	800daa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da70:	429a      	cmp	r2, r3
 800da72:	d316      	bcc.n	800daa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da7e:	429a      	cmp	r2, r3
 800da80:	d20f      	bcs.n	800daa2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da82:	2200      	movs	r2, #0
 800da84:	2100      	movs	r1, #0
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f001 f8c7 	bl	800ec1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da94:	2300      	movs	r3, #0
 800da96:	2200      	movs	r2, #0
 800da98:	2100      	movs	r1, #0
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f003 f8b4 	bl	8010c08 <USBD_LL_PrepareReceive>
 800daa0:	e01c      	b.n	800dadc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d10f      	bne.n	800dace <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d009      	beq.n	800dace <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dace:	2180      	movs	r1, #128	@ 0x80
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f002 ffef 	bl	8010ab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f001 f8f1 	bl	800ecbe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d03a      	beq.n	800db5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f7ff fe42 	bl	800d770 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800daf4:	e032      	b.n	800db5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800daf6:	7afb      	ldrb	r3, [r7, #11]
 800daf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	4619      	mov	r1, r3
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f000 f985 	bl	800de10 <USBD_CoreFindEP>
 800db06:	4603      	mov	r3, r0
 800db08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	2bff      	cmp	r3, #255	@ 0xff
 800db0e:	d025      	beq.n	800db5c <USBD_LL_DataInStage+0x15a>
 800db10:	7dfb      	ldrb	r3, [r7, #23]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d122      	bne.n	800db5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b03      	cmp	r3, #3
 800db20:	d11c      	bne.n	800db5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db22:	7dfa      	ldrb	r2, [r7, #23]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	32ae      	adds	r2, #174	@ 0xae
 800db28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d014      	beq.n	800db5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db32:	7dfa      	ldrb	r2, [r7, #23]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db3a:	7dfa      	ldrb	r2, [r7, #23]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	32ae      	adds	r2, #174	@ 0xae
 800db40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	7afa      	ldrb	r2, [r7, #11]
 800db48:	4611      	mov	r1, r2
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	4798      	blx	r3
 800db4e:	4603      	mov	r3, r0
 800db50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db52:	7dbb      	ldrb	r3, [r7, #22]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800db58:	7dbb      	ldrb	r3, [r7, #22]
 800db5a:	e000      	b.n	800db5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3718      	adds	r7, #24
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b084      	sub	sp, #16
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d014      	beq.n	800dbcc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00e      	beq.n	800dbcc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	6852      	ldr	r2, [r2, #4]
 800dbba:	b2d2      	uxtb	r2, r2
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	4798      	blx	r3
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbcc:	2340      	movs	r3, #64	@ 0x40
 800dbce:	2200      	movs	r2, #0
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f002 ff29 	bl	8010a2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2240      	movs	r2, #64	@ 0x40
 800dbe4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbe8:	2340      	movs	r3, #64	@ 0x40
 800dbea:	2200      	movs	r2, #0
 800dbec:	2180      	movs	r1, #128	@ 0x80
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f002 ff1b 	bl	8010a2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2240      	movs	r2, #64	@ 0x40
 800dbfe:	621a      	str	r2, [r3, #32]

  return ret;
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	460b      	mov	r3, r1
 800dc14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	78fa      	ldrb	r2, [r7, #3]
 800dc1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b04      	cmp	r3, #4
 800dc3c:	d006      	beq.n	800dc4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2204      	movs	r2, #4
 800dc50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b083      	sub	sp, #12
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b04      	cmp	r3, #4
 800dc74:	d106      	bne.n	800dc84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b03      	cmp	r3, #3
 800dca4:	d110      	bne.n	800dcc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00b      	beq.n	800dcc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcb6:	69db      	ldr	r3, [r3, #28]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d005      	beq.n	800dcc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	460b      	mov	r3, r1
 800dcdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	32ae      	adds	r2, #174	@ 0xae
 800dce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e01c      	b.n	800dd2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b03      	cmp	r3, #3
 800dcfe:	d115      	bne.n	800dd2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	32ae      	adds	r2, #174	@ 0xae
 800dd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd0e:	6a1b      	ldr	r3, [r3, #32]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00b      	beq.n	800dd2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	32ae      	adds	r2, #174	@ 0xae
 800dd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	78fa      	ldrb	r2, [r7, #3]
 800dd26:	4611      	mov	r1, r2
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	460b      	mov	r3, r1
 800dd40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	32ae      	adds	r2, #174	@ 0xae
 800dd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d101      	bne.n	800dd58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd54:	2303      	movs	r3, #3
 800dd56:	e01c      	b.n	800dd92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	2b03      	cmp	r3, #3
 800dd62:	d115      	bne.n	800dd90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	32ae      	adds	r2, #174	@ 0xae
 800dd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00b      	beq.n	800dd90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	32ae      	adds	r2, #174	@ 0xae
 800dd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd88:	78fa      	ldrb	r2, [r7, #3]
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b083      	sub	sp, #12
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00e      	beq.n	800ddec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	6852      	ldr	r2, [r2, #4]
 800ddda:	b2d2      	uxtb	r2, r2
 800dddc:	4611      	mov	r1, r2
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	4798      	blx	r3
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dde8:	2303      	movs	r3, #3
 800ddea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b083      	sub	sp, #12
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
 800ddfe:	460b      	mov	r3, r1
 800de00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de04:	4618      	mov	r0, r3
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de1e:	4618      	mov	r0, r3
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b086      	sub	sp, #24
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	460b      	mov	r3, r1
 800de34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de3e:	2300      	movs	r3, #0
 800de40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	885b      	ldrh	r3, [r3, #2]
 800de46:	b29b      	uxth	r3, r3
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	7812      	ldrb	r2, [r2, #0]
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d91f      	bls.n	800de90 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de56:	e013      	b.n	800de80 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de58:	f107 030a 	add.w	r3, r7, #10
 800de5c:	4619      	mov	r1, r3
 800de5e:	6978      	ldr	r0, [r7, #20]
 800de60:	f000 f81b 	bl	800de9a <USBD_GetNextDesc>
 800de64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	785b      	ldrb	r3, [r3, #1]
 800de6a:	2b05      	cmp	r3, #5
 800de6c:	d108      	bne.n	800de80 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	789b      	ldrb	r3, [r3, #2]
 800de76:	78fa      	ldrb	r2, [r7, #3]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d008      	beq.n	800de8e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800de7c:	2300      	movs	r3, #0
 800de7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	885b      	ldrh	r3, [r3, #2]
 800de84:	b29a      	uxth	r2, r3
 800de86:	897b      	ldrh	r3, [r7, #10]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d8e5      	bhi.n	800de58 <USBD_GetEpDesc+0x2e>
 800de8c:	e000      	b.n	800de90 <USBD_GetEpDesc+0x66>
          break;
 800de8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800de90:	693b      	ldr	r3, [r7, #16]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b085      	sub	sp, #20
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	7812      	ldrb	r2, [r2, #0]
 800deb0:	4413      	add	r3, r2
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4413      	add	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dec4:	68fb      	ldr	r3, [r7, #12]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ded2:	b480      	push	{r7}
 800ded4:	b087      	sub	sp, #28
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	3301      	adds	r3, #1
 800dee8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800def0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800def4:	021b      	lsls	r3, r3, #8
 800def6:	b21a      	sxth	r2, r3
 800def8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800defc:	4313      	orrs	r3, r2
 800defe:	b21b      	sxth	r3, r3
 800df00:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800df02:	89fb      	ldrh	r3, [r7, #14]
}
 800df04:	4618      	mov	r0, r3
 800df06:	371c      	adds	r7, #28
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df26:	2b40      	cmp	r3, #64	@ 0x40
 800df28:	d005      	beq.n	800df36 <USBD_StdDevReq+0x26>
 800df2a:	2b40      	cmp	r3, #64	@ 0x40
 800df2c:	d857      	bhi.n	800dfde <USBD_StdDevReq+0xce>
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00f      	beq.n	800df52 <USBD_StdDevReq+0x42>
 800df32:	2b20      	cmp	r3, #32
 800df34:	d153      	bne.n	800dfde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	32ae      	adds	r2, #174	@ 0xae
 800df40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	4798      	blx	r3
 800df4c:	4603      	mov	r3, r0
 800df4e:	73fb      	strb	r3, [r7, #15]
      break;
 800df50:	e04a      	b.n	800dfe8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	785b      	ldrb	r3, [r3, #1]
 800df56:	2b09      	cmp	r3, #9
 800df58:	d83b      	bhi.n	800dfd2 <USBD_StdDevReq+0xc2>
 800df5a:	a201      	add	r2, pc, #4	@ (adr r2, 800df60 <USBD_StdDevReq+0x50>)
 800df5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df60:	0800dfb5 	.word	0x0800dfb5
 800df64:	0800dfc9 	.word	0x0800dfc9
 800df68:	0800dfd3 	.word	0x0800dfd3
 800df6c:	0800dfbf 	.word	0x0800dfbf
 800df70:	0800dfd3 	.word	0x0800dfd3
 800df74:	0800df93 	.word	0x0800df93
 800df78:	0800df89 	.word	0x0800df89
 800df7c:	0800dfd3 	.word	0x0800dfd3
 800df80:	0800dfab 	.word	0x0800dfab
 800df84:	0800df9d 	.word	0x0800df9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fa3c 	bl	800e408 <USBD_GetDescriptor>
          break;
 800df90:	e024      	b.n	800dfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df92:	6839      	ldr	r1, [r7, #0]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 fbcb 	bl	800e730 <USBD_SetAddress>
          break;
 800df9a:	e01f      	b.n	800dfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df9c:	6839      	ldr	r1, [r7, #0]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 fc0a 	bl	800e7b8 <USBD_SetConfig>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	73fb      	strb	r3, [r7, #15]
          break;
 800dfa8:	e018      	b.n	800dfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fcad 	bl	800e90c <USBD_GetConfig>
          break;
 800dfb2:	e013      	b.n	800dfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fcde 	bl	800e978 <USBD_GetStatus>
          break;
 800dfbc:	e00e      	b.n	800dfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dfbe:	6839      	ldr	r1, [r7, #0]
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fd0d 	bl	800e9e0 <USBD_SetFeature>
          break;
 800dfc6:	e009      	b.n	800dfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fd31 	bl	800ea32 <USBD_ClrFeature>
          break;
 800dfd0:	e004      	b.n	800dfdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dfd2:	6839      	ldr	r1, [r7, #0]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 fd88 	bl	800eaea <USBD_CtlError>
          break;
 800dfda:	bf00      	nop
      }
      break;
 800dfdc:	e004      	b.n	800dfe8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 fd82 	bl	800eaea <USBD_CtlError>
      break;
 800dfe6:	bf00      	nop
  }

  return ret;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop

0800dff4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e00a:	2b40      	cmp	r3, #64	@ 0x40
 800e00c:	d005      	beq.n	800e01a <USBD_StdItfReq+0x26>
 800e00e:	2b40      	cmp	r3, #64	@ 0x40
 800e010:	d852      	bhi.n	800e0b8 <USBD_StdItfReq+0xc4>
 800e012:	2b00      	cmp	r3, #0
 800e014:	d001      	beq.n	800e01a <USBD_StdItfReq+0x26>
 800e016:	2b20      	cmp	r3, #32
 800e018:	d14e      	bne.n	800e0b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e020:	b2db      	uxtb	r3, r3
 800e022:	3b01      	subs	r3, #1
 800e024:	2b02      	cmp	r3, #2
 800e026:	d840      	bhi.n	800e0aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	889b      	ldrh	r3, [r3, #4]
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d836      	bhi.n	800e0a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	889b      	ldrh	r3, [r3, #4]
 800e036:	b2db      	uxtb	r3, r3
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff fedb 	bl	800ddf6 <USBD_CoreFindIF>
 800e040:	4603      	mov	r3, r0
 800e042:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e044:	7bbb      	ldrb	r3, [r7, #14]
 800e046:	2bff      	cmp	r3, #255	@ 0xff
 800e048:	d01d      	beq.n	800e086 <USBD_StdItfReq+0x92>
 800e04a:	7bbb      	ldrb	r3, [r7, #14]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d11a      	bne.n	800e086 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e050:	7bba      	ldrb	r2, [r7, #14]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	32ae      	adds	r2, #174	@ 0xae
 800e056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00f      	beq.n	800e080 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e060:	7bba      	ldrb	r2, [r7, #14]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e068:	7bba      	ldrb	r2, [r7, #14]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	32ae      	adds	r2, #174	@ 0xae
 800e06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	6839      	ldr	r1, [r7, #0]
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	4798      	blx	r3
 800e07a:	4603      	mov	r3, r0
 800e07c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e07e:	e004      	b.n	800e08a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e080:	2303      	movs	r3, #3
 800e082:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e084:	e001      	b.n	800e08a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e086:	2303      	movs	r3, #3
 800e088:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	88db      	ldrh	r3, [r3, #6]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d110      	bne.n	800e0b4 <USBD_StdItfReq+0xc0>
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10d      	bne.n	800e0b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fdfd 	bl	800ec98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e09e:	e009      	b.n	800e0b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fd21 	bl	800eaea <USBD_CtlError>
          break;
 800e0a8:	e004      	b.n	800e0b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fd1c 	bl	800eaea <USBD_CtlError>
          break;
 800e0b2:	e000      	b.n	800e0b6 <USBD_StdItfReq+0xc2>
          break;
 800e0b4:	bf00      	nop
      }
      break;
 800e0b6:	e004      	b.n	800e0c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fd15 	bl	800eaea <USBD_CtlError>
      break;
 800e0c0:	bf00      	nop
  }

  return ret;
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	889b      	ldrh	r3, [r3, #4]
 800e0de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0e8:	2b40      	cmp	r3, #64	@ 0x40
 800e0ea:	d007      	beq.n	800e0fc <USBD_StdEPReq+0x30>
 800e0ec:	2b40      	cmp	r3, #64	@ 0x40
 800e0ee:	f200 817f 	bhi.w	800e3f0 <USBD_StdEPReq+0x324>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d02a      	beq.n	800e14c <USBD_StdEPReq+0x80>
 800e0f6:	2b20      	cmp	r3, #32
 800e0f8:	f040 817a 	bne.w	800e3f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e0fc:	7bbb      	ldrb	r3, [r7, #14]
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff fe85 	bl	800de10 <USBD_CoreFindEP>
 800e106:	4603      	mov	r3, r0
 800e108:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e10a:	7b7b      	ldrb	r3, [r7, #13]
 800e10c:	2bff      	cmp	r3, #255	@ 0xff
 800e10e:	f000 8174 	beq.w	800e3fa <USBD_StdEPReq+0x32e>
 800e112:	7b7b      	ldrb	r3, [r7, #13]
 800e114:	2b00      	cmp	r3, #0
 800e116:	f040 8170 	bne.w	800e3fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e11a:	7b7a      	ldrb	r2, [r7, #13]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e122:	7b7a      	ldrb	r2, [r7, #13]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	32ae      	adds	r2, #174	@ 0xae
 800e128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f000 8163 	beq.w	800e3fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e134:	7b7a      	ldrb	r2, [r7, #13]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	32ae      	adds	r2, #174	@ 0xae
 800e13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	4798      	blx	r3
 800e146:	4603      	mov	r3, r0
 800e148:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e14a:	e156      	b.n	800e3fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	785b      	ldrb	r3, [r3, #1]
 800e150:	2b03      	cmp	r3, #3
 800e152:	d008      	beq.n	800e166 <USBD_StdEPReq+0x9a>
 800e154:	2b03      	cmp	r3, #3
 800e156:	f300 8145 	bgt.w	800e3e4 <USBD_StdEPReq+0x318>
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 809b 	beq.w	800e296 <USBD_StdEPReq+0x1ca>
 800e160:	2b01      	cmp	r3, #1
 800e162:	d03c      	beq.n	800e1de <USBD_StdEPReq+0x112>
 800e164:	e13e      	b.n	800e3e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d002      	beq.n	800e178 <USBD_StdEPReq+0xac>
 800e172:	2b03      	cmp	r3, #3
 800e174:	d016      	beq.n	800e1a4 <USBD_StdEPReq+0xd8>
 800e176:	e02c      	b.n	800e1d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e178:	7bbb      	ldrb	r3, [r7, #14]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00d      	beq.n	800e19a <USBD_StdEPReq+0xce>
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
 800e180:	2b80      	cmp	r3, #128	@ 0x80
 800e182:	d00a      	beq.n	800e19a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e184:	7bbb      	ldrb	r3, [r7, #14]
 800e186:	4619      	mov	r1, r3
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f002 fc93 	bl	8010ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e18e:	2180      	movs	r1, #128	@ 0x80
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f002 fc8f 	bl	8010ab4 <USBD_LL_StallEP>
 800e196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e198:	e020      	b.n	800e1dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 fca4 	bl	800eaea <USBD_CtlError>
              break;
 800e1a2:	e01b      	b.n	800e1dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	885b      	ldrh	r3, [r3, #2]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10e      	bne.n	800e1ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1ac:	7bbb      	ldrb	r3, [r7, #14]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00b      	beq.n	800e1ca <USBD_StdEPReq+0xfe>
 800e1b2:	7bbb      	ldrb	r3, [r7, #14]
 800e1b4:	2b80      	cmp	r3, #128	@ 0x80
 800e1b6:	d008      	beq.n	800e1ca <USBD_StdEPReq+0xfe>
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	88db      	ldrh	r3, [r3, #6]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d104      	bne.n	800e1ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1c0:	7bbb      	ldrb	r3, [r7, #14]
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f002 fc75 	bl	8010ab4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 fd64 	bl	800ec98 <USBD_CtlSendStatus>

              break;
 800e1d0:	e004      	b.n	800e1dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 fc88 	bl	800eaea <USBD_CtlError>
              break;
 800e1da:	bf00      	nop
          }
          break;
 800e1dc:	e107      	b.n	800e3ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d002      	beq.n	800e1f0 <USBD_StdEPReq+0x124>
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d016      	beq.n	800e21c <USBD_StdEPReq+0x150>
 800e1ee:	e04b      	b.n	800e288 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1f0:	7bbb      	ldrb	r3, [r7, #14]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00d      	beq.n	800e212 <USBD_StdEPReq+0x146>
 800e1f6:	7bbb      	ldrb	r3, [r7, #14]
 800e1f8:	2b80      	cmp	r3, #128	@ 0x80
 800e1fa:	d00a      	beq.n	800e212 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1fc:	7bbb      	ldrb	r3, [r7, #14]
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f002 fc57 	bl	8010ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e206:	2180      	movs	r1, #128	@ 0x80
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f002 fc53 	bl	8010ab4 <USBD_LL_StallEP>
 800e20e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e210:	e040      	b.n	800e294 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e212:	6839      	ldr	r1, [r7, #0]
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 fc68 	bl	800eaea <USBD_CtlError>
              break;
 800e21a:	e03b      	b.n	800e294 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	885b      	ldrh	r3, [r3, #2]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d136      	bne.n	800e292 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e224:	7bbb      	ldrb	r3, [r7, #14]
 800e226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d004      	beq.n	800e238 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e22e:	7bbb      	ldrb	r3, [r7, #14]
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f002 fc5d 	bl	8010af2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 fd2d 	bl	800ec98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff fde4 	bl	800de10 <USBD_CoreFindEP>
 800e248:	4603      	mov	r3, r0
 800e24a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e24c:	7b7b      	ldrb	r3, [r7, #13]
 800e24e:	2bff      	cmp	r3, #255	@ 0xff
 800e250:	d01f      	beq.n	800e292 <USBD_StdEPReq+0x1c6>
 800e252:	7b7b      	ldrb	r3, [r7, #13]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d11c      	bne.n	800e292 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e258:	7b7a      	ldrb	r2, [r7, #13]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e260:	7b7a      	ldrb	r2, [r7, #13]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	32ae      	adds	r2, #174	@ 0xae
 800e266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d010      	beq.n	800e292 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e270:	7b7a      	ldrb	r2, [r7, #13]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	32ae      	adds	r2, #174	@ 0xae
 800e276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	4798      	blx	r3
 800e282:	4603      	mov	r3, r0
 800e284:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e286:	e004      	b.n	800e292 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e288:	6839      	ldr	r1, [r7, #0]
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 fc2d 	bl	800eaea <USBD_CtlError>
              break;
 800e290:	e000      	b.n	800e294 <USBD_StdEPReq+0x1c8>
              break;
 800e292:	bf00      	nop
          }
          break;
 800e294:	e0ab      	b.n	800e3ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	d002      	beq.n	800e2a8 <USBD_StdEPReq+0x1dc>
 800e2a2:	2b03      	cmp	r3, #3
 800e2a4:	d032      	beq.n	800e30c <USBD_StdEPReq+0x240>
 800e2a6:	e097      	b.n	800e3d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d007      	beq.n	800e2be <USBD_StdEPReq+0x1f2>
 800e2ae:	7bbb      	ldrb	r3, [r7, #14]
 800e2b0:	2b80      	cmp	r3, #128	@ 0x80
 800e2b2:	d004      	beq.n	800e2be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e2b4:	6839      	ldr	r1, [r7, #0]
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 fc17 	bl	800eaea <USBD_CtlError>
                break;
 800e2bc:	e091      	b.n	800e3e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	da0b      	bge.n	800e2de <USBD_StdEPReq+0x212>
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4413      	add	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	3310      	adds	r3, #16
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	4413      	add	r3, r2
 800e2da:	3304      	adds	r3, #4
 800e2dc:	e00b      	b.n	800e2f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2202      	movs	r2, #2
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fc6d 	bl	800ebe4 <USBD_CtlSendData>
              break;
 800e30a:	e06a      	b.n	800e3e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e310:	2b00      	cmp	r3, #0
 800e312:	da11      	bge.n	800e338 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e314:	7bbb      	ldrb	r3, [r7, #14]
 800e316:	f003 020f 	and.w	r2, r3, #15
 800e31a:	6879      	ldr	r1, [r7, #4]
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	440b      	add	r3, r1
 800e326:	3324      	adds	r3, #36	@ 0x24
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d117      	bne.n	800e35e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fbda 	bl	800eaea <USBD_CtlError>
                  break;
 800e336:	e054      	b.n	800e3e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e338:	7bbb      	ldrb	r3, [r7, #14]
 800e33a:	f003 020f 	and.w	r2, r3, #15
 800e33e:	6879      	ldr	r1, [r7, #4]
 800e340:	4613      	mov	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	440b      	add	r3, r1
 800e34a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d104      	bne.n	800e35e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fbc7 	bl	800eaea <USBD_CtlError>
                  break;
 800e35c:	e041      	b.n	800e3e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e35e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e362:	2b00      	cmp	r3, #0
 800e364:	da0b      	bge.n	800e37e <USBD_StdEPReq+0x2b2>
 800e366:	7bbb      	ldrb	r3, [r7, #14]
 800e368:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e36c:	4613      	mov	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4413      	add	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	3310      	adds	r3, #16
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	4413      	add	r3, r2
 800e37a:	3304      	adds	r3, #4
 800e37c:	e00b      	b.n	800e396 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e37e:	7bbb      	ldrb	r3, [r7, #14]
 800e380:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e384:	4613      	mov	r3, r2
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	4413      	add	r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	4413      	add	r3, r2
 800e394:	3304      	adds	r3, #4
 800e396:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e398:	7bbb      	ldrb	r3, [r7, #14]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d002      	beq.n	800e3a4 <USBD_StdEPReq+0x2d8>
 800e39e:	7bbb      	ldrb	r3, [r7, #14]
 800e3a0:	2b80      	cmp	r3, #128	@ 0x80
 800e3a2:	d103      	bne.n	800e3ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	601a      	str	r2, [r3, #0]
 800e3aa:	e00e      	b.n	800e3ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3ac:	7bbb      	ldrb	r3, [r7, #14]
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f002 fbbd 	bl	8010b30 <USBD_LL_IsStallEP>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	601a      	str	r2, [r3, #0]
 800e3c2:	e002      	b.n	800e3ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	2202      	movs	r2, #2
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fc07 	bl	800ebe4 <USBD_CtlSendData>
              break;
 800e3d6:	e004      	b.n	800e3e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 fb85 	bl	800eaea <USBD_CtlError>
              break;
 800e3e0:	bf00      	nop
          }
          break;
 800e3e2:	e004      	b.n	800e3ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 fb7f 	bl	800eaea <USBD_CtlError>
          break;
 800e3ec:	bf00      	nop
      }
      break;
 800e3ee:	e005      	b.n	800e3fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fb79 	bl	800eaea <USBD_CtlError>
      break;
 800e3f8:	e000      	b.n	800e3fc <USBD_StdEPReq+0x330>
      break;
 800e3fa:	bf00      	nop
  }

  return ret;
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
	...

0800e408 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e412:	2300      	movs	r3, #0
 800e414:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e41a:	2300      	movs	r3, #0
 800e41c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	885b      	ldrh	r3, [r3, #2]
 800e422:	0a1b      	lsrs	r3, r3, #8
 800e424:	b29b      	uxth	r3, r3
 800e426:	3b01      	subs	r3, #1
 800e428:	2b0e      	cmp	r3, #14
 800e42a:	f200 8152 	bhi.w	800e6d2 <USBD_GetDescriptor+0x2ca>
 800e42e:	a201      	add	r2, pc, #4	@ (adr r2, 800e434 <USBD_GetDescriptor+0x2c>)
 800e430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e434:	0800e4a5 	.word	0x0800e4a5
 800e438:	0800e4bd 	.word	0x0800e4bd
 800e43c:	0800e4fd 	.word	0x0800e4fd
 800e440:	0800e6d3 	.word	0x0800e6d3
 800e444:	0800e6d3 	.word	0x0800e6d3
 800e448:	0800e673 	.word	0x0800e673
 800e44c:	0800e69f 	.word	0x0800e69f
 800e450:	0800e6d3 	.word	0x0800e6d3
 800e454:	0800e6d3 	.word	0x0800e6d3
 800e458:	0800e6d3 	.word	0x0800e6d3
 800e45c:	0800e6d3 	.word	0x0800e6d3
 800e460:	0800e6d3 	.word	0x0800e6d3
 800e464:	0800e6d3 	.word	0x0800e6d3
 800e468:	0800e6d3 	.word	0x0800e6d3
 800e46c:	0800e471 	.word	0x0800e471
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e476:	69db      	ldr	r3, [r3, #28]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00b      	beq.n	800e494 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e482:	69db      	ldr	r3, [r3, #28]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	7c12      	ldrb	r2, [r2, #16]
 800e488:	f107 0108 	add.w	r1, r7, #8
 800e48c:	4610      	mov	r0, r2
 800e48e:	4798      	blx	r3
 800e490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e492:	e126      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 fb27 	bl	800eaea <USBD_CtlError>
        err++;
 800e49c:	7afb      	ldrb	r3, [r7, #11]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	72fb      	strb	r3, [r7, #11]
      break;
 800e4a2:	e11e      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	7c12      	ldrb	r2, [r2, #16]
 800e4b0:	f107 0108 	add.w	r1, r7, #8
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	4798      	blx	r3
 800e4b8:	60f8      	str	r0, [r7, #12]
      break;
 800e4ba:	e112      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	7c1b      	ldrb	r3, [r3, #16]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d10d      	bne.n	800e4e0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4cc:	f107 0208 	add.w	r2, r7, #8
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	4798      	blx	r3
 800e4d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	2202      	movs	r2, #2
 800e4dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e4de:	e100      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e8:	f107 0208 	add.w	r2, r7, #8
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	4798      	blx	r3
 800e4f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	701a      	strb	r2, [r3, #0]
      break;
 800e4fa:	e0f2      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	885b      	ldrh	r3, [r3, #2]
 800e500:	b2db      	uxtb	r3, r3
 800e502:	2b05      	cmp	r3, #5
 800e504:	f200 80ac 	bhi.w	800e660 <USBD_GetDescriptor+0x258>
 800e508:	a201      	add	r2, pc, #4	@ (adr r2, 800e510 <USBD_GetDescriptor+0x108>)
 800e50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50e:	bf00      	nop
 800e510:	0800e529 	.word	0x0800e529
 800e514:	0800e55d 	.word	0x0800e55d
 800e518:	0800e591 	.word	0x0800e591
 800e51c:	0800e5c5 	.word	0x0800e5c5
 800e520:	0800e5f9 	.word	0x0800e5f9
 800e524:	0800e62d 	.word	0x0800e62d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	7c12      	ldrb	r2, [r2, #16]
 800e540:	f107 0108 	add.w	r1, r7, #8
 800e544:	4610      	mov	r0, r2
 800e546:	4798      	blx	r3
 800e548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e54a:	e091      	b.n	800e670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 facb 	bl	800eaea <USBD_CtlError>
            err++;
 800e554:	7afb      	ldrb	r3, [r7, #11]
 800e556:	3301      	adds	r3, #1
 800e558:	72fb      	strb	r3, [r7, #11]
          break;
 800e55a:	e089      	b.n	800e670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00b      	beq.n	800e580 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	7c12      	ldrb	r2, [r2, #16]
 800e574:	f107 0108 	add.w	r1, r7, #8
 800e578:	4610      	mov	r0, r2
 800e57a:	4798      	blx	r3
 800e57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e57e:	e077      	b.n	800e670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fab1 	bl	800eaea <USBD_CtlError>
            err++;
 800e588:	7afb      	ldrb	r3, [r7, #11]
 800e58a:	3301      	adds	r3, #1
 800e58c:	72fb      	strb	r3, [r7, #11]
          break;
 800e58e:	e06f      	b.n	800e670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00b      	beq.n	800e5b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	7c12      	ldrb	r2, [r2, #16]
 800e5a8:	f107 0108 	add.w	r1, r7, #8
 800e5ac:	4610      	mov	r0, r2
 800e5ae:	4798      	blx	r3
 800e5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5b2:	e05d      	b.n	800e670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5b4:	6839      	ldr	r1, [r7, #0]
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 fa97 	bl	800eaea <USBD_CtlError>
            err++;
 800e5bc:	7afb      	ldrb	r3, [r7, #11]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800e5c2:	e055      	b.n	800e670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d00b      	beq.n	800e5e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	7c12      	ldrb	r2, [r2, #16]
 800e5dc:	f107 0108 	add.w	r1, r7, #8
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	4798      	blx	r3
 800e5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5e6:	e043      	b.n	800e670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 fa7d 	bl	800eaea <USBD_CtlError>
            err++;
 800e5f0:	7afb      	ldrb	r3, [r7, #11]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800e5f6:	e03b      	b.n	800e670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5fe:	695b      	ldr	r3, [r3, #20]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00b      	beq.n	800e61c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e60a:	695b      	ldr	r3, [r3, #20]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	7c12      	ldrb	r2, [r2, #16]
 800e610:	f107 0108 	add.w	r1, r7, #8
 800e614:	4610      	mov	r0, r2
 800e616:	4798      	blx	r3
 800e618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e61a:	e029      	b.n	800e670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e61c:	6839      	ldr	r1, [r7, #0]
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 fa63 	bl	800eaea <USBD_CtlError>
            err++;
 800e624:	7afb      	ldrb	r3, [r7, #11]
 800e626:	3301      	adds	r3, #1
 800e628:	72fb      	strb	r3, [r7, #11]
          break;
 800e62a:	e021      	b.n	800e670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e632:	699b      	ldr	r3, [r3, #24]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00b      	beq.n	800e650 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e63e:	699b      	ldr	r3, [r3, #24]
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	7c12      	ldrb	r2, [r2, #16]
 800e644:	f107 0108 	add.w	r1, r7, #8
 800e648:	4610      	mov	r0, r2
 800e64a:	4798      	blx	r3
 800e64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e64e:	e00f      	b.n	800e670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fa49 	bl	800eaea <USBD_CtlError>
            err++;
 800e658:	7afb      	ldrb	r3, [r7, #11]
 800e65a:	3301      	adds	r3, #1
 800e65c:	72fb      	strb	r3, [r7, #11]
          break;
 800e65e:	e007      	b.n	800e670 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 fa41 	bl	800eaea <USBD_CtlError>
          err++;
 800e668:	7afb      	ldrb	r3, [r7, #11]
 800e66a:	3301      	adds	r3, #1
 800e66c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e66e:	bf00      	nop
      }
      break;
 800e670:	e037      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	7c1b      	ldrb	r3, [r3, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d109      	bne.n	800e68e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e682:	f107 0208 	add.w	r2, r7, #8
 800e686:	4610      	mov	r0, r2
 800e688:	4798      	blx	r3
 800e68a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e68c:	e029      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e68e:	6839      	ldr	r1, [r7, #0]
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 fa2a 	bl	800eaea <USBD_CtlError>
        err++;
 800e696:	7afb      	ldrb	r3, [r7, #11]
 800e698:	3301      	adds	r3, #1
 800e69a:	72fb      	strb	r3, [r7, #11]
      break;
 800e69c:	e021      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	7c1b      	ldrb	r3, [r3, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10d      	bne.n	800e6c2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ae:	f107 0208 	add.w	r2, r7, #8
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	4798      	blx	r3
 800e6b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	2207      	movs	r2, #7
 800e6be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6c0:	e00f      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6c2:	6839      	ldr	r1, [r7, #0]
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 fa10 	bl	800eaea <USBD_CtlError>
        err++;
 800e6ca:	7afb      	ldrb	r3, [r7, #11]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	72fb      	strb	r3, [r7, #11]
      break;
 800e6d0:	e007      	b.n	800e6e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 fa08 	bl	800eaea <USBD_CtlError>
      err++;
 800e6da:	7afb      	ldrb	r3, [r7, #11]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	72fb      	strb	r3, [r7, #11]
      break;
 800e6e0:	bf00      	nop
  }

  if (err != 0U)
 800e6e2:	7afb      	ldrb	r3, [r7, #11]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d11e      	bne.n	800e726 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	88db      	ldrh	r3, [r3, #6]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d016      	beq.n	800e71e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e6f0:	893b      	ldrh	r3, [r7, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00e      	beq.n	800e714 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	88da      	ldrh	r2, [r3, #6]
 800e6fa:	893b      	ldrh	r3, [r7, #8]
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	bf28      	it	cs
 800e700:	4613      	movcs	r3, r2
 800e702:	b29b      	uxth	r3, r3
 800e704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e706:	893b      	ldrh	r3, [r7, #8]
 800e708:	461a      	mov	r2, r3
 800e70a:	68f9      	ldr	r1, [r7, #12]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 fa69 	bl	800ebe4 <USBD_CtlSendData>
 800e712:	e009      	b.n	800e728 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e714:	6839      	ldr	r1, [r7, #0]
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f9e7 	bl	800eaea <USBD_CtlError>
 800e71c:	e004      	b.n	800e728 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 faba 	bl	800ec98 <USBD_CtlSendStatus>
 800e724:	e000      	b.n	800e728 <USBD_GetDescriptor+0x320>
    return;
 800e726:	bf00      	nop
  }
}
 800e728:	3710      	adds	r7, #16
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop

0800e730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	889b      	ldrh	r3, [r3, #4]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d131      	bne.n	800e7a6 <USBD_SetAddress+0x76>
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	88db      	ldrh	r3, [r3, #6]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d12d      	bne.n	800e7a6 <USBD_SetAddress+0x76>
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	885b      	ldrh	r3, [r3, #2]
 800e74e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e750:	d829      	bhi.n	800e7a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	885b      	ldrh	r3, [r3, #2]
 800e756:	b2db      	uxtb	r3, r3
 800e758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e75c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b03      	cmp	r3, #3
 800e768:	d104      	bne.n	800e774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e76a:	6839      	ldr	r1, [r7, #0]
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f9bc 	bl	800eaea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e772:	e01d      	b.n	800e7b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	7bfa      	ldrb	r2, [r7, #15]
 800e778:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e77c:	7bfb      	ldrb	r3, [r7, #15]
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f002 fa01 	bl	8010b88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fa86 	bl	800ec98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d004      	beq.n	800e79c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2202      	movs	r2, #2
 800e796:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e79a:	e009      	b.n	800e7b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7a4:	e004      	b.n	800e7b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e7a6:	6839      	ldr	r1, [r7, #0]
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f99e 	bl	800eaea <USBD_CtlError>
  }
}
 800e7ae:	bf00      	nop
 800e7b0:	bf00      	nop
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	885b      	ldrh	r3, [r3, #2]
 800e7ca:	b2da      	uxtb	r2, r3
 800e7cc:	4b4e      	ldr	r3, [pc, #312]	@ (800e908 <USBD_SetConfig+0x150>)
 800e7ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7d0:	4b4d      	ldr	r3, [pc, #308]	@ (800e908 <USBD_SetConfig+0x150>)
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d905      	bls.n	800e7e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 f985 	bl	800eaea <USBD_CtlError>
    return USBD_FAIL;
 800e7e0:	2303      	movs	r3, #3
 800e7e2:	e08c      	b.n	800e8fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d002      	beq.n	800e7f6 <USBD_SetConfig+0x3e>
 800e7f0:	2b03      	cmp	r3, #3
 800e7f2:	d029      	beq.n	800e848 <USBD_SetConfig+0x90>
 800e7f4:	e075      	b.n	800e8e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e7f6:	4b44      	ldr	r3, [pc, #272]	@ (800e908 <USBD_SetConfig+0x150>)
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d020      	beq.n	800e840 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e7fe:	4b42      	ldr	r3, [pc, #264]	@ (800e908 <USBD_SetConfig+0x150>)
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e808:	4b3f      	ldr	r3, [pc, #252]	@ (800e908 <USBD_SetConfig+0x150>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	4619      	mov	r1, r3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7fe ffb9 	bl	800d786 <USBD_SetClassConfig>
 800e814:	4603      	mov	r3, r0
 800e816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e818:	7bfb      	ldrb	r3, [r7, #15]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d008      	beq.n	800e830 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e81e:	6839      	ldr	r1, [r7, #0]
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f962 	bl	800eaea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2202      	movs	r2, #2
 800e82a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e82e:	e065      	b.n	800e8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 fa31 	bl	800ec98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2203      	movs	r2, #3
 800e83a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e83e:	e05d      	b.n	800e8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fa29 	bl	800ec98 <USBD_CtlSendStatus>
      break;
 800e846:	e059      	b.n	800e8fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e848:	4b2f      	ldr	r3, [pc, #188]	@ (800e908 <USBD_SetConfig+0x150>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d112      	bne.n	800e876 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2202      	movs	r2, #2
 800e854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e858:	4b2b      	ldr	r3, [pc, #172]	@ (800e908 <USBD_SetConfig+0x150>)
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	461a      	mov	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e862:	4b29      	ldr	r3, [pc, #164]	@ (800e908 <USBD_SetConfig+0x150>)
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7fe ffa8 	bl	800d7be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fa12 	bl	800ec98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e874:	e042      	b.n	800e8fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e876:	4b24      	ldr	r3, [pc, #144]	@ (800e908 <USBD_SetConfig+0x150>)
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d02a      	beq.n	800e8da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f7fe ff96 	bl	800d7be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e892:	4b1d      	ldr	r3, [pc, #116]	@ (800e908 <USBD_SetConfig+0x150>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e89c:	4b1a      	ldr	r3, [pc, #104]	@ (800e908 <USBD_SetConfig+0x150>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7fe ff6f 	bl	800d786 <USBD_SetClassConfig>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00f      	beq.n	800e8d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e8b2:	6839      	ldr	r1, [r7, #0]
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f918 	bl	800eaea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7fe ff7b 	bl	800d7be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2202      	movs	r2, #2
 800e8cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e8d0:	e014      	b.n	800e8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f9e0 	bl	800ec98 <USBD_CtlSendStatus>
      break;
 800e8d8:	e010      	b.n	800e8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 f9dc 	bl	800ec98 <USBD_CtlSendStatus>
      break;
 800e8e0:	e00c      	b.n	800e8fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f900 	bl	800eaea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8ea:	4b07      	ldr	r3, [pc, #28]	@ (800e908 <USBD_SetConfig+0x150>)
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7fe ff64 	bl	800d7be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e8fa:	bf00      	nop
  }

  return ret;
 800e8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	24000744 	.word	0x24000744

0800e90c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	88db      	ldrh	r3, [r3, #6]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d004      	beq.n	800e928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e91e:	6839      	ldr	r1, [r7, #0]
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f8e2 	bl	800eaea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e926:	e023      	b.n	800e970 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b02      	cmp	r3, #2
 800e932:	dc02      	bgt.n	800e93a <USBD_GetConfig+0x2e>
 800e934:	2b00      	cmp	r3, #0
 800e936:	dc03      	bgt.n	800e940 <USBD_GetConfig+0x34>
 800e938:	e015      	b.n	800e966 <USBD_GetConfig+0x5a>
 800e93a:	2b03      	cmp	r3, #3
 800e93c:	d00b      	beq.n	800e956 <USBD_GetConfig+0x4a>
 800e93e:	e012      	b.n	800e966 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	3308      	adds	r3, #8
 800e94a:	2201      	movs	r2, #1
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f948 	bl	800ebe4 <USBD_CtlSendData>
        break;
 800e954:	e00c      	b.n	800e970 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	3304      	adds	r3, #4
 800e95a:	2201      	movs	r2, #1
 800e95c:	4619      	mov	r1, r3
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 f940 	bl	800ebe4 <USBD_CtlSendData>
        break;
 800e964:	e004      	b.n	800e970 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 f8be 	bl	800eaea <USBD_CtlError>
        break;
 800e96e:	bf00      	nop
}
 800e970:	bf00      	nop
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	3b01      	subs	r3, #1
 800e98c:	2b02      	cmp	r3, #2
 800e98e:	d81e      	bhi.n	800e9ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	88db      	ldrh	r3, [r3, #6]
 800e994:	2b02      	cmp	r3, #2
 800e996:	d004      	beq.n	800e9a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e998:	6839      	ldr	r1, [r7, #0]
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 f8a5 	bl	800eaea <USBD_CtlError>
        break;
 800e9a0:	e01a      	b.n	800e9d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d005      	beq.n	800e9be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	f043 0202 	orr.w	r2, r3, #2
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	330c      	adds	r3, #12
 800e9c2:	2202      	movs	r2, #2
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 f90c 	bl	800ebe4 <USBD_CtlSendData>
      break;
 800e9cc:	e004      	b.n	800e9d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e9ce:	6839      	ldr	r1, [r7, #0]
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 f88a 	bl	800eaea <USBD_CtlError>
      break;
 800e9d6:	bf00      	nop
  }
}
 800e9d8:	bf00      	nop
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	885b      	ldrh	r3, [r3, #2]
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d107      	bne.n	800ea02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 f94c 	bl	800ec98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ea00:	e013      	b.n	800ea2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	885b      	ldrh	r3, [r3, #2]
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	d10b      	bne.n	800ea22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	889b      	ldrh	r3, [r3, #4]
 800ea0e:	0a1b      	lsrs	r3, r3, #8
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f93c 	bl	800ec98 <USBD_CtlSendStatus>
}
 800ea20:	e003      	b.n	800ea2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 f860 	bl	800eaea <USBD_CtlError>
}
 800ea2a:	bf00      	nop
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	3b01      	subs	r3, #1
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d80b      	bhi.n	800ea62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	885b      	ldrh	r3, [r3, #2]
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d10c      	bne.n	800ea6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f91c 	bl	800ec98 <USBD_CtlSendStatus>
      }
      break;
 800ea60:	e004      	b.n	800ea6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f840 	bl	800eaea <USBD_CtlError>
      break;
 800ea6a:	e000      	b.n	800ea6e <USBD_ClrFeature+0x3c>
      break;
 800ea6c:	bf00      	nop
  }
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b084      	sub	sp, #16
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	781a      	ldrb	r2, [r3, #0]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	781a      	ldrb	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f7ff fa16 	bl	800ded2 <SWAPBYTE>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	3301      	adds	r3, #1
 800eab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3301      	adds	r3, #1
 800eab8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f7ff fa09 	bl	800ded2 <SWAPBYTE>
 800eac0:	4603      	mov	r3, r0
 800eac2:	461a      	mov	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3301      	adds	r3, #1
 800eacc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	3301      	adds	r3, #1
 800ead2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7ff f9fc 	bl	800ded2 <SWAPBYTE>
 800eada:	4603      	mov	r3, r0
 800eadc:	461a      	mov	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	80da      	strh	r2, [r3, #6]
}
 800eae2:	bf00      	nop
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eaf4:	2180      	movs	r1, #128	@ 0x80
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f001 ffdc 	bl	8010ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eafc:	2100      	movs	r1, #0
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f001 ffd8 	bl	8010ab4 <USBD_LL_StallEP>
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b086      	sub	sp, #24
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d042      	beq.n	800eba8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800eb26:	6938      	ldr	r0, [r7, #16]
 800eb28:	f000 f842 	bl	800ebb0 <USBD_GetLen>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	3301      	adds	r3, #1
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb36:	d808      	bhi.n	800eb4a <USBD_GetString+0x3e>
 800eb38:	6938      	ldr	r0, [r7, #16]
 800eb3a:	f000 f839 	bl	800ebb0 <USBD_GetLen>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	3301      	adds	r3, #1
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	005b      	lsls	r3, r3, #1
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	e001      	b.n	800eb4e <USBD_GetString+0x42>
 800eb4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb52:	7dfb      	ldrb	r3, [r7, #23]
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	4413      	add	r3, r2
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	7812      	ldrb	r2, [r2, #0]
 800eb5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	3301      	adds	r3, #1
 800eb62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb64:	7dfb      	ldrb	r3, [r7, #23]
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	4413      	add	r3, r2
 800eb6a:	2203      	movs	r2, #3
 800eb6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
 800eb70:	3301      	adds	r3, #1
 800eb72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb74:	e013      	b.n	800eb9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	693a      	ldr	r2, [r7, #16]
 800eb7e:	7812      	ldrb	r2, [r2, #0]
 800eb80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	3301      	adds	r3, #1
 800eb86:	613b      	str	r3, [r7, #16]
    idx++;
 800eb88:	7dfb      	ldrb	r3, [r7, #23]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb8e:	7dfb      	ldrb	r3, [r7, #23]
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	4413      	add	r3, r2
 800eb94:	2200      	movs	r2, #0
 800eb96:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb98:	7dfb      	ldrb	r3, [r7, #23]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1e7      	bne.n	800eb76 <USBD_GetString+0x6a>
 800eba6:	e000      	b.n	800ebaa <USBD_GetString+0x9e>
    return;
 800eba8:	bf00      	nop
  }
}
 800ebaa:	3718      	adds	r7, #24
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ebc0:	e005      	b.n	800ebce <USBD_GetLen+0x1e>
  {
    len++;
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1f5      	bne.n	800ebc2 <USBD_GetLen+0x12>
  }

  return len;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3714      	adds	r7, #20
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	2100      	movs	r1, #0
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f001 ffdb 	bl	8010bc6 <USBD_LL_Transmit>

  return USBD_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b084      	sub	sp, #16
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	60f8      	str	r0, [r7, #12]
 800ec22:	60b9      	str	r1, [r7, #8]
 800ec24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f001 ffca 	bl	8010bc6 <USBD_LL_Transmit>

  return USBD_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2203      	movs	r2, #3
 800ec4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	68ba      	ldr	r2, [r7, #8]
 800ec64:	2100      	movs	r1, #0
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f001 ffce 	bl	8010c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b084      	sub	sp, #16
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	60f8      	str	r0, [r7, #12]
 800ec7e:	60b9      	str	r1, [r7, #8]
 800ec80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	2100      	movs	r1, #0
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f001 ffbd 	bl	8010c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2204      	movs	r2, #4
 800eca4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eca8:	2300      	movs	r3, #0
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2100      	movs	r1, #0
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f001 ff89 	bl	8010bc6 <USBD_LL_Transmit>

  return USBD_OK;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2205      	movs	r2, #5
 800ecca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecce:	2300      	movs	r3, #0
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	2100      	movs	r1, #0
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f001 ff97 	bl	8010c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b087      	sub	sp, #28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ecfa:	4b1f      	ldr	r3, [pc, #124]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ecfc:	7a5b      	ldrb	r3, [r3, #9]
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d131      	bne.n	800ed68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed04:	4b1c      	ldr	r3, [pc, #112]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed06:	7a5b      	ldrb	r3, [r3, #9]
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed0e:	2100      	movs	r1, #0
 800ed10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed12:	4b19      	ldr	r3, [pc, #100]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed14:	7a5b      	ldrb	r3, [r3, #9]
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	4a17      	ldr	r2, [pc, #92]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed22:	4b15      	ldr	r3, [pc, #84]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed24:	7a5b      	ldrb	r3, [r3, #9]
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	461a      	mov	r2, r3
 800ed2a:	4b13      	ldr	r3, [pc, #76]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed2c:	4413      	add	r3, r2
 800ed2e:	79fa      	ldrb	r2, [r7, #7]
 800ed30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed32:	4b11      	ldr	r3, [pc, #68]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed34:	7a5b      	ldrb	r3, [r3, #9]
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	1c5a      	adds	r2, r3, #1
 800ed3a:	b2d1      	uxtb	r1, r2
 800ed3c:	4a0e      	ldr	r2, [pc, #56]	@ (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed3e:	7251      	strb	r1, [r2, #9]
 800ed40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed42:	7dbb      	ldrb	r3, [r7, #22]
 800ed44:	3330      	adds	r3, #48	@ 0x30
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	223a      	movs	r2, #58	@ 0x3a
 800ed52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	3302      	adds	r3, #2
 800ed58:	222f      	movs	r2, #47	@ 0x2f
 800ed5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	3303      	adds	r3, #3
 800ed60:	2200      	movs	r2, #0
 800ed62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	371c      	adds	r7, #28
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	24000748 	.word	0x24000748

0800ed7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed86:	2200      	movs	r2, #0
 800ed88:	6839      	ldr	r1, [r7, #0]
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff ffaa 	bl	800ece4 <FATFS_LinkDriverEx>
 800ed90:	4603      	mov	r3, r0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b085      	sub	sp, #20
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	4603      	mov	r3, r0
 800eda2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800eda4:	2300      	movs	r3, #0
 800eda6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800eda8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800edac:	2b84      	cmp	r3, #132	@ 0x84
 800edae:	d005      	beq.n	800edbc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800edb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	4413      	add	r3, r2
 800edb8:	3303      	adds	r3, #3
 800edba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800edbc:	68fb      	ldr	r3, [r7, #12]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3714      	adds	r7, #20
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr

0800edca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800edce:	f000 fb05 	bl	800f3dc <vTaskStartScheduler>
  
  return osOK;
 800edd2:	2300      	movs	r3, #0
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800edd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edda:	b089      	sub	sp, #36	@ 0x24
 800eddc:	af04      	add	r7, sp, #16
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d020      	beq.n	800ee2c <osThreadCreate+0x54>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	699b      	ldr	r3, [r3, #24]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d01c      	beq.n	800ee2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685c      	ldr	r4, [r3, #4]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	691e      	ldr	r6, [r3, #16]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff ffc8 	bl	800ed9a <makeFreeRtosPriority>
 800ee0a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	695b      	ldr	r3, [r3, #20]
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee14:	9202      	str	r2, [sp, #8]
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	9100      	str	r1, [sp, #0]
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	4632      	mov	r2, r6
 800ee1e:	4629      	mov	r1, r5
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 f8ed 	bl	800f000 <xTaskCreateStatic>
 800ee26:	4603      	mov	r3, r0
 800ee28:	60fb      	str	r3, [r7, #12]
 800ee2a:	e01c      	b.n	800ee66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685c      	ldr	r4, [r3, #4]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee38:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff ffaa 	bl	800ed9a <makeFreeRtosPriority>
 800ee46:	4602      	mov	r2, r0
 800ee48:	f107 030c 	add.w	r3, r7, #12
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	9200      	str	r2, [sp, #0]
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	4632      	mov	r2, r6
 800ee54:	4629      	mov	r1, r5
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 f932 	bl	800f0c0 <xTaskCreate>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d001      	beq.n	800ee66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ee62:	2300      	movs	r3, #0
 800ee64:	e000      	b.n	800ee68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ee66:	68fb      	ldr	r3, [r7, #12]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3714      	adds	r7, #20
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <osDelay+0x16>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	e000      	b.n	800ee88 <osDelay+0x18>
 800ee86:	2301      	movs	r3, #1
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f000 fa71 	bl	800f370 <vTaskDelay>
  
  return osOK;
 800ee8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f103 0208 	add.w	r2, r3, #8
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f103 0208 	add.w	r2, r3, #8
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f103 0208 	add.w	r2, r3, #8
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eecc:	bf00      	nop
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eef2:	b480      	push	{r7}
 800eef4:	b085      	sub	sp, #20
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	689a      	ldr	r2, [r3, #8]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	601a      	str	r2, [r3, #0]
}
 800ef2e:	bf00      	nop
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef3a:	b480      	push	{r7}
 800ef3c:	b085      	sub	sp, #20
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef50:	d103      	bne.n	800ef5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	691b      	ldr	r3, [r3, #16]
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	e00c      	b.n	800ef74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	e002      	b.n	800ef68 <vListInsert+0x2e>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d2f6      	bcs.n	800ef62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	683a      	ldr	r2, [r7, #0]
 800ef82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	683a      	ldr	r2, [r7, #0]
 800ef8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	601a      	str	r2, [r3, #0]
}
 800efa0:	bf00      	nop
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	691b      	ldr	r3, [r3, #16]
 800efb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	6892      	ldr	r2, [r2, #8]
 800efc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	6852      	ldr	r2, [r2, #4]
 800efcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d103      	bne.n	800efe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	689a      	ldr	r2, [r3, #8]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	1e5a      	subs	r2, r3, #1
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f000:	b580      	push	{r7, lr}
 800f002:	b08e      	sub	sp, #56	@ 0x38
 800f004:	af04      	add	r7, sp, #16
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
 800f00c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10b      	bne.n	800f02c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f026:	bf00      	nop
 800f028:	bf00      	nop
 800f02a:	e7fd      	b.n	800f028 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10b      	bne.n	800f04a <xTaskCreateStatic+0x4a>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	61fb      	str	r3, [r7, #28]
}
 800f044:	bf00      	nop
 800f046:	bf00      	nop
 800f048:	e7fd      	b.n	800f046 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f04a:	23a0      	movs	r3, #160	@ 0xa0
 800f04c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	2ba0      	cmp	r3, #160	@ 0xa0
 800f052:	d00b      	beq.n	800f06c <xTaskCreateStatic+0x6c>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	61bb      	str	r3, [r7, #24]
}
 800f066:	bf00      	nop
 800f068:	bf00      	nop
 800f06a:	e7fd      	b.n	800f068 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f06c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f070:	2b00      	cmp	r3, #0
 800f072:	d01e      	beq.n	800f0b2 <xTaskCreateStatic+0xb2>
 800f074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f076:	2b00      	cmp	r3, #0
 800f078:	d01b      	beq.n	800f0b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f080:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f082:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f086:	2202      	movs	r2, #2
 800f088:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f08c:	2300      	movs	r3, #0
 800f08e:	9303      	str	r3, [sp, #12]
 800f090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f092:	9302      	str	r3, [sp, #8]
 800f094:	f107 0314 	add.w	r3, r7, #20
 800f098:	9301      	str	r3, [sp, #4]
 800f09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	68b9      	ldr	r1, [r7, #8]
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f000 f851 	bl	800f14c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0ac:	f000 f8f6 	bl	800f29c <prvAddNewTaskToReadyList>
 800f0b0:	e001      	b.n	800f0b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0b6:	697b      	ldr	r3, [r7, #20]
	}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3728      	adds	r7, #40	@ 0x28
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b08c      	sub	sp, #48	@ 0x30
 800f0c4:	af04      	add	r7, sp, #16
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	603b      	str	r3, [r7, #0]
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f0d0:	88fb      	ldrh	r3, [r7, #6]
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f000 ff07 	bl	800fee8 <pvPortMalloc>
 800f0da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00e      	beq.n	800f100 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f0e2:	20a0      	movs	r0, #160	@ 0xa0
 800f0e4:	f000 ff00 	bl	800fee8 <pvPortMalloc>
 800f0e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d003      	beq.n	800f0f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0f6:	e005      	b.n	800f104 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f0f8:	6978      	ldr	r0, [r7, #20]
 800f0fa:	f000 ffc3 	bl	8010084 <vPortFree>
 800f0fe:	e001      	b.n	800f104 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f100:	2300      	movs	r3, #0
 800f102:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d017      	beq.n	800f13a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f112:	88fa      	ldrh	r2, [r7, #6]
 800f114:	2300      	movs	r3, #0
 800f116:	9303      	str	r3, [sp, #12]
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	9302      	str	r3, [sp, #8]
 800f11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f11e:	9301      	str	r3, [sp, #4]
 800f120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	68b9      	ldr	r1, [r7, #8]
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f000 f80f 	bl	800f14c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f12e:	69f8      	ldr	r0, [r7, #28]
 800f130:	f000 f8b4 	bl	800f29c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f134:	2301      	movs	r3, #1
 800f136:	61bb      	str	r3, [r7, #24]
 800f138:	e002      	b.n	800f140 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f13a:	f04f 33ff 	mov.w	r3, #4294967295
 800f13e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f140:	69bb      	ldr	r3, [r7, #24]
	}
 800f142:	4618      	mov	r0, r3
 800f144:	3720      	adds	r7, #32
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
	...

0800f14c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b088      	sub	sp, #32
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	461a      	mov	r2, r3
 800f164:	21a5      	movs	r1, #165	@ 0xa5
 800f166:	f001 fdc7 	bl	8010cf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f16c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f16e:	6879      	ldr	r1, [r7, #4]
 800f170:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f174:	440b      	add	r3, r1
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4413      	add	r3, r2
 800f17a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	f023 0307 	bic.w	r3, r3, #7
 800f182:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	f003 0307 	and.w	r3, r3, #7
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00b      	beq.n	800f1a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	617b      	str	r3, [r7, #20]
}
 800f1a0:	bf00      	nop
 800f1a2:	bf00      	nop
 800f1a4:	e7fd      	b.n	800f1a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d01f      	beq.n	800f1ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	61fb      	str	r3, [r7, #28]
 800f1b0:	e012      	b.n	800f1d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	7819      	ldrb	r1, [r3, #0]
 800f1ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	4413      	add	r3, r2
 800f1c0:	3334      	adds	r3, #52	@ 0x34
 800f1c2:	460a      	mov	r2, r1
 800f1c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1c6:	68ba      	ldr	r2, [r7, #8]
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d006      	beq.n	800f1e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	61fb      	str	r3, [r7, #28]
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	2b0f      	cmp	r3, #15
 800f1dc:	d9e9      	bls.n	800f1b2 <prvInitialiseNewTask+0x66>
 800f1de:	e000      	b.n	800f1e2 <prvInitialiseNewTask+0x96>
			{
				break;
 800f1e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f1ea:	e003      	b.n	800f1f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f6:	2b06      	cmp	r3, #6
 800f1f8:	d901      	bls.n	800f1fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f1fa:	2306      	movs	r3, #6
 800f1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f202:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f208:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f20c:	2200      	movs	r2, #0
 800f20e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f212:	3304      	adds	r3, #4
 800f214:	4618      	mov	r0, r3
 800f216:	f7ff fe5f 	bl	800eed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	3318      	adds	r3, #24
 800f21e:	4618      	mov	r0, r3
 800f220:	f7ff fe5a 	bl	800eed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f228:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f22c:	f1c3 0207 	rsb	r2, r3, #7
 800f230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f232:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f238:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f23c:	2200      	movs	r2, #0
 800f23e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f244:	2200      	movs	r2, #0
 800f246:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24c:	334c      	adds	r3, #76	@ 0x4c
 800f24e:	224c      	movs	r2, #76	@ 0x4c
 800f250:	2100      	movs	r1, #0
 800f252:	4618      	mov	r0, r3
 800f254:	f001 fd50 	bl	8010cf8 <memset>
 800f258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f25a:	4a0d      	ldr	r2, [pc, #52]	@ (800f290 <prvInitialiseNewTask+0x144>)
 800f25c:	651a      	str	r2, [r3, #80]	@ 0x50
 800f25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f260:	4a0c      	ldr	r2, [pc, #48]	@ (800f294 <prvInitialiseNewTask+0x148>)
 800f262:	655a      	str	r2, [r3, #84]	@ 0x54
 800f264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f266:	4a0c      	ldr	r2, [pc, #48]	@ (800f298 <prvInitialiseNewTask+0x14c>)
 800f268:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f26a:	683a      	ldr	r2, [r7, #0]
 800f26c:	68f9      	ldr	r1, [r7, #12]
 800f26e:	69b8      	ldr	r0, [r7, #24]
 800f270:	f000 fc2a 	bl	800fac8 <pxPortInitialiseStack>
 800f274:	4602      	mov	r2, r0
 800f276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f278:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f286:	bf00      	nop
 800f288:	3720      	adds	r7, #32
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	24006088 	.word	0x24006088
 800f294:	240060f0 	.word	0x240060f0
 800f298:	24006158 	.word	0x24006158

0800f29c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f2a4:	f000 fd40 	bl	800fd28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f2a8:	4b2a      	ldr	r3, [pc, #168]	@ (800f354 <prvAddNewTaskToReadyList+0xb8>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	4a29      	ldr	r2, [pc, #164]	@ (800f354 <prvAddNewTaskToReadyList+0xb8>)
 800f2b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f2b2:	4b29      	ldr	r3, [pc, #164]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d109      	bne.n	800f2ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2ba:	4a27      	ldr	r2, [pc, #156]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2c0:	4b24      	ldr	r3, [pc, #144]	@ (800f354 <prvAddNewTaskToReadyList+0xb8>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d110      	bne.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f2c8:	f000 fad4 	bl	800f874 <prvInitialiseTaskLists>
 800f2cc:	e00d      	b.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f2ce:	4b23      	ldr	r3, [pc, #140]	@ (800f35c <prvAddNewTaskToReadyList+0xc0>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d109      	bne.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f2d6:	4b20      	ldr	r3, [pc, #128]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d802      	bhi.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2ea:	4b1d      	ldr	r3, [pc, #116]	@ (800f360 <prvAddNewTaskToReadyList+0xc4>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	4a1b      	ldr	r2, [pc, #108]	@ (800f360 <prvAddNewTaskToReadyList+0xc4>)
 800f2f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	409a      	lsls	r2, r3
 800f2fc:	4b19      	ldr	r3, [pc, #100]	@ (800f364 <prvAddNewTaskToReadyList+0xc8>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4313      	orrs	r3, r2
 800f302:	4a18      	ldr	r2, [pc, #96]	@ (800f364 <prvAddNewTaskToReadyList+0xc8>)
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f30a:	4613      	mov	r3, r2
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	4413      	add	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4a15      	ldr	r2, [pc, #84]	@ (800f368 <prvAddNewTaskToReadyList+0xcc>)
 800f314:	441a      	add	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	3304      	adds	r3, #4
 800f31a:	4619      	mov	r1, r3
 800f31c:	4610      	mov	r0, r2
 800f31e:	f7ff fde8 	bl	800eef2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f322:	f000 fd33 	bl	800fd8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f326:	4b0d      	ldr	r3, [pc, #52]	@ (800f35c <prvAddNewTaskToReadyList+0xc0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00e      	beq.n	800f34c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f32e:	4b0a      	ldr	r3, [pc, #40]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f338:	429a      	cmp	r2, r3
 800f33a:	d207      	bcs.n	800f34c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f33c:	4b0b      	ldr	r3, [pc, #44]	@ (800f36c <prvAddNewTaskToReadyList+0xd0>)
 800f33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	24000854 	.word	0x24000854
 800f358:	24000754 	.word	0x24000754
 800f35c:	24000860 	.word	0x24000860
 800f360:	24000870 	.word	0x24000870
 800f364:	2400085c 	.word	0x2400085c
 800f368:	24000758 	.word	0x24000758
 800f36c:	e000ed04 	.word	0xe000ed04

0800f370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f378:	2300      	movs	r3, #0
 800f37a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d018      	beq.n	800f3b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f382:	4b14      	ldr	r3, [pc, #80]	@ (800f3d4 <vTaskDelay+0x64>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00b      	beq.n	800f3a2 <vTaskDelay+0x32>
	__asm volatile
 800f38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f38e:	f383 8811 	msr	BASEPRI, r3
 800f392:	f3bf 8f6f 	isb	sy
 800f396:	f3bf 8f4f 	dsb	sy
 800f39a:	60bb      	str	r3, [r7, #8]
}
 800f39c:	bf00      	nop
 800f39e:	bf00      	nop
 800f3a0:	e7fd      	b.n	800f39e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f3a2:	f000 f885 	bl	800f4b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fb27 	bl	800f9fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f3ae:	f000 f88d 	bl	800f4cc <xTaskResumeAll>
 800f3b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d107      	bne.n	800f3ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f3ba:	4b07      	ldr	r3, [pc, #28]	@ (800f3d8 <vTaskDelay+0x68>)
 800f3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	f3bf 8f4f 	dsb	sy
 800f3c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	2400087c 	.word	0x2400087c
 800f3d8:	e000ed04 	.word	0xe000ed04

0800f3dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08a      	sub	sp, #40	@ 0x28
 800f3e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f3ea:	463a      	mov	r2, r7
 800f3ec:	1d39      	adds	r1, r7, #4
 800f3ee:	f107 0308 	add.w	r3, r7, #8
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7f1 fbd4 	bl	8000ba0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	9202      	str	r2, [sp, #8]
 800f400:	9301      	str	r3, [sp, #4]
 800f402:	2300      	movs	r3, #0
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	2300      	movs	r3, #0
 800f408:	460a      	mov	r2, r1
 800f40a:	4921      	ldr	r1, [pc, #132]	@ (800f490 <vTaskStartScheduler+0xb4>)
 800f40c:	4821      	ldr	r0, [pc, #132]	@ (800f494 <vTaskStartScheduler+0xb8>)
 800f40e:	f7ff fdf7 	bl	800f000 <xTaskCreateStatic>
 800f412:	4603      	mov	r3, r0
 800f414:	4a20      	ldr	r2, [pc, #128]	@ (800f498 <vTaskStartScheduler+0xbc>)
 800f416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f418:	4b1f      	ldr	r3, [pc, #124]	@ (800f498 <vTaskStartScheduler+0xbc>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d002      	beq.n	800f426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f420:	2301      	movs	r3, #1
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	e001      	b.n	800f42a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d11b      	bne.n	800f468 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	613b      	str	r3, [r7, #16]
}
 800f442:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f444:	4b15      	ldr	r3, [pc, #84]	@ (800f49c <vTaskStartScheduler+0xc0>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	334c      	adds	r3, #76	@ 0x4c
 800f44a:	4a15      	ldr	r2, [pc, #84]	@ (800f4a0 <vTaskStartScheduler+0xc4>)
 800f44c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f44e:	4b15      	ldr	r3, [pc, #84]	@ (800f4a4 <vTaskStartScheduler+0xc8>)
 800f450:	f04f 32ff 	mov.w	r2, #4294967295
 800f454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f456:	4b14      	ldr	r3, [pc, #80]	@ (800f4a8 <vTaskStartScheduler+0xcc>)
 800f458:	2201      	movs	r2, #1
 800f45a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f45c:	4b13      	ldr	r3, [pc, #76]	@ (800f4ac <vTaskStartScheduler+0xd0>)
 800f45e:	2200      	movs	r2, #0
 800f460:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f462:	f000 fbbd 	bl	800fbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f466:	e00f      	b.n	800f488 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f46e:	d10b      	bne.n	800f488 <vTaskStartScheduler+0xac>
	__asm volatile
 800f470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	60fb      	str	r3, [r7, #12]
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	e7fd      	b.n	800f484 <vTaskStartScheduler+0xa8>
}
 800f488:	bf00      	nop
 800f48a:	3718      	adds	r7, #24
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	08010f24 	.word	0x08010f24
 800f494:	0800f845 	.word	0x0800f845
 800f498:	24000878 	.word	0x24000878
 800f49c:	24000754 	.word	0x24000754
 800f4a0:	24000120 	.word	0x24000120
 800f4a4:	24000874 	.word	0x24000874
 800f4a8:	24000860 	.word	0x24000860
 800f4ac:	24000858 	.word	0x24000858

0800f4b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f4b4:	4b04      	ldr	r3, [pc, #16]	@ (800f4c8 <vTaskSuspendAll+0x18>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	4a03      	ldr	r2, [pc, #12]	@ (800f4c8 <vTaskSuspendAll+0x18>)
 800f4bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f4be:	bf00      	nop
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	2400087c 	.word	0x2400087c

0800f4cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f4da:	4b42      	ldr	r3, [pc, #264]	@ (800f5e4 <xTaskResumeAll+0x118>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d10b      	bne.n	800f4fa <xTaskResumeAll+0x2e>
	__asm volatile
 800f4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e6:	f383 8811 	msr	BASEPRI, r3
 800f4ea:	f3bf 8f6f 	isb	sy
 800f4ee:	f3bf 8f4f 	dsb	sy
 800f4f2:	603b      	str	r3, [r7, #0]
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	e7fd      	b.n	800f4f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4fa:	f000 fc15 	bl	800fd28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4fe:	4b39      	ldr	r3, [pc, #228]	@ (800f5e4 <xTaskResumeAll+0x118>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3b01      	subs	r3, #1
 800f504:	4a37      	ldr	r2, [pc, #220]	@ (800f5e4 <xTaskResumeAll+0x118>)
 800f506:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f508:	4b36      	ldr	r3, [pc, #216]	@ (800f5e4 <xTaskResumeAll+0x118>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d161      	bne.n	800f5d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f510:	4b35      	ldr	r3, [pc, #212]	@ (800f5e8 <xTaskResumeAll+0x11c>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d05d      	beq.n	800f5d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f518:	e02e      	b.n	800f578 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f51a:	4b34      	ldr	r3, [pc, #208]	@ (800f5ec <xTaskResumeAll+0x120>)
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	3318      	adds	r3, #24
 800f526:	4618      	mov	r0, r3
 800f528:	f7ff fd40 	bl	800efac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	3304      	adds	r3, #4
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff fd3b 	bl	800efac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f53a:	2201      	movs	r2, #1
 800f53c:	409a      	lsls	r2, r3
 800f53e:	4b2c      	ldr	r3, [pc, #176]	@ (800f5f0 <xTaskResumeAll+0x124>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4313      	orrs	r3, r2
 800f544:	4a2a      	ldr	r2, [pc, #168]	@ (800f5f0 <xTaskResumeAll+0x124>)
 800f546:	6013      	str	r3, [r2, #0]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f54c:	4613      	mov	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4a27      	ldr	r2, [pc, #156]	@ (800f5f4 <xTaskResumeAll+0x128>)
 800f556:	441a      	add	r2, r3
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	3304      	adds	r3, #4
 800f55c:	4619      	mov	r1, r3
 800f55e:	4610      	mov	r0, r2
 800f560:	f7ff fcc7 	bl	800eef2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f568:	4b23      	ldr	r3, [pc, #140]	@ (800f5f8 <xTaskResumeAll+0x12c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56e:	429a      	cmp	r2, r3
 800f570:	d302      	bcc.n	800f578 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f572:	4b22      	ldr	r3, [pc, #136]	@ (800f5fc <xTaskResumeAll+0x130>)
 800f574:	2201      	movs	r2, #1
 800f576:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f578:	4b1c      	ldr	r3, [pc, #112]	@ (800f5ec <xTaskResumeAll+0x120>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1cc      	bne.n	800f51a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f586:	f000 fa19 	bl	800f9bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f58a:	4b1d      	ldr	r3, [pc, #116]	@ (800f600 <xTaskResumeAll+0x134>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d010      	beq.n	800f5b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f596:	f000 f837 	bl	800f608 <xTaskIncrementTick>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f5a0:	4b16      	ldr	r3, [pc, #88]	@ (800f5fc <xTaskResumeAll+0x130>)
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1f1      	bne.n	800f596 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f5b2:	4b13      	ldr	r3, [pc, #76]	@ (800f600 <xTaskResumeAll+0x134>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f5b8:	4b10      	ldr	r3, [pc, #64]	@ (800f5fc <xTaskResumeAll+0x130>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d009      	beq.n	800f5d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f5c4:	4b0f      	ldr	r3, [pc, #60]	@ (800f604 <xTaskResumeAll+0x138>)
 800f5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f5d4:	f000 fbda 	bl	800fd8c <vPortExitCritical>

	return xAlreadyYielded;
 800f5d8:	68bb      	ldr	r3, [r7, #8]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	2400087c 	.word	0x2400087c
 800f5e8:	24000854 	.word	0x24000854
 800f5ec:	24000814 	.word	0x24000814
 800f5f0:	2400085c 	.word	0x2400085c
 800f5f4:	24000758 	.word	0x24000758
 800f5f8:	24000754 	.word	0x24000754
 800f5fc:	24000868 	.word	0x24000868
 800f600:	24000864 	.word	0x24000864
 800f604:	e000ed04 	.word	0xe000ed04

0800f608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f60e:	2300      	movs	r3, #0
 800f610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f612:	4b4f      	ldr	r3, [pc, #316]	@ (800f750 <xTaskIncrementTick+0x148>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	f040 808f 	bne.w	800f73a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f61c:	4b4d      	ldr	r3, [pc, #308]	@ (800f754 <xTaskIncrementTick+0x14c>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3301      	adds	r3, #1
 800f622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f624:	4a4b      	ldr	r2, [pc, #300]	@ (800f754 <xTaskIncrementTick+0x14c>)
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d121      	bne.n	800f674 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f630:	4b49      	ldr	r3, [pc, #292]	@ (800f758 <xTaskIncrementTick+0x150>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00b      	beq.n	800f652 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f63e:	f383 8811 	msr	BASEPRI, r3
 800f642:	f3bf 8f6f 	isb	sy
 800f646:	f3bf 8f4f 	dsb	sy
 800f64a:	603b      	str	r3, [r7, #0]
}
 800f64c:	bf00      	nop
 800f64e:	bf00      	nop
 800f650:	e7fd      	b.n	800f64e <xTaskIncrementTick+0x46>
 800f652:	4b41      	ldr	r3, [pc, #260]	@ (800f758 <xTaskIncrementTick+0x150>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	4b40      	ldr	r3, [pc, #256]	@ (800f75c <xTaskIncrementTick+0x154>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a3e      	ldr	r2, [pc, #248]	@ (800f758 <xTaskIncrementTick+0x150>)
 800f65e:	6013      	str	r3, [r2, #0]
 800f660:	4a3e      	ldr	r2, [pc, #248]	@ (800f75c <xTaskIncrementTick+0x154>)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6013      	str	r3, [r2, #0]
 800f666:	4b3e      	ldr	r3, [pc, #248]	@ (800f760 <xTaskIncrementTick+0x158>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3301      	adds	r3, #1
 800f66c:	4a3c      	ldr	r2, [pc, #240]	@ (800f760 <xTaskIncrementTick+0x158>)
 800f66e:	6013      	str	r3, [r2, #0]
 800f670:	f000 f9a4 	bl	800f9bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f674:	4b3b      	ldr	r3, [pc, #236]	@ (800f764 <xTaskIncrementTick+0x15c>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d348      	bcc.n	800f710 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f67e:	4b36      	ldr	r3, [pc, #216]	@ (800f758 <xTaskIncrementTick+0x150>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d104      	bne.n	800f692 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f688:	4b36      	ldr	r3, [pc, #216]	@ (800f764 <xTaskIncrementTick+0x15c>)
 800f68a:	f04f 32ff 	mov.w	r2, #4294967295
 800f68e:	601a      	str	r2, [r3, #0]
					break;
 800f690:	e03e      	b.n	800f710 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f692:	4b31      	ldr	r3, [pc, #196]	@ (800f758 <xTaskIncrementTick+0x150>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f6a2:	693a      	ldr	r2, [r7, #16]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d203      	bcs.n	800f6b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f6aa:	4a2e      	ldr	r2, [pc, #184]	@ (800f764 <xTaskIncrementTick+0x15c>)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f6b0:	e02e      	b.n	800f710 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7ff fc78 	bl	800efac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d004      	beq.n	800f6ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	3318      	adds	r3, #24
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7ff fc6f 	bl	800efac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	409a      	lsls	r2, r3
 800f6d6:	4b24      	ldr	r3, [pc, #144]	@ (800f768 <xTaskIncrementTick+0x160>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	4a22      	ldr	r2, [pc, #136]	@ (800f768 <xTaskIncrementTick+0x160>)
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	4a1f      	ldr	r2, [pc, #124]	@ (800f76c <xTaskIncrementTick+0x164>)
 800f6ee:	441a      	add	r2, r3
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4610      	mov	r0, r2
 800f6f8:	f7ff fbfb 	bl	800eef2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f700:	4b1b      	ldr	r3, [pc, #108]	@ (800f770 <xTaskIncrementTick+0x168>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f706:	429a      	cmp	r2, r3
 800f708:	d3b9      	bcc.n	800f67e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f70a:	2301      	movs	r3, #1
 800f70c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f70e:	e7b6      	b.n	800f67e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f710:	4b17      	ldr	r3, [pc, #92]	@ (800f770 <xTaskIncrementTick+0x168>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f716:	4915      	ldr	r1, [pc, #84]	@ (800f76c <xTaskIncrementTick+0x164>)
 800f718:	4613      	mov	r3, r2
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	4413      	add	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	440b      	add	r3, r1
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d901      	bls.n	800f72c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f728:	2301      	movs	r3, #1
 800f72a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f72c:	4b11      	ldr	r3, [pc, #68]	@ (800f774 <xTaskIncrementTick+0x16c>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d007      	beq.n	800f744 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f734:	2301      	movs	r3, #1
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	e004      	b.n	800f744 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f73a:	4b0f      	ldr	r3, [pc, #60]	@ (800f778 <xTaskIncrementTick+0x170>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3301      	adds	r3, #1
 800f740:	4a0d      	ldr	r2, [pc, #52]	@ (800f778 <xTaskIncrementTick+0x170>)
 800f742:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f744:	697b      	ldr	r3, [r7, #20]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3718      	adds	r7, #24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	2400087c 	.word	0x2400087c
 800f754:	24000858 	.word	0x24000858
 800f758:	2400080c 	.word	0x2400080c
 800f75c:	24000810 	.word	0x24000810
 800f760:	2400086c 	.word	0x2400086c
 800f764:	24000874 	.word	0x24000874
 800f768:	2400085c 	.word	0x2400085c
 800f76c:	24000758 	.word	0x24000758
 800f770:	24000754 	.word	0x24000754
 800f774:	24000868 	.word	0x24000868
 800f778:	24000864 	.word	0x24000864

0800f77c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f77c:	b480      	push	{r7}
 800f77e:	b087      	sub	sp, #28
 800f780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f782:	4b2a      	ldr	r3, [pc, #168]	@ (800f82c <vTaskSwitchContext+0xb0>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f78a:	4b29      	ldr	r3, [pc, #164]	@ (800f830 <vTaskSwitchContext+0xb4>)
 800f78c:	2201      	movs	r2, #1
 800f78e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f790:	e045      	b.n	800f81e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800f792:	4b27      	ldr	r3, [pc, #156]	@ (800f830 <vTaskSwitchContext+0xb4>)
 800f794:	2200      	movs	r2, #0
 800f796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f798:	4b26      	ldr	r3, [pc, #152]	@ (800f834 <vTaskSwitchContext+0xb8>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	fab3 f383 	clz	r3, r3
 800f7a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f7a6:	7afb      	ldrb	r3, [r7, #11]
 800f7a8:	f1c3 031f 	rsb	r3, r3, #31
 800f7ac:	617b      	str	r3, [r7, #20]
 800f7ae:	4922      	ldr	r1, [pc, #136]	@ (800f838 <vTaskSwitchContext+0xbc>)
 800f7b0:	697a      	ldr	r2, [r7, #20]
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	4413      	add	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	440b      	add	r3, r1
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d10b      	bne.n	800f7da <vTaskSwitchContext+0x5e>
	__asm volatile
 800f7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	607b      	str	r3, [r7, #4]
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop
 800f7d8:	e7fd      	b.n	800f7d6 <vTaskSwitchContext+0x5a>
 800f7da:	697a      	ldr	r2, [r7, #20]
 800f7dc:	4613      	mov	r3, r2
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4a14      	ldr	r2, [pc, #80]	@ (800f838 <vTaskSwitchContext+0xbc>)
 800f7e6:	4413      	add	r3, r2
 800f7e8:	613b      	str	r3, [r7, #16]
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	605a      	str	r2, [r3, #4]
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	3308      	adds	r3, #8
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d104      	bne.n	800f80a <vTaskSwitchContext+0x8e>
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	605a      	str	r2, [r3, #4]
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	4a0a      	ldr	r2, [pc, #40]	@ (800f83c <vTaskSwitchContext+0xc0>)
 800f812:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f814:	4b09      	ldr	r3, [pc, #36]	@ (800f83c <vTaskSwitchContext+0xc0>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	334c      	adds	r3, #76	@ 0x4c
 800f81a:	4a09      	ldr	r2, [pc, #36]	@ (800f840 <vTaskSwitchContext+0xc4>)
 800f81c:	6013      	str	r3, [r2, #0]
}
 800f81e:	bf00      	nop
 800f820:	371c      	adds	r7, #28
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	2400087c 	.word	0x2400087c
 800f830:	24000868 	.word	0x24000868
 800f834:	2400085c 	.word	0x2400085c
 800f838:	24000758 	.word	0x24000758
 800f83c:	24000754 	.word	0x24000754
 800f840:	24000120 	.word	0x24000120

0800f844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f84c:	f000 f852 	bl	800f8f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f850:	4b06      	ldr	r3, [pc, #24]	@ (800f86c <prvIdleTask+0x28>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d9f9      	bls.n	800f84c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f858:	4b05      	ldr	r3, [pc, #20]	@ (800f870 <prvIdleTask+0x2c>)
 800f85a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f85e:	601a      	str	r2, [r3, #0]
 800f860:	f3bf 8f4f 	dsb	sy
 800f864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f868:	e7f0      	b.n	800f84c <prvIdleTask+0x8>
 800f86a:	bf00      	nop
 800f86c:	24000758 	.word	0x24000758
 800f870:	e000ed04 	.word	0xe000ed04

0800f874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f87a:	2300      	movs	r3, #0
 800f87c:	607b      	str	r3, [r7, #4]
 800f87e:	e00c      	b.n	800f89a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	4613      	mov	r3, r2
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	4413      	add	r3, r2
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4a12      	ldr	r2, [pc, #72]	@ (800f8d4 <prvInitialiseTaskLists+0x60>)
 800f88c:	4413      	add	r3, r2
 800f88e:	4618      	mov	r0, r3
 800f890:	f7ff fb02 	bl	800ee98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	3301      	adds	r3, #1
 800f898:	607b      	str	r3, [r7, #4]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b06      	cmp	r3, #6
 800f89e:	d9ef      	bls.n	800f880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8a0:	480d      	ldr	r0, [pc, #52]	@ (800f8d8 <prvInitialiseTaskLists+0x64>)
 800f8a2:	f7ff faf9 	bl	800ee98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8a6:	480d      	ldr	r0, [pc, #52]	@ (800f8dc <prvInitialiseTaskLists+0x68>)
 800f8a8:	f7ff faf6 	bl	800ee98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8ac:	480c      	ldr	r0, [pc, #48]	@ (800f8e0 <prvInitialiseTaskLists+0x6c>)
 800f8ae:	f7ff faf3 	bl	800ee98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8b2:	480c      	ldr	r0, [pc, #48]	@ (800f8e4 <prvInitialiseTaskLists+0x70>)
 800f8b4:	f7ff faf0 	bl	800ee98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8b8:	480b      	ldr	r0, [pc, #44]	@ (800f8e8 <prvInitialiseTaskLists+0x74>)
 800f8ba:	f7ff faed 	bl	800ee98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8be:	4b0b      	ldr	r3, [pc, #44]	@ (800f8ec <prvInitialiseTaskLists+0x78>)
 800f8c0:	4a05      	ldr	r2, [pc, #20]	@ (800f8d8 <prvInitialiseTaskLists+0x64>)
 800f8c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f8f0 <prvInitialiseTaskLists+0x7c>)
 800f8c6:	4a05      	ldr	r2, [pc, #20]	@ (800f8dc <prvInitialiseTaskLists+0x68>)
 800f8c8:	601a      	str	r2, [r3, #0]
}
 800f8ca:	bf00      	nop
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	24000758 	.word	0x24000758
 800f8d8:	240007e4 	.word	0x240007e4
 800f8dc:	240007f8 	.word	0x240007f8
 800f8e0:	24000814 	.word	0x24000814
 800f8e4:	24000828 	.word	0x24000828
 800f8e8:	24000840 	.word	0x24000840
 800f8ec:	2400080c 	.word	0x2400080c
 800f8f0:	24000810 	.word	0x24000810

0800f8f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8fa:	e019      	b.n	800f930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f8fc:	f000 fa14 	bl	800fd28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f900:	4b10      	ldr	r3, [pc, #64]	@ (800f944 <prvCheckTasksWaitingTermination+0x50>)
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	3304      	adds	r3, #4
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7ff fb4d 	bl	800efac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f912:	4b0d      	ldr	r3, [pc, #52]	@ (800f948 <prvCheckTasksWaitingTermination+0x54>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	3b01      	subs	r3, #1
 800f918:	4a0b      	ldr	r2, [pc, #44]	@ (800f948 <prvCheckTasksWaitingTermination+0x54>)
 800f91a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f91c:	4b0b      	ldr	r3, [pc, #44]	@ (800f94c <prvCheckTasksWaitingTermination+0x58>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	3b01      	subs	r3, #1
 800f922:	4a0a      	ldr	r2, [pc, #40]	@ (800f94c <prvCheckTasksWaitingTermination+0x58>)
 800f924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f926:	f000 fa31 	bl	800fd8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f810 	bl	800f950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f930:	4b06      	ldr	r3, [pc, #24]	@ (800f94c <prvCheckTasksWaitingTermination+0x58>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d1e1      	bne.n	800f8fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f938:	bf00      	nop
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	24000828 	.word	0x24000828
 800f948:	24000854 	.word	0x24000854
 800f94c:	2400083c 	.word	0x2400083c

0800f950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	334c      	adds	r3, #76	@ 0x4c
 800f95c:	4618      	mov	r0, r3
 800f95e:	f001 f9d3 	bl	8010d08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d108      	bne.n	800f97e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f970:	4618      	mov	r0, r3
 800f972:	f000 fb87 	bl	8010084 <vPortFree>
				vPortFree( pxTCB );
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fb84 	bl	8010084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f97c:	e019      	b.n	800f9b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f984:	2b01      	cmp	r3, #1
 800f986:	d103      	bne.n	800f990 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 fb7b 	bl	8010084 <vPortFree>
	}
 800f98e:	e010      	b.n	800f9b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f996:	2b02      	cmp	r3, #2
 800f998:	d00b      	beq.n	800f9b2 <prvDeleteTCB+0x62>
	__asm volatile
 800f99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99e:	f383 8811 	msr	BASEPRI, r3
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	60fb      	str	r3, [r7, #12]
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	e7fd      	b.n	800f9ae <prvDeleteTCB+0x5e>
	}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
	...

0800f9bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f9f4 <prvResetNextTaskUnblockTime+0x38>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d104      	bne.n	800f9d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800f9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9d4:	e008      	b.n	800f9e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d6:	4b07      	ldr	r3, [pc, #28]	@ (800f9f4 <prvResetNextTaskUnblockTime+0x38>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	4a04      	ldr	r2, [pc, #16]	@ (800f9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800f9e6:	6013      	str	r3, [r2, #0]
}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr
 800f9f4:	2400080c 	.word	0x2400080c
 800f9f8:	24000874 	.word	0x24000874

0800f9fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fa06:	4b29      	ldr	r3, [pc, #164]	@ (800faac <prvAddCurrentTaskToDelayedList+0xb0>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa0c:	4b28      	ldr	r3, [pc, #160]	@ (800fab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3304      	adds	r3, #4
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7ff faca 	bl	800efac <uxListRemove>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d10b      	bne.n	800fa36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fa1e:	4b24      	ldr	r3, [pc, #144]	@ (800fab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa24:	2201      	movs	r2, #1
 800fa26:	fa02 f303 	lsl.w	r3, r2, r3
 800fa2a:	43da      	mvns	r2, r3
 800fa2c:	4b21      	ldr	r3, [pc, #132]	@ (800fab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4013      	ands	r3, r2
 800fa32:	4a20      	ldr	r2, [pc, #128]	@ (800fab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fa34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3c:	d10a      	bne.n	800fa54 <prvAddCurrentTaskToDelayedList+0x58>
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d007      	beq.n	800fa54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa44:	4b1a      	ldr	r3, [pc, #104]	@ (800fab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	481a      	ldr	r0, [pc, #104]	@ (800fab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fa4e:	f7ff fa50 	bl	800eef2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fa52:	e026      	b.n	800faa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4413      	add	r3, r2
 800fa5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fa5c:	4b14      	ldr	r3, [pc, #80]	@ (800fab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	68ba      	ldr	r2, [r7, #8]
 800fa62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fa64:	68ba      	ldr	r2, [r7, #8]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d209      	bcs.n	800fa80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa6c:	4b13      	ldr	r3, [pc, #76]	@ (800fabc <prvAddCurrentTaskToDelayedList+0xc0>)
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	4b0f      	ldr	r3, [pc, #60]	@ (800fab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3304      	adds	r3, #4
 800fa76:	4619      	mov	r1, r3
 800fa78:	4610      	mov	r0, r2
 800fa7a:	f7ff fa5e 	bl	800ef3a <vListInsert>
}
 800fa7e:	e010      	b.n	800faa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa80:	4b0f      	ldr	r3, [pc, #60]	@ (800fac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	4b0a      	ldr	r3, [pc, #40]	@ (800fab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3304      	adds	r3, #4
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	4610      	mov	r0, r2
 800fa8e:	f7ff fa54 	bl	800ef3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa92:	4b0c      	ldr	r3, [pc, #48]	@ (800fac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d202      	bcs.n	800faa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fa9c:	4a09      	ldr	r2, [pc, #36]	@ (800fac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	6013      	str	r3, [r2, #0]
}
 800faa2:	bf00      	nop
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	24000858 	.word	0x24000858
 800fab0:	24000754 	.word	0x24000754
 800fab4:	2400085c 	.word	0x2400085c
 800fab8:	24000840 	.word	0x24000840
 800fabc:	24000810 	.word	0x24000810
 800fac0:	2400080c 	.word	0x2400080c
 800fac4:	24000874 	.word	0x24000874

0800fac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	3b04      	subs	r3, #4
 800fad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3b04      	subs	r3, #4
 800fae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f023 0201 	bic.w	r2, r3, #1
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3b04      	subs	r3, #4
 800faf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800faf8:	4a0c      	ldr	r2, [pc, #48]	@ (800fb2c <pxPortInitialiseStack+0x64>)
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3b14      	subs	r3, #20
 800fb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	3b04      	subs	r3, #4
 800fb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f06f 0202 	mvn.w	r2, #2
 800fb16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	3b20      	subs	r3, #32
 800fb1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	0800fb31 	.word	0x0800fb31

0800fb30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb30:	b480      	push	{r7}
 800fb32:	b085      	sub	sp, #20
 800fb34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb36:	2300      	movs	r3, #0
 800fb38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb3a:	4b13      	ldr	r3, [pc, #76]	@ (800fb88 <prvTaskExitError+0x58>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb42:	d00b      	beq.n	800fb5c <prvTaskExitError+0x2c>
	__asm volatile
 800fb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	60fb      	str	r3, [r7, #12]
}
 800fb56:	bf00      	nop
 800fb58:	bf00      	nop
 800fb5a:	e7fd      	b.n	800fb58 <prvTaskExitError+0x28>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	60bb      	str	r3, [r7, #8]
}
 800fb6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb70:	bf00      	nop
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d0fc      	beq.n	800fb72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb78:	bf00      	nop
 800fb7a:	bf00      	nop
 800fb7c:	3714      	adds	r7, #20
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	240000b4 	.word	0x240000b4
 800fb8c:	00000000 	.word	0x00000000

0800fb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb90:	4b07      	ldr	r3, [pc, #28]	@ (800fbb0 <pxCurrentTCBConst2>)
 800fb92:	6819      	ldr	r1, [r3, #0]
 800fb94:	6808      	ldr	r0, [r1, #0]
 800fb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9a:	f380 8809 	msr	PSP, r0
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	f04f 0000 	mov.w	r0, #0
 800fba6:	f380 8811 	msr	BASEPRI, r0
 800fbaa:	4770      	bx	lr
 800fbac:	f3af 8000 	nop.w

0800fbb0 <pxCurrentTCBConst2>:
 800fbb0:	24000754 	.word	0x24000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fbb4:	bf00      	nop
 800fbb6:	bf00      	nop

0800fbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbb8:	4808      	ldr	r0, [pc, #32]	@ (800fbdc <prvPortStartFirstTask+0x24>)
 800fbba:	6800      	ldr	r0, [r0, #0]
 800fbbc:	6800      	ldr	r0, [r0, #0]
 800fbbe:	f380 8808 	msr	MSP, r0
 800fbc2:	f04f 0000 	mov.w	r0, #0
 800fbc6:	f380 8814 	msr	CONTROL, r0
 800fbca:	b662      	cpsie	i
 800fbcc:	b661      	cpsie	f
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	df00      	svc	0
 800fbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbda:	bf00      	nop
 800fbdc:	e000ed08 	.word	0xe000ed08

0800fbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbe6:	4b47      	ldr	r3, [pc, #284]	@ (800fd04 <xPortStartScheduler+0x124>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a47      	ldr	r2, [pc, #284]	@ (800fd08 <xPortStartScheduler+0x128>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d10b      	bne.n	800fc08 <xPortStartScheduler+0x28>
	__asm volatile
 800fbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf4:	f383 8811 	msr	BASEPRI, r3
 800fbf8:	f3bf 8f6f 	isb	sy
 800fbfc:	f3bf 8f4f 	dsb	sy
 800fc00:	60fb      	str	r3, [r7, #12]
}
 800fc02:	bf00      	nop
 800fc04:	bf00      	nop
 800fc06:	e7fd      	b.n	800fc04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc08:	4b3e      	ldr	r3, [pc, #248]	@ (800fd04 <xPortStartScheduler+0x124>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd0c <xPortStartScheduler+0x12c>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d10b      	bne.n	800fc2a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	613b      	str	r3, [r7, #16]
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	e7fd      	b.n	800fc26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc2a:	4b39      	ldr	r3, [pc, #228]	@ (800fd10 <xPortStartScheduler+0x130>)
 800fc2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	22ff      	movs	r2, #255	@ 0xff
 800fc3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc44:	78fb      	ldrb	r3, [r7, #3]
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc4c:	b2da      	uxtb	r2, r3
 800fc4e:	4b31      	ldr	r3, [pc, #196]	@ (800fd14 <xPortStartScheduler+0x134>)
 800fc50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc52:	4b31      	ldr	r3, [pc, #196]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc54:	2207      	movs	r2, #7
 800fc56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc58:	e009      	b.n	800fc6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc5a:	4b2f      	ldr	r3, [pc, #188]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	4a2d      	ldr	r2, [pc, #180]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc64:	78fb      	ldrb	r3, [r7, #3]
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc6e:	78fb      	ldrb	r3, [r7, #3]
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc76:	2b80      	cmp	r3, #128	@ 0x80
 800fc78:	d0ef      	beq.n	800fc5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc7a:	4b27      	ldr	r3, [pc, #156]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f1c3 0307 	rsb	r3, r3, #7
 800fc82:	2b04      	cmp	r3, #4
 800fc84:	d00b      	beq.n	800fc9e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc8a:	f383 8811 	msr	BASEPRI, r3
 800fc8e:	f3bf 8f6f 	isb	sy
 800fc92:	f3bf 8f4f 	dsb	sy
 800fc96:	60bb      	str	r3, [r7, #8]
}
 800fc98:	bf00      	nop
 800fc9a:	bf00      	nop
 800fc9c:	e7fd      	b.n	800fc9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	021b      	lsls	r3, r3, #8
 800fca4:	4a1c      	ldr	r2, [pc, #112]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fca8:	4b1b      	ldr	r3, [pc, #108]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fcb0:	4a19      	ldr	r2, [pc, #100]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fcb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fcbc:	4b17      	ldr	r3, [pc, #92]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a16      	ldr	r2, [pc, #88]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fcc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcc8:	4b14      	ldr	r3, [pc, #80]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a13      	ldr	r2, [pc, #76]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fcd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcd4:	f000 f8da 	bl	800fe8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcd8:	4b11      	ldr	r3, [pc, #68]	@ (800fd20 <xPortStartScheduler+0x140>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcde:	f000 f8f9 	bl	800fed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fce2:	4b10      	ldr	r3, [pc, #64]	@ (800fd24 <xPortStartScheduler+0x144>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a0f      	ldr	r2, [pc, #60]	@ (800fd24 <xPortStartScheduler+0x144>)
 800fce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fcec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcee:	f7ff ff63 	bl	800fbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcf2:	f7ff fd43 	bl	800f77c <vTaskSwitchContext>
	prvTaskExitError();
 800fcf6:	f7ff ff1b 	bl	800fb30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	e000ed00 	.word	0xe000ed00
 800fd08:	410fc271 	.word	0x410fc271
 800fd0c:	410fc270 	.word	0x410fc270
 800fd10:	e000e400 	.word	0xe000e400
 800fd14:	24000880 	.word	0x24000880
 800fd18:	24000884 	.word	0x24000884
 800fd1c:	e000ed20 	.word	0xe000ed20
 800fd20:	240000b4 	.word	0x240000b4
 800fd24:	e000ef34 	.word	0xe000ef34

0800fd28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	607b      	str	r3, [r7, #4]
}
 800fd40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd42:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3301      	adds	r3, #1
 800fd48:	4a0e      	ldr	r2, [pc, #56]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d110      	bne.n	800fd76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd54:	4b0c      	ldr	r3, [pc, #48]	@ (800fd88 <vPortEnterCritical+0x60>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00b      	beq.n	800fd76 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	603b      	str	r3, [r7, #0]
}
 800fd70:	bf00      	nop
 800fd72:	bf00      	nop
 800fd74:	e7fd      	b.n	800fd72 <vPortEnterCritical+0x4a>
	}
}
 800fd76:	bf00      	nop
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	240000b4 	.word	0x240000b4
 800fd88:	e000ed04 	.word	0xe000ed04

0800fd8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd92:	4b12      	ldr	r3, [pc, #72]	@ (800fddc <vPortExitCritical+0x50>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d10b      	bne.n	800fdb2 <vPortExitCritical+0x26>
	__asm volatile
 800fd9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd9e:	f383 8811 	msr	BASEPRI, r3
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	f3bf 8f4f 	dsb	sy
 800fdaa:	607b      	str	r3, [r7, #4]
}
 800fdac:	bf00      	nop
 800fdae:	bf00      	nop
 800fdb0:	e7fd      	b.n	800fdae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fdb2:	4b0a      	ldr	r3, [pc, #40]	@ (800fddc <vPortExitCritical+0x50>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	4a08      	ldr	r2, [pc, #32]	@ (800fddc <vPortExitCritical+0x50>)
 800fdba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fdbc:	4b07      	ldr	r3, [pc, #28]	@ (800fddc <vPortExitCritical+0x50>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d105      	bne.n	800fdd0 <vPortExitCritical+0x44>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fdce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdd0:	bf00      	nop
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr
 800fddc:	240000b4 	.word	0x240000b4

0800fde0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fde0:	f3ef 8009 	mrs	r0, PSP
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	4b15      	ldr	r3, [pc, #84]	@ (800fe40 <pxCurrentTCBConst>)
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	f01e 0f10 	tst.w	lr, #16
 800fdf0:	bf08      	it	eq
 800fdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfa:	6010      	str	r0, [r2, #0]
 800fdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe04:	f380 8811 	msr	BASEPRI, r0
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f7ff fcb4 	bl	800f77c <vTaskSwitchContext>
 800fe14:	f04f 0000 	mov.w	r0, #0
 800fe18:	f380 8811 	msr	BASEPRI, r0
 800fe1c:	bc09      	pop	{r0, r3}
 800fe1e:	6819      	ldr	r1, [r3, #0]
 800fe20:	6808      	ldr	r0, [r1, #0]
 800fe22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe26:	f01e 0f10 	tst.w	lr, #16
 800fe2a:	bf08      	it	eq
 800fe2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe30:	f380 8809 	msr	PSP, r0
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	f3af 8000 	nop.w

0800fe40 <pxCurrentTCBConst>:
 800fe40:	24000754 	.word	0x24000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop

0800fe48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	607b      	str	r3, [r7, #4]
}
 800fe60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe62:	f7ff fbd1 	bl	800f608 <xTaskIncrementTick>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d003      	beq.n	800fe74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe6c:	4b06      	ldr	r3, [pc, #24]	@ (800fe88 <SysTick_Handler+0x40>)
 800fe6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe72:	601a      	str	r2, [r3, #0]
 800fe74:	2300      	movs	r3, #0
 800fe76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	f383 8811 	msr	BASEPRI, r3
}
 800fe7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	e000ed04 	.word	0xe000ed04

0800fe8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe90:	4b0b      	ldr	r3, [pc, #44]	@ (800fec0 <vPortSetupTimerInterrupt+0x34>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe96:	4b0b      	ldr	r3, [pc, #44]	@ (800fec4 <vPortSetupTimerInterrupt+0x38>)
 800fe98:	2200      	movs	r2, #0
 800fe9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe9c:	4b0a      	ldr	r3, [pc, #40]	@ (800fec8 <vPortSetupTimerInterrupt+0x3c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a0a      	ldr	r2, [pc, #40]	@ (800fecc <vPortSetupTimerInterrupt+0x40>)
 800fea2:	fba2 2303 	umull	r2, r3, r2, r3
 800fea6:	099b      	lsrs	r3, r3, #6
 800fea8:	4a09      	ldr	r2, [pc, #36]	@ (800fed0 <vPortSetupTimerInterrupt+0x44>)
 800feaa:	3b01      	subs	r3, #1
 800feac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800feae:	4b04      	ldr	r3, [pc, #16]	@ (800fec0 <vPortSetupTimerInterrupt+0x34>)
 800feb0:	2207      	movs	r2, #7
 800feb2:	601a      	str	r2, [r3, #0]
}
 800feb4:	bf00      	nop
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	e000e010 	.word	0xe000e010
 800fec4:	e000e018 	.word	0xe000e018
 800fec8:	24000000 	.word	0x24000000
 800fecc:	10624dd3 	.word	0x10624dd3
 800fed0:	e000e014 	.word	0xe000e014

0800fed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fee4 <vPortEnableVFP+0x10>
 800fed8:	6801      	ldr	r1, [r0, #0]
 800feda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fede:	6001      	str	r1, [r0, #0]
 800fee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fee2:	bf00      	nop
 800fee4:	e000ed88 	.word	0xe000ed88

0800fee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b08a      	sub	sp, #40	@ 0x28
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fef0:	2300      	movs	r3, #0
 800fef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fef4:	f7ff fadc 	bl	800f4b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fef8:	4b5c      	ldr	r3, [pc, #368]	@ (801006c <pvPortMalloc+0x184>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d101      	bne.n	800ff04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff00:	f000 f924 	bl	801014c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff04:	4b5a      	ldr	r3, [pc, #360]	@ (8010070 <pvPortMalloc+0x188>)
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f040 8095 	bne.w	801003c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d01e      	beq.n	800ff56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff18:	2208      	movs	r2, #8
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f003 0307 	and.w	r3, r3, #7
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d015      	beq.n	800ff56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f023 0307 	bic.w	r3, r3, #7
 800ff30:	3308      	adds	r3, #8
 800ff32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f003 0307 	and.w	r3, r3, #7
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00b      	beq.n	800ff56 <pvPortMalloc+0x6e>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	617b      	str	r3, [r7, #20]
}
 800ff50:	bf00      	nop
 800ff52:	bf00      	nop
 800ff54:	e7fd      	b.n	800ff52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d06f      	beq.n	801003c <pvPortMalloc+0x154>
 800ff5c:	4b45      	ldr	r3, [pc, #276]	@ (8010074 <pvPortMalloc+0x18c>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d86a      	bhi.n	801003c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff66:	4b44      	ldr	r3, [pc, #272]	@ (8010078 <pvPortMalloc+0x190>)
 800ff68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff6a:	4b43      	ldr	r3, [pc, #268]	@ (8010078 <pvPortMalloc+0x190>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff70:	e004      	b.n	800ff7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ff72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d903      	bls.n	800ff8e <pvPortMalloc+0xa6>
 800ff86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d1f1      	bne.n	800ff72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff8e:	4b37      	ldr	r3, [pc, #220]	@ (801006c <pvPortMalloc+0x184>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d051      	beq.n	801003c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2208      	movs	r2, #8
 800ff9e:	4413      	add	r3, r2
 800ffa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ffa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffac:	685a      	ldr	r2, [r3, #4]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	1ad2      	subs	r2, r2, r3
 800ffb2:	2308      	movs	r3, #8
 800ffb4:	005b      	lsls	r3, r3, #1
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d920      	bls.n	800fffc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ffba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	f003 0307 	and.w	r3, r3, #7
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00b      	beq.n	800ffe4 <pvPortMalloc+0xfc>
	__asm volatile
 800ffcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffd0:	f383 8811 	msr	BASEPRI, r3
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	613b      	str	r3, [r7, #16]
}
 800ffde:	bf00      	nop
 800ffe0:	bf00      	nop
 800ffe2:	e7fd      	b.n	800ffe0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe6:	685a      	ldr	r2, [r3, #4]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	1ad2      	subs	r2, r2, r3
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fff6:	69b8      	ldr	r0, [r7, #24]
 800fff8:	f000 f90a 	bl	8010210 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fffc:	4b1d      	ldr	r3, [pc, #116]	@ (8010074 <pvPortMalloc+0x18c>)
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	4a1b      	ldr	r2, [pc, #108]	@ (8010074 <pvPortMalloc+0x18c>)
 8010008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801000a:	4b1a      	ldr	r3, [pc, #104]	@ (8010074 <pvPortMalloc+0x18c>)
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	4b1b      	ldr	r3, [pc, #108]	@ (801007c <pvPortMalloc+0x194>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d203      	bcs.n	801001e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010016:	4b17      	ldr	r3, [pc, #92]	@ (8010074 <pvPortMalloc+0x18c>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a18      	ldr	r2, [pc, #96]	@ (801007c <pvPortMalloc+0x194>)
 801001c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801001e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010020:	685a      	ldr	r2, [r3, #4]
 8010022:	4b13      	ldr	r3, [pc, #76]	@ (8010070 <pvPortMalloc+0x188>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	431a      	orrs	r2, r3
 8010028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801002c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002e:	2200      	movs	r2, #0
 8010030:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010032:	4b13      	ldr	r3, [pc, #76]	@ (8010080 <pvPortMalloc+0x198>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	3301      	adds	r3, #1
 8010038:	4a11      	ldr	r2, [pc, #68]	@ (8010080 <pvPortMalloc+0x198>)
 801003a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801003c:	f7ff fa46 	bl	800f4cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	f003 0307 	and.w	r3, r3, #7
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00b      	beq.n	8010062 <pvPortMalloc+0x17a>
	__asm volatile
 801004a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801004e:	f383 8811 	msr	BASEPRI, r3
 8010052:	f3bf 8f6f 	isb	sy
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	60fb      	str	r3, [r7, #12]
}
 801005c:	bf00      	nop
 801005e:	bf00      	nop
 8010060:	e7fd      	b.n	801005e <pvPortMalloc+0x176>
	return pvReturn;
 8010062:	69fb      	ldr	r3, [r7, #28]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3728      	adds	r7, #40	@ 0x28
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	24004490 	.word	0x24004490
 8010070:	240044a4 	.word	0x240044a4
 8010074:	24004494 	.word	0x24004494
 8010078:	24004488 	.word	0x24004488
 801007c:	24004498 	.word	0x24004498
 8010080:	2400449c 	.word	0x2400449c

08010084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b086      	sub	sp, #24
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d04f      	beq.n	8010136 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010096:	2308      	movs	r3, #8
 8010098:	425b      	negs	r3, r3
 801009a:	697a      	ldr	r2, [r7, #20]
 801009c:	4413      	add	r3, r2
 801009e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	685a      	ldr	r2, [r3, #4]
 80100a8:	4b25      	ldr	r3, [pc, #148]	@ (8010140 <vPortFree+0xbc>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4013      	ands	r3, r2
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10b      	bne.n	80100ca <vPortFree+0x46>
	__asm volatile
 80100b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	60fb      	str	r3, [r7, #12]
}
 80100c4:	bf00      	nop
 80100c6:	bf00      	nop
 80100c8:	e7fd      	b.n	80100c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00b      	beq.n	80100ea <vPortFree+0x66>
	__asm volatile
 80100d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100d6:	f383 8811 	msr	BASEPRI, r3
 80100da:	f3bf 8f6f 	isb	sy
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	60bb      	str	r3, [r7, #8]
}
 80100e4:	bf00      	nop
 80100e6:	bf00      	nop
 80100e8:	e7fd      	b.n	80100e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	4b14      	ldr	r3, [pc, #80]	@ (8010140 <vPortFree+0xbc>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4013      	ands	r3, r2
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d01e      	beq.n	8010136 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d11a      	bne.n	8010136 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	685a      	ldr	r2, [r3, #4]
 8010104:	4b0e      	ldr	r3, [pc, #56]	@ (8010140 <vPortFree+0xbc>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	43db      	mvns	r3, r3
 801010a:	401a      	ands	r2, r3
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010110:	f7ff f9ce 	bl	800f4b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	685a      	ldr	r2, [r3, #4]
 8010118:	4b0a      	ldr	r3, [pc, #40]	@ (8010144 <vPortFree+0xc0>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4413      	add	r3, r2
 801011e:	4a09      	ldr	r2, [pc, #36]	@ (8010144 <vPortFree+0xc0>)
 8010120:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010122:	6938      	ldr	r0, [r7, #16]
 8010124:	f000 f874 	bl	8010210 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010128:	4b07      	ldr	r3, [pc, #28]	@ (8010148 <vPortFree+0xc4>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3301      	adds	r3, #1
 801012e:	4a06      	ldr	r2, [pc, #24]	@ (8010148 <vPortFree+0xc4>)
 8010130:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010132:	f7ff f9cb 	bl	800f4cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010136:	bf00      	nop
 8010138:	3718      	adds	r7, #24
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	240044a4 	.word	0x240044a4
 8010144:	24004494 	.word	0x24004494
 8010148:	240044a0 	.word	0x240044a0

0801014c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010152:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010156:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010158:	4b27      	ldr	r3, [pc, #156]	@ (80101f8 <prvHeapInit+0xac>)
 801015a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f003 0307 	and.w	r3, r3, #7
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00c      	beq.n	8010180 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3307      	adds	r3, #7
 801016a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f023 0307 	bic.w	r3, r3, #7
 8010172:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	4a1f      	ldr	r2, [pc, #124]	@ (80101f8 <prvHeapInit+0xac>)
 801017c:	4413      	add	r3, r2
 801017e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010184:	4a1d      	ldr	r2, [pc, #116]	@ (80101fc <prvHeapInit+0xb0>)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801018a:	4b1c      	ldr	r3, [pc, #112]	@ (80101fc <prvHeapInit+0xb0>)
 801018c:	2200      	movs	r2, #0
 801018e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	68ba      	ldr	r2, [r7, #8]
 8010194:	4413      	add	r3, r2
 8010196:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010198:	2208      	movs	r2, #8
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	1a9b      	subs	r3, r3, r2
 801019e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f023 0307 	bic.w	r3, r3, #7
 80101a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	4a15      	ldr	r2, [pc, #84]	@ (8010200 <prvHeapInit+0xb4>)
 80101ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101ae:	4b14      	ldr	r3, [pc, #80]	@ (8010200 <prvHeapInit+0xb4>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2200      	movs	r2, #0
 80101b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101b6:	4b12      	ldr	r3, [pc, #72]	@ (8010200 <prvHeapInit+0xb4>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2200      	movs	r2, #0
 80101bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	68fa      	ldr	r2, [r7, #12]
 80101c6:	1ad2      	subs	r2, r2, r3
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80101cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010200 <prvHeapInit+0xb4>)
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	4a0a      	ldr	r2, [pc, #40]	@ (8010204 <prvHeapInit+0xb8>)
 80101da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	4a09      	ldr	r2, [pc, #36]	@ (8010208 <prvHeapInit+0xbc>)
 80101e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101e4:	4b09      	ldr	r3, [pc, #36]	@ (801020c <prvHeapInit+0xc0>)
 80101e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80101ea:	601a      	str	r2, [r3, #0]
}
 80101ec:	bf00      	nop
 80101ee:	3714      	adds	r7, #20
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	24000888 	.word	0x24000888
 80101fc:	24004488 	.word	0x24004488
 8010200:	24004490 	.word	0x24004490
 8010204:	24004498 	.word	0x24004498
 8010208:	24004494 	.word	0x24004494
 801020c:	240044a4 	.word	0x240044a4

08010210 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010210:	b480      	push	{r7}
 8010212:	b085      	sub	sp, #20
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010218:	4b28      	ldr	r3, [pc, #160]	@ (80102bc <prvInsertBlockIntoFreeList+0xac>)
 801021a:	60fb      	str	r3, [r7, #12]
 801021c:	e002      	b.n	8010224 <prvInsertBlockIntoFreeList+0x14>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	429a      	cmp	r2, r3
 801022c:	d8f7      	bhi.n	801021e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	4413      	add	r3, r2
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	429a      	cmp	r2, r3
 801023e:	d108      	bne.n	8010252 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	685a      	ldr	r2, [r3, #4]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	441a      	add	r2, r3
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	441a      	add	r2, r3
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	429a      	cmp	r2, r3
 8010264:	d118      	bne.n	8010298 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	4b15      	ldr	r3, [pc, #84]	@ (80102c0 <prvInsertBlockIntoFreeList+0xb0>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	429a      	cmp	r2, r3
 8010270:	d00d      	beq.n	801028e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	685a      	ldr	r2, [r3, #4]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	441a      	add	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	e008      	b.n	80102a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801028e:	4b0c      	ldr	r3, [pc, #48]	@ (80102c0 <prvInsertBlockIntoFreeList+0xb0>)
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	601a      	str	r2, [r3, #0]
 8010296:	e003      	b.n	80102a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d002      	beq.n	80102ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102ae:	bf00      	nop
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	24004488 	.word	0x24004488
 80102c0:	24004490 	.word	0x24004490

080102c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80102c8:	2200      	movs	r2, #0
 80102ca:	4913      	ldr	r1, [pc, #76]	@ (8010318 <MX_USB_DEVICE_Init+0x54>)
 80102cc:	4813      	ldr	r0, [pc, #76]	@ (801031c <MX_USB_DEVICE_Init+0x58>)
 80102ce:	f7fd f9dd 	bl	800d68c <USBD_Init>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d001      	beq.n	80102dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80102d8:	f7f1 f834 	bl	8001344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80102dc:	4910      	ldr	r1, [pc, #64]	@ (8010320 <MX_USB_DEVICE_Init+0x5c>)
 80102de:	480f      	ldr	r0, [pc, #60]	@ (801031c <MX_USB_DEVICE_Init+0x58>)
 80102e0:	f7fd fa04 	bl	800d6ec <USBD_RegisterClass>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d001      	beq.n	80102ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80102ea:	f7f1 f82b 	bl	8001344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80102ee:	490d      	ldr	r1, [pc, #52]	@ (8010324 <MX_USB_DEVICE_Init+0x60>)
 80102f0:	480a      	ldr	r0, [pc, #40]	@ (801031c <MX_USB_DEVICE_Init+0x58>)
 80102f2:	f7fd f93b 	bl	800d56c <USBD_CDC_RegisterInterface>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d001      	beq.n	8010300 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80102fc:	f7f1 f822 	bl	8001344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010300:	4806      	ldr	r0, [pc, #24]	@ (801031c <MX_USB_DEVICE_Init+0x58>)
 8010302:	f7fd fa29 	bl	800d758 <USBD_Start>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d001      	beq.n	8010310 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801030c:	f7f1 f81a 	bl	8001344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010310:	f7f5 fdbe 	bl	8005e90 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010314:	bf00      	nop
 8010316:	bd80      	pop	{r7, pc}
 8010318:	240000cc 	.word	0x240000cc
 801031c:	240044a8 	.word	0x240044a8
 8010320:	24000034 	.word	0x24000034
 8010324:	240000b8 	.word	0x240000b8

08010328 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801032c:	2200      	movs	r2, #0
 801032e:	4905      	ldr	r1, [pc, #20]	@ (8010344 <CDC_Init_FS+0x1c>)
 8010330:	4805      	ldr	r0, [pc, #20]	@ (8010348 <CDC_Init_FS+0x20>)
 8010332:	f7fd f935 	bl	800d5a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010336:	4905      	ldr	r1, [pc, #20]	@ (801034c <CDC_Init_FS+0x24>)
 8010338:	4803      	ldr	r0, [pc, #12]	@ (8010348 <CDC_Init_FS+0x20>)
 801033a:	f7fd f953 	bl	800d5e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801033e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010340:	4618      	mov	r0, r3
 8010342:	bd80      	pop	{r7, pc}
 8010344:	24004f84 	.word	0x24004f84
 8010348:	240044a8 	.word	0x240044a8
 801034c:	24004784 	.word	0x24004784

08010350 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010350:	b480      	push	{r7}
 8010352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010354:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010356:	4618      	mov	r0, r3
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	4603      	mov	r3, r0
 8010368:	6039      	str	r1, [r7, #0]
 801036a:	71fb      	strb	r3, [r7, #7]
 801036c:	4613      	mov	r3, r2
 801036e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	2b23      	cmp	r3, #35	@ 0x23
 8010374:	d84a      	bhi.n	801040c <CDC_Control_FS+0xac>
 8010376:	a201      	add	r2, pc, #4	@ (adr r2, 801037c <CDC_Control_FS+0x1c>)
 8010378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801037c:	0801040d 	.word	0x0801040d
 8010380:	0801040d 	.word	0x0801040d
 8010384:	0801040d 	.word	0x0801040d
 8010388:	0801040d 	.word	0x0801040d
 801038c:	0801040d 	.word	0x0801040d
 8010390:	0801040d 	.word	0x0801040d
 8010394:	0801040d 	.word	0x0801040d
 8010398:	0801040d 	.word	0x0801040d
 801039c:	0801040d 	.word	0x0801040d
 80103a0:	0801040d 	.word	0x0801040d
 80103a4:	0801040d 	.word	0x0801040d
 80103a8:	0801040d 	.word	0x0801040d
 80103ac:	0801040d 	.word	0x0801040d
 80103b0:	0801040d 	.word	0x0801040d
 80103b4:	0801040d 	.word	0x0801040d
 80103b8:	0801040d 	.word	0x0801040d
 80103bc:	0801040d 	.word	0x0801040d
 80103c0:	0801040d 	.word	0x0801040d
 80103c4:	0801040d 	.word	0x0801040d
 80103c8:	0801040d 	.word	0x0801040d
 80103cc:	0801040d 	.word	0x0801040d
 80103d0:	0801040d 	.word	0x0801040d
 80103d4:	0801040d 	.word	0x0801040d
 80103d8:	0801040d 	.word	0x0801040d
 80103dc:	0801040d 	.word	0x0801040d
 80103e0:	0801040d 	.word	0x0801040d
 80103e4:	0801040d 	.word	0x0801040d
 80103e8:	0801040d 	.word	0x0801040d
 80103ec:	0801040d 	.word	0x0801040d
 80103f0:	0801040d 	.word	0x0801040d
 80103f4:	0801040d 	.word	0x0801040d
 80103f8:	0801040d 	.word	0x0801040d
 80103fc:	0801040d 	.word	0x0801040d
 8010400:	0801040d 	.word	0x0801040d
 8010404:	0801040d 	.word	0x0801040d
 8010408:	0801040d 	.word	0x0801040d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801040c:	bf00      	nop
  }

  return (USBD_OK);
 801040e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010410:	4618      	mov	r0, r3
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010426:	6879      	ldr	r1, [r7, #4]
 8010428:	4805      	ldr	r0, [pc, #20]	@ (8010440 <CDC_Receive_FS+0x24>)
 801042a:	f7fd f8db 	bl	800d5e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801042e:	4804      	ldr	r0, [pc, #16]	@ (8010440 <CDC_Receive_FS+0x24>)
 8010430:	f7fd f8f6 	bl	800d620 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010434:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010436:	4618      	mov	r0, r3
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	240044a8 	.word	0x240044a8

08010444 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010444:	b480      	push	{r7}
 8010446:	b087      	sub	sp, #28
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	4613      	mov	r3, r2
 8010450:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010452:	2300      	movs	r3, #0
 8010454:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801045a:	4618      	mov	r0, r3
 801045c:	371c      	adds	r7, #28
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
	...

08010468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	4603      	mov	r3, r0
 8010470:	6039      	str	r1, [r7, #0]
 8010472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2212      	movs	r2, #18
 8010478:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801047a:	4b03      	ldr	r3, [pc, #12]	@ (8010488 <USBD_FS_DeviceDescriptor+0x20>)
}
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	240000ec 	.word	0x240000ec

0801048c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	6039      	str	r1, [r7, #0]
 8010496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2204      	movs	r2, #4
 801049c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801049e:	4b03      	ldr	r3, [pc, #12]	@ (80104ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr
 80104ac:	24000100 	.word	0x24000100

080104b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	4603      	mov	r3, r0
 80104b8:	6039      	str	r1, [r7, #0]
 80104ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80104bc:	79fb      	ldrb	r3, [r7, #7]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d105      	bne.n	80104ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80104c2:	683a      	ldr	r2, [r7, #0]
 80104c4:	4907      	ldr	r1, [pc, #28]	@ (80104e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80104c6:	4808      	ldr	r0, [pc, #32]	@ (80104e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80104c8:	f7fe fb20 	bl	800eb0c <USBD_GetString>
 80104cc:	e004      	b.n	80104d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80104ce:	683a      	ldr	r2, [r7, #0]
 80104d0:	4904      	ldr	r1, [pc, #16]	@ (80104e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80104d2:	4805      	ldr	r0, [pc, #20]	@ (80104e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80104d4:	f7fe fb1a 	bl	800eb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80104d8:	4b02      	ldr	r3, [pc, #8]	@ (80104e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	24005784 	.word	0x24005784
 80104e8:	08010f2c 	.word	0x08010f2c

080104ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	6039      	str	r1, [r7, #0]
 80104f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80104f8:	683a      	ldr	r2, [r7, #0]
 80104fa:	4904      	ldr	r1, [pc, #16]	@ (801050c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80104fc:	4804      	ldr	r0, [pc, #16]	@ (8010510 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80104fe:	f7fe fb05 	bl	800eb0c <USBD_GetString>
  return USBD_StrDesc;
 8010502:	4b02      	ldr	r3, [pc, #8]	@ (801050c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010504:	4618      	mov	r0, r3
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	24005784 	.word	0x24005784
 8010510:	08010f44 	.word	0x08010f44

08010514 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	4603      	mov	r3, r0
 801051c:	6039      	str	r1, [r7, #0]
 801051e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	221a      	movs	r2, #26
 8010524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010526:	f000 f843 	bl	80105b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801052a:	4b02      	ldr	r3, [pc, #8]	@ (8010534 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801052c:	4618      	mov	r0, r3
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	24000104 	.word	0x24000104

08010538 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	4603      	mov	r3, r0
 8010540:	6039      	str	r1, [r7, #0]
 8010542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010544:	79fb      	ldrb	r3, [r7, #7]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d105      	bne.n	8010556 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	4907      	ldr	r1, [pc, #28]	@ (801056c <USBD_FS_ConfigStrDescriptor+0x34>)
 801054e:	4808      	ldr	r0, [pc, #32]	@ (8010570 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010550:	f7fe fadc 	bl	800eb0c <USBD_GetString>
 8010554:	e004      	b.n	8010560 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010556:	683a      	ldr	r2, [r7, #0]
 8010558:	4904      	ldr	r1, [pc, #16]	@ (801056c <USBD_FS_ConfigStrDescriptor+0x34>)
 801055a:	4805      	ldr	r0, [pc, #20]	@ (8010570 <USBD_FS_ConfigStrDescriptor+0x38>)
 801055c:	f7fe fad6 	bl	800eb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010560:	4b02      	ldr	r3, [pc, #8]	@ (801056c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010562:	4618      	mov	r0, r3
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	24005784 	.word	0x24005784
 8010570:	08010f58 	.word	0x08010f58

08010574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	4603      	mov	r3, r0
 801057c:	6039      	str	r1, [r7, #0]
 801057e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010580:	79fb      	ldrb	r3, [r7, #7]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d105      	bne.n	8010592 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010586:	683a      	ldr	r2, [r7, #0]
 8010588:	4907      	ldr	r1, [pc, #28]	@ (80105a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801058a:	4808      	ldr	r0, [pc, #32]	@ (80105ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 801058c:	f7fe fabe 	bl	800eb0c <USBD_GetString>
 8010590:	e004      	b.n	801059c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010592:	683a      	ldr	r2, [r7, #0]
 8010594:	4904      	ldr	r1, [pc, #16]	@ (80105a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010596:	4805      	ldr	r0, [pc, #20]	@ (80105ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010598:	f7fe fab8 	bl	800eb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801059c:	4b02      	ldr	r3, [pc, #8]	@ (80105a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	24005784 	.word	0x24005784
 80105ac:	08010f64 	.word	0x08010f64

080105b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80105b6:	4b0f      	ldr	r3, [pc, #60]	@ (80105f4 <Get_SerialNum+0x44>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80105bc:	4b0e      	ldr	r3, [pc, #56]	@ (80105f8 <Get_SerialNum+0x48>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80105c2:	4b0e      	ldr	r3, [pc, #56]	@ (80105fc <Get_SerialNum+0x4c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4413      	add	r3, r2
 80105ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d009      	beq.n	80105ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80105d6:	2208      	movs	r2, #8
 80105d8:	4909      	ldr	r1, [pc, #36]	@ (8010600 <Get_SerialNum+0x50>)
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f000 f814 	bl	8010608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80105e0:	2204      	movs	r2, #4
 80105e2:	4908      	ldr	r1, [pc, #32]	@ (8010604 <Get_SerialNum+0x54>)
 80105e4:	68b8      	ldr	r0, [r7, #8]
 80105e6:	f000 f80f 	bl	8010608 <IntToUnicode>
  }
}
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	1ff1e800 	.word	0x1ff1e800
 80105f8:	1ff1e804 	.word	0x1ff1e804
 80105fc:	1ff1e808 	.word	0x1ff1e808
 8010600:	24000106 	.word	0x24000106
 8010604:	24000116 	.word	0x24000116

08010608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010608:	b480      	push	{r7}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	4613      	mov	r3, r2
 8010614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010616:	2300      	movs	r3, #0
 8010618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801061a:	2300      	movs	r3, #0
 801061c:	75fb      	strb	r3, [r7, #23]
 801061e:	e027      	b.n	8010670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	0f1b      	lsrs	r3, r3, #28
 8010624:	2b09      	cmp	r3, #9
 8010626:	d80b      	bhi.n	8010640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	0f1b      	lsrs	r3, r3, #28
 801062c:	b2da      	uxtb	r2, r3
 801062e:	7dfb      	ldrb	r3, [r7, #23]
 8010630:	005b      	lsls	r3, r3, #1
 8010632:	4619      	mov	r1, r3
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	440b      	add	r3, r1
 8010638:	3230      	adds	r2, #48	@ 0x30
 801063a:	b2d2      	uxtb	r2, r2
 801063c:	701a      	strb	r2, [r3, #0]
 801063e:	e00a      	b.n	8010656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	0f1b      	lsrs	r3, r3, #28
 8010644:	b2da      	uxtb	r2, r3
 8010646:	7dfb      	ldrb	r3, [r7, #23]
 8010648:	005b      	lsls	r3, r3, #1
 801064a:	4619      	mov	r1, r3
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	440b      	add	r3, r1
 8010650:	3237      	adds	r2, #55	@ 0x37
 8010652:	b2d2      	uxtb	r2, r2
 8010654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	011b      	lsls	r3, r3, #4
 801065a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801065c:	7dfb      	ldrb	r3, [r7, #23]
 801065e:	005b      	lsls	r3, r3, #1
 8010660:	3301      	adds	r3, #1
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	4413      	add	r3, r2
 8010666:	2200      	movs	r2, #0
 8010668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801066a:	7dfb      	ldrb	r3, [r7, #23]
 801066c:	3301      	adds	r3, #1
 801066e:	75fb      	strb	r3, [r7, #23]
 8010670:	7dfa      	ldrb	r2, [r7, #23]
 8010672:	79fb      	ldrb	r3, [r7, #7]
 8010674:	429a      	cmp	r2, r3
 8010676:	d3d3      	bcc.n	8010620 <IntToUnicode+0x18>
  }
}
 8010678:	bf00      	nop
 801067a:	bf00      	nop
 801067c:	371c      	adds	r7, #28
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
	...

08010688 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b0ba      	sub	sp, #232	@ 0xe8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010690:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010694:	2200      	movs	r2, #0
 8010696:	601a      	str	r2, [r3, #0]
 8010698:	605a      	str	r2, [r3, #4]
 801069a:	609a      	str	r2, [r3, #8]
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80106a0:	f107 0310 	add.w	r3, r7, #16
 80106a4:	22c0      	movs	r2, #192	@ 0xc0
 80106a6:	2100      	movs	r1, #0
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 fb25 	bl	8010cf8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a2c      	ldr	r2, [pc, #176]	@ (8010764 <HAL_PCD_MspInit+0xdc>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d151      	bne.n	801075c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80106b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80106bc:	f04f 0300 	mov.w	r3, #0
 80106c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80106c4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80106c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80106cc:	f107 0310 	add.w	r3, r7, #16
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7f6 fc15 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d001      	beq.n	80106e0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80106dc:	f7f0 fe32 	bl	8001344 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80106e0:	f7f5 fbd6 	bl	8005e90 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80106e4:	4b20      	ldr	r3, [pc, #128]	@ (8010768 <HAL_PCD_MspInit+0xe0>)
 80106e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106ea:	4a1f      	ldr	r2, [pc, #124]	@ (8010768 <HAL_PCD_MspInit+0xe0>)
 80106ec:	f043 0301 	orr.w	r3, r3, #1
 80106f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80106f4:	4b1c      	ldr	r3, [pc, #112]	@ (8010768 <HAL_PCD_MspInit+0xe0>)
 80106f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106fa:	f003 0301 	and.w	r3, r3, #1
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8010702:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801070a:	2302      	movs	r3, #2
 801070c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010710:	2300      	movs	r3, #0
 8010712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010716:	2300      	movs	r3, #0
 8010718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801071c:	230a      	movs	r3, #10
 801071e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010722:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010726:	4619      	mov	r1, r3
 8010728:	4810      	ldr	r0, [pc, #64]	@ (801076c <HAL_PCD_MspInit+0xe4>)
 801072a:	f7f3 fda5 	bl	8004278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801072e:	4b0e      	ldr	r3, [pc, #56]	@ (8010768 <HAL_PCD_MspInit+0xe0>)
 8010730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010734:	4a0c      	ldr	r2, [pc, #48]	@ (8010768 <HAL_PCD_MspInit+0xe0>)
 8010736:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801073a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801073e:	4b0a      	ldr	r3, [pc, #40]	@ (8010768 <HAL_PCD_MspInit+0xe0>)
 8010740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010748:	60bb      	str	r3, [r7, #8]
 801074a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801074c:	2200      	movs	r2, #0
 801074e:	2105      	movs	r1, #5
 8010750:	2065      	movs	r0, #101	@ 0x65
 8010752:	f7f2 f82f 	bl	80027b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010756:	2065      	movs	r0, #101	@ 0x65
 8010758:	f7f2 f846 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801075c:	bf00      	nop
 801075e:	37e8      	adds	r7, #232	@ 0xe8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	40080000 	.word	0x40080000
 8010768:	58024400 	.word	0x58024400
 801076c:	58020000 	.word	0x58020000

08010770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010784:	4619      	mov	r1, r3
 8010786:	4610      	mov	r0, r2
 8010788:	f7fd f833 	bl	800d7f2 <USBD_LL_SetupStage>
}
 801078c:	bf00      	nop
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	460b      	mov	r3, r1
 801079e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80107a6:	78fa      	ldrb	r2, [r7, #3]
 80107a8:	6879      	ldr	r1, [r7, #4]
 80107aa:	4613      	mov	r3, r2
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	4413      	add	r3, r2
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	440b      	add	r3, r1
 80107b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	78fb      	ldrb	r3, [r7, #3]
 80107bc:	4619      	mov	r1, r3
 80107be:	f7fd f86d 	bl	800d89c <USBD_LL_DataOutStage>
}
 80107c2:	bf00      	nop
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107ca:	b580      	push	{r7, lr}
 80107cc:	b082      	sub	sp, #8
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
 80107d2:	460b      	mov	r3, r1
 80107d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80107dc:	78fa      	ldrb	r2, [r7, #3]
 80107de:	6879      	ldr	r1, [r7, #4]
 80107e0:	4613      	mov	r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	4413      	add	r3, r2
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	440b      	add	r3, r1
 80107ea:	3320      	adds	r3, #32
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	78fb      	ldrb	r3, [r7, #3]
 80107f0:	4619      	mov	r1, r3
 80107f2:	f7fd f906 	bl	800da02 <USBD_LL_DataInStage>
}
 80107f6:	bf00      	nop
 80107f8:	3708      	adds	r7, #8
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b082      	sub	sp, #8
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801080c:	4618      	mov	r0, r3
 801080e:	f7fd fa40 	bl	800dc92 <USBD_LL_SOF>
}
 8010812:	bf00      	nop
 8010814:	3708      	adds	r7, #8
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801081a:	b580      	push	{r7, lr}
 801081c:	b084      	sub	sp, #16
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010822:	2301      	movs	r3, #1
 8010824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	79db      	ldrb	r3, [r3, #7]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d102      	bne.n	8010834 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801082e:	2300      	movs	r3, #0
 8010830:	73fb      	strb	r3, [r7, #15]
 8010832:	e008      	b.n	8010846 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	79db      	ldrb	r3, [r3, #7]
 8010838:	2b02      	cmp	r3, #2
 801083a:	d102      	bne.n	8010842 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801083c:	2301      	movs	r3, #1
 801083e:	73fb      	strb	r3, [r7, #15]
 8010840:	e001      	b.n	8010846 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010842:	f7f0 fd7f 	bl	8001344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801084c:	7bfa      	ldrb	r2, [r7, #15]
 801084e:	4611      	mov	r1, r2
 8010850:	4618      	mov	r0, r3
 8010852:	f7fd f9da 	bl	800dc0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801085c:	4618      	mov	r0, r3
 801085e:	f7fd f982 	bl	800db66 <USBD_LL_Reset>
}
 8010862:	bf00      	nop
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
	...

0801086c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801087a:	4618      	mov	r0, r3
 801087c:	f7fd f9d5 	bl	800dc2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	6812      	ldr	r2, [r2, #0]
 801088e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010892:	f043 0301 	orr.w	r3, r3, #1
 8010896:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	7adb      	ldrb	r3, [r3, #11]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d005      	beq.n	80108ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80108a0:	4b04      	ldr	r3, [pc, #16]	@ (80108b4 <HAL_PCD_SuspendCallback+0x48>)
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	4a03      	ldr	r2, [pc, #12]	@ (80108b4 <HAL_PCD_SuspendCallback+0x48>)
 80108a6:	f043 0306 	orr.w	r3, r3, #6
 80108aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80108ac:	bf00      	nop
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}
 80108b4:	e000ed00 	.word	0xe000ed00

080108b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fd f9cb 	bl	800dc62 <USBD_LL_Resume>
}
 80108cc:	bf00      	nop
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	460b      	mov	r3, r1
 80108de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80108e6:	78fa      	ldrb	r2, [r7, #3]
 80108e8:	4611      	mov	r1, r2
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fd fa23 	bl	800dd36 <USBD_LL_IsoOUTIncomplete>
}
 80108f0:	bf00      	nop
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	460b      	mov	r3, r1
 8010902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801090a:	78fa      	ldrb	r2, [r7, #3]
 801090c:	4611      	mov	r1, r2
 801090e:	4618      	mov	r0, r3
 8010910:	f7fd f9df 	bl	800dcd2 <USBD_LL_IsoINIncomplete>
}
 8010914:	bf00      	nop
 8010916:	3708      	adds	r7, #8
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801092a:	4618      	mov	r0, r3
 801092c:	f7fd fa35 	bl	800dd9a <USBD_LL_DevConnected>
}
 8010930:	bf00      	nop
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010946:	4618      	mov	r0, r3
 8010948:	f7fd fa32 	bl	800ddb0 <USBD_LL_DevDisconnected>
}
 801094c:	bf00      	nop
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d13e      	bne.n	80109e2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010964:	4a21      	ldr	r2, [pc, #132]	@ (80109ec <USBD_LL_Init+0x98>)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	4a1f      	ldr	r2, [pc, #124]	@ (80109ec <USBD_LL_Init+0x98>)
 8010970:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010974:	4b1d      	ldr	r3, [pc, #116]	@ (80109ec <USBD_LL_Init+0x98>)
 8010976:	4a1e      	ldr	r2, [pc, #120]	@ (80109f0 <USBD_LL_Init+0x9c>)
 8010978:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801097a:	4b1c      	ldr	r3, [pc, #112]	@ (80109ec <USBD_LL_Init+0x98>)
 801097c:	2209      	movs	r2, #9
 801097e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010980:	4b1a      	ldr	r3, [pc, #104]	@ (80109ec <USBD_LL_Init+0x98>)
 8010982:	2202      	movs	r2, #2
 8010984:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010986:	4b19      	ldr	r3, [pc, #100]	@ (80109ec <USBD_LL_Init+0x98>)
 8010988:	2200      	movs	r2, #0
 801098a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801098c:	4b17      	ldr	r3, [pc, #92]	@ (80109ec <USBD_LL_Init+0x98>)
 801098e:	2202      	movs	r2, #2
 8010990:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010992:	4b16      	ldr	r3, [pc, #88]	@ (80109ec <USBD_LL_Init+0x98>)
 8010994:	2200      	movs	r2, #0
 8010996:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010998:	4b14      	ldr	r3, [pc, #80]	@ (80109ec <USBD_LL_Init+0x98>)
 801099a:	2200      	movs	r2, #0
 801099c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801099e:	4b13      	ldr	r3, [pc, #76]	@ (80109ec <USBD_LL_Init+0x98>)
 80109a0:	2200      	movs	r2, #0
 80109a2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80109a4:	4b11      	ldr	r3, [pc, #68]	@ (80109ec <USBD_LL_Init+0x98>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80109aa:	4b10      	ldr	r3, [pc, #64]	@ (80109ec <USBD_LL_Init+0x98>)
 80109ac:	2200      	movs	r2, #0
 80109ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80109b0:	4b0e      	ldr	r3, [pc, #56]	@ (80109ec <USBD_LL_Init+0x98>)
 80109b2:	2200      	movs	r2, #0
 80109b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80109b6:	480d      	ldr	r0, [pc, #52]	@ (80109ec <USBD_LL_Init+0x98>)
 80109b8:	f7f3 ff8f 	bl	80048da <HAL_PCD_Init>
 80109bc:	4603      	mov	r3, r0
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d001      	beq.n	80109c6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80109c2:	f7f0 fcbf 	bl	8001344 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80109c6:	2180      	movs	r1, #128	@ 0x80
 80109c8:	4808      	ldr	r0, [pc, #32]	@ (80109ec <USBD_LL_Init+0x98>)
 80109ca:	f7f5 f9e6 	bl	8005d9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80109ce:	2240      	movs	r2, #64	@ 0x40
 80109d0:	2100      	movs	r1, #0
 80109d2:	4806      	ldr	r0, [pc, #24]	@ (80109ec <USBD_LL_Init+0x98>)
 80109d4:	f7f5 f99a 	bl	8005d0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80109d8:	2280      	movs	r2, #128	@ 0x80
 80109da:	2101      	movs	r1, #1
 80109dc:	4803      	ldr	r0, [pc, #12]	@ (80109ec <USBD_LL_Init+0x98>)
 80109de:	f7f5 f995 	bl	8005d0c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80109e2:	2300      	movs	r3, #0
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	24005984 	.word	0x24005984
 80109f0:	40080000 	.word	0x40080000

080109f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109fc:	2300      	movs	r3, #0
 80109fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a00:	2300      	movs	r3, #0
 8010a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7f4 f871 	bl	8004af2 <HAL_PCD_Start>
 8010a10:	4603      	mov	r3, r0
 8010a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	4618      	mov	r0, r3
 8010a18:	f000 f942 	bl	8010ca0 <USBD_Get_USB_Status>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3710      	adds	r7, #16
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b084      	sub	sp, #16
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	4608      	mov	r0, r1
 8010a34:	4611      	mov	r1, r2
 8010a36:	461a      	mov	r2, r3
 8010a38:	4603      	mov	r3, r0
 8010a3a:	70fb      	strb	r3, [r7, #3]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70bb      	strb	r3, [r7, #2]
 8010a40:	4613      	mov	r3, r2
 8010a42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a52:	78bb      	ldrb	r3, [r7, #2]
 8010a54:	883a      	ldrh	r2, [r7, #0]
 8010a56:	78f9      	ldrb	r1, [r7, #3]
 8010a58:	f7f4 fd72 	bl	8005540 <HAL_PCD_EP_Open>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 f91c 	bl	8010ca0 <USBD_Get_USB_Status>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b084      	sub	sp, #16
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	460b      	mov	r3, r1
 8010a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a90:	78fa      	ldrb	r2, [r7, #3]
 8010a92:	4611      	mov	r1, r2
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7f4 fdbd 	bl	8005614 <HAL_PCD_EP_Close>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a9e:	7bfb      	ldrb	r3, [r7, #15]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f000 f8fd 	bl	8010ca0 <USBD_Get_USB_Status>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3710      	adds	r7, #16
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	460b      	mov	r3, r1
 8010abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ace:	78fa      	ldrb	r2, [r7, #3]
 8010ad0:	4611      	mov	r1, r2
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7f4 fe75 	bl	80057c2 <HAL_PCD_EP_SetStall>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 f8de 	bl	8010ca0 <USBD_Get_USB_Status>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b084      	sub	sp, #16
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	460b      	mov	r3, r1
 8010afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b02:	2300      	movs	r3, #0
 8010b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b0c:	78fa      	ldrb	r2, [r7, #3]
 8010b0e:	4611      	mov	r1, r2
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7f4 feb9 	bl	8005888 <HAL_PCD_EP_ClrStall>
 8010b16:	4603      	mov	r3, r0
 8010b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 f8bf 	bl	8010ca0 <USBD_Get_USB_Status>
 8010b22:	4603      	mov	r3, r0
 8010b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3710      	adds	r7, #16
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	da0b      	bge.n	8010b64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b4c:	78fb      	ldrb	r3, [r7, #3]
 8010b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b52:	68f9      	ldr	r1, [r7, #12]
 8010b54:	4613      	mov	r3, r2
 8010b56:	00db      	lsls	r3, r3, #3
 8010b58:	4413      	add	r3, r2
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	440b      	add	r3, r1
 8010b5e:	3316      	adds	r3, #22
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	e00b      	b.n	8010b7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b64:	78fb      	ldrb	r3, [r7, #3]
 8010b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b6a:	68f9      	ldr	r1, [r7, #12]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	00db      	lsls	r3, r3, #3
 8010b70:	4413      	add	r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	440b      	add	r3, r1
 8010b76:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010b7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b94:	2300      	movs	r3, #0
 8010b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ba2:	78fa      	ldrb	r2, [r7, #3]
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7f4 fca6 	bl	80054f8 <HAL_PCD_SetAddress>
 8010bac:	4603      	mov	r3, r0
 8010bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f000 f874 	bl	8010ca0 <USBD_Get_USB_Status>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3710      	adds	r7, #16
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b086      	sub	sp, #24
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	607a      	str	r2, [r7, #4]
 8010bd0:	603b      	str	r3, [r7, #0]
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010be4:	7af9      	ldrb	r1, [r7, #11]
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	f7f4 fdb0 	bl	800574e <HAL_PCD_EP_Transmit>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bf2:	7dfb      	ldrb	r3, [r7, #23]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 f853 	bl	8010ca0 <USBD_Get_USB_Status>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010bfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	607a      	str	r2, [r7, #4]
 8010c12:	603b      	str	r3, [r7, #0]
 8010c14:	460b      	mov	r3, r1
 8010c16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010c26:	7af9      	ldrb	r1, [r7, #11]
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	f7f4 fd3c 	bl	80056a8 <HAL_PCD_EP_Receive>
 8010c30:	4603      	mov	r3, r0
 8010c32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c34:	7dfb      	ldrb	r3, [r7, #23]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 f832 	bl	8010ca0 <USBD_Get_USB_Status>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c40:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3718      	adds	r7, #24
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b082      	sub	sp, #8
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
 8010c52:	460b      	mov	r3, r1
 8010c54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c5c:	78fa      	ldrb	r2, [r7, #3]
 8010c5e:	4611      	mov	r1, r2
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7f4 fd5c 	bl	800571e <HAL_PCD_EP_GetRxCount>
 8010c66:	4603      	mov	r3, r0
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c78:	4b03      	ldr	r3, [pc, #12]	@ (8010c88 <USBD_static_malloc+0x18>)
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	370c      	adds	r7, #12
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	24005e68 	.word	0x24005e68

08010c8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010c94:	bf00      	nop
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b085      	sub	sp, #20
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010caa:	2300      	movs	r3, #0
 8010cac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010cae:	79fb      	ldrb	r3, [r7, #7]
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d817      	bhi.n	8010ce4 <USBD_Get_USB_Status+0x44>
 8010cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8010cbc <USBD_Get_USB_Status+0x1c>)
 8010cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cba:	bf00      	nop
 8010cbc:	08010ccd 	.word	0x08010ccd
 8010cc0:	08010cd3 	.word	0x08010cd3
 8010cc4:	08010cd9 	.word	0x08010cd9
 8010cc8:	08010cdf 	.word	0x08010cdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	73fb      	strb	r3, [r7, #15]
    break;
 8010cd0:	e00b      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010cd2:	2303      	movs	r3, #3
 8010cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8010cd6:	e008      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	73fb      	strb	r3, [r7, #15]
    break;
 8010cdc:	e005      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ce2:	e002      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010ce4:	2303      	movs	r3, #3
 8010ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ce8:	bf00      	nop
  }
  return usb_status;
 8010cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <memset>:
 8010cf8:	4402      	add	r2, r0
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d100      	bne.n	8010d02 <memset+0xa>
 8010d00:	4770      	bx	lr
 8010d02:	f803 1b01 	strb.w	r1, [r3], #1
 8010d06:	e7f9      	b.n	8010cfc <memset+0x4>

08010d08 <_reclaim_reent>:
 8010d08:	4b2d      	ldr	r3, [pc, #180]	@ (8010dc0 <_reclaim_reent+0xb8>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4283      	cmp	r3, r0
 8010d0e:	b570      	push	{r4, r5, r6, lr}
 8010d10:	4604      	mov	r4, r0
 8010d12:	d053      	beq.n	8010dbc <_reclaim_reent+0xb4>
 8010d14:	69c3      	ldr	r3, [r0, #28]
 8010d16:	b31b      	cbz	r3, 8010d60 <_reclaim_reent+0x58>
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	b163      	cbz	r3, 8010d36 <_reclaim_reent+0x2e>
 8010d1c:	2500      	movs	r5, #0
 8010d1e:	69e3      	ldr	r3, [r4, #28]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	5959      	ldr	r1, [r3, r5]
 8010d24:	b9b1      	cbnz	r1, 8010d54 <_reclaim_reent+0x4c>
 8010d26:	3504      	adds	r5, #4
 8010d28:	2d80      	cmp	r5, #128	@ 0x80
 8010d2a:	d1f8      	bne.n	8010d1e <_reclaim_reent+0x16>
 8010d2c:	69e3      	ldr	r3, [r4, #28]
 8010d2e:	4620      	mov	r0, r4
 8010d30:	68d9      	ldr	r1, [r3, #12]
 8010d32:	f000 f86d 	bl	8010e10 <_free_r>
 8010d36:	69e3      	ldr	r3, [r4, #28]
 8010d38:	6819      	ldr	r1, [r3, #0]
 8010d3a:	b111      	cbz	r1, 8010d42 <_reclaim_reent+0x3a>
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	f000 f867 	bl	8010e10 <_free_r>
 8010d42:	69e3      	ldr	r3, [r4, #28]
 8010d44:	689d      	ldr	r5, [r3, #8]
 8010d46:	b15d      	cbz	r5, 8010d60 <_reclaim_reent+0x58>
 8010d48:	4629      	mov	r1, r5
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	682d      	ldr	r5, [r5, #0]
 8010d4e:	f000 f85f 	bl	8010e10 <_free_r>
 8010d52:	e7f8      	b.n	8010d46 <_reclaim_reent+0x3e>
 8010d54:	680e      	ldr	r6, [r1, #0]
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 f85a 	bl	8010e10 <_free_r>
 8010d5c:	4631      	mov	r1, r6
 8010d5e:	e7e1      	b.n	8010d24 <_reclaim_reent+0x1c>
 8010d60:	6961      	ldr	r1, [r4, #20]
 8010d62:	b111      	cbz	r1, 8010d6a <_reclaim_reent+0x62>
 8010d64:	4620      	mov	r0, r4
 8010d66:	f000 f853 	bl	8010e10 <_free_r>
 8010d6a:	69e1      	ldr	r1, [r4, #28]
 8010d6c:	b111      	cbz	r1, 8010d74 <_reclaim_reent+0x6c>
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f000 f84e 	bl	8010e10 <_free_r>
 8010d74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d76:	b111      	cbz	r1, 8010d7e <_reclaim_reent+0x76>
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 f849 	bl	8010e10 <_free_r>
 8010d7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d80:	b111      	cbz	r1, 8010d88 <_reclaim_reent+0x80>
 8010d82:	4620      	mov	r0, r4
 8010d84:	f000 f844 	bl	8010e10 <_free_r>
 8010d88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010d8a:	b111      	cbz	r1, 8010d92 <_reclaim_reent+0x8a>
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f000 f83f 	bl	8010e10 <_free_r>
 8010d92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010d94:	b111      	cbz	r1, 8010d9c <_reclaim_reent+0x94>
 8010d96:	4620      	mov	r0, r4
 8010d98:	f000 f83a 	bl	8010e10 <_free_r>
 8010d9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010d9e:	b111      	cbz	r1, 8010da6 <_reclaim_reent+0x9e>
 8010da0:	4620      	mov	r0, r4
 8010da2:	f000 f835 	bl	8010e10 <_free_r>
 8010da6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010da8:	b111      	cbz	r1, 8010db0 <_reclaim_reent+0xa8>
 8010daa:	4620      	mov	r0, r4
 8010dac:	f000 f830 	bl	8010e10 <_free_r>
 8010db0:	6a23      	ldr	r3, [r4, #32]
 8010db2:	b11b      	cbz	r3, 8010dbc <_reclaim_reent+0xb4>
 8010db4:	4620      	mov	r0, r4
 8010db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dba:	4718      	bx	r3
 8010dbc:	bd70      	pop	{r4, r5, r6, pc}
 8010dbe:	bf00      	nop
 8010dc0:	24000120 	.word	0x24000120

08010dc4 <__libc_init_array>:
 8010dc4:	b570      	push	{r4, r5, r6, lr}
 8010dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8010dfc <__libc_init_array+0x38>)
 8010dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8010e00 <__libc_init_array+0x3c>)
 8010dca:	1b64      	subs	r4, r4, r5
 8010dcc:	10a4      	asrs	r4, r4, #2
 8010dce:	2600      	movs	r6, #0
 8010dd0:	42a6      	cmp	r6, r4
 8010dd2:	d109      	bne.n	8010de8 <__libc_init_array+0x24>
 8010dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8010e04 <__libc_init_array+0x40>)
 8010dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8010e08 <__libc_init_array+0x44>)
 8010dd8:	f000 f870 	bl	8010ebc <_init>
 8010ddc:	1b64      	subs	r4, r4, r5
 8010dde:	10a4      	asrs	r4, r4, #2
 8010de0:	2600      	movs	r6, #0
 8010de2:	42a6      	cmp	r6, r4
 8010de4:	d105      	bne.n	8010df2 <__libc_init_array+0x2e>
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dec:	4798      	blx	r3
 8010dee:	3601      	adds	r6, #1
 8010df0:	e7ee      	b.n	8010dd0 <__libc_init_array+0xc>
 8010df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010df6:	4798      	blx	r3
 8010df8:	3601      	adds	r6, #1
 8010dfa:	e7f2      	b.n	8010de2 <__libc_init_array+0x1e>
 8010dfc:	08010fbc 	.word	0x08010fbc
 8010e00:	08010fbc 	.word	0x08010fbc
 8010e04:	08010fbc 	.word	0x08010fbc
 8010e08:	08010fc0 	.word	0x08010fc0

08010e0c <__retarget_lock_acquire_recursive>:
 8010e0c:	4770      	bx	lr

08010e0e <__retarget_lock_release_recursive>:
 8010e0e:	4770      	bx	lr

08010e10 <_free_r>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4605      	mov	r5, r0
 8010e14:	2900      	cmp	r1, #0
 8010e16:	d041      	beq.n	8010e9c <_free_r+0x8c>
 8010e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e1c:	1f0c      	subs	r4, r1, #4
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	bfb8      	it	lt
 8010e22:	18e4      	addlt	r4, r4, r3
 8010e24:	f000 f83e 	bl	8010ea4 <__malloc_lock>
 8010e28:	4a1d      	ldr	r2, [pc, #116]	@ (8010ea0 <_free_r+0x90>)
 8010e2a:	6813      	ldr	r3, [r2, #0]
 8010e2c:	b933      	cbnz	r3, 8010e3c <_free_r+0x2c>
 8010e2e:	6063      	str	r3, [r4, #4]
 8010e30:	6014      	str	r4, [r2, #0]
 8010e32:	4628      	mov	r0, r5
 8010e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e38:	f000 b83a 	b.w	8010eb0 <__malloc_unlock>
 8010e3c:	42a3      	cmp	r3, r4
 8010e3e:	d908      	bls.n	8010e52 <_free_r+0x42>
 8010e40:	6820      	ldr	r0, [r4, #0]
 8010e42:	1821      	adds	r1, r4, r0
 8010e44:	428b      	cmp	r3, r1
 8010e46:	bf01      	itttt	eq
 8010e48:	6819      	ldreq	r1, [r3, #0]
 8010e4a:	685b      	ldreq	r3, [r3, #4]
 8010e4c:	1809      	addeq	r1, r1, r0
 8010e4e:	6021      	streq	r1, [r4, #0]
 8010e50:	e7ed      	b.n	8010e2e <_free_r+0x1e>
 8010e52:	461a      	mov	r2, r3
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	b10b      	cbz	r3, 8010e5c <_free_r+0x4c>
 8010e58:	42a3      	cmp	r3, r4
 8010e5a:	d9fa      	bls.n	8010e52 <_free_r+0x42>
 8010e5c:	6811      	ldr	r1, [r2, #0]
 8010e5e:	1850      	adds	r0, r2, r1
 8010e60:	42a0      	cmp	r0, r4
 8010e62:	d10b      	bne.n	8010e7c <_free_r+0x6c>
 8010e64:	6820      	ldr	r0, [r4, #0]
 8010e66:	4401      	add	r1, r0
 8010e68:	1850      	adds	r0, r2, r1
 8010e6a:	4283      	cmp	r3, r0
 8010e6c:	6011      	str	r1, [r2, #0]
 8010e6e:	d1e0      	bne.n	8010e32 <_free_r+0x22>
 8010e70:	6818      	ldr	r0, [r3, #0]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	6053      	str	r3, [r2, #4]
 8010e76:	4408      	add	r0, r1
 8010e78:	6010      	str	r0, [r2, #0]
 8010e7a:	e7da      	b.n	8010e32 <_free_r+0x22>
 8010e7c:	d902      	bls.n	8010e84 <_free_r+0x74>
 8010e7e:	230c      	movs	r3, #12
 8010e80:	602b      	str	r3, [r5, #0]
 8010e82:	e7d6      	b.n	8010e32 <_free_r+0x22>
 8010e84:	6820      	ldr	r0, [r4, #0]
 8010e86:	1821      	adds	r1, r4, r0
 8010e88:	428b      	cmp	r3, r1
 8010e8a:	bf04      	itt	eq
 8010e8c:	6819      	ldreq	r1, [r3, #0]
 8010e8e:	685b      	ldreq	r3, [r3, #4]
 8010e90:	6063      	str	r3, [r4, #4]
 8010e92:	bf04      	itt	eq
 8010e94:	1809      	addeq	r1, r1, r0
 8010e96:	6021      	streq	r1, [r4, #0]
 8010e98:	6054      	str	r4, [r2, #4]
 8010e9a:	e7ca      	b.n	8010e32 <_free_r+0x22>
 8010e9c:	bd38      	pop	{r3, r4, r5, pc}
 8010e9e:	bf00      	nop
 8010ea0:	240061c4 	.word	0x240061c4

08010ea4 <__malloc_lock>:
 8010ea4:	4801      	ldr	r0, [pc, #4]	@ (8010eac <__malloc_lock+0x8>)
 8010ea6:	f7ff bfb1 	b.w	8010e0c <__retarget_lock_acquire_recursive>
 8010eaa:	bf00      	nop
 8010eac:	240061c0 	.word	0x240061c0

08010eb0 <__malloc_unlock>:
 8010eb0:	4801      	ldr	r0, [pc, #4]	@ (8010eb8 <__malloc_unlock+0x8>)
 8010eb2:	f7ff bfac 	b.w	8010e0e <__retarget_lock_release_recursive>
 8010eb6:	bf00      	nop
 8010eb8:	240061c0 	.word	0x240061c0

08010ebc <_init>:
 8010ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ebe:	bf00      	nop
 8010ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ec2:	bc08      	pop	{r3}
 8010ec4:	469e      	mov	lr, r3
 8010ec6:	4770      	bx	lr

08010ec8 <_fini>:
 8010ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eca:	bf00      	nop
 8010ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ece:	bc08      	pop	{r3}
 8010ed0:	469e      	mov	lr, r3
 8010ed2:	4770      	bx	lr
