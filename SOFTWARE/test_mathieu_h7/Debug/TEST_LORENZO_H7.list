
TEST_LORENZO_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f74  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08018214  08018214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801840c  0801840c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018414  08018414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018418  08018418  00019418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000170  24000000  0801841c  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008878  24000170  0801858c  0001a170  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240089e8  0801858c  0001a9e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a170  2**0
                  CONTENTS, READONLY
 10 .debug_info   000392cc  00000000  00000000  0001a19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c4b  00000000  00000000  0005346a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002960  00000000  00000000  0005b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ff1  00000000  00000000  0005da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042c0e  00000000  00000000  0005fa09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000405ee  00000000  00000000  000a2617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b846  00000000  00000000  000e2c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0025e44b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afe0  00000000  00000000  0025e490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00269470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080181fc 	.word	0x080181fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	080181fc 	.word	0x080181fc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ADXL343_WriteReg>:

HAL_StatusTypeDef ADXL343_INT_HANDLER(adxl343_t *dev, uint32_t timeout_ms);


// Write one register.
static inline HAL_StatusTypeDef ADXL343_WriteReg(adxl343_t *dev, uint8_t reg, uint8_t value, uint32_t to_ms) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af04      	add	r7, sp, #16
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	72fb      	strb	r3, [r7, #11]
 800061a:	4613      	mov	r3, r2
 800061c:	72bb      	strb	r3, [r7, #10]
return ADXL343_Transfer(dev, reg, false, false, &value, NULL, 1, to_ms);
 800061e:	7af9      	ldrb	r1, [r7, #11]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	9303      	str	r3, [sp, #12]
 8000624:	2301      	movs	r3, #1
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	f107 030a 	add.w	r3, r7, #10
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 f842 	bl	80006c0 <ADXL343_Transfer>
 800063c:	4603      	mov	r3, r0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <ADXL343_ReadReg>:


// Read one register
static inline HAL_StatusTypeDef ADXL343_ReadReg(adxl343_t *dev, uint8_t reg, uint8_t *value, uint32_t to_ms) {
 8000646:	b580      	push	{r7, lr}
 8000648:	b088      	sub	sp, #32
 800064a:	af04      	add	r7, sp, #16
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	72fb      	strb	r3, [r7, #11]
return ADXL343_Transfer(dev, reg, false, true, NULL, value, 1, to_ms);
 8000656:	7af9      	ldrb	r1, [r7, #11]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	2301      	movs	r3, #1
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2300      	movs	r3, #0
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	2200      	movs	r2, #0
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 f827 	bl	80006c0 <ADXL343_Transfer>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <adxl343_cmd>:
#define ADXL343_CS_HIGH(dev) HAL_GPIO_WritePin((dev)->cs_port, (dev)->cs_pin, GPIO_PIN_SET)
#endif


// Internal helper: build command byte per SPI rules.
static inline uint8_t adxl343_cmd(uint8_t reg, bool multi, bool is_read) {
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
uint8_t cmd = reg & 0x3Fu;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000694:	73fb      	strb	r3, [r7, #15]
if (multi) cmd |= ADXL343_SPI_MB;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d003      	beq.n	80006a4 <adxl343_cmd+0x28>
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a2:	73fb      	strb	r3, [r7, #15]
if (is_read) cmd |= ADXL343_SPI_RW_READ;
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <adxl343_cmd+0x36>
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006b0:	73fb      	strb	r3, [r7, #15]
return cmd;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <ADXL343_Transfer>:


HAL_StatusTypeDef ADXL343_Transfer(adxl343_t *dev, uint8_t reg, bool multi, bool is_read,
const uint8_t *tx, uint8_t *rx, size_t len, uint32_t timeout_ms)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	4608      	mov	r0, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	461a      	mov	r2, r3
 80006ce:	4603      	mov	r3, r0
 80006d0:	70fb      	strb	r3, [r7, #3]
 80006d2:	460b      	mov	r3, r1
 80006d4:	70bb      	strb	r3, [r7, #2]
 80006d6:	4613      	mov	r3, r2
 80006d8:	707b      	strb	r3, [r7, #1]
if (!dev || !dev->hspi) return HAL_ERROR;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <ADXL343_Transfer+0x28>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <ADXL343_Transfer+0x2c>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e067      	b.n	80007bc <ADXL343_Transfer+0xfc>


HAL_StatusTypeDef st = HAL_OK;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]
uint8_t cmd = adxl343_cmd(reg, multi || (len>1), is_read);
 80006f0:	78bb      	ldrb	r3, [r7, #2]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <ADXL343_Transfer+0x3c>
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d901      	bls.n	8000700 <ADXL343_Transfer+0x40>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <ADXL343_Transfer+0x42>
 8000700:	2300      	movs	r3, #0
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	b2d9      	uxtb	r1, r3
 8000708:	787a      	ldrb	r2, [r7, #1]
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffb5 	bl	800067c <adxl343_cmd>
 8000712:	4603      	mov	r3, r0
 8000714:	73bb      	strb	r3, [r7, #14]


ADXL343_CS_LOW(dev);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	891b      	ldrh	r3, [r3, #8]
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	f005 fae7 	bl	8005cf4 <HAL_GPIO_WritePin>


// Send command/address
st = HAL_SPI_Transmit(dev->hspi, &cmd, 1, timeout_ms);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	f107 010e 	add.w	r1, r7, #14
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	2201      	movs	r2, #1
 8000732:	f00b fbc3 	bl	800bebc <HAL_SPI_Transmit>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
if (st != HAL_OK) { ADXL343_CS_HIGH(dev); return st; }
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d009      	beq.n	8000754 <ADXL343_Transfer+0x94>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6858      	ldr	r0, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	891b      	ldrh	r3, [r3, #8]
 8000748:	2201      	movs	r2, #1
 800074a:	4619      	mov	r1, r3
 800074c:	f005 fad2 	bl	8005cf4 <HAL_GPIO_WritePin>
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	e033      	b.n	80007bc <ADXL343_Transfer+0xfc>


if (is_read) {
 8000754:	787b      	ldrb	r3, [r7, #1]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d010      	beq.n	800077c <ADXL343_Transfer+0xbc>
// Read len bytes. Use dummy 0x00 on MOSI.
if (rx == NULL) rx = dev->_rx; // internal buffer fallback
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <ADXL343_Transfer+0xa6>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	332c      	adds	r3, #44	@ 0x2c
 8000764:	61fb      	str	r3, [r7, #28]
st = HAL_SPI_Receive(dev->hspi, rx, (uint16_t)len, timeout_ms);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	b29a      	uxth	r2, r3
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	69f9      	ldr	r1, [r7, #28]
 8000772:	f00b fd91 	bl	800c298 <HAL_SPI_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e016      	b.n	80007aa <ADXL343_Transfer+0xea>
} else {
// Write len bytes from tx
if (tx == NULL) { ADXL343_CS_HIGH(dev); return HAL_ERROR; }
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d109      	bne.n	8000796 <ADXL343_Transfer+0xd6>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6858      	ldr	r0, [r3, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	891b      	ldrh	r3, [r3, #8]
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 fab1 	bl	8005cf4 <HAL_GPIO_WritePin>
 8000792:	2301      	movs	r3, #1
 8000794:	e012      	b.n	80007bc <ADXL343_Transfer+0xfc>
st = HAL_SPI_Transmit(dev->hspi, (uint8_t*)tx, (uint16_t)len, timeout_ms);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	b29a      	uxth	r2, r3
 800079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a0:	69b9      	ldr	r1, [r7, #24]
 80007a2:	f00b fb8b 	bl	800bebc <HAL_SPI_Transmit>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
}


ADXL343_CS_HIGH(dev);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6858      	ldr	r0, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	891b      	ldrh	r3, [r3, #8]
 80007b2:	2201      	movs	r2, #1
 80007b4:	4619      	mov	r1, r3
 80007b6:	f005 fa9d 	bl	8005cf4 <HAL_GPIO_WritePin>
return st;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <ADXL343_Init>:


HAL_StatusTypeDef ADXL343_Init(adxl343_t *dev, SPI_HandleTypeDef *hspi,
GPIO_TypeDef *cs_port, uint16_t cs_pin,
uint8_t bw_rate, uint8_t range, uint32_t timeout_ms)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	807b      	strh	r3, [r7, #2]
if (!dev) return HAL_ERROR;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <ADXL343_Init+0x18>
 80007d8:	2301      	movs	r3, #1
 80007da:	e0d4      	b.n	8000986 <ADXL343_Init+0x1c2>
dev->hspi = hspi;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	601a      	str	r2, [r3, #0]
dev->cs_port = cs_port;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	605a      	str	r2, [r3, #4]
dev->cs_pin = cs_pin;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	887a      	ldrh	r2, [r7, #2]
 80007ec:	811a      	strh	r2, [r3, #8]


// Ensure CS high
ADXL343_CS_HIGH(dev);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6858      	ldr	r0, [r3, #4]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	891b      	ldrh	r3, [r3, #8]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	f005 fa7b 	bl	8005cf4 <HAL_GPIO_WritePin>


// Check DEVID
uint8_t devid = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	75bb      	strb	r3, [r7, #22]
HAL_StatusTypeDef st = ADXL343_ReadReg(dev, ADXL343_REG_DEVID, &devid, timeout_ms);
 8000802:	f107 0216 	add.w	r2, r7, #22
 8000806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000808:	2100      	movs	r1, #0
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f7ff ff1b 	bl	8000646 <ADXL343_ReadReg>
 8000810:	4603      	mov	r3, r0
 8000812:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <ADXL343_Init+0x5a>
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	e0b3      	b.n	8000986 <ADXL343_Init+0x1c2>
if (devid != ADXL343_DEVID_VALUE) return HAL_ERROR;
 800081e:	7dbb      	ldrb	r3, [r7, #22]
 8000820:	2be5      	cmp	r3, #229	@ 0xe5
 8000822:	d001      	beq.n	8000828 <ADXL343_Init+0x64>
 8000824:	2301      	movs	r3, #1
 8000826:	e0ae      	b.n	8000986 <ADXL343_Init+0x1c2>


// Configure BW_RATE (output data rate)
dev->bw_rate = bw_rate;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800082e:	72da      	strb	r2, [r3, #11]
st = ADXL343_WriteReg(dev, ADXL343_REG_BW_RATE, bw_rate, timeout_ms);
 8000830:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000836:	212c      	movs	r1, #44	@ 0x2c
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fee7 	bl	800060c <ADXL343_WriteReg>
 800083e:	4603      	mov	r3, r0
 8000840:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <ADXL343_Init+0x88>
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	e09c      	b.n	8000986 <ADXL343_Init+0x1c2>


// DATA_FORMAT: full-res + range, right-justified, 4-wire SPI
dev->data_format = (uint8_t)(ADXL343_DATA_FMT_FULL_RES | (range & 0x03u));
 800084c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000850:	f003 0303 	and.w	r3, r3, #3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	b2da      	uxtb	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	729a      	strb	r2, [r3, #10]
st = ADXL343_WriteReg(dev, ADXL343_REG_DATA_FORMAT, dev->data_format, timeout_ms);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	7a9a      	ldrb	r2, [r3, #10]
 8000864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000866:	2131      	movs	r1, #49	@ 0x31
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f7ff fecf 	bl	800060c <ADXL343_WriteReg>
 800086e:	4603      	mov	r3, r0
 8000870:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <ADXL343_Init+0xb8>
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	e084      	b.n	8000986 <ADXL343_Init+0x1c2>


// Scale factor
if (dev->data_format & ADXL343_DATA_FMT_FULL_RES) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	7a9b      	ldrb	r3, [r3, #10]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	2b00      	cmp	r3, #0
 8000886:	d004      	beq.n	8000892 <ADXL343_Init+0xce>
dev->lsb_per_g = 1.0f / 256.0f; // ~0.0039 g/LSB
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f04f 526e 	mov.w	r2, #998244352	@ 0x3b800000
 800088e:	621a      	str	r2, [r3, #32]
 8000890:	e020      	b.n	80008d4 <ADXL343_Init+0x110>
} else {
// Non full-res: 10-bit fixed scale: 256 LSB/g at ±2g, 128 at ±4g, etc.
switch (range & 0x03u) {
 8000892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	2b02      	cmp	r3, #2
 800089c:	d010      	beq.n	80008c0 <ADXL343_Init+0xfc>
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d813      	bhi.n	80008ca <ADXL343_Init+0x106>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <ADXL343_Init+0xe8>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d005      	beq.n	80008b6 <ADXL343_Init+0xf2>
 80008aa:	e00e      	b.n	80008ca <ADXL343_Init+0x106>
case ADXL343_DATA_FMT_RANGE_2G: dev->lsb_per_g = 256.0f; break;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f04f 4287 	mov.w	r2, #1132462080	@ 0x43800000
 80008b2:	621a      	str	r2, [r3, #32]
 80008b4:	e00e      	b.n	80008d4 <ADXL343_Init+0x110>
case ADXL343_DATA_FMT_RANGE_4G: dev->lsb_per_g = 128.0f; break;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f04f 4286 	mov.w	r2, #1124073472	@ 0x43000000
 80008bc:	621a      	str	r2, [r3, #32]
 80008be:	e009      	b.n	80008d4 <ADXL343_Init+0x110>
case ADXL343_DATA_FMT_RANGE_8G: dev->lsb_per_g = 64.0f; break;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 80008c6:	621a      	str	r2, [r3, #32]
 80008c8:	e004      	b.n	80008d4 <ADXL343_Init+0x110>
default: dev->lsb_per_g = 32.0f; break; // 16g
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80008d0:	621a      	str	r2, [r3, #32]
 80008d2:	bf00      	nop
}
// convert later as g = raw / lsb_per_g
}


st = ADXL343_WriteReg(dev, ADXL343_REG_THRESH_TAP, ADXL343_TRESHOLD_VALUE, timeout_ms);
 80008d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d6:	2230      	movs	r2, #48	@ 0x30
 80008d8:	211d      	movs	r1, #29
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff fe96 	bl	800060c <ADXL343_WriteReg>
 80008e0:	4603      	mov	r3, r0
 80008e2:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <ADXL343_Init+0x12a>
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	e04b      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_DUR, ADXL343_REG_DUR_VALUE, timeout_ms);
 80008ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	2121      	movs	r1, #33	@ 0x21
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe89 	bl	800060c <ADXL343_WriteReg>
 80008fa:	4603      	mov	r3, r0
 80008fc:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <ADXL343_Init+0x144>
 8000904:	7dfb      	ldrb	r3, [r7, #23]
 8000906:	e03e      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_TAP_AXES, ADXL343_REG_TAP_AXES_VALUE, timeout_ms);
 8000908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800090a:	2206      	movs	r2, #6
 800090c:	212a      	movs	r1, #42	@ 0x2a
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f7ff fe7c 	bl	800060c <ADXL343_WriteReg>
 8000914:	4603      	mov	r3, r0
 8000916:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <ADXL343_Init+0x15e>
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	e031      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_INT_MAP, ADXL343_REG_INTMAP_VALUE, timeout_ms);
 8000922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000924:	22bf      	movs	r2, #191	@ 0xbf
 8000926:	212f      	movs	r1, #47	@ 0x2f
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f7ff fe6f 	bl	800060c <ADXL343_WriteReg>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <ADXL343_Init+0x178>
 8000938:	7dfb      	ldrb	r3, [r7, #23]
 800093a:	e024      	b.n	8000986 <ADXL343_Init+0x1c2>

st = ADXL343_WriteReg(dev, ADXL343_REG_INT_ENABLE, ADXL343_REG_INTEN_VALUE, timeout_ms);
 800093c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800093e:	2240      	movs	r2, #64	@ 0x40
 8000940:	212e      	movs	r1, #46	@ 0x2e
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f7ff fe62 	bl	800060c <ADXL343_WriteReg>
 8000948:	4603      	mov	r3, r0
 800094a:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <ADXL343_Init+0x192>
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	e017      	b.n	8000986 <ADXL343_Init+0x1c2>



// Enter measurement mode
st = ADXL343_WriteReg(dev, ADXL343_REG_POWER_CTL, ADXL343_POWER_MEASURE, timeout_ms);
 8000956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000958:	2208      	movs	r2, #8
 800095a:	212d      	movs	r1, #45	@ 0x2d
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f7ff fe55 	bl	800060c <ADXL343_WriteReg>
 8000962:	4603      	mov	r3, r0
 8000964:	75fb      	strb	r3, [r7, #23]
if (st != HAL_OK) return st;
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <ADXL343_Init+0x1ac>
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	e00a      	b.n	8000986 <ADXL343_Init+0x1c2>


// Optional: flush FIFO / set bypass
(void)ADXL343_WriteReg(dev, ADXL343_REG_FIFO_CTL, 0x00u, timeout_ms);
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	2200      	movs	r2, #0
 8000974:	2138      	movs	r1, #56	@ 0x38
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f7ff fe48 	bl	800060c <ADXL343_WriteReg>


// Prime one reading
return ADXL343_ReadXYZ(dev, timeout_ms);
 800097c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 f806 	bl	8000990 <ADXL343_ReadXYZ>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <ADXL343_ReadXYZ>:




HAL_StatusTypeDef ADXL343_ReadXYZ(adxl343_t *dev, uint32_t timeout_ms)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af04      	add	r7, sp, #16
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
uint8_t buf[6];
HAL_StatusTypeDef st = ADXL343_Transfer(dev, ADXL343_REG_DATAX0, true, true,
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	2306      	movs	r3, #6
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	2201      	movs	r2, #1
 80009b0:	2132      	movs	r1, #50	@ 0x32
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fe84 	bl	80006c0 <ADXL343_Transfer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]
NULL, buf, sizeof(buf), timeout_ms);
if (st != HAL_OK) return st;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <ADXL343_ReadXYZ+0x36>
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	e07c      	b.n	8000ac0 <ADXL343_ReadXYZ+0x130>


// Little-endian sign-extended 16-bit (right-justified)
dev->raw[0] = (int16_t)((uint16_t)buf[1] << 8 | buf[0]);
 80009c6:	7a7b      	ldrb	r3, [r7, #9]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	021b      	lsls	r3, r3, #8
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	7a3b      	ldrb	r3, [r7, #8]
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	819a      	strh	r2, [r3, #12]
dev->raw[1] = (int16_t)((uint16_t)buf[3] << 8 | buf[2]);
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	7abb      	ldrb	r3, [r7, #10]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	81da      	strh	r2, [r3, #14]
dev->raw[2] = (int16_t)((uint16_t)buf[5] << 8 | buf[4]);
 80009ee:	7b7b      	ldrb	r3, [r7, #13]
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	7b3b      	ldrb	r3, [r7, #12]
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	821a      	strh	r2, [r3, #16]


if (dev->data_format & ADXL343_DATA_FMT_FULL_RES) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7a9b      	ldrb	r3, [r3, #10]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d02a      	beq.n	8000a64 <ADXL343_ReadXYZ+0xd4>
// In full-res, 3.9 mg/LSB independent of range
dev->g[0] = dev->raw[0] * (1.0f/256.0f);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000ac8 <ADXL343_ReadXYZ+0x138>
 8000a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	edc3 7a05 	vstr	s15, [r3, #20]
dev->g[1] = dev->raw[1] * (1.0f/256.0f);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a38:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000ac8 <ADXL343_ReadXYZ+0x138>
 8000a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edc3 7a06 	vstr	s15, [r3, #24]
dev->g[2] = dev->raw[2] * (1.0f/256.0f);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a54:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000ac8 <ADXL343_ReadXYZ+0x138>
 8000a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	edc3 7a07 	vstr	s15, [r3, #28]
 8000a62:	e02c      	b.n	8000abe <ADXL343_ReadXYZ+0x12e>
} else {
dev->g[0] = (float)dev->raw[0] / dev->lsb_per_g;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	ed93 7a08 	vldr	s14, [r3, #32]
 8000a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	edc3 7a05 	vstr	s15, [r3, #20]
dev->g[1] = (float)dev->raw[1] / dev->lsb_per_g;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a88:	ee07 3a90 	vmov	s15, r3
 8000a8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	ed93 7a08 	vldr	s14, [r3, #32]
 8000a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	edc3 7a06 	vstr	s15, [r3, #24]
dev->g[2] = (float)dev->raw[2] / dev->lsb_per_g;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	edc3 7a07 	vstr	s15, [r3, #28]
}
return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	3b800000 	.word	0x3b800000

08000acc <ADXL343_INT_HANDLER>:


HAL_StatusTypeDef ADXL343_INT_HANDLER(adxl343_t *dev, uint32_t timeout_ms){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]

	dev->tap_event=1;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	uint8_t registerstate=0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef st = ADXL343_ReadReg(dev, ADXL343_REG_ACT_TAP_STATUS, &registerstate, timeout_ms);
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	212b      	movs	r1, #43	@ 0x2b
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fdab 	bl	8000646 <ADXL343_ReadReg>
 8000af0:	4603      	mov	r3, r0
 8000af2:	73fb      	strb	r3, [r7, #15]
	if (st != HAL_OK) return st;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <ADXL343_INT_HANDLER+0x32>
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	e02b      	b.n	8000b56 <ADXL343_INT_HANDLER+0x8a>

	if(registerstate & 0x01){
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <ADXL343_INT_HANDLER+0x44>
		dev->z_tap=1;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	}
	if(registerstate & 0x02){
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <ADXL343_INT_HANDLER+0x56>
		dev->y_tap=1;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	}
	if(registerstate & 0x04){
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <ADXL343_INT_HANDLER+0x68>
		dev->x_tap=1;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	}

	uint8_t intsourcestate=0x00;
 8000b34:	2300      	movs	r3, #0
 8000b36:	737b      	strb	r3, [r7, #13]
	st = ADXL343_ReadReg(dev, ADXL343_REG_INT_SOURCE, &intsourcestate, timeout_ms);
 8000b38:	f107 020d 	add.w	r2, r7, #13
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2130      	movs	r1, #48	@ 0x30
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fd80 	bl	8000646 <ADXL343_ReadReg>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
	if (st != HAL_OK) return st;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <ADXL343_INT_HANDLER+0x88>
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	e000      	b.n	8000b56 <ADXL343_INT_HANDLER+0x8a>

	return st;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2105      	movs	r1, #5
 8000b88:	200b      	movs	r0, #11
 8000b8a:	f002 fa61 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b8e:	200b      	movs	r0, #11
 8000b90:	f002 fa78 	bl	8003084 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2105      	movs	r1, #5
 8000b98:	200c      	movs	r0, #12
 8000b9a:	f002 fa59 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b9e:	200c      	movs	r0, #12
 8000ba0:	f002 fa70 	bl	8003084 <HAL_NVIC_EnableIRQ>

}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	58024400 	.word	0x58024400

08000bb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <vApplicationGetIdleTaskMemory+0x2c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	4a06      	ldr	r2, [pc, #24]	@ (8000be0 <vApplicationGetIdleTaskMemory+0x30>)
 8000bc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	24000194 	.word	0x24000194
 8000be0:	24000234 	.word	0x24000234

08000be4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b08e      	sub	sp, #56	@ 0x38
 8000be8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of maintask */
  osThreadDef(maintask, Startmaintask, osPriorityNormal, 0, 256);
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_FREERTOS_Init+0x58>)
 8000bec:	f107 041c 	add.w	r4, r7, #28
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  maintaskHandle = osThreadCreate(osThread(maintask), NULL);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f014 f8b3 	bl	8014d70 <osThreadCreate>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <MX_FREERTOS_Init+0x5c>)
 8000c0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of lidarparse */
  osThreadDef(lidarparse, Startlidarparse, osPriorityIdle, 0, 500);
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_FREERTOS_Init+0x60>)
 8000c12:	463c      	mov	r4, r7
 8000c14:	461d      	mov	r5, r3
 8000c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lidarparseHandle = osThreadCreate(osThread(lidarparse), NULL);
 8000c22:	463b      	mov	r3, r7
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f014 f8a2 	bl	8014d70 <osThreadCreate>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <MX_FREERTOS_Init+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	@ 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08018220 	.word	0x08018220
 8000c40:	2400018c 	.word	0x2400018c
 8000c44:	08018248 	.word	0x08018248
 8000c48:	24000190 	.word	0x24000190

08000c4c <Startmaintask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmaintask */
void Startmaintask(void const * argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c54:	f016 fcb8 	bl	80175c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN Startmaintask */
  /* Infinite loop */
  for(;;)
  {
	  WAV_Task();
 8000c58:	f002 f812 	bl	8002c80 <WAV_Task>

    osDelay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f014 f8d3 	bl	8014e08 <osDelay>
	  WAV_Task();
 8000c62:	bf00      	nop
 8000c64:	e7f8      	b.n	8000c58 <Startmaintask+0xc>
	...

08000c68 <Startlidarparse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlidarparse */
void Startlidarparse(void const * argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  {
//	  while (ylidar_read_index!=ylidar_write_index){
//		  ylidar_fsm();
//      }
//	  trackObject();
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_11);
 8000c70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <Startlidarparse+0x24>)
 8000c76:	f005 f856 	bl	8005d26 <HAL_GPIO_TogglePin>
	  ADXL343_ReadXYZ(&adxldata, 100);
 8000c7a:	2164      	movs	r1, #100	@ 0x64
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <Startlidarparse+0x28>)
 8000c7e:	f7ff fe87 	bl	8000990 <ADXL343_ReadXYZ>

	  osDelay(50);
 8000c82:	2032      	movs	r0, #50	@ 0x32
 8000c84:	f014 f8c0 	bl	8014e08 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_11);
 8000c88:	bf00      	nop
 8000c8a:	e7f1      	b.n	8000c70 <Startlidarparse+0x8>
 8000c8c:	58020c00 	.word	0x58020c00
 8000c90:	24000488 	.word	0x24000488

08000c94 <MX_GPIO_Init>:
     PB1   ------> S_TIM3_CH4
     PD8   ------> USART3_TX
     PD12   ------> I2C4_SCL
*/
void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	@ 0x30
 8000c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000caa:	4baf      	ldr	r3, [pc, #700]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	4aad      	ldr	r2, [pc, #692]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cba:	4bab      	ldr	r3, [pc, #684]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4ba7      	ldr	r3, [pc, #668]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	4aa6      	ldr	r2, [pc, #664]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd8:	4ba3      	ldr	r3, [pc, #652]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4ba0      	ldr	r3, [pc, #640]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	4a9e      	ldr	r2, [pc, #632]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf6:	4b9c      	ldr	r3, [pc, #624]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b98      	ldr	r3, [pc, #608]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	4a97      	ldr	r2, [pc, #604]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d14:	4b94      	ldr	r3, [pc, #592]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b91      	ldr	r3, [pc, #580]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	4a8f      	ldr	r2, [pc, #572]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d32:	4b8d      	ldr	r3, [pc, #564]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d40:	4b89      	ldr	r3, [pc, #548]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	4a88      	ldr	r2, [pc, #544]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d50:	4b85      	ldr	r3, [pc, #532]	@ (8000f68 <MX_GPIO_Init+0x2d4>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d64:	4881      	ldr	r0, [pc, #516]	@ (8000f6c <MX_GPIO_Init+0x2d8>)
 8000d66:	f004 ffc5 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BLUE_Pin|GREEN_Pin|RED_Pin|LED0_Pin
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f640 412c 	movw	r1, #3116	@ 0xc2c
 8000d70:	487f      	ldr	r0, [pc, #508]	@ (8000f70 <MX_GPIO_Init+0x2dc>)
 8000d72:	f004 ffbf 	bl	8005cf4 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_CS_GPIO_Port, ACCEL_CS_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	487e      	ldr	r0, [pc, #504]	@ (8000f74 <MX_GPIO_Init+0x2e0>)
 8000d7c:	f004 ffba 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000d80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d92:	2304      	movs	r3, #4
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4876      	ldr	r0, [pc, #472]	@ (8000f78 <MX_GPIO_Init+0x2e4>)
 8000d9e:	f004 fdf9 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000da2:	2380      	movs	r3, #128	@ 0x80
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	486e      	ldr	r0, [pc, #440]	@ (8000f78 <MX_GPIO_Init+0x2e4>)
 8000dbe:	f004 fde9 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4864      	ldr	r0, [pc, #400]	@ (8000f6c <MX_GPIO_Init+0x2d8>)
 8000ddc:	f004 fdda 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin RED_Pin LED0_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin|LED0_Pin
 8000de0:	f640 432c 	movw	r3, #3116	@ 0xc2c
 8000de4:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	485d      	ldr	r0, [pc, #372]	@ (8000f70 <MX_GPIO_Init+0x2dc>)
 8000dfa:	f004 fdcb 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e10:	2304      	movs	r3, #4
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4854      	ldr	r0, [pc, #336]	@ (8000f6c <MX_GPIO_Init+0x2d8>)
 8000e1c:	f004 fdba 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|INT1_Pin;
 8000e20:	2305      	movs	r3, #5
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	484f      	ldr	r0, [pc, #316]	@ (8000f74 <MX_GPIO_Init+0x2e0>)
 8000e36:	f004 fdad 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e40:	2312      	movs	r3, #18
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4847      	ldr	r0, [pc, #284]	@ (8000f74 <MX_GPIO_Init+0x2e0>)
 8000e58:	f004 fd9c 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e5c:	23c0      	movs	r3, #192	@ 0xc0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	483f      	ldr	r0, [pc, #252]	@ (8000f74 <MX_GPIO_Init+0x2e0>)
 8000e78:	f004 fd8c 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4838      	ldr	r0, [pc, #224]	@ (8000f74 <MX_GPIO_Init+0x2e0>)
 8000e94:	f004 fd7e 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8000e98:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4830      	ldr	r0, [pc, #192]	@ (8000f78 <MX_GPIO_Init+0x2e4>)
 8000eb6:	f004 fd6d 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000eba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4829      	ldr	r0, [pc, #164]	@ (8000f7c <MX_GPIO_Init+0x2e8>)
 8000ed8:	f004 fd5c 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000edc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481d      	ldr	r0, [pc, #116]	@ (8000f70 <MX_GPIO_Init+0x2dc>)
 8000efa:	f004 fd4b 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000efe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f10:	2304      	movs	r3, #4
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4815      	ldr	r0, [pc, #84]	@ (8000f70 <MX_GPIO_Init+0x2dc>)
 8000f1c:	f004 fd3a 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f30:	2302      	movs	r3, #2
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <MX_GPIO_Init+0x2e4>)
 8000f3c:	f004 fd2a 	bl	8005994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2105      	movs	r1, #5
 8000f44:	2006      	movs	r0, #6
 8000f46:	f002 f883 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f4a:	2006      	movs	r0, #6
 8000f4c:	f002 f89a 	bl	8003084 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2105      	movs	r1, #5
 8000f54:	2008      	movs	r0, #8
 8000f56:	f002 f87b 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f5a:	2008      	movs	r0, #8
 8000f5c:	f002 f892 	bl	8003084 <HAL_NVIC_EnableIRQ>

}
 8000f60:	bf00      	nop
 8000f62:	3730      	adds	r7, #48	@ 0x30
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020000 	.word	0x58020000
 8000f70:	58020c00 	.word	0x58020c00
 8000f74:	58020800 	.word	0x58020800
 8000f78:	58020400 	.word	0x58020400
 8000f7c:	58021000 	.word	0x58021000

08000f80 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff8 <MX_I2C2_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <MX_I2C2_Init+0x7c>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f96:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000fbc:	f004 fee8 	bl	8005d90 <HAL_I2C_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fc6:	f000 fa07 	bl	80013d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000fce:	f004 ff7b 	bl	8005ec8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 f9fe 	bl	80013d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_I2C2_Init+0x74>)
 8000fe0:	f004 ffbd 	bl	8005f5e <HAL_I2CEx_ConfigDigitalFilter>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 f9f5 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	24000434 	.word	0x24000434
 8000ff8:	40005800 	.word	0x40005800
 8000ffc:	00b03fdb 	.word	0x00b03fdb

08001000 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ba      	sub	sp, #232	@ 0xe8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22c0      	movs	r2, #192	@ 0xc0
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f016 fffb 	bl	801801c <memset>
  if(i2cHandle->Instance==I2C2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <HAL_I2C_MspInit+0xc8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d146      	bne.n	80010be <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001030:	f04f 0208 	mov.w	r2, #8
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4618      	mov	r0, r3
 8001048:	f007 fae8 	bl	800861c <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001052:	f000 f9c1 	bl	80013d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001074:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001078:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107c:	2312      	movs	r3, #18
 800107e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800108e:	2304      	movs	r3, #4
 8001090:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001098:	4619      	mov	r1, r3
 800109a:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <HAL_I2C_MspInit+0xd0>)
 800109c:	f004 fc7a 	bl	8005994 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 80010a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010a6:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_I2C_MspInit+0xcc>)
 80010b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	37e8      	adds	r7, #232	@ 0xe8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40005800 	.word	0x40005800
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020400 	.word	0x58020400

080010d4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d12f      	bne.n	8001144 <HAL_GPIO_EXTI_Callback+0x70>

		if(flag == 0 ){
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_GPIO_EXTI_Callback+0x78>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10e      	bne.n	800110a <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2108      	movs	r1, #8
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x7c>)
 80010f2:	f004 fdff 	bl	8005cf4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	4815      	ldr	r0, [pc, #84]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x7c>)
 80010fc:	f004 fdfa 	bl	8005cf4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 8001100:	2200      	movs	r2, #0
 8001102:	2120      	movs	r1, #32
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001106:	f004 fdf5 	bl	8005cf4 <HAL_GPIO_WritePin>

		}
		if(flag == 1){
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <HAL_GPIO_EXTI_Callback+0x78>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d10e      	bne.n	8001130 <HAL_GPIO_EXTI_Callback+0x5c>

			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 8001112:	2200      	movs	r2, #0
 8001114:	2108      	movs	r1, #8
 8001116:	480e      	ldr	r0, [pc, #56]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001118:	f004 fdec 	bl	8005cf4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 800111c:	2201      	movs	r2, #1
 800111e:	2104      	movs	r1, #4
 8001120:	480b      	ldr	r0, [pc, #44]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001122:	f004 fde7 	bl	8005cf4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 8001126:	2200      	movs	r2, #0
 8001128:	2120      	movs	r1, #32
 800112a:	4809      	ldr	r0, [pc, #36]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x7c>)
 800112c:	f004 fde2 	bl	8005cf4 <HAL_GPIO_WritePin>

		}

		flag=1-flag;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_GPIO_EXTI_Callback+0x78>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1c3 0301 	rsb	r3, r3, #1
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_GPIO_EXTI_Callback+0x78>)
 800113a:	6013      	str	r3, [r2, #0]

		ADXL343_INT_HANDLER(&adxldata, 100);
 800113c:	2164      	movs	r1, #100	@ 0x64
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <HAL_GPIO_EXTI_Callback+0x80>)
 8001140:	f7ff fcc4 	bl	8000acc <ADXL343_INT_HANDLER>


	}


}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	240004c0 	.word	0x240004c0
 8001150:	58020c00 	.word	0x58020c00
 8001154:	24000488 	.word	0x24000488

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800115e:	f000 f8fd 	bl	800135c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f001 fe31 	bl	8002dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f87d 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f7ff fd93 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 800116e:	f7ff fcf7 	bl	8000b60 <MX_DMA_Init>
  MX_UART8_Init();
 8001172:	f000 fd2d 	bl	8001bd0 <MX_UART8_Init>
  MX_SPI4_Init();
 8001176:	f000 fa6b 	bl	8001650 <MX_SPI4_Init>
  MX_SPI1_Init();
 800117a:	f000 fa13 	bl	80015a4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800117e:	f00e fe1b 	bl	800fdb8 <MX_FATFS_Init>
  MX_I2C2_Init();
 8001182:	f7ff fefd 	bl	8000f80 <MX_I2C2_Init>
  MX_SAI3_Init();
 8001186:	f000 f92d 	bl	80013e4 <MX_SAI3_Init>

//  HAL_UART_Abort(&huart8);
//  HAL_UART_Receive_DMA(&huart8, (uint8_t *)ylidar_circular_buffer, YLIDAR_CIRC_BUF_SIZE);
//  __HAL_DMA_ENABLE_IT(huart8.hdmarx,DMA_IT_HT);

  ADXL343_Init(&adxldata, &hspi4, ACCEL_CS_GPIO_Port, ACCEL_CS_Pin,ADXL343_BW_RATE_VALUE, ADXL343_DATA_FMT_RANGE_4G,100);
 800118a:	2364      	movs	r3, #100	@ 0x64
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	230a      	movs	r3, #10
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2302      	movs	r3, #2
 8001198:	4a27      	ldr	r2, [pc, #156]	@ (8001238 <main+0xe0>)
 800119a:	4928      	ldr	r1, [pc, #160]	@ (800123c <main+0xe4>)
 800119c:	4828      	ldr	r0, [pc, #160]	@ (8001240 <main+0xe8>)
 800119e:	f7ff fb11 	bl	80007c4 <ADXL343_Init>

  //ssd1306_Init();

  fres = f_mount(&FatFs, "", 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	4927      	ldr	r1, [pc, #156]	@ (8001244 <main+0xec>)
 80011a6:	4828      	ldr	r0, [pc, #160]	@ (8001248 <main+0xf0>)
 80011a8:	f012 fbba 	bl	8013920 <f_mount>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <main+0xf4>)
 80011b2:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <main+0xf4>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d125      	bne.n	8001208 <main+0xb0>
  			  fres = f_mkdir("DEMO");
 80011bc:	4824      	ldr	r0, [pc, #144]	@ (8001250 <main+0xf8>)
 80011be:	f013 fbf1 	bl	80149a4 <f_mkdir>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <main+0xf4>)
 80011c8:	701a      	strb	r2, [r3, #0]
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 80011ca:	2212      	movs	r2, #18
 80011cc:	4921      	ldr	r1, [pc, #132]	@ (8001254 <main+0xfc>)
 80011ce:	4822      	ldr	r0, [pc, #136]	@ (8001258 <main+0x100>)
 80011d0:	f012 fc0a 	bl	80139e8 <f_open>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <main+0xf4>)
 80011da:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <main+0xf4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10c      	bne.n	80011fe <main+0xa6>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 80011e4:	463b      	mov	r3, r7
 80011e6:	220b      	movs	r2, #11
 80011e8:	491c      	ldr	r1, [pc, #112]	@ (800125c <main+0x104>)
 80011ea:	481b      	ldr	r0, [pc, #108]	@ (8001258 <main+0x100>)
 80011ec:	f012 ff2b 	bl	8014046 <f_write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <main+0xf4>)
 80011f6:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 80011f8:	4817      	ldr	r0, [pc, #92]	@ (8001258 <main+0x100>)
 80011fa:	f013 f951 	bl	80144a0 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	4910      	ldr	r1, [pc, #64]	@ (8001244 <main+0xec>)
 8001202:	2000      	movs	r0, #0
 8001204:	f012 fb8c 	bl	8013920 <f_mount>
  		  }

  		WAV_Init();
 8001208:	f001 fc4a 	bl	8002aa0 <WAV_Init>

  		bool result=false;
 800120c:	2300      	movs	r3, #0
 800120e:	71fb      	strb	r3, [r7, #7]

  		fres = f_open(&fil,"0:/test.wav",FA_READ);
 8001210:	2201      	movs	r2, #1
 8001212:	4913      	ldr	r1, [pc, #76]	@ (8001260 <main+0x108>)
 8001214:	4810      	ldr	r0, [pc, #64]	@ (8001258 <main+0x100>)
 8001216:	f012 fbe7 	bl	80139e8 <f_open>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <main+0xf4>)
 8001220:	701a      	strb	r2, [r3, #0]

  		result=WAV_Play("0:/test.wav");
 8001222:	480f      	ldr	r0, [pc, #60]	@ (8001260 <main+0x108>)
 8001224:	f001 fc54 	bl	8002ad0 <WAV_Play>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800122c:	f7ff fcda 	bl	8000be4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001230:	f013 fd97 	bl	8014d62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <main+0xdc>
 8001238:	58020800 	.word	0x58020800
 800123c:	24000ac8 	.word	0x24000ac8
 8001240:	24000488 	.word	0x24000488
 8001244:	08018264 	.word	0x08018264
 8001248:	240004c4 	.word	0x240004c4
 800124c:	240006f8 	.word	0x240006f8
 8001250:	08018268 	.word	0x08018268
 8001254:	08018270 	.word	0x08018270
 8001258:	240006fc 	.word	0x240006fc
 800125c:	08018280 	.word	0x08018280
 8001260:	0801828c 	.word	0x0801828c

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b09c      	sub	sp, #112	@ 0x70
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126e:	224c      	movs	r2, #76	@ 0x4c
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f016 fed2 	bl	801801c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2220      	movs	r2, #32
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f016 fecc 	bl	801801c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001284:	2002      	movs	r0, #2
 8001286:	f006 f957 	bl	8007538 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <SystemClock_Config+0xf0>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <SystemClock_Config+0xf0>)
 8001294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <SystemClock_Config+0xf0>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <SystemClock_Config+0xf4>)
 80012a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001358 <SystemClock_Config+0xf4>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <SystemClock_Config+0xf4>)
 80012b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012bc:	bf00      	nop
 80012be:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <SystemClock_Config+0xf0>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012ca:	d1f8      	bne.n	80012be <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80012cc:	2321      	movs	r3, #33	@ 0x21
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012d6:	2301      	movs	r3, #1
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012de:	2302      	movs	r3, #2
 80012e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80012e6:	2378      	movs	r3, #120	@ 0x78
 80012e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012f6:	230c      	movs	r3, #12
 80012f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	4618      	mov	r0, r3
 8001308:	f006 f960 	bl	80075cc <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001312:	f000 f861 	bl	80013d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	233f      	movs	r3, #63	@ 0x3f
 8001318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2303      	movs	r3, #3
 800131c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001322:	2308      	movs	r3, #8
 8001324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001326:	2340      	movs	r3, #64	@ 0x40
 8001328:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800132a:	2340      	movs	r3, #64	@ 0x40
 800132c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800132e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001332:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001334:	2340      	movs	r3, #64	@ 0x40
 8001336:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2104      	movs	r1, #4
 800133c:	4618      	mov	r0, r3
 800133e:	f006 fd9f 	bl	8007e80 <HAL_RCC_ClockConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001348:	f000 f846 	bl	80013d8 <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3770      	adds	r7, #112	@ 0x70
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58024800 	.word	0x58024800
 8001358:	58000400 	.word	0x58000400

0800135c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800136e:	f001 fe97 	bl	80030a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001372:	2301      	movs	r3, #1
 8001374:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001376:	2300      	movs	r3, #0
 8001378:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800137e:	231f      	movs	r3, #31
 8001380:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001382:	2387      	movs	r3, #135	@ 0x87
 8001384:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001386:	2300      	movs	r3, #0
 8001388:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800138a:	2300      	movs	r3, #0
 800138c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800138e:	2301      	movs	r3, #1
 8001390:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001392:	2301      	movs	r3, #1
 8001394:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800139e:	463b      	mov	r3, r7
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 feb5 	bl	8003110 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013a6:	2004      	movs	r0, #4
 80013a8:	f001 fe92 	bl	80030d0 <HAL_MPU_Enable>

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013c6:	f001 fd3b 	bl	8002e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40010000 	.word	0x40010000

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <Error_Handler+0x8>

080013e4 <MX_SAI3_Init>:
SAI_HandleTypeDef hsai_BlockA3;
DMA_HandleTypeDef hdma_sai3_a;

/* SAI3 init function */
void MX_SAI3_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI3_Init 1 */

  /* USER CODE END SAI3_Init 1 */

  hsai_BlockA3.Instance = SAI3_Block_A;
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_SAI3_Init+0x68>)
 80013ea:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <MX_SAI3_Init+0x6c>)
 80013ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA3.Init.AudioMode = SAI_MODEMASTER_TX;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_SAI3_Init+0x68>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  hsai_BlockA3.Init.Synchro = SAI_ASYNCHRONOUS;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_SAI3_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA3.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_SAI3_Init+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hsai_BlockA3.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_SAI3_Init+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hsai_BlockA3.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_SAI3_Init+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA3.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_SAI3_Init+0x68>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hsai_BlockA3.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_SAI3_Init+0x68>)
 8001414:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001418:	621a      	str	r2, [r3, #32]
  hsai_BlockA3.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_SAI3_Init+0x68>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hsai_BlockA3.Init.MonoStereoMode = SAI_STEREOMODE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <MX_SAI3_Init+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA3.Init.CompandingMode = SAI_NOCOMPANDING;
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_SAI3_Init+0x68>)
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA3.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <MX_SAI3_Init+0x68>)
 800142e:	2200      	movs	r2, #0
 8001430:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA3, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001432:	2302      	movs	r3, #2
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <MX_SAI3_Init+0x68>)
 800143a:	f009 fded 	bl	800b018 <HAL_SAI_InitProtocol>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_SAI3_Init+0x64>
  {
    Error_Handler();
 8001444:	f7ff ffc8 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI3_Init 2 */

  /* USER CODE END SAI3_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2400092c 	.word	0x2400092c
 8001450:	40016004 	.word	0x40016004

08001454 <HAL_SAI_MspInit>:
static uint32_t SAI3_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0ba      	sub	sp, #232	@ 0xe8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	22c0      	movs	r2, #192	@ 0xc0
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f016 fdd9 	bl	801801c <memset>
/* SAI3 */
    if(saiHandle->Instance==SAI3_Block_A)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a47      	ldr	r2, [pc, #284]	@ (800158c <HAL_SAI_MspInit+0x138>)
 8001470:	4293      	cmp	r3, r2
 8001472:	f040 8087 	bne.w	8001584 <HAL_SAI_MspInit+0x130>
    {
    /* SAI3 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI3;
 8001476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 8;
 8001482:	2308      	movs	r3, #8
 8001484:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 150;
 8001486:	2396      	movs	r3, #150	@ 0x96
 8001488:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800148e:	2302      	movs	r3, #2
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800149a:	2320      	movs	r3, #32
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL2;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4618      	mov	r0, r3
 80014ac:	f007 f8b6 	bl	800861c <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
 80014b6:	f7ff ff8f 	bl	80013d8 <Error_Handler>
    }

    if (SAI3_client == 0)
 80014ba:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <HAL_SAI_MspInit+0x13c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10e      	bne.n	80014e0 <HAL_SAI_MspInit+0x8c>
    {
       __HAL_RCC_SAI3_CLK_ENABLE();
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <HAL_SAI_MspInit+0x140>)
 80014c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014c8:	4a32      	ldr	r2, [pc, #200]	@ (8001594 <HAL_SAI_MspInit+0x140>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014d2:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <HAL_SAI_MspInit+0x140>)
 80014d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    }
    SAI3_client ++;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_SAI_MspInit+0x13c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001590 <HAL_SAI_MspInit+0x13c>)
 80014e8:	6013      	str	r3, [r2, #0]
    /**SAI3_A_Block_A GPIO Configuration
    PD4     ------> SAI3_FS_A
    PD0     ------> SAI3_SCK_A
    PD1     ------> SAI3_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1;
 80014ea:	2313      	movs	r3, #19
 80014ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 8001502:	2306      	movs	r3, #6
 8001504:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001508:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800150c:	4619      	mov	r1, r3
 800150e:	4822      	ldr	r0, [pc, #136]	@ (8001598 <HAL_SAI_MspInit+0x144>)
 8001510:	f004 fa40 	bl	8005994 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai3_a.Instance = DMA1_Stream1;
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001516:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <HAL_SAI_MspInit+0x14c>)
 8001518:	601a      	str	r2, [r3, #0]
    hdma_sai3_a.Init.Request = DMA_REQUEST_SAI3_A;
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_SAI_MspInit+0x148>)
 800151c:	2271      	movs	r2, #113	@ 0x71
 800151e:	605a      	str	r2, [r3, #4]
    hdma_sai3_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001520:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001522:	2240      	movs	r2, #64	@ 0x40
 8001524:	609a      	str	r2, [r3, #8]
    hdma_sai3_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
    hdma_sai3_a.Init.MemInc = DMA_MINC_ENABLE;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_SAI_MspInit+0x148>)
 800152e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001532:	611a      	str	r2, [r3, #16]
    hdma_sai3_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001536:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800153a:	615a      	str	r2, [r3, #20]
    hdma_sai3_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_SAI_MspInit+0x148>)
 800153e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001542:	619a      	str	r2, [r3, #24]
    hdma_sai3_a.Init.Mode = DMA_CIRCULAR;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154a:	61da      	str	r2, [r3, #28]
    hdma_sai3_a.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <HAL_SAI_MspInit+0x148>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
    hdma_sai3_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai3_a) != HAL_OK)
 8001558:	4810      	ldr	r0, [pc, #64]	@ (800159c <HAL_SAI_MspInit+0x148>)
 800155a:	f001 fe19 	bl	8003190 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_SAI_MspInit+0x114>
    {
      Error_Handler();
 8001564:	f7ff ff38 	bl	80013d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai3_a);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <HAL_SAI_MspInit+0x148>)
 800156c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001570:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai3_a);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_SAI_MspInit+0x148>)
 800157a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800157e:	4a07      	ldr	r2, [pc, #28]	@ (800159c <HAL_SAI_MspInit+0x148>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001584:	bf00      	nop
 8001586:	37e8      	adds	r7, #232	@ 0xe8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40016004 	.word	0x40016004
 8001590:	24000a3c 	.word	0x24000a3c
 8001594:	58024400 	.word	0x58024400
 8001598:	58020c00 	.word	0x58020c00
 800159c:	240009c4 	.word	0x240009c4
 80015a0:	40020028 	.word	0x40020028

080015a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015aa:	4a28      	ldr	r2, [pc, #160]	@ (800164c <MX_SPI1_Init+0xa8>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015be:	2207      	movs	r2, #7
 80015c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80015dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <MX_SPI1_Init+0xa4>)
 80015f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_SPI1_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <MX_SPI1_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_SPI1_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <MX_SPI1_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_SPI1_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <MX_SPI1_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_SPI1_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <MX_SPI1_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_SPI1_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_SPI1_Init+0xa4>)
 8001636:	f00a fb1d 	bl	800bc74 <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001640:	f7ff feca 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	24000a40 	.word	0x24000a40
 800164c:	40013000 	.word	0x40013000

08001650 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001654:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001656:	4a29      	ldr	r2, [pc, #164]	@ (80016fc <MX_SPI4_Init+0xac>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 800165c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001660:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001668:	4b23      	ldr	r3, [pc, #140]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 800166a:	2207      	movs	r2, #7
 800166c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800166e:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001674:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001678:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800167c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001680:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001684:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001688:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <MX_SPI4_Init+0xa8>)
 80016e6:	f00a fac5 	bl	800bc74 <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 80016f0:	f7ff fe72 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	24000ac8 	.word	0x24000ac8
 80016fc:	40013400 	.word	0x40013400

08001700 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0bc      	sub	sp, #240	@ 0xf0
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	22c0      	movs	r2, #192	@ 0xc0
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f016 fc7b 	bl	801801c <memset>
  if(spiHandle->Instance==SPI1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a5f      	ldr	r2, [pc, #380]	@ (80018a8 <HAL_SPI_MspInit+0x1a8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d16c      	bne.n	800180a <HAL_SPI_MspInit+0x10a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001730:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800173c:	2302      	movs	r3, #2
 800173e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 130;
 8001740:	2382      	movs	r3, #130	@ 0x82
 8001742:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8001744:	230a      	movs	r3, #10
 8001746:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001748:	2302      	movs	r3, #2
 800174a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800174c:	2302      	movs	r3, #2
 800174e:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001750:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001754:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001756:	2300      	movs	r3, #0
 8001758:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800175e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001762:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f006 ff57 	bl	800861c <HAL_RCCEx_PeriphCLKConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8001774:	f7ff fe30 	bl	80013d8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001778:	4b4c      	ldr	r3, [pc, #304]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 800177a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800177e:	4a4b      	ldr	r2, [pc, #300]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 8001780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001784:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 800178a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800178e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b45      	ldr	r3, [pc, #276]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	4a43      	ldr	r2, [pc, #268]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a6:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB4 (NJTRST)     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017b4:	2330      	movs	r3, #48	@ 0x30
 80017b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017cc:	2305      	movs	r3, #5
 80017ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017d6:	4619      	mov	r1, r3
 80017d8:	4835      	ldr	r0, [pc, #212]	@ (80018b0 <HAL_SPI_MspInit+0x1b0>)
 80017da:	f004 f8db 	bl	8005994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017de:	2308      	movs	r3, #8
 80017e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f6:	2305      	movs	r3, #5
 80017f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001800:	4619      	mov	r1, r3
 8001802:	482b      	ldr	r0, [pc, #172]	@ (80018b0 <HAL_SPI_MspInit+0x1b0>)
 8001804:	f004 f8c6 	bl	8005994 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001808:	e049      	b.n	800189e <HAL_SPI_MspInit+0x19e>
  else if(spiHandle->Instance==SPI4)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a29      	ldr	r2, [pc, #164]	@ (80018b4 <HAL_SPI_MspInit+0x1b4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d144      	bne.n	800189e <HAL_SPI_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001814:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001820:	2300      	movs	r3, #0
 8001822:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001824:	f107 0318 	add.w	r3, r7, #24
 8001828:	4618      	mov	r0, r3
 800182a:	f006 fef7 	bl	800861c <HAL_RCCEx_PeriphCLKConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001834:	f7ff fdd0 	bl	80013d8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001838:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 800183a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800183e:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 8001840:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001844:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 800184a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800184e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185c:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_SPI_MspInit+0x1ac>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001874:	2364      	movs	r3, #100	@ 0x64
 8001876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800188c:	2305      	movs	r3, #5
 800188e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001892:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001896:	4619      	mov	r1, r3
 8001898:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <HAL_SPI_MspInit+0x1b8>)
 800189a:	f004 f87b 	bl	8005994 <HAL_GPIO_Init>
}
 800189e:	bf00      	nop
 80018a0:	37f0      	adds	r7, #240	@ 0xf0
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013000 	.word	0x40013000
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58020400 	.word	0x58020400
 80018b4:	40013400 	.word	0x40013400
 80018b8:	58021000 	.word	0x58021000

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_MspInit+0x38>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c8:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_MspInit+0x38>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_MspInit+0x38>)
 80018d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	210f      	movs	r1, #15
 80018e4:	f06f 0001 	mvn.w	r0, #1
 80018e8:	f001 fbb2 	bl	8003050 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	58024400 	.word	0x58024400

080018f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	@ 0x38
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	d844      	bhi.n	8001990 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001906:	2200      	movs	r2, #0
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	2019      	movs	r0, #25
 800190c:	f001 fba0 	bl	8003050 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001910:	2019      	movs	r0, #25
 8001912:	f001 fbb7 	bl	8003084 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001916:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <HAL_InitTick+0xb0>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800191c:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <HAL_InitTick+0xb4>)
 800191e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001922:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <HAL_InitTick+0xb4>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <HAL_InitTick+0xb4>)
 800192e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193a:	f107 020c 	add.w	r2, r7, #12
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f006 fe27 	bl	8008598 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800194a:	f006 fe0f 	bl	800856c <HAL_RCC_GetPCLK2Freq>
 800194e:	4603      	mov	r3, r0
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001956:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <HAL_InitTick+0xb8>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0c9b      	lsrs	r3, r3, #18
 800195e:	3b01      	subs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <HAL_InitTick+0xbc>)
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <HAL_InitTick+0xc0>)
 8001966:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_InitTick+0xbc>)
 800196a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800196e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001970:	4a10      	ldr	r2, [pc, #64]	@ (80019b4 <HAL_InitTick+0xbc>)
 8001972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001974:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_InitTick+0xbc>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <HAL_InitTick+0xbc>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001982:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <HAL_InitTick+0xbc>)
 8001984:	f00b fb1d 	bl	800cfc2 <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_InitTick+0xa6>
 800198e:	e001      	b.n	8001994 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e005      	b.n	80019a0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <HAL_InitTick+0xbc>)
 8001996:	f00b fb75 	bl	800d084 <HAL_TIM_Base_Start_IT>
 800199a:	4603      	mov	r3, r0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3738      	adds	r7, #56	@ 0x38
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2400000c 	.word	0x2400000c
 80019ac:	58024400 	.word	0x58024400
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	24000b50 	.word	0x24000b50
 80019b8:	40010000 	.word	0x40010000

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <NMI_Handler+0x4>

080019c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <MemManage_Handler+0x4>

080019d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f004 f9af 	bl	8005d5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8001a04:	2004      	movs	r0, #4
 8001a06:	f004 f9a8 	bl	8005d5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <DMA1_Stream0_IRQHandler+0x10>)
 8001a16:	f002 fc9f 	bl	8004358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24000c30 	.word	0x24000c30

08001a24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai3_a);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <DMA1_Stream1_IRQHandler+0x10>)
 8001a2a:	f002 fc95 	bl	8004358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	240009c4 	.word	0x240009c4

08001a38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <TIM1_UP_IRQHandler+0x10>)
 8001a3e:	f00b fb99 	bl	800d174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	24000b50 	.word	0x24000b50

08001a4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <OTG_FS_IRQHandler+0x10>)
 8001a52:	f004 fc11 	bl	8006278 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	240081a4 	.word	0x240081a4

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a64:	4b43      	ldr	r3, [pc, #268]	@ (8001b74 <SystemInit+0x114>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a42      	ldr	r2, [pc, #264]	@ (8001b74 <SystemInit+0x114>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <SystemInit+0x118>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2b06      	cmp	r3, #6
 8001a7e:	d807      	bhi.n	8001a90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a80:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <SystemInit+0x118>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	4a3b      	ldr	r2, [pc, #236]	@ (8001b78 <SystemInit+0x118>)
 8001a8a:	f043 0307 	orr.w	r3, r3, #7
 8001a8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a90:	4b3a      	ldr	r3, [pc, #232]	@ (8001b7c <SystemInit+0x11c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a39      	ldr	r2, [pc, #228]	@ (8001b7c <SystemInit+0x11c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a9c:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <SystemInit+0x11c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aa2:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <SystemInit+0x11c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <SystemInit+0x11c>)
 8001aa8:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <SystemInit+0x120>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aae:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <SystemInit+0x118>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aba:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <SystemInit+0x118>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 030f 	bic.w	r3, r3, #15
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b78 <SystemInit+0x118>)
 8001ac4:	f043 0307 	orr.w	r3, r3, #7
 8001ac8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aca:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <SystemInit+0x11c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <SystemInit+0x11c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ad6:	4b29      	ldr	r3, [pc, #164]	@ (8001b7c <SystemInit+0x11c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001adc:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <SystemInit+0x11c>)
 8001ade:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <SystemInit+0x124>)
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ae2:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <SystemInit+0x11c>)
 8001ae4:	4a28      	ldr	r2, [pc, #160]	@ (8001b88 <SystemInit+0x128>)
 8001ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	@ (8001b7c <SystemInit+0x11c>)
 8001aea:	4a28      	ldr	r2, [pc, #160]	@ (8001b8c <SystemInit+0x12c>)
 8001aec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aee:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <SystemInit+0x11c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <SystemInit+0x11c>)
 8001af6:	4a25      	ldr	r2, [pc, #148]	@ (8001b8c <SystemInit+0x12c>)
 8001af8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <SystemInit+0x11c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <SystemInit+0x11c>)
 8001b02:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <SystemInit+0x12c>)
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <SystemInit+0x11c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <SystemInit+0x11c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1a      	ldr	r2, [pc, #104]	@ (8001b7c <SystemInit+0x11c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <SystemInit+0x11c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <SystemInit+0x130>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <SystemInit+0x134>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b2a:	d202      	bcs.n	8001b32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <SystemInit+0x138>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <SystemInit+0x11c>)
 8001b34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d113      	bne.n	8001b68 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b40:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <SystemInit+0x11c>)
 8001b42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b46:	4a0d      	ldr	r2, [pc, #52]	@ (8001b7c <SystemInit+0x11c>)
 8001b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <SystemInit+0x13c>)
 8001b52:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b56:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <SystemInit+0x11c>)
 8001b5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b5e:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <SystemInit+0x11c>)
 8001b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b64:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	52002000 	.word	0x52002000
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b84:	02020200 	.word	0x02020200
 8001b88:	01ff0000 	.word	0x01ff0000
 8001b8c:	01010280 	.word	0x01010280
 8001b90:	5c001000 	.word	0x5c001000
 8001b94:	ffff0000 	.word	0xffff0000
 8001b98:	51008108 	.word	0x51008108
 8001b9c:	52004000 	.word	0x52004000

08001ba0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <ExitRun0Mode+0x2c>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <ExitRun0Mode+0x2c>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001bb0:	bf00      	nop
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <ExitRun0Mode+0x2c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f9      	beq.n	8001bb2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	58024800 	.word	0x58024800

08001bd0 <MX_UART8_Init>:
UART_HandleTypeDef huart8;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001bd6:	4a23      	ldr	r2, [pc, #140]	@ (8001c64 <MX_UART8_Init+0x94>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001bda:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001c18:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c1a:	f00b fc99 	bl	800d550 <HAL_UART_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001c24:	f7ff fbd8 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c2c:	f00c fca1 	bl	800e572 <HAL_UARTEx_SetTxFifoThreshold>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001c36:	f7ff fbcf 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4808      	ldr	r0, [pc, #32]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c3e:	f00c fcd6 	bl	800e5ee <HAL_UARTEx_SetRxFifoThreshold>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001c48:	f7ff fbc6 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <MX_UART8_Init+0x90>)
 8001c4e:	f00c fc57 	bl	800e500 <HAL_UARTEx_DisableFifoMode>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001c58:	f7ff fbbe 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	24000b9c 	.word	0x24000b9c
 8001c64:	40007c00 	.word	0x40007c00

08001c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0ba      	sub	sp, #232	@ 0xe8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	22c0      	movs	r2, #192	@ 0xc0
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f016 f9c7 	bl	801801c <memset>
  if(uartHandle->Instance==UART8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a3e      	ldr	r2, [pc, #248]	@ (8001d8c <HAL_UART_MspInit+0x124>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d174      	bne.n	8001d82 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001c98:	f04f 0202 	mov.w	r2, #2
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f006 fcb4 	bl	800861c <HAL_RCCEx_PeriphCLKConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001cba:	f7ff fb8d 	bl	80013d8 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001cbe:	4b34      	ldr	r3, [pc, #208]	@ (8001d90 <HAL_UART_MspInit+0x128>)
 8001cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cc4:	4a32      	ldr	r2, [pc, #200]	@ (8001d90 <HAL_UART_MspInit+0x128>)
 8001cc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001cca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cce:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <HAL_UART_MspInit+0x128>)
 8001cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <HAL_UART_MspInit+0x128>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_UART_MspInit+0x128>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cec:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <HAL_UART_MspInit+0x128>)
 8001cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001d12:	2308      	movs	r3, #8
 8001d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <HAL_UART_MspInit+0x12c>)
 8001d20:	f003 fe38 	bl	8005994 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d26:	4a1d      	ldr	r2, [pc, #116]	@ (8001d9c <HAL_UART_MspInit+0x134>)
 8001d28:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d2c:	2251      	movs	r2, #81	@ 0x51
 8001d2e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d42:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d56:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001d64:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d66:	f001 fa13 	bl	8003190 <HAL_DMA_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001d70:	f7ff fb32 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d7c:	4a06      	ldr	r2, [pc, #24]	@ (8001d98 <HAL_UART_MspInit+0x130>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001d82:	bf00      	nop
 8001d84:	37e8      	adds	r7, #232	@ 0xe8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40007c00 	.word	0x40007c00
 8001d90:	58024400 	.word	0x58024400
 8001d94:	58021000 	.word	0x58021000
 8001d98:	24000c30 	.word	0x24000c30
 8001d9c:	40020010 	.word	0x40020010

08001da0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8001da8:	f001 f85e 	bl	8002e68 <HAL_GetTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <SPI_Timer_On+0x20>)
 8001db0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8001db2:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <SPI_Timer_On+0x24>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	24000cac 	.word	0x24000cac
 8001dc4:	24000cb0 	.word	0x24000cb0

08001dc8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001dcc:	f001 f84c 	bl	8002e68 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <SPI_Timer_Status+0x24>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1ad2      	subs	r2, r2, r3
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <SPI_Timer_Status+0x28>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	bf34      	ite	cc
 8001de0:	2301      	movcc	r3, #1
 8001de2:	2300      	movcs	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	24000cac 	.word	0x24000cac
 8001df0:	24000cb0 	.word	0x24000cb0

08001df4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8001dfe:	f107 020f 	add.w	r2, r7, #15
 8001e02:	1df9      	adds	r1, r7, #7
 8001e04:	2332      	movs	r3, #50	@ 0x32
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <xchg_spi+0x28>)
 8001e0c:	f00a fcb6 	bl	800c77c <HAL_SPI_TransmitReceive>
    return rxDat;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	24000a40 	.word	0x24000a40

08001e20 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e00a      	b.n	8001e46 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	18d4      	adds	r4, r2, r3
 8001e36:	20ff      	movs	r0, #255	@ 0xff
 8001e38:	f7ff ffdc 	bl	8001df4 <xchg_spi>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3f0      	bcc.n	8001e30 <rcvr_spi_multi+0x10>
	}
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd90      	pop	{r4, r7, pc}

08001e58 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	e009      	b.n	8001e7c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffbf 	bl	8001df4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3f1      	bcc.n	8001e68 <xmit_spi_multi+0x10>
	}
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001e96:	f000 ffe7 	bl	8002e68 <HAL_GetTick>
 8001e9a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8001ea0:	20ff      	movs	r0, #255	@ 0xff
 8001ea2:	f7ff ffa7 	bl	8001df4 <xchg_spi>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2bff      	cmp	r3, #255	@ 0xff
 8001eae:	d007      	beq.n	8001ec0 <wait_ready+0x32>
 8001eb0:	f000 ffda 	bl	8002e68 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8ef      	bhi.n	8001ea0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2bff      	cmp	r3, #255	@ 0xff
 8001ec4:	bf0c      	ite	eq
 8001ec6:	2301      	moveq	r3, #1
 8001ec8:	2300      	movne	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ede:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <despiselect+0x1c>)
 8001ee0:	f003 ff08 	bl	8005cf4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001ee4:	20ff      	movs	r0, #255	@ 0xff
 8001ee6:	f7ff ff85 	bl	8001df4 <xchg_spi>

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	58020000 	.word	0x58020000

08001ef4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001efe:	480a      	ldr	r0, [pc, #40]	@ (8001f28 <spiselect+0x34>)
 8001f00:	f003 fef8 	bl	8005cf4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001f04:	20ff      	movs	r0, #255	@ 0xff
 8001f06:	f7ff ff75 	bl	8001df4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001f0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f0e:	f7ff ffbe 	bl	8001e8e <wait_ready>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <spiselect+0x28>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e002      	b.n	8001f22 <spiselect+0x2e>

	despiselect();
 8001f1c:	f7ff ffda 	bl	8001ed4 <despiselect>
	return 0;	/* Timeout */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	58020000 	.word	0x58020000

08001f2c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8001f36:	20c8      	movs	r0, #200	@ 0xc8
 8001f38:	f7ff ff32 	bl	8001da0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8001f3c:	20ff      	movs	r0, #255	@ 0xff
 8001f3e:	f7ff ff59 	bl	8001df4 <xchg_spi>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2bff      	cmp	r3, #255	@ 0xff
 8001f4a:	d104      	bne.n	8001f56 <rcvr_datablock+0x2a>
 8001f4c:	f7ff ff3c 	bl	8001dc8 <SPI_Timer_Status>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f2      	bne.n	8001f3c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f5a:	d001      	beq.n	8001f60 <rcvr_datablock+0x34>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e00a      	b.n	8001f76 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ff5c 	bl	8001e20 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001f68:	20ff      	movs	r0, #255	@ 0xff
 8001f6a:	f7ff ff43 	bl	8001df4 <xchg_spi>
 8001f6e:	20ff      	movs	r0, #255	@ 0xff
 8001f70:	f7ff ff40 	bl	8001df4 <xchg_spi>

	return 1;						/* Function succeeded */
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8001f8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f8e:	f7ff ff7e 	bl	8001e8e <wait_ready>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <xmit_datablock+0x1e>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e01e      	b.n	8001fda <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff28 	bl	8001df4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2bfd      	cmp	r3, #253	@ 0xfd
 8001fa8:	d016      	beq.n	8001fd8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8001faa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff52 	bl	8001e58 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001fb4:	20ff      	movs	r0, #255	@ 0xff
 8001fb6:	f7ff ff1d 	bl	8001df4 <xchg_spi>
 8001fba:	20ff      	movs	r0, #255	@ 0xff
 8001fbc:	f7ff ff1a 	bl	8001df4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8001fc0:	20ff      	movs	r0, #255	@ 0xff
 8001fc2:	f7ff ff17 	bl	8001df4 <xchg_spi>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d001      	beq.n	8001fd8 <xmit_datablock+0x5a>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <xmit_datablock+0x5c>
	}
	return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	6039      	str	r1, [r7, #0]
 8001fec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0e      	bge.n	8002014 <send_cmd+0x32>
		cmd &= 0x7F;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8001ffe:	2100      	movs	r1, #0
 8002000:	2037      	movs	r0, #55	@ 0x37
 8002002:	f7ff ffee 	bl	8001fe2 <send_cmd>
 8002006:	4603      	mov	r3, r0
 8002008:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d901      	bls.n	8002014 <send_cmd+0x32>
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	e051      	b.n	80020b8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d008      	beq.n	800202c <send_cmd+0x4a>
		despiselect();
 800201a:	f7ff ff5b 	bl	8001ed4 <despiselect>
		if (!spiselect()) return 0xFF;
 800201e:	f7ff ff69 	bl	8001ef4 <spiselect>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <send_cmd+0x4a>
 8002028:	23ff      	movs	r3, #255	@ 0xff
 800202a:	e045      	b.n	80020b8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fedd 	bl	8001df4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	0e1b      	lsrs	r3, r3, #24
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fed7 	bl	8001df4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fed1 	bl	8001df4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fecb 	bl	8001df4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fec6 	bl	8001df4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <send_cmd+0x94>
 8002072:	2395      	movs	r3, #149	@ 0x95
 8002074:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <send_cmd+0x9e>
 800207c:	2387      	movs	r3, #135	@ 0x87
 800207e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff feb6 	bl	8001df4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d102      	bne.n	8002094 <send_cmd+0xb2>
 800208e:	20ff      	movs	r0, #255	@ 0xff
 8002090:	f7ff feb0 	bl	8001df4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002094:	230a      	movs	r3, #10
 8002096:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002098:	20ff      	movs	r0, #255	@ 0xff
 800209a:	f7ff feab 	bl	8001df4 <xchg_spi>
 800209e:	4603      	mov	r3, r0
 80020a0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80020a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da05      	bge.n	80020b6 <send_cmd+0xd4>
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <send_cmd+0xb6>

	return res;							/* Return received response */
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <USER_SPI_initialize+0x14>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0d6      	b.n	8002282 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80020d4:	4b6d      	ldr	r3, [pc, #436]	@ (800228c <USER_SPI_initialize+0x1cc>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <USER_SPI_initialize+0x2a>
 80020e2:	4b6a      	ldr	r3, [pc, #424]	@ (800228c <USER_SPI_initialize+0x1cc>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	e0cb      	b.n	8002282 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80020ea:	4b69      	ldr	r3, [pc, #420]	@ (8002290 <USER_SPI_initialize+0x1d0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80020f4:	4b66      	ldr	r3, [pc, #408]	@ (8002290 <USER_SPI_initialize+0x1d0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 42c0 	orr.w	r2, r2, #1610612736	@ 0x60000000
 80020fc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80020fe:	230a      	movs	r3, #10
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e005      	b.n	8002110 <USER_SPI_initialize+0x50>
 8002104:	20ff      	movs	r0, #255	@ 0xff
 8002106:	f7ff fe75 	bl	8001df4 <xchg_spi>
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3b01      	subs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f6      	bne.n	8002104 <USER_SPI_initialize+0x44>

	ty = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800211a:	2100      	movs	r1, #0
 800211c:	2000      	movs	r0, #0
 800211e:	f7ff ff60 	bl	8001fe2 <send_cmd>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 808b 	bne.w	8002240 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800212a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800212e:	f7ff fe37 	bl	8001da0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002132:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002136:	2008      	movs	r0, #8
 8002138:	f7ff ff53 	bl	8001fe2 <send_cmd>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d151      	bne.n	80021e6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	e00d      	b.n	8002164 <USER_SPI_initialize+0xa4>
 8002148:	7bfc      	ldrb	r4, [r7, #15]
 800214a:	20ff      	movs	r0, #255	@ 0xff
 800214c:	f7ff fe52 	bl	8001df4 <xchg_spi>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	f104 0310 	add.w	r3, r4, #16
 8002158:	443b      	add	r3, r7
 800215a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	3301      	adds	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d9ee      	bls.n	8002148 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800216a:	7abb      	ldrb	r3, [r7, #10]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d167      	bne.n	8002240 <USER_SPI_initialize+0x180>
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	2baa      	cmp	r3, #170	@ 0xaa
 8002174:	d164      	bne.n	8002240 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002176:	bf00      	nop
 8002178:	f7ff fe26 	bl	8001dc8 <SPI_Timer_Status>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <USER_SPI_initialize+0xd2>
 8002182:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002186:	20a9      	movs	r0, #169	@ 0xa9
 8002188:	f7ff ff2b 	bl	8001fe2 <send_cmd>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f2      	bne.n	8002178 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002192:	f7ff fe19 	bl	8001dc8 <SPI_Timer_Status>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d051      	beq.n	8002240 <USER_SPI_initialize+0x180>
 800219c:	2100      	movs	r1, #0
 800219e:	203a      	movs	r0, #58	@ 0x3a
 80021a0:	f7ff ff1f 	bl	8001fe2 <send_cmd>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d14a      	bne.n	8002240 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e00d      	b.n	80021cc <USER_SPI_initialize+0x10c>
 80021b0:	7bfc      	ldrb	r4, [r7, #15]
 80021b2:	20ff      	movs	r0, #255	@ 0xff
 80021b4:	f7ff fe1e 	bl	8001df4 <xchg_spi>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	f104 0310 	add.w	r3, r4, #16
 80021c0:	443b      	add	r3, r7
 80021c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	3301      	adds	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d9ee      	bls.n	80021b0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80021d2:	7a3b      	ldrb	r3, [r7, #8]
 80021d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <USER_SPI_initialize+0x120>
 80021dc:	230c      	movs	r3, #12
 80021de:	e000      	b.n	80021e2 <USER_SPI_initialize+0x122>
 80021e0:	2304      	movs	r3, #4
 80021e2:	737b      	strb	r3, [r7, #13]
 80021e4:	e02c      	b.n	8002240 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80021e6:	2100      	movs	r1, #0
 80021e8:	20a9      	movs	r0, #169	@ 0xa9
 80021ea:	f7ff fefa 	bl	8001fe2 <send_cmd>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d804      	bhi.n	80021fe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80021f4:	2302      	movs	r3, #2
 80021f6:	737b      	strb	r3, [r7, #13]
 80021f8:	23a9      	movs	r3, #169	@ 0xa9
 80021fa:	73bb      	strb	r3, [r7, #14]
 80021fc:	e003      	b.n	8002206 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80021fe:	2301      	movs	r3, #1
 8002200:	737b      	strb	r3, [r7, #13]
 8002202:	2301      	movs	r3, #1
 8002204:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002206:	bf00      	nop
 8002208:	f7ff fdde 	bl	8001dc8 <SPI_Timer_Status>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <USER_SPI_initialize+0x162>
 8002212:	7bbb      	ldrb	r3, [r7, #14]
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fee3 	bl	8001fe2 <send_cmd>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f2      	bne.n	8002208 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002222:	f7ff fdd1 	bl	8001dc8 <SPI_Timer_Status>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <USER_SPI_initialize+0x17c>
 800222c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002230:	2010      	movs	r0, #16
 8002232:	f7ff fed6 	bl	8001fe2 <send_cmd>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <USER_SPI_initialize+0x180>
				ty = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002240:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <USER_SPI_initialize+0x1d4>)
 8002242:	7b7b      	ldrb	r3, [r7, #13]
 8002244:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002246:	f7ff fe45 	bl	8001ed4 <despiselect>

	if (ty) {			/* OK */
 800224a:	7b7b      	ldrb	r3, [r7, #13]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d012      	beq.n	8002276 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <USER_SPI_initialize+0x1d0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <USER_SPI_initialize+0x1d0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002262:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <USER_SPI_initialize+0x1cc>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <USER_SPI_initialize+0x1cc>)
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e002      	b.n	800227c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <USER_SPI_initialize+0x1cc>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <USER_SPI_initialize+0x1cc>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	24000008 	.word	0x24000008
 8002290:	24000a40 	.word	0x24000a40
 8002294:	24000ca8 	.word	0x24000ca8

08002298 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <USER_SPI_status+0x14>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e002      	b.n	80022b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <USER_SPI_status+0x28>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	24000008 	.word	0x24000008

080022c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <USER_SPI_read+0x1c>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <USER_SPI_read+0x20>
 80022e0:	2304      	movs	r3, #4
 80022e2:	e04d      	b.n	8002380 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80022e4:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <USER_SPI_read+0xc4>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <USER_SPI_read+0x32>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e044      	b.n	8002380 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80022f6:	4b25      	ldr	r3, [pc, #148]	@ (800238c <USER_SPI_read+0xc8>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <USER_SPI_read+0x44>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	025b      	lsls	r3, r3, #9
 8002306:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d111      	bne.n	8002332 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	2011      	movs	r0, #17
 8002312:	f7ff fe66 	bl	8001fe2 <send_cmd>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d129      	bne.n	8002370 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800231c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	f7ff fe03 	bl	8001f2c <rcvr_datablock>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d021      	beq.n	8002370 <USER_SPI_read+0xac>
			count = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	e01e      	b.n	8002370 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	2012      	movs	r0, #18
 8002336:	f7ff fe54 	bl	8001fe2 <send_cmd>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d117      	bne.n	8002370 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002340:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f7ff fdf1 	bl	8001f2c <rcvr_datablock>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <USER_SPI_read+0xa2>
				buff += 512;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002356:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3b01      	subs	r3, #1
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ed      	bne.n	8002340 <USER_SPI_read+0x7c>
 8002364:	e000      	b.n	8002368 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002366:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002368:	2100      	movs	r1, #0
 800236a:	200c      	movs	r0, #12
 800236c:	f7ff fe39 	bl	8001fe2 <send_cmd>
		}
	}
	despiselect();
 8002370:	f7ff fdb0 	bl	8001ed4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf14      	ite	ne
 800237a:	2301      	movne	r3, #1
 800237c:	2300      	moveq	r3, #0
 800237e:	b2db      	uxtb	r3, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	24000008 	.word	0x24000008
 800238c:	24000ca8 	.word	0x24000ca8

08002390 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <USER_SPI_write+0x1c>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <USER_SPI_write+0x20>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e063      	b.n	8002478 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80023b0:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <USER_SPI_write+0xf0>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <USER_SPI_write+0x32>
 80023be:	2303      	movs	r3, #3
 80023c0:	e05a      	b.n	8002478 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80023c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002480 <USER_SPI_write+0xf0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <USER_SPI_write+0x44>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e051      	b.n	8002478 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80023d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <USER_SPI_write+0xf4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <USER_SPI_write+0x56>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d110      	bne.n	800240e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	2018      	movs	r0, #24
 80023f0:	f7ff fdf7 	bl	8001fe2 <send_cmd>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d136      	bne.n	8002468 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80023fa:	21fe      	movs	r1, #254	@ 0xfe
 80023fc:	68b8      	ldr	r0, [r7, #8]
 80023fe:	f7ff fdbe 	bl	8001f7e <xmit_datablock>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02f      	beq.n	8002468 <USER_SPI_write+0xd8>
			count = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	e02c      	b.n	8002468 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800240e:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <USER_SPI_write+0xf4>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	f003 0306 	and.w	r3, r3, #6
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <USER_SPI_write+0x92>
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	2097      	movs	r0, #151	@ 0x97
 800241e:	f7ff fde0 	bl	8001fe2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	2019      	movs	r0, #25
 8002426:	f7ff fddc 	bl	8001fe2 <send_cmd>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11b      	bne.n	8002468 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002430:	21fc      	movs	r1, #252	@ 0xfc
 8002432:	68b8      	ldr	r0, [r7, #8]
 8002434:	f7ff fda3 	bl	8001f7e <xmit_datablock>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <USER_SPI_write+0xc4>
				buff += 512;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002444:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	3b01      	subs	r3, #1
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ee      	bne.n	8002430 <USER_SPI_write+0xa0>
 8002452:	e000      	b.n	8002456 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002454:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002456:	21fd      	movs	r1, #253	@ 0xfd
 8002458:	2000      	movs	r0, #0
 800245a:	f7ff fd90 	bl	8001f7e <xmit_datablock>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <USER_SPI_write+0xd8>
 8002464:	2301      	movs	r3, #1
 8002466:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002468:	f7ff fd34 	bl	8001ed4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	24000008 	.word	0x24000008
 8002484:	24000ca8 	.word	0x24000ca8

08002488 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	@ 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	603a      	str	r2, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	460b      	mov	r3, r1
 8002496:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <USER_SPI_ioctl+0x1a>
 800249e:	2304      	movs	r3, #4
 80024a0:	e15a      	b.n	8002758 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80024a2:	4baf      	ldr	r3, [pc, #700]	@ (8002760 <USER_SPI_ioctl+0x2d8>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <USER_SPI_ioctl+0x2c>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e151      	b.n	8002758 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	f200 8136 	bhi.w	800272e <USER_SPI_ioctl+0x2a6>
 80024c2:	a201      	add	r2, pc, #4	@ (adr r2, 80024c8 <USER_SPI_ioctl+0x40>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	080024f1 	.word	0x080024f1
 80024d0:	0800272f 	.word	0x0800272f
 80024d4:	0800259d 	.word	0x0800259d
 80024d8:	08002693 	.word	0x08002693
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80024dc:	f7ff fd0a 	bl	8001ef4 <spiselect>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8127 	beq.w	8002736 <USER_SPI_ioctl+0x2ae>
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80024ee:	e122      	b.n	8002736 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80024f0:	2100      	movs	r1, #0
 80024f2:	2009      	movs	r0, #9
 80024f4:	f7ff fd75 	bl	8001fe2 <send_cmd>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 811d 	bne.w	800273a <USER_SPI_ioctl+0x2b2>
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	2110      	movs	r1, #16
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fd10 	bl	8001f2c <rcvr_datablock>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8113 	beq.w	800273a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002514:	7b3b      	ldrb	r3, [r7, #12]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d111      	bne.n	8002542 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800251e:	7d7b      	ldrb	r3, [r7, #21]
 8002520:	461a      	mov	r2, r3
 8002522:	7d3b      	ldrb	r3, [r7, #20]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	4413      	add	r3, r2
 8002528:	461a      	mov	r2, r3
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8002532:	4413      	add	r3, r2
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	029a      	lsls	r2, r3, #10
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e028      	b.n	8002594 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002542:	7c7b      	ldrb	r3, [r7, #17]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	b2da      	uxtb	r2, r3
 800254a:	7dbb      	ldrb	r3, [r7, #22]
 800254c:	09db      	lsrs	r3, r3, #7
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4413      	add	r3, r2
 8002552:	b2da      	uxtb	r2, r3
 8002554:	7d7b      	ldrb	r3, [r7, #21]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 0306 	and.w	r3, r3, #6
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4413      	add	r3, r2
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3302      	adds	r3, #2
 8002566:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800256a:	7d3b      	ldrb	r3, [r7, #20]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	441a      	add	r2, r3
 8002578:	7cbb      	ldrb	r3, [r7, #18]
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002580:	4413      	add	r3, r2
 8002582:	3301      	adds	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800258a:	3b09      	subs	r3, #9
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	409a      	lsls	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800259a:	e0ce      	b.n	800273a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800259c:	4b71      	ldr	r3, [pc, #452]	@ (8002764 <USER_SPI_ioctl+0x2dc>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d031      	beq.n	800260c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80025a8:	2100      	movs	r1, #0
 80025aa:	208d      	movs	r0, #141	@ 0x8d
 80025ac:	f7ff fd19 	bl	8001fe2 <send_cmd>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 80c3 	bne.w	800273e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80025b8:	20ff      	movs	r0, #255	@ 0xff
 80025ba:	f7ff fc1b 	bl	8001df4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	2110      	movs	r1, #16
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fcb1 	bl	8001f2c <rcvr_datablock>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80b6 	beq.w	800273e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80025d2:	2330      	movs	r3, #48	@ 0x30
 80025d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80025d8:	e007      	b.n	80025ea <USER_SPI_ioctl+0x162>
 80025da:	20ff      	movs	r0, #255	@ 0xff
 80025dc:	f7ff fc0a 	bl	8001df4 <xchg_spi>
 80025e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80025e4:	3b01      	subs	r3, #1
 80025e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80025ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f3      	bne.n	80025da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80025f2:	7dbb      	ldrb	r3, [r7, #22]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	2310      	movs	r3, #16
 80025fc:	fa03 f202 	lsl.w	r2, r3, r2
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800260a:	e098      	b.n	800273e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800260c:	2100      	movs	r1, #0
 800260e:	2009      	movs	r0, #9
 8002610:	f7ff fce7 	bl	8001fe2 <send_cmd>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8091 	bne.w	800273e <USER_SPI_ioctl+0x2b6>
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	2110      	movs	r1, #16
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc82 	bl	8001f2c <rcvr_datablock>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8087 	beq.w	800273e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002630:	4b4c      	ldr	r3, [pc, #304]	@ (8002764 <USER_SPI_ioctl+0x2dc>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002644:	7dfa      	ldrb	r2, [r7, #23]
 8002646:	09d2      	lsrs	r2, r2, #7
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4413      	add	r3, r2
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	7e7b      	ldrb	r3, [r7, #25]
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e013      	b.n	800268a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002662:	7dbb      	ldrb	r3, [r7, #22]
 8002664:	109b      	asrs	r3, r3, #2
 8002666:	b29b      	uxth	r3, r3
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	3301      	adds	r3, #1
 800266e:	7dfa      	ldrb	r2, [r7, #23]
 8002670:	00d2      	lsls	r2, r2, #3
 8002672:	f002 0218 	and.w	r2, r2, #24
 8002676:	7df9      	ldrb	r1, [r7, #23]
 8002678:	0949      	lsrs	r1, r1, #5
 800267a:	b2c9      	uxtb	r1, r1
 800267c:	440a      	add	r2, r1
 800267e:	3201      	adds	r2, #1
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	461a      	mov	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8002690:	e055      	b.n	800273e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002692:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <USER_SPI_ioctl+0x2dc>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f003 0306 	and.w	r3, r3, #6
 800269a:	2b00      	cmp	r3, #0
 800269c:	d051      	beq.n	8002742 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800269e:	f107 020c 	add.w	r2, r7, #12
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	210b      	movs	r1, #11
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff feee 	bl	8002488 <USER_SPI_ioctl>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d149      	bne.n	8002746 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80026b2:	7b3b      	ldrb	r3, [r7, #12]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <USER_SPI_ioctl+0x23e>
 80026bc:	7dbb      	ldrb	r3, [r7, #22]
 80026be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d041      	beq.n	800274a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80026d6:	4b23      	ldr	r3, [pc, #140]	@ (8002764 <USER_SPI_ioctl+0x2dc>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	025b      	lsls	r3, r3, #9
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	025b      	lsls	r3, r3, #9
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80026ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026f0:	2020      	movs	r0, #32
 80026f2:	f7ff fc76 	bl	8001fe2 <send_cmd>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d128      	bne.n	800274e <USER_SPI_ioctl+0x2c6>
 80026fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026fe:	2021      	movs	r0, #33	@ 0x21
 8002700:	f7ff fc6f 	bl	8001fe2 <send_cmd>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d121      	bne.n	800274e <USER_SPI_ioctl+0x2c6>
 800270a:	2100      	movs	r1, #0
 800270c:	2026      	movs	r0, #38	@ 0x26
 800270e:	f7ff fc68 	bl	8001fe2 <send_cmd>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11a      	bne.n	800274e <USER_SPI_ioctl+0x2c6>
 8002718:	f247 5030 	movw	r0, #30000	@ 0x7530
 800271c:	f7ff fbb7 	bl	8001e8e <wait_ready>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d013      	beq.n	800274e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002726:	2300      	movs	r3, #0
 8002728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800272c:	e00f      	b.n	800274e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800272e:	2304      	movs	r3, #4
 8002730:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002734:	e00c      	b.n	8002750 <USER_SPI_ioctl+0x2c8>
		break;
 8002736:	bf00      	nop
 8002738:	e00a      	b.n	8002750 <USER_SPI_ioctl+0x2c8>
		break;
 800273a:	bf00      	nop
 800273c:	e008      	b.n	8002750 <USER_SPI_ioctl+0x2c8>
		break;
 800273e:	bf00      	nop
 8002740:	e006      	b.n	8002750 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002742:	bf00      	nop
 8002744:	e004      	b.n	8002750 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002746:	bf00      	nop
 8002748:	e002      	b.n	8002750 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800274a:	bf00      	nop
 800274c:	e000      	b.n	8002750 <USER_SPI_ioctl+0x2c8>
		break;
 800274e:	bf00      	nop
	}

	despiselect();
 8002750:	f7ff fbc0 	bl	8001ed4 <despiselect>

	return res;
 8002754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002758:	4618      	mov	r0, r3
 800275a:	3730      	adds	r7, #48	@ 0x30
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	24000008 	.word	0x24000008
 8002764:	24000ca8 	.word	0x24000ca8

08002768 <rd>:
static uint32_t s_left=0;        /* bytes restants dans "data" */
static uint16_t s_ch=0;          /* 1 ou 2 */
static bool     s_play=false;

/* ===== Helpers compacts ===== */
static bool rd(void *p, UINT n){ UINT br; return (f_read(&s_f,p,n,&br)==FR_OK && br==n); }
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	480a      	ldr	r0, [pc, #40]	@ (80027a4 <rd+0x3c>)
 800277c:	f011 faf5 	bl	8013d6a <f_read>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <rd+0x2a>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d101      	bne.n	8002792 <rd+0x2a>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <rd+0x2c>
 8002792:	2300      	movs	r3, #0
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	24002cb8 	.word	0x24002cb8

080027a8 <find_data>:

static bool find_data(uint32_t *sz){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  struct __attribute__((packed)){char id[4]; uint32_t sz;} ch;
  for(;;){
    if(!rd(&ch,sizeof ch)) return false;
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2108      	movs	r1, #8
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffd6 	bl	8002768 <rd>
 80027bc:	4603      	mov	r3, r0
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <find_data+0x24>
 80027c8:	2300      	movs	r3, #0
 80027ca:	e01f      	b.n	800280c <find_data+0x64>
    if(!memcmp(ch.id,"data",4)){ *sz=ch.sz; return true; }
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2204      	movs	r2, #4
 80027d2:	4910      	ldr	r1, [pc, #64]	@ (8002814 <find_data+0x6c>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f015 fc11 	bl	8017ffc <memcmp>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <find_data+0x42>
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	2301      	movs	r3, #1
 80027e8:	e010      	b.n	800280c <find_data+0x64>
    UINT skip=ch.sz + (ch.sz&1);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3301      	adds	r3, #1
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
    if(f_lseek(&s_f, f_tell(&s_f)+skip)!=FR_OK) return false;
 80027f4:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <find_data+0x70>)
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4413      	add	r3, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	4806      	ldr	r0, [pc, #24]	@ (8002818 <find_data+0x70>)
 8002800:	f011 fe7d 	bl	80144fe <f_lseek>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0d2      	beq.n	80027b0 <find_data+0x8>
 800280a:	2300      	movs	r3, #0
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	08018298 	.word	0x08018298
 8002818:	24002cb8 	.word	0x24002cb8

0800281c <fill_half>:

static bool fill_half(int half){
 800281c:	b580      	push	{r7, lr}
 800281e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800282a:	f843 0c2c 	str.w	r0, [r3, #-44]
  int16_t *dst = &s_dma[(half?1:0)*WAV_DMA_FRAMES*2];
 800282e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002832:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <fill_half+0x24>
 800283a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800283e:	e000      	b.n	8002842 <fill_half+0x26>
 8002840:	2300      	movs	r3, #0
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4a91      	ldr	r2, [pc, #580]	@ (8002a8c <fill_half+0x270>)
 8002846:	4413      	add	r3, r2
 8002848:	f241 022c 	movw	r2, #4140	@ 0x102c
 800284c:	443a      	add	r2, r7
 800284e:	6013      	str	r3, [r2, #0]
  uint32_t frames = WAV_DMA_FRAMES;
 8002850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002854:	f241 0228 	movw	r2, #4136	@ 0x1028
 8002858:	443a      	add	r2, r7
 800285a:	6013      	str	r3, [r2, #0]
  while(frames){
 800285c:	e107      	b.n	8002a6e <fill_half+0x252>
    if(!s_left){ memset(dst,0,frames*2*sizeof(int16_t)); break; }
 800285e:	4b8c      	ldr	r3, [pc, #560]	@ (8002a90 <fill_half+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <fill_half+0x66>
 8002866:	f241 0328 	movw	r3, #4136	@ 0x1028
 800286a:	443b      	add	r3, r7
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	461a      	mov	r2, r3
 8002872:	2100      	movs	r1, #0
 8002874:	f241 032c 	movw	r3, #4140	@ 0x102c
 8002878:	443b      	add	r3, r7
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f015 fbce 	bl	801801c <memset>
 8002880:	e0fc      	b.n	8002a7c <fill_half+0x260>
    int16_t tmp[2048]; /* jusqu'à 1024 frames stéréo */
    uint32_t need_samples = (s_ch==1)? frames : frames*2;
 8002882:	4b84      	ldr	r3, [pc, #528]	@ (8002a94 <fill_half+0x278>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d005      	beq.n	8002896 <fill_half+0x7a>
 800288a:	f241 0328 	movw	r3, #4136	@ 0x1028
 800288e:	443b      	add	r3, r7
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	e003      	b.n	800289e <fill_half+0x82>
 8002896:	f241 0328 	movw	r3, #4136	@ 0x1028
 800289a:	443b      	add	r3, r7
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f241 0224 	movw	r2, #4132	@ 0x1024
 80028a2:	443a      	add	r2, r7
 80028a4:	6013      	str	r3, [r2, #0]
    if(need_samples>2048) need_samples=2048;
 80028a6:	f241 0324 	movw	r3, #4132	@ 0x1024
 80028aa:	443b      	add	r3, r7
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028b2:	d905      	bls.n	80028c0 <fill_half+0xa4>
 80028b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028b8:	f241 0224 	movw	r2, #4132	@ 0x1024
 80028bc:	443a      	add	r2, r7
 80028be:	6013      	str	r3, [r2, #0]
    UINT to_bytes = need_samples*2; UINT br=0;
 80028c0:	f241 0324 	movw	r3, #4132	@ 0x1024
 80028c4:	443b      	add	r3, r7
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	f241 021c 	movw	r2, #4124	@ 0x101c
 80028ce:	443a      	add	r2, r7
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	f241 0208 	movw	r2, #4104	@ 0x1008
 80028d8:	443a      	add	r2, r7
 80028da:	6013      	str	r3, [r2, #0]
    if(f_read(&s_f,tmp,to_bytes,&br)!=FR_OK) return false;
 80028dc:	f241 0308 	movw	r3, #4104	@ 0x1008
 80028e0:	443b      	add	r3, r7
 80028e2:	496d      	ldr	r1, [pc, #436]	@ (8002a98 <fill_half+0x27c>)
 80028e4:	f241 0230 	movw	r2, #4144	@ 0x1030
 80028e8:	440a      	add	r2, r1
 80028ea:	19d1      	adds	r1, r2, r7
 80028ec:	f241 021c 	movw	r2, #4124	@ 0x101c
 80028f0:	443a      	add	r2, r7
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4869      	ldr	r0, [pc, #420]	@ (8002a9c <fill_half+0x280>)
 80028f6:	f011 fa38 	bl	8013d6a <f_read>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <fill_half+0xe8>
 8002900:	2300      	movs	r3, #0
 8002902:	e0bc      	b.n	8002a7e <fill_half+0x262>
    s_left -= br; uint32_t got = br/2;
 8002904:	4b62      	ldr	r3, [pc, #392]	@ (8002a90 <fill_half+0x274>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	f241 0308 	movw	r3, #4104	@ 0x1008
 800290c:	443b      	add	r3, r7
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	4a5f      	ldr	r2, [pc, #380]	@ (8002a90 <fill_half+0x274>)
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	f241 0308 	movw	r3, #4104	@ 0x1008
 800291a:	443b      	add	r3, r7
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	f241 0218 	movw	r2, #4120	@ 0x1018
 8002924:	443a      	add	r2, r7
 8002926:	6013      	str	r3, [r2, #0]
    if(s_ch==1){ uint32_t gf=got; for(uint32_t i=0;i<gf;i++){ int16_t m=tmp[i]; *dst++=m; *dst++=m; } frames-=gf; }
 8002928:	4b5a      	ldr	r3, [pc, #360]	@ (8002a94 <fill_half+0x278>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d154      	bne.n	80029da <fill_half+0x1be>
 8002930:	f241 0318 	movw	r3, #4120	@ 0x1018
 8002934:	443b      	add	r3, r7
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f241 0210 	movw	r2, #4112	@ 0x1010
 800293c:	443a      	add	r2, r7
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	2300      	movs	r3, #0
 8002942:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e030      	b.n	80029ac <fill_half+0x190>
 800294a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800294e:	461a      	mov	r2, r3
 8002950:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800295e:	f241 020e 	movw	r2, #4110	@ 0x100e
 8002962:	443a      	add	r2, r7
 8002964:	8013      	strh	r3, [r2, #0]
 8002966:	f241 032c 	movw	r3, #4140	@ 0x102c
 800296a:	443b      	add	r3, r7
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	1c9a      	adds	r2, r3, #2
 8002970:	f241 012c 	movw	r1, #4140	@ 0x102c
 8002974:	4439      	add	r1, r7
 8002976:	600a      	str	r2, [r1, #0]
 8002978:	f241 020e 	movw	r2, #4110	@ 0x100e
 800297c:	443a      	add	r2, r7
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	f241 032c 	movw	r3, #4140	@ 0x102c
 8002986:	443b      	add	r3, r7
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1c9a      	adds	r2, r3, #2
 800298c:	f241 012c 	movw	r1, #4140	@ 0x102c
 8002990:	4439      	add	r1, r7
 8002992:	600a      	str	r2, [r1, #0]
 8002994:	f241 020e 	movw	r2, #4110	@ 0x100e
 8002998:	443a      	add	r2, r7
 800299a:	8812      	ldrh	r2, [r2, #0]
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f241 0310 	movw	r3, #4112	@ 0x1010
 80029b6:	443b      	add	r3, r7
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3c5      	bcc.n	800294a <fill_half+0x12e>
 80029be:	f241 0328 	movw	r3, #4136	@ 0x1028
 80029c2:	443b      	add	r3, r7
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f241 0310 	movw	r3, #4112	@ 0x1010
 80029ca:	443b      	add	r3, r7
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 0228 	movw	r2, #4136	@ 0x1028
 80029d4:	443a      	add	r2, r7
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e035      	b.n	8002a46 <fill_half+0x22a>
    else       { uint32_t gf=got/2; memcpy(dst,tmp,gf*2*sizeof(int16_t)); dst+=gf*2; frames-=gf; }
 80029da:	f241 0318 	movw	r3, #4120	@ 0x1018
 80029de:	443b      	add	r3, r7
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	f241 0214 	movw	r2, #4116	@ 0x1014
 80029e8:	443a      	add	r2, r7
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	f241 0314 	movw	r3, #4116	@ 0x1014
 80029f0:	443b      	add	r3, r7
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	4b28      	ldr	r3, [pc, #160]	@ (8002a98 <fill_half+0x27c>)
 80029f8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80029fc:	f103 0310 	add.w	r3, r3, #16
 8002a00:	443b      	add	r3, r7
 8002a02:	4619      	mov	r1, r3
 8002a04:	f241 032c 	movw	r3, #4140	@ 0x102c
 8002a08:	443b      	add	r3, r7
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	f015 fb92 	bl	8018134 <memcpy>
 8002a10:	f241 0314 	movw	r3, #4116	@ 0x1014
 8002a14:	443b      	add	r3, r7
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	f241 022c 	movw	r2, #4140	@ 0x102c
 8002a1e:	443a      	add	r2, r7
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	f241 022c 	movw	r2, #4140	@ 0x102c
 8002a28:	443a      	add	r2, r7
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	f241 0328 	movw	r3, #4136	@ 0x1028
 8002a30:	443b      	add	r3, r7
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	f241 0314 	movw	r3, #4116	@ 0x1014
 8002a38:	443b      	add	r3, r7
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 0228 	movw	r2, #4136	@ 0x1028
 8002a42:	443a      	add	r2, r7
 8002a44:	6013      	str	r3, [r2, #0]
    if(!br){ memset(dst,0,frames*2*sizeof(int16_t)); break; }
 8002a46:	f241 0308 	movw	r3, #4104	@ 0x1008
 8002a4a:	443b      	add	r3, r7
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <fill_half+0x252>
 8002a52:	f241 0328 	movw	r3, #4136	@ 0x1028
 8002a56:	443b      	add	r3, r7
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2100      	movs	r1, #0
 8002a60:	f241 032c 	movw	r3, #4140	@ 0x102c
 8002a64:	443b      	add	r3, r7
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f015 fad8 	bl	801801c <memset>
 8002a6c:	e006      	b.n	8002a7c <fill_half+0x260>
  while(frames){
 8002a6e:	f241 0328 	movw	r3, #4136	@ 0x1028
 8002a72:	443b      	add	r3, r7
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f47f aef1 	bne.w	800285e <fill_half+0x42>
  }
  return true;
 8002a7c:	2301      	movs	r3, #1
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000cb4 	.word	0x24000cb4
 8002a90:	24002ee8 	.word	0x24002ee8
 8002a94:	24002eec 	.word	0x24002eec
 8002a98:	ffffefd8 	.word	0xffffefd8
 8002a9c:	24002cb8 	.word	0x24002cb8

08002aa0 <WAV_Init>:

/* ===== API ===== */
void WAV_Init(void){ s_play=false; s_need0=s_need1=0; }
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4b07      	ldr	r3, [pc, #28]	@ (8002ac4 <WAV_Init+0x24>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <WAV_Init+0x28>)
 8002aae:	460a      	mov	r2, r1
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <WAV_Init+0x2c>)
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	24002eee 	.word	0x24002eee
 8002ac8:	24002cb5 	.word	0x24002cb5
 8002acc:	24002cb4 	.word	0x24002cb4

08002ad0 <WAV_Play>:

bool WAV_Play(const char *path){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	@ 0x30
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if(s_play) return false;
 8002ad8:	4b48      	ldr	r3, [pc, #288]	@ (8002bfc <WAV_Play+0x12c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <WAV_Play+0x14>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e086      	b.n	8002bf2 <WAV_Play+0x122>
  if(f_open(&s_f,path,FA_READ)!=FR_OK) return false;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4845      	ldr	r0, [pc, #276]	@ (8002c00 <WAV_Play+0x130>)
 8002aea:	f010 ff7d 	bl	80139e8 <f_open>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <WAV_Play+0x28>
 8002af4:	2300      	movs	r3, #0
 8002af6:	e07c      	b.n	8002bf2 <WAV_Play+0x122>
  struct __attribute__((packed)){
    char RIFF[4]; uint32_t cs; char WAVE[4];
    char fmt_[4]; uint32_t fsz; uint16_t fmt; uint16_t ch;
    uint32_t fs;  uint32_t br;  uint16_t ba;  uint16_t bps;
  } h;
  if(!rd(&h,sizeof h) || memcmp(h.RIFF,"RIFF",4) || memcmp(h.WAVE,"WAVE",4) ||
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	2124      	movs	r1, #36	@ 0x24
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fe32 	bl	8002768 <rd>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d12b      	bne.n	8002b68 <WAV_Play+0x98>
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	2204      	movs	r2, #4
 8002b16:	493b      	ldr	r1, [pc, #236]	@ (8002c04 <WAV_Play+0x134>)
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f015 fa6f 	bl	8017ffc <memcmp>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d121      	bne.n	8002b68 <WAV_Play+0x98>
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	3308      	adds	r3, #8
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	4936      	ldr	r1, [pc, #216]	@ (8002c08 <WAV_Play+0x138>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f015 fa64 	bl	8017ffc <memcmp>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <WAV_Play+0x98>
     memcmp(h.fmt_,"fmt ",4) || h.fmt!=1 || h.bps!=16 || (h.ch!=1 && h.ch!=2)){
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	330c      	adds	r3, #12
 8002b40:	2204      	movs	r2, #4
 8002b42:	4932      	ldr	r1, [pc, #200]	@ (8002c0c <WAV_Play+0x13c>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f015 fa59 	bl	8017ffc <memcmp>
 8002b4a:	4603      	mov	r3, r0
  if(!rd(&h,sizeof h) || memcmp(h.RIFF,"RIFF",4) || memcmp(h.WAVE,"WAVE",4) ||
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <WAV_Play+0x98>
     memcmp(h.fmt_,"fmt ",4) || h.fmt!=1 || h.bps!=16 || (h.ch!=1 && h.ch!=2)){
 8002b50:	8c3b      	ldrh	r3, [r7, #32]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <WAV_Play+0x98>
 8002b56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d105      	bne.n	8002b68 <WAV_Play+0x98>
 8002b5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d007      	beq.n	8002b72 <WAV_Play+0xa2>
 8002b62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d004      	beq.n	8002b72 <WAV_Play+0xa2>
    f_close(&s_f); return false;
 8002b68:	4825      	ldr	r0, [pc, #148]	@ (8002c00 <WAV_Play+0x130>)
 8002b6a:	f011 fc99 	bl	80144a0 <f_close>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e03f      	b.n	8002bf2 <WAV_Play+0x122>
  }
  s_ch=h.ch; uint32_t dataSz=0; if(!find_data(&dataSz)){ f_close(&s_f); return false; }
 8002b72:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002b74:	4b26      	ldr	r3, [pc, #152]	@ (8002c10 <WAV_Play+0x140>)
 8002b76:	801a      	strh	r2, [r3, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fe11 	bl	80027a8 <find_data>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <WAV_Play+0xcc>
 8002b92:	481b      	ldr	r0, [pc, #108]	@ (8002c00 <WAV_Play+0x130>)
 8002b94:	f011 fc84 	bl	80144a0 <f_close>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e02a      	b.n	8002bf2 <WAV_Play+0x122>
  s_left=dataSz;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <WAV_Play+0x144>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* pré-remplir 2 demi-bufs, puis DMA circulaire */
  if(!fill_half(0) || !fill_half(1)){ f_close(&s_f); return false; }
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7ff fe3a 	bl	800281c <fill_half>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d108      	bne.n	8002bc6 <WAV_Play+0xf6>
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7ff fe31 	bl	800281c <fill_half>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f083 0301 	eor.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <WAV_Play+0x100>
 8002bc6:	480e      	ldr	r0, [pc, #56]	@ (8002c00 <WAV_Play+0x130>)
 8002bc8:	f011 fc6a 	bl	80144a0 <f_close>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e010      	b.n	8002bf2 <WAV_Play+0x122>
  s_need0=s_need1=0;
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <WAV_Play+0x148>)
 8002bd4:	460a      	mov	r2, r1
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <WAV_Play+0x14c>)
 8002bda:	460a      	mov	r2, r1
 8002bdc:	701a      	strb	r2, [r3, #0]
  HAL_SAI_Transmit_DMA(&hsai_BlockA3, (uint8_t*)s_dma,
 8002bde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002be2:	490f      	ldr	r1, [pc, #60]	@ (8002c20 <WAV_Play+0x150>)
 8002be4:	480f      	ldr	r0, [pc, #60]	@ (8002c24 <WAV_Play+0x154>)
 8002be6:	f008 fd71 	bl	800b6cc <HAL_SAI_Transmit_DMA>
                       WAV_DMA_FRAMES*2 /*L+R*/ *2 /*demis*/);
  s_play=true; return true;
 8002bea:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <WAV_Play+0x12c>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3730      	adds	r7, #48	@ 0x30
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	24002eee 	.word	0x24002eee
 8002c00:	24002cb8 	.word	0x24002cb8
 8002c04:	080182a0 	.word	0x080182a0
 8002c08:	080182a8 	.word	0x080182a8
 8002c0c:	080182b0 	.word	0x080182b0
 8002c10:	24002eec 	.word	0x24002eec
 8002c14:	24002ee8 	.word	0x24002ee8
 8002c18:	24002cb5 	.word	0x24002cb5
 8002c1c:	24002cb4 	.word	0x24002cb4
 8002c20:	24000cb4 	.word	0x24000cb4
 8002c24:	2400092c 	.word	0x2400092c

08002c28 <WAV_Stop>:

void WAV_Stop(void){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  if(!s_play) return;
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <WAV_Stop+0x40>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f083 0301 	eor.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d113      	bne.n	8002c62 <WAV_Stop+0x3a>
  HAL_SAI_DMAStop(&hsai_BlockA3);
 8002c3a:	480c      	ldr	r0, [pc, #48]	@ (8002c6c <WAV_Stop+0x44>)
 8002c3c:	f008 fcc8 	bl	800b5d0 <HAL_SAI_DMAStop>
  f_close(&s_f);
 8002c40:	480b      	ldr	r0, [pc, #44]	@ (8002c70 <WAV_Stop+0x48>)
 8002c42:	f011 fc2d 	bl	80144a0 <f_close>
  s_play=false; s_need0=s_need1=0; s_left=0;
 8002c46:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <WAV_Stop+0x40>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <WAV_Stop+0x4c>)
 8002c50:	460a      	mov	r2, r1
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <WAV_Stop+0x50>)
 8002c56:	460a      	mov	r2, r1
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <WAV_Stop+0x54>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e000      	b.n	8002c64 <WAV_Stop+0x3c>
  if(!s_play) return;
 8002c62:	bf00      	nop
}
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	24002eee 	.word	0x24002eee
 8002c6c:	2400092c 	.word	0x2400092c
 8002c70:	24002cb8 	.word	0x24002cb8
 8002c74:	24002cb5 	.word	0x24002cb5
 8002c78:	24002cb4 	.word	0x24002cb4
 8002c7c:	24002ee8 	.word	0x24002ee8

08002c80 <WAV_Task>:

bool WAV_IsPlaying(void){ return s_play; }

/* à appeler souvent (1–2 ms) dans la loop ou un thread */
void WAV_Task(void){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  if(!s_play) return;
 8002c84:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <WAV_Task+0x88>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d138      	bne.n	8002d04 <WAV_Task+0x84>
  if(s_need0){ s_need0=0; if(!fill_half(0)){ WAV_Stop(); return; } }
 8002c92:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <WAV_Task+0x8c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <WAV_Task+0x3a>
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <WAV_Task+0x8c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7ff fdba 	bl	800281c <fill_half>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <WAV_Task+0x3a>
 8002cb4:	f7ff ffb8 	bl	8002c28 <WAV_Stop>
 8002cb8:	e025      	b.n	8002d06 <WAV_Task+0x86>
  if(s_need1){ s_need1=0; if(!fill_half(1)){ WAV_Stop(); return; } }
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <WAV_Task+0x90>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <WAV_Task+0x62>
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <WAV_Task+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7ff fda6 	bl	800281c <fill_half>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f083 0301 	eor.w	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <WAV_Task+0x62>
 8002cdc:	f7ff ffa4 	bl	8002c28 <WAV_Stop>
 8002ce0:	e011      	b.n	8002d06 <WAV_Task+0x86>

  /* option: arrêt auto quand fini */
  if(!s_left && !s_need0 && !s_need1){
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <WAV_Task+0x94>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10d      	bne.n	8002d06 <WAV_Task+0x86>
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <WAV_Task+0x8c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d108      	bne.n	8002d06 <WAV_Task+0x86>
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <WAV_Task+0x90>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <WAV_Task+0x86>
    WAV_Stop();
 8002cfe:	f7ff ff93 	bl	8002c28 <WAV_Stop>
 8002d02:	e000      	b.n	8002d06 <WAV_Task+0x86>
  if(!s_play) return;
 8002d04:	bf00      	nop
  }
}
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	24002eee 	.word	0x24002eee
 8002d0c:	24002cb4 	.word	0x24002cb4
 8002d10:	24002cb5 	.word	0x24002cb5
 8002d14:	24002ee8 	.word	0x24002ee8

08002d18 <HAL_SAI_TxHalfCpltCallback>:

/* ===== Callbacks HAL ===== */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){ if(hsai==&hsai_BlockA3) s_need0=1; }
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a06      	ldr	r2, [pc, #24]	@ (8002d3c <HAL_SAI_TxHalfCpltCallback+0x24>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_SAI_TxHalfCpltCallback+0x16>
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	2400092c 	.word	0x2400092c
 8002d40:	24002cb4 	.word	0x24002cb4

08002d44 <HAL_SAI_TxCpltCallback>:
void HAL_SAI_TxCpltCallback    (SAI_HandleTypeDef *hsai){ if(hsai==&hsai_BlockA3) s_need1=1; }
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a06      	ldr	r2, [pc, #24]	@ (8002d68 <HAL_SAI_TxCpltCallback+0x24>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d102      	bne.n	8002d5a <HAL_SAI_TxCpltCallback+0x16>
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_SAI_TxCpltCallback+0x28>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2400092c 	.word	0x2400092c
 8002d6c:	24002cb5 	.word	0x24002cb5

08002d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d70:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002dac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002d74:	f7fe ff14 	bl	8001ba0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d78:	f7fe fe72 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d7c:	480c      	ldr	r0, [pc, #48]	@ (8002db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d7e:	490d      	ldr	r1, [pc, #52]	@ (8002db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d80:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d94:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002da2:	f015 f9a1 	bl	80180e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da6:	f7fe f9d7 	bl	8001158 <main>
  bx  lr
 8002daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002db0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002db4:	24000170 	.word	0x24000170
  ldr r2, =_sidata
 8002db8:	0801841c 	.word	0x0801841c
  ldr r2, =_sbss
 8002dbc:	24000170 	.word	0x24000170
  ldr r4, =_ebss
 8002dc0:	240089e8 	.word	0x240089e8

08002dc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc4:	e7fe      	b.n	8002dc4 <ADC3_IRQHandler>
	...

08002dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f000 f933 	bl	800303a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dd4:	f005 fa0a 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <HAL_Init+0x68>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	4913      	ldr	r1, [pc, #76]	@ (8002e34 <HAL_Init+0x6c>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002df2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e30 <HAL_Init+0x68>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8002e34 <HAL_Init+0x6c>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	4a0b      	ldr	r2, [pc, #44]	@ (8002e38 <HAL_Init+0x70>)
 8002e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e3c <HAL_Init+0x74>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e12:	200f      	movs	r0, #15
 8002e14:	f7fe fd70 	bl	80018f8 <HAL_InitTick>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e002      	b.n	8002e28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e22:	f7fe fd4b 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	58024400 	.word	0x58024400
 8002e34:	0801834c 	.word	0x0801834c
 8002e38:	24000004 	.word	0x24000004
 8002e3c:	24000000 	.word	0x24000000

08002e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_IncTick+0x20>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_IncTick+0x24>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <HAL_IncTick+0x24>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	24000010 	.word	0x24000010
 8002e64:	24002ef0 	.word	0x24002ef0

08002e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_GetTick+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	24002ef0 	.word	0x24002ef0

08002e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff ffee 	bl	8002e68 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d005      	beq.n	8002ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <HAL_Delay+0x44>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ea6:	bf00      	nop
 8002ea8:	f7ff ffde 	bl	8002e68 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8f7      	bhi.n	8002ea8 <HAL_Delay+0x28>
  {
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	24000010 	.word	0x24000010

08002ec8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_GetREVID+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	5c001000 	.word	0x5c001000

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x40>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00
 8002f24:	05fa0000 	.word	0x05fa0000

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff4c 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800305e:	f7ff ff63 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 8003062:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f7ff ffb3 	bl	8002fd4 <NVIC_EncodePriority>
 800306e:	4602      	mov	r2, r0
 8003070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff82 	bl	8002f80 <__NVIC_SetPriority>
}
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ff56 	bl	8002f44 <__NVIC_EnableIRQ>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80030a4:	f3bf 8f5f 	dmb	sy
}
 80030a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80030aa:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <HAL_MPU_Disable+0x28>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	4a06      	ldr	r2, [pc, #24]	@ (80030c8 <HAL_MPU_Disable+0x28>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80030b6:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_MPU_Disable+0x2c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	605a      	str	r2, [r3, #4]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000ed00 	.word	0xe000ed00
 80030cc:	e000ed90 	.word	0xe000ed90

080030d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80030d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <HAL_MPU_Enable+0x38>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_MPU_Enable+0x3c>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_MPU_Enable+0x3c>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80030ee:	f3bf 8f4f 	dsb	sy
}
 80030f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030f4:	f3bf 8f6f 	isb	sy
}
 80030f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed90 	.word	0xe000ed90
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	785a      	ldrb	r2, [r3, #1]
 800311c:	4b1b      	ldr	r3, [pc, #108]	@ (800318c <HAL_MPU_ConfigRegion+0x7c>)
 800311e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003120:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_MPU_ConfigRegion+0x7c>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	4a19      	ldr	r2, [pc, #100]	@ (800318c <HAL_MPU_ConfigRegion+0x7c>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800312c:	4a17      	ldr	r2, [pc, #92]	@ (800318c <HAL_MPU_ConfigRegion+0x7c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7b1b      	ldrb	r3, [r3, #12]
 8003138:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7adb      	ldrb	r3, [r3, #11]
 800313e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003140:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7a9b      	ldrb	r3, [r3, #10]
 8003146:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003148:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7b5b      	ldrb	r3, [r3, #13]
 800314e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003150:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7b9b      	ldrb	r3, [r3, #14]
 8003156:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003158:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7bdb      	ldrb	r3, [r3, #15]
 800315e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003160:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7a5b      	ldrb	r3, [r3, #9]
 8003166:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003168:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7a1b      	ldrb	r3, [r3, #8]
 800316e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003170:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003178:	4a04      	ldr	r2, [pc, #16]	@ (800318c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800317a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800317c:	6113      	str	r3, [r2, #16]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed90 	.word	0xe000ed90

08003190 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003198:	f7ff fe66 	bl	8002e68 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e316      	b.n	80037d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a66      	ldr	r2, [pc, #408]	@ (8003348 <HAL_DMA_Init+0x1b8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d04a      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a65      	ldr	r2, [pc, #404]	@ (800334c <HAL_DMA_Init+0x1bc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d045      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a63      	ldr	r2, [pc, #396]	@ (8003350 <HAL_DMA_Init+0x1c0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d040      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a62      	ldr	r2, [pc, #392]	@ (8003354 <HAL_DMA_Init+0x1c4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a60      	ldr	r2, [pc, #384]	@ (8003358 <HAL_DMA_Init+0x1c8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d036      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a5f      	ldr	r2, [pc, #380]	@ (800335c <HAL_DMA_Init+0x1cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003360 <HAL_DMA_Init+0x1d0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02c      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003364 <HAL_DMA_Init+0x1d4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d027      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003368 <HAL_DMA_Init+0x1d8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a59      	ldr	r2, [pc, #356]	@ (800336c <HAL_DMA_Init+0x1dc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01d      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a57      	ldr	r2, [pc, #348]	@ (8003370 <HAL_DMA_Init+0x1e0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a56      	ldr	r2, [pc, #344]	@ (8003374 <HAL_DMA_Init+0x1e4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a54      	ldr	r2, [pc, #336]	@ (8003378 <HAL_DMA_Init+0x1e8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a53      	ldr	r2, [pc, #332]	@ (800337c <HAL_DMA_Init+0x1ec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a51      	ldr	r2, [pc, #324]	@ (8003380 <HAL_DMA_Init+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a50      	ldr	r2, [pc, #320]	@ (8003384 <HAL_DMA_Init+0x1f4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_DMA_Init+0xbc>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_DMA_Init+0xbe>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 813b 	beq.w	80034ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a37      	ldr	r2, [pc, #220]	@ (8003348 <HAL_DMA_Init+0x1b8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04a      	beq.n	8003304 <HAL_DMA_Init+0x174>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a36      	ldr	r2, [pc, #216]	@ (800334c <HAL_DMA_Init+0x1bc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d045      	beq.n	8003304 <HAL_DMA_Init+0x174>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a34      	ldr	r2, [pc, #208]	@ (8003350 <HAL_DMA_Init+0x1c0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d040      	beq.n	8003304 <HAL_DMA_Init+0x174>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a33      	ldr	r2, [pc, #204]	@ (8003354 <HAL_DMA_Init+0x1c4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d03b      	beq.n	8003304 <HAL_DMA_Init+0x174>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a31      	ldr	r2, [pc, #196]	@ (8003358 <HAL_DMA_Init+0x1c8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d036      	beq.n	8003304 <HAL_DMA_Init+0x174>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a30      	ldr	r2, [pc, #192]	@ (800335c <HAL_DMA_Init+0x1cc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d031      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <HAL_DMA_Init+0x1d0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02c      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <HAL_DMA_Init+0x1d4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d027      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003368 <HAL_DMA_Init+0x1d8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d022      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2a      	ldr	r2, [pc, #168]	@ (800336c <HAL_DMA_Init+0x1dc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d01d      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a28      	ldr	r2, [pc, #160]	@ (8003370 <HAL_DMA_Init+0x1e0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d018      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <HAL_DMA_Init+0x1e4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	@ (8003378 <HAL_DMA_Init+0x1e8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	@ (800337c <HAL_DMA_Init+0x1ec>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d009      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <HAL_DMA_Init+0x1f0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <HAL_DMA_Init+0x1f4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d108      	bne.n	8003316 <HAL_DMA_Init+0x186>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	e007      	b.n	8003326 <HAL_DMA_Init+0x196>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003326:	e02f      	b.n	8003388 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003328:	f7ff fd9e 	bl	8002e68 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b05      	cmp	r3, #5
 8003334:	d928      	bls.n	8003388 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2203      	movs	r2, #3
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e246      	b.n	80037d6 <HAL_DMA_Init+0x646>
 8003348:	40020010 	.word	0x40020010
 800334c:	40020028 	.word	0x40020028
 8003350:	40020040 	.word	0x40020040
 8003354:	40020058 	.word	0x40020058
 8003358:	40020070 	.word	0x40020070
 800335c:	40020088 	.word	0x40020088
 8003360:	400200a0 	.word	0x400200a0
 8003364:	400200b8 	.word	0x400200b8
 8003368:	40020410 	.word	0x40020410
 800336c:	40020428 	.word	0x40020428
 8003370:	40020440 	.word	0x40020440
 8003374:	40020458 	.word	0x40020458
 8003378:	40020470 	.word	0x40020470
 800337c:	40020488 	.word	0x40020488
 8003380:	400204a0 	.word	0x400204a0
 8003384:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1c8      	bne.n	8003328 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4b83      	ldr	r3, [pc, #524]	@ (80035b0 <HAL_DMA_Init+0x420>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d107      	bne.n	80033ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	4313      	orrs	r3, r2
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033ec:	4b71      	ldr	r3, [pc, #452]	@ (80035b4 <HAL_DMA_Init+0x424>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b71      	ldr	r3, [pc, #452]	@ (80035b8 <HAL_DMA_Init+0x428>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f8:	d328      	bcc.n	800344c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b28      	cmp	r3, #40	@ 0x28
 8003400:	d903      	bls.n	800340a <HAL_DMA_Init+0x27a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b2e      	cmp	r3, #46	@ 0x2e
 8003408:	d917      	bls.n	800343a <HAL_DMA_Init+0x2aa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003410:	d903      	bls.n	800341a <HAL_DMA_Init+0x28a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b42      	cmp	r3, #66	@ 0x42
 8003418:	d90f      	bls.n	800343a <HAL_DMA_Init+0x2aa>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b46      	cmp	r3, #70	@ 0x46
 8003420:	d903      	bls.n	800342a <HAL_DMA_Init+0x29a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b48      	cmp	r3, #72	@ 0x48
 8003428:	d907      	bls.n	800343a <HAL_DMA_Init+0x2aa>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003430:	d905      	bls.n	800343e <HAL_DMA_Init+0x2ae>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b52      	cmp	r3, #82	@ 0x52
 8003438:	d801      	bhi.n	800343e <HAL_DMA_Init+0x2ae>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_DMA_Init+0x2b0>
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800344a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0307 	bic.w	r3, r3, #7
 8003462:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	2b04      	cmp	r3, #4
 8003474:	d117      	bne.n	80034a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f002 f8f9 	bl	8005680 <DMA_CheckFifoParam>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e197      	b.n	80037d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f002 f834 	bl	800551c <DMA_CalcBaseAndBitshift>
 80034b4:	4603      	mov	r3, r0
 80034b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	223f      	movs	r2, #63	@ 0x3f
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e0cd      	b.n	8003666 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a3b      	ldr	r2, [pc, #236]	@ (80035bc <HAL_DMA_Init+0x42c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a39      	ldr	r2, [pc, #228]	@ (80035c0 <HAL_DMA_Init+0x430>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a38      	ldr	r2, [pc, #224]	@ (80035c4 <HAL_DMA_Init+0x434>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d018      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a36      	ldr	r2, [pc, #216]	@ (80035c8 <HAL_DMA_Init+0x438>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a35      	ldr	r2, [pc, #212]	@ (80035cc <HAL_DMA_Init+0x43c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a33      	ldr	r2, [pc, #204]	@ (80035d0 <HAL_DMA_Init+0x440>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_DMA_Init+0x38a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <HAL_DMA_Init+0x444>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_DMA_Init+0x38a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a30      	ldr	r2, [pc, #192]	@ (80035d8 <HAL_DMA_Init+0x448>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_DMA_Init+0x38e>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_DMA_Init+0x390>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8097 	beq.w	8003654 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a24      	ldr	r2, [pc, #144]	@ (80035bc <HAL_DMA_Init+0x42c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d021      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a22      	ldr	r2, [pc, #136]	@ (80035c0 <HAL_DMA_Init+0x430>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01c      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a21      	ldr	r2, [pc, #132]	@ (80035c4 <HAL_DMA_Init+0x434>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d017      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1f      	ldr	r2, [pc, #124]	@ (80035c8 <HAL_DMA_Init+0x438>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d012      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_DMA_Init+0x43c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00d      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_DMA_Init+0x440>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	@ (80035d4 <HAL_DMA_Init+0x444>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_DMA_Init+0x448>)
 8003572:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <HAL_DMA_Init+0x44c>)
 8003590:	4013      	ands	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d021      	beq.n	80035e0 <HAL_DMA_Init+0x450>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b80      	cmp	r3, #128	@ 0x80
 80035a2:	d102      	bne.n	80035aa <HAL_DMA_Init+0x41a>
 80035a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035a8:	e01b      	b.n	80035e2 <HAL_DMA_Init+0x452>
 80035aa:	2300      	movs	r3, #0
 80035ac:	e019      	b.n	80035e2 <HAL_DMA_Init+0x452>
 80035ae:	bf00      	nop
 80035b0:	fe10803f 	.word	0xfe10803f
 80035b4:	5c001000 	.word	0x5c001000
 80035b8:	ffff0000 	.word	0xffff0000
 80035bc:	58025408 	.word	0x58025408
 80035c0:	5802541c 	.word	0x5802541c
 80035c4:	58025430 	.word	0x58025430
 80035c8:	58025444 	.word	0x58025444
 80035cc:	58025458 	.word	0x58025458
 80035d0:	5802546c 	.word	0x5802546c
 80035d4:	58025480 	.word	0x58025480
 80035d8:	58025494 	.word	0x58025494
 80035dc:	fffe000f 	.word	0xfffe000f
 80035e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68d2      	ldr	r2, [r2, #12]
 80035e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003610:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4b6e      	ldr	r3, [pc, #440]	@ (80037e0 <HAL_DMA_Init+0x650>)
 8003628:	4413      	add	r3, r2
 800362a:	4a6e      	ldr	r2, [pc, #440]	@ (80037e4 <HAL_DMA_Init+0x654>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f001 ff6f 	bl	800551c <DMA_CalcBaseAndBitshift>
 800363e:	4603      	mov	r3, r0
 8003640:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2201      	movs	r2, #1
 800364c:	409a      	lsls	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	e008      	b.n	8003666 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2203      	movs	r2, #3
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0b7      	b.n	80037d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5f      	ldr	r2, [pc, #380]	@ (80037e8 <HAL_DMA_Init+0x658>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d072      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5d      	ldr	r2, [pc, #372]	@ (80037ec <HAL_DMA_Init+0x65c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d06d      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5c      	ldr	r2, [pc, #368]	@ (80037f0 <HAL_DMA_Init+0x660>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d068      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5a      	ldr	r2, [pc, #360]	@ (80037f4 <HAL_DMA_Init+0x664>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d063      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a59      	ldr	r2, [pc, #356]	@ (80037f8 <HAL_DMA_Init+0x668>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d05e      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a57      	ldr	r2, [pc, #348]	@ (80037fc <HAL_DMA_Init+0x66c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d059      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a56      	ldr	r2, [pc, #344]	@ (8003800 <HAL_DMA_Init+0x670>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d054      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a54      	ldr	r2, [pc, #336]	@ (8003804 <HAL_DMA_Init+0x674>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d04f      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a53      	ldr	r2, [pc, #332]	@ (8003808 <HAL_DMA_Init+0x678>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04a      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a51      	ldr	r2, [pc, #324]	@ (800380c <HAL_DMA_Init+0x67c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d045      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a50      	ldr	r2, [pc, #320]	@ (8003810 <HAL_DMA_Init+0x680>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003814 <HAL_DMA_Init+0x684>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d03b      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003818 <HAL_DMA_Init+0x688>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d036      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	@ (800381c <HAL_DMA_Init+0x68c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003820 <HAL_DMA_Init+0x690>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02c      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a48      	ldr	r2, [pc, #288]	@ (8003824 <HAL_DMA_Init+0x694>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a47      	ldr	r2, [pc, #284]	@ (8003828 <HAL_DMA_Init+0x698>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a45      	ldr	r2, [pc, #276]	@ (800382c <HAL_DMA_Init+0x69c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a44      	ldr	r2, [pc, #272]	@ (8003830 <HAL_DMA_Init+0x6a0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a42      	ldr	r2, [pc, #264]	@ (8003834 <HAL_DMA_Init+0x6a4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a41      	ldr	r2, [pc, #260]	@ (8003838 <HAL_DMA_Init+0x6a8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3f      	ldr	r2, [pc, #252]	@ (800383c <HAL_DMA_Init+0x6ac>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a3e      	ldr	r2, [pc, #248]	@ (8003840 <HAL_DMA_Init+0x6b0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3c      	ldr	r2, [pc, #240]	@ (8003844 <HAL_DMA_Init+0x6b4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_DMA_Init+0x5ca>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_DMA_Init+0x5cc>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d032      	beq.n	80037c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f002 f809 	bl	8005778 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b80      	cmp	r3, #128	@ 0x80
 800376c:	d102      	bne.n	8003774 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003788:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <HAL_DMA_Init+0x624>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b08      	cmp	r3, #8
 8003798:	d80c      	bhi.n	80037b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f002 f886 	bl	80058ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	e008      	b.n	80037c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	a7fdabf8 	.word	0xa7fdabf8
 80037e4:	cccccccd 	.word	0xcccccccd
 80037e8:	40020010 	.word	0x40020010
 80037ec:	40020028 	.word	0x40020028
 80037f0:	40020040 	.word	0x40020040
 80037f4:	40020058 	.word	0x40020058
 80037f8:	40020070 	.word	0x40020070
 80037fc:	40020088 	.word	0x40020088
 8003800:	400200a0 	.word	0x400200a0
 8003804:	400200b8 	.word	0x400200b8
 8003808:	40020410 	.word	0x40020410
 800380c:	40020428 	.word	0x40020428
 8003810:	40020440 	.word	0x40020440
 8003814:	40020458 	.word	0x40020458
 8003818:	40020470 	.word	0x40020470
 800381c:	40020488 	.word	0x40020488
 8003820:	400204a0 	.word	0x400204a0
 8003824:	400204b8 	.word	0x400204b8
 8003828:	58025408 	.word	0x58025408
 800382c:	5802541c 	.word	0x5802541c
 8003830:	58025430 	.word	0x58025430
 8003834:	58025444 	.word	0x58025444
 8003838:	58025458 	.word	0x58025458
 800383c:	5802546c 	.word	0x5802546c
 8003840:	58025480 	.word	0x58025480
 8003844:	58025494 	.word	0x58025494

08003848 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e226      	b.n	8003cb2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_DMA_Start_IT+0x2a>
 800386e:	2302      	movs	r3, #2
 8003870:	e21f      	b.n	8003cb2 <HAL_DMA_Start_IT+0x46a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	f040 820a 	bne.w	8003c9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a68      	ldr	r2, [pc, #416]	@ (8003a3c <HAL_DMA_Start_IT+0x1f4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d04a      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a66      	ldr	r2, [pc, #408]	@ (8003a40 <HAL_DMA_Start_IT+0x1f8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d045      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a65      	ldr	r2, [pc, #404]	@ (8003a44 <HAL_DMA_Start_IT+0x1fc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d040      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a63      	ldr	r2, [pc, #396]	@ (8003a48 <HAL_DMA_Start_IT+0x200>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d03b      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a62      	ldr	r2, [pc, #392]	@ (8003a4c <HAL_DMA_Start_IT+0x204>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d036      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a60      	ldr	r2, [pc, #384]	@ (8003a50 <HAL_DMA_Start_IT+0x208>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d031      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a5f      	ldr	r2, [pc, #380]	@ (8003a54 <HAL_DMA_Start_IT+0x20c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d02c      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a58 <HAL_DMA_Start_IT+0x210>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d027      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5c      	ldr	r2, [pc, #368]	@ (8003a5c <HAL_DMA_Start_IT+0x214>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a60 <HAL_DMA_Start_IT+0x218>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01d      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a59      	ldr	r2, [pc, #356]	@ (8003a64 <HAL_DMA_Start_IT+0x21c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a57      	ldr	r2, [pc, #348]	@ (8003a68 <HAL_DMA_Start_IT+0x220>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a56      	ldr	r2, [pc, #344]	@ (8003a6c <HAL_DMA_Start_IT+0x224>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a54      	ldr	r2, [pc, #336]	@ (8003a70 <HAL_DMA_Start_IT+0x228>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a53      	ldr	r2, [pc, #332]	@ (8003a74 <HAL_DMA_Start_IT+0x22c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a51      	ldr	r2, [pc, #324]	@ (8003a78 <HAL_DMA_Start_IT+0x230>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <HAL_DMA_Start_IT+0x100>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e007      	b.n	8003958 <HAL_DMA_Start_IT+0x110>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f001 fc30 	bl	80051c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a34      	ldr	r2, [pc, #208]	@ (8003a3c <HAL_DMA_Start_IT+0x1f4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04a      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a33      	ldr	r2, [pc, #204]	@ (8003a40 <HAL_DMA_Start_IT+0x1f8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d045      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a31      	ldr	r2, [pc, #196]	@ (8003a44 <HAL_DMA_Start_IT+0x1fc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d040      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a30      	ldr	r2, [pc, #192]	@ (8003a48 <HAL_DMA_Start_IT+0x200>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d03b      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2e      	ldr	r2, [pc, #184]	@ (8003a4c <HAL_DMA_Start_IT+0x204>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d036      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <HAL_DMA_Start_IT+0x208>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d031      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a54 <HAL_DMA_Start_IT+0x20c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02c      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003a58 <HAL_DMA_Start_IT+0x210>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d027      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a28      	ldr	r2, [pc, #160]	@ (8003a5c <HAL_DMA_Start_IT+0x214>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d022      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a27      	ldr	r2, [pc, #156]	@ (8003a60 <HAL_DMA_Start_IT+0x218>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d01d      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a25      	ldr	r2, [pc, #148]	@ (8003a64 <HAL_DMA_Start_IT+0x21c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a24      	ldr	r2, [pc, #144]	@ (8003a68 <HAL_DMA_Start_IT+0x220>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a22      	ldr	r2, [pc, #136]	@ (8003a6c <HAL_DMA_Start_IT+0x224>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a21      	ldr	r2, [pc, #132]	@ (8003a70 <HAL_DMA_Start_IT+0x228>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <HAL_DMA_Start_IT+0x22c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <HAL_DMA_Start_IT+0x230>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Start_IT+0x1c0>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_DMA_Start_IT+0x1c2>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d036      	beq.n	8003a7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 021e 	bic.w	r2, r3, #30
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0216 	orr.w	r2, r2, #22
 8003a20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03e      	beq.n	8003aa8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0208 	orr.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e035      	b.n	8003aa8 <HAL_DMA_Start_IT+0x260>
 8003a3c:	40020010 	.word	0x40020010
 8003a40:	40020028 	.word	0x40020028
 8003a44:	40020040 	.word	0x40020040
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	40020070 	.word	0x40020070
 8003a50:	40020088 	.word	0x40020088
 8003a54:	400200a0 	.word	0x400200a0
 8003a58:	400200b8 	.word	0x400200b8
 8003a5c:	40020410 	.word	0x40020410
 8003a60:	40020428 	.word	0x40020428
 8003a64:	40020440 	.word	0x40020440
 8003a68:	40020458 	.word	0x40020458
 8003a6c:	40020470 	.word	0x40020470
 8003a70:	40020488 	.word	0x40020488
 8003a74:	400204a0 	.word	0x400204a0
 8003a78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 020e 	bic.w	r2, r3, #14
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 020a 	orr.w	r2, r2, #10
 8003a8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0204 	orr.w	r2, r2, #4
 8003aa6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a83      	ldr	r2, [pc, #524]	@ (8003cbc <HAL_DMA_Start_IT+0x474>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d072      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a82      	ldr	r2, [pc, #520]	@ (8003cc0 <HAL_DMA_Start_IT+0x478>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d06d      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a80      	ldr	r2, [pc, #512]	@ (8003cc4 <HAL_DMA_Start_IT+0x47c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d068      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a7f      	ldr	r2, [pc, #508]	@ (8003cc8 <HAL_DMA_Start_IT+0x480>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d063      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a7d      	ldr	r2, [pc, #500]	@ (8003ccc <HAL_DMA_Start_IT+0x484>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d05e      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7c      	ldr	r2, [pc, #496]	@ (8003cd0 <HAL_DMA_Start_IT+0x488>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d059      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7a      	ldr	r2, [pc, #488]	@ (8003cd4 <HAL_DMA_Start_IT+0x48c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d054      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a79      	ldr	r2, [pc, #484]	@ (8003cd8 <HAL_DMA_Start_IT+0x490>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d04f      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a77      	ldr	r2, [pc, #476]	@ (8003cdc <HAL_DMA_Start_IT+0x494>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a76      	ldr	r2, [pc, #472]	@ (8003ce0 <HAL_DMA_Start_IT+0x498>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a74      	ldr	r2, [pc, #464]	@ (8003ce4 <HAL_DMA_Start_IT+0x49c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a73      	ldr	r2, [pc, #460]	@ (8003ce8 <HAL_DMA_Start_IT+0x4a0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a71      	ldr	r2, [pc, #452]	@ (8003cec <HAL_DMA_Start_IT+0x4a4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a70      	ldr	r2, [pc, #448]	@ (8003cf0 <HAL_DMA_Start_IT+0x4a8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf4 <HAL_DMA_Start_IT+0x4ac>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6d      	ldr	r2, [pc, #436]	@ (8003cf8 <HAL_DMA_Start_IT+0x4b0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cfc <HAL_DMA_Start_IT+0x4b4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6a      	ldr	r2, [pc, #424]	@ (8003d00 <HAL_DMA_Start_IT+0x4b8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a68      	ldr	r2, [pc, #416]	@ (8003d04 <HAL_DMA_Start_IT+0x4bc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a67      	ldr	r2, [pc, #412]	@ (8003d08 <HAL_DMA_Start_IT+0x4c0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a65      	ldr	r2, [pc, #404]	@ (8003d0c <HAL_DMA_Start_IT+0x4c4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a64      	ldr	r2, [pc, #400]	@ (8003d10 <HAL_DMA_Start_IT+0x4c8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a62      	ldr	r2, [pc, #392]	@ (8003d14 <HAL_DMA_Start_IT+0x4cc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a61      	ldr	r2, [pc, #388]	@ (8003d18 <HAL_DMA_Start_IT+0x4d0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_DMA_Start_IT+0x354>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <HAL_DMA_Start_IT+0x356>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01a      	beq.n	8003bd8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bbe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a37      	ldr	r2, [pc, #220]	@ (8003cbc <HAL_DMA_Start_IT+0x474>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d04a      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a36      	ldr	r2, [pc, #216]	@ (8003cc0 <HAL_DMA_Start_IT+0x478>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d045      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a34      	ldr	r2, [pc, #208]	@ (8003cc4 <HAL_DMA_Start_IT+0x47c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d040      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a33      	ldr	r2, [pc, #204]	@ (8003cc8 <HAL_DMA_Start_IT+0x480>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d03b      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a31      	ldr	r2, [pc, #196]	@ (8003ccc <HAL_DMA_Start_IT+0x484>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d036      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a30      	ldr	r2, [pc, #192]	@ (8003cd0 <HAL_DMA_Start_IT+0x488>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d031      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd4 <HAL_DMA_Start_IT+0x48c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02c      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd8 <HAL_DMA_Start_IT+0x490>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d027      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cdc <HAL_DMA_Start_IT+0x494>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d022      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce0 <HAL_DMA_Start_IT+0x498>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01d      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a28      	ldr	r2, [pc, #160]	@ (8003ce4 <HAL_DMA_Start_IT+0x49c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a27      	ldr	r2, [pc, #156]	@ (8003ce8 <HAL_DMA_Start_IT+0x4a0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a25      	ldr	r2, [pc, #148]	@ (8003cec <HAL_DMA_Start_IT+0x4a4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <HAL_DMA_Start_IT+0x4a8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <HAL_DMA_Start_IT+0x4ac>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a21      	ldr	r2, [pc, #132]	@ (8003cf8 <HAL_DMA_Start_IT+0x4b0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <HAL_DMA_Start_IT+0x442>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e012      	b.n	8003cb0 <HAL_DMA_Start_IT+0x468>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e009      	b.n	8003cb0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ca2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40020010 	.word	0x40020010
 8003cc0:	40020028 	.word	0x40020028
 8003cc4:	40020040 	.word	0x40020040
 8003cc8:	40020058 	.word	0x40020058
 8003ccc:	40020070 	.word	0x40020070
 8003cd0:	40020088 	.word	0x40020088
 8003cd4:	400200a0 	.word	0x400200a0
 8003cd8:	400200b8 	.word	0x400200b8
 8003cdc:	40020410 	.word	0x40020410
 8003ce0:	40020428 	.word	0x40020428
 8003ce4:	40020440 	.word	0x40020440
 8003ce8:	40020458 	.word	0x40020458
 8003cec:	40020470 	.word	0x40020470
 8003cf0:	40020488 	.word	0x40020488
 8003cf4:	400204a0 	.word	0x400204a0
 8003cf8:	400204b8 	.word	0x400204b8
 8003cfc:	58025408 	.word	0x58025408
 8003d00:	5802541c 	.word	0x5802541c
 8003d04:	58025430 	.word	0x58025430
 8003d08:	58025444 	.word	0x58025444
 8003d0c:	58025458 	.word	0x58025458
 8003d10:	5802546c 	.word	0x5802546c
 8003d14:	58025480 	.word	0x58025480
 8003d18:	58025494 	.word	0x58025494

08003d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003d24:	f7ff f8a0 	bl	8002e68 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e2dc      	b.n	80042ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d008      	beq.n	8003d52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2280      	movs	r2, #128	@ 0x80
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e2cd      	b.n	80042ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a76      	ldr	r2, [pc, #472]	@ (8003f30 <HAL_DMA_Abort+0x214>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a74      	ldr	r2, [pc, #464]	@ (8003f34 <HAL_DMA_Abort+0x218>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	@ (8003f38 <HAL_DMA_Abort+0x21c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a71      	ldr	r2, [pc, #452]	@ (8003f3c <HAL_DMA_Abort+0x220>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a70      	ldr	r2, [pc, #448]	@ (8003f40 <HAL_DMA_Abort+0x224>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6e      	ldr	r2, [pc, #440]	@ (8003f44 <HAL_DMA_Abort+0x228>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6d      	ldr	r2, [pc, #436]	@ (8003f48 <HAL_DMA_Abort+0x22c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f4c <HAL_DMA_Abort+0x230>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6a      	ldr	r2, [pc, #424]	@ (8003f50 <HAL_DMA_Abort+0x234>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a68      	ldr	r2, [pc, #416]	@ (8003f54 <HAL_DMA_Abort+0x238>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a67      	ldr	r2, [pc, #412]	@ (8003f58 <HAL_DMA_Abort+0x23c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	@ (8003f5c <HAL_DMA_Abort+0x240>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a64      	ldr	r2, [pc, #400]	@ (8003f60 <HAL_DMA_Abort+0x244>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a62      	ldr	r2, [pc, #392]	@ (8003f64 <HAL_DMA_Abort+0x248>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a61      	ldr	r2, [pc, #388]	@ (8003f68 <HAL_DMA_Abort+0x24c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a5f      	ldr	r2, [pc, #380]	@ (8003f6c <HAL_DMA_Abort+0x250>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_DMA_Abort+0xda>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_Abort+0xdc>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 021e 	bic.w	r2, r2, #30
 8003e0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e00a      	b.n	8003e3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 020e 	bic.w	r2, r2, #14
 8003e32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f30 <HAL_DMA_Abort+0x214>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d072      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3a      	ldr	r2, [pc, #232]	@ (8003f34 <HAL_DMA_Abort+0x218>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d06d      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a39      	ldr	r2, [pc, #228]	@ (8003f38 <HAL_DMA_Abort+0x21c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d068      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a37      	ldr	r2, [pc, #220]	@ (8003f3c <HAL_DMA_Abort+0x220>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d063      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a36      	ldr	r2, [pc, #216]	@ (8003f40 <HAL_DMA_Abort+0x224>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d05e      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a34      	ldr	r2, [pc, #208]	@ (8003f44 <HAL_DMA_Abort+0x228>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d059      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a33      	ldr	r2, [pc, #204]	@ (8003f48 <HAL_DMA_Abort+0x22c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d054      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a31      	ldr	r2, [pc, #196]	@ (8003f4c <HAL_DMA_Abort+0x230>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d04f      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a30      	ldr	r2, [pc, #192]	@ (8003f50 <HAL_DMA_Abort+0x234>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2e      	ldr	r2, [pc, #184]	@ (8003f54 <HAL_DMA_Abort+0x238>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8003f58 <HAL_DMA_Abort+0x23c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	@ (8003f5c <HAL_DMA_Abort+0x240>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f60 <HAL_DMA_Abort+0x244>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	@ (8003f64 <HAL_DMA_Abort+0x248>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <HAL_DMA_Abort+0x24c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a25      	ldr	r2, [pc, #148]	@ (8003f6c <HAL_DMA_Abort+0x250>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a24      	ldr	r2, [pc, #144]	@ (8003f70 <HAL_DMA_Abort+0x254>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	@ (8003f74 <HAL_DMA_Abort+0x258>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <HAL_DMA_Abort+0x25c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f7c <HAL_DMA_Abort+0x260>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	@ (8003f80 <HAL_DMA_Abort+0x264>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	@ (8003f84 <HAL_DMA_Abort+0x268>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <HAL_DMA_Abort+0x26c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <HAL_DMA_Abort+0x270>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d132      	bne.n	8003f90 <HAL_DMA_Abort+0x274>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e031      	b.n	8003f92 <HAL_DMA_Abort+0x276>
 8003f2e:	bf00      	nop
 8003f30:	40020010 	.word	0x40020010
 8003f34:	40020028 	.word	0x40020028
 8003f38:	40020040 	.word	0x40020040
 8003f3c:	40020058 	.word	0x40020058
 8003f40:	40020070 	.word	0x40020070
 8003f44:	40020088 	.word	0x40020088
 8003f48:	400200a0 	.word	0x400200a0
 8003f4c:	400200b8 	.word	0x400200b8
 8003f50:	40020410 	.word	0x40020410
 8003f54:	40020428 	.word	0x40020428
 8003f58:	40020440 	.word	0x40020440
 8003f5c:	40020458 	.word	0x40020458
 8003f60:	40020470 	.word	0x40020470
 8003f64:	40020488 	.word	0x40020488
 8003f68:	400204a0 	.word	0x400204a0
 8003f6c:	400204b8 	.word	0x400204b8
 8003f70:	58025408 	.word	0x58025408
 8003f74:	5802541c 	.word	0x5802541c
 8003f78:	58025430 	.word	0x58025430
 8003f7c:	58025444 	.word	0x58025444
 8003f80:	58025458 	.word	0x58025458
 8003f84:	5802546c 	.word	0x5802546c
 8003f88:	58025480 	.word	0x58025480
 8003f8c:	58025494 	.word	0x58025494
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6d      	ldr	r2, [pc, #436]	@ (8004160 <HAL_DMA_Abort+0x444>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6b      	ldr	r2, [pc, #428]	@ (8004164 <HAL_DMA_Abort+0x448>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6a      	ldr	r2, [pc, #424]	@ (8004168 <HAL_DMA_Abort+0x44c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a68      	ldr	r2, [pc, #416]	@ (800416c <HAL_DMA_Abort+0x450>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a67      	ldr	r2, [pc, #412]	@ (8004170 <HAL_DMA_Abort+0x454>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a65      	ldr	r2, [pc, #404]	@ (8004174 <HAL_DMA_Abort+0x458>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a64      	ldr	r2, [pc, #400]	@ (8004178 <HAL_DMA_Abort+0x45c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a62      	ldr	r2, [pc, #392]	@ (800417c <HAL_DMA_Abort+0x460>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a61      	ldr	r2, [pc, #388]	@ (8004180 <HAL_DMA_Abort+0x464>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5f      	ldr	r2, [pc, #380]	@ (8004184 <HAL_DMA_Abort+0x468>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5e      	ldr	r2, [pc, #376]	@ (8004188 <HAL_DMA_Abort+0x46c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a5c      	ldr	r2, [pc, #368]	@ (800418c <HAL_DMA_Abort+0x470>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5b      	ldr	r2, [pc, #364]	@ (8004190 <HAL_DMA_Abort+0x474>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a59      	ldr	r2, [pc, #356]	@ (8004194 <HAL_DMA_Abort+0x478>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a58      	ldr	r2, [pc, #352]	@ (8004198 <HAL_DMA_Abort+0x47c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a56      	ldr	r2, [pc, #344]	@ (800419c <HAL_DMA_Abort+0x480>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <HAL_DMA_Abort+0x33c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e007      	b.n	8004068 <HAL_DMA_Abort+0x34c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004068:	e013      	b.n	8004092 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800406a:	f7fe fefd 	bl	8002e68 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b05      	cmp	r3, #5
 8004076:	d90c      	bls.n	8004092 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e12d      	b.n	80042ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004160 <HAL_DMA_Abort+0x444>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d04a      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004164 <HAL_DMA_Abort+0x448>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d045      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_DMA_Abort+0x44c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d040      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	@ (800416c <HAL_DMA_Abort+0x450>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d03b      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a29      	ldr	r2, [pc, #164]	@ (8004170 <HAL_DMA_Abort+0x454>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d036      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a27      	ldr	r2, [pc, #156]	@ (8004174 <HAL_DMA_Abort+0x458>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d031      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a26      	ldr	r2, [pc, #152]	@ (8004178 <HAL_DMA_Abort+0x45c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d02c      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a24      	ldr	r2, [pc, #144]	@ (800417c <HAL_DMA_Abort+0x460>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d027      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <HAL_DMA_Abort+0x464>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d022      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <HAL_DMA_Abort+0x468>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01d      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_DMA_Abort+0x46c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d018      	beq.n	800413e <HAL_DMA_Abort+0x422>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <HAL_DMA_Abort+0x470>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <HAL_DMA_Abort+0x474>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_DMA_Abort+0x478>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_DMA_Abort+0x422>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <HAL_DMA_Abort+0x47c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d004      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a18      	ldr	r2, [pc, #96]	@ (800419c <HAL_DMA_Abort+0x480>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_DMA_Abort+0x426>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_DMA_Abort+0x428>
 8004142:	2300      	movs	r3, #0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02b      	beq.n	80041a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	223f      	movs	r2, #63	@ 0x3f
 8004158:	409a      	lsls	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	e02a      	b.n	80041b6 <HAL_DMA_Abort+0x49a>
 8004160:	40020010 	.word	0x40020010
 8004164:	40020028 	.word	0x40020028
 8004168:	40020040 	.word	0x40020040
 800416c:	40020058 	.word	0x40020058
 8004170:	40020070 	.word	0x40020070
 8004174:	40020088 	.word	0x40020088
 8004178:	400200a0 	.word	0x400200a0
 800417c:	400200b8 	.word	0x400200b8
 8004180:	40020410 	.word	0x40020410
 8004184:	40020428 	.word	0x40020428
 8004188:	40020440 	.word	0x40020440
 800418c:	40020458 	.word	0x40020458
 8004190:	40020470 	.word	0x40020470
 8004194:	40020488 	.word	0x40020488
 8004198:	400204a0 	.word	0x400204a0
 800419c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2201      	movs	r2, #1
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a4f      	ldr	r2, [pc, #316]	@ (80042f8 <HAL_DMA_Abort+0x5dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d072      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a4d      	ldr	r2, [pc, #308]	@ (80042fc <HAL_DMA_Abort+0x5e0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d06d      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004300 <HAL_DMA_Abort+0x5e4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d068      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004304 <HAL_DMA_Abort+0x5e8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d063      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a49      	ldr	r2, [pc, #292]	@ (8004308 <HAL_DMA_Abort+0x5ec>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d05e      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a47      	ldr	r2, [pc, #284]	@ (800430c <HAL_DMA_Abort+0x5f0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d059      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a46      	ldr	r2, [pc, #280]	@ (8004310 <HAL_DMA_Abort+0x5f4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d054      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a44      	ldr	r2, [pc, #272]	@ (8004314 <HAL_DMA_Abort+0x5f8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d04f      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a43      	ldr	r2, [pc, #268]	@ (8004318 <HAL_DMA_Abort+0x5fc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d04a      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a41      	ldr	r2, [pc, #260]	@ (800431c <HAL_DMA_Abort+0x600>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d045      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a40      	ldr	r2, [pc, #256]	@ (8004320 <HAL_DMA_Abort+0x604>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d040      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3e      	ldr	r2, [pc, #248]	@ (8004324 <HAL_DMA_Abort+0x608>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d03b      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3d      	ldr	r2, [pc, #244]	@ (8004328 <HAL_DMA_Abort+0x60c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d036      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3b      	ldr	r2, [pc, #236]	@ (800432c <HAL_DMA_Abort+0x610>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d031      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3a      	ldr	r2, [pc, #232]	@ (8004330 <HAL_DMA_Abort+0x614>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d02c      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a38      	ldr	r2, [pc, #224]	@ (8004334 <HAL_DMA_Abort+0x618>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d027      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a37      	ldr	r2, [pc, #220]	@ (8004338 <HAL_DMA_Abort+0x61c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d022      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a35      	ldr	r2, [pc, #212]	@ (800433c <HAL_DMA_Abort+0x620>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01d      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a34      	ldr	r2, [pc, #208]	@ (8004340 <HAL_DMA_Abort+0x624>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d018      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a32      	ldr	r2, [pc, #200]	@ (8004344 <HAL_DMA_Abort+0x628>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a31      	ldr	r2, [pc, #196]	@ (8004348 <HAL_DMA_Abort+0x62c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2f      	ldr	r2, [pc, #188]	@ (800434c <HAL_DMA_Abort+0x630>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2e      	ldr	r2, [pc, #184]	@ (8004350 <HAL_DMA_Abort+0x634>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004354 <HAL_DMA_Abort+0x638>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_DMA_Abort+0x58e>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_DMA_Abort+0x590>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40020010 	.word	0x40020010
 80042fc:	40020028 	.word	0x40020028
 8004300:	40020040 	.word	0x40020040
 8004304:	40020058 	.word	0x40020058
 8004308:	40020070 	.word	0x40020070
 800430c:	40020088 	.word	0x40020088
 8004310:	400200a0 	.word	0x400200a0
 8004314:	400200b8 	.word	0x400200b8
 8004318:	40020410 	.word	0x40020410
 800431c:	40020428 	.word	0x40020428
 8004320:	40020440 	.word	0x40020440
 8004324:	40020458 	.word	0x40020458
 8004328:	40020470 	.word	0x40020470
 800432c:	40020488 	.word	0x40020488
 8004330:	400204a0 	.word	0x400204a0
 8004334:	400204b8 	.word	0x400204b8
 8004338:	58025408 	.word	0x58025408
 800433c:	5802541c 	.word	0x5802541c
 8004340:	58025430 	.word	0x58025430
 8004344:	58025444 	.word	0x58025444
 8004348:	58025458 	.word	0x58025458
 800434c:	5802546c 	.word	0x5802546c
 8004350:	58025480 	.word	0x58025480
 8004354:	58025494 	.word	0x58025494

08004358 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	@ 0x28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004364:	4b67      	ldr	r3, [pc, #412]	@ (8004504 <HAL_DMA_IRQHandler+0x1ac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a67      	ldr	r2, [pc, #412]	@ (8004508 <HAL_DMA_IRQHandler+0x1b0>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0a9b      	lsrs	r3, r3, #10
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5f      	ldr	r2, [pc, #380]	@ (800450c <HAL_DMA_IRQHandler+0x1b4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d04a      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5d      	ldr	r2, [pc, #372]	@ (8004510 <HAL_DMA_IRQHandler+0x1b8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d045      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004514 <HAL_DMA_IRQHandler+0x1bc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004518 <HAL_DMA_IRQHandler+0x1c0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d03b      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a59      	ldr	r2, [pc, #356]	@ (800451c <HAL_DMA_IRQHandler+0x1c4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d036      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a57      	ldr	r2, [pc, #348]	@ (8004520 <HAL_DMA_IRQHandler+0x1c8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a56      	ldr	r2, [pc, #344]	@ (8004524 <HAL_DMA_IRQHandler+0x1cc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d02c      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a54      	ldr	r2, [pc, #336]	@ (8004528 <HAL_DMA_IRQHandler+0x1d0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d027      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a53      	ldr	r2, [pc, #332]	@ (800452c <HAL_DMA_IRQHandler+0x1d4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a51      	ldr	r2, [pc, #324]	@ (8004530 <HAL_DMA_IRQHandler+0x1d8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a50      	ldr	r2, [pc, #320]	@ (8004534 <HAL_DMA_IRQHandler+0x1dc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a4e      	ldr	r2, [pc, #312]	@ (8004538 <HAL_DMA_IRQHandler+0x1e0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4d      	ldr	r2, [pc, #308]	@ (800453c <HAL_DMA_IRQHandler+0x1e4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a4b      	ldr	r2, [pc, #300]	@ (8004540 <HAL_DMA_IRQHandler+0x1e8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4a      	ldr	r2, [pc, #296]	@ (8004544 <HAL_DMA_IRQHandler+0x1ec>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_DMA_IRQHandler+0xd2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a48      	ldr	r2, [pc, #288]	@ (8004548 <HAL_DMA_IRQHandler+0x1f0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_DMA_IRQHandler+0xd6>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <HAL_DMA_IRQHandler+0xd8>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 842b 	beq.w	8004c8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2208      	movs	r2, #8
 8004440:	409a      	lsls	r2, r3
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a2 	beq.w	8004590 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2e      	ldr	r2, [pc, #184]	@ (800450c <HAL_DMA_IRQHandler+0x1b4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2d      	ldr	r2, [pc, #180]	@ (8004510 <HAL_DMA_IRQHandler+0x1b8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2b      	ldr	r2, [pc, #172]	@ (8004514 <HAL_DMA_IRQHandler+0x1bc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2a      	ldr	r2, [pc, #168]	@ (8004518 <HAL_DMA_IRQHandler+0x1c0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a28      	ldr	r2, [pc, #160]	@ (800451c <HAL_DMA_IRQHandler+0x1c4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a27      	ldr	r2, [pc, #156]	@ (8004520 <HAL_DMA_IRQHandler+0x1c8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a25      	ldr	r2, [pc, #148]	@ (8004524 <HAL_DMA_IRQHandler+0x1cc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a24      	ldr	r2, [pc, #144]	@ (8004528 <HAL_DMA_IRQHandler+0x1d0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a22      	ldr	r2, [pc, #136]	@ (800452c <HAL_DMA_IRQHandler+0x1d4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	@ (8004530 <HAL_DMA_IRQHandler+0x1d8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004534 <HAL_DMA_IRQHandler+0x1dc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1e      	ldr	r2, [pc, #120]	@ (8004538 <HAL_DMA_IRQHandler+0x1e0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	@ (800453c <HAL_DMA_IRQHandler+0x1e4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004540 <HAL_DMA_IRQHandler+0x1e8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a19      	ldr	r2, [pc, #100]	@ (8004544 <HAL_DMA_IRQHandler+0x1ec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_IRQHandler+0x194>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a18      	ldr	r2, [pc, #96]	@ (8004548 <HAL_DMA_IRQHandler+0x1f0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d12f      	bne.n	800454c <HAL_DMA_IRQHandler+0x1f4>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e02e      	b.n	8004560 <HAL_DMA_IRQHandler+0x208>
 8004502:	bf00      	nop
 8004504:	24000000 	.word	0x24000000
 8004508:	1b4e81b5 	.word	0x1b4e81b5
 800450c:	40020010 	.word	0x40020010
 8004510:	40020028 	.word	0x40020028
 8004514:	40020040 	.word	0x40020040
 8004518:	40020058 	.word	0x40020058
 800451c:	40020070 	.word	0x40020070
 8004520:	40020088 	.word	0x40020088
 8004524:	400200a0 	.word	0x400200a0
 8004528:	400200b8 	.word	0x400200b8
 800452c:	40020410 	.word	0x40020410
 8004530:	40020428 	.word	0x40020428
 8004534:	40020440 	.word	0x40020440
 8004538:	40020458 	.word	0x40020458
 800453c:	40020470 	.word	0x40020470
 8004540:	40020488 	.word	0x40020488
 8004544:	400204a0 	.word	0x400204a0
 8004548:	400204b8 	.word	0x400204b8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d015      	beq.n	8004590 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0204 	bic.w	r2, r2, #4
 8004572:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2208      	movs	r2, #8
 800457e:	409a      	lsls	r2, r3
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06e      	beq.n	8004684 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a69      	ldr	r2, [pc, #420]	@ (8004750 <HAL_DMA_IRQHandler+0x3f8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d04a      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a67      	ldr	r2, [pc, #412]	@ (8004754 <HAL_DMA_IRQHandler+0x3fc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d045      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a66      	ldr	r2, [pc, #408]	@ (8004758 <HAL_DMA_IRQHandler+0x400>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d040      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a64      	ldr	r2, [pc, #400]	@ (800475c <HAL_DMA_IRQHandler+0x404>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d03b      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a63      	ldr	r2, [pc, #396]	@ (8004760 <HAL_DMA_IRQHandler+0x408>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d036      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a61      	ldr	r2, [pc, #388]	@ (8004764 <HAL_DMA_IRQHandler+0x40c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d031      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a60      	ldr	r2, [pc, #384]	@ (8004768 <HAL_DMA_IRQHandler+0x410>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d02c      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5e      	ldr	r2, [pc, #376]	@ (800476c <HAL_DMA_IRQHandler+0x414>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d027      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5d      	ldr	r2, [pc, #372]	@ (8004770 <HAL_DMA_IRQHandler+0x418>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d022      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5b      	ldr	r2, [pc, #364]	@ (8004774 <HAL_DMA_IRQHandler+0x41c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01d      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5a      	ldr	r2, [pc, #360]	@ (8004778 <HAL_DMA_IRQHandler+0x420>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d018      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a58      	ldr	r2, [pc, #352]	@ (800477c <HAL_DMA_IRQHandler+0x424>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a57      	ldr	r2, [pc, #348]	@ (8004780 <HAL_DMA_IRQHandler+0x428>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a55      	ldr	r2, [pc, #340]	@ (8004784 <HAL_DMA_IRQHandler+0x42c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a54      	ldr	r2, [pc, #336]	@ (8004788 <HAL_DMA_IRQHandler+0x430>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2ee>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a52      	ldr	r2, [pc, #328]	@ (800478c <HAL_DMA_IRQHandler+0x434>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10a      	bne.n	800465c <HAL_DMA_IRQHandler+0x304>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e003      	b.n	8004664 <HAL_DMA_IRQHandler+0x30c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467c:	f043 0202 	orr.w	r2, r3, #2
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2204      	movs	r2, #4
 800468e:	409a      	lsls	r2, r3
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 808f 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2c      	ldr	r2, [pc, #176]	@ (8004750 <HAL_DMA_IRQHandler+0x3f8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004754 <HAL_DMA_IRQHandler+0x3fc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a29      	ldr	r2, [pc, #164]	@ (8004758 <HAL_DMA_IRQHandler+0x400>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a27      	ldr	r2, [pc, #156]	@ (800475c <HAL_DMA_IRQHandler+0x404>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a26      	ldr	r2, [pc, #152]	@ (8004760 <HAL_DMA_IRQHandler+0x408>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a24      	ldr	r2, [pc, #144]	@ (8004764 <HAL_DMA_IRQHandler+0x40c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <HAL_DMA_IRQHandler+0x410>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a21      	ldr	r2, [pc, #132]	@ (800476c <HAL_DMA_IRQHandler+0x414>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a20      	ldr	r2, [pc, #128]	@ (8004770 <HAL_DMA_IRQHandler+0x418>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <HAL_DMA_IRQHandler+0x41c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1d      	ldr	r2, [pc, #116]	@ (8004778 <HAL_DMA_IRQHandler+0x420>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_DMA_IRQHandler+0x424>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1a      	ldr	r2, [pc, #104]	@ (8004780 <HAL_DMA_IRQHandler+0x428>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <HAL_DMA_IRQHandler+0x42c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	@ (8004788 <HAL_DMA_IRQHandler+0x430>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_DMA_IRQHandler+0x3e2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a15      	ldr	r2, [pc, #84]	@ (800478c <HAL_DMA_IRQHandler+0x434>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d12a      	bne.n	8004790 <HAL_DMA_IRQHandler+0x438>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e023      	b.n	8004798 <HAL_DMA_IRQHandler+0x440>
 8004750:	40020010 	.word	0x40020010
 8004754:	40020028 	.word	0x40020028
 8004758:	40020040 	.word	0x40020040
 800475c:	40020058 	.word	0x40020058
 8004760:	40020070 	.word	0x40020070
 8004764:	40020088 	.word	0x40020088
 8004768:	400200a0 	.word	0x400200a0
 800476c:	400200b8 	.word	0x400200b8
 8004770:	40020410 	.word	0x40020410
 8004774:	40020428 	.word	0x40020428
 8004778:	40020440 	.word	0x40020440
 800477c:	40020458 	.word	0x40020458
 8004780:	40020470 	.word	0x40020470
 8004784:	40020488 	.word	0x40020488
 8004788:	400204a0 	.word	0x400204a0
 800478c:	400204b8 	.word	0x400204b8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2204      	movs	r2, #4
 80047a6:	409a      	lsls	r2, r3
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	f043 0204 	orr.w	r2, r3, #4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2210      	movs	r2, #16
 80047c2:	409a      	lsls	r2, r3
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80a6 	beq.w	800491a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a85      	ldr	r2, [pc, #532]	@ (80049e8 <HAL_DMA_IRQHandler+0x690>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a83      	ldr	r2, [pc, #524]	@ (80049ec <HAL_DMA_IRQHandler+0x694>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a82      	ldr	r2, [pc, #520]	@ (80049f0 <HAL_DMA_IRQHandler+0x698>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a80      	ldr	r2, [pc, #512]	@ (80049f4 <HAL_DMA_IRQHandler+0x69c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7f      	ldr	r2, [pc, #508]	@ (80049f8 <HAL_DMA_IRQHandler+0x6a0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7d      	ldr	r2, [pc, #500]	@ (80049fc <HAL_DMA_IRQHandler+0x6a4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a00 <HAL_DMA_IRQHandler+0x6a8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a7a      	ldr	r2, [pc, #488]	@ (8004a04 <HAL_DMA_IRQHandler+0x6ac>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a79      	ldr	r2, [pc, #484]	@ (8004a08 <HAL_DMA_IRQHandler+0x6b0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a77      	ldr	r2, [pc, #476]	@ (8004a0c <HAL_DMA_IRQHandler+0x6b4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a76      	ldr	r2, [pc, #472]	@ (8004a10 <HAL_DMA_IRQHandler+0x6b8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a74      	ldr	r2, [pc, #464]	@ (8004a14 <HAL_DMA_IRQHandler+0x6bc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a73      	ldr	r2, [pc, #460]	@ (8004a18 <HAL_DMA_IRQHandler+0x6c0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a71      	ldr	r2, [pc, #452]	@ (8004a1c <HAL_DMA_IRQHandler+0x6c4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a70      	ldr	r2, [pc, #448]	@ (8004a20 <HAL_DMA_IRQHandler+0x6c8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_IRQHandler+0x516>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6e      	ldr	r2, [pc, #440]	@ (8004a24 <HAL_DMA_IRQHandler+0x6cc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10a      	bne.n	8004884 <HAL_DMA_IRQHandler+0x52c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e009      	b.n	8004898 <HAL_DMA_IRQHandler+0x540>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03e      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2210      	movs	r2, #16
 80048a6:	409a      	lsls	r2, r3
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d024      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e01f      	b.n	800491a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
 80048ea:	e016      	b.n	800491a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d107      	bne.n	800490a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2220      	movs	r2, #32
 8004924:	409a      	lsls	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8110 	beq.w	8004b50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2c      	ldr	r2, [pc, #176]	@ (80049e8 <HAL_DMA_IRQHandler+0x690>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2b      	ldr	r2, [pc, #172]	@ (80049ec <HAL_DMA_IRQHandler+0x694>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a29      	ldr	r2, [pc, #164]	@ (80049f0 <HAL_DMA_IRQHandler+0x698>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a28      	ldr	r2, [pc, #160]	@ (80049f4 <HAL_DMA_IRQHandler+0x69c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a26      	ldr	r2, [pc, #152]	@ (80049f8 <HAL_DMA_IRQHandler+0x6a0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a25      	ldr	r2, [pc, #148]	@ (80049fc <HAL_DMA_IRQHandler+0x6a4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a23      	ldr	r2, [pc, #140]	@ (8004a00 <HAL_DMA_IRQHandler+0x6a8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a22      	ldr	r2, [pc, #136]	@ (8004a04 <HAL_DMA_IRQHandler+0x6ac>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a20      	ldr	r2, [pc, #128]	@ (8004a08 <HAL_DMA_IRQHandler+0x6b0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a0c <HAL_DMA_IRQHandler+0x6b4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <HAL_DMA_IRQHandler+0x6b8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <HAL_DMA_IRQHandler+0x6bc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <HAL_DMA_IRQHandler+0x6c0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <HAL_DMA_IRQHandler+0x6c4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <HAL_DMA_IRQHandler+0x6c8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x678>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <HAL_DMA_IRQHandler+0x6cc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d12b      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x6d0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e02a      	b.n	8004a3c <HAL_DMA_IRQHandler+0x6e4>
 80049e6:	bf00      	nop
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8087 	beq.w	8004b50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d139      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0216 	bic.w	r2, r2, #22
 8004a6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <HAL_DMA_IRQHandler+0x736>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0208 	bic.w	r2, r2, #8
 8004a9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	223f      	movs	r2, #63	@ 0x3f
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 834a 	beq.w	800515c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
          }
          return;
 8004ad0:	e344      	b.n	800515c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d018      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02c      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	4798      	blx	r3
 8004afe:	e027      	b.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d023      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
 8004b10:	e01e      	b.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10f      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0210 	bic.w	r2, r2, #16
 8004b2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8306 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8088 	beq.w	8004c78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7a      	ldr	r2, [pc, #488]	@ (8004d60 <HAL_DMA_IRQHandler+0xa08>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d04a      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a79      	ldr	r2, [pc, #484]	@ (8004d64 <HAL_DMA_IRQHandler+0xa0c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d045      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a77      	ldr	r2, [pc, #476]	@ (8004d68 <HAL_DMA_IRQHandler+0xa10>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d040      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a76      	ldr	r2, [pc, #472]	@ (8004d6c <HAL_DMA_IRQHandler+0xa14>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d03b      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a74      	ldr	r2, [pc, #464]	@ (8004d70 <HAL_DMA_IRQHandler+0xa18>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d036      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a73      	ldr	r2, [pc, #460]	@ (8004d74 <HAL_DMA_IRQHandler+0xa1c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d031      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a71      	ldr	r2, [pc, #452]	@ (8004d78 <HAL_DMA_IRQHandler+0xa20>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d02c      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a70      	ldr	r2, [pc, #448]	@ (8004d7c <HAL_DMA_IRQHandler+0xa24>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d027      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8004d80 <HAL_DMA_IRQHandler+0xa28>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a6d      	ldr	r2, [pc, #436]	@ (8004d84 <HAL_DMA_IRQHandler+0xa2c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d01d      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8004d88 <HAL_DMA_IRQHandler+0xa30>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6a      	ldr	r2, [pc, #424]	@ (8004d8c <HAL_DMA_IRQHandler+0xa34>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a68      	ldr	r2, [pc, #416]	@ (8004d90 <HAL_DMA_IRQHandler+0xa38>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a67      	ldr	r2, [pc, #412]	@ (8004d94 <HAL_DMA_IRQHandler+0xa3c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a65      	ldr	r2, [pc, #404]	@ (8004d98 <HAL_DMA_IRQHandler+0xa40>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x8b8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a64      	ldr	r2, [pc, #400]	@ (8004d9c <HAL_DMA_IRQHandler+0xa44>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <HAL_DMA_IRQHandler+0x8ca>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e007      	b.n	8004c32 <HAL_DMA_IRQHandler+0x8da>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3301      	adds	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d307      	bcc.n	8004c4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f2      	bne.n	8004c32 <HAL_DMA_IRQHandler+0x8da>
 8004c4c:	e000      	b.n	8004c50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2203      	movs	r2, #3
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c66:	e003      	b.n	8004c70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8272 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
 8004c8a:	e26c      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a43      	ldr	r2, [pc, #268]	@ (8004da0 <HAL_DMA_IRQHandler+0xa48>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d022      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a42      	ldr	r2, [pc, #264]	@ (8004da4 <HAL_DMA_IRQHandler+0xa4c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d01d      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a40      	ldr	r2, [pc, #256]	@ (8004da8 <HAL_DMA_IRQHandler+0xa50>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3f      	ldr	r2, [pc, #252]	@ (8004dac <HAL_DMA_IRQHandler+0xa54>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8004db0 <HAL_DMA_IRQHandler+0xa58>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8004db4 <HAL_DMA_IRQHandler+0xa5c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8004db8 <HAL_DMA_IRQHandler+0xa60>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x984>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a39      	ldr	r2, [pc, #228]	@ (8004dbc <HAL_DMA_IRQHandler+0xa64>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x988>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_DMA_IRQHandler+0x98a>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 823f 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80cd 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0xb48>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80c7 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d049      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8210 	beq.w	8005160 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d48:	e20a      	b.n	8005160 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8206 	beq.w	8005160 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d5c:	e200      	b.n	8005160 <HAL_DMA_IRQHandler+0xe08>
 8004d5e:	bf00      	nop
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	58025408 	.word	0x58025408
 8004da4:	5802541c 	.word	0x5802541c
 8004da8:	58025430 	.word	0x58025430
 8004dac:	58025444 	.word	0x58025444
 8004db0:	58025458 	.word	0x58025458
 8004db4:	5802546c 	.word	0x5802546c
 8004db8:	58025480 	.word	0x58025480
 8004dbc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d160      	bne.n	8004e8c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7f      	ldr	r2, [pc, #508]	@ (8004fcc <HAL_DMA_IRQHandler+0xc74>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7d      	ldr	r2, [pc, #500]	@ (8004fd0 <HAL_DMA_IRQHandler+0xc78>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7c      	ldr	r2, [pc, #496]	@ (8004fd4 <HAL_DMA_IRQHandler+0xc7c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a7a      	ldr	r2, [pc, #488]	@ (8004fd8 <HAL_DMA_IRQHandler+0xc80>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a79      	ldr	r2, [pc, #484]	@ (8004fdc <HAL_DMA_IRQHandler+0xc84>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a77      	ldr	r2, [pc, #476]	@ (8004fe0 <HAL_DMA_IRQHandler+0xc88>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a76      	ldr	r2, [pc, #472]	@ (8004fe4 <HAL_DMA_IRQHandler+0xc8c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a74      	ldr	r2, [pc, #464]	@ (8004fe8 <HAL_DMA_IRQHandler+0xc90>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a73      	ldr	r2, [pc, #460]	@ (8004fec <HAL_DMA_IRQHandler+0xc94>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a71      	ldr	r2, [pc, #452]	@ (8004ff0 <HAL_DMA_IRQHandler+0xc98>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a70      	ldr	r2, [pc, #448]	@ (8004ff4 <HAL_DMA_IRQHandler+0xc9c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ff8 <HAL_DMA_IRQHandler+0xca0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a6d      	ldr	r2, [pc, #436]	@ (8004ffc <HAL_DMA_IRQHandler+0xca4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a6b      	ldr	r2, [pc, #428]	@ (8005000 <HAL_DMA_IRQHandler+0xca8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6a      	ldr	r2, [pc, #424]	@ (8005004 <HAL_DMA_IRQHandler+0xcac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_IRQHandler+0xb12>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a68      	ldr	r2, [pc, #416]	@ (8005008 <HAL_DMA_IRQHandler+0xcb0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <HAL_DMA_IRQHandler+0xb24>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0208 	bic.w	r2, r2, #8
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e007      	b.n	8004e8c <HAL_DMA_IRQHandler+0xb34>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0204 	bic.w	r2, r2, #4
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8165 	beq.w	8005160 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9e:	e15f      	b.n	8005160 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80c5 	beq.w	8005040 <HAL_DMA_IRQHandler+0xce8>
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80bf 	beq.w	8005040 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2202      	movs	r2, #2
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d018      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 813a 	beq.w	8005164 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef8:	e134      	b.n	8005164 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8130 	beq.w	8005164 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f0c:	e12a      	b.n	8005164 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8089 	bne.w	800502c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <HAL_DMA_IRQHandler+0xc74>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d04a      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a29      	ldr	r2, [pc, #164]	@ (8004fd0 <HAL_DMA_IRQHandler+0xc78>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d045      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a28      	ldr	r2, [pc, #160]	@ (8004fd4 <HAL_DMA_IRQHandler+0xc7c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d040      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	@ (8004fd8 <HAL_DMA_IRQHandler+0xc80>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d03b      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	@ (8004fdc <HAL_DMA_IRQHandler+0xc84>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d036      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	@ (8004fe0 <HAL_DMA_IRQHandler+0xc88>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d031      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <HAL_DMA_IRQHandler+0xc8c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d02c      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a20      	ldr	r2, [pc, #128]	@ (8004fe8 <HAL_DMA_IRQHandler+0xc90>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <HAL_DMA_IRQHandler+0xc94>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <HAL_DMA_IRQHandler+0xc98>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <HAL_DMA_IRQHandler+0xc9c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_DMA_IRQHandler+0xca0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a19      	ldr	r2, [pc, #100]	@ (8004ffc <HAL_DMA_IRQHandler+0xca4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a17      	ldr	r2, [pc, #92]	@ (8005000 <HAL_DMA_IRQHandler+0xca8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a16      	ldr	r2, [pc, #88]	@ (8005004 <HAL_DMA_IRQHandler+0xcac>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_IRQHandler+0xc62>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	@ (8005008 <HAL_DMA_IRQHandler+0xcb0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d128      	bne.n	800500c <HAL_DMA_IRQHandler+0xcb4>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0214 	bic.w	r2, r2, #20
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e027      	b.n	800501c <HAL_DMA_IRQHandler+0xcc4>
 8004fcc:	40020010 	.word	0x40020010
 8004fd0:	40020028 	.word	0x40020028
 8004fd4:	40020040 	.word	0x40020040
 8004fd8:	40020058 	.word	0x40020058
 8004fdc:	40020070 	.word	0x40020070
 8004fe0:	40020088 	.word	0x40020088
 8004fe4:	400200a0 	.word	0x400200a0
 8004fe8:	400200b8 	.word	0x400200b8
 8004fec:	40020410 	.word	0x40020410
 8004ff0:	40020428 	.word	0x40020428
 8004ff4:	40020440 	.word	0x40020440
 8004ff8:	40020458 	.word	0x40020458
 8004ffc:	40020470 	.word	0x40020470
 8005000:	40020488 	.word	0x40020488
 8005004:	400204a0 	.word	0x400204a0
 8005008:	400204b8 	.word	0x400204b8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 020a 	bic.w	r2, r2, #10
 800501a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8097 	beq.w	8005164 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800503e:	e091      	b.n	8005164 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2208      	movs	r2, #8
 800504a:	409a      	lsls	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8088 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8082 	beq.w	8005166 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a41      	ldr	r2, [pc, #260]	@ (800516c <HAL_DMA_IRQHandler+0xe14>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d04a      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3f      	ldr	r2, [pc, #252]	@ (8005170 <HAL_DMA_IRQHandler+0xe18>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d045      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a3e      	ldr	r2, [pc, #248]	@ (8005174 <HAL_DMA_IRQHandler+0xe1c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d040      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a3c      	ldr	r2, [pc, #240]	@ (8005178 <HAL_DMA_IRQHandler+0xe20>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d03b      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a3b      	ldr	r2, [pc, #236]	@ (800517c <HAL_DMA_IRQHandler+0xe24>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d036      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a39      	ldr	r2, [pc, #228]	@ (8005180 <HAL_DMA_IRQHandler+0xe28>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d031      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a38      	ldr	r2, [pc, #224]	@ (8005184 <HAL_DMA_IRQHandler+0xe2c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d02c      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a36      	ldr	r2, [pc, #216]	@ (8005188 <HAL_DMA_IRQHandler+0xe30>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d027      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a35      	ldr	r2, [pc, #212]	@ (800518c <HAL_DMA_IRQHandler+0xe34>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a33      	ldr	r2, [pc, #204]	@ (8005190 <HAL_DMA_IRQHandler+0xe38>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01d      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a32      	ldr	r2, [pc, #200]	@ (8005194 <HAL_DMA_IRQHandler+0xe3c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a30      	ldr	r2, [pc, #192]	@ (8005198 <HAL_DMA_IRQHandler+0xe40>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2f      	ldr	r2, [pc, #188]	@ (800519c <HAL_DMA_IRQHandler+0xe44>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2d      	ldr	r2, [pc, #180]	@ (80051a0 <HAL_DMA_IRQHandler+0xe48>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <HAL_DMA_IRQHandler+0xe4c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_IRQHandler+0xdaa>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2a      	ldr	r2, [pc, #168]	@ (80051a8 <HAL_DMA_IRQHandler+0xe50>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d108      	bne.n	8005114 <HAL_DMA_IRQHandler+0xdbc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 021c 	bic.w	r2, r2, #28
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e007      	b.n	8005124 <HAL_DMA_IRQHandler+0xdcc>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020e 	bic.w	r2, r2, #14
 8005122:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2201      	movs	r2, #1
 800512e:	409a      	lsls	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	4798      	blx	r3
 800515a:	e004      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800515c:	bf00      	nop
 800515e:	e002      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005164:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005166:	3728      	adds	r7, #40	@ 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40020010 	.word	0x40020010
 8005170:	40020028 	.word	0x40020028
 8005174:	40020040 	.word	0x40020040
 8005178:	40020058 	.word	0x40020058
 800517c:	40020070 	.word	0x40020070
 8005180:	40020088 	.word	0x40020088
 8005184:	400200a0 	.word	0x400200a0
 8005188:	400200b8 	.word	0x400200b8
 800518c:	40020410 	.word	0x40020410
 8005190:	40020428 	.word	0x40020428
 8005194:	40020440 	.word	0x40020440
 8005198:	40020458 	.word	0x40020458
 800519c:	40020470 	.word	0x40020470
 80051a0:	40020488 	.word	0x40020488
 80051a4:	400204a0 	.word	0x400204a0
 80051a8:	400204b8 	.word	0x400204b8

080051ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a7f      	ldr	r2, [pc, #508]	@ (80053e0 <DMA_SetConfig+0x21c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d072      	beq.n	80052ce <DMA_SetConfig+0x10a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a7d      	ldr	r2, [pc, #500]	@ (80053e4 <DMA_SetConfig+0x220>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d06d      	beq.n	80052ce <DMA_SetConfig+0x10a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a7c      	ldr	r2, [pc, #496]	@ (80053e8 <DMA_SetConfig+0x224>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d068      	beq.n	80052ce <DMA_SetConfig+0x10a>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a7a      	ldr	r2, [pc, #488]	@ (80053ec <DMA_SetConfig+0x228>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d063      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a79      	ldr	r2, [pc, #484]	@ (80053f0 <DMA_SetConfig+0x22c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d05e      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a77      	ldr	r2, [pc, #476]	@ (80053f4 <DMA_SetConfig+0x230>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d059      	beq.n	80052ce <DMA_SetConfig+0x10a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a76      	ldr	r2, [pc, #472]	@ (80053f8 <DMA_SetConfig+0x234>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d054      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a74      	ldr	r2, [pc, #464]	@ (80053fc <DMA_SetConfig+0x238>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04f      	beq.n	80052ce <DMA_SetConfig+0x10a>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a73      	ldr	r2, [pc, #460]	@ (8005400 <DMA_SetConfig+0x23c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d04a      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a71      	ldr	r2, [pc, #452]	@ (8005404 <DMA_SetConfig+0x240>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d045      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a70      	ldr	r2, [pc, #448]	@ (8005408 <DMA_SetConfig+0x244>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d040      	beq.n	80052ce <DMA_SetConfig+0x10a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6e      	ldr	r2, [pc, #440]	@ (800540c <DMA_SetConfig+0x248>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d03b      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a6d      	ldr	r2, [pc, #436]	@ (8005410 <DMA_SetConfig+0x24c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d036      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a6b      	ldr	r2, [pc, #428]	@ (8005414 <DMA_SetConfig+0x250>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d031      	beq.n	80052ce <DMA_SetConfig+0x10a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6a      	ldr	r2, [pc, #424]	@ (8005418 <DMA_SetConfig+0x254>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d02c      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a68      	ldr	r2, [pc, #416]	@ (800541c <DMA_SetConfig+0x258>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d027      	beq.n	80052ce <DMA_SetConfig+0x10a>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a67      	ldr	r2, [pc, #412]	@ (8005420 <DMA_SetConfig+0x25c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a65      	ldr	r2, [pc, #404]	@ (8005424 <DMA_SetConfig+0x260>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <DMA_SetConfig+0x10a>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a64      	ldr	r2, [pc, #400]	@ (8005428 <DMA_SetConfig+0x264>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <DMA_SetConfig+0x10a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a62      	ldr	r2, [pc, #392]	@ (800542c <DMA_SetConfig+0x268>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <DMA_SetConfig+0x10a>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a61      	ldr	r2, [pc, #388]	@ (8005430 <DMA_SetConfig+0x26c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <DMA_SetConfig+0x10a>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005434 <DMA_SetConfig+0x270>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <DMA_SetConfig+0x10a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a5e      	ldr	r2, [pc, #376]	@ (8005438 <DMA_SetConfig+0x274>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <DMA_SetConfig+0x10a>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5c      	ldr	r2, [pc, #368]	@ (800543c <DMA_SetConfig+0x278>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <DMA_SetConfig+0x10e>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <DMA_SetConfig+0x110>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a39      	ldr	r2, [pc, #228]	@ (80053e0 <DMA_SetConfig+0x21c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d04a      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a38      	ldr	r2, [pc, #224]	@ (80053e4 <DMA_SetConfig+0x220>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d045      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a36      	ldr	r2, [pc, #216]	@ (80053e8 <DMA_SetConfig+0x224>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d040      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a35      	ldr	r2, [pc, #212]	@ (80053ec <DMA_SetConfig+0x228>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d03b      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a33      	ldr	r2, [pc, #204]	@ (80053f0 <DMA_SetConfig+0x22c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d036      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a32      	ldr	r2, [pc, #200]	@ (80053f4 <DMA_SetConfig+0x230>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d031      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a30      	ldr	r2, [pc, #192]	@ (80053f8 <DMA_SetConfig+0x234>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d02c      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2f      	ldr	r2, [pc, #188]	@ (80053fc <DMA_SetConfig+0x238>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d027      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2d      	ldr	r2, [pc, #180]	@ (8005400 <DMA_SetConfig+0x23c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d022      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <DMA_SetConfig+0x240>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d01d      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <DMA_SetConfig+0x244>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a29      	ldr	r2, [pc, #164]	@ (800540c <DMA_SetConfig+0x248>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a27      	ldr	r2, [pc, #156]	@ (8005410 <DMA_SetConfig+0x24c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a26      	ldr	r2, [pc, #152]	@ (8005414 <DMA_SetConfig+0x250>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a24      	ldr	r2, [pc, #144]	@ (8005418 <DMA_SetConfig+0x254>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <DMA_SetConfig+0x1d0>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a23      	ldr	r2, [pc, #140]	@ (800541c <DMA_SetConfig+0x258>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d101      	bne.n	8005398 <DMA_SetConfig+0x1d4>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <DMA_SetConfig+0x1d6>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d059      	beq.n	8005452 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	223f      	movs	r2, #63	@ 0x3f
 80053a8:	409a      	lsls	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b40      	cmp	r3, #64	@ 0x40
 80053cc:	d138      	bne.n	8005440 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053de:	e086      	b.n	80054ee <DMA_SetConfig+0x32a>
 80053e0:	40020010 	.word	0x40020010
 80053e4:	40020028 	.word	0x40020028
 80053e8:	40020040 	.word	0x40020040
 80053ec:	40020058 	.word	0x40020058
 80053f0:	40020070 	.word	0x40020070
 80053f4:	40020088 	.word	0x40020088
 80053f8:	400200a0 	.word	0x400200a0
 80053fc:	400200b8 	.word	0x400200b8
 8005400:	40020410 	.word	0x40020410
 8005404:	40020428 	.word	0x40020428
 8005408:	40020440 	.word	0x40020440
 800540c:	40020458 	.word	0x40020458
 8005410:	40020470 	.word	0x40020470
 8005414:	40020488 	.word	0x40020488
 8005418:	400204a0 	.word	0x400204a0
 800541c:	400204b8 	.word	0x400204b8
 8005420:	58025408 	.word	0x58025408
 8005424:	5802541c 	.word	0x5802541c
 8005428:	58025430 	.word	0x58025430
 800542c:	58025444 	.word	0x58025444
 8005430:	58025458 	.word	0x58025458
 8005434:	5802546c 	.word	0x5802546c
 8005438:	58025480 	.word	0x58025480
 800543c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]
}
 8005450:	e04d      	b.n	80054ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a29      	ldr	r2, [pc, #164]	@ (80054fc <DMA_SetConfig+0x338>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d022      	beq.n	80054a2 <DMA_SetConfig+0x2de>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a27      	ldr	r2, [pc, #156]	@ (8005500 <DMA_SetConfig+0x33c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01d      	beq.n	80054a2 <DMA_SetConfig+0x2de>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a26      	ldr	r2, [pc, #152]	@ (8005504 <DMA_SetConfig+0x340>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d018      	beq.n	80054a2 <DMA_SetConfig+0x2de>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a24      	ldr	r2, [pc, #144]	@ (8005508 <DMA_SetConfig+0x344>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <DMA_SetConfig+0x2de>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a23      	ldr	r2, [pc, #140]	@ (800550c <DMA_SetConfig+0x348>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00e      	beq.n	80054a2 <DMA_SetConfig+0x2de>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <DMA_SetConfig+0x34c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d009      	beq.n	80054a2 <DMA_SetConfig+0x2de>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a20      	ldr	r2, [pc, #128]	@ (8005514 <DMA_SetConfig+0x350>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <DMA_SetConfig+0x2de>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <DMA_SetConfig+0x354>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <DMA_SetConfig+0x2e2>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <DMA_SetConfig+0x2e4>
 80054a6:	2300      	movs	r3, #0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b40      	cmp	r3, #64	@ 0x40
 80054ca:	d108      	bne.n	80054de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	60da      	str	r2, [r3, #12]
}
 80054dc:	e007      	b.n	80054ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	58025408 	.word	0x58025408
 8005500:	5802541c 	.word	0x5802541c
 8005504:	58025430 	.word	0x58025430
 8005508:	58025444 	.word	0x58025444
 800550c:	58025458 	.word	0x58025458
 8005510:	5802546c 	.word	0x5802546c
 8005514:	58025480 	.word	0x58025480
 8005518:	58025494 	.word	0x58025494

0800551c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a42      	ldr	r2, [pc, #264]	@ (8005634 <DMA_CalcBaseAndBitshift+0x118>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d04a      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a41      	ldr	r2, [pc, #260]	@ (8005638 <DMA_CalcBaseAndBitshift+0x11c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d045      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a3f      	ldr	r2, [pc, #252]	@ (800563c <DMA_CalcBaseAndBitshift+0x120>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d040      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3e      	ldr	r2, [pc, #248]	@ (8005640 <DMA_CalcBaseAndBitshift+0x124>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d03b      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3c      	ldr	r2, [pc, #240]	@ (8005644 <DMA_CalcBaseAndBitshift+0x128>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d036      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a3b      	ldr	r2, [pc, #236]	@ (8005648 <DMA_CalcBaseAndBitshift+0x12c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d031      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a39      	ldr	r2, [pc, #228]	@ (800564c <DMA_CalcBaseAndBitshift+0x130>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02c      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a38      	ldr	r2, [pc, #224]	@ (8005650 <DMA_CalcBaseAndBitshift+0x134>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d027      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a36      	ldr	r2, [pc, #216]	@ (8005654 <DMA_CalcBaseAndBitshift+0x138>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d022      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a35      	ldr	r2, [pc, #212]	@ (8005658 <DMA_CalcBaseAndBitshift+0x13c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d01d      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a33      	ldr	r2, [pc, #204]	@ (800565c <DMA_CalcBaseAndBitshift+0x140>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d018      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a32      	ldr	r2, [pc, #200]	@ (8005660 <DMA_CalcBaseAndBitshift+0x144>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a30      	ldr	r2, [pc, #192]	@ (8005664 <DMA_CalcBaseAndBitshift+0x148>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00e      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005668 <DMA_CalcBaseAndBitshift+0x14c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d009      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a2d      	ldr	r2, [pc, #180]	@ (800566c <DMA_CalcBaseAndBitshift+0x150>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <DMA_CalcBaseAndBitshift+0xa8>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a2c      	ldr	r2, [pc, #176]	@ (8005670 <DMA_CalcBaseAndBitshift+0x154>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <DMA_CalcBaseAndBitshift+0xac>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <DMA_CalcBaseAndBitshift+0xae>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d024      	beq.n	8005618 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3b10      	subs	r3, #16
 80055d6:	4a27      	ldr	r2, [pc, #156]	@ (8005674 <DMA_CalcBaseAndBitshift+0x158>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	4a24      	ldr	r2, [pc, #144]	@ (8005678 <DMA_CalcBaseAndBitshift+0x15c>)
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d908      	bls.n	8005608 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b1f      	ldr	r3, [pc, #124]	@ (800567c <DMA_CalcBaseAndBitshift+0x160>)
 80055fe:	4013      	ands	r3, r2
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	659a      	str	r2, [r3, #88]	@ 0x58
 8005606:	e00d      	b.n	8005624 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <DMA_CalcBaseAndBitshift+0x160>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6593      	str	r3, [r2, #88]	@ 0x58
 8005616:	e005      	b.n	8005624 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	40020040 	.word	0x40020040
 8005640:	40020058 	.word	0x40020058
 8005644:	40020070 	.word	0x40020070
 8005648:	40020088 	.word	0x40020088
 800564c:	400200a0 	.word	0x400200a0
 8005650:	400200b8 	.word	0x400200b8
 8005654:	40020410 	.word	0x40020410
 8005658:	40020428 	.word	0x40020428
 800565c:	40020440 	.word	0x40020440
 8005660:	40020458 	.word	0x40020458
 8005664:	40020470 	.word	0x40020470
 8005668:	40020488 	.word	0x40020488
 800566c:	400204a0 	.word	0x400204a0
 8005670:	400204b8 	.word	0x400204b8
 8005674:	aaaaaaab 	.word	0xaaaaaaab
 8005678:	0801835c 	.word	0x0801835c
 800567c:	fffffc00 	.word	0xfffffc00

08005680 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d120      	bne.n	80056d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	2b03      	cmp	r3, #3
 800569a:	d858      	bhi.n	800574e <DMA_CheckFifoParam+0xce>
 800569c:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <DMA_CheckFifoParam+0x24>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056c7 	.word	0x080056c7
 80056ac:	080056b5 	.word	0x080056b5
 80056b0:	0800574f 	.word	0x0800574f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d048      	beq.n	8005752 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056c4:	e045      	b.n	8005752 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056ce:	d142      	bne.n	8005756 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056d4:	e03f      	b.n	8005756 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056de:	d123      	bne.n	8005728 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d838      	bhi.n	800575a <DMA_CheckFifoParam+0xda>
 80056e8:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <DMA_CheckFifoParam+0x70>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005701 	.word	0x08005701
 80056f4:	08005707 	.word	0x08005707
 80056f8:	08005701 	.word	0x08005701
 80056fc:	08005719 	.word	0x08005719
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
        break;
 8005704:	e030      	b.n	8005768 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d025      	beq.n	800575e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005716:	e022      	b.n	800575e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005720:	d11f      	bne.n	8005762 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005726:	e01c      	b.n	8005762 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	2b02      	cmp	r3, #2
 800572e:	d902      	bls.n	8005736 <DMA_CheckFifoParam+0xb6>
 8005730:	2b03      	cmp	r3, #3
 8005732:	d003      	beq.n	800573c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005734:	e018      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
        break;
 800573a:	e015      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
    break;
 800574c:	e00b      	b.n	8005766 <DMA_CheckFifoParam+0xe6>
        break;
 800574e:	bf00      	nop
 8005750:	e00a      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
        break;
 8005752:	bf00      	nop
 8005754:	e008      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
        break;
 8005756:	bf00      	nop
 8005758:	e006      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
        break;
 800575a:	bf00      	nop
 800575c:	e004      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
        break;
 800575e:	bf00      	nop
 8005760:	e002      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
        break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <DMA_CheckFifoParam+0xe8>
    break;
 8005766:	bf00      	nop
    }
  }

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop

08005778 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a38      	ldr	r2, [pc, #224]	@ (800586c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d022      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a36      	ldr	r2, [pc, #216]	@ (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01d      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a35      	ldr	r2, [pc, #212]	@ (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d018      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a33      	ldr	r2, [pc, #204]	@ (8005878 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a32      	ldr	r2, [pc, #200]	@ (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a30      	ldr	r2, [pc, #192]	@ (8005880 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d009      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005884 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005888 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d101      	bne.n	80057da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01a      	beq.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	3b08      	subs	r3, #8
 80057e8:	4a28      	ldr	r2, [pc, #160]	@ (800588c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4b26      	ldr	r3, [pc, #152]	@ (8005890 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	461a      	mov	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a24      	ldr	r2, [pc, #144]	@ (8005894 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005804:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	2201      	movs	r2, #1
 800580e:	409a      	lsls	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005814:	e024      	b.n	8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	3b10      	subs	r3, #16
 800581e:	4a1e      	ldr	r2, [pc, #120]	@ (8005898 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a1c      	ldr	r2, [pc, #112]	@ (800589c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d806      	bhi.n	800583e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a1b      	ldr	r2, [pc, #108]	@ (80058a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d902      	bls.n	800583e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3308      	adds	r3, #8
 800583c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4b18      	ldr	r3, [pc, #96]	@ (80058a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005850:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	58025408 	.word	0x58025408
 8005870:	5802541c 	.word	0x5802541c
 8005874:	58025430 	.word	0x58025430
 8005878:	58025444 	.word	0x58025444
 800587c:	58025458 	.word	0x58025458
 8005880:	5802546c 	.word	0x5802546c
 8005884:	58025480 	.word	0x58025480
 8005888:	58025494 	.word	0x58025494
 800588c:	cccccccd 	.word	0xcccccccd
 8005890:	16009600 	.word	0x16009600
 8005894:	58025880 	.word	0x58025880
 8005898:	aaaaaaab 	.word	0xaaaaaaab
 800589c:	400204b8 	.word	0x400204b8
 80058a0:	4002040f 	.word	0x4002040f
 80058a4:	10008200 	.word	0x10008200
 80058a8:	40020880 	.word	0x40020880

080058ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d04a      	beq.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d847      	bhi.n	8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a25      	ldr	r2, [pc, #148]	@ (8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d022      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a24      	ldr	r2, [pc, #144]	@ (8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d01d      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a22      	ldr	r2, [pc, #136]	@ (800596c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a21      	ldr	r2, [pc, #132]	@ (8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1c      	ldr	r2, [pc, #112]	@ (800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1b      	ldr	r2, [pc, #108]	@ (8005980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d101      	bne.n	800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800591c:	2300      	movs	r3, #0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4b17      	ldr	r3, [pc, #92]	@ (8005984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005934:	671a      	str	r2, [r3, #112]	@ 0x70
 8005936:	e009      	b.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4b14      	ldr	r3, [pc, #80]	@ (800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	461a      	mov	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a11      	ldr	r2, [pc, #68]	@ (8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800594a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3b01      	subs	r3, #1
 8005950:	2201      	movs	r2, #1
 8005952:	409a      	lsls	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	58025408 	.word	0x58025408
 8005968:	5802541c 	.word	0x5802541c
 800596c:	58025430 	.word	0x58025430
 8005970:	58025444 	.word	0x58025444
 8005974:	58025458 	.word	0x58025458
 8005978:	5802546c 	.word	0x5802546c
 800597c:	58025480 	.word	0x58025480
 8005980:	58025494 	.word	0x58025494
 8005984:	1600963f 	.word	0x1600963f
 8005988:	58025940 	.word	0x58025940
 800598c:	1000823f 	.word	0x1000823f
 8005990:	40020940 	.word	0x40020940

08005994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	@ 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059a2:	4b89      	ldr	r3, [pc, #548]	@ (8005bc8 <HAL_GPIO_Init+0x234>)
 80059a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059a6:	e194      	b.n	8005cd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	2101      	movs	r1, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8186 	beq.w	8005ccc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d005      	beq.n	80059d8 <HAL_GPIO_Init+0x44>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d130      	bne.n	8005a3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	2203      	movs	r2, #3
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0201 	and.w	r2, r3, #1
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d017      	beq.n	8005a76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	2203      	movs	r2, #3
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d123      	bne.n	8005aca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	08da      	lsrs	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3208      	adds	r2, #8
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	220f      	movs	r2, #15
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	69b9      	ldr	r1, [r7, #24]
 8005ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 0203 	and.w	r2, r3, #3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80e0 	beq.w	8005ccc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bcc <HAL_GPIO_Init+0x238>)
 8005b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b12:	4a2e      	ldr	r2, [pc, #184]	@ (8005bcc <HAL_GPIO_Init+0x238>)
 8005b14:	f043 0302 	orr.w	r3, r3, #2
 8005b18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005bcc <HAL_GPIO_Init+0x238>)
 8005b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b2a:	4a29      	ldr	r2, [pc, #164]	@ (8005bd0 <HAL_GPIO_Init+0x23c>)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	3302      	adds	r3, #2
 8005b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	220f      	movs	r2, #15
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43db      	mvns	r3, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a20      	ldr	r2, [pc, #128]	@ (8005bd4 <HAL_GPIO_Init+0x240>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d052      	beq.n	8005bfc <HAL_GPIO_Init+0x268>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd8 <HAL_GPIO_Init+0x244>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_GPIO_Init+0x22e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1e      	ldr	r2, [pc, #120]	@ (8005bdc <HAL_GPIO_Init+0x248>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d02b      	beq.n	8005bbe <HAL_GPIO_Init+0x22a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <HAL_GPIO_Init+0x24c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d025      	beq.n	8005bba <HAL_GPIO_Init+0x226>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <HAL_GPIO_Init+0x250>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01f      	beq.n	8005bb6 <HAL_GPIO_Init+0x222>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1b      	ldr	r2, [pc, #108]	@ (8005be8 <HAL_GPIO_Init+0x254>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d019      	beq.n	8005bb2 <HAL_GPIO_Init+0x21e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1a      	ldr	r2, [pc, #104]	@ (8005bec <HAL_GPIO_Init+0x258>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_GPIO_Init+0x21a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a19      	ldr	r2, [pc, #100]	@ (8005bf0 <HAL_GPIO_Init+0x25c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00d      	beq.n	8005baa <HAL_GPIO_Init+0x216>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a18      	ldr	r2, [pc, #96]	@ (8005bf4 <HAL_GPIO_Init+0x260>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <HAL_GPIO_Init+0x212>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <HAL_GPIO_Init+0x264>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <HAL_GPIO_Init+0x20e>
 8005b9e:	2309      	movs	r3, #9
 8005ba0:	e02d      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	e02b      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	e029      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005baa:	2307      	movs	r3, #7
 8005bac:	e027      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bae:	2306      	movs	r3, #6
 8005bb0:	e025      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bb2:	2305      	movs	r3, #5
 8005bb4:	e023      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	e021      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e01f      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e01d      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e01b      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bc6:	bf00      	nop
 8005bc8:	58000080 	.word	0x58000080
 8005bcc:	58024400 	.word	0x58024400
 8005bd0:	58000400 	.word	0x58000400
 8005bd4:	58020000 	.word	0x58020000
 8005bd8:	58020400 	.word	0x58020400
 8005bdc:	58020800 	.word	0x58020800
 8005be0:	58020c00 	.word	0x58020c00
 8005be4:	58021000 	.word	0x58021000
 8005be8:	58021400 	.word	0x58021400
 8005bec:	58021800 	.word	0x58021800
 8005bf0:	58021c00 	.word	0x58021c00
 8005bf4:	58022000 	.word	0x58022000
 8005bf8:	58022400 	.word	0x58022400
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	f002 0203 	and.w	r2, r2, #3
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	4093      	lsls	r3, r2
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c0e:	4938      	ldr	r1, [pc, #224]	@ (8005cf0 <HAL_GPIO_Init+0x35c>)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	089b      	lsrs	r3, r3, #2
 8005c14:	3302      	adds	r3, #2
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	43db      	mvns	r3, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4013      	ands	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f47f ae63 	bne.w	80059a8 <HAL_GPIO_Init+0x14>
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	3724      	adds	r7, #36	@ 0x24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	58000400 	.word	0x58000400

08005cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
 8005d00:	4613      	mov	r3, r2
 8005d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d04:	787b      	ldrb	r3, [r7, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d10:	e003      	b.n	8005d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	041a      	lsls	r2, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	619a      	str	r2, [r3, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d38:	887a      	ldrh	r2, [r7, #2]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	041a      	lsls	r2, r3, #16
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	43d9      	mvns	r1, r3
 8005d44:	887b      	ldrh	r3, [r7, #2]
 8005d46:	400b      	ands	r3, r1
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	619a      	str	r2, [r3, #24]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fb f9a7 	bl	80010d4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e08b      	b.n	8005eba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fb f922 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	@ 0x24
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005de0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d107      	bne.n	8005e0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	e006      	b.n	8005e18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d108      	bne.n	8005e32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	e007      	b.n	8005e42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6859      	ldr	r1, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <HAL_I2C_Init+0x134>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69d9      	ldr	r1, [r3, #28]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	02008000 	.word	0x02008000

08005ec8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d138      	bne.n	8005f50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e032      	b.n	8005f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	@ 0x24
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e000      	b.n	8005f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f50:	2302      	movs	r3, #2
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d139      	bne.n	8005fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e033      	b.n	8005fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2224      	movs	r2, #36	@ 0x24
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0201 	bic.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e000      	b.n	8005fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af02      	add	r7, sp, #8
 8005ffc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0fe      	b.n	8006206 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f011 fcb5 	bl	801798c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2203      	movs	r2, #3
 8006026:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f008 fc8f 	bl	800e952 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	7c1a      	ldrb	r2, [r3, #16]
 800603c:	f88d 2000 	strb.w	r2, [sp]
 8006040:	3304      	adds	r3, #4
 8006042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006044:	f008 fb60 	bl	800e708 <USB_CoreInit>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0d5      	b.n	8006206 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f008 fc87 	bl	800e974 <USB_SetCurrentMode>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0c6      	b.n	8006206 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e04a      	b.n	8006114 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	3315      	adds	r3, #21
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006092:	7bfa      	ldrb	r2, [r7, #15]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	3314      	adds	r3, #20
 80060a2:	7bfa      	ldrb	r2, [r7, #15]
 80060a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	b298      	uxth	r0, r3
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	332e      	adds	r3, #46	@ 0x2e
 80060ba:	4602      	mov	r2, r0
 80060bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3318      	adds	r3, #24
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	331c      	adds	r3, #28
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3320      	adds	r3, #32
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	3324      	adds	r3, #36	@ 0x24
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	3301      	adds	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	791b      	ldrb	r3, [r3, #4]
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	429a      	cmp	r2, r3
 800611c:	d3af      	bcc.n	800607e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
 8006122:	e044      	b.n	80061ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800613a:	7bfa      	ldrb	r2, [r7, #15]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006150:	7bfa      	ldrb	r2, [r7, #15]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800617c:	7bfa      	ldrb	r2, [r7, #15]
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3301      	adds	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	7bfa      	ldrb	r2, [r7, #15]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d3b5      	bcc.n	8006124 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7c1a      	ldrb	r2, [r3, #16]
 80061c0:	f88d 2000 	strb.w	r2, [sp]
 80061c4:	3304      	adds	r3, #4
 80061c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c8:	f008 fc20 	bl	800ea0c <USB_DevInit>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e013      	b.n	8006206 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	7b1b      	ldrb	r3, [r3, #12]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d102      	bne.n	80061fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 f96f 	bl	80074d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f009 fc63 	bl	800faca <USB_DevDisconnect>

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_PCD_Start+0x1c>
 8006226:	2302      	movs	r3, #2
 8006228:	e022      	b.n	8006270 <HAL_PCD_Start+0x62>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006242:	2b01      	cmp	r3, #1
 8006244:	d105      	bne.n	8006252 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f008 fb6a 	bl	800e930 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f009 fc11 	bl	800fa88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006278:	b590      	push	{r4, r7, lr}
 800627a:	b08d      	sub	sp, #52	@ 0x34
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f009 fccf 	bl	800fc32 <USB_GetMode>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 84b9 	bne.w	8006c0e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f009 fc33 	bl	800fb0c <USB_ReadInterrupts>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 84af 	beq.w	8006c0c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f009 fc20 	bl	800fb0c <USB_ReadInterrupts>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d107      	bne.n	80062e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f002 0202 	and.w	r2, r2, #2
 80062e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f009 fc0e 	bl	800fb0c <USB_ReadInterrupts>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b10      	cmp	r3, #16
 80062f8:	d161      	bne.n	80063be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0210 	bic.w	r2, r2, #16
 8006308:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f003 020f 	and.w	r2, r3, #15
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4413      	add	r3, r2
 8006326:	3304      	adds	r3, #4
 8006328:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006330:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006334:	d124      	bne.n	8006380 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800633c:	4013      	ands	r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d035      	beq.n	80063ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800634c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	6a38      	ldr	r0, [r7, #32]
 8006356:	f009 fa45 	bl	800f7e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006366:	441a      	add	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	695a      	ldr	r2, [r3, #20]
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006378:	441a      	add	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	615a      	str	r2, [r3, #20]
 800637e:	e016      	b.n	80063ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006386:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800638a:	d110      	bne.n	80063ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006392:	2208      	movs	r2, #8
 8006394:	4619      	mov	r1, r3
 8006396:	6a38      	ldr	r0, [r7, #32]
 8006398:	f009 fa24 	bl	800f7e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a8:	441a      	add	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0210 	orr.w	r2, r2, #16
 80063bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f009 fba2 	bl	800fb0c <USB_ReadInterrupts>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80063d2:	f040 80a7 	bne.w	8006524 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f009 fba7 	bl	800fb32 <USB_ReadDevAllOutEpInterrupt>
 80063e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80063e6:	e099      	b.n	800651c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 808e 	beq.w	8006510 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f009 fbcb 	bl	800fb9a <USB_ReadDevOutEPInterrupt>
 8006404:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641c:	461a      	mov	r2, r3
 800641e:	2301      	movs	r3, #1
 8006420:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fed1 	bl	80071cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00c      	beq.n	800644e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006440:	461a      	mov	r2, r3
 8006442:	2308      	movs	r3, #8
 8006444:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006446:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ffa7 	bl	800739c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	2310      	movs	r3, #16
 8006468:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d030      	beq.n	80064d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647c:	2b80      	cmp	r3, #128	@ 0x80
 800647e:	d109      	bne.n	8006494 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800648e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006492:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006496:	4613      	mov	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4413      	add	r3, r2
 80064a6:	3304      	adds	r3, #4
 80064a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	78db      	ldrb	r3, [r3, #3]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d108      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2200      	movs	r2, #0
 80064b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f011 fb8a 	bl	8017bd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d0:	461a      	mov	r2, r3
 80064d2:	2302      	movs	r3, #2
 80064d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	461a      	mov	r2, r3
 80064ee:	2320      	movs	r3, #32
 80064f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006508:	461a      	mov	r2, r3
 800650a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800650e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	3301      	adds	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	f47f af62 	bne.w	80063e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f009 faef 	bl	800fb0c <USB_ReadInterrupts>
 800652e:	4603      	mov	r3, r0
 8006530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006538:	f040 80db 	bne.w	80066f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f009 fb10 	bl	800fb66 <USB_ReadDevAllInEpInterrupt>
 8006546:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800654c:	e0cd      	b.n	80066ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80c2 	beq.w	80066de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f009 fb36 	bl	800fbd6 <USB_ReadDevInEPInterrupt>
 800656a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d057      	beq.n	8006626 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	2201      	movs	r2, #1
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	43db      	mvns	r3, r3
 8006590:	69f9      	ldr	r1, [r7, #28]
 8006592:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006596:	4013      	ands	r3, r2
 8006598:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a6:	461a      	mov	r2, r3
 80065a8:	2301      	movs	r3, #1
 80065aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	799b      	ldrb	r3, [r3, #6]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d132      	bne.n	800661a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	3320      	adds	r3, #32
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ca:	4613      	mov	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4403      	add	r3, r0
 80065d4:	331c      	adds	r3, #28
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4419      	add	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065de:	4613      	mov	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4403      	add	r3, r0
 80065e8:	3320      	adds	r3, #32
 80065ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d113      	bne.n	800661a <HAL_PCD_IRQHandler+0x3a2>
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f6:	4613      	mov	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	3324      	adds	r3, #36	@ 0x24
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d108      	bne.n	800661a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006612:	461a      	mov	r2, r3
 8006614:	2101      	movs	r1, #1
 8006616:	f009 fb3f 	bl	800fc98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	b2db      	uxtb	r3, r3
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f011 fa54 	bl	8017ace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800663c:	461a      	mov	r2, r3
 800663e:	2308      	movs	r3, #8
 8006640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006658:	461a      	mov	r2, r3
 800665a:	2310      	movs	r3, #16
 800665c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d008      	beq.n	800667a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006674:	461a      	mov	r2, r3
 8006676:	2340      	movs	r3, #64	@ 0x40
 8006678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d023      	beq.n	80066cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006686:	6a38      	ldr	r0, [r7, #32]
 8006688:	f008 fb1e 	bl	800ecc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800668c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	3310      	adds	r3, #16
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	4413      	add	r3, r2
 800669c:	3304      	adds	r3, #4
 800669e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	78db      	ldrb	r3, [r3, #3]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d108      	bne.n	80066ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2200      	movs	r2, #0
 80066ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f011 faa1 	bl	8017bfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c6:	461a      	mov	r2, r3
 80066c8:	2302      	movs	r3, #2
 80066ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80066d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fcea 	bl	80070b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	3301      	adds	r3, #1
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f47f af2e 	bne.w	800654e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f009 fa08 	bl	800fb0c <USB_ReadInterrupts>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006706:	d122      	bne.n	800674e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006722:	2b01      	cmp	r3, #1
 8006724:	d108      	bne.n	8006738 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800672e:	2100      	movs	r1, #0
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fef5 	bl	8007520 <HAL_PCDEx_LPM_Callback>
 8006736:	e002      	b.n	800673e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f011 fa3f 	bl	8017bbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800674c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f009 f9da 	bl	800fb0c <USB_ReadInterrupts>
 8006758:	4603      	mov	r3, r0
 800675a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800675e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006762:	d112      	bne.n	800678a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d102      	bne.n	800677a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f011 f9fb 	bl	8017b70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006788:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f009 f9bc 	bl	800fb0c <USB_ReadInterrupts>
 8006794:	4603      	mov	r3, r0
 8006796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800679a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800679e:	d121      	bne.n	80067e4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695a      	ldr	r2, [r3, #20]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80067ae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d111      	bne.n	80067de <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c8:	089b      	lsrs	r3, r3, #2
 80067ca:	f003 020f 	and.w	r2, r3, #15
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80067d4:	2101      	movs	r1, #1
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fea2 	bl	8007520 <HAL_PCDEx_LPM_Callback>
 80067dc:	e002      	b.n	80067e4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f011 f9c6 	bl	8017b70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f009 f98f 	bl	800fb0c <USB_ReadInterrupts>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f8:	f040 80b7 	bne.w	800696a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2110      	movs	r1, #16
 8006816:	4618      	mov	r0, r3
 8006818:	f008 fa56 	bl	800ecc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800681c:	2300      	movs	r3, #0
 800681e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006820:	e046      	b.n	80068b0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682e:	461a      	mov	r2, r3
 8006830:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006834:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006850:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006854:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006862:	461a      	mov	r2, r3
 8006864:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006868:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006884:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006888:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	3301      	adds	r3, #1
 80068ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	791b      	ldrb	r3, [r3, #4]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d3b2      	bcc.n	8006822 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80068ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7bdb      	ldrb	r3, [r3, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d016      	beq.n	8006906 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068e8:	f043 030b 	orr.w	r3, r3, #11
 80068ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068fe:	f043 030b 	orr.w	r3, r3, #11
 8006902:	6453      	str	r3, [r2, #68]	@ 0x44
 8006904:	e015      	b.n	8006932 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006914:	4619      	mov	r1, r3
 8006916:	f242 032b 	movw	r3, #8235	@ 0x202b
 800691a:	4313      	orrs	r3, r2
 800691c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800692c:	f043 030b 	orr.w	r3, r3, #11
 8006930:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006940:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006944:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006954:	461a      	mov	r2, r3
 8006956:	f009 f99f 	bl	800fc98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f009 f8cc 	bl	800fb0c <USB_ReadInterrupts>
 8006974:	4603      	mov	r3, r0
 8006976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800697a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800697e:	d123      	bne.n	80069c8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f009 f963 	bl	800fc50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f008 fa13 	bl	800edba <USB_GetDevSpeed>
 8006994:	4603      	mov	r3, r0
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681c      	ldr	r4, [r3, #0]
 80069a0:	f001 fd9e 	bl	80084e0 <HAL_RCC_GetHCLKFreq>
 80069a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069aa:	461a      	mov	r2, r3
 80069ac:	4620      	mov	r0, r4
 80069ae:	f007 ff1d 	bl	800e7ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f011 f8b3 	bl	8017b1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695a      	ldr	r2, [r3, #20]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80069c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f009 f89d 	bl	800fb0c <USB_ReadInterrupts>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d10a      	bne.n	80069f2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f011 f890 	bl	8017b02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f002 0208 	and.w	r2, r2, #8
 80069f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f009 f888 	bl	800fb0c <USB_ReadInterrupts>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a02:	2b80      	cmp	r3, #128	@ 0x80
 8006a04:	d123      	bne.n	8006a4e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a12:	2301      	movs	r3, #1
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a16:	e014      	b.n	8006a42 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d105      	bne.n	8006a3c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fb0a 	bl	8007050 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	3301      	adds	r3, #1
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	791b      	ldrb	r3, [r3, #4]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d3e4      	bcc.n	8006a18 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f009 f85a 	bl	800fb0c <USB_ReadInterrupts>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a62:	d13c      	bne.n	8006ade <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a64:	2301      	movs	r3, #1
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a68:	e02b      	b.n	8006ac2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a7e:	4613      	mov	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	3318      	adds	r3, #24
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d115      	bne.n	8006abc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006a90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da12      	bge.n	8006abc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3317      	adds	r3, #23
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 faca 	bl	8007050 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	3301      	adds	r3, #1
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	791b      	ldrb	r3, [r3, #4]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d3cd      	bcc.n	8006a6a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f009 f812 	bl	800fb0c <USB_ReadInterrupts>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006af2:	d156      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006af4:	2301      	movs	r3, #1
 8006af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af8:	e045      	b.n	8006b86 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0e:	4613      	mov	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d12e      	bne.n	8006b80 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da2b      	bge.n	8006b80 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	0c1a      	lsrs	r2, r3, #16
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006b32:	4053      	eors	r3, r2
 8006b34:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d121      	bne.n	8006b80 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b40:	4613      	mov	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b7c:	6053      	str	r3, [r2, #4]
            break;
 8006b7e:	e008      	b.n	8006b92 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	3301      	adds	r3, #1
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	791b      	ldrb	r3, [r3, #4]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d3b3      	bcc.n	8006afa <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695a      	ldr	r2, [r3, #20]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f008 ffb0 	bl	800fb0c <USB_ReadInterrupts>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb6:	d10a      	bne.n	8006bce <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f011 f831 	bl	8017c20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f008 ff9a 	bl	800fb0c <USB_ReadInterrupts>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d115      	bne.n	8006c0e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f011 f821 	bl	8017c3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6859      	ldr	r1, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	e000      	b.n	8006c0e <HAL_PCD_IRQHandler+0x996>
      return;
 8006c0c:	bf00      	nop
    }
  }
}
 8006c0e:	3734      	adds	r7, #52	@ 0x34
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd90      	pop	{r4, r7, pc}

08006c14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_PCD_SetAddress+0x1a>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e012      	b.n	8006c54 <HAL_PCD_SetAddress+0x40>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	4611      	mov	r1, r2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f008 fef9 	bl	800fa3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	4608      	mov	r0, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	70fb      	strb	r3, [r7, #3]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	803b      	strh	r3, [r7, #0]
 8006c72:	4613      	mov	r3, r2
 8006c74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da0f      	bge.n	8006ca2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	f003 020f 	and.w	r2, r3, #15
 8006c88:	4613      	mov	r3, r2
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	3310      	adds	r3, #16
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	3304      	adds	r3, #4
 8006c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	705a      	strb	r2, [r3, #1]
 8006ca0:	e00f      	b.n	8006cc2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	f003 020f 	and.w	r2, r3, #15
 8006ca8:	4613      	mov	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3304      	adds	r3, #4
 8006cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006cce:	883b      	ldrh	r3, [r7, #0]
 8006cd0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	78ba      	ldrb	r2, [r7, #2]
 8006cdc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006cf0:	78bb      	ldrb	r3, [r7, #2]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d102      	bne.n	8006cfc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_PCD_EP_Open+0xae>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e00e      	b.n	8006d28 <HAL_PCD_EP_Open+0xcc>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f008 f873 	bl	800ee04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006d26:	7afb      	ldrb	r3, [r7, #11]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da0f      	bge.n	8006d64 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	f003 020f 	and.w	r2, r3, #15
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	3310      	adds	r3, #16
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	4413      	add	r3, r2
 8006d58:	3304      	adds	r3, #4
 8006d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	705a      	strb	r2, [r3, #1]
 8006d62:	e00f      	b.n	8006d84 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	f003 020f 	and.w	r2, r3, #15
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_PCD_EP_Close+0x6e>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e00e      	b.n	8006dbc <HAL_PCD_EP_Close+0x8c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f008 f8b1 	bl	800ef14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	f003 020f 	and.w	r2, r3, #15
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	3304      	adds	r3, #4
 8006dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2200      	movs	r2, #0
 8006e04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	799b      	ldrb	r3, [r3, #6]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d102      	bne.n	8006e20 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	799b      	ldrb	r3, [r3, #6]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6979      	ldr	r1, [r7, #20]
 8006e2c:	f008 f94e 	bl	800f0cc <USB_EPStartXfer>

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006e5c:	681b      	ldr	r3, [r3, #0]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
 8006e76:	460b      	mov	r3, r1
 8006e78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	3310      	adds	r3, #16
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3304      	adds	r3, #4
 8006e90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006eaa:	7afb      	ldrb	r3, [r7, #11]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	799b      	ldrb	r3, [r3, #6]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d102      	bne.n	8006ec4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	799b      	ldrb	r3, [r3, #6]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6979      	ldr	r1, [r7, #20]
 8006ed0:	f008 f8fc 	bl	800f0cc <USB_EPStartXfer>

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7912      	ldrb	r2, [r2, #4]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e04f      	b.n	8006f9c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da0f      	bge.n	8006f24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	f003 020f 	and.w	r2, r3, #15
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	3310      	adds	r3, #16
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4413      	add	r3, r2
 8006f18:	3304      	adds	r3, #4
 8006f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	705a      	strb	r2, [r3, #1]
 8006f22:	e00d      	b.n	8006f40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f24:	78fa      	ldrb	r2, [r7, #3]
 8006f26:	4613      	mov	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	4413      	add	r3, r2
 8006f36:	3304      	adds	r3, #4
 8006f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_PCD_EP_SetStall+0x82>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e01d      	b.n	8006f9c <HAL_PCD_EP_SetStall+0xbe>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f008 fc90 	bl	800f894 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	7999      	ldrb	r1, [r3, #6]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f008 fe83 	bl	800fc98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	7912      	ldrb	r2, [r2, #4]
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e042      	b.n	8007048 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	da0f      	bge.n	8006fea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	3310      	adds	r3, #16
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	3304      	adds	r3, #4
 8006fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	705a      	strb	r2, [r3, #1]
 8006fe8:	e00f      	b.n	800700a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	f003 020f 	and.w	r2, r3, #15
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	3304      	adds	r3, #4
 8007002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	b2da      	uxtb	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_PCD_EP_ClrStall+0x86>
 8007026:	2302      	movs	r3, #2
 8007028:	e00e      	b.n	8007048 <HAL_PCD_EP_ClrStall+0xa4>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	4618      	mov	r0, r3
 800703a:	f008 fc99 	bl	800f970 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800705c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007060:	2b00      	cmp	r3, #0
 8007062:	da0c      	bge.n	800707e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	4613      	mov	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	3310      	adds	r3, #16
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	3304      	adds	r3, #4
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e00c      	b.n	8007098 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	f003 020f 	and.w	r2, r3, #15
 8007084:	4613      	mov	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	3304      	adds	r3, #4
 8007096:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68f9      	ldr	r1, [r7, #12]
 800709e:	4618      	mov	r0, r3
 80070a0:	f008 fab8 	bl	800f614 <USB_EPStopXfer>
 80070a4:	4603      	mov	r3, r0
 80070a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80070a8:	7afb      	ldrb	r3, [r7, #11]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b08a      	sub	sp, #40	@ 0x28
 80070b6:	af02      	add	r7, sp, #8
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	3310      	adds	r3, #16
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4413      	add	r3, r2
 80070d6:	3304      	adds	r3, #4
 80070d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	695a      	ldr	r2, [r3, #20]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d901      	bls.n	80070ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e06b      	b.n	80071c2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d902      	bls.n	8007106 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	3303      	adds	r3, #3
 800710a:	089b      	lsrs	r3, r3, #2
 800710c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800710e:	e02a      	b.n	8007166 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	429a      	cmp	r2, r3
 8007124:	d902      	bls.n	800712c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3303      	adds	r3, #3
 8007130:	089b      	lsrs	r3, r3, #2
 8007132:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68d9      	ldr	r1, [r3, #12]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4603      	mov	r3, r0
 8007148:	6978      	ldr	r0, [r7, #20]
 800714a:	f008 fb0d 	bl	800f768 <USB_WritePacket>

    ep->xfer_buff  += len;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	441a      	add	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	695a      	ldr	r2, [r3, #20]
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	441a      	add	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	429a      	cmp	r2, r3
 800717a:	d809      	bhi.n	8007190 <PCD_WriteEmptyTxFifo+0xde>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007184:	429a      	cmp	r2, r3
 8007186:	d203      	bcs.n	8007190 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1bf      	bne.n	8007110 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	429a      	cmp	r2, r3
 800719a:	d811      	bhi.n	80071c0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	2201      	movs	r2, #1
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	6939      	ldr	r1, [r7, #16]
 80071b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071bc:	4013      	ands	r3, r2
 80071be:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	333c      	adds	r3, #60	@ 0x3c
 80071e4:	3304      	adds	r3, #4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	799b      	ldrb	r3, [r3, #6]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d17b      	bne.n	80072fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	4a61      	ldr	r2, [pc, #388]	@ (8007394 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	f240 80b9 	bls.w	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80b3 	beq.w	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722e:	461a      	mov	r2, r3
 8007230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007234:	6093      	str	r3, [r2, #8]
 8007236:	e0a7      	b.n	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724e:	461a      	mov	r2, r3
 8007250:	2320      	movs	r3, #32
 8007252:	6093      	str	r3, [r2, #8]
 8007254:	e098      	b.n	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 8093 	bne.w	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4a4b      	ldr	r2, [pc, #300]	@ (8007394 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d90f      	bls.n	800728a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007280:	461a      	mov	r2, r3
 8007282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007286:	6093      	str	r3, [r2, #8]
 8007288:	e07e      	b.n	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	4413      	add	r3, r2
 800729c:	3304      	adds	r3, #4
 800729e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a1a      	ldr	r2, [r3, #32]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	0159      	lsls	r1, r3, #5
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	440b      	add	r3, r1
 80072ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d114      	bne.n	80072ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072d4:	461a      	mov	r2, r3
 80072d6:	2101      	movs	r1, #1
 80072d8:	f008 fcde 	bl	800fc98 <USB_EP0_OutStart>
 80072dc:	e006      	b.n	80072ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	441a      	add	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f010 fbd0 	bl	8017a98 <HAL_PCD_DataOutStageCallback>
 80072f8:	e046      	b.n	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	4a26      	ldr	r2, [pc, #152]	@ (8007398 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d124      	bne.n	800734c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007318:	461a      	mov	r2, r3
 800731a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800731e:	6093      	str	r3, [r2, #8]
 8007320:	e032      	b.n	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007338:	461a      	mov	r2, r3
 800733a:	2320      	movs	r3, #32
 800733c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f010 fba7 	bl	8017a98 <HAL_PCD_DataOutStageCallback>
 800734a:	e01d      	b.n	8007388 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d114      	bne.n	800737c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	4613      	mov	r3, r2
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d108      	bne.n	800737c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007374:	461a      	mov	r2, r3
 8007376:	2100      	movs	r1, #0
 8007378:	f008 fc8e 	bl	800fc98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f010 fb88 	bl	8017a98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	4f54300a 	.word	0x4f54300a
 8007398:	4f54310a 	.word	0x4f54310a

0800739c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	333c      	adds	r3, #60	@ 0x3c
 80073b4:	3304      	adds	r3, #4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a15      	ldr	r2, [pc, #84]	@ (8007424 <PCD_EP_OutSetupPacket_int+0x88>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d90e      	bls.n	80073f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e8:	461a      	mov	r2, r3
 80073ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f010 fb3f 	bl	8017a74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007424 <PCD_EP_OutSetupPacket_int+0x88>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d90c      	bls.n	8007418 <PCD_EP_OutSetupPacket_int+0x7c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	799b      	ldrb	r3, [r3, #6]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d108      	bne.n	8007418 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007410:	461a      	mov	r2, r3
 8007412:	2101      	movs	r1, #1
 8007414:	f008 fc40 	bl	800fc98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	4f54300a 	.word	0x4f54300a

08007428 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
 8007434:	4613      	mov	r3, r2
 8007436:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d107      	bne.n	8007456 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007446:	883b      	ldrh	r3, [r7, #0]
 8007448:	0419      	lsls	r1, r3, #16
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	430a      	orrs	r2, r1
 8007452:	629a      	str	r2, [r3, #40]	@ 0x28
 8007454:	e028      	b.n	80074a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4413      	add	r3, r2
 8007462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
 8007468:	e00d      	b.n	8007486 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	3340      	adds	r3, #64	@ 0x40
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	4413      	add	r3, r2
 800747e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	3301      	adds	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	3b01      	subs	r3, #1
 800748c:	429a      	cmp	r2, r3
 800748e:	d3ec      	bcc.n	800746a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007490:	883b      	ldrh	r3, [r7, #0]
 8007492:	0418      	lsls	r0, r3, #16
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6819      	ldr	r1, [r3, #0]
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	3b01      	subs	r3, #1
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4302      	orrs	r2, r0
 80074a0:	3340      	adds	r3, #64	@ 0x40
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	887a      	ldrh	r2, [r7, #2]
 80074c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007506:	4b05      	ldr	r3, [pc, #20]	@ (800751c <HAL_PCDEx_ActivateLPM+0x44>)
 8007508:	4313      	orrs	r3, r2
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	10000003 	.word	0x10000003

08007520 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007540:	4b19      	ldr	r3, [pc, #100]	@ (80075a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d00a      	beq.n	8007562 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800754c:	4b16      	ldr	r3, [pc, #88]	@ (80075a8 <HAL_PWREx_ConfigSupply+0x70>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d001      	beq.n	800755e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e01f      	b.n	800759e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	e01d      	b.n	800759e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007562:	4b11      	ldr	r3, [pc, #68]	@ (80075a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f023 0207 	bic.w	r2, r3, #7
 800756a:	490f      	ldr	r1, [pc, #60]	@ (80075a8 <HAL_PWREx_ConfigSupply+0x70>)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4313      	orrs	r3, r2
 8007570:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007572:	f7fb fc79 	bl	8002e68 <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007578:	e009      	b.n	800758e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800757a:	f7fb fc75 	bl	8002e68 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007588:	d901      	bls.n	800758e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e007      	b.n	800759e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800758e:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800759a:	d1ee      	bne.n	800757a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	58024800 	.word	0x58024800

080075ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80075b0:	4b05      	ldr	r3, [pc, #20]	@ (80075c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	4a04      	ldr	r2, [pc, #16]	@ (80075c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80075b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075ba:	60d3      	str	r3, [r2, #12]
}
 80075bc:	bf00      	nop
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	58024800 	.word	0x58024800

080075cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08c      	sub	sp, #48	@ 0x30
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f000 bc48 	b.w	8007e70 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8088 	beq.w	80076fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ee:	4b99      	ldr	r3, [pc, #612]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075f8:	4b96      	ldr	r3, [pc, #600]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007600:	2b10      	cmp	r3, #16
 8007602:	d007      	beq.n	8007614 <HAL_RCC_OscConfig+0x48>
 8007604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007606:	2b18      	cmp	r3, #24
 8007608:	d111      	bne.n	800762e <HAL_RCC_OscConfig+0x62>
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	f003 0303 	and.w	r3, r3, #3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d10c      	bne.n	800762e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007614:	4b8f      	ldr	r3, [pc, #572]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d06d      	beq.n	80076fc <HAL_RCC_OscConfig+0x130>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d169      	bne.n	80076fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f000 bc21 	b.w	8007e70 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007636:	d106      	bne.n	8007646 <HAL_RCC_OscConfig+0x7a>
 8007638:	4b86      	ldr	r3, [pc, #536]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a85      	ldr	r2, [pc, #532]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800763e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e02e      	b.n	80076a4 <HAL_RCC_OscConfig+0xd8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10c      	bne.n	8007668 <HAL_RCC_OscConfig+0x9c>
 800764e:	4b81      	ldr	r3, [pc, #516]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a80      	ldr	r2, [pc, #512]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	4b7e      	ldr	r3, [pc, #504]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a7d      	ldr	r2, [pc, #500]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007660:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	e01d      	b.n	80076a4 <HAL_RCC_OscConfig+0xd8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007670:	d10c      	bne.n	800768c <HAL_RCC_OscConfig+0xc0>
 8007672:	4b78      	ldr	r3, [pc, #480]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a77      	ldr	r2, [pc, #476]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	4b75      	ldr	r3, [pc, #468]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a74      	ldr	r2, [pc, #464]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	e00b      	b.n	80076a4 <HAL_RCC_OscConfig+0xd8>
 800768c:	4b71      	ldr	r3, [pc, #452]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a70      	ldr	r2, [pc, #448]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	4b6e      	ldr	r3, [pc, #440]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a6d      	ldr	r2, [pc, #436]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800769e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d013      	beq.n	80076d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ac:	f7fb fbdc 	bl	8002e68 <HAL_GetTick>
 80076b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076b4:	f7fb fbd8 	bl	8002e68 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b64      	cmp	r3, #100	@ 0x64
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e3d4      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076c6:	4b63      	ldr	r3, [pc, #396]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0f0      	beq.n	80076b4 <HAL_RCC_OscConfig+0xe8>
 80076d2:	e014      	b.n	80076fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d4:	f7fb fbc8 	bl	8002e68 <HAL_GetTick>
 80076d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076dc:	f7fb fbc4 	bl	8002e68 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b64      	cmp	r3, #100	@ 0x64
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e3c0      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076ee:	4b59      	ldr	r3, [pc, #356]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f0      	bne.n	80076dc <HAL_RCC_OscConfig+0x110>
 80076fa:	e000      	b.n	80076fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 80ca 	beq.w	80078a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800770c:	4b51      	ldr	r3, [pc, #324]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007714:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007716:	4b4f      	ldr	r3, [pc, #316]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <HAL_RCC_OscConfig+0x166>
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	2b18      	cmp	r3, #24
 8007726:	d156      	bne.n	80077d6 <HAL_RCC_OscConfig+0x20a>
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d151      	bne.n	80077d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007732:	4b48      	ldr	r3, [pc, #288]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <HAL_RCC_OscConfig+0x17e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e392      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800774a:	4b42      	ldr	r3, [pc, #264]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f023 0219 	bic.w	r2, r3, #25
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	493f      	ldr	r1, [pc, #252]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007758:	4313      	orrs	r3, r2
 800775a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fb fb84 	bl	8002e68 <HAL_GetTick>
 8007760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007764:	f7fb fb80 	bl	8002e68 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e37c      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007776:	4b37      	ldr	r3, [pc, #220]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f0      	beq.n	8007764 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007782:	f7fb fba1 	bl	8002ec8 <HAL_GetREVID>
 8007786:	4603      	mov	r3, r0
 8007788:	f241 0203 	movw	r2, #4099	@ 0x1003
 800778c:	4293      	cmp	r3, r2
 800778e:	d817      	bhi.n	80077c0 <HAL_RCC_OscConfig+0x1f4>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b40      	cmp	r3, #64	@ 0x40
 8007796:	d108      	bne.n	80077aa <HAL_RCC_OscConfig+0x1de>
 8007798:	4b2e      	ldr	r3, [pc, #184]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80077a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80077a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077a8:	e07a      	b.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077aa:	4b2a      	ldr	r3, [pc, #168]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	031b      	lsls	r3, r3, #12
 80077b8:	4926      	ldr	r1, [pc, #152]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077be:	e06f      	b.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c0:	4b24      	ldr	r3, [pc, #144]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	061b      	lsls	r3, r3, #24
 80077ce:	4921      	ldr	r1, [pc, #132]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077d4:	e064      	b.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d047      	beq.n	800786e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077de:	4b1d      	ldr	r3, [pc, #116]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f023 0219 	bic.w	r2, r3, #25
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	491a      	ldr	r1, [pc, #104]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f0:	f7fb fb3a 	bl	8002e68 <HAL_GetTick>
 80077f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f6:	e008      	b.n	800780a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f8:	f7fb fb36 	bl	8002e68 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d901      	bls.n	800780a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e332      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800780a:	4b12      	ldr	r3, [pc, #72]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0f0      	beq.n	80077f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007816:	f7fb fb57 	bl	8002ec8 <HAL_GetREVID>
 800781a:	4603      	mov	r3, r0
 800781c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007820:	4293      	cmp	r3, r2
 8007822:	d819      	bhi.n	8007858 <HAL_RCC_OscConfig+0x28c>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b40      	cmp	r3, #64	@ 0x40
 800782a:	d108      	bne.n	800783e <HAL_RCC_OscConfig+0x272>
 800782c:	4b09      	ldr	r3, [pc, #36]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007834:	4a07      	ldr	r2, [pc, #28]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800783a:	6053      	str	r3, [r2, #4]
 800783c:	e030      	b.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
 800783e:	4b05      	ldr	r3, [pc, #20]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	031b      	lsls	r3, r3, #12
 800784c:	4901      	ldr	r1, [pc, #4]	@ (8007854 <HAL_RCC_OscConfig+0x288>)
 800784e:	4313      	orrs	r3, r2
 8007850:	604b      	str	r3, [r1, #4]
 8007852:	e025      	b.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
 8007854:	58024400 	.word	0x58024400
 8007858:	4b9a      	ldr	r3, [pc, #616]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	061b      	lsls	r3, r3, #24
 8007866:	4997      	ldr	r1, [pc, #604]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007868:	4313      	orrs	r3, r2
 800786a:	604b      	str	r3, [r1, #4]
 800786c:	e018      	b.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800786e:	4b95      	ldr	r3, [pc, #596]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a94      	ldr	r2, [pc, #592]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007874:	f023 0301 	bic.w	r3, r3, #1
 8007878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787a:	f7fb faf5 	bl	8002e68 <HAL_GetTick>
 800787e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007882:	f7fb faf1 	bl	8002e68 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e2ed      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007894:	4b8b      	ldr	r3, [pc, #556]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f0      	bne.n	8007882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80a9 	beq.w	8007a00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078ae:	4b85      	ldr	r3, [pc, #532]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078b8:	4b82      	ldr	r3, [pc, #520]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d007      	beq.n	80078d4 <HAL_RCC_OscConfig+0x308>
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b18      	cmp	r3, #24
 80078c8:	d13a      	bne.n	8007940 <HAL_RCC_OscConfig+0x374>
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d135      	bne.n	8007940 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078d4:	4b7b      	ldr	r3, [pc, #492]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <HAL_RCC_OscConfig+0x320>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	2b80      	cmp	r3, #128	@ 0x80
 80078e6:	d001      	beq.n	80078ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e2c1      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078ec:	f7fb faec 	bl	8002ec8 <HAL_GetREVID>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d817      	bhi.n	800792a <HAL_RCC_OscConfig+0x35e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	2b20      	cmp	r3, #32
 8007900:	d108      	bne.n	8007914 <HAL_RCC_OscConfig+0x348>
 8007902:	4b70      	ldr	r3, [pc, #448]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800790a:	4a6e      	ldr	r2, [pc, #440]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 800790c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007910:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007912:	e075      	b.n	8007a00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007914:	4b6b      	ldr	r3, [pc, #428]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	069b      	lsls	r3, r3, #26
 8007922:	4968      	ldr	r1, [pc, #416]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007924:	4313      	orrs	r3, r2
 8007926:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007928:	e06a      	b.n	8007a00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800792a:	4b66      	ldr	r3, [pc, #408]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	061b      	lsls	r3, r3, #24
 8007938:	4962      	ldr	r1, [pc, #392]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 800793a:	4313      	orrs	r3, r2
 800793c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800793e:	e05f      	b.n	8007a00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d042      	beq.n	80079ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007948:	4b5e      	ldr	r3, [pc, #376]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 800794e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fb fa88 	bl	8002e68 <HAL_GetTick>
 8007958:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800795c:	f7fb fa84 	bl	8002e68 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e280      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800796e:	4b55      	ldr	r3, [pc, #340]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f0      	beq.n	800795c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800797a:	f7fb faa5 	bl	8002ec8 <HAL_GetREVID>
 800797e:	4603      	mov	r3, r0
 8007980:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007984:	4293      	cmp	r3, r2
 8007986:	d817      	bhi.n	80079b8 <HAL_RCC_OscConfig+0x3ec>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	2b20      	cmp	r3, #32
 800798e:	d108      	bne.n	80079a2 <HAL_RCC_OscConfig+0x3d6>
 8007990:	4b4c      	ldr	r3, [pc, #304]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007998:	4a4a      	ldr	r2, [pc, #296]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 800799a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e02e      	b.n	8007a00 <HAL_RCC_OscConfig+0x434>
 80079a2:	4b48      	ldr	r3, [pc, #288]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	069b      	lsls	r3, r3, #26
 80079b0:	4944      	ldr	r1, [pc, #272]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	604b      	str	r3, [r1, #4]
 80079b6:	e023      	b.n	8007a00 <HAL_RCC_OscConfig+0x434>
 80079b8:	4b42      	ldr	r3, [pc, #264]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	061b      	lsls	r3, r3, #24
 80079c6:	493f      	ldr	r1, [pc, #252]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60cb      	str	r3, [r1, #12]
 80079cc:	e018      	b.n	8007a00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80079ce:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a3c      	ldr	r2, [pc, #240]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80079d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079da:	f7fb fa45 	bl	8002e68 <HAL_GetTick>
 80079de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079e0:	e008      	b.n	80079f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80079e2:	f7fb fa41 	bl	8002e68 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e23d      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079f4:	4b33      	ldr	r3, [pc, #204]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f0      	bne.n	80079e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d036      	beq.n	8007a7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d019      	beq.n	8007a48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a14:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a18:	4a2a      	ldr	r2, [pc, #168]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a20:	f7fb fa22 	bl	8002e68 <HAL_GetTick>
 8007a24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a28:	f7fb fa1e 	bl	8002e68 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e21a      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a3a:	4b22      	ldr	r3, [pc, #136]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f0      	beq.n	8007a28 <HAL_RCC_OscConfig+0x45c>
 8007a46:	e018      	b.n	8007a7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a48:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a54:	f7fb fa08 	bl	8002e68 <HAL_GetTick>
 8007a58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a5c:	f7fb fa04 	bl	8002e68 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e200      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a6e:	4b15      	ldr	r3, [pc, #84]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f0      	bne.n	8007a5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d039      	beq.n	8007afa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01c      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a0c      	ldr	r2, [pc, #48]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007a94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a9a:	f7fb f9e5 	bl	8002e68 <HAL_GetTick>
 8007a9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007aa2:	f7fb f9e1 	bl	8002e68 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e1dd      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ab4:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <HAL_RCC_OscConfig+0x4f8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f0      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x4d6>
 8007ac0:	e01b      	b.n	8007afa <HAL_RCC_OscConfig+0x52e>
 8007ac2:	bf00      	nop
 8007ac4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ac8:	4b9b      	ldr	r3, [pc, #620]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a9a      	ldr	r2, [pc, #616]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007ace:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ad2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ad4:	f7fb f9c8 	bl	8002e68 <HAL_GetTick>
 8007ad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007adc:	f7fb f9c4 	bl	8002e68 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e1c0      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007aee:	4b92      	ldr	r3, [pc, #584]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f0      	bne.n	8007adc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8081 	beq.w	8007c0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b08:	4b8c      	ldr	r3, [pc, #560]	@ (8007d3c <HAL_RCC_OscConfig+0x770>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a8b      	ldr	r2, [pc, #556]	@ (8007d3c <HAL_RCC_OscConfig+0x770>)
 8007b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b14:	f7fb f9a8 	bl	8002e68 <HAL_GetTick>
 8007b18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b1a:	e008      	b.n	8007b2e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b1c:	f7fb f9a4 	bl	8002e68 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b64      	cmp	r3, #100	@ 0x64
 8007b28:	d901      	bls.n	8007b2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e1a0      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b2e:	4b83      	ldr	r3, [pc, #524]	@ (8007d3c <HAL_RCC_OscConfig+0x770>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0f0      	beq.n	8007b1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d106      	bne.n	8007b50 <HAL_RCC_OscConfig+0x584>
 8007b42:	4b7d      	ldr	r3, [pc, #500]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b46:	4a7c      	ldr	r2, [pc, #496]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b48:	f043 0301 	orr.w	r3, r3, #1
 8007b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b4e:	e02d      	b.n	8007bac <HAL_RCC_OscConfig+0x5e0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10c      	bne.n	8007b72 <HAL_RCC_OscConfig+0x5a6>
 8007b58:	4b77      	ldr	r3, [pc, #476]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5c:	4a76      	ldr	r2, [pc, #472]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b64:	4b74      	ldr	r3, [pc, #464]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b68:	4a73      	ldr	r2, [pc, #460]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b6a:	f023 0304 	bic.w	r3, r3, #4
 8007b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b70:	e01c      	b.n	8007bac <HAL_RCC_OscConfig+0x5e0>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	d10c      	bne.n	8007b94 <HAL_RCC_OscConfig+0x5c8>
 8007b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	4a6e      	ldr	r2, [pc, #440]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b80:	f043 0304 	orr.w	r3, r3, #4
 8007b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b86:	4b6c      	ldr	r3, [pc, #432]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	4a6b      	ldr	r2, [pc, #428]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b92:	e00b      	b.n	8007bac <HAL_RCC_OscConfig+0x5e0>
 8007b94:	4b68      	ldr	r3, [pc, #416]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b98:	4a67      	ldr	r2, [pc, #412]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007b9a:	f023 0301 	bic.w	r3, r3, #1
 8007b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ba0:	4b65      	ldr	r3, [pc, #404]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba4:	4a64      	ldr	r2, [pc, #400]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007ba6:	f023 0304 	bic.w	r3, r3, #4
 8007baa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d015      	beq.n	8007be0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb4:	f7fb f958 	bl	8002e68 <HAL_GetTick>
 8007bb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bba:	e00a      	b.n	8007bd2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bbc:	f7fb f954 	bl	8002e68 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e14e      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bd2:	4b59      	ldr	r3, [pc, #356]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0ee      	beq.n	8007bbc <HAL_RCC_OscConfig+0x5f0>
 8007bde:	e014      	b.n	8007c0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be0:	f7fb f942 	bl	8002e68 <HAL_GetTick>
 8007be4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007be6:	e00a      	b.n	8007bfe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007be8:	f7fb f93e 	bl	8002e68 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e138      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1ee      	bne.n	8007be8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 812d 	beq.w	8007e6e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007c14:	4b48      	ldr	r3, [pc, #288]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c1c:	2b18      	cmp	r3, #24
 8007c1e:	f000 80bd 	beq.w	8007d9c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	f040 809e 	bne.w	8007d68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c2c:	4b42      	ldr	r3, [pc, #264]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a41      	ldr	r2, [pc, #260]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7fb f916 	bl	8002e68 <HAL_GetTick>
 8007c3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c40:	f7fb f912 	bl	8002e68 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e10e      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c52:	4b39      	ldr	r3, [pc, #228]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f0      	bne.n	8007c40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c5e:	4b36      	ldr	r3, [pc, #216]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c62:	4b37      	ldr	r3, [pc, #220]	@ (8007d40 <HAL_RCC_OscConfig+0x774>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007c6e:	0112      	lsls	r2, r2, #4
 8007c70:	430a      	orrs	r2, r1
 8007c72:	4931      	ldr	r1, [pc, #196]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c86:	3b01      	subs	r3, #1
 8007c88:	025b      	lsls	r3, r3, #9
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c92:	3b01      	subs	r3, #1
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	061b      	lsls	r3, r3, #24
 8007ca4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ca8:	4923      	ldr	r1, [pc, #140]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007cae:	4b22      	ldr	r3, [pc, #136]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	4a21      	ldr	r2, [pc, #132]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cb4:	f023 0301 	bic.w	r3, r3, #1
 8007cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007cba:	4b1f      	ldr	r3, [pc, #124]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cbe:	4b21      	ldr	r3, [pc, #132]	@ (8007d44 <HAL_RCC_OscConfig+0x778>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007cc6:	00d2      	lsls	r2, r2, #3
 8007cc8:	491b      	ldr	r1, [pc, #108]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007cce:	4b1a      	ldr	r3, [pc, #104]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd2:	f023 020c 	bic.w	r2, r3, #12
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	4917      	ldr	r1, [pc, #92]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ce0:	4b15      	ldr	r3, [pc, #84]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	f023 0202 	bic.w	r2, r3, #2
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cec:	4912      	ldr	r1, [pc, #72]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007cf2:	4b11      	ldr	r3, [pc, #68]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	4a10      	ldr	r2, [pc, #64]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d02:	4a0d      	ldr	r2, [pc, #52]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007d16:	4b08      	ldr	r3, [pc, #32]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	4a07      	ldr	r2, [pc, #28]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d22:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a04      	ldr	r2, [pc, #16]	@ (8007d38 <HAL_RCC_OscConfig+0x76c>)
 8007d28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2e:	f7fb f89b 	bl	8002e68 <HAL_GetTick>
 8007d32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d34:	e011      	b.n	8007d5a <HAL_RCC_OscConfig+0x78e>
 8007d36:	bf00      	nop
 8007d38:	58024400 	.word	0x58024400
 8007d3c:	58024800 	.word	0x58024800
 8007d40:	fffffc0c 	.word	0xfffffc0c
 8007d44:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d48:	f7fb f88e 	bl	8002e68 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e08a      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d5a:	4b47      	ldr	r3, [pc, #284]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCC_OscConfig+0x77c>
 8007d66:	e082      	b.n	8007e6e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d68:	4b43      	ldr	r3, [pc, #268]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a42      	ldr	r2, [pc, #264]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d74:	f7fb f878 	bl	8002e68 <HAL_GetTick>
 8007d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d7c:	f7fb f874 	bl	8002e68 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e070      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x7b0>
 8007d9a:	e068      	b.n	8007e6e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d9c:	4b36      	ldr	r3, [pc, #216]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007da2:	4b35      	ldr	r3, [pc, #212]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d031      	beq.n	8007e14 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f003 0203 	and.w	r2, r3, #3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d12a      	bne.n	8007e14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	091b      	lsrs	r3, r3, #4
 8007dc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d122      	bne.n	8007e14 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d11a      	bne.n	8007e14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	0a5b      	lsrs	r3, r3, #9
 8007de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d111      	bne.n	8007e14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	0c1b      	lsrs	r3, r3, #16
 8007df4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d108      	bne.n	8007e14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	0e1b      	lsrs	r3, r3, #24
 8007e06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d001      	beq.n	8007e18 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e02b      	b.n	8007e70 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007e18:	4b17      	ldr	r3, [pc, #92]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e1c:	08db      	lsrs	r3, r3, #3
 8007e1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e22:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d01f      	beq.n	8007e6e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007e2e:	4b12      	ldr	r3, [pc, #72]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	4a11      	ldr	r2, [pc, #68]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e3a:	f7fb f815 	bl	8002e68 <HAL_GetTick>
 8007e3e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007e40:	bf00      	nop
 8007e42:	f7fb f811 	bl	8002e68 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d0f9      	beq.n	8007e42 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e52:	4b0a      	ldr	r3, [pc, #40]	@ (8007e7c <HAL_RCC_OscConfig+0x8b0>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e5a:	00d2      	lsls	r2, r2, #3
 8007e5c:	4906      	ldr	r1, [pc, #24]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007e62:	4b05      	ldr	r3, [pc, #20]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e66:	4a04      	ldr	r2, [pc, #16]	@ (8007e78 <HAL_RCC_OscConfig+0x8ac>)
 8007e68:	f043 0301 	orr.w	r3, r3, #1
 8007e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3730      	adds	r7, #48	@ 0x30
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	ffff0007 	.word	0xffff0007

08007e80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e19c      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e94:	4b8a      	ldr	r3, [pc, #552]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d910      	bls.n	8007ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b87      	ldr	r3, [pc, #540]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f023 020f 	bic.w	r2, r3, #15
 8007eaa:	4985      	ldr	r1, [pc, #532]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb2:	4b83      	ldr	r3, [pc, #524]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d001      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e184      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d010      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d908      	bls.n	8007ef2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ee0:	4b78      	ldr	r3, [pc, #480]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	4975      	ldr	r1, [pc, #468]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0308 	and.w	r3, r3, #8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d010      	beq.n	8007f20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695a      	ldr	r2, [r3, #20]
 8007f02:	4b70      	ldr	r3, [pc, #448]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d908      	bls.n	8007f20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	496a      	ldr	r1, [pc, #424]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d010      	beq.n	8007f4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699a      	ldr	r2, [r3, #24]
 8007f30:	4b64      	ldr	r3, [pc, #400]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d908      	bls.n	8007f4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f3c:	4b61      	ldr	r3, [pc, #388]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	495e      	ldr	r1, [pc, #376]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d010      	beq.n	8007f7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69da      	ldr	r2, [r3, #28]
 8007f5e:	4b59      	ldr	r3, [pc, #356]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d908      	bls.n	8007f7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f6a:	4b56      	ldr	r3, [pc, #344]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	4953      	ldr	r1, [pc, #332]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d010      	beq.n	8007faa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d908      	bls.n	8007faa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f98:	4b4a      	ldr	r3, [pc, #296]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f023 020f 	bic.w	r2, r3, #15
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	4947      	ldr	r1, [pc, #284]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d055      	beq.n	8008062 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007fb6:	4b43      	ldr	r3, [pc, #268]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	4940      	ldr	r1, [pc, #256]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d107      	bne.n	8007fe0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d121      	bne.n	8008020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0f6      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fe8:	4b36      	ldr	r3, [pc, #216]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d115      	bne.n	8008020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e0ea      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d107      	bne.n	8008010 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008000:	4b30      	ldr	r3, [pc, #192]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008008:	2b00      	cmp	r3, #0
 800800a:	d109      	bne.n	8008020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e0de      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008010:	4b2c      	ldr	r3, [pc, #176]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e0d6      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008020:	4b28      	ldr	r3, [pc, #160]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	f023 0207 	bic.w	r2, r3, #7
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	4925      	ldr	r1, [pc, #148]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 800802e:	4313      	orrs	r3, r2
 8008030:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008032:	f7fa ff19 	bl	8002e68 <HAL_GetTick>
 8008036:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008038:	e00a      	b.n	8008050 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800803a:	f7fa ff15 	bl	8002e68 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008048:	4293      	cmp	r3, r2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e0be      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008050:	4b1c      	ldr	r3, [pc, #112]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	429a      	cmp	r2, r3
 8008060:	d1eb      	bne.n	800803a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d010      	beq.n	8008090 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	4b14      	ldr	r3, [pc, #80]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	f003 030f 	and.w	r3, r3, #15
 800807a:	429a      	cmp	r2, r3
 800807c:	d208      	bcs.n	8008090 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800807e:	4b11      	ldr	r3, [pc, #68]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	f023 020f 	bic.w	r2, r3, #15
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	490e      	ldr	r1, [pc, #56]	@ (80080c4 <HAL_RCC_ClockConfig+0x244>)
 800808c:	4313      	orrs	r3, r2
 800808e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008090:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d214      	bcs.n	80080c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809e:	4b08      	ldr	r3, [pc, #32]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f023 020f 	bic.w	r2, r3, #15
 80080a6:	4906      	ldr	r1, [pc, #24]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ae:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <HAL_RCC_ClockConfig+0x240>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d005      	beq.n	80080c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e086      	b.n	80081ce <HAL_RCC_ClockConfig+0x34e>
 80080c0:	52002000 	.word	0x52002000
 80080c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d010      	beq.n	80080f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691a      	ldr	r2, [r3, #16]
 80080d8:	4b3f      	ldr	r3, [pc, #252]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d208      	bcs.n	80080f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080e4:	4b3c      	ldr	r3, [pc, #240]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	4939      	ldr	r1, [pc, #228]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d010      	beq.n	8008124 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695a      	ldr	r2, [r3, #20]
 8008106:	4b34      	ldr	r3, [pc, #208]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800810e:	429a      	cmp	r2, r3
 8008110:	d208      	bcs.n	8008124 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008112:	4b31      	ldr	r3, [pc, #196]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	492e      	ldr	r1, [pc, #184]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008120:	4313      	orrs	r3, r2
 8008122:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b00      	cmp	r3, #0
 800812e:	d010      	beq.n	8008152 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699a      	ldr	r2, [r3, #24]
 8008134:	4b28      	ldr	r3, [pc, #160]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800813c:	429a      	cmp	r2, r3
 800813e:	d208      	bcs.n	8008152 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008140:	4b25      	ldr	r3, [pc, #148]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	4922      	ldr	r1, [pc, #136]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 800814e:	4313      	orrs	r3, r2
 8008150:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d010      	beq.n	8008180 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69da      	ldr	r2, [r3, #28]
 8008162:	4b1d      	ldr	r3, [pc, #116]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800816a:	429a      	cmp	r2, r3
 800816c:	d208      	bcs.n	8008180 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800816e:	4b1a      	ldr	r3, [pc, #104]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	4917      	ldr	r1, [pc, #92]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 800817c:	4313      	orrs	r3, r2
 800817e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008180:	f000 f834 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 8008184:	4602      	mov	r2, r0
 8008186:	4b14      	ldr	r3, [pc, #80]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	0a1b      	lsrs	r3, r3, #8
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	4912      	ldr	r1, [pc, #72]	@ (80081dc <HAL_RCC_ClockConfig+0x35c>)
 8008192:	5ccb      	ldrb	r3, [r1, r3]
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	fa22 f303 	lsr.w	r3, r2, r3
 800819c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800819e:	4b0e      	ldr	r3, [pc, #56]	@ (80081d8 <HAL_RCC_ClockConfig+0x358>)
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	4a0d      	ldr	r2, [pc, #52]	@ (80081dc <HAL_RCC_ClockConfig+0x35c>)
 80081a8:	5cd3      	ldrb	r3, [r2, r3]
 80081aa:	f003 031f 	and.w	r3, r3, #31
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	fa22 f303 	lsr.w	r3, r2, r3
 80081b4:	4a0a      	ldr	r2, [pc, #40]	@ (80081e0 <HAL_RCC_ClockConfig+0x360>)
 80081b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081b8:	4a0a      	ldr	r2, [pc, #40]	@ (80081e4 <HAL_RCC_ClockConfig+0x364>)
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80081be:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <HAL_RCC_ClockConfig+0x368>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f9 fb98 	bl	80018f8 <HAL_InitTick>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	58024400 	.word	0x58024400
 80081dc:	0801834c 	.word	0x0801834c
 80081e0:	24000004 	.word	0x24000004
 80081e4:	24000000 	.word	0x24000000
 80081e8:	2400000c 	.word	0x2400000c

080081ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b089      	sub	sp, #36	@ 0x24
 80081f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081f2:	4bb3      	ldr	r3, [pc, #716]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081fa:	2b18      	cmp	r3, #24
 80081fc:	f200 8155 	bhi.w	80084aa <HAL_RCC_GetSysClockFreq+0x2be>
 8008200:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	0800826d 	.word	0x0800826d
 800820c:	080084ab 	.word	0x080084ab
 8008210:	080084ab 	.word	0x080084ab
 8008214:	080084ab 	.word	0x080084ab
 8008218:	080084ab 	.word	0x080084ab
 800821c:	080084ab 	.word	0x080084ab
 8008220:	080084ab 	.word	0x080084ab
 8008224:	080084ab 	.word	0x080084ab
 8008228:	08008293 	.word	0x08008293
 800822c:	080084ab 	.word	0x080084ab
 8008230:	080084ab 	.word	0x080084ab
 8008234:	080084ab 	.word	0x080084ab
 8008238:	080084ab 	.word	0x080084ab
 800823c:	080084ab 	.word	0x080084ab
 8008240:	080084ab 	.word	0x080084ab
 8008244:	080084ab 	.word	0x080084ab
 8008248:	08008299 	.word	0x08008299
 800824c:	080084ab 	.word	0x080084ab
 8008250:	080084ab 	.word	0x080084ab
 8008254:	080084ab 	.word	0x080084ab
 8008258:	080084ab 	.word	0x080084ab
 800825c:	080084ab 	.word	0x080084ab
 8008260:	080084ab 	.word	0x080084ab
 8008264:	080084ab 	.word	0x080084ab
 8008268:	0800829f 	.word	0x0800829f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800826c:	4b94      	ldr	r3, [pc, #592]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008278:	4b91      	ldr	r3, [pc, #580]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	08db      	lsrs	r3, r3, #3
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	4a90      	ldr	r2, [pc, #576]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008284:	fa22 f303 	lsr.w	r3, r2, r3
 8008288:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800828a:	e111      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800828c:	4b8d      	ldr	r3, [pc, #564]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800828e:	61bb      	str	r3, [r7, #24]
      break;
 8008290:	e10e      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008292:	4b8d      	ldr	r3, [pc, #564]	@ (80084c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008294:	61bb      	str	r3, [r7, #24]
      break;
 8008296:	e10b      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008298:	4b8c      	ldr	r3, [pc, #560]	@ (80084cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800829a:	61bb      	str	r3, [r7, #24]
      break;
 800829c:	e108      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800829e:	4b88      	ldr	r3, [pc, #544]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80082a8:	4b85      	ldr	r3, [pc, #532]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ac:	091b      	lsrs	r3, r3, #4
 80082ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80082b4:	4b82      	ldr	r3, [pc, #520]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80082be:	4b80      	ldr	r3, [pc, #512]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c2:	08db      	lsrs	r3, r3, #3
 80082c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	fb02 f303 	mul.w	r3, r2, r3
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80e1 	beq.w	80084a4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	f000 8083 	beq.w	80083f0 <HAL_RCC_GetSysClockFreq+0x204>
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f200 80a1 	bhi.w	8008434 <HAL_RCC_GetSysClockFreq+0x248>
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_RCC_GetSysClockFreq+0x114>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d056      	beq.n	80083ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80082fe:	e099      	b.n	8008434 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008300:	4b6f      	ldr	r3, [pc, #444]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d02d      	beq.n	8008368 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800830c:	4b6c      	ldr	r3, [pc, #432]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	08db      	lsrs	r3, r3, #3
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	4a6b      	ldr	r2, [pc, #428]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008318:	fa22 f303 	lsr.w	r3, r2, r3
 800831c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b62      	ldr	r3, [pc, #392]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a02 	vldr	s12, [r7, #8]
 800834a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80084d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008366:	e087      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80084d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837a:	4b51      	ldr	r3, [pc, #324]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800837c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838a:	ed97 6a02 	vldr	s12, [r7, #8]
 800838e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80084d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083aa:	e065      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80084d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083be:	4b40      	ldr	r3, [pc, #256]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80083d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80084d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083ee:	e043      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80084dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80083fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008402:	4b2f      	ldr	r3, [pc, #188]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008412:	ed97 6a02 	vldr	s12, [r7, #8]
 8008416:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80084d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800841a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008432:	e021      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80084d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008446:	4b1e      	ldr	r3, [pc, #120]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	ed97 6a02 	vldr	s12, [r7, #8]
 800845a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80084d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008476:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008478:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847c:	0a5b      	lsrs	r3, r3, #9
 800847e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008482:	3301      	adds	r3, #1
 8008484:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008490:	edd7 6a07 	vldr	s13, [r7, #28]
 8008494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800849c:	ee17 3a90 	vmov	r3, s15
 80084a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80084a2:	e005      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61bb      	str	r3, [r7, #24]
      break;
 80084a8:	e002      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80084aa:	4b07      	ldr	r3, [pc, #28]	@ (80084c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084ac:	61bb      	str	r3, [r7, #24]
      break;
 80084ae:	bf00      	nop
  }

  return sysclockfreq;
 80084b0:	69bb      	ldr	r3, [r7, #24]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3724      	adds	r7, #36	@ 0x24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	58024400 	.word	0x58024400
 80084c4:	03d09000 	.word	0x03d09000
 80084c8:	003d0900 	.word	0x003d0900
 80084cc:	007a1200 	.word	0x007a1200
 80084d0:	46000000 	.word	0x46000000
 80084d4:	4c742400 	.word	0x4c742400
 80084d8:	4a742400 	.word	0x4a742400
 80084dc:	4af42400 	.word	0x4af42400

080084e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80084e6:	f7ff fe81 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 80084ea:	4602      	mov	r2, r0
 80084ec:	4b10      	ldr	r3, [pc, #64]	@ (8008530 <HAL_RCC_GetHCLKFreq+0x50>)
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	490f      	ldr	r1, [pc, #60]	@ (8008534 <HAL_RCC_GetHCLKFreq+0x54>)
 80084f8:	5ccb      	ldrb	r3, [r1, r3]
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008502:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008504:	4b0a      	ldr	r3, [pc, #40]	@ (8008530 <HAL_RCC_GetHCLKFreq+0x50>)
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	4a09      	ldr	r2, [pc, #36]	@ (8008534 <HAL_RCC_GetHCLKFreq+0x54>)
 800850e:	5cd3      	ldrb	r3, [r2, r3]
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	fa22 f303 	lsr.w	r3, r2, r3
 800851a:	4a07      	ldr	r2, [pc, #28]	@ (8008538 <HAL_RCC_GetHCLKFreq+0x58>)
 800851c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800851e:	4a07      	ldr	r2, [pc, #28]	@ (800853c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008524:	4b04      	ldr	r3, [pc, #16]	@ (8008538 <HAL_RCC_GetHCLKFreq+0x58>)
 8008526:	681b      	ldr	r3, [r3, #0]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	58024400 	.word	0x58024400
 8008534:	0801834c 	.word	0x0801834c
 8008538:	24000004 	.word	0x24000004
 800853c:	24000000 	.word	0x24000000

08008540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008544:	f7ff ffcc 	bl	80084e0 <HAL_RCC_GetHCLKFreq>
 8008548:	4602      	mov	r2, r0
 800854a:	4b06      	ldr	r3, [pc, #24]	@ (8008564 <HAL_RCC_GetPCLK1Freq+0x24>)
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	091b      	lsrs	r3, r3, #4
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	4904      	ldr	r1, [pc, #16]	@ (8008568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008556:	5ccb      	ldrb	r3, [r1, r3]
 8008558:	f003 031f 	and.w	r3, r3, #31
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008560:	4618      	mov	r0, r3
 8008562:	bd80      	pop	{r7, pc}
 8008564:	58024400 	.word	0x58024400
 8008568:	0801834c 	.word	0x0801834c

0800856c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008570:	f7ff ffb6 	bl	80084e0 <HAL_RCC_GetHCLKFreq>
 8008574:	4602      	mov	r2, r0
 8008576:	4b06      	ldr	r3, [pc, #24]	@ (8008590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	4904      	ldr	r1, [pc, #16]	@ (8008594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008582:	5ccb      	ldrb	r3, [r1, r3]
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800858c:	4618      	mov	r0, r3
 800858e:	bd80      	pop	{r7, pc}
 8008590:	58024400 	.word	0x58024400
 8008594:	0801834c 	.word	0x0801834c

08008598 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	223f      	movs	r2, #63	@ 0x3f
 80085a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80085a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008614 <HAL_RCC_GetClockConfig+0x7c>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	f003 0207 	and.w	r2, r3, #7
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80085b4:	4b17      	ldr	r3, [pc, #92]	@ (8008614 <HAL_RCC_GetClockConfig+0x7c>)
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80085c0:	4b14      	ldr	r3, [pc, #80]	@ (8008614 <HAL_RCC_GetClockConfig+0x7c>)
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f003 020f 	and.w	r2, r3, #15
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80085cc:	4b11      	ldr	r3, [pc, #68]	@ (8008614 <HAL_RCC_GetClockConfig+0x7c>)
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80085d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008614 <HAL_RCC_GetClockConfig+0x7c>)
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80085e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008614 <HAL_RCC_GetClockConfig+0x7c>)
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80085f0:	4b08      	ldr	r3, [pc, #32]	@ (8008614 <HAL_RCC_GetClockConfig+0x7c>)
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085fc:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <HAL_RCC_GetClockConfig+0x80>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 020f 	and.w	r2, r3, #15
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	601a      	str	r2, [r3, #0]
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	58024400 	.word	0x58024400
 8008618:	52002000 	.word	0x52002000

0800861c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800861c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008620:	b0ca      	sub	sp, #296	@ 0x128
 8008622:	af00      	add	r7, sp, #0
 8008624:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008628:	2300      	movs	r3, #0
 800862a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800862e:	2300      	movs	r3, #0
 8008630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008640:	2500      	movs	r5, #0
 8008642:	ea54 0305 	orrs.w	r3, r4, r5
 8008646:	d049      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800864e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008652:	d02f      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008654:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008658:	d828      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800865a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800865e:	d01a      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008660:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008664:	d822      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800866a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800866e:	d007      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008670:	e01c      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008672:	4bb8      	ldr	r3, [pc, #736]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008676:	4ab7      	ldr	r2, [pc, #732]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800867c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800867e:	e01a      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	3308      	adds	r3, #8
 8008686:	2102      	movs	r1, #2
 8008688:	4618      	mov	r0, r3
 800868a:	f002 fb61 	bl	800ad50 <RCCEx_PLL2_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008694:	e00f      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869a:	3328      	adds	r3, #40	@ 0x28
 800869c:	2102      	movs	r1, #2
 800869e:	4618      	mov	r0, r3
 80086a0:	f002 fc08 	bl	800aeb4 <RCCEx_PLL3_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80086aa:	e004      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086b2:	e000      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80086b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80086be:	4ba5      	ldr	r3, [pc, #660]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086cc:	4aa1      	ldr	r2, [pc, #644]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086ce:	430b      	orrs	r3, r1
 80086d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80086d2:	e003      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80086e8:	f04f 0900 	mov.w	r9, #0
 80086ec:	ea58 0309 	orrs.w	r3, r8, r9
 80086f0:	d047      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d82a      	bhi.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80086fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008719 	.word	0x08008719
 8008708:	08008727 	.word	0x08008727
 800870c:	0800873d 	.word	0x0800873d
 8008710:	0800875b 	.word	0x0800875b
 8008714:	0800875b 	.word	0x0800875b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008718:	4b8e      	ldr	r3, [pc, #568]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800871a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871c:	4a8d      	ldr	r2, [pc, #564]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800871e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008724:	e01a      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872a:	3308      	adds	r3, #8
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f002 fb0e 	bl	800ad50 <RCCEx_PLL2_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800873a:	e00f      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	3328      	adds	r3, #40	@ 0x28
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f002 fbb5 	bl	800aeb4 <RCCEx_PLL3_Config>
 800874a:	4603      	mov	r3, r0
 800874c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008750:	e004      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008758:	e000      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800875a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800875c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008764:	4b7b      	ldr	r3, [pc, #492]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008768:	f023 0107 	bic.w	r1, r3, #7
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008772:	4a78      	ldr	r2, [pc, #480]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008774:	430b      	orrs	r3, r1
 8008776:	6513      	str	r3, [r2, #80]	@ 0x50
 8008778:	e003      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800877e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800878e:	f04f 0b00 	mov.w	fp, #0
 8008792:	ea5a 030b 	orrs.w	r3, sl, fp
 8008796:	d04c      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800879e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a2:	d030      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80087a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a8:	d829      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80087aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80087ac:	d02d      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80087ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80087b0:	d825      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80087b2:	2b80      	cmp	r3, #128	@ 0x80
 80087b4:	d018      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80087b6:	2b80      	cmp	r3, #128	@ 0x80
 80087b8:	d821      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80087be:	2b40      	cmp	r3, #64	@ 0x40
 80087c0:	d007      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80087c2:	e01c      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c4:	4b63      	ldr	r3, [pc, #396]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	4a62      	ldr	r2, [pc, #392]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80087d0:	e01c      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d6:	3308      	adds	r3, #8
 80087d8:	2100      	movs	r1, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 fab8 	bl	800ad50 <RCCEx_PLL2_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80087e6:	e011      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ec:	3328      	adds	r3, #40	@ 0x28
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f002 fb5f 	bl	800aeb4 <RCCEx_PLL3_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80087fc:	e006      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008804:	e002      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008806:	bf00      	nop
 8008808:	e000      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800880a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800880c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008814:	4b4f      	ldr	r3, [pc, #316]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008818:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008822:	4a4c      	ldr	r2, [pc, #304]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008824:	430b      	orrs	r3, r1
 8008826:	6513      	str	r3, [r2, #80]	@ 0x50
 8008828:	e003      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800883e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008842:	2300      	movs	r3, #0
 8008844:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008848:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800884c:	460b      	mov	r3, r1
 800884e:	4313      	orrs	r3, r2
 8008850:	d053      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008856:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800885a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800885e:	d035      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008860:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008864:	d82e      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008866:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800886a:	d031      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800886c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008870:	d828      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008876:	d01a      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800887c:	d822      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008886:	d007      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008888:	e01c      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800888a:	4b32      	ldr	r3, [pc, #200]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	4a31      	ldr	r2, [pc, #196]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008896:	e01c      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889c:	3308      	adds	r3, #8
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f002 fa55 	bl	800ad50 <RCCEx_PLL2_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80088ac:	e011      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b2:	3328      	adds	r3, #40	@ 0x28
 80088b4:	2100      	movs	r1, #0
 80088b6:	4618      	mov	r0, r3
 80088b8:	f002 fafc 	bl	800aeb4 <RCCEx_PLL3_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088c2:	e006      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088ca:	e002      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80088d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80088da:	4b1e      	ldr	r3, [pc, #120]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80088f0:	e003      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008906:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800890a:	2300      	movs	r3, #0
 800890c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008910:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008914:	460b      	mov	r3, r1
 8008916:	4313      	orrs	r3, r2
 8008918:	d056      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008922:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008926:	d038      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008928:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800892c:	d831      	bhi.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800892e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008932:	d034      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008934:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008938:	d82b      	bhi.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800893a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800893e:	d01d      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008940:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008944:	d825      	bhi.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d006      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800894a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800894e:	d00a      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008950:	e01f      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008952:	bf00      	nop
 8008954:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008958:	4ba2      	ldr	r3, [pc, #648]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800895a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895c:	4aa1      	ldr	r2, [pc, #644]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800895e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008964:	e01c      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896a:	3308      	adds	r3, #8
 800896c:	2100      	movs	r1, #0
 800896e:	4618      	mov	r0, r3
 8008970:	f002 f9ee 	bl	800ad50 <RCCEx_PLL2_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800897a:	e011      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800897c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008980:	3328      	adds	r3, #40	@ 0x28
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f002 fa95 	bl	800aeb4 <RCCEx_PLL3_Config>
 800898a:	4603      	mov	r3, r0
 800898c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008990:	e006      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008998:	e002      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800899a:	bf00      	nop
 800899c:	e000      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800899e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10b      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089a8:	4b8e      	ldr	r3, [pc, #568]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80089b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80089b8:	4a8a      	ldr	r2, [pc, #552]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ba:	430b      	orrs	r3, r1
 80089bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80089be:	e003      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80089d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80089de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80089e2:	460b      	mov	r3, r1
 80089e4:	4313      	orrs	r3, r2
 80089e6:	d03a      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ee:	2b30      	cmp	r3, #48	@ 0x30
 80089f0:	d01f      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80089f2:	2b30      	cmp	r3, #48	@ 0x30
 80089f4:	d819      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d00c      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d815      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d019      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d111      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a06:	4b77      	ldr	r3, [pc, #476]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0a:	4a76      	ldr	r2, [pc, #472]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008a12:	e011      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a18:	3308      	adds	r3, #8
 8008a1a:	2102      	movs	r1, #2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f002 f997 	bl	800ad50 <RCCEx_PLL2_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008a28:	e006      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008a32:	bf00      	nop
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a40:	4b68      	ldr	r3, [pc, #416]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4e:	4a65      	ldr	r2, [pc, #404]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a50:	430b      	orrs	r3, r1
 8008a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a54:	e003      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	d051      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a88:	d035      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a8e:	d82e      	bhi.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008a90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a94:	d031      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008a96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a9a:	d828      	bhi.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa0:	d01a      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa6:	d822      	bhi.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab0:	d007      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008ab2:	e01c      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ac0:	e01c      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f002 f940 	bl	800ad50 <RCCEx_PLL2_Config>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ad6:	e011      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008adc:	3328      	adds	r3, #40	@ 0x28
 8008ade:	2100      	movs	r1, #0
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f002 f9e7 	bl	800aeb4 <RCCEx_PLL3_Config>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008aec:	e006      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008af4:	e002      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008af6:	bf00      	nop
 8008af8:	e000      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b04:	4b37      	ldr	r3, [pc, #220]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b12:	4a34      	ldr	r2, [pc, #208]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b14:	430b      	orrs	r3, r1
 8008b16:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b18:	e003      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b32:	2300      	movs	r3, #0
 8008b34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008b38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	d056      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b4c:	d033      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008b4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b52:	d82c      	bhi.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008b54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b58:	d02f      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b5e:	d826      	bhi.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008b60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b64:	d02b      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008b66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b6a:	d820      	bhi.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b70:	d012      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b76:	d81a      	bhi.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d022      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b80:	d115      	bne.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b86:	3308      	adds	r3, #8
 8008b88:	2101      	movs	r1, #1
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f002 f8e0 	bl	800ad50 <RCCEx_PLL2_Config>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008b96:	e015      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9c:	3328      	adds	r3, #40	@ 0x28
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f002 f987 	bl	800aeb4 <RCCEx_PLL3_Config>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008bac:	e00a      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bb4:	e006      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008bb6:	bf00      	nop
 8008bb8:	e004      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008bba:	bf00      	nop
 8008bbc:	e002      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008bbe:	bf00      	nop
 8008bc0:	e000      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10d      	bne.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008bcc:	4b05      	ldr	r3, [pc, #20]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bda:	4a02      	ldr	r2, [pc, #8]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8008be0:	e006      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008be2:	bf00      	nop
 8008be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c00:	2300      	movs	r3, #0
 8008c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	d055      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c1c:	d033      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c22:	d82c      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c28:	d02f      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2e:	d826      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c34:	d02b      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008c36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c3a:	d820      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c40:	d012      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c46:	d81a      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d022      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008c4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c50:	d115      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c56:	3308      	adds	r3, #8
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 f878 	bl	800ad50 <RCCEx_PLL2_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008c66:	e015      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6c:	3328      	adds	r3, #40	@ 0x28
 8008c6e:	2101      	movs	r1, #1
 8008c70:	4618      	mov	r0, r3
 8008c72:	f002 f91f 	bl	800aeb4 <RCCEx_PLL3_Config>
 8008c76:	4603      	mov	r3, r0
 8008c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008c7c:	e00a      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c84:	e006      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008c86:	bf00      	nop
 8008c88:	e004      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008c8a:	bf00      	nop
 8008c8c:	e002      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008c8e:	bf00      	nop
 8008c90:	e000      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10b      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c9c:	4ba3      	ldr	r3, [pc, #652]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008cac:	4a9f      	ldr	r2, [pc, #636]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cb2:	e003      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	d037      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ce6:	d00e      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cec:	d816      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cf6:	d111      	bne.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfc:	4a8b      	ldr	r2, [pc, #556]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d04:	e00f      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f002 f81e 	bl	800ad50 <RCCEx_PLL2_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d1a:	e004      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d22:	e000      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d3c:	4a7b      	ldr	r2, [pc, #492]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d42:	e003      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008d62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d039      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d81c      	bhi.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008d76:	a201      	add	r2, pc, #4	@ (adr r2, 8008d7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008db9 	.word	0x08008db9
 8008d80:	08008d8d 	.word	0x08008d8d
 8008d84:	08008d9b 	.word	0x08008d9b
 8008d88:	08008db9 	.word	0x08008db9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d8c:	4b67      	ldr	r3, [pc, #412]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d90:	4a66      	ldr	r2, [pc, #408]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008d98:	e00f      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	3308      	adds	r3, #8
 8008da0:	2102      	movs	r1, #2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 ffd4 	bl	800ad50 <RCCEx_PLL2_Config>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008dae:	e004      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008db6:	e000      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dc6:	f023 0103 	bic.w	r1, r3, #3
 8008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dd0:	4a56      	ldr	r2, [pc, #344]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008dd6:	e003      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008dec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008df0:	2300      	movs	r3, #0
 8008df2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008df6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	f000 809f 	beq.w	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e02:	4b4b      	ldr	r3, [pc, #300]	@ (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a4a      	ldr	r2, [pc, #296]	@ (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e0e:	f7fa f82b 	bl	8002e68 <HAL_GetTick>
 8008e12:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e16:	e00b      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e18:	f7fa f826 	bl	8002e68 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b64      	cmp	r3, #100	@ 0x64
 8008e26:	d903      	bls.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e2e:	e005      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e30:	4b3f      	ldr	r3, [pc, #252]	@ (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0ed      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d179      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008e44:	4b39      	ldr	r3, [pc, #228]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e50:	4053      	eors	r3, r2
 8008e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d015      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e5a:	4b34      	ldr	r3, [pc, #208]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e66:	4b31      	ldr	r3, [pc, #196]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e6a:	4a30      	ldr	r2, [pc, #192]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e72:	4b2e      	ldr	r3, [pc, #184]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e76:	4a2d      	ldr	r2, [pc, #180]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008e84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e92:	d118      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e94:	f7f9 ffe8 	bl	8002e68 <HAL_GetTick>
 8008e98:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e9c:	e00d      	b.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e9e:	f7f9 ffe3 	bl	8002e68 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d903      	bls.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008eb8:	e005      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008eba:	4b1c      	ldr	r3, [pc, #112]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0eb      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d129      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ede:	d10e      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008ee0:	4b12      	ldr	r3, [pc, #72]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ef0:	091a      	lsrs	r2, r3, #4
 8008ef2:	4b10      	ldr	r3, [pc, #64]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6113      	str	r3, [r2, #16]
 8008efc:	e005      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008efe:	4b0b      	ldr	r3, [pc, #44]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	4a0a      	ldr	r2, [pc, #40]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f08:	6113      	str	r3, [r2, #16]
 8008f0a:	4b08      	ldr	r3, [pc, #32]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f0c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f1a:	4a04      	ldr	r2, [pc, #16]	@ (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f20:	e00e      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008f2a:	e009      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008f2c:	58024400 	.word	0x58024400
 8008f30:	58024800 	.word	0x58024800
 8008f34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f002 0301 	and.w	r3, r2, #1
 8008f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f50:	2300      	movs	r3, #0
 8008f52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	f000 8089 	beq.w	8009074 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f68:	2b28      	cmp	r3, #40	@ 0x28
 8008f6a:	d86b      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	0800904d 	.word	0x0800904d
 8008f78:	08009045 	.word	0x08009045
 8008f7c:	08009045 	.word	0x08009045
 8008f80:	08009045 	.word	0x08009045
 8008f84:	08009045 	.word	0x08009045
 8008f88:	08009045 	.word	0x08009045
 8008f8c:	08009045 	.word	0x08009045
 8008f90:	08009045 	.word	0x08009045
 8008f94:	08009019 	.word	0x08009019
 8008f98:	08009045 	.word	0x08009045
 8008f9c:	08009045 	.word	0x08009045
 8008fa0:	08009045 	.word	0x08009045
 8008fa4:	08009045 	.word	0x08009045
 8008fa8:	08009045 	.word	0x08009045
 8008fac:	08009045 	.word	0x08009045
 8008fb0:	08009045 	.word	0x08009045
 8008fb4:	0800902f 	.word	0x0800902f
 8008fb8:	08009045 	.word	0x08009045
 8008fbc:	08009045 	.word	0x08009045
 8008fc0:	08009045 	.word	0x08009045
 8008fc4:	08009045 	.word	0x08009045
 8008fc8:	08009045 	.word	0x08009045
 8008fcc:	08009045 	.word	0x08009045
 8008fd0:	08009045 	.word	0x08009045
 8008fd4:	0800904d 	.word	0x0800904d
 8008fd8:	08009045 	.word	0x08009045
 8008fdc:	08009045 	.word	0x08009045
 8008fe0:	08009045 	.word	0x08009045
 8008fe4:	08009045 	.word	0x08009045
 8008fe8:	08009045 	.word	0x08009045
 8008fec:	08009045 	.word	0x08009045
 8008ff0:	08009045 	.word	0x08009045
 8008ff4:	0800904d 	.word	0x0800904d
 8008ff8:	08009045 	.word	0x08009045
 8008ffc:	08009045 	.word	0x08009045
 8009000:	08009045 	.word	0x08009045
 8009004:	08009045 	.word	0x08009045
 8009008:	08009045 	.word	0x08009045
 800900c:	08009045 	.word	0x08009045
 8009010:	08009045 	.word	0x08009045
 8009014:	0800904d 	.word	0x0800904d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901c:	3308      	adds	r3, #8
 800901e:	2101      	movs	r1, #1
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fe95 	bl	800ad50 <RCCEx_PLL2_Config>
 8009026:	4603      	mov	r3, r0
 8009028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800902c:	e00f      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009032:	3328      	adds	r3, #40	@ 0x28
 8009034:	2101      	movs	r1, #1
 8009036:	4618      	mov	r0, r3
 8009038:	f001 ff3c 	bl	800aeb4 <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009042:	e004      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800904a:	e000      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800904c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800904e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009056:	4bbf      	ldr	r3, [pc, #764]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009064:	4abb      	ldr	r2, [pc, #748]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009066:	430b      	orrs	r3, r1
 8009068:	6553      	str	r3, [r2, #84]	@ 0x54
 800906a:	e003      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f002 0302 	and.w	r3, r2, #2
 8009080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009084:	2300      	movs	r3, #0
 8009086:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800908a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800908e:	460b      	mov	r3, r1
 8009090:	4313      	orrs	r3, r2
 8009092:	d041      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800909a:	2b05      	cmp	r3, #5
 800909c:	d824      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090f1 	.word	0x080090f1
 80090a8:	080090bd 	.word	0x080090bd
 80090ac:	080090d3 	.word	0x080090d3
 80090b0:	080090f1 	.word	0x080090f1
 80090b4:	080090f1 	.word	0x080090f1
 80090b8:	080090f1 	.word	0x080090f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c0:	3308      	adds	r3, #8
 80090c2:	2101      	movs	r1, #1
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 fe43 	bl	800ad50 <RCCEx_PLL2_Config>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80090d0:	e00f      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d6:	3328      	adds	r3, #40	@ 0x28
 80090d8:	2101      	movs	r1, #1
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 feea 	bl	800aeb4 <RCCEx_PLL3_Config>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80090e6:	e004      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090ee:	e000      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80090f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80090fa:	4b96      	ldr	r3, [pc, #600]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fe:	f023 0107 	bic.w	r1, r3, #7
 8009102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009108:	4a92      	ldr	r2, [pc, #584]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800910a:	430b      	orrs	r3, r1
 800910c:	6553      	str	r3, [r2, #84]	@ 0x54
 800910e:	e003      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f002 0304 	and.w	r3, r2, #4
 8009124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009128:	2300      	movs	r3, #0
 800912a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800912e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009132:	460b      	mov	r3, r1
 8009134:	4313      	orrs	r3, r2
 8009136:	d044      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009140:	2b05      	cmp	r3, #5
 8009142:	d825      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009144:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914a:	bf00      	nop
 800914c:	08009199 	.word	0x08009199
 8009150:	08009165 	.word	0x08009165
 8009154:	0800917b 	.word	0x0800917b
 8009158:	08009199 	.word	0x08009199
 800915c:	08009199 	.word	0x08009199
 8009160:	08009199 	.word	0x08009199
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009168:	3308      	adds	r3, #8
 800916a:	2101      	movs	r1, #1
 800916c:	4618      	mov	r0, r3
 800916e:	f001 fdef 	bl	800ad50 <RCCEx_PLL2_Config>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009178:	e00f      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917e:	3328      	adds	r3, #40	@ 0x28
 8009180:	2101      	movs	r1, #1
 8009182:	4618      	mov	r0, r3
 8009184:	f001 fe96 	bl	800aeb4 <RCCEx_PLL3_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800918e:	e004      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009196:	e000      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10b      	bne.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091a2:	4b6c      	ldr	r3, [pc, #432]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a6:	f023 0107 	bic.w	r1, r3, #7
 80091aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091b2:	4a68      	ldr	r2, [pc, #416]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091b4:	430b      	orrs	r3, r1
 80091b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80091b8:	e003      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f002 0320 	and.w	r3, r2, #32
 80091ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091d2:	2300      	movs	r3, #0
 80091d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091dc:	460b      	mov	r3, r1
 80091de:	4313      	orrs	r3, r2
 80091e0:	d055      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091ee:	d033      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80091f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091f4:	d82c      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80091f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091fa:	d02f      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80091fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009200:	d826      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009202:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009206:	d02b      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009208:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800920c:	d820      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800920e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009212:	d012      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009218:	d81a      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d022      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800921e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009222:	d115      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009228:	3308      	adds	r3, #8
 800922a:	2100      	movs	r1, #0
 800922c:	4618      	mov	r0, r3
 800922e:	f001 fd8f 	bl	800ad50 <RCCEx_PLL2_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009238:	e015      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923e:	3328      	adds	r3, #40	@ 0x28
 8009240:	2102      	movs	r1, #2
 8009242:	4618      	mov	r0, r3
 8009244:	f001 fe36 	bl	800aeb4 <RCCEx_PLL3_Config>
 8009248:	4603      	mov	r3, r0
 800924a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800924e:	e00a      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009256:	e006      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009258:	bf00      	nop
 800925a:	e004      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800925c:	bf00      	nop
 800925e:	e002      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009260:	bf00      	nop
 8009262:	e000      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10b      	bne.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800926e:	4b39      	ldr	r3, [pc, #228]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009272:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800927e:	4a35      	ldr	r2, [pc, #212]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009280:	430b      	orrs	r3, r1
 8009282:	6553      	str	r3, [r2, #84]	@ 0x54
 8009284:	e003      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800928a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800928e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800929a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800929e:	2300      	movs	r3, #0
 80092a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80092a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80092a8:	460b      	mov	r3, r1
 80092aa:	4313      	orrs	r3, r2
 80092ac:	d058      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80092ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80092ba:	d033      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80092bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80092c0:	d82c      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80092c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c6:	d02f      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80092c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092cc:	d826      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80092ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092d2:	d02b      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80092d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092d8:	d820      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80092da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092de:	d012      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80092e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092e4:	d81a      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d022      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80092ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ee:	d115      	bne.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f4:	3308      	adds	r3, #8
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 fd29 	bl	800ad50 <RCCEx_PLL2_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009304:	e015      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930a:	3328      	adds	r3, #40	@ 0x28
 800930c:	2102      	movs	r1, #2
 800930e:	4618      	mov	r0, r3
 8009310:	f001 fdd0 	bl	800aeb4 <RCCEx_PLL3_Config>
 8009314:	4603      	mov	r3, r0
 8009316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800931a:	e00a      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009322:	e006      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009324:	bf00      	nop
 8009326:	e004      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009328:	bf00      	nop
 800932a:	e002      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800932c:	bf00      	nop
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10e      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800933a:	4b06      	ldr	r3, [pc, #24]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800933c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009346:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800934a:	4a02      	ldr	r2, [pc, #8]	@ (8009354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800934c:	430b      	orrs	r3, r1
 800934e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009350:	e006      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009352:	bf00      	nop
 8009354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800935c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800936c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009370:	2300      	movs	r3, #0
 8009372:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009376:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800937a:	460b      	mov	r3, r1
 800937c:	4313      	orrs	r3, r2
 800937e:	d055      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009388:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800938c:	d033      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800938e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009392:	d82c      	bhi.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009398:	d02f      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800939a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800939e:	d826      	bhi.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80093a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80093a4:	d02b      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80093a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80093aa:	d820      	bhi.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80093ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093b0:	d012      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80093b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093b6:	d81a      	bhi.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d022      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80093bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093c0:	d115      	bne.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c6:	3308      	adds	r3, #8
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 fcc0 	bl	800ad50 <RCCEx_PLL2_Config>
 80093d0:	4603      	mov	r3, r0
 80093d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80093d6:	e015      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093dc:	3328      	adds	r3, #40	@ 0x28
 80093de:	2102      	movs	r1, #2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fd67 	bl	800aeb4 <RCCEx_PLL3_Config>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80093ec:	e00a      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093f4:	e006      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80093f6:	bf00      	nop
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10b      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800940c:	4ba1      	ldr	r3, [pc, #644]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800940e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009410:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800941c:	4a9d      	ldr	r2, [pc, #628]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800941e:	430b      	orrs	r3, r1
 8009420:	6593      	str	r3, [r2, #88]	@ 0x58
 8009422:	e003      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800942c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f002 0308 	and.w	r3, r2, #8
 8009438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800943c:	2300      	movs	r3, #0
 800943e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009446:	460b      	mov	r3, r1
 8009448:	4313      	orrs	r3, r2
 800944a:	d01e      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800944c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009458:	d10c      	bne.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800945a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945e:	3328      	adds	r3, #40	@ 0x28
 8009460:	2102      	movs	r1, #2
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fd26 	bl	800aeb4 <RCCEx_PLL3_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009474:	4b87      	ldr	r3, [pc, #540]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009478:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800947c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009484:	4a83      	ldr	r2, [pc, #524]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009486:	430b      	orrs	r3, r1
 8009488:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	f002 0310 	and.w	r3, r2, #16
 8009496:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800949a:	2300      	movs	r3, #0
 800949c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80094a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80094a4:	460b      	mov	r3, r1
 80094a6:	4313      	orrs	r3, r2
 80094a8:	d01e      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094b6:	d10c      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80094b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094bc:	3328      	adds	r3, #40	@ 0x28
 80094be:	2102      	movs	r1, #2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 fcf7 	bl	800aeb4 <RCCEx_PLL3_Config>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094d2:	4b70      	ldr	r3, [pc, #448]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094e2:	4a6c      	ldr	r2, [pc, #432]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094e4:	430b      	orrs	r3, r1
 80094e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80094f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094f8:	2300      	movs	r3, #0
 80094fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009502:	460b      	mov	r3, r1
 8009504:	4313      	orrs	r3, r2
 8009506:	d03e      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009514:	d022      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800951a:	d81b      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009524:	d00b      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009526:	e015      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952c:	3308      	adds	r3, #8
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f001 fc0d 	bl	800ad50 <RCCEx_PLL2_Config>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800953c:	e00f      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800953e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009542:	3328      	adds	r3, #40	@ 0x28
 8009544:	2102      	movs	r1, #2
 8009546:	4618      	mov	r0, r3
 8009548:	f001 fcb4 	bl	800aeb4 <RCCEx_PLL3_Config>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009552:	e004      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800955a:	e000      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800955c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800955e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10b      	bne.n	800957e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009566:	4b4b      	ldr	r3, [pc, #300]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800956e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009576:	4a47      	ldr	r2, [pc, #284]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009578:	430b      	orrs	r3, r1
 800957a:	6593      	str	r3, [r2, #88]	@ 0x58
 800957c:	e003      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800957e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009592:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009594:	2300      	movs	r3, #0
 8009596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009598:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800959c:	460b      	mov	r3, r1
 800959e:	4313      	orrs	r3, r2
 80095a0:	d03b      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80095ae:	d01f      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80095b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80095b4:	d818      	bhi.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80095b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ba:	d003      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80095bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095c0:	d007      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80095c2:	e011      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c4:	4b33      	ldr	r3, [pc, #204]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c8:	4a32      	ldr	r2, [pc, #200]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80095d0:	e00f      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d6:	3328      	adds	r3, #40	@ 0x28
 80095d8:	2101      	movs	r1, #1
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 fc6a 	bl	800aeb4 <RCCEx_PLL3_Config>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80095e6:	e004      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ee:	e000      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80095f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10b      	bne.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095fa:	4b26      	ldr	r3, [pc, #152]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960a:	4a22      	ldr	r2, [pc, #136]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800960c:	430b      	orrs	r3, r1
 800960e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009610:	e003      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009626:	673b      	str	r3, [r7, #112]	@ 0x70
 8009628:	2300      	movs	r3, #0
 800962a:	677b      	str	r3, [r7, #116]	@ 0x74
 800962c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009630:	460b      	mov	r3, r1
 8009632:	4313      	orrs	r3, r2
 8009634:	d034      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009644:	d007      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009646:	e011      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009648:	4b12      	ldr	r3, [pc, #72]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	4a11      	ldr	r2, [pc, #68]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800964e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009654:	e00e      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965a:	3308      	adds	r3, #8
 800965c:	2102      	movs	r1, #2
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fb76 	bl	800ad50 <RCCEx_PLL2_Config>
 8009664:	4603      	mov	r3, r0
 8009666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800966a:	e003      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10d      	bne.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800967e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009680:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800968a:	4a02      	ldr	r2, [pc, #8]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800968c:	430b      	orrs	r3, r1
 800968e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009690:	e006      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009692:	bf00      	nop
 8009694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800969c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80096a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80096ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096ae:	2300      	movs	r3, #0
 80096b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80096b6:	460b      	mov	r3, r1
 80096b8:	4313      	orrs	r3, r2
 80096ba:	d00c      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c0:	3328      	adds	r3, #40	@ 0x28
 80096c2:	2102      	movs	r1, #2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 fbf5 	bl	800aeb4 <RCCEx_PLL3_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80096e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80096e4:	2300      	movs	r3, #0
 80096e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80096e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80096ec:	460b      	mov	r3, r1
 80096ee:	4313      	orrs	r3, r2
 80096f0:	d038      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096fe:	d018      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009704:	d811      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970a:	d014      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800970c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009710:	d80b      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d011      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800971a:	d106      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971c:	4bc3      	ldr	r3, [pc, #780]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009720:	4ac2      	ldr	r2, [pc, #776]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009728:	e008      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009730:	e004      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009732:	bf00      	nop
 8009734:	e002      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009736:	bf00      	nop
 8009738:	e000      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800973a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800973c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10b      	bne.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009744:	4bb9      	ldr	r3, [pc, #740]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009748:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009754:	4ab5      	ldr	r2, [pc, #724]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009756:	430b      	orrs	r3, r1
 8009758:	6553      	str	r3, [r2, #84]	@ 0x54
 800975a:	e003      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009770:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009772:	2300      	movs	r3, #0
 8009774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009776:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800977a:	460b      	mov	r3, r1
 800977c:	4313      	orrs	r3, r2
 800977e:	d009      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009780:	4baa      	ldr	r3, [pc, #680]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009784:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800978c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800978e:	4aa7      	ldr	r2, [pc, #668]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009790:	430b      	orrs	r3, r1
 8009792:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80097a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80097a2:	2300      	movs	r3, #0
 80097a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80097a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80097aa:	460b      	mov	r3, r1
 80097ac:	4313      	orrs	r3, r2
 80097ae:	d00a      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80097b0:	4b9e      	ldr	r3, [pc, #632]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80097c0:	4a9a      	ldr	r2, [pc, #616]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097c2:	430b      	orrs	r3, r1
 80097c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80097d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097d4:	2300      	movs	r3, #0
 80097d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80097dc:	460b      	mov	r3, r1
 80097de:	4313      	orrs	r3, r2
 80097e0:	d009      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097e2:	4b92      	ldr	r3, [pc, #584]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097f0:	4a8e      	ldr	r2, [pc, #568]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097f2:	430b      	orrs	r3, r1
 80097f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009802:	643b      	str	r3, [r7, #64]	@ 0x40
 8009804:	2300      	movs	r3, #0
 8009806:	647b      	str	r3, [r7, #68]	@ 0x44
 8009808:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800980c:	460b      	mov	r3, r1
 800980e:	4313      	orrs	r3, r2
 8009810:	d00e      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009812:	4b86      	ldr	r3, [pc, #536]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	4a85      	ldr	r2, [pc, #532]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009818:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800981c:	6113      	str	r3, [r2, #16]
 800981e:	4b83      	ldr	r3, [pc, #524]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009820:	6919      	ldr	r1, [r3, #16]
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009826:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800982a:	4a80      	ldr	r2, [pc, #512]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800982c:	430b      	orrs	r3, r1
 800982e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800983c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800983e:	2300      	movs	r3, #0
 8009840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009842:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009846:	460b      	mov	r3, r1
 8009848:	4313      	orrs	r3, r2
 800984a:	d009      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800984c:	4b77      	ldr	r3, [pc, #476]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800984e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009850:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800985a:	4a74      	ldr	r2, [pc, #464]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800985c:	430b      	orrs	r3, r1
 800985e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800986c:	633b      	str	r3, [r7, #48]	@ 0x30
 800986e:	2300      	movs	r3, #0
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
 8009872:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009876:	460b      	mov	r3, r1
 8009878:	4313      	orrs	r3, r2
 800987a:	d00a      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800987c:	4b6b      	ldr	r3, [pc, #428]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800987e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009880:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800988c:	4a67      	ldr	r2, [pc, #412]	@ (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800988e:	430b      	orrs	r3, r1
 8009890:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	2100      	movs	r1, #0
 800989c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80098a8:	460b      	mov	r3, r1
 80098aa:	4313      	orrs	r3, r2
 80098ac:	d011      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b2:	3308      	adds	r3, #8
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 fa4a 	bl	800ad50 <RCCEx_PLL2_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	2100      	movs	r1, #0
 80098dc:	6239      	str	r1, [r7, #32]
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80098e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80098e8:	460b      	mov	r3, r1
 80098ea:	4313      	orrs	r3, r2
 80098ec:	d011      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f2:	3308      	adds	r3, #8
 80098f4:	2101      	movs	r1, #1
 80098f6:	4618      	mov	r0, r3
 80098f8:	f001 fa2a 	bl	800ad50 <RCCEx_PLL2_Config>
 80098fc:	4603      	mov	r3, r0
 80098fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800990e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	2100      	movs	r1, #0
 800991c:	61b9      	str	r1, [r7, #24]
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	61fb      	str	r3, [r7, #28]
 8009924:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009928:	460b      	mov	r3, r1
 800992a:	4313      	orrs	r3, r2
 800992c:	d011      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009932:	3308      	adds	r3, #8
 8009934:	2102      	movs	r1, #2
 8009936:	4618      	mov	r0, r3
 8009938:	f001 fa0a 	bl	800ad50 <RCCEx_PLL2_Config>
 800993c:	4603      	mov	r3, r0
 800993e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800994e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	2100      	movs	r1, #0
 800995c:	6139      	str	r1, [r7, #16]
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009968:	460b      	mov	r3, r1
 800996a:	4313      	orrs	r3, r2
 800996c:	d011      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009972:	3328      	adds	r3, #40	@ 0x28
 8009974:	2100      	movs	r1, #0
 8009976:	4618      	mov	r0, r3
 8009978:	f001 fa9c 	bl	800aeb4 <RCCEx_PLL3_Config>
 800997c:	4603      	mov	r3, r0
 800997e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800998e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	2100      	movs	r1, #0
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	f003 0310 	and.w	r3, r3, #16
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80099a8:	460b      	mov	r3, r1
 80099aa:	4313      	orrs	r3, r2
 80099ac:	d011      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b2:	3328      	adds	r3, #40	@ 0x28
 80099b4:	2101      	movs	r1, #1
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 fa7c 	bl	800aeb4 <RCCEx_PLL3_Config>
 80099bc:	4603      	mov	r3, r0
 80099be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80099c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	2100      	movs	r1, #0
 80099dc:	6039      	str	r1, [r7, #0]
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	607b      	str	r3, [r7, #4]
 80099e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80099e8:	460b      	mov	r3, r1
 80099ea:	4313      	orrs	r3, r2
 80099ec:	d011      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f2:	3328      	adds	r3, #40	@ 0x28
 80099f4:	2102      	movs	r1, #2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f001 fa5c 	bl	800aeb4 <RCCEx_PLL3_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009a12:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e000      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009a26:	46bd      	mov	sp, r7
 8009a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a2c:	58024400 	.word	0x58024400

08009a30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b090      	sub	sp, #64	@ 0x40
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a3e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009a42:	430b      	orrs	r3, r1
 8009a44:	f040 8094 	bne.w	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009a48:	4b9e      	ldr	r3, [pc, #632]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	f200 8087 	bhi.w	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009a75 	.word	0x08009a75
 8009a64:	08009a9d 	.word	0x08009a9d
 8009a68:	08009ac5 	.word	0x08009ac5
 8009a6c:	08009b61 	.word	0x08009b61
 8009a70:	08009aed 	.word	0x08009aed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a74:	4b93      	ldr	r3, [pc, #588]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a80:	d108      	bne.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f001 f810 	bl	800aaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a90:	f000 bd45 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a98:	f000 bd41 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a9c:	4b89      	ldr	r3, [pc, #548]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aa8:	d108      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aaa:	f107 0318 	add.w	r3, r7, #24
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fd54 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ab8:	f000 bd31 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac0:	f000 bd2d 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ad0:	d108      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad2:	f107 030c 	add.w	r3, r7, #12
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fe94 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ae0:	f000 bd1d 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae8:	f000 bd19 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aec:	4b75      	ldr	r3, [pc, #468]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009af0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009af4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009af6:	4b73      	ldr	r3, [pc, #460]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0304 	and.w	r3, r3, #4
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d10c      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d109      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b08:	4b6e      	ldr	r3, [pc, #440]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	08db      	lsrs	r3, r3, #3
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	4a6d      	ldr	r2, [pc, #436]	@ (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
 8009b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b1a:	e01f      	b.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b1c:	4b69      	ldr	r3, [pc, #420]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b28:	d106      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b30:	d102      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b32:	4b66      	ldr	r3, [pc, #408]	@ (8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b36:	e011      	b.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b38:	4b62      	ldr	r3, [pc, #392]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b44:	d106      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b4c:	d102      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b4e:	4b60      	ldr	r3, [pc, #384]	@ (8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b52:	e003      	b.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009b58:	f000 bce1 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b5c:	f000 bcdf 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b60:	4b5c      	ldr	r3, [pc, #368]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b64:	f000 bcdb 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b6c:	f000 bcd7 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b74:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	f040 80ad 	bne.w	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009b7e:	4b51      	ldr	r3, [pc, #324]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b82:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009b86:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8e:	d056      	beq.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b96:	f200 8090 	bhi.w	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b9e:	f000 8088 	beq.w	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ba6:	f200 8088 	bhi.w	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	2b80      	cmp	r3, #128	@ 0x80
 8009bae:	d032      	beq.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	2b80      	cmp	r3, #128	@ 0x80
 8009bb4:	f200 8081 	bhi.w	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	2b40      	cmp	r3, #64	@ 0x40
 8009bc2:	d014      	beq.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009bc4:	e079      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bd2:	d108      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 ff67 	bl	800aaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be2:	f000 bc9c 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bea:	f000 bc98 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bee:	4b35      	ldr	r3, [pc, #212]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bfa:	d108      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfc:	f107 0318 	add.w	r3, r7, #24
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 fcab 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c0a:	f000 bc88 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c12:	f000 bc84 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c16:	4b2b      	ldr	r3, [pc, #172]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c22:	d108      	bne.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c24:	f107 030c 	add.w	r3, r7, #12
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fdeb 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c32:	f000 bc74 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c3a:	f000 bc70 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c3e:	4b21      	ldr	r3, [pc, #132]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c48:	4b1e      	ldr	r3, [pc, #120]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d10c      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d109      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	08db      	lsrs	r3, r3, #3
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	4a18      	ldr	r2, [pc, #96]	@ (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c66:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c6c:	e01f      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c6e:	4b15      	ldr	r3, [pc, #84]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c7a:	d106      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c82:	d102      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c84:	4b11      	ldr	r3, [pc, #68]	@ (8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c88:	e011      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c96:	d106      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c9e:	d102      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ca4:	e003      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009caa:	f000 bc38 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cae:	f000 bc36 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cb2:	4b08      	ldr	r3, [pc, #32]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb6:	f000 bc32 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbe:	f000 bc2e 	b.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cc2:	bf00      	nop
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	03d09000 	.word	0x03d09000
 8009ccc:	003d0900 	.word	0x003d0900
 8009cd0:	007a1200 	.word	0x007a1200
 8009cd4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cdc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	f040 809c 	bne.w	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009ce6:	4b9e      	ldr	r3, [pc, #632]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cea:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009cee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009cf6:	d054      	beq.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009cfe:	f200 808b 	bhi.w	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d08:	f000 8083 	beq.w	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d12:	f200 8081 	bhi.w	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d1c:	d02f      	beq.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d24:	d878      	bhi.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d32:	d012      	beq.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009d34:	e070      	b.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d36:	4b8a      	ldr	r3, [pc, #552]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d42:	d107      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 feaf 	bl	800aaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d52:	e3e4      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d58:	e3e1      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d5a:	4b81      	ldr	r3, [pc, #516]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d66:	d107      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d68:	f107 0318 	add.w	r3, r7, #24
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fbf5 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d76:	e3d2      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d7c:	e3cf      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d7e:	4b78      	ldr	r3, [pc, #480]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d8a:	d107      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d8c:	f107 030c 	add.w	r3, r7, #12
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 fd37 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d9a:	e3c0      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009da0:	e3bd      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009da2:	4b6f      	ldr	r3, [pc, #444]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009da6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dac:	4b6c      	ldr	r3, [pc, #432]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d10c      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d109      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dbe:	4b68      	ldr	r3, [pc, #416]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	08db      	lsrs	r3, r3, #3
 8009dc4:	f003 0303 	and.w	r3, r3, #3
 8009dc8:	4a66      	ldr	r2, [pc, #408]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009dca:	fa22 f303 	lsr.w	r3, r2, r3
 8009dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dd0:	e01e      	b.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dd2:	4b63      	ldr	r3, [pc, #396]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dde:	d106      	bne.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009de6:	d102      	bne.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009de8:	4b5f      	ldr	r3, [pc, #380]	@ (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dec:	e010      	b.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dee:	4b5c      	ldr	r3, [pc, #368]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009df6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dfa:	d106      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e02:	d102      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e04:	4b59      	ldr	r3, [pc, #356]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e08:	e002      	b.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e0e:	e386      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e10:	e385      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e12:	4b57      	ldr	r3, [pc, #348]	@ (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e16:	e382      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e1c:	e37f      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e22:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009e26:	430b      	orrs	r3, r1
 8009e28:	f040 80a7 	bne.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009e2c:	4b4c      	ldr	r3, [pc, #304]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e30:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009e34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e3c:	d055      	beq.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e44:	f200 8096 	bhi.w	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009e4e:	f000 8084 	beq.w	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009e58:	f200 808c 	bhi.w	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e62:	d030      	beq.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e6a:	f200 8083 	bhi.w	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e7a:	d012      	beq.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009e7c:	e07a      	b.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e7e:	4b38      	ldr	r3, [pc, #224]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e8a:	d107      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 fe0b 	bl	800aaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e9a:	e340      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea0:	e33d      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eae:	d107      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eb0:	f107 0318 	add.w	r3, r7, #24
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fb51 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ebe:	e32e      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec4:	e32b      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ec6:	4b26      	ldr	r3, [pc, #152]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ed2:	d107      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed4:	f107 030c 	add.w	r3, r7, #12
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fc93 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee2:	e31c      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee8:	e319      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009eea:	4b1d      	ldr	r3, [pc, #116]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ef2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0304 	and.w	r3, r3, #4
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d10c      	bne.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d109      	bne.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f06:	4b16      	ldr	r3, [pc, #88]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	08db      	lsrs	r3, r3, #3
 8009f0c:	f003 0303 	and.w	r3, r3, #3
 8009f10:	4a14      	ldr	r2, [pc, #80]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f12:	fa22 f303 	lsr.w	r3, r2, r3
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f18:	e01e      	b.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f1a:	4b11      	ldr	r3, [pc, #68]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f26:	d106      	bne.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f2e:	d102      	bne.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f30:	4b0d      	ldr	r3, [pc, #52]	@ (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f34:	e010      	b.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f36:	4b0a      	ldr	r3, [pc, #40]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f42:	d106      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f4a:	d102      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f4c:	4b07      	ldr	r3, [pc, #28]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f50:	e002      	b.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f56:	e2e2      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f58:	e2e1      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f5a:	4b05      	ldr	r3, [pc, #20]	@ (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f5e:	e2de      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f60:	58024400 	.word	0x58024400
 8009f64:	03d09000 	.word	0x03d09000
 8009f68:	003d0900 	.word	0x003d0900
 8009f6c:	007a1200 	.word	0x007a1200
 8009f70:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f78:	e2d1      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f7e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009f82:	430b      	orrs	r3, r1
 8009f84:	f040 809c 	bne.w	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009f88:	4b93      	ldr	r3, [pc, #588]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f8c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009f90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f98:	d054      	beq.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fa0:	f200 808b 	bhi.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009faa:	f000 8083 	beq.w	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009fb4:	f200 8081 	bhi.w	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fbe:	d02f      	beq.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fc6:	d878      	bhi.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fd4:	d012      	beq.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009fd6:	e070      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fd8:	4b7f      	ldr	r3, [pc, #508]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fe4:	d107      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fd5e 	bl	800aaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ff4:	e293      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ffa:	e290      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ffc:	4b76      	ldr	r3, [pc, #472]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a008:	d107      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00a:	f107 0318 	add.w	r3, r7, #24
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 faa4 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a018:	e281      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a01e:	e27e      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a020:	4b6d      	ldr	r3, [pc, #436]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a02c:	d107      	bne.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a02e:	f107 030c 	add.w	r3, r7, #12
 800a032:	4618      	mov	r0, r3
 800a034:	f000 fbe6 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a03c:	e26f      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a042:	e26c      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a044:	4b64      	ldr	r3, [pc, #400]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a048:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a04c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a04e:	4b62      	ldr	r3, [pc, #392]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0304 	and.w	r3, r3, #4
 800a056:	2b04      	cmp	r3, #4
 800a058:	d10c      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a060:	4b5d      	ldr	r3, [pc, #372]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	08db      	lsrs	r3, r3, #3
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	4a5c      	ldr	r2, [pc, #368]	@ (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a06c:	fa22 f303 	lsr.w	r3, r2, r3
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a072:	e01e      	b.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a074:	4b58      	ldr	r3, [pc, #352]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a07c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a080:	d106      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a088:	d102      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a08a:	4b55      	ldr	r3, [pc, #340]	@ (800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a08e:	e010      	b.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a090:	4b51      	ldr	r3, [pc, #324]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a09c:	d106      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0a4:	d102      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0aa:	e002      	b.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0b0:	e235      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0b2:	e234      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0b4:	4b4c      	ldr	r3, [pc, #304]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b8:	e231      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0be:	e22e      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a0c8:	430b      	orrs	r3, r1
 800a0ca:	f040 808f 	bne.w	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a0ce:	4b42      	ldr	r3, [pc, #264]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0d2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0de:	d06b      	beq.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0e6:	d874      	bhi.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0ee:	d056      	beq.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0f6:	d86c      	bhi.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0fe:	d03b      	beq.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a102:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a106:	d864      	bhi.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a10e:	d021      	beq.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a116:	d85c      	bhi.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d004      	beq.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a124:	d004      	beq.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a126:	e054      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a128:	f7fe fa0a 	bl	8008540 <HAL_RCC_GetPCLK1Freq>
 800a12c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a12e:	e1f6      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a130:	4b29      	ldr	r3, [pc, #164]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a13c:	d107      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a13e:	f107 0318 	add.w	r3, r7, #24
 800a142:	4618      	mov	r0, r3
 800a144:	f000 fa0a 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a14c:	e1e7      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a152:	e1e4      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a154:	4b20      	ldr	r3, [pc, #128]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a15c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a160:	d107      	bne.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	4618      	mov	r0, r3
 800a168:	f000 fb4c 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a170:	e1d5      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a172:	2300      	movs	r3, #0
 800a174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a176:	e1d2      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a178:	4b17      	ldr	r3, [pc, #92]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b04      	cmp	r3, #4
 800a182:	d109      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a184:	4b14      	ldr	r3, [pc, #80]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	08db      	lsrs	r3, r3, #3
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	4a13      	ldr	r2, [pc, #76]	@ (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a190:	fa22 f303 	lsr.w	r3, r2, r3
 800a194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a196:	e1c2      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a19c:	e1bf      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a19e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1aa:	d102      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1b0:	e1b5      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b6:	e1b2      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1b8:	4b07      	ldr	r3, [pc, #28]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1c4:	d102      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a1c6:	4b07      	ldr	r3, [pc, #28]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ca:	e1a8      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d0:	e1a5      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d6:	e1a2      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	03d09000 	.word	0x03d09000
 800a1e0:	003d0900 	.word	0x003d0900
 800a1e4:	007a1200 	.word	0x007a1200
 800a1e8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a1ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1f0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	d173      	bne.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a1f8:	4b9c      	ldr	r3, [pc, #624]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a200:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a208:	d02f      	beq.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a210:	d863      	bhi.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	2b00      	cmp	r3, #0
 800a216:	d004      	beq.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a21e:	d012      	beq.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a220:	e05b      	b.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a222:	4b92      	ldr	r3, [pc, #584]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a22a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a22e:	d107      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a230:	f107 0318 	add.w	r3, r7, #24
 800a234:	4618      	mov	r0, r3
 800a236:	f000 f991 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a23e:	e16e      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a244:	e16b      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a246:	4b89      	ldr	r3, [pc, #548]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a24e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a252:	d107      	bne.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a254:	f107 030c 	add.w	r3, r7, #12
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fad3 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a262:	e15c      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a268:	e159      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a26a:	4b80      	ldr	r3, [pc, #512]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a26c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a26e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a272:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a274:	4b7d      	ldr	r3, [pc, #500]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	d10c      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a282:	2b00      	cmp	r3, #0
 800a284:	d109      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a286:	4b79      	ldr	r3, [pc, #484]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	08db      	lsrs	r3, r3, #3
 800a28c:	f003 0303 	and.w	r3, r3, #3
 800a290:	4a77      	ldr	r2, [pc, #476]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a292:	fa22 f303 	lsr.w	r3, r2, r3
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a298:	e01e      	b.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a29a:	4b74      	ldr	r3, [pc, #464]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2a6:	d106      	bne.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2ae:	d102      	bne.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2b0:	4b70      	ldr	r3, [pc, #448]	@ (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2b4:	e010      	b.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2b6:	4b6d      	ldr	r3, [pc, #436]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c2:	d106      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ca:	d102      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2cc:	4b6a      	ldr	r3, [pc, #424]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2d0:	e002      	b.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2d6:	e122      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2d8:	e121      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2de:	e11e      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a2e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a2e8:	430b      	orrs	r3, r1
 800a2ea:	d133      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a2ec:	4b5f      	ldr	r3, [pc, #380]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d004      	beq.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a302:	d012      	beq.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a304:	e023      	b.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a306:	4b59      	ldr	r3, [pc, #356]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a30e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a312:	d107      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 fbc7 	bl	800aaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a322:	e0fc      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	e0f9      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a32a:	4b50      	ldr	r3, [pc, #320]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a336:	d107      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a338:	f107 0318 	add.w	r3, r7, #24
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f90d 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a346:	e0ea      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	e0e7      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a352:	e0e4      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a358:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a35c:	430b      	orrs	r3, r1
 800a35e:	f040 808d 	bne.w	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a362:	4b42      	ldr	r3, [pc, #264]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a366:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a36a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a372:	d06b      	beq.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a37a:	d874      	bhi.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a382:	d056      	beq.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a38a:	d86c      	bhi.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a392:	d03b      	beq.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a39a:	d864      	bhi.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a2:	d021      	beq.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3aa:	d85c      	bhi.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d004      	beq.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3b8:	d004      	beq.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a3ba:	e054      	b.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a3bc:	f000 f8b8 	bl	800a530 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a3c2:	e0ac      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3c4:	4b29      	ldr	r3, [pc, #164]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3d0:	d107      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d2:	f107 0318 	add.w	r3, r7, #24
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f8c0 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3e0:	e09d      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3e6:	e09a      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3e8:	4b20      	ldr	r3, [pc, #128]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3f4:	d107      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3f6:	f107 030c 	add.w	r3, r7, #12
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fa02 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a404:	e08b      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a40a:	e088      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a40c:	4b17      	ldr	r3, [pc, #92]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0304 	and.w	r3, r3, #4
 800a414:	2b04      	cmp	r3, #4
 800a416:	d109      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a418:	4b14      	ldr	r3, [pc, #80]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	08db      	lsrs	r3, r3, #3
 800a41e:	f003 0303 	and.w	r3, r3, #3
 800a422:	4a13      	ldr	r2, [pc, #76]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a424:	fa22 f303 	lsr.w	r3, r2, r3
 800a428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a42a:	e078      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a430:	e075      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a432:	4b0e      	ldr	r3, [pc, #56]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43e:	d102      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a440:	4b0c      	ldr	r3, [pc, #48]	@ (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a444:	e06b      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44a:	e068      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a44c:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a458:	d102      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a45a:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a45e:	e05e      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a464:	e05b      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a466:	2300      	movs	r3, #0
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46a:	e058      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a46c:	58024400 	.word	0x58024400
 800a470:	03d09000 	.word	0x03d09000
 800a474:	003d0900 	.word	0x003d0900
 800a478:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a480:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a484:	430b      	orrs	r3, r1
 800a486:	d148      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a488:	4b27      	ldr	r3, [pc, #156]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a48a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a48c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a490:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a498:	d02a      	beq.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a0:	d838      	bhi.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d004      	beq.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ae:	d00d      	beq.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a4b0:	e030      	b.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4be:	d102      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a52c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c4:	e02b      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ca:	e028      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4cc:	4b16      	ldr	r3, [pc, #88]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4d8:	d107      	bne.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fae4 	bl	800aaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e8:	e019      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ee:	e016      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4fc:	d107      	bne.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4fe:	f107 0318 	add.w	r3, r7, #24
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f82a 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a50c:	e007      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a512:	e004      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a518:	e001      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a520:	4618      	mov	r0, r3
 800a522:	3740      	adds	r7, #64	@ 0x40
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	58024400 	.word	0x58024400
 800a52c:	007a1200 	.word	0x007a1200

0800a530 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a534:	f7fd ffd4 	bl	80084e0 <HAL_RCC_GetHCLKFreq>
 800a538:	4602      	mov	r2, r0
 800a53a:	4b06      	ldr	r3, [pc, #24]	@ (800a554 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	091b      	lsrs	r3, r3, #4
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	4904      	ldr	r1, [pc, #16]	@ (800a558 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a546:	5ccb      	ldrb	r3, [r1, r3]
 800a548:	f003 031f 	and.w	r3, r3, #31
 800a54c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a550:	4618      	mov	r0, r3
 800a552:	bd80      	pop	{r7, pc}
 800a554:	58024400 	.word	0x58024400
 800a558:	0801834c 	.word	0x0801834c

0800a55c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b089      	sub	sp, #36	@ 0x24
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a564:	4ba1      	ldr	r3, [pc, #644]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a568:	f003 0303 	and.w	r3, r3, #3
 800a56c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a56e:	4b9f      	ldr	r3, [pc, #636]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a572:	0b1b      	lsrs	r3, r3, #12
 800a574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a578:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a57a:	4b9c      	ldr	r3, [pc, #624]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57e:	091b      	lsrs	r3, r3, #4
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a586:	4b99      	ldr	r3, [pc, #612]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58a:	08db      	lsrs	r3, r3, #3
 800a58c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	fb02 f303 	mul.w	r3, r2, r3
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 8111 	beq.w	800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	f000 8083 	beq.w	800a6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	f200 80a1 	bhi.w	800a6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d056      	beq.n	800a674 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a5c6:	e099      	b.n	800a6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5c8:	4b88      	ldr	r3, [pc, #544]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0320 	and.w	r3, r3, #32
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d02d      	beq.n	800a630 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d4:	4b85      	ldr	r3, [pc, #532]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	08db      	lsrs	r3, r3, #3
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	4a84      	ldr	r2, [pc, #528]	@ (800a7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	ee07 3a90 	vmov	s15, r3
 800a5ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5fe:	4b7b      	ldr	r3, [pc, #492]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a606:	ee07 3a90 	vmov	s15, r3
 800a60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a612:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a61e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a62e:	e087      	b.n	800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a642:	4b6a      	ldr	r3, [pc, #424]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a652:	ed97 6a03 	vldr	s12, [r7, #12]
 800a656:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a672:	e065      	b.n	800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a7fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a686:	4b59      	ldr	r3, [pc, #356]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a696:	ed97 6a03 	vldr	s12, [r7, #12]
 800a69a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6b6:	e043      	b.n	800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ca:	4b48      	ldr	r3, [pc, #288]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6fa:	e021      	b.n	800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a706:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a7fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70e:	4b37      	ldr	r3, [pc, #220]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a722:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a73e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a740:	4b2a      	ldr	r3, [pc, #168]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a744:	0a5b      	lsrs	r3, r3, #9
 800a746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a75a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a75e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a766:	ee17 2a90 	vmov	r2, s15
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a76e:	4b1f      	ldr	r3, [pc, #124]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a772:	0c1b      	lsrs	r3, r3, #16
 800a774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a778:	ee07 3a90 	vmov	s15, r3
 800a77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a784:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a788:	edd7 6a07 	vldr	s13, [r7, #28]
 800a78c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a794:	ee17 2a90 	vmov	r2, s15
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a79c:	4b13      	ldr	r3, [pc, #76]	@ (800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a0:	0e1b      	lsrs	r3, r3, #24
 800a7a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7c2:	ee17 2a90 	vmov	r2, s15
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a7ca:	e008      	b.n	800a7de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	609a      	str	r2, [r3, #8]
}
 800a7de:	bf00      	nop
 800a7e0:	3724      	adds	r7, #36	@ 0x24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	58024400 	.word	0x58024400
 800a7f0:	03d09000 	.word	0x03d09000
 800a7f4:	46000000 	.word	0x46000000
 800a7f8:	4c742400 	.word	0x4c742400
 800a7fc:	4a742400 	.word	0x4a742400
 800a800:	4af42400 	.word	0x4af42400

0800a804 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a804:	b480      	push	{r7}
 800a806:	b089      	sub	sp, #36	@ 0x24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a80c:	4ba1      	ldr	r3, [pc, #644]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a810:	f003 0303 	and.w	r3, r3, #3
 800a814:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a816:	4b9f      	ldr	r3, [pc, #636]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81a:	0d1b      	lsrs	r3, r3, #20
 800a81c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a820:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a822:	4b9c      	ldr	r3, [pc, #624]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a826:	0a1b      	lsrs	r3, r3, #8
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a82e:	4b99      	ldr	r3, [pc, #612]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a832:	08db      	lsrs	r3, r3, #3
 800a834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	fb02 f303 	mul.w	r3, r2, r3
 800a83e:	ee07 3a90 	vmov	s15, r3
 800a842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f000 8111 	beq.w	800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	2b02      	cmp	r3, #2
 800a856:	f000 8083 	beq.w	800a960 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	f200 80a1 	bhi.w	800a9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d056      	beq.n	800a91c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a86e:	e099      	b.n	800a9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a870:	4b88      	ldr	r3, [pc, #544]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0320 	and.w	r3, r3, #32
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d02d      	beq.n	800a8d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a87c:	4b85      	ldr	r3, [pc, #532]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	08db      	lsrs	r3, r3, #3
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	4a84      	ldr	r2, [pc, #528]	@ (800aa98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a888:	fa22 f303 	lsr.w	r3, r2, r3
 800a88c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	ee07 3a90 	vmov	s15, r3
 800a894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8a6:	4b7b      	ldr	r3, [pc, #492]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ae:	ee07 3a90 	vmov	s15, r3
 800a8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a8d6:	e087      	b.n	800a9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ea:	4b6a      	ldr	r3, [pc, #424]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f2:	ee07 3a90 	vmov	s15, r3
 800a8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a91a:	e065      	b.n	800a9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a926:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a92e:	4b59      	ldr	r3, [pc, #356]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a936:	ee07 3a90 	vmov	s15, r3
 800a93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a942:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a94e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a95e:	e043      	b.n	800a9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aaa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a972:	4b48      	ldr	r3, [pc, #288]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97a:	ee07 3a90 	vmov	s15, r3
 800a97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a982:	ed97 6a03 	vldr	s12, [r7, #12]
 800a986:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a99e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9a2:	e021      	b.n	800a9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b6:	4b37      	ldr	r3, [pc, #220]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a9e8:	4b2a      	ldr	r3, [pc, #168]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ec:	0a5b      	lsrs	r3, r3, #9
 800a9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa02:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa0e:	ee17 2a90 	vmov	r2, s15
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aa16:	4b1f      	ldr	r3, [pc, #124]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1a:	0c1b      	lsrs	r3, r3, #16
 800aa1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa20:	ee07 3a90 	vmov	s15, r3
 800aa24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa30:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa3c:	ee17 2a90 	vmov	r2, s15
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aa44:	4b13      	ldr	r3, [pc, #76]	@ (800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa48:	0e1b      	lsrs	r3, r3, #24
 800aa4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa6a:	ee17 2a90 	vmov	r2, s15
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aa72:	e008      	b.n	800aa86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	609a      	str	r2, [r3, #8]
}
 800aa86:	bf00      	nop
 800aa88:	3724      	adds	r7, #36	@ 0x24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	58024400 	.word	0x58024400
 800aa98:	03d09000 	.word	0x03d09000
 800aa9c:	46000000 	.word	0x46000000
 800aaa0:	4c742400 	.word	0x4c742400
 800aaa4:	4a742400 	.word	0x4a742400
 800aaa8:	4af42400 	.word	0x4af42400

0800aaac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b089      	sub	sp, #36	@ 0x24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aab4:	4ba0      	ldr	r3, [pc, #640]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aabe:	4b9e      	ldr	r3, [pc, #632]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac2:	091b      	lsrs	r3, r3, #4
 800aac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aac8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aaca:	4b9b      	ldr	r3, [pc, #620]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aad4:	4b98      	ldr	r3, [pc, #608]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aad8:	08db      	lsrs	r3, r3, #3
 800aada:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	fb02 f303 	mul.w	r3, r2, r3
 800aae4:	ee07 3a90 	vmov	s15, r3
 800aae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 8111 	beq.w	800ad1a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	f000 8083 	beq.w	800ac06 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	f200 80a1 	bhi.w	800ac4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d056      	beq.n	800abc2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ab14:	e099      	b.n	800ac4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab16:	4b88      	ldr	r3, [pc, #544]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0320 	and.w	r3, r3, #32
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d02d      	beq.n	800ab7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab22:	4b85      	ldr	r3, [pc, #532]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	08db      	lsrs	r3, r3, #3
 800ab28:	f003 0303 	and.w	r3, r3, #3
 800ab2c:	4a83      	ldr	r2, [pc, #524]	@ (800ad3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ab2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab32:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	ee07 3a90 	vmov	s15, r3
 800ab3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab4c:	4b7a      	ldr	r3, [pc, #488]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab54:	ee07 3a90 	vmov	s15, r3
 800ab58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab60:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ad40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab7c:	e087      	b.n	800ac8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	ee07 3a90 	vmov	s15, r3
 800ab84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ad44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab90:	4b69      	ldr	r3, [pc, #420]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab98:	ee07 3a90 	vmov	s15, r3
 800ab9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aba4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ad40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abc0:	e065      	b.n	800ac8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	ee07 3a90 	vmov	s15, r3
 800abc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abcc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ad48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800abd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd4:	4b58      	ldr	r3, [pc, #352]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abdc:	ee07 3a90 	vmov	s15, r3
 800abe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800abe8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ad40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac04:	e043      	b.n	800ac8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac10:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ad4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ac14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac18:	4b47      	ldr	r3, [pc, #284]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac20:	ee07 3a90 	vmov	s15, r3
 800ac24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac28:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac2c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ad40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac48:	e021      	b.n	800ac8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac54:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ad44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac5c:	4b36      	ldr	r3, [pc, #216]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac64:	ee07 3a90 	vmov	s15, r3
 800ac68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac70:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ad40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac8c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ac8e:	4b2a      	ldr	r3, [pc, #168]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac92:	0a5b      	lsrs	r3, r3, #9
 800ac94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac98:	ee07 3a90 	vmov	s15, r3
 800ac9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aca8:	edd7 6a07 	vldr	s13, [r7, #28]
 800acac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acb4:	ee17 2a90 	vmov	r2, s15
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800acbc:	4b1e      	ldr	r3, [pc, #120]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc0:	0c1b      	lsrs	r3, r3, #16
 800acc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800acda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ace2:	ee17 2a90 	vmov	r2, s15
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800acea:	4b13      	ldr	r3, [pc, #76]	@ (800ad38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acee:	0e1b      	lsrs	r3, r3, #24
 800acf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acf4:	ee07 3a90 	vmov	s15, r3
 800acf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad04:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad10:	ee17 2a90 	vmov	r2, s15
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ad18:	e008      	b.n	800ad2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	609a      	str	r2, [r3, #8]
}
 800ad2c:	bf00      	nop
 800ad2e:	3724      	adds	r7, #36	@ 0x24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	58024400 	.word	0x58024400
 800ad3c:	03d09000 	.word	0x03d09000
 800ad40:	46000000 	.word	0x46000000
 800ad44:	4c742400 	.word	0x4c742400
 800ad48:	4a742400 	.word	0x4a742400
 800ad4c:	4af42400 	.word	0x4af42400

0800ad50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad5e:	4b53      	ldr	r3, [pc, #332]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ad60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d101      	bne.n	800ad6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e099      	b.n	800aea2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ad6e:	4b4f      	ldr	r3, [pc, #316]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a4e      	ldr	r2, [pc, #312]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ad74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad7a:	f7f8 f875 	bl	8002e68 <HAL_GetTick>
 800ad7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad80:	e008      	b.n	800ad94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad82:	f7f8 f871 	bl	8002e68 <HAL_GetTick>
 800ad86:	4602      	mov	r2, r0
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d901      	bls.n	800ad94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e086      	b.n	800aea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad94:	4b45      	ldr	r3, [pc, #276]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f0      	bne.n	800ad82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ada0:	4b42      	ldr	r3, [pc, #264]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ada2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	031b      	lsls	r3, r3, #12
 800adae:	493f      	ldr	r1, [pc, #252]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	628b      	str	r3, [r1, #40]	@ 0x28
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	3b01      	subs	r3, #1
 800adba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	025b      	lsls	r3, r3, #9
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	431a      	orrs	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	3b01      	subs	r3, #1
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	3b01      	subs	r3, #1
 800adde:	061b      	lsls	r3, r3, #24
 800ade0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ade4:	4931      	ldr	r1, [pc, #196]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800adea:	4b30      	ldr	r3, [pc, #192]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800adec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	492d      	ldr	r1, [pc, #180]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800adf8:	4313      	orrs	r3, r2
 800adfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800adfc:	4b2b      	ldr	r3, [pc, #172]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800adfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae00:	f023 0220 	bic.w	r2, r3, #32
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	4928      	ldr	r1, [pc, #160]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae0e:	4b27      	ldr	r3, [pc, #156]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae12:	4a26      	ldr	r2, [pc, #152]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae14:	f023 0310 	bic.w	r3, r3, #16
 800ae18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae1a:	4b24      	ldr	r3, [pc, #144]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae1e:	4b24      	ldr	r3, [pc, #144]	@ (800aeb0 <RCCEx_PLL2_Config+0x160>)
 800ae20:	4013      	ands	r3, r2
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	69d2      	ldr	r2, [r2, #28]
 800ae26:	00d2      	lsls	r2, r2, #3
 800ae28:	4920      	ldr	r1, [pc, #128]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ae2e:	4b1f      	ldr	r3, [pc, #124]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae32:	4a1e      	ldr	r2, [pc, #120]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae34:	f043 0310 	orr.w	r3, r3, #16
 800ae38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d106      	bne.n	800ae4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ae40:	4b1a      	ldr	r3, [pc, #104]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae44:	4a19      	ldr	r2, [pc, #100]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ae4c:	e00f      	b.n	800ae6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d106      	bne.n	800ae62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ae54:	4b15      	ldr	r3, [pc, #84]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae58:	4a14      	ldr	r2, [pc, #80]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ae60:	e005      	b.n	800ae6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ae62:	4b12      	ldr	r3, [pc, #72]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae66:	4a11      	ldr	r2, [pc, #68]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ae6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a0e      	ldr	r2, [pc, #56]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae7a:	f7f7 fff5 	bl	8002e68 <HAL_GetTick>
 800ae7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae80:	e008      	b.n	800ae94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae82:	f7f7 fff1 	bl	8002e68 <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d901      	bls.n	800ae94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e006      	b.n	800aea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae94:	4b05      	ldr	r3, [pc, #20]	@ (800aeac <RCCEx_PLL2_Config+0x15c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d0f0      	beq.n	800ae82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	58024400 	.word	0x58024400
 800aeb0:	ffff0007 	.word	0xffff0007

0800aeb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aec2:	4b53      	ldr	r3, [pc, #332]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800aec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec6:	f003 0303 	and.w	r3, r3, #3
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d101      	bne.n	800aed2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e099      	b.n	800b006 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aed2:	4b4f      	ldr	r3, [pc, #316]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a4e      	ldr	r2, [pc, #312]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800aed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aedc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aede:	f7f7 ffc3 	bl	8002e68 <HAL_GetTick>
 800aee2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aee4:	e008      	b.n	800aef8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aee6:	f7f7 ffbf 	bl	8002e68 <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d901      	bls.n	800aef8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e086      	b.n	800b006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aef8:	4b45      	ldr	r3, [pc, #276]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1f0      	bne.n	800aee6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af04:	4b42      	ldr	r3, [pc, #264]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	051b      	lsls	r3, r3, #20
 800af12:	493f      	ldr	r1, [pc, #252]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af14:	4313      	orrs	r3, r2
 800af16:	628b      	str	r3, [r1, #40]	@ 0x28
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	3b01      	subs	r3, #1
 800af28:	025b      	lsls	r3, r3, #9
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	431a      	orrs	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	3b01      	subs	r3, #1
 800af34:	041b      	lsls	r3, r3, #16
 800af36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af3a:	431a      	orrs	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	3b01      	subs	r3, #1
 800af42:	061b      	lsls	r3, r3, #24
 800af44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af48:	4931      	ldr	r1, [pc, #196]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af4a:	4313      	orrs	r3, r2
 800af4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800af4e:	4b30      	ldr	r3, [pc, #192]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	492d      	ldr	r1, [pc, #180]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800af60:	4b2b      	ldr	r3, [pc, #172]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	4928      	ldr	r1, [pc, #160]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af6e:	4313      	orrs	r3, r2
 800af70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800af72:	4b27      	ldr	r3, [pc, #156]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af76:	4a26      	ldr	r2, [pc, #152]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800af7e:	4b24      	ldr	r3, [pc, #144]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af82:	4b24      	ldr	r3, [pc, #144]	@ (800b014 <RCCEx_PLL3_Config+0x160>)
 800af84:	4013      	ands	r3, r2
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	69d2      	ldr	r2, [r2, #28]
 800af8a:	00d2      	lsls	r2, r2, #3
 800af8c:	4920      	ldr	r1, [pc, #128]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800af92:	4b1f      	ldr	r3, [pc, #124]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af96:	4a1e      	ldr	r2, [pc, #120]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800af98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d106      	bne.n	800afb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800afa4:	4b1a      	ldr	r3, [pc, #104]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa8:	4a19      	ldr	r2, [pc, #100]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afaa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800afae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afb0:	e00f      	b.n	800afd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d106      	bne.n	800afc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800afb8:	4b15      	ldr	r3, [pc, #84]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	4a14      	ldr	r2, [pc, #80]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800afc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afc4:	e005      	b.n	800afd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800afc6:	4b12      	ldr	r3, [pc, #72]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afca:	4a11      	ldr	r2, [pc, #68]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800afd2:	4b0f      	ldr	r3, [pc, #60]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a0e      	ldr	r2, [pc, #56]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800afd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afde:	f7f7 ff43 	bl	8002e68 <HAL_GetTick>
 800afe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800afe4:	e008      	b.n	800aff8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800afe6:	f7f7 ff3f 	bl	8002e68 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d901      	bls.n	800aff8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e006      	b.n	800b006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aff8:	4b05      	ldr	r3, [pc, #20]	@ (800b010 <RCCEx_PLL3_Config+0x15c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0f0      	beq.n	800afe6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b004:	7bfb      	ldrb	r3, [r7, #15]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400
 800b014:	ffff0007 	.word	0xffff0007

0800b018 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d904      	bls.n	800b036 <HAL_SAI_InitProtocol+0x1e>
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3b03      	subs	r3, #3
 800b030:	2b01      	cmp	r3, #1
 800b032:	d812      	bhi.n	800b05a <HAL_SAI_InitProtocol+0x42>
 800b034:	e008      	b.n	800b048 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	68b9      	ldr	r1, [r7, #8]
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fc05 	bl	800b84c <SAI_InitI2S>
 800b042:	4603      	mov	r3, r0
 800b044:	75fb      	strb	r3, [r7, #23]
      break;
 800b046:	e00b      	b.n	800b060 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 fcae 	bl	800b9b0 <SAI_InitPCM>
 800b054:	4603      	mov	r3, r0
 800b056:	75fb      	strb	r3, [r7, #23]
      break;
 800b058:	e002      	b.n	800b060 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	75fb      	strb	r3, [r7, #23]
      break;
 800b05e:	bf00      	nop
  }

  if (status == HAL_OK)
 800b060:	7dfb      	ldrb	r3, [r7, #23]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d104      	bne.n	800b070 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 f808 	bl	800b07c <HAL_SAI_Init>
 800b06c:	4603      	mov	r3, r0
 800b06e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	@ 0x28
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e28e      	b.n	800b5ac <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b08e:	f7f7 ff1b 	bl	8002ec8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d113      	bne.n	800b0c4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a96      	ldr	r2, [pc, #600]	@ (800b2fc <HAL_SAI_Init+0x280>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d004      	beq.n	800b0b0 <HAL_SAI_Init+0x34>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a95      	ldr	r2, [pc, #596]	@ (800b300 <HAL_SAI_Init+0x284>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d107      	bne.n	800b0c0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d103      	bne.n	800b0c0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e273      	b.n	800b5ac <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a8c      	ldr	r2, [pc, #560]	@ (800b2fc <HAL_SAI_Init+0x280>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d004      	beq.n	800b0d8 <HAL_SAI_Init+0x5c>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a8c      	ldr	r2, [pc, #560]	@ (800b304 <HAL_SAI_Init+0x288>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d102      	bne.n	800b0de <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b0d8:	4b8b      	ldr	r3, [pc, #556]	@ (800b308 <HAL_SAI_Init+0x28c>)
 800b0da:	61bb      	str	r3, [r7, #24]
 800b0dc:	e028      	b.n	800b130 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a8a      	ldr	r2, [pc, #552]	@ (800b30c <HAL_SAI_Init+0x290>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d004      	beq.n	800b0f2 <HAL_SAI_Init+0x76>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a88      	ldr	r2, [pc, #544]	@ (800b310 <HAL_SAI_Init+0x294>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d102      	bne.n	800b0f8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b0f2:	4b88      	ldr	r3, [pc, #544]	@ (800b314 <HAL_SAI_Init+0x298>)
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	e01b      	b.n	800b130 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a86      	ldr	r2, [pc, #536]	@ (800b318 <HAL_SAI_Init+0x29c>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d004      	beq.n	800b10c <HAL_SAI_Init+0x90>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a85      	ldr	r2, [pc, #532]	@ (800b31c <HAL_SAI_Init+0x2a0>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d102      	bne.n	800b112 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b10c:	4b84      	ldr	r3, [pc, #528]	@ (800b320 <HAL_SAI_Init+0x2a4>)
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	e00e      	b.n	800b130 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a7a      	ldr	r2, [pc, #488]	@ (800b300 <HAL_SAI_Init+0x284>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d004      	beq.n	800b126 <HAL_SAI_Init+0xaa>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a80      	ldr	r2, [pc, #512]	@ (800b324 <HAL_SAI_Init+0x2a8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d102      	bne.n	800b12c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b126:	4b80      	ldr	r3, [pc, #512]	@ (800b328 <HAL_SAI_Init+0x2ac>)
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	e001      	b.n	800b130 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e23d      	b.n	800b5ac <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d106      	bne.n	800b14a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7f6 f985 	bl	8001454 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fcea 	bl	800bb24 <SAI_Disable>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e228      	b.n	800b5ac <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2202      	movs	r2, #2
 800b15e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d00c      	beq.n	800b184 <HAL_SAI_Init+0x108>
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d80d      	bhi.n	800b18a <HAL_SAI_Init+0x10e>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <HAL_SAI_Init+0xfc>
 800b172:	2b01      	cmp	r3, #1
 800b174:	d003      	beq.n	800b17e <HAL_SAI_Init+0x102>
 800b176:	e008      	b.n	800b18a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b17c:	e008      	b.n	800b190 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b17e:	2310      	movs	r3, #16
 800b180:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b182:	e005      	b.n	800b190 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b184:	2320      	movs	r3, #32
 800b186:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b188:	e002      	b.n	800b190 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b18e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	2b05      	cmp	r3, #5
 800b196:	d832      	bhi.n	800b1fe <HAL_SAI_Init+0x182>
 800b198:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a0 <HAL_SAI_Init+0x124>)
 800b19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19e:	bf00      	nop
 800b1a0:	0800b1b9 	.word	0x0800b1b9
 800b1a4:	0800b1bf 	.word	0x0800b1bf
 800b1a8:	0800b1c7 	.word	0x0800b1c7
 800b1ac:	0800b1cf 	.word	0x0800b1cf
 800b1b0:	0800b1df 	.word	0x0800b1df
 800b1b4:	0800b1ef 	.word	0x0800b1ef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	61fb      	str	r3, [r7, #28]
      break;
 800b1bc:	e022      	b.n	800b204 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b1be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1c2:	61fb      	str	r3, [r7, #28]
      break;
 800b1c4:	e01e      	b.n	800b204 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b1c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1ca:	61fb      	str	r3, [r7, #28]
      break;
 800b1cc:	e01a      	b.n	800b204 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b1ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1d2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1dc:	e012      	b.n	800b204 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b1de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	f043 0302 	orr.w	r3, r3, #2
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1ec:	e00a      	b.n	800b204 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b1ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f6:	f043 0303 	orr.w	r3, r3, #3
 800b1fa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1fc:	e002      	b.n	800b204 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	61fb      	str	r3, [r7, #28]
      break;
 800b202:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b208:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f000 80c5 	beq.w	800b39e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a37      	ldr	r2, [pc, #220]	@ (800b2fc <HAL_SAI_Init+0x280>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d004      	beq.n	800b22c <HAL_SAI_Init+0x1b0>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a37      	ldr	r2, [pc, #220]	@ (800b304 <HAL_SAI_Init+0x288>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d106      	bne.n	800b23a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b22c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b230:	f04f 0100 	mov.w	r1, #0
 800b234:	f7fe fbfc 	bl	8009a30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b238:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a33      	ldr	r2, [pc, #204]	@ (800b30c <HAL_SAI_Init+0x290>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d004      	beq.n	800b24e <HAL_SAI_Init+0x1d2>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a31      	ldr	r2, [pc, #196]	@ (800b310 <HAL_SAI_Init+0x294>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d106      	bne.n	800b25c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b24e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b252:	f04f 0100 	mov.w	r1, #0
 800b256:	f7fe fbeb 	bl	8009a30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b25a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a2d      	ldr	r2, [pc, #180]	@ (800b318 <HAL_SAI_Init+0x29c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d004      	beq.n	800b270 <HAL_SAI_Init+0x1f4>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a2c      	ldr	r2, [pc, #176]	@ (800b31c <HAL_SAI_Init+0x2a0>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d106      	bne.n	800b27e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b270:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b274:	f04f 0100 	mov.w	r1, #0
 800b278:	f7fe fbda 	bl	8009a30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b27c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a1f      	ldr	r2, [pc, #124]	@ (800b300 <HAL_SAI_Init+0x284>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d106      	bne.n	800b296 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b288:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b28c:	f04f 0100 	mov.w	r1, #0
 800b290:	f7fe fbce 	bl	8009a30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b294:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a22      	ldr	r2, [pc, #136]	@ (800b324 <HAL_SAI_Init+0x2a8>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d106      	bne.n	800b2ae <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b2a0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b2a4:	f04f 0100 	mov.w	r1, #0
 800b2a8:	f7fe fbc2 	bl	8009a30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b2ac:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b2b6:	d139      	bne.n	800b32c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d102      	bne.n	800b2c6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b2c0:	2340      	movs	r3, #64	@ 0x40
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	e00a      	b.n	800b2dc <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ca:	2b08      	cmp	r3, #8
 800b2cc:	d103      	bne.n	800b2d6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b2ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	e002      	b.n	800b2dc <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2da:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	fb02 f303 	mul.w	r3, r2, r3
 800b2f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2f6:	613b      	str	r3, [r7, #16]
 800b2f8:	e030      	b.n	800b35c <HAL_SAI_Init+0x2e0>
 800b2fa:	bf00      	nop
 800b2fc:	40015804 	.word	0x40015804
 800b300:	58005404 	.word	0x58005404
 800b304:	40015824 	.word	0x40015824
 800b308:	40015800 	.word	0x40015800
 800b30c:	40015c04 	.word	0x40015c04
 800b310:	40015c24 	.word	0x40015c24
 800b314:	40015c00 	.word	0x40015c00
 800b318:	40016004 	.word	0x40016004
 800b31c:	40016024 	.word	0x40016024
 800b320:	40016000 	.word	0x40016000
 800b324:	58005424 	.word	0x58005424
 800b328:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b330:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b334:	d101      	bne.n	800b33a <HAL_SAI_Init+0x2be>
 800b336:	2302      	movs	r3, #2
 800b338:	e000      	b.n	800b33c <HAL_SAI_Init+0x2c0>
 800b33a:	2301      	movs	r3, #1
 800b33c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	4613      	mov	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4413      	add	r3, r2
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	4619      	mov	r1, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	fb02 f303 	mul.w	r3, r2, r3
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	fbb1 f3f3 	udiv	r3, r1, r3
 800b35a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	4a95      	ldr	r2, [pc, #596]	@ (800b5b4 <HAL_SAI_Init+0x538>)
 800b360:	fba2 2303 	umull	r2, r3, r2, r3
 800b364:	08da      	lsrs	r2, r3, #3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b36a:	6939      	ldr	r1, [r7, #16]
 800b36c:	4b91      	ldr	r3, [pc, #580]	@ (800b5b4 <HAL_SAI_Init+0x538>)
 800b36e:	fba3 2301 	umull	r2, r3, r3, r1
 800b372:	08da      	lsrs	r2, r3, #3
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	1aca      	subs	r2, r1, r3
 800b37e:	2a08      	cmp	r2, #8
 800b380:	d904      	bls.n	800b38c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b390:	2b04      	cmp	r3, #4
 800b392:	d104      	bne.n	800b39e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b398:	085a      	lsrs	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <HAL_SAI_Init+0x332>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d109      	bne.n	800b3c2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d101      	bne.n	800b3ba <HAL_SAI_Init+0x33e>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e001      	b.n	800b3be <HAL_SAI_Init+0x342>
 800b3ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3be:	623b      	str	r3, [r7, #32]
 800b3c0:	e008      	b.n	800b3d4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d102      	bne.n	800b3d0 <HAL_SAI_Init+0x354>
 800b3ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3ce:	e000      	b.n	800b3d2 <HAL_SAI_Init+0x356>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b3d4:	f7f7 fd78 	bl	8002ec8 <HAL_GetREVID>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3de:	d331      	bcc.n	800b444 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6819      	ldr	r1, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	4b73      	ldr	r3, [pc, #460]	@ (800b5b8 <HAL_SAI_Init+0x53c>)
 800b3ec:	400b      	ands	r3, r1
 800b3ee:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	6819      	ldr	r1, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3fe:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b404:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b40a:	431a      	orrs	r2, r3
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b418:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b424:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42a:	051b      	lsls	r3, r3, #20
 800b42c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b432:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	e02d      	b.n	800b4a0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6819      	ldr	r1, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	4b5b      	ldr	r3, [pc, #364]	@ (800b5bc <HAL_SAI_Init+0x540>)
 800b450:	400b      	ands	r3, r1
 800b452:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6819      	ldr	r1, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b462:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b468:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b46e:	431a      	orrs	r2, r3
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b47c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b488:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48e:	051b      	lsls	r3, r3, #20
 800b490:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b496:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	430a      	orrs	r2, r1
 800b49e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6859      	ldr	r1, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	4b45      	ldr	r3, [pc, #276]	@ (800b5c0 <HAL_SAI_Init+0x544>)
 800b4ac:	400b      	ands	r3, r1
 800b4ae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6859      	ldr	r1, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	69da      	ldr	r2, [r3, #28]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4be:	431a      	orrs	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4c4:	431a      	orrs	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6899      	ldr	r1, [r3, #8]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b5c4 <HAL_SAI_Init+0x548>)
 800b4da:	400b      	ands	r3, r1
 800b4dc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6899      	ldr	r1, [r3, #8]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4e8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b4ee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b4f4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b4fa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b500:	3b01      	subs	r3, #1
 800b502:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b504:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68d9      	ldr	r1, [r3, #12]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b51c:	400b      	ands	r3, r1
 800b51e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68d9      	ldr	r1, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b52e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b534:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b536:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b53c:	3b01      	subs	r3, #1
 800b53e:	021b      	lsls	r3, r3, #8
 800b540:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a1e      	ldr	r2, [pc, #120]	@ (800b5c8 <HAL_SAI_Init+0x54c>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d004      	beq.n	800b55e <HAL_SAI_Init+0x4e2>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a1c      	ldr	r2, [pc, #112]	@ (800b5cc <HAL_SAI_Init+0x550>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d119      	bne.n	800b592 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b562:	f023 0201 	bic.w	r2, r3, #1
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b570:	2b01      	cmp	r3, #1
 800b572:	d10e      	bne.n	800b592 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b57c:	3b01      	subs	r3, #1
 800b57e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b580:	431a      	orrs	r2, r3
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b58a:	f043 0201 	orr.w	r2, r3, #1
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3728      	adds	r7, #40	@ 0x28
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	cccccccd 	.word	0xcccccccd
 800b5b8:	f005c010 	.word	0xf005c010
 800b5bc:	f805c010 	.word	0xf805c010
 800b5c0:	ffff1ff0 	.word	0xffff1ff0
 800b5c4:	fff88000 	.word	0xfff88000
 800b5c8:	40015804 	.word	0x40015804
 800b5cc:	58005404 	.word	0x58005404

0800b5d0 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d101      	bne.n	800b5ea <HAL_SAI_DMAStop+0x1a>
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	e06c      	b.n	800b6c4 <HAL_SAI_DMAStop+0xf4>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa96 	bl	800bb24 <SAI_Disable>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b610:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b12      	cmp	r3, #18
 800b61c:	d11d      	bne.n	800b65a <HAL_SAI_DMAStop+0x8a>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b624:	2b00      	cmp	r3, #0
 800b626:	d018      	beq.n	800b65a <HAL_SAI_DMAStop+0x8a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f8 fb74 	bl	8003d1c <HAL_DMA_Abort>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00f      	beq.n	800b65a <HAL_SAI_DMAStop+0x8a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b642:	2b80      	cmp	r3, #128	@ 0x80
 800b644:	d009      	beq.n	800b65a <HAL_SAI_DMAStop+0x8a>
      {
        status = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b650:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b22      	cmp	r3, #34	@ 0x22
 800b664:	d11d      	bne.n	800b6a2 <HAL_SAI_DMAStop+0xd2>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d018      	beq.n	800b6a2 <HAL_SAI_DMAStop+0xd2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b676:	4618      	mov	r0, r3
 800b678:	f7f8 fb50 	bl	8003d1c <HAL_DMA_Abort>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00f      	beq.n	800b6a2 <HAL_SAI_DMAStop+0xd2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b68a:	2b80      	cmp	r3, #128	@ 0x80
 800b68c:	d009      	beq.n	800b6a2 <HAL_SAI_DMAStop+0xd2>
      {
        status = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b698:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f042 0208 	orr.w	r2, r2, #8
 800b6b0:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b6da:	f7f7 fbc5 	bl	8002e68 <HAL_GetTick>
 800b6de:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <HAL_SAI_Transmit_DMA+0x20>
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e098      	b.n	800b822 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	f040 8091 	bne.w	800b820 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_SAI_Transmit_DMA+0x40>
 800b708:	2302      	movs	r3, #2
 800b70a:	e08a      	b.n	800b822 <HAL_SAI_Transmit_DMA+0x156>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	88fa      	ldrh	r2, [r7, #6]
 800b71e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	88fa      	ldrh	r2, [r7, #6]
 800b726:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2212      	movs	r2, #18
 800b736:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b740:	4a3a      	ldr	r2, [pc, #232]	@ (800b82c <HAL_SAI_Transmit_DMA+0x160>)
 800b742:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b74a:	4a39      	ldr	r2, [pc, #228]	@ (800b830 <HAL_SAI_Transmit_DMA+0x164>)
 800b74c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b754:	4a37      	ldr	r2, [pc, #220]	@ (800b834 <HAL_SAI_Transmit_DMA+0x168>)
 800b756:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b75e:	2200      	movs	r2, #0
 800b760:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b76c:	4619      	mov	r1, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	331c      	adds	r3, #28
 800b774:	461a      	mov	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b77c:	f7f8 f864 	bl	8003848 <HAL_DMA_Start_IT>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d005      	beq.n	800b792 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e047      	b.n	800b822 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b792:	2100      	movs	r1, #0
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 f98d 	bl	800bab4 <SAI_InterruptFlag>
 800b79a:	4601      	mov	r1, r0
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	691a      	ldr	r2, [r3, #16]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b7b8:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b7ba:	e015      	b.n	800b7e8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b7bc:	f7f7 fb54 	bl	8002e68 <HAL_GetTick>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b7ca:	d90d      	bls.n	800b7e8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b7d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e01c      	b.n	800b822 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0e2      	beq.n	800b7bc <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d107      	bne.n	800b814 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b812:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	e000      	b.n	800b822 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800b820:	2302      	movs	r3, #2
  }
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	0800bbf9 	.word	0x0800bbf9
 800b830:	0800bb99 	.word	0x0800bb99
 800b834:	0800bc15 	.word	0x0800bc15

0800b838 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <SAI_InitI2S+0x2e>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	2b02      	cmp	r3, #2
 800b878:	d103      	bne.n	800b882 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	651a      	str	r2, [r3, #80]	@ 0x50
 800b880:	e002      	b.n	800b888 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2201      	movs	r2, #1
 800b886:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b88e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b896:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e077      	b.n	800b9a2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d107      	bne.n	800b8c8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b8c4:	665a      	str	r2, [r3, #100]	@ 0x64
 800b8c6:	e006      	b.n	800b8d6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b8ce:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	d84f      	bhi.n	800b97c <SAI_InitI2S+0x130>
 800b8dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e4 <SAI_InitI2S+0x98>)
 800b8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e2:	bf00      	nop
 800b8e4:	0800b8f5 	.word	0x0800b8f5
 800b8e8:	0800b917 	.word	0x0800b917
 800b8ec:	0800b939 	.word	0x0800b939
 800b8f0:	0800b95b 	.word	0x0800b95b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2280      	movs	r2, #128	@ 0x80
 800b8f8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	085b      	lsrs	r3, r3, #1
 800b8fe:	015a      	lsls	r2, r3, #5
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	085b      	lsrs	r3, r3, #1
 800b908:	011a      	lsls	r2, r3, #4
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2240      	movs	r2, #64	@ 0x40
 800b912:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b914:	e035      	b.n	800b982 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2280      	movs	r2, #128	@ 0x80
 800b91a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	085b      	lsrs	r3, r3, #1
 800b920:	019a      	lsls	r2, r3, #6
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	085b      	lsrs	r3, r3, #1
 800b92a:	015a      	lsls	r2, r3, #5
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2280      	movs	r2, #128	@ 0x80
 800b934:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b936:	e024      	b.n	800b982 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	22c0      	movs	r2, #192	@ 0xc0
 800b93c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	085b      	lsrs	r3, r3, #1
 800b942:	019a      	lsls	r2, r3, #6
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	085b      	lsrs	r3, r3, #1
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2280      	movs	r2, #128	@ 0x80
 800b956:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b958:	e013      	b.n	800b982 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	22e0      	movs	r2, #224	@ 0xe0
 800b95e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	085b      	lsrs	r3, r3, #1
 800b964:	019a      	lsls	r2, r3, #6
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	085b      	lsrs	r3, r3, #1
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2280      	movs	r2, #128	@ 0x80
 800b978:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b97a:	e002      	b.n	800b982 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	75fb      	strb	r3, [r7, #23]
      break;
 800b980:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d10b      	bne.n	800b9a0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d102      	bne.n	800b994 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2210      	movs	r2, #16
 800b992:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d102      	bne.n	800b9a0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2208      	movs	r2, #8
 800b99e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop

0800b9b0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <SAI_InitPCM+0x2e>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d103      	bne.n	800b9e6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	651a      	str	r2, [r3, #80]	@ 0x50
 800b9e4:	e002      	b.n	800b9ec <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b9f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ba00:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba14:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	d103      	bne.n	800ba24 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	659a      	str	r2, [r3, #88]	@ 0x58
 800ba22:	e002      	b.n	800ba2a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	220d      	movs	r2, #13
 800ba28:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d837      	bhi.n	800baa0 <SAI_InitPCM+0xf0>
 800ba30:	a201      	add	r2, pc, #4	@ (adr r2, 800ba38 <SAI_InitPCM+0x88>)
 800ba32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba36:	bf00      	nop
 800ba38:	0800ba49 	.word	0x0800ba49
 800ba3c:	0800ba5f 	.word	0x0800ba5f
 800ba40:	0800ba75 	.word	0x0800ba75
 800ba44:	0800ba8b 	.word	0x0800ba8b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2280      	movs	r2, #128	@ 0x80
 800ba4c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	011a      	lsls	r2, r3, #4
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2240      	movs	r2, #64	@ 0x40
 800ba5a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ba5c:	e023      	b.n	800baa6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2280      	movs	r2, #128	@ 0x80
 800ba62:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	015a      	lsls	r2, r3, #5
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2280      	movs	r2, #128	@ 0x80
 800ba70:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ba72:	e018      	b.n	800baa6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	22c0      	movs	r2, #192	@ 0xc0
 800ba78:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2280      	movs	r2, #128	@ 0x80
 800ba86:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ba88:	e00d      	b.n	800baa6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	22e0      	movs	r2, #224	@ 0xe0
 800ba8e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2280      	movs	r2, #128	@ 0x80
 800ba9c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ba9e:	e002      	b.n	800baa6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	75fb      	strb	r3, [r7, #23]
      break;
 800baa4:	bf00      	nop
  }

  return status;
 800baa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	371c      	adds	r7, #28
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d103      	bne.n	800bad2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f043 0308 	orr.w	r3, r3, #8
 800bad0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bad6:	2b08      	cmp	r3, #8
 800bad8:	d10b      	bne.n	800baf2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d003      	beq.n	800baea <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d103      	bne.n	800baf2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f043 0310 	orr.w	r3, r3, #16
 800baf0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d003      	beq.n	800bb02 <SAI_InterruptFlag+0x4e>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d104      	bne.n	800bb0c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	e003      	b.n	800bb14 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f043 0304 	orr.w	r3, r3, #4
 800bb12:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800bb14:	68fb      	ldr	r3, [r7, #12]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
	...

0800bb24 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bb2c:	4b18      	ldr	r3, [pc, #96]	@ (800bb90 <SAI_Disable+0x6c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a18      	ldr	r2, [pc, #96]	@ (800bb94 <SAI_Disable+0x70>)
 800bb32:	fba2 2303 	umull	r2, r3, r2, r3
 800bb36:	0b1b      	lsrs	r3, r3, #12
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bb4e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10a      	bne.n	800bb6c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800bb66:	2303      	movs	r3, #3
 800bb68:	72fb      	strb	r3, [r7, #11]
      break;
 800bb6a:	e009      	b.n	800bb80 <SAI_Disable+0x5c>
    }
    count--;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e7      	bne.n	800bb50 <SAI_Disable+0x2c>

  return status;
 800bb80:	7afb      	ldrb	r3, [r7, #11]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	24000000 	.word	0x24000000
 800bb94:	95cbec1b 	.word	0x95cbec1b

0800bb98 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbae:	d01c      	beq.n	800bbea <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bbc6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bbc8:	2100      	movs	r1, #0
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7ff ff72 	bl	800bab4 <SAI_InterruptFlag>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	43d9      	mvns	r1, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	691a      	ldr	r2, [r3, #16]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	400a      	ands	r2, r1
 800bbe0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7f7 f8aa 	bl	8002d44 <HAL_SAI_TxCpltCallback>
#endif
}
 800bbf0:	bf00      	nop
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc04:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f7f7 f886 	bl	8002d18 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7f9 fac2 	bl	80051ac <HAL_DMA_GetError>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d01d      	beq.n	800bc6a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bc4c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f7ff ff68 	bl	800bb24 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f7ff fde7 	bl	800b838 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800bc6a:	bf00      	nop
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
	...

0800bc74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e10f      	b.n	800bea6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a87      	ldr	r2, [pc, #540]	@ (800beb0 <HAL_SPI_Init+0x23c>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d00f      	beq.n	800bcb6 <HAL_SPI_Init+0x42>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a86      	ldr	r2, [pc, #536]	@ (800beb4 <HAL_SPI_Init+0x240>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d00a      	beq.n	800bcb6 <HAL_SPI_Init+0x42>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a84      	ldr	r2, [pc, #528]	@ (800beb8 <HAL_SPI_Init+0x244>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d005      	beq.n	800bcb6 <HAL_SPI_Init+0x42>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	2b0f      	cmp	r3, #15
 800bcb0:	d901      	bls.n	800bcb6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e0f7      	b.n	800bea6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f001 f968 	bl	800cf8c <SPI_GetPacketSize>
 800bcbc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a7b      	ldr	r2, [pc, #492]	@ (800beb0 <HAL_SPI_Init+0x23c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00c      	beq.n	800bce2 <HAL_SPI_Init+0x6e>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a79      	ldr	r2, [pc, #484]	@ (800beb4 <HAL_SPI_Init+0x240>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d007      	beq.n	800bce2 <HAL_SPI_Init+0x6e>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a78      	ldr	r2, [pc, #480]	@ (800beb8 <HAL_SPI_Init+0x244>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d002      	beq.n	800bce2 <HAL_SPI_Init+0x6e>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b08      	cmp	r3, #8
 800bce0:	d811      	bhi.n	800bd06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bce6:	4a72      	ldr	r2, [pc, #456]	@ (800beb0 <HAL_SPI_Init+0x23c>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d009      	beq.n	800bd00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a70      	ldr	r2, [pc, #448]	@ (800beb4 <HAL_SPI_Init+0x240>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d004      	beq.n	800bd00 <HAL_SPI_Init+0x8c>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a6f      	ldr	r2, [pc, #444]	@ (800beb8 <HAL_SPI_Init+0x244>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d104      	bne.n	800bd0a <HAL_SPI_Init+0x96>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b10      	cmp	r3, #16
 800bd04:	d901      	bls.n	800bd0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e0cd      	b.n	800bea6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7f5 fcee 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2202      	movs	r2, #2
 800bd28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 0201 	bic.w	r2, r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bd46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd50:	d119      	bne.n	800bd86 <HAL_SPI_Init+0x112>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd5a:	d103      	bne.n	800bd64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d008      	beq.n	800bd76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10c      	bne.n	800bd86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd74:	d107      	bne.n	800bd86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bd84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00f      	beq.n	800bdb2 <HAL_SPI_Init+0x13e>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	2b06      	cmp	r3, #6
 800bd98:	d90b      	bls.n	800bdb2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	430a      	orrs	r2, r1
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	e007      	b.n	800bdc2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bdc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69da      	ldr	r2, [r3, #28]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	431a      	orrs	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdd4:	ea42 0103 	orr.w	r1, r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	430a      	orrs	r2, r1
 800bde2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdec:	431a      	orrs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	431a      	orrs	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	431a      	orrs	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	431a      	orrs	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	431a      	orrs	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be16:	431a      	orrs	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	431a      	orrs	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be22:	ea42 0103 	orr.w	r1, r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d113      	bne.n	800be62 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800be60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0201 	bic.w	r2, r2, #1
 800be70:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	430a      	orrs	r2, r1
 800be92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	40013000 	.word	0x40013000
 800beb4:	40003800 	.word	0x40003800
 800beb8:	40003c00 	.word	0x40003c00

0800bebc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	603b      	str	r3, [r7, #0]
 800bec8:	4613      	mov	r3, r2
 800beca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3320      	adds	r3, #32
 800bed2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bed4:	f7f6 ffc8 	bl	8002e68 <HAL_GetTick>
 800bed8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d001      	beq.n	800beea <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800bee6:	2302      	movs	r3, #2
 800bee8:	e1d1      	b.n	800c28e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <HAL_SPI_Transmit+0x3a>
 800bef0:	88fb      	ldrh	r3, [r7, #6]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e1c9      	b.n	800c28e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d101      	bne.n	800bf08 <HAL_SPI_Transmit+0x4c>
 800bf04:	2302      	movs	r3, #2
 800bf06:	e1c2      	b.n	800c28e <HAL_SPI_Transmit+0x3d2>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2203      	movs	r2, #3
 800bf14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	88fa      	ldrh	r2, [r7, #6]
 800bf2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	88fa      	ldrh	r2, [r7, #6]
 800bf32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bf60:	d108      	bne.n	800bf74 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	e009      	b.n	800bf88 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bf86:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	685a      	ldr	r2, [r3, #4]
 800bf8e:	4b96      	ldr	r3, [pc, #600]	@ (800c1e8 <HAL_SPI_Transmit+0x32c>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	88f9      	ldrh	r1, [r7, #6]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	6812      	ldr	r2, [r2, #0]
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f042 0201 	orr.w	r2, r2, #1
 800bfaa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfb4:	d107      	bne.n	800bfc6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	2b0f      	cmp	r3, #15
 800bfcc:	d947      	bls.n	800c05e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bfce:	e03f      	b.n	800c050 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d114      	bne.n	800c008 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6812      	ldr	r2, [r2, #0]
 800bfe8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfee:	1d1a      	adds	r2, r3, #4
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	b29a      	uxth	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c006:	e023      	b.n	800c050 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c008:	f7f6 ff2e 	bl	8002e68 <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d803      	bhi.n	800c020 <HAL_SPI_Transmit+0x164>
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01e:	d102      	bne.n	800c026 <HAL_SPI_Transmit+0x16a>
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d114      	bne.n	800c050 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 fee2 	bl	800cdf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c032:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e11e      	b.n	800c28e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c056:	b29b      	uxth	r3, r3
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1b9      	bne.n	800bfd0 <HAL_SPI_Transmit+0x114>
 800c05c:	e0f1      	b.n	800c242 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	2b07      	cmp	r3, #7
 800c064:	f240 80e6 	bls.w	800c234 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c068:	e05d      	b.n	800c126 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	2b02      	cmp	r3, #2
 800c076:	d132      	bne.n	800c0de <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c07e:	b29b      	uxth	r3, r3
 800c080:	2b01      	cmp	r3, #1
 800c082:	d918      	bls.n	800c0b6 <HAL_SPI_Transmit+0x1fa>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d014      	beq.n	800c0b6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6812      	ldr	r2, [r2, #0]
 800c096:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c09c:	1d1a      	adds	r2, r3, #4
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3b02      	subs	r3, #2
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c0b4:	e037      	b.n	800c126 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0ba:	881a      	ldrh	r2, [r3, #0]
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0c4:	1c9a      	adds	r2, r3, #2
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c0dc:	e023      	b.n	800c126 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0de:	f7f6 fec3 	bl	8002e68 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d803      	bhi.n	800c0f6 <HAL_SPI_Transmit+0x23a>
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d102      	bne.n	800c0fc <HAL_SPI_Transmit+0x240>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d114      	bne.n	800c126 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 fe77 	bl	800cdf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c108:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e0b3      	b.n	800c28e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d19b      	bne.n	800c06a <HAL_SPI_Transmit+0x1ae>
 800c132:	e086      	b.n	800c242 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	f003 0302 	and.w	r3, r3, #2
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d154      	bne.n	800c1ec <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c148:	b29b      	uxth	r3, r3
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d918      	bls.n	800c180 <HAL_SPI_Transmit+0x2c4>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c152:	2b40      	cmp	r3, #64	@ 0x40
 800c154:	d914      	bls.n	800c180 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	6812      	ldr	r2, [r2, #0]
 800c160:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c166:	1d1a      	adds	r2, r3, #4
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c172:	b29b      	uxth	r3, r3
 800c174:	3b04      	subs	r3, #4
 800c176:	b29a      	uxth	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c17e:	e059      	b.n	800c234 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c186:	b29b      	uxth	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d917      	bls.n	800c1bc <HAL_SPI_Transmit+0x300>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c190:	2b00      	cmp	r3, #0
 800c192:	d013      	beq.n	800c1bc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c198:	881a      	ldrh	r2, [r3, #0]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1a2:	1c9a      	adds	r2, r3, #2
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	3b02      	subs	r3, #2
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c1ba:	e03b      	b.n	800c234 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3320      	adds	r3, #32
 800c1c6:	7812      	ldrb	r2, [r2, #0]
 800c1c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c1e6:	e025      	b.n	800c234 <HAL_SPI_Transmit+0x378>
 800c1e8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1ec:	f7f6 fe3c 	bl	8002e68 <HAL_GetTick>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d803      	bhi.n	800c204 <HAL_SPI_Transmit+0x348>
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c202:	d102      	bne.n	800c20a <HAL_SPI_Transmit+0x34e>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d114      	bne.n	800c234 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f000 fdf0 	bl	800cdf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c216:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e02c      	b.n	800c28e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f af79 	bne.w	800c134 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2200      	movs	r2, #0
 800c24a:	2108      	movs	r1, #8
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 fe6f 	bl	800cf30 <SPI_WaitOnFlagUntilTimeout>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d007      	beq.n	800c268 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c25e:	f043 0220 	orr.w	r2, r3, #32
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f000 fdc1 	bl	800cdf0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	e000      	b.n	800c28e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c28c:	2300      	movs	r3, #0
  }
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop

0800c298 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b088      	sub	sp, #32
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	603b      	str	r3, [r7, #0]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ac:	095b      	lsrs	r3, r3, #5
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3330      	adds	r3, #48	@ 0x30
 800c2ba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2bc:	f7f6 fdd4 	bl	8002e68 <HAL_GetTick>
 800c2c0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d001      	beq.n	800c2d2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	e250      	b.n	800c774 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <HAL_SPI_Receive+0x46>
 800c2d8:	88fb      	ldrh	r3, [r7, #6]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e248      	b.n	800c774 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d101      	bne.n	800c2f0 <HAL_SPI_Receive+0x58>
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	e241      	b.n	800c774 <HAL_SPI_Receive+0x4dc>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2204      	movs	r2, #4
 800c2fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	88fa      	ldrh	r2, [r7, #6]
 800c312:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	88fa      	ldrh	r2, [r7, #6]
 800c31a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2200      	movs	r2, #0
 800c33e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c348:	d108      	bne.n	800c35c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	e009      	b.n	800c370 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c36e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	4b95      	ldr	r3, [pc, #596]	@ (800c5cc <HAL_SPI_Receive+0x334>)
 800c378:	4013      	ands	r3, r2
 800c37a:	88f9      	ldrh	r1, [r7, #6]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	6812      	ldr	r2, [r2, #0]
 800c380:	430b      	orrs	r3, r1
 800c382:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f042 0201 	orr.w	r2, r2, #1
 800c392:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c39c:	d107      	bne.n	800c3ae <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	2b0f      	cmp	r3, #15
 800c3b4:	d96c      	bls.n	800c490 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c3b6:	e064      	b.n	800c482 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d114      	bne.n	800c3f8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c3d8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c3f6:	e044      	b.n	800c482 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	8bfa      	ldrh	r2, [r7, #30]
 800c402:	429a      	cmp	r2, r3
 800c404:	d919      	bls.n	800c43a <HAL_SPI_Receive+0x1a2>
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d014      	beq.n	800c43a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c418:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c41a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c420:	1d1a      	adds	r2, r3, #4
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	3b01      	subs	r3, #1
 800c430:	b29a      	uxth	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c438:	e023      	b.n	800c482 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c43a:	f7f6 fd15 	bl	8002e68 <HAL_GetTick>
 800c43e:	4602      	mov	r2, r0
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	429a      	cmp	r2, r3
 800c448:	d803      	bhi.n	800c452 <HAL_SPI_Receive+0x1ba>
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c450:	d102      	bne.n	800c458 <HAL_SPI_Receive+0x1c0>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d114      	bne.n	800c482 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fcc9 	bl	800cdf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c464:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2201      	movs	r2, #1
 800c472:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c47e:	2303      	movs	r3, #3
 800c480:	e178      	b.n	800c774 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c488:	b29b      	uxth	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d194      	bne.n	800c3b8 <HAL_SPI_Receive+0x120>
 800c48e:	e15e      	b.n	800c74e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	2b07      	cmp	r3, #7
 800c496:	f240 8153 	bls.w	800c740 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c49a:	e08f      	b.n	800c5bc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d114      	bne.n	800c4dc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4b6:	69ba      	ldr	r2, [r7, #24]
 800c4b8:	8812      	ldrh	r2, [r2, #0]
 800c4ba:	b292      	uxth	r2, r2
 800c4bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4c2:	1c9a      	adds	r2, r3, #2
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c4da:	e06f      	b.n	800c5bc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	8bfa      	ldrh	r2, [r7, #30]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d924      	bls.n	800c534 <HAL_SPI_Receive+0x29c>
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d01f      	beq.n	800c534 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	8812      	ldrh	r2, [r2, #0]
 800c4fc:	b292      	uxth	r2, r2
 800c4fe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c504:	1c9a      	adds	r2, r3, #2
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c50e:	69ba      	ldr	r2, [r7, #24]
 800c510:	8812      	ldrh	r2, [r2, #0]
 800c512:	b292      	uxth	r2, r2
 800c514:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c51a:	1c9a      	adds	r2, r3, #2
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c526:	b29b      	uxth	r3, r3
 800c528:	3b02      	subs	r3, #2
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c532:	e043      	b.n	800c5bc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d119      	bne.n	800c574 <HAL_SPI_Receive+0x2dc>
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d014      	beq.n	800c574 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c54e:	69ba      	ldr	r2, [r7, #24]
 800c550:	8812      	ldrh	r2, [r2, #0]
 800c552:	b292      	uxth	r2, r2
 800c554:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c55a:	1c9a      	adds	r2, r3, #2
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c566:	b29b      	uxth	r3, r3
 800c568:	3b01      	subs	r3, #1
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c572:	e023      	b.n	800c5bc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c574:	f7f6 fc78 	bl	8002e68 <HAL_GetTick>
 800c578:	4602      	mov	r2, r0
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	429a      	cmp	r2, r3
 800c582:	d803      	bhi.n	800c58c <HAL_SPI_Receive+0x2f4>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58a:	d102      	bne.n	800c592 <HAL_SPI_Receive+0x2fa>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d114      	bne.n	800c5bc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 fc2c 	bl	800cdf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c59e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	e0db      	b.n	800c774 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f47f af69 	bne.w	800c49c <HAL_SPI_Receive+0x204>
 800c5ca:	e0c0      	b.n	800c74e <HAL_SPI_Receive+0x4b6>
 800c5cc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d117      	bne.n	800c616 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5f2:	7812      	ldrb	r2, [r2, #0]
 800c5f4:	b2d2      	uxtb	r2, r2
 800c5f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5fc:	1c5a      	adds	r2, r3, #1
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c608:	b29b      	uxth	r3, r3
 800c60a:	3b01      	subs	r3, #1
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c614:	e094      	b.n	800c740 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	8bfa      	ldrh	r2, [r7, #30]
 800c620:	429a      	cmp	r2, r3
 800c622:	d946      	bls.n	800c6b2 <HAL_SPI_Receive+0x41a>
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d041      	beq.n	800c6b2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c63a:	7812      	ldrb	r2, [r2, #0]
 800c63c:	b2d2      	uxtb	r2, r2
 800c63e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c644:	1c5a      	adds	r2, r3, #1
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c656:	7812      	ldrb	r2, [r2, #0]
 800c658:	b2d2      	uxtb	r2, r2
 800c65a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c672:	7812      	ldrb	r2, [r2, #0]
 800c674:	b2d2      	uxtb	r2, r2
 800c676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c68e:	7812      	ldrb	r2, [r2, #0]
 800c690:	b2d2      	uxtb	r2, r2
 800c692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	3b04      	subs	r3, #4
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6b0:	e046      	b.n	800c740 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d81c      	bhi.n	800c6f8 <HAL_SPI_Receive+0x460>
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d017      	beq.n	800c6f8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6d4:	7812      	ldrb	r2, [r2, #0]
 800c6d6:	b2d2      	uxtb	r2, r2
 800c6d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6f6:	e023      	b.n	800c740 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6f8:	f7f6 fbb6 	bl	8002e68 <HAL_GetTick>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	683a      	ldr	r2, [r7, #0]
 800c704:	429a      	cmp	r2, r3
 800c706:	d803      	bhi.n	800c710 <HAL_SPI_Receive+0x478>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70e:	d102      	bne.n	800c716 <HAL_SPI_Receive+0x47e>
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d114      	bne.n	800c740 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f000 fb6a 	bl	800cdf0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c722:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c73c:	2303      	movs	r3, #3
 800c73e:	e019      	b.n	800c774 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c746:	b29b      	uxth	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f47f af41 	bne.w	800c5d0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 fb4e 	bl	800cdf0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e000      	b.n	800c774 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c772:	2300      	movs	r3, #0
  }
}
 800c774:	4618      	mov	r0, r3
 800c776:	3720      	adds	r7, #32
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08e      	sub	sp, #56	@ 0x38
 800c780:	af02      	add	r7, sp, #8
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3320      	adds	r3, #32
 800c790:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3330      	adds	r3, #48	@ 0x30
 800c798:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c79e:	095b      	lsrs	r3, r3, #5
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7a6:	f7f6 fb5f 	bl	8002e68 <HAL_GetTick>
 800c7aa:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800c7ac:	887b      	ldrh	r3, [r7, #2]
 800c7ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800c7b0:	887b      	ldrh	r3, [r7, #2]
 800c7b2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d001      	beq.n	800c7c4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	e310      	b.n	800cde6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d005      	beq.n	800c7d6 <HAL_SPI_TransmitReceive+0x5a>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <HAL_SPI_TransmitReceive+0x5a>
 800c7d0:	887b      	ldrh	r3, [r7, #2]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e305      	b.n	800cde6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d101      	bne.n	800c7e8 <HAL_SPI_TransmitReceive+0x6c>
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	e2fe      	b.n	800cde6 <HAL_SPI_TransmitReceive+0x66a>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	887a      	ldrh	r2, [r7, #2]
 800c80a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	887a      	ldrh	r2, [r7, #2]
 800c812:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	887a      	ldrh	r2, [r7, #2]
 800c820:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	887a      	ldrh	r2, [r7, #2]
 800c828:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68da      	ldr	r2, [r3, #12]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800c846:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a70      	ldr	r2, [pc, #448]	@ (800ca10 <HAL_SPI_TransmitReceive+0x294>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d009      	beq.n	800c866 <HAL_SPI_TransmitReceive+0xea>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a6f      	ldr	r2, [pc, #444]	@ (800ca14 <HAL_SPI_TransmitReceive+0x298>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d004      	beq.n	800c866 <HAL_SPI_TransmitReceive+0xea>
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a6d      	ldr	r2, [pc, #436]	@ (800ca18 <HAL_SPI_TransmitReceive+0x29c>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d102      	bne.n	800c86c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800c866:	2310      	movs	r3, #16
 800c868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c86a:	e001      	b.n	800c870 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800c86c:	2308      	movs	r3, #8
 800c86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	4b69      	ldr	r3, [pc, #420]	@ (800ca1c <HAL_SPI_TransmitReceive+0x2a0>)
 800c878:	4013      	ands	r3, r2
 800c87a:	8879      	ldrh	r1, [r7, #2]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	6812      	ldr	r2, [r2, #0]
 800c880:	430b      	orrs	r3, r1
 800c882:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f042 0201 	orr.w	r2, r2, #1
 800c892:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c89c:	d107      	bne.n	800c8ae <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	2b0f      	cmp	r3, #15
 800c8b4:	f240 80a2 	bls.w	800c9fc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800c8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ba:	089b      	lsrs	r3, r3, #2
 800c8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c8be:	e094      	b.n	800c9ea <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	695b      	ldr	r3, [r3, #20]
 800c8c6:	f003 0302 	and.w	r3, r3, #2
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d120      	bne.n	800c910 <HAL_SPI_TransmitReceive+0x194>
 800c8ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d01d      	beq.n	800c910 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c8d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c8d6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d217      	bcs.n	800c910 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6812      	ldr	r2, [r2, #0]
 800c8ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8f0:	1d1a      	adds	r2, r3, #4
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	3b01      	subs	r3, #1
 800c900:	b29a      	uxth	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c90e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c918:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d065      	beq.n	800c9ea <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d118      	bne.n	800c95e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c934:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c936:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c93c:	1d1a      	adds	r2, r3, #4
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c948:	b29b      	uxth	r3, r3
 800c94a:	3b01      	subs	r3, #1
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c95a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c95c:	e045      	b.n	800c9ea <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c95e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c960:	8bfb      	ldrh	r3, [r7, #30]
 800c962:	429a      	cmp	r2, r3
 800c964:	d21d      	bcs.n	800c9a2 <HAL_SPI_TransmitReceive+0x226>
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d018      	beq.n	800c9a2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c978:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c97a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c980:	1d1a      	adds	r2, r3, #4
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	3b01      	subs	r3, #1
 800c990:	b29a      	uxth	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c99e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c9a0:	e023      	b.n	800c9ea <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9a2:	f7f6 fa61 	bl	8002e68 <HAL_GetTick>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d803      	bhi.n	800c9ba <HAL_SPI_TransmitReceive+0x23e>
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b8:	d102      	bne.n	800c9c0 <HAL_SPI_TransmitReceive+0x244>
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d114      	bne.n	800c9ea <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 fa15 	bl	800cdf0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	e1fd      	b.n	800cde6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c9ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f47f af67 	bne.w	800c8c0 <HAL_SPI_TransmitReceive+0x144>
 800c9f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f47f af63 	bne.w	800c8c0 <HAL_SPI_TransmitReceive+0x144>
 800c9fa:	e1ce      	b.n	800cd9a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	2b07      	cmp	r3, #7
 800ca02:	f240 81c2 	bls.w	800cd8a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800ca06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca08:	085b      	lsrs	r3, r3, #1
 800ca0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ca0c:	e0c9      	b.n	800cba2 <HAL_SPI_TransmitReceive+0x426>
 800ca0e:	bf00      	nop
 800ca10:	40013000 	.word	0x40013000
 800ca14:	40003800 	.word	0x40003800
 800ca18:	40003c00 	.word	0x40003c00
 800ca1c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	f003 0302 	and.w	r3, r3, #2
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d11f      	bne.n	800ca6e <HAL_SPI_TransmitReceive+0x2f2>
 800ca2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01c      	beq.n	800ca6e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ca34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ca36:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ca38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d216      	bcs.n	800ca6e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca44:	881a      	ldrh	r2, [r3, #0]
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca4e:	1c9a      	adds	r2, r3, #2
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ca6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	695b      	ldr	r3, [r3, #20]
 800ca74:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ca76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 8092 	beq.w	800cba2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	695b      	ldr	r3, [r3, #20]
 800ca84:	f003 0301 	and.w	r3, r3, #1
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d118      	bne.n	800cabe <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca90:	6a3a      	ldr	r2, [r7, #32]
 800ca92:	8812      	ldrh	r2, [r2, #0]
 800ca94:	b292      	uxth	r2, r2
 800ca96:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca9c:	1c9a      	adds	r2, r3, #2
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	3b01      	subs	r3, #1
 800caac:	b29a      	uxth	r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800caba:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cabc:	e071      	b.n	800cba2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cabe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cac0:	8bfb      	ldrh	r3, [r7, #30]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d228      	bcs.n	800cb18 <HAL_SPI_TransmitReceive+0x39c>
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d023      	beq.n	800cb18 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cad4:	6a3a      	ldr	r2, [r7, #32]
 800cad6:	8812      	ldrh	r2, [r2, #0]
 800cad8:	b292      	uxth	r2, r2
 800cada:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cae0:	1c9a      	adds	r2, r3, #2
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caea:	6a3a      	ldr	r2, [r7, #32]
 800caec:	8812      	ldrh	r2, [r2, #0]
 800caee:	b292      	uxth	r2, r2
 800caf0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caf6:	1c9a      	adds	r2, r3, #2
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	3b02      	subs	r3, #2
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb14:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb16:	e044      	b.n	800cba2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cb18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d11d      	bne.n	800cb5a <HAL_SPI_TransmitReceive+0x3de>
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d018      	beq.n	800cb5a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb2c:	6a3a      	ldr	r2, [r7, #32]
 800cb2e:	8812      	ldrh	r2, [r2, #0]
 800cb30:	b292      	uxth	r2, r2
 800cb32:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb38:	1c9a      	adds	r2, r3, #2
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	3b01      	subs	r3, #1
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb56:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb58:	e023      	b.n	800cba2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb5a:	f7f6 f985 	bl	8002e68 <HAL_GetTick>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d803      	bhi.n	800cb72 <HAL_SPI_TransmitReceive+0x3f6>
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb70:	d102      	bne.n	800cb78 <HAL_SPI_TransmitReceive+0x3fc>
 800cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d114      	bne.n	800cba2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 f939 	bl	800cdf0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e121      	b.n	800cde6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cba2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f47f af3b 	bne.w	800ca20 <HAL_SPI_TransmitReceive+0x2a4>
 800cbaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f47f af37 	bne.w	800ca20 <HAL_SPI_TransmitReceive+0x2a4>
 800cbb2:	e0f2      	b.n	800cd9a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	f003 0302 	and.w	r3, r3, #2
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d121      	bne.n	800cc06 <HAL_SPI_TransmitReceive+0x48a>
 800cbc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01e      	beq.n	800cc06 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cbc8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cbca:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbce:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d218      	bcs.n	800cc06 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3320      	adds	r3, #32
 800cbde:	7812      	ldrb	r2, [r2, #0]
 800cbe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc04:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cc0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f000 80ba 	beq.w	800cd8a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d11b      	bne.n	800cc5c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc30:	7812      	ldrb	r2, [r2, #0]
 800cc32:	b2d2      	uxtb	r2, r2
 800cc34:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc58:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cc5a:	e096      	b.n	800cd8a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cc5c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cc5e:	8bfb      	ldrh	r3, [r7, #30]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d24a      	bcs.n	800ccfa <HAL_SPI_TransmitReceive+0x57e>
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d045      	beq.n	800ccfa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc7a:	7812      	ldrb	r2, [r2, #0]
 800cc7c:	b2d2      	uxtb	r2, r2
 800cc7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc84:	1c5a      	adds	r2, r3, #1
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc96:	7812      	ldrb	r2, [r2, #0]
 800cc98:	b2d2      	uxtb	r2, r2
 800cc9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cca0:	1c5a      	adds	r2, r3, #1
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccb2:	7812      	ldrb	r2, [r2, #0]
 800ccb4:	b2d2      	uxtb	r2, r2
 800ccb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccce:	7812      	ldrb	r2, [r2, #0]
 800ccd0:	b2d2      	uxtb	r2, r2
 800ccd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccd8:	1c5a      	adds	r2, r3, #1
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	3b04      	subs	r3, #4
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccf6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ccf8:	e047      	b.n	800cd8a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ccfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ccfc:	2b03      	cmp	r3, #3
 800ccfe:	d820      	bhi.n	800cd42 <HAL_SPI_TransmitReceive+0x5c6>
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01b      	beq.n	800cd42 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd16:	7812      	ldrb	r2, [r2, #0]
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd40:	e023      	b.n	800cd8a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd42:	f7f6 f891 	bl	8002e68 <HAL_GetTick>
 800cd46:	4602      	mov	r2, r0
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d803      	bhi.n	800cd5a <HAL_SPI_TransmitReceive+0x5de>
 800cd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd58:	d102      	bne.n	800cd60 <HAL_SPI_TransmitReceive+0x5e4>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d114      	bne.n	800cd8a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 f845 	bl	800cdf0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cd86:	2303      	movs	r3, #3
 800cd88:	e02d      	b.n	800cde6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f47f af11 	bne.w	800cbb4 <HAL_SPI_TransmitReceive+0x438>
 800cd92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f47f af0d 	bne.w	800cbb4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	9300      	str	r3, [sp, #0]
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda0:	2200      	movs	r2, #0
 800cda2:	2108      	movs	r1, #8
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 f8c3 	bl	800cf30 <SPI_WaitOnFlagUntilTimeout>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d007      	beq.n	800cdc0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdb6:	f043 0220 	orr.w	r2, r3, #32
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 f815 	bl	800cdf0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e000      	b.n	800cde6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800cde4:	2300      	movs	r3, #0
  }
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3730      	adds	r7, #48	@ 0x30
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop

0800cdf0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	695b      	ldr	r3, [r3, #20]
 800cdfe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	699a      	ldr	r2, [r3, #24]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f042 0208 	orr.w	r2, r2, #8
 800ce0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	699a      	ldr	r2, [r3, #24]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f042 0210 	orr.w	r2, r2, #16
 800ce1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f022 0201 	bic.w	r2, r2, #1
 800ce2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6919      	ldr	r1, [r3, #16]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	4b3c      	ldr	r3, [pc, #240]	@ (800cf2c <SPI_CloseTransfer+0x13c>)
 800ce3c:	400b      	ands	r3, r1
 800ce3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689a      	ldr	r2, [r3, #8]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ce4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b04      	cmp	r3, #4
 800ce5a:	d014      	beq.n	800ce86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f003 0320 	and.w	r3, r3, #32
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00f      	beq.n	800ce86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	699a      	ldr	r2, [r3, #24]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f042 0220 	orr.w	r2, r2, #32
 800ce84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	2b03      	cmp	r3, #3
 800ce90:	d014      	beq.n	800cebc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00f      	beq.n	800cebc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cea2:	f043 0204 	orr.w	r2, r3, #4
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ceba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00f      	beq.n	800cee6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cecc:	f043 0201 	orr.w	r2, r3, #1
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	699a      	ldr	r2, [r3, #24]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cee4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00f      	beq.n	800cf10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cef6:	f043 0208 	orr.w	r2, r3, #8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	699a      	ldr	r2, [r3, #24]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800cf20:	bf00      	nop
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	fffffc90 	.word	0xfffffc90

0800cf30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cf40:	e010      	b.n	800cf64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf42:	f7f5 ff91 	bl	8002e68 <HAL_GetTick>
 800cf46:	4602      	mov	r2, r0
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d803      	bhi.n	800cf5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf58:	d102      	bne.n	800cf60 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e00f      	b.n	800cf84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	695a      	ldr	r2, [r3, #20]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	bf0c      	ite	eq
 800cf74:	2301      	moveq	r3, #1
 800cf76:	2300      	movne	r3, #0
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d0df      	beq.n	800cf42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf98:	095b      	lsrs	r3, r3, #5
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	3307      	adds	r3, #7
 800cfaa:	08db      	lsrs	r3, r3, #3
 800cfac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	fb02 f303 	mul.w	r3, r2, r3
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e049      	b.n	800d068 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d106      	bne.n	800cfee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f841 	bl	800d070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2202      	movs	r2, #2
 800cff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3304      	adds	r3, #4
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f000 f9e7 	bl	800d3d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b01      	cmp	r3, #1
 800d096:	d001      	beq.n	800d09c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	e054      	b.n	800d146 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2202      	movs	r2, #2
 800d0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	68da      	ldr	r2, [r3, #12]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f042 0201 	orr.w	r2, r2, #1
 800d0b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a26      	ldr	r2, [pc, #152]	@ (800d154 <HAL_TIM_Base_Start_IT+0xd0>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d022      	beq.n	800d104 <HAL_TIM_Base_Start_IT+0x80>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0c6:	d01d      	beq.n	800d104 <HAL_TIM_Base_Start_IT+0x80>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a22      	ldr	r2, [pc, #136]	@ (800d158 <HAL_TIM_Base_Start_IT+0xd4>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d018      	beq.n	800d104 <HAL_TIM_Base_Start_IT+0x80>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a21      	ldr	r2, [pc, #132]	@ (800d15c <HAL_TIM_Base_Start_IT+0xd8>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d013      	beq.n	800d104 <HAL_TIM_Base_Start_IT+0x80>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a1f      	ldr	r2, [pc, #124]	@ (800d160 <HAL_TIM_Base_Start_IT+0xdc>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d00e      	beq.n	800d104 <HAL_TIM_Base_Start_IT+0x80>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a1e      	ldr	r2, [pc, #120]	@ (800d164 <HAL_TIM_Base_Start_IT+0xe0>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d009      	beq.n	800d104 <HAL_TIM_Base_Start_IT+0x80>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a1c      	ldr	r2, [pc, #112]	@ (800d168 <HAL_TIM_Base_Start_IT+0xe4>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d004      	beq.n	800d104 <HAL_TIM_Base_Start_IT+0x80>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a1b      	ldr	r2, [pc, #108]	@ (800d16c <HAL_TIM_Base_Start_IT+0xe8>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d115      	bne.n	800d130 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689a      	ldr	r2, [r3, #8]
 800d10a:	4b19      	ldr	r3, [pc, #100]	@ (800d170 <HAL_TIM_Base_Start_IT+0xec>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b06      	cmp	r3, #6
 800d114:	d015      	beq.n	800d142 <HAL_TIM_Base_Start_IT+0xbe>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d11c:	d011      	beq.n	800d142 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f042 0201 	orr.w	r2, r2, #1
 800d12c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d12e:	e008      	b.n	800d142 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f042 0201 	orr.w	r2, r2, #1
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	e000      	b.n	800d144 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3714      	adds	r7, #20
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	40010000 	.word	0x40010000
 800d158:	40000400 	.word	0x40000400
 800d15c:	40000800 	.word	0x40000800
 800d160:	40000c00 	.word	0x40000c00
 800d164:	40010400 	.word	0x40010400
 800d168:	40001800 	.word	0x40001800
 800d16c:	40014000 	.word	0x40014000
 800d170:	00010007 	.word	0x00010007

0800d174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f003 0302 	and.w	r3, r3, #2
 800d192:	2b00      	cmp	r3, #0
 800d194:	d020      	beq.n	800d1d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f003 0302 	and.w	r3, r3, #2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01b      	beq.n	800d1d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f06f 0202 	mvn.w	r2, #2
 800d1a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	699b      	ldr	r3, [r3, #24]
 800d1b6:	f003 0303 	and.w	r3, r3, #3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f8e9 	bl	800d396 <HAL_TIM_IC_CaptureCallback>
 800d1c4:	e005      	b.n	800d1d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f8db 	bl	800d382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f8ec 	bl	800d3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	f003 0304 	and.w	r3, r3, #4
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d020      	beq.n	800d224 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f003 0304 	and.w	r3, r3, #4
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01b      	beq.n	800d224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f06f 0204 	mvn.w	r2, #4
 800d1f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f8c3 	bl	800d396 <HAL_TIM_IC_CaptureCallback>
 800d210:	e005      	b.n	800d21e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f8b5 	bl	800d382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f8c6 	bl	800d3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	f003 0308 	and.w	r3, r3, #8
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d020      	beq.n	800d270 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f003 0308 	and.w	r3, r3, #8
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01b      	beq.n	800d270 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f06f 0208 	mvn.w	r2, #8
 800d240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2204      	movs	r2, #4
 800d246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f89d 	bl	800d396 <HAL_TIM_IC_CaptureCallback>
 800d25c:	e005      	b.n	800d26a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f88f 	bl	800d382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f8a0 	bl	800d3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	f003 0310 	and.w	r3, r3, #16
 800d276:	2b00      	cmp	r3, #0
 800d278:	d020      	beq.n	800d2bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f003 0310 	and.w	r3, r3, #16
 800d280:	2b00      	cmp	r3, #0
 800d282:	d01b      	beq.n	800d2bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f06f 0210 	mvn.w	r2, #16
 800d28c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2208      	movs	r2, #8
 800d292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	69db      	ldr	r3, [r3, #28]
 800d29a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d003      	beq.n	800d2aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f877 	bl	800d396 <HAL_TIM_IC_CaptureCallback>
 800d2a8:	e005      	b.n	800d2b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f869 	bl	800d382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 f87a 	bl	800d3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00c      	beq.n	800d2e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d007      	beq.n	800d2e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f06f 0201 	mvn.w	r2, #1
 800d2d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7f4 f86a 	bl	80013b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d104      	bne.n	800d2f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00c      	beq.n	800d30e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d007      	beq.n	800d30e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f90d 	bl	800d528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00c      	beq.n	800d332 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d007      	beq.n	800d332 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f905 	bl	800d53c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00c      	beq.n	800d356 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d342:	2b00      	cmp	r3, #0
 800d344:	d007      	beq.n	800d356 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f834 	bl	800d3be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	f003 0320 	and.w	r3, r3, #32
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00c      	beq.n	800d37a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f003 0320 	and.w	r3, r3, #32
 800d366:	2b00      	cmp	r3, #0
 800d368:	d007      	beq.n	800d37a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f06f 0220 	mvn.w	r2, #32
 800d372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 f8cd 	bl	800d514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d37a:	bf00      	nop
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d39e:	bf00      	nop
 800d3a0:	370c      	adds	r7, #12
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr

0800d3aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3aa:	b480      	push	{r7}
 800d3ac:	b083      	sub	sp, #12
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3b2:	bf00      	nop
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b083      	sub	sp, #12
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3c6:	bf00      	nop
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a43      	ldr	r2, [pc, #268]	@ (800d4f4 <TIM_Base_SetConfig+0x120>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d013      	beq.n	800d414 <TIM_Base_SetConfig+0x40>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3f2:	d00f      	beq.n	800d414 <TIM_Base_SetConfig+0x40>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4a40      	ldr	r2, [pc, #256]	@ (800d4f8 <TIM_Base_SetConfig+0x124>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d00b      	beq.n	800d414 <TIM_Base_SetConfig+0x40>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a3f      	ldr	r2, [pc, #252]	@ (800d4fc <TIM_Base_SetConfig+0x128>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d007      	beq.n	800d414 <TIM_Base_SetConfig+0x40>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a3e      	ldr	r2, [pc, #248]	@ (800d500 <TIM_Base_SetConfig+0x12c>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d003      	beq.n	800d414 <TIM_Base_SetConfig+0x40>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a3d      	ldr	r2, [pc, #244]	@ (800d504 <TIM_Base_SetConfig+0x130>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d108      	bne.n	800d426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d41a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	4313      	orrs	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4a32      	ldr	r2, [pc, #200]	@ (800d4f4 <TIM_Base_SetConfig+0x120>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d01f      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d434:	d01b      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a2f      	ldr	r2, [pc, #188]	@ (800d4f8 <TIM_Base_SetConfig+0x124>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d017      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a2e      	ldr	r2, [pc, #184]	@ (800d4fc <TIM_Base_SetConfig+0x128>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d013      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a2d      	ldr	r2, [pc, #180]	@ (800d500 <TIM_Base_SetConfig+0x12c>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d00f      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a2c      	ldr	r2, [pc, #176]	@ (800d504 <TIM_Base_SetConfig+0x130>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d00b      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a2b      	ldr	r2, [pc, #172]	@ (800d508 <TIM_Base_SetConfig+0x134>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d007      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a2a      	ldr	r2, [pc, #168]	@ (800d50c <TIM_Base_SetConfig+0x138>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d003      	beq.n	800d46e <TIM_Base_SetConfig+0x9a>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a29      	ldr	r2, [pc, #164]	@ (800d510 <TIM_Base_SetConfig+0x13c>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d108      	bne.n	800d480 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	4313      	orrs	r3, r2
 800d48c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	689a      	ldr	r2, [r3, #8]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a14      	ldr	r2, [pc, #80]	@ (800d4f4 <TIM_Base_SetConfig+0x120>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d00f      	beq.n	800d4c6 <TIM_Base_SetConfig+0xf2>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a16      	ldr	r2, [pc, #88]	@ (800d504 <TIM_Base_SetConfig+0x130>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d00b      	beq.n	800d4c6 <TIM_Base_SetConfig+0xf2>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a15      	ldr	r2, [pc, #84]	@ (800d508 <TIM_Base_SetConfig+0x134>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d007      	beq.n	800d4c6 <TIM_Base_SetConfig+0xf2>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4a14      	ldr	r2, [pc, #80]	@ (800d50c <TIM_Base_SetConfig+0x138>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d003      	beq.n	800d4c6 <TIM_Base_SetConfig+0xf2>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4a13      	ldr	r2, [pc, #76]	@ (800d510 <TIM_Base_SetConfig+0x13c>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d103      	bne.n	800d4ce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	691a      	ldr	r2, [r3, #16]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f043 0204 	orr.w	r2, r3, #4
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	601a      	str	r2, [r3, #0]
}
 800d4e6:	bf00      	nop
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	40010000 	.word	0x40010000
 800d4f8:	40000400 	.word	0x40000400
 800d4fc:	40000800 	.word	0x40000800
 800d500:	40000c00 	.word	0x40000c00
 800d504:	40010400 	.word	0x40010400
 800d508:	40014000 	.word	0x40014000
 800d50c:	40014400 	.word	0x40014400
 800d510:	40014800 	.word	0x40014800

0800d514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d101      	bne.n	800d562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	e042      	b.n	800d5e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d106      	bne.n	800d57a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7f4 fb77 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2224      	movs	r2, #36	@ 0x24
 800d57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f022 0201 	bic.w	r2, r2, #1
 800d590:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 fd90 	bl	800e0c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f825 	bl	800d5f0 <UART_SetConfig>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d101      	bne.n	800d5b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e01b      	b.n	800d5e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d5be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	689a      	ldr	r2, [r3, #8]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d5ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f042 0201 	orr.w	r2, r2, #1
 800d5de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 fe0f 	bl	800e204 <UART_CheckIdleState>
 800d5e6:	4603      	mov	r3, r0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5f4:	b092      	sub	sp, #72	@ 0x48
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	689a      	ldr	r2, [r3, #8]
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	431a      	orrs	r2, r3
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	431a      	orrs	r2, r3
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	69db      	ldr	r3, [r3, #28]
 800d614:	4313      	orrs	r3, r2
 800d616:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	4bbe      	ldr	r3, [pc, #760]	@ (800d918 <UART_SetConfig+0x328>)
 800d620:	4013      	ands	r3, r2
 800d622:	697a      	ldr	r2, [r7, #20]
 800d624:	6812      	ldr	r2, [r2, #0]
 800d626:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d628:	430b      	orrs	r3, r1
 800d62a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	430a      	orrs	r2, r1
 800d640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4ab3      	ldr	r2, [pc, #716]	@ (800d91c <UART_SetConfig+0x32c>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d004      	beq.n	800d65c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d658:	4313      	orrs	r3, r2
 800d65a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	689a      	ldr	r2, [r3, #8]
 800d662:	4baf      	ldr	r3, [pc, #700]	@ (800d920 <UART_SetConfig+0x330>)
 800d664:	4013      	ands	r3, r2
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	6812      	ldr	r2, [r2, #0]
 800d66a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d66c:	430b      	orrs	r3, r1
 800d66e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d676:	f023 010f 	bic.w	r1, r3, #15
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	430a      	orrs	r2, r1
 800d684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4aa6      	ldr	r2, [pc, #664]	@ (800d924 <UART_SetConfig+0x334>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d177      	bne.n	800d780 <UART_SetConfig+0x190>
 800d690:	4ba5      	ldr	r3, [pc, #660]	@ (800d928 <UART_SetConfig+0x338>)
 800d692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d698:	2b28      	cmp	r3, #40	@ 0x28
 800d69a:	d86d      	bhi.n	800d778 <UART_SetConfig+0x188>
 800d69c:	a201      	add	r2, pc, #4	@ (adr r2, 800d6a4 <UART_SetConfig+0xb4>)
 800d69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a2:	bf00      	nop
 800d6a4:	0800d749 	.word	0x0800d749
 800d6a8:	0800d779 	.word	0x0800d779
 800d6ac:	0800d779 	.word	0x0800d779
 800d6b0:	0800d779 	.word	0x0800d779
 800d6b4:	0800d779 	.word	0x0800d779
 800d6b8:	0800d779 	.word	0x0800d779
 800d6bc:	0800d779 	.word	0x0800d779
 800d6c0:	0800d779 	.word	0x0800d779
 800d6c4:	0800d751 	.word	0x0800d751
 800d6c8:	0800d779 	.word	0x0800d779
 800d6cc:	0800d779 	.word	0x0800d779
 800d6d0:	0800d779 	.word	0x0800d779
 800d6d4:	0800d779 	.word	0x0800d779
 800d6d8:	0800d779 	.word	0x0800d779
 800d6dc:	0800d779 	.word	0x0800d779
 800d6e0:	0800d779 	.word	0x0800d779
 800d6e4:	0800d759 	.word	0x0800d759
 800d6e8:	0800d779 	.word	0x0800d779
 800d6ec:	0800d779 	.word	0x0800d779
 800d6f0:	0800d779 	.word	0x0800d779
 800d6f4:	0800d779 	.word	0x0800d779
 800d6f8:	0800d779 	.word	0x0800d779
 800d6fc:	0800d779 	.word	0x0800d779
 800d700:	0800d779 	.word	0x0800d779
 800d704:	0800d761 	.word	0x0800d761
 800d708:	0800d779 	.word	0x0800d779
 800d70c:	0800d779 	.word	0x0800d779
 800d710:	0800d779 	.word	0x0800d779
 800d714:	0800d779 	.word	0x0800d779
 800d718:	0800d779 	.word	0x0800d779
 800d71c:	0800d779 	.word	0x0800d779
 800d720:	0800d779 	.word	0x0800d779
 800d724:	0800d769 	.word	0x0800d769
 800d728:	0800d779 	.word	0x0800d779
 800d72c:	0800d779 	.word	0x0800d779
 800d730:	0800d779 	.word	0x0800d779
 800d734:	0800d779 	.word	0x0800d779
 800d738:	0800d779 	.word	0x0800d779
 800d73c:	0800d779 	.word	0x0800d779
 800d740:	0800d779 	.word	0x0800d779
 800d744:	0800d771 	.word	0x0800d771
 800d748:	2301      	movs	r3, #1
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74e:	e222      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d750:	2304      	movs	r3, #4
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d756:	e21e      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d758:	2308      	movs	r3, #8
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75e:	e21a      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d760:	2310      	movs	r3, #16
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d766:	e216      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d768:	2320      	movs	r3, #32
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76e:	e212      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d770:	2340      	movs	r3, #64	@ 0x40
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d776:	e20e      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d778:	2380      	movs	r3, #128	@ 0x80
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77e:	e20a      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a69      	ldr	r2, [pc, #420]	@ (800d92c <UART_SetConfig+0x33c>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d130      	bne.n	800d7ec <UART_SetConfig+0x1fc>
 800d78a:	4b67      	ldr	r3, [pc, #412]	@ (800d928 <UART_SetConfig+0x338>)
 800d78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d78e:	f003 0307 	and.w	r3, r3, #7
 800d792:	2b05      	cmp	r3, #5
 800d794:	d826      	bhi.n	800d7e4 <UART_SetConfig+0x1f4>
 800d796:	a201      	add	r2, pc, #4	@ (adr r2, 800d79c <UART_SetConfig+0x1ac>)
 800d798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79c:	0800d7b5 	.word	0x0800d7b5
 800d7a0:	0800d7bd 	.word	0x0800d7bd
 800d7a4:	0800d7c5 	.word	0x0800d7c5
 800d7a8:	0800d7cd 	.word	0x0800d7cd
 800d7ac:	0800d7d5 	.word	0x0800d7d5
 800d7b0:	0800d7dd 	.word	0x0800d7dd
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ba:	e1ec      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d7bc:	2304      	movs	r3, #4
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c2:	e1e8      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d7c4:	2308      	movs	r3, #8
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ca:	e1e4      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d7cc:	2310      	movs	r3, #16
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d2:	e1e0      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d7d4:	2320      	movs	r3, #32
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e1dc      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d7dc:	2340      	movs	r3, #64	@ 0x40
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e1d8      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d7e4:	2380      	movs	r3, #128	@ 0x80
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e1d4      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a4f      	ldr	r2, [pc, #316]	@ (800d930 <UART_SetConfig+0x340>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d130      	bne.n	800d858 <UART_SetConfig+0x268>
 800d7f6:	4b4c      	ldr	r3, [pc, #304]	@ (800d928 <UART_SetConfig+0x338>)
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7fa:	f003 0307 	and.w	r3, r3, #7
 800d7fe:	2b05      	cmp	r3, #5
 800d800:	d826      	bhi.n	800d850 <UART_SetConfig+0x260>
 800d802:	a201      	add	r2, pc, #4	@ (adr r2, 800d808 <UART_SetConfig+0x218>)
 800d804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d808:	0800d821 	.word	0x0800d821
 800d80c:	0800d829 	.word	0x0800d829
 800d810:	0800d831 	.word	0x0800d831
 800d814:	0800d839 	.word	0x0800d839
 800d818:	0800d841 	.word	0x0800d841
 800d81c:	0800d849 	.word	0x0800d849
 800d820:	2300      	movs	r3, #0
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d826:	e1b6      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d828:	2304      	movs	r3, #4
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e1b2      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d830:	2308      	movs	r3, #8
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d836:	e1ae      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d838:	2310      	movs	r3, #16
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83e:	e1aa      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d840:	2320      	movs	r3, #32
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e1a6      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d848:	2340      	movs	r3, #64	@ 0x40
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e1a2      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d850:	2380      	movs	r3, #128	@ 0x80
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e19e      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a35      	ldr	r2, [pc, #212]	@ (800d934 <UART_SetConfig+0x344>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d130      	bne.n	800d8c4 <UART_SetConfig+0x2d4>
 800d862:	4b31      	ldr	r3, [pc, #196]	@ (800d928 <UART_SetConfig+0x338>)
 800d864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d866:	f003 0307 	and.w	r3, r3, #7
 800d86a:	2b05      	cmp	r3, #5
 800d86c:	d826      	bhi.n	800d8bc <UART_SetConfig+0x2cc>
 800d86e:	a201      	add	r2, pc, #4	@ (adr r2, 800d874 <UART_SetConfig+0x284>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d88d 	.word	0x0800d88d
 800d878:	0800d895 	.word	0x0800d895
 800d87c:	0800d89d 	.word	0x0800d89d
 800d880:	0800d8a5 	.word	0x0800d8a5
 800d884:	0800d8ad 	.word	0x0800d8ad
 800d888:	0800d8b5 	.word	0x0800d8b5
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d892:	e180      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d894:	2304      	movs	r3, #4
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e17c      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d89c:	2308      	movs	r3, #8
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8a2:	e178      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d8a4:	2310      	movs	r3, #16
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8aa:	e174      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d8ac:	2320      	movs	r3, #32
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e170      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d8b4:	2340      	movs	r3, #64	@ 0x40
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	e16c      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d8bc:	2380      	movs	r3, #128	@ 0x80
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	e168      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a1b      	ldr	r2, [pc, #108]	@ (800d938 <UART_SetConfig+0x348>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d142      	bne.n	800d954 <UART_SetConfig+0x364>
 800d8ce:	4b16      	ldr	r3, [pc, #88]	@ (800d928 <UART_SetConfig+0x338>)
 800d8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	2b05      	cmp	r3, #5
 800d8d8:	d838      	bhi.n	800d94c <UART_SetConfig+0x35c>
 800d8da:	a201      	add	r2, pc, #4	@ (adr r2, 800d8e0 <UART_SetConfig+0x2f0>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d8f9 	.word	0x0800d8f9
 800d8e4:	0800d901 	.word	0x0800d901
 800d8e8:	0800d909 	.word	0x0800d909
 800d8ec:	0800d911 	.word	0x0800d911
 800d8f0:	0800d93d 	.word	0x0800d93d
 800d8f4:	0800d945 	.word	0x0800d945
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fe:	e14a      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d900:	2304      	movs	r3, #4
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e146      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d908:	2308      	movs	r3, #8
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d90e:	e142      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d910:	2310      	movs	r3, #16
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d916:	e13e      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d918:	cfff69f3 	.word	0xcfff69f3
 800d91c:	58000c00 	.word	0x58000c00
 800d920:	11fff4ff 	.word	0x11fff4ff
 800d924:	40011000 	.word	0x40011000
 800d928:	58024400 	.word	0x58024400
 800d92c:	40004400 	.word	0x40004400
 800d930:	40004800 	.word	0x40004800
 800d934:	40004c00 	.word	0x40004c00
 800d938:	40005000 	.word	0x40005000
 800d93c:	2320      	movs	r3, #32
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d942:	e128      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d944:	2340      	movs	r3, #64	@ 0x40
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94a:	e124      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d94c:	2380      	movs	r3, #128	@ 0x80
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d952:	e120      	b.n	800db96 <UART_SetConfig+0x5a6>
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4acb      	ldr	r2, [pc, #812]	@ (800dc88 <UART_SetConfig+0x698>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d176      	bne.n	800da4c <UART_SetConfig+0x45c>
 800d95e:	4bcb      	ldr	r3, [pc, #812]	@ (800dc8c <UART_SetConfig+0x69c>)
 800d960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d966:	2b28      	cmp	r3, #40	@ 0x28
 800d968:	d86c      	bhi.n	800da44 <UART_SetConfig+0x454>
 800d96a:	a201      	add	r2, pc, #4	@ (adr r2, 800d970 <UART_SetConfig+0x380>)
 800d96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d970:	0800da15 	.word	0x0800da15
 800d974:	0800da45 	.word	0x0800da45
 800d978:	0800da45 	.word	0x0800da45
 800d97c:	0800da45 	.word	0x0800da45
 800d980:	0800da45 	.word	0x0800da45
 800d984:	0800da45 	.word	0x0800da45
 800d988:	0800da45 	.word	0x0800da45
 800d98c:	0800da45 	.word	0x0800da45
 800d990:	0800da1d 	.word	0x0800da1d
 800d994:	0800da45 	.word	0x0800da45
 800d998:	0800da45 	.word	0x0800da45
 800d99c:	0800da45 	.word	0x0800da45
 800d9a0:	0800da45 	.word	0x0800da45
 800d9a4:	0800da45 	.word	0x0800da45
 800d9a8:	0800da45 	.word	0x0800da45
 800d9ac:	0800da45 	.word	0x0800da45
 800d9b0:	0800da25 	.word	0x0800da25
 800d9b4:	0800da45 	.word	0x0800da45
 800d9b8:	0800da45 	.word	0x0800da45
 800d9bc:	0800da45 	.word	0x0800da45
 800d9c0:	0800da45 	.word	0x0800da45
 800d9c4:	0800da45 	.word	0x0800da45
 800d9c8:	0800da45 	.word	0x0800da45
 800d9cc:	0800da45 	.word	0x0800da45
 800d9d0:	0800da2d 	.word	0x0800da2d
 800d9d4:	0800da45 	.word	0x0800da45
 800d9d8:	0800da45 	.word	0x0800da45
 800d9dc:	0800da45 	.word	0x0800da45
 800d9e0:	0800da45 	.word	0x0800da45
 800d9e4:	0800da45 	.word	0x0800da45
 800d9e8:	0800da45 	.word	0x0800da45
 800d9ec:	0800da45 	.word	0x0800da45
 800d9f0:	0800da35 	.word	0x0800da35
 800d9f4:	0800da45 	.word	0x0800da45
 800d9f8:	0800da45 	.word	0x0800da45
 800d9fc:	0800da45 	.word	0x0800da45
 800da00:	0800da45 	.word	0x0800da45
 800da04:	0800da45 	.word	0x0800da45
 800da08:	0800da45 	.word	0x0800da45
 800da0c:	0800da45 	.word	0x0800da45
 800da10:	0800da3d 	.word	0x0800da3d
 800da14:	2301      	movs	r3, #1
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1a:	e0bc      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da1c:	2304      	movs	r3, #4
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e0b8      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da24:	2308      	movs	r3, #8
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e0b4      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da2c:	2310      	movs	r3, #16
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da32:	e0b0      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da34:	2320      	movs	r3, #32
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3a:	e0ac      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da3c:	2340      	movs	r3, #64	@ 0x40
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e0a8      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da44:	2380      	movs	r3, #128	@ 0x80
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e0a4      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a8f      	ldr	r2, [pc, #572]	@ (800dc90 <UART_SetConfig+0x6a0>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d130      	bne.n	800dab8 <UART_SetConfig+0x4c8>
 800da56:	4b8d      	ldr	r3, [pc, #564]	@ (800dc8c <UART_SetConfig+0x69c>)
 800da58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da5a:	f003 0307 	and.w	r3, r3, #7
 800da5e:	2b05      	cmp	r3, #5
 800da60:	d826      	bhi.n	800dab0 <UART_SetConfig+0x4c0>
 800da62:	a201      	add	r2, pc, #4	@ (adr r2, 800da68 <UART_SetConfig+0x478>)
 800da64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da68:	0800da81 	.word	0x0800da81
 800da6c:	0800da89 	.word	0x0800da89
 800da70:	0800da91 	.word	0x0800da91
 800da74:	0800da99 	.word	0x0800da99
 800da78:	0800daa1 	.word	0x0800daa1
 800da7c:	0800daa9 	.word	0x0800daa9
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e086      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da88:	2304      	movs	r3, #4
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e082      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da90:	2308      	movs	r3, #8
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e07e      	b.n	800db96 <UART_SetConfig+0x5a6>
 800da98:	2310      	movs	r3, #16
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9e:	e07a      	b.n	800db96 <UART_SetConfig+0x5a6>
 800daa0:	2320      	movs	r3, #32
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa6:	e076      	b.n	800db96 <UART_SetConfig+0x5a6>
 800daa8:	2340      	movs	r3, #64	@ 0x40
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daae:	e072      	b.n	800db96 <UART_SetConfig+0x5a6>
 800dab0:	2380      	movs	r3, #128	@ 0x80
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e06e      	b.n	800db96 <UART_SetConfig+0x5a6>
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a75      	ldr	r2, [pc, #468]	@ (800dc94 <UART_SetConfig+0x6a4>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d130      	bne.n	800db24 <UART_SetConfig+0x534>
 800dac2:	4b72      	ldr	r3, [pc, #456]	@ (800dc8c <UART_SetConfig+0x69c>)
 800dac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dac6:	f003 0307 	and.w	r3, r3, #7
 800daca:	2b05      	cmp	r3, #5
 800dacc:	d826      	bhi.n	800db1c <UART_SetConfig+0x52c>
 800dace:	a201      	add	r2, pc, #4	@ (adr r2, 800dad4 <UART_SetConfig+0x4e4>)
 800dad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad4:	0800daed 	.word	0x0800daed
 800dad8:	0800daf5 	.word	0x0800daf5
 800dadc:	0800dafd 	.word	0x0800dafd
 800dae0:	0800db05 	.word	0x0800db05
 800dae4:	0800db0d 	.word	0x0800db0d
 800dae8:	0800db15 	.word	0x0800db15
 800daec:	2300      	movs	r3, #0
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daf2:	e050      	b.n	800db96 <UART_SetConfig+0x5a6>
 800daf4:	2304      	movs	r3, #4
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafa:	e04c      	b.n	800db96 <UART_SetConfig+0x5a6>
 800dafc:	2308      	movs	r3, #8
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db02:	e048      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db04:	2310      	movs	r3, #16
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0a:	e044      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db0c:	2320      	movs	r3, #32
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db12:	e040      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db14:	2340      	movs	r3, #64	@ 0x40
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e03c      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db1c:	2380      	movs	r3, #128	@ 0x80
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e038      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a5b      	ldr	r2, [pc, #364]	@ (800dc98 <UART_SetConfig+0x6a8>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d130      	bne.n	800db90 <UART_SetConfig+0x5a0>
 800db2e:	4b57      	ldr	r3, [pc, #348]	@ (800dc8c <UART_SetConfig+0x69c>)
 800db30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db32:	f003 0307 	and.w	r3, r3, #7
 800db36:	2b05      	cmp	r3, #5
 800db38:	d826      	bhi.n	800db88 <UART_SetConfig+0x598>
 800db3a:	a201      	add	r2, pc, #4	@ (adr r2, 800db40 <UART_SetConfig+0x550>)
 800db3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db40:	0800db59 	.word	0x0800db59
 800db44:	0800db61 	.word	0x0800db61
 800db48:	0800db69 	.word	0x0800db69
 800db4c:	0800db71 	.word	0x0800db71
 800db50:	0800db79 	.word	0x0800db79
 800db54:	0800db81 	.word	0x0800db81
 800db58:	2302      	movs	r3, #2
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db5e:	e01a      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db60:	2304      	movs	r3, #4
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db66:	e016      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db68:	2308      	movs	r3, #8
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db6e:	e012      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db70:	2310      	movs	r3, #16
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db76:	e00e      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db78:	2320      	movs	r3, #32
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db7e:	e00a      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db80:	2340      	movs	r3, #64	@ 0x40
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db86:	e006      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db88:	2380      	movs	r3, #128	@ 0x80
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db8e:	e002      	b.n	800db96 <UART_SetConfig+0x5a6>
 800db90:	2380      	movs	r3, #128	@ 0x80
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a3f      	ldr	r2, [pc, #252]	@ (800dc98 <UART_SetConfig+0x6a8>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	f040 80f8 	bne.w	800dd92 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dba2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dba6:	2b20      	cmp	r3, #32
 800dba8:	dc46      	bgt.n	800dc38 <UART_SetConfig+0x648>
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	f2c0 8082 	blt.w	800dcb4 <UART_SetConfig+0x6c4>
 800dbb0:	3b02      	subs	r3, #2
 800dbb2:	2b1e      	cmp	r3, #30
 800dbb4:	d87e      	bhi.n	800dcb4 <UART_SetConfig+0x6c4>
 800dbb6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbbc <UART_SetConfig+0x5cc>)
 800dbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbc:	0800dc3f 	.word	0x0800dc3f
 800dbc0:	0800dcb5 	.word	0x0800dcb5
 800dbc4:	0800dc47 	.word	0x0800dc47
 800dbc8:	0800dcb5 	.word	0x0800dcb5
 800dbcc:	0800dcb5 	.word	0x0800dcb5
 800dbd0:	0800dcb5 	.word	0x0800dcb5
 800dbd4:	0800dc57 	.word	0x0800dc57
 800dbd8:	0800dcb5 	.word	0x0800dcb5
 800dbdc:	0800dcb5 	.word	0x0800dcb5
 800dbe0:	0800dcb5 	.word	0x0800dcb5
 800dbe4:	0800dcb5 	.word	0x0800dcb5
 800dbe8:	0800dcb5 	.word	0x0800dcb5
 800dbec:	0800dcb5 	.word	0x0800dcb5
 800dbf0:	0800dcb5 	.word	0x0800dcb5
 800dbf4:	0800dc67 	.word	0x0800dc67
 800dbf8:	0800dcb5 	.word	0x0800dcb5
 800dbfc:	0800dcb5 	.word	0x0800dcb5
 800dc00:	0800dcb5 	.word	0x0800dcb5
 800dc04:	0800dcb5 	.word	0x0800dcb5
 800dc08:	0800dcb5 	.word	0x0800dcb5
 800dc0c:	0800dcb5 	.word	0x0800dcb5
 800dc10:	0800dcb5 	.word	0x0800dcb5
 800dc14:	0800dcb5 	.word	0x0800dcb5
 800dc18:	0800dcb5 	.word	0x0800dcb5
 800dc1c:	0800dcb5 	.word	0x0800dcb5
 800dc20:	0800dcb5 	.word	0x0800dcb5
 800dc24:	0800dcb5 	.word	0x0800dcb5
 800dc28:	0800dcb5 	.word	0x0800dcb5
 800dc2c:	0800dcb5 	.word	0x0800dcb5
 800dc30:	0800dcb5 	.word	0x0800dcb5
 800dc34:	0800dca7 	.word	0x0800dca7
 800dc38:	2b40      	cmp	r3, #64	@ 0x40
 800dc3a:	d037      	beq.n	800dcac <UART_SetConfig+0x6bc>
 800dc3c:	e03a      	b.n	800dcb4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dc3e:	f7fc fc77 	bl	800a530 <HAL_RCCEx_GetD3PCLK1Freq>
 800dc42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc44:	e03c      	b.n	800dcc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fc fc86 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc54:	e034      	b.n	800dcc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc56:	f107 0318 	add.w	r3, r7, #24
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fc fdd2 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc64:	e02c      	b.n	800dcc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc66:	4b09      	ldr	r3, [pc, #36]	@ (800dc8c <UART_SetConfig+0x69c>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f003 0320 	and.w	r3, r3, #32
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d016      	beq.n	800dca0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc72:	4b06      	ldr	r3, [pc, #24]	@ (800dc8c <UART_SetConfig+0x69c>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	08db      	lsrs	r3, r3, #3
 800dc78:	f003 0303 	and.w	r3, r3, #3
 800dc7c:	4a07      	ldr	r2, [pc, #28]	@ (800dc9c <UART_SetConfig+0x6ac>)
 800dc7e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc84:	e01c      	b.n	800dcc0 <UART_SetConfig+0x6d0>
 800dc86:	bf00      	nop
 800dc88:	40011400 	.word	0x40011400
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	40007800 	.word	0x40007800
 800dc94:	40007c00 	.word	0x40007c00
 800dc98:	58000c00 	.word	0x58000c00
 800dc9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dca0:	4b9d      	ldr	r3, [pc, #628]	@ (800df18 <UART_SetConfig+0x928>)
 800dca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dca4:	e00c      	b.n	800dcc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dca6:	4b9d      	ldr	r3, [pc, #628]	@ (800df1c <UART_SetConfig+0x92c>)
 800dca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcaa:	e009      	b.n	800dcc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dcac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcb2:	e005      	b.n	800dcc0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dcbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dcc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f000 81de 	beq.w	800e084 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dccc:	4a94      	ldr	r2, [pc, #592]	@ (800df20 <UART_SetConfig+0x930>)
 800dcce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcda:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	685a      	ldr	r2, [r3, #4]
 800dce0:	4613      	mov	r3, r2
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	4413      	add	r3, r2
 800dce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d305      	bcc.n	800dcf8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d903      	bls.n	800dd00 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dcfe:	e1c1      	b.n	800e084 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd02:	2200      	movs	r2, #0
 800dd04:	60bb      	str	r3, [r7, #8]
 800dd06:	60fa      	str	r2, [r7, #12]
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd0c:	4a84      	ldr	r2, [pc, #528]	@ (800df20 <UART_SetConfig+0x930>)
 800dd0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	2200      	movs	r2, #0
 800dd16:	603b      	str	r3, [r7, #0]
 800dd18:	607a      	str	r2, [r7, #4]
 800dd1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dd22:	f7f2 fadd 	bl	80002e0 <__aeabi_uldivmod>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	f04f 0200 	mov.w	r2, #0
 800dd32:	f04f 0300 	mov.w	r3, #0
 800dd36:	020b      	lsls	r3, r1, #8
 800dd38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dd3c:	0202      	lsls	r2, r0, #8
 800dd3e:	6979      	ldr	r1, [r7, #20]
 800dd40:	6849      	ldr	r1, [r1, #4]
 800dd42:	0849      	lsrs	r1, r1, #1
 800dd44:	2000      	movs	r0, #0
 800dd46:	460c      	mov	r4, r1
 800dd48:	4605      	mov	r5, r0
 800dd4a:	eb12 0804 	adds.w	r8, r2, r4
 800dd4e:	eb43 0905 	adc.w	r9, r3, r5
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	469a      	mov	sl, r3
 800dd5a:	4693      	mov	fp, r2
 800dd5c:	4652      	mov	r2, sl
 800dd5e:	465b      	mov	r3, fp
 800dd60:	4640      	mov	r0, r8
 800dd62:	4649      	mov	r1, r9
 800dd64:	f7f2 fabc 	bl	80002e0 <__aeabi_uldivmod>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd76:	d308      	bcc.n	800dd8a <UART_SetConfig+0x79a>
 800dd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd7e:	d204      	bcs.n	800dd8a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd86:	60da      	str	r2, [r3, #12]
 800dd88:	e17c      	b.n	800e084 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd90:	e178      	b.n	800e084 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	69db      	ldr	r3, [r3, #28]
 800dd96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd9a:	f040 80c5 	bne.w	800df28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dd9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dda2:	2b20      	cmp	r3, #32
 800dda4:	dc48      	bgt.n	800de38 <UART_SetConfig+0x848>
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	db7b      	blt.n	800dea2 <UART_SetConfig+0x8b2>
 800ddaa:	2b20      	cmp	r3, #32
 800ddac:	d879      	bhi.n	800dea2 <UART_SetConfig+0x8b2>
 800ddae:	a201      	add	r2, pc, #4	@ (adr r2, 800ddb4 <UART_SetConfig+0x7c4>)
 800ddb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb4:	0800de3f 	.word	0x0800de3f
 800ddb8:	0800de47 	.word	0x0800de47
 800ddbc:	0800dea3 	.word	0x0800dea3
 800ddc0:	0800dea3 	.word	0x0800dea3
 800ddc4:	0800de4f 	.word	0x0800de4f
 800ddc8:	0800dea3 	.word	0x0800dea3
 800ddcc:	0800dea3 	.word	0x0800dea3
 800ddd0:	0800dea3 	.word	0x0800dea3
 800ddd4:	0800de5f 	.word	0x0800de5f
 800ddd8:	0800dea3 	.word	0x0800dea3
 800dddc:	0800dea3 	.word	0x0800dea3
 800dde0:	0800dea3 	.word	0x0800dea3
 800dde4:	0800dea3 	.word	0x0800dea3
 800dde8:	0800dea3 	.word	0x0800dea3
 800ddec:	0800dea3 	.word	0x0800dea3
 800ddf0:	0800dea3 	.word	0x0800dea3
 800ddf4:	0800de6f 	.word	0x0800de6f
 800ddf8:	0800dea3 	.word	0x0800dea3
 800ddfc:	0800dea3 	.word	0x0800dea3
 800de00:	0800dea3 	.word	0x0800dea3
 800de04:	0800dea3 	.word	0x0800dea3
 800de08:	0800dea3 	.word	0x0800dea3
 800de0c:	0800dea3 	.word	0x0800dea3
 800de10:	0800dea3 	.word	0x0800dea3
 800de14:	0800dea3 	.word	0x0800dea3
 800de18:	0800dea3 	.word	0x0800dea3
 800de1c:	0800dea3 	.word	0x0800dea3
 800de20:	0800dea3 	.word	0x0800dea3
 800de24:	0800dea3 	.word	0x0800dea3
 800de28:	0800dea3 	.word	0x0800dea3
 800de2c:	0800dea3 	.word	0x0800dea3
 800de30:	0800dea3 	.word	0x0800dea3
 800de34:	0800de95 	.word	0x0800de95
 800de38:	2b40      	cmp	r3, #64	@ 0x40
 800de3a:	d02e      	beq.n	800de9a <UART_SetConfig+0x8aa>
 800de3c:	e031      	b.n	800dea2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de3e:	f7fa fb7f 	bl	8008540 <HAL_RCC_GetPCLK1Freq>
 800de42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de44:	e033      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de46:	f7fa fb91 	bl	800856c <HAL_RCC_GetPCLK2Freq>
 800de4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de4c:	e02f      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de52:	4618      	mov	r0, r3
 800de54:	f7fc fb82 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de5c:	e027      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de5e:	f107 0318 	add.w	r3, r7, #24
 800de62:	4618      	mov	r0, r3
 800de64:	f7fc fcce 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de6c:	e01f      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de6e:	4b2d      	ldr	r3, [pc, #180]	@ (800df24 <UART_SetConfig+0x934>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 0320 	and.w	r3, r3, #32
 800de76:	2b00      	cmp	r3, #0
 800de78:	d009      	beq.n	800de8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de7a:	4b2a      	ldr	r3, [pc, #168]	@ (800df24 <UART_SetConfig+0x934>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	08db      	lsrs	r3, r3, #3
 800de80:	f003 0303 	and.w	r3, r3, #3
 800de84:	4a24      	ldr	r2, [pc, #144]	@ (800df18 <UART_SetConfig+0x928>)
 800de86:	fa22 f303 	lsr.w	r3, r2, r3
 800de8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de8c:	e00f      	b.n	800deae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de8e:	4b22      	ldr	r3, [pc, #136]	@ (800df18 <UART_SetConfig+0x928>)
 800de90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de92:	e00c      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de94:	4b21      	ldr	r3, [pc, #132]	@ (800df1c <UART_SetConfig+0x92c>)
 800de96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de98:	e009      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dea0:	e005      	b.n	800deae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dea2:	2300      	movs	r3, #0
 800dea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800deac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800deae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 80e7 	beq.w	800e084 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deba:	4a19      	ldr	r2, [pc, #100]	@ (800df20 <UART_SetConfig+0x930>)
 800debc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dec0:	461a      	mov	r2, r3
 800dec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dec8:	005a      	lsls	r2, r3, #1
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	085b      	lsrs	r3, r3, #1
 800ded0:	441a      	add	r2, r3
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deda:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dede:	2b0f      	cmp	r3, #15
 800dee0:	d916      	bls.n	800df10 <UART_SetConfig+0x920>
 800dee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dee8:	d212      	bcs.n	800df10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800deea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deec:	b29b      	uxth	r3, r3
 800deee:	f023 030f 	bic.w	r3, r3, #15
 800def2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800def4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def6:	085b      	lsrs	r3, r3, #1
 800def8:	b29b      	uxth	r3, r3
 800defa:	f003 0307 	and.w	r3, r3, #7
 800defe:	b29a      	uxth	r2, r3
 800df00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df02:	4313      	orrs	r3, r2
 800df04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800df0c:	60da      	str	r2, [r3, #12]
 800df0e:	e0b9      	b.n	800e084 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df16:	e0b5      	b.n	800e084 <UART_SetConfig+0xa94>
 800df18:	03d09000 	.word	0x03d09000
 800df1c:	003d0900 	.word	0x003d0900
 800df20:	08018364 	.word	0x08018364
 800df24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800df28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df2c:	2b20      	cmp	r3, #32
 800df2e:	dc49      	bgt.n	800dfc4 <UART_SetConfig+0x9d4>
 800df30:	2b00      	cmp	r3, #0
 800df32:	db7c      	blt.n	800e02e <UART_SetConfig+0xa3e>
 800df34:	2b20      	cmp	r3, #32
 800df36:	d87a      	bhi.n	800e02e <UART_SetConfig+0xa3e>
 800df38:	a201      	add	r2, pc, #4	@ (adr r2, 800df40 <UART_SetConfig+0x950>)
 800df3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3e:	bf00      	nop
 800df40:	0800dfcb 	.word	0x0800dfcb
 800df44:	0800dfd3 	.word	0x0800dfd3
 800df48:	0800e02f 	.word	0x0800e02f
 800df4c:	0800e02f 	.word	0x0800e02f
 800df50:	0800dfdb 	.word	0x0800dfdb
 800df54:	0800e02f 	.word	0x0800e02f
 800df58:	0800e02f 	.word	0x0800e02f
 800df5c:	0800e02f 	.word	0x0800e02f
 800df60:	0800dfeb 	.word	0x0800dfeb
 800df64:	0800e02f 	.word	0x0800e02f
 800df68:	0800e02f 	.word	0x0800e02f
 800df6c:	0800e02f 	.word	0x0800e02f
 800df70:	0800e02f 	.word	0x0800e02f
 800df74:	0800e02f 	.word	0x0800e02f
 800df78:	0800e02f 	.word	0x0800e02f
 800df7c:	0800e02f 	.word	0x0800e02f
 800df80:	0800dffb 	.word	0x0800dffb
 800df84:	0800e02f 	.word	0x0800e02f
 800df88:	0800e02f 	.word	0x0800e02f
 800df8c:	0800e02f 	.word	0x0800e02f
 800df90:	0800e02f 	.word	0x0800e02f
 800df94:	0800e02f 	.word	0x0800e02f
 800df98:	0800e02f 	.word	0x0800e02f
 800df9c:	0800e02f 	.word	0x0800e02f
 800dfa0:	0800e02f 	.word	0x0800e02f
 800dfa4:	0800e02f 	.word	0x0800e02f
 800dfa8:	0800e02f 	.word	0x0800e02f
 800dfac:	0800e02f 	.word	0x0800e02f
 800dfb0:	0800e02f 	.word	0x0800e02f
 800dfb4:	0800e02f 	.word	0x0800e02f
 800dfb8:	0800e02f 	.word	0x0800e02f
 800dfbc:	0800e02f 	.word	0x0800e02f
 800dfc0:	0800e021 	.word	0x0800e021
 800dfc4:	2b40      	cmp	r3, #64	@ 0x40
 800dfc6:	d02e      	beq.n	800e026 <UART_SetConfig+0xa36>
 800dfc8:	e031      	b.n	800e02e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfca:	f7fa fab9 	bl	8008540 <HAL_RCC_GetPCLK1Freq>
 800dfce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dfd0:	e033      	b.n	800e03a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfd2:	f7fa facb 	bl	800856c <HAL_RCC_GetPCLK2Freq>
 800dfd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dfd8:	e02f      	b.n	800e03a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fc fabc 	bl	800a55c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfe8:	e027      	b.n	800e03a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfea:	f107 0318 	add.w	r3, r7, #24
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fc fc08 	bl	800a804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dff8:	e01f      	b.n	800e03a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dffa:	4b2d      	ldr	r3, [pc, #180]	@ (800e0b0 <UART_SetConfig+0xac0>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f003 0320 	and.w	r3, r3, #32
 800e002:	2b00      	cmp	r3, #0
 800e004:	d009      	beq.n	800e01a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e006:	4b2a      	ldr	r3, [pc, #168]	@ (800e0b0 <UART_SetConfig+0xac0>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	08db      	lsrs	r3, r3, #3
 800e00c:	f003 0303 	and.w	r3, r3, #3
 800e010:	4a28      	ldr	r2, [pc, #160]	@ (800e0b4 <UART_SetConfig+0xac4>)
 800e012:	fa22 f303 	lsr.w	r3, r2, r3
 800e016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e018:	e00f      	b.n	800e03a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e01a:	4b26      	ldr	r3, [pc, #152]	@ (800e0b4 <UART_SetConfig+0xac4>)
 800e01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e01e:	e00c      	b.n	800e03a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e020:	4b25      	ldr	r3, [pc, #148]	@ (800e0b8 <UART_SetConfig+0xac8>)
 800e022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e024:	e009      	b.n	800e03a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e02c:	e005      	b.n	800e03a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e02e:	2300      	movs	r3, #0
 800e030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e038:	bf00      	nop
    }

    if (pclk != 0U)
 800e03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d021      	beq.n	800e084 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e044:	4a1d      	ldr	r2, [pc, #116]	@ (800e0bc <UART_SetConfig+0xacc>)
 800e046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e04a:	461a      	mov	r2, r3
 800e04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e04e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	085b      	lsrs	r3, r3, #1
 800e058:	441a      	add	r2, r3
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e062:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e066:	2b0f      	cmp	r3, #15
 800e068:	d909      	bls.n	800e07e <UART_SetConfig+0xa8e>
 800e06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e06c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e070:	d205      	bcs.n	800e07e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e074:	b29a      	uxth	r2, r3
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60da      	str	r2, [r3, #12]
 800e07c:	e002      	b.n	800e084 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	2201      	movs	r2, #1
 800e088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2201      	movs	r2, #1
 800e090:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	2200      	movs	r2, #0
 800e098:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	2200      	movs	r2, #0
 800e09e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e0a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3748      	adds	r7, #72	@ 0x48
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0ae:	bf00      	nop
 800e0b0:	58024400 	.word	0x58024400
 800e0b4:	03d09000 	.word	0x03d09000
 800e0b8:	003d0900 	.word	0x003d0900
 800e0bc:	08018364 	.word	0x08018364

0800e0c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0cc:	f003 0308 	and.w	r3, r3, #8
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d00a      	beq.n	800e0ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	430a      	orrs	r2, r1
 800e0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00a      	beq.n	800e10c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	430a      	orrs	r2, r1
 800e10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e110:	f003 0302 	and.w	r3, r3, #2
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00a      	beq.n	800e12e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	430a      	orrs	r2, r1
 800e12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e132:	f003 0304 	and.w	r3, r3, #4
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00a      	beq.n	800e150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	430a      	orrs	r2, r1
 800e14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e154:	f003 0310 	and.w	r3, r3, #16
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00a      	beq.n	800e172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	430a      	orrs	r2, r1
 800e170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e176:	f003 0320 	and.w	r3, r3, #32
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00a      	beq.n	800e194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	430a      	orrs	r2, r1
 800e192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d01a      	beq.n	800e1d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	430a      	orrs	r2, r1
 800e1b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1be:	d10a      	bne.n	800e1d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	430a      	orrs	r2, r1
 800e1d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00a      	beq.n	800e1f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	430a      	orrs	r2, r1
 800e1f6:	605a      	str	r2, [r3, #4]
  }
}
 800e1f8:	bf00      	nop
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b098      	sub	sp, #96	@ 0x60
 800e208:	af02      	add	r7, sp, #8
 800e20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e214:	f7f4 fe28 	bl	8002e68 <HAL_GetTick>
 800e218:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 0308 	and.w	r3, r3, #8
 800e224:	2b08      	cmp	r3, #8
 800e226:	d12f      	bne.n	800e288 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e230:	2200      	movs	r2, #0
 800e232:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 f88e 	bl	800e358 <UART_WaitOnFlagUntilTimeout>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d022      	beq.n	800e288 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24a:	e853 3f00 	ldrex	r3, [r3]
 800e24e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e256:	653b      	str	r3, [r7, #80]	@ 0x50
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	461a      	mov	r2, r3
 800e25e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e260:	647b      	str	r3, [r7, #68]	@ 0x44
 800e262:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e264:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e268:	e841 2300 	strex	r3, r2, [r1]
 800e26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1e6      	bne.n	800e242 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2220      	movs	r2, #32
 800e278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e284:	2303      	movs	r3, #3
 800e286:	e063      	b.n	800e350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f003 0304 	and.w	r3, r3, #4
 800e292:	2b04      	cmp	r3, #4
 800e294:	d149      	bne.n	800e32a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e296:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f857 	bl	800e358 <UART_WaitOnFlagUntilTimeout>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d03c      	beq.n	800e32a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b8:	e853 3f00 	ldrex	r3, [r3]
 800e2bc:	623b      	str	r3, [r7, #32]
   return(result);
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e2c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2d6:	e841 2300 	strex	r3, r2, [r1]
 800e2da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1e6      	bne.n	800e2b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3308      	adds	r3, #8
 800e2e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	e853 3f00 	ldrex	r3, [r3]
 800e2f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f023 0301 	bic.w	r3, r3, #1
 800e2f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3308      	adds	r3, #8
 800e300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e302:	61fa      	str	r2, [r7, #28]
 800e304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e306:	69b9      	ldr	r1, [r7, #24]
 800e308:	69fa      	ldr	r2, [r7, #28]
 800e30a:	e841 2300 	strex	r3, r2, [r1]
 800e30e:	617b      	str	r3, [r7, #20]
   return(result);
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1e5      	bne.n	800e2e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2220      	movs	r2, #32
 800e31a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e326:	2303      	movs	r3, #3
 800e328:	e012      	b.n	800e350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2220      	movs	r2, #32
 800e32e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2220      	movs	r2, #32
 800e336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3758      	adds	r7, #88	@ 0x58
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	603b      	str	r3, [r7, #0]
 800e364:	4613      	mov	r3, r2
 800e366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e368:	e04f      	b.n	800e40a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e370:	d04b      	beq.n	800e40a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e372:	f7f4 fd79 	bl	8002e68 <HAL_GetTick>
 800e376:	4602      	mov	r2, r0
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	69ba      	ldr	r2, [r7, #24]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d302      	bcc.n	800e388 <UART_WaitOnFlagUntilTimeout+0x30>
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e388:	2303      	movs	r3, #3
 800e38a:	e04e      	b.n	800e42a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f003 0304 	and.w	r3, r3, #4
 800e396:	2b00      	cmp	r3, #0
 800e398:	d037      	beq.n	800e40a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	2b80      	cmp	r3, #128	@ 0x80
 800e39e:	d034      	beq.n	800e40a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2b40      	cmp	r3, #64	@ 0x40
 800e3a4:	d031      	beq.n	800e40a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69db      	ldr	r3, [r3, #28]
 800e3ac:	f003 0308 	and.w	r3, r3, #8
 800e3b0:	2b08      	cmp	r3, #8
 800e3b2:	d110      	bne.n	800e3d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2208      	movs	r2, #8
 800e3ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 f839 	bl	800e434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2208      	movs	r2, #8
 800e3c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e029      	b.n	800e42a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	69db      	ldr	r3, [r3, #28]
 800e3dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e3e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3e4:	d111      	bne.n	800e40a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e3ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 f81f 	bl	800e434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2220      	movs	r2, #32
 800e3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2200      	movs	r2, #0
 800e402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e406:	2303      	movs	r3, #3
 800e408:	e00f      	b.n	800e42a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	69da      	ldr	r2, [r3, #28]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	4013      	ands	r3, r2
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	429a      	cmp	r2, r3
 800e418:	bf0c      	ite	eq
 800e41a:	2301      	moveq	r3, #1
 800e41c:	2300      	movne	r3, #0
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	461a      	mov	r2, r3
 800e422:	79fb      	ldrb	r3, [r7, #7]
 800e424:	429a      	cmp	r2, r3
 800e426:	d0a0      	beq.n	800e36a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e434:	b480      	push	{r7}
 800e436:	b095      	sub	sp, #84	@ 0x54
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e444:	e853 3f00 	ldrex	r3, [r3]
 800e448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e45a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e45c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e462:	e841 2300 	strex	r3, r2, [r1]
 800e466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1e6      	bne.n	800e43c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	3308      	adds	r3, #8
 800e474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	e853 3f00 	ldrex	r3, [r3]
 800e47c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e47e:	69fa      	ldr	r2, [r7, #28]
 800e480:	4b1e      	ldr	r3, [pc, #120]	@ (800e4fc <UART_EndRxTransfer+0xc8>)
 800e482:	4013      	ands	r3, r2
 800e484:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3308      	adds	r3, #8
 800e48c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e48e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e496:	e841 2300 	strex	r3, r2, [r1]
 800e49a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1e5      	bne.n	800e46e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d118      	bne.n	800e4dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	e853 3f00 	ldrex	r3, [r3]
 800e4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f023 0310 	bic.w	r3, r3, #16
 800e4be:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4c8:	61bb      	str	r3, [r7, #24]
 800e4ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4cc:	6979      	ldr	r1, [r7, #20]
 800e4ce:	69ba      	ldr	r2, [r7, #24]
 800e4d0:	e841 2300 	strex	r3, r2, [r1]
 800e4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1e6      	bne.n	800e4aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2220      	movs	r2, #32
 800e4e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e4f0:	bf00      	nop
 800e4f2:	3754      	adds	r7, #84	@ 0x54
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	effffffe 	.word	0xeffffffe

0800e500 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d101      	bne.n	800e516 <HAL_UARTEx_DisableFifoMode+0x16>
 800e512:	2302      	movs	r3, #2
 800e514:	e027      	b.n	800e566 <HAL_UARTEx_DisableFifoMode+0x66>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2201      	movs	r2, #1
 800e51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2224      	movs	r2, #36	@ 0x24
 800e522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f022 0201 	bic.w	r2, r2, #1
 800e53c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e544:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2220      	movs	r2, #32
 800e558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3714      	adds	r7, #20
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b084      	sub	sp, #16
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e582:	2b01      	cmp	r3, #1
 800e584:	d101      	bne.n	800e58a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e586:	2302      	movs	r3, #2
 800e588:	e02d      	b.n	800e5e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2224      	movs	r2, #36	@ 0x24
 800e596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f022 0201 	bic.w	r2, r2, #1
 800e5b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	683a      	ldr	r2, [r7, #0]
 800e5c2:	430a      	orrs	r2, r1
 800e5c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f850 	bl	800e66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2220      	movs	r2, #32
 800e5d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3710      	adds	r7, #16
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b084      	sub	sp, #16
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
 800e5f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d101      	bne.n	800e606 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e602:	2302      	movs	r3, #2
 800e604:	e02d      	b.n	800e662 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2224      	movs	r2, #36	@ 0x24
 800e612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f022 0201 	bic.w	r2, r2, #1
 800e62c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	689b      	ldr	r3, [r3, #8]
 800e634:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	683a      	ldr	r2, [r7, #0]
 800e63e:	430a      	orrs	r2, r1
 800e640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f812 	bl	800e66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2220      	movs	r2, #32
 800e654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
	...

0800e66c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d108      	bne.n	800e68e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e68c:	e031      	b.n	800e6f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e68e:	2310      	movs	r3, #16
 800e690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e692:	2310      	movs	r3, #16
 800e694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	0e5b      	lsrs	r3, r3, #25
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	f003 0307 	and.w	r3, r3, #7
 800e6a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	0f5b      	lsrs	r3, r3, #29
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	f003 0307 	and.w	r3, r3, #7
 800e6b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6b6:	7bbb      	ldrb	r3, [r7, #14]
 800e6b8:	7b3a      	ldrb	r2, [r7, #12]
 800e6ba:	4911      	ldr	r1, [pc, #68]	@ (800e700 <UARTEx_SetNbDataToProcess+0x94>)
 800e6bc:	5c8a      	ldrb	r2, [r1, r2]
 800e6be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e6c2:	7b3a      	ldrb	r2, [r7, #12]
 800e6c4:	490f      	ldr	r1, [pc, #60]	@ (800e704 <UARTEx_SetNbDataToProcess+0x98>)
 800e6c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
 800e6d6:	7b7a      	ldrb	r2, [r7, #13]
 800e6d8:	4909      	ldr	r1, [pc, #36]	@ (800e700 <UARTEx_SetNbDataToProcess+0x94>)
 800e6da:	5c8a      	ldrb	r2, [r1, r2]
 800e6dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e6e0:	7b7a      	ldrb	r2, [r7, #13]
 800e6e2:	4908      	ldr	r1, [pc, #32]	@ (800e704 <UARTEx_SetNbDataToProcess+0x98>)
 800e6e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e6f2:	bf00      	nop
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	0801837c 	.word	0x0801837c
 800e704:	08018384 	.word	0x08018384

0800e708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e708:	b084      	sub	sp, #16
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b084      	sub	sp, #16
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	f107 001c 	add.w	r0, r7, #28
 800e716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e71a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d121      	bne.n	800e766 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e726:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	68da      	ldr	r2, [r3, #12]
 800e732:	4b2c      	ldr	r3, [pc, #176]	@ (800e7e4 <USB_CoreInit+0xdc>)
 800e734:	4013      	ands	r3, r2
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d105      	bne.n	800e75a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f001 fafa 	bl	800fd54 <USB_CoreReset>
 800e760:	4603      	mov	r3, r0
 800e762:	73fb      	strb	r3, [r7, #15]
 800e764:	e01b      	b.n	800e79e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f001 faee 	bl	800fd54 <USB_CoreReset>
 800e778:	4603      	mov	r3, r0
 800e77a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e77c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e780:	2b00      	cmp	r3, #0
 800e782:	d106      	bne.n	800e792 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e788:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	639a      	str	r2, [r3, #56]	@ 0x38
 800e790:	e005      	b.n	800e79e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e79e:	7fbb      	ldrb	r3, [r7, #30]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d116      	bne.n	800e7d2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e8 <USB_CoreInit+0xe0>)
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	f043 0206 	orr.w	r2, r3, #6
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	689b      	ldr	r3, [r3, #8]
 800e7ca:	f043 0220 	orr.w	r2, r3, #32
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7de:	b004      	add	sp, #16
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	ffbdffbf 	.word	0xffbdffbf
 800e7e8:	03ee0000 	.word	0x03ee0000

0800e7ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b087      	sub	sp, #28
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e7fa:	79fb      	ldrb	r3, [r7, #7]
 800e7fc:	2b02      	cmp	r3, #2
 800e7fe:	d165      	bne.n	800e8cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	4a41      	ldr	r2, [pc, #260]	@ (800e908 <USB_SetTurnaroundTime+0x11c>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d906      	bls.n	800e816 <USB_SetTurnaroundTime+0x2a>
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	4a40      	ldr	r2, [pc, #256]	@ (800e90c <USB_SetTurnaroundTime+0x120>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d202      	bcs.n	800e816 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e810:	230f      	movs	r3, #15
 800e812:	617b      	str	r3, [r7, #20]
 800e814:	e062      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	4a3c      	ldr	r2, [pc, #240]	@ (800e90c <USB_SetTurnaroundTime+0x120>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d306      	bcc.n	800e82c <USB_SetTurnaroundTime+0x40>
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	4a3b      	ldr	r2, [pc, #236]	@ (800e910 <USB_SetTurnaroundTime+0x124>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d202      	bcs.n	800e82c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e826:	230e      	movs	r3, #14
 800e828:	617b      	str	r3, [r7, #20]
 800e82a:	e057      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	4a38      	ldr	r2, [pc, #224]	@ (800e910 <USB_SetTurnaroundTime+0x124>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d306      	bcc.n	800e842 <USB_SetTurnaroundTime+0x56>
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	4a37      	ldr	r2, [pc, #220]	@ (800e914 <USB_SetTurnaroundTime+0x128>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d202      	bcs.n	800e842 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e83c:	230d      	movs	r3, #13
 800e83e:	617b      	str	r3, [r7, #20]
 800e840:	e04c      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	4a33      	ldr	r2, [pc, #204]	@ (800e914 <USB_SetTurnaroundTime+0x128>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d306      	bcc.n	800e858 <USB_SetTurnaroundTime+0x6c>
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	4a32      	ldr	r2, [pc, #200]	@ (800e918 <USB_SetTurnaroundTime+0x12c>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d802      	bhi.n	800e858 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e852:	230c      	movs	r3, #12
 800e854:	617b      	str	r3, [r7, #20]
 800e856:	e041      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	4a2f      	ldr	r2, [pc, #188]	@ (800e918 <USB_SetTurnaroundTime+0x12c>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d906      	bls.n	800e86e <USB_SetTurnaroundTime+0x82>
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	4a2e      	ldr	r2, [pc, #184]	@ (800e91c <USB_SetTurnaroundTime+0x130>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d802      	bhi.n	800e86e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e868:	230b      	movs	r3, #11
 800e86a:	617b      	str	r3, [r7, #20]
 800e86c:	e036      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	4a2a      	ldr	r2, [pc, #168]	@ (800e91c <USB_SetTurnaroundTime+0x130>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d906      	bls.n	800e884 <USB_SetTurnaroundTime+0x98>
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	4a29      	ldr	r2, [pc, #164]	@ (800e920 <USB_SetTurnaroundTime+0x134>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d802      	bhi.n	800e884 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e87e:	230a      	movs	r3, #10
 800e880:	617b      	str	r3, [r7, #20]
 800e882:	e02b      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	4a26      	ldr	r2, [pc, #152]	@ (800e920 <USB_SetTurnaroundTime+0x134>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d906      	bls.n	800e89a <USB_SetTurnaroundTime+0xae>
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	4a25      	ldr	r2, [pc, #148]	@ (800e924 <USB_SetTurnaroundTime+0x138>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d202      	bcs.n	800e89a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e894:	2309      	movs	r3, #9
 800e896:	617b      	str	r3, [r7, #20]
 800e898:	e020      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	4a21      	ldr	r2, [pc, #132]	@ (800e924 <USB_SetTurnaroundTime+0x138>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d306      	bcc.n	800e8b0 <USB_SetTurnaroundTime+0xc4>
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	4a20      	ldr	r2, [pc, #128]	@ (800e928 <USB_SetTurnaroundTime+0x13c>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d802      	bhi.n	800e8b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e8aa:	2308      	movs	r3, #8
 800e8ac:	617b      	str	r3, [r7, #20]
 800e8ae:	e015      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	4a1d      	ldr	r2, [pc, #116]	@ (800e928 <USB_SetTurnaroundTime+0x13c>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d906      	bls.n	800e8c6 <USB_SetTurnaroundTime+0xda>
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	4a1c      	ldr	r2, [pc, #112]	@ (800e92c <USB_SetTurnaroundTime+0x140>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d202      	bcs.n	800e8c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e8c0:	2307      	movs	r3, #7
 800e8c2:	617b      	str	r3, [r7, #20]
 800e8c4:	e00a      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e8c6:	2306      	movs	r3, #6
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e007      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e8cc:	79fb      	ldrb	r3, [r7, #7]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d102      	bne.n	800e8d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e8d2:	2309      	movs	r3, #9
 800e8d4:	617b      	str	r3, [r7, #20]
 800e8d6:	e001      	b.n	800e8dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e8d8:	2309      	movs	r3, #9
 800e8da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	68da      	ldr	r2, [r3, #12]
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	029b      	lsls	r3, r3, #10
 800e8f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e8f4:	431a      	orrs	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	371c      	adds	r7, #28
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	00d8acbf 	.word	0x00d8acbf
 800e90c:	00e4e1c0 	.word	0x00e4e1c0
 800e910:	00f42400 	.word	0x00f42400
 800e914:	01067380 	.word	0x01067380
 800e918:	011a499f 	.word	0x011a499f
 800e91c:	01312cff 	.word	0x01312cff
 800e920:	014ca43f 	.word	0x014ca43f
 800e924:	016e3600 	.word	0x016e3600
 800e928:	01a6ab1f 	.word	0x01a6ab1f
 800e92c:	01e84800 	.word	0x01e84800

0800e930 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	f043 0201 	orr.w	r2, r3, #1
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e952:	b480      	push	{r7}
 800e954:	b083      	sub	sp, #12
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f023 0201 	bic.w	r2, r3, #1
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e980:	2300      	movs	r3, #0
 800e982:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e990:	78fb      	ldrb	r3, [r7, #3]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d115      	bne.n	800e9c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e9a2:	200a      	movs	r0, #10
 800e9a4:	f7f4 fa6c 	bl	8002e80 <HAL_Delay>
      ms += 10U;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	330a      	adds	r3, #10
 800e9ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f001 f93f 	bl	800fc32 <USB_GetMode>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d01e      	beq.n	800e9f8 <USB_SetCurrentMode+0x84>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2bc7      	cmp	r3, #199	@ 0xc7
 800e9be:	d9f0      	bls.n	800e9a2 <USB_SetCurrentMode+0x2e>
 800e9c0:	e01a      	b.n	800e9f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e9c2:	78fb      	ldrb	r3, [r7, #3]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d115      	bne.n	800e9f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e9d4:	200a      	movs	r0, #10
 800e9d6:	f7f4 fa53 	bl	8002e80 <HAL_Delay>
      ms += 10U;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	330a      	adds	r3, #10
 800e9de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f001 f926 	bl	800fc32 <USB_GetMode>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d005      	beq.n	800e9f8 <USB_SetCurrentMode+0x84>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2bc7      	cmp	r3, #199	@ 0xc7
 800e9f0:	d9f0      	bls.n	800e9d4 <USB_SetCurrentMode+0x60>
 800e9f2:	e001      	b.n	800e9f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e005      	b.n	800ea04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2bc8      	cmp	r3, #200	@ 0xc8
 800e9fc:	d101      	bne.n	800ea02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e000      	b.n	800ea04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3710      	adds	r7, #16
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea0c:	b084      	sub	sp, #16
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b086      	sub	sp, #24
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ea1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]
 800ea2a:	e009      	b.n	800ea40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	3340      	adds	r3, #64	@ 0x40
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4413      	add	r3, r2
 800ea36:	2200      	movs	r2, #0
 800ea38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	613b      	str	r3, [r7, #16]
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	2b0e      	cmp	r3, #14
 800ea44:	d9f2      	bls.n	800ea2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ea46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d11c      	bne.n	800ea88 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ea5c:	f043 0302 	orr.w	r3, r3, #2
 800ea60:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea66:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	601a      	str	r2, [r3, #0]
 800ea86:	e005      	b.n	800ea94 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eaa0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d10d      	bne.n	800eac4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eaa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d104      	bne.n	800eaba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eab0:	2100      	movs	r1, #0
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f968 	bl	800ed88 <USB_SetDevSpeed>
 800eab8:	e008      	b.n	800eacc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eaba:	2101      	movs	r1, #1
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 f963 	bl	800ed88 <USB_SetDevSpeed>
 800eac2:	e003      	b.n	800eacc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eac4:	2103      	movs	r1, #3
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f95e 	bl	800ed88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eacc:	2110      	movs	r1, #16
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f8fa 	bl	800ecc8 <USB_FlushTxFifo>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800eada:	2301      	movs	r3, #1
 800eadc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f924 	bl	800ed2c <USB_FlushRxFifo>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb00:	461a      	mov	r2, r3
 800eb02:	2300      	movs	r3, #0
 800eb04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	2300      	movs	r3, #0
 800eb10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb12:	2300      	movs	r3, #0
 800eb14:	613b      	str	r3, [r7, #16]
 800eb16:	e043      	b.n	800eba0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	015a      	lsls	r2, r3, #5
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	4413      	add	r3, r2
 800eb20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb2e:	d118      	bne.n	800eb62 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10a      	bne.n	800eb4c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	015a      	lsls	r2, r3, #5
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb42:	461a      	mov	r2, r3
 800eb44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	e013      	b.n	800eb74 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	015a      	lsls	r2, r3, #5
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	4413      	add	r3, r2
 800eb54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb58:	461a      	mov	r2, r3
 800eb5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	e008      	b.n	800eb74 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb6e:	461a      	mov	r2, r3
 800eb70:	2300      	movs	r3, #0
 800eb72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	015a      	lsls	r2, r3, #5
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb80:	461a      	mov	r2, r3
 800eb82:	2300      	movs	r3, #0
 800eb84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	015a      	lsls	r2, r3, #5
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb92:	461a      	mov	r2, r3
 800eb94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800eb98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	613b      	str	r3, [r7, #16]
 800eba0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eba4:	461a      	mov	r2, r3
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d3b5      	bcc.n	800eb18 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebac:	2300      	movs	r3, #0
 800ebae:	613b      	str	r3, [r7, #16]
 800ebb0:	e043      	b.n	800ec3a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	015a      	lsls	r2, r3, #5
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	4413      	add	r3, r2
 800ebba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ebc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ebc8:	d118      	bne.n	800ebfc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10a      	bne.n	800ebe6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	015a      	lsls	r2, r3, #5
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebdc:	461a      	mov	r2, r3
 800ebde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ebe2:	6013      	str	r3, [r2, #0]
 800ebe4:	e013      	b.n	800ec0e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	015a      	lsls	r2, r3, #5
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	4413      	add	r3, r2
 800ebee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ebf8:	6013      	str	r3, [r2, #0]
 800ebfa:	e008      	b.n	800ec0e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	015a      	lsls	r2, r3, #5
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	4413      	add	r3, r2
 800ec04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec08:	461a      	mov	r2, r3
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	015a      	lsls	r2, r3, #5
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4413      	add	r3, r2
 800ec16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	015a      	lsls	r2, r3, #5
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	4413      	add	r3, r2
 800ec28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ec32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	3301      	adds	r3, #1
 800ec38:	613b      	str	r3, [r7, #16]
 800ec3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ec3e:	461a      	mov	r2, r3
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d3b5      	bcc.n	800ebb2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ec66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ec68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d105      	bne.n	800ec7c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	699b      	ldr	r3, [r3, #24]
 800ec74:	f043 0210 	orr.w	r2, r3, #16
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	699a      	ldr	r2, [r3, #24]
 800ec80:	4b0f      	ldr	r3, [pc, #60]	@ (800ecc0 <USB_DevInit+0x2b4>)
 800ec82:	4313      	orrs	r3, r2
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ec88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d005      	beq.n	800ec9c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	699b      	ldr	r3, [r3, #24]
 800ec94:	f043 0208 	orr.w	r2, r3, #8
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ec9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d105      	bne.n	800ecb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	699a      	ldr	r2, [r3, #24]
 800eca8:	4b06      	ldr	r3, [pc, #24]	@ (800ecc4 <USB_DevInit+0x2b8>)
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3718      	adds	r7, #24
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ecbc:	b004      	add	sp, #16
 800ecbe:	4770      	bx	lr
 800ecc0:	803c3800 	.word	0x803c3800
 800ecc4:	40000004 	.word	0x40000004

0800ecc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ece2:	d901      	bls.n	800ece8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ece4:	2303      	movs	r3, #3
 800ece6:	e01b      	b.n	800ed20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	691b      	ldr	r3, [r3, #16]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	daf2      	bge.n	800ecd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	019b      	lsls	r3, r3, #6
 800ecf8:	f043 0220 	orr.w	r2, r3, #32
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3301      	adds	r3, #1
 800ed04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed0c:	d901      	bls.n	800ed12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e006      	b.n	800ed20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	f003 0320 	and.w	r3, r3, #32
 800ed1a:	2b20      	cmp	r3, #32
 800ed1c:	d0f0      	beq.n	800ed00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3714      	adds	r7, #20
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b085      	sub	sp, #20
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed34:	2300      	movs	r3, #0
 800ed36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed44:	d901      	bls.n	800ed4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ed46:	2303      	movs	r3, #3
 800ed48:	e018      	b.n	800ed7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	691b      	ldr	r3, [r3, #16]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	daf2      	bge.n	800ed38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ed52:	2300      	movs	r3, #0
 800ed54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2210      	movs	r2, #16
 800ed5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed68:	d901      	bls.n	800ed6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	e006      	b.n	800ed7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	f003 0310 	and.w	r3, r3, #16
 800ed76:	2b10      	cmp	r3, #16
 800ed78:	d0f0      	beq.n	800ed5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3714      	adds	r7, #20
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	460b      	mov	r3, r1
 800ed92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	68f9      	ldr	r1, [r7, #12]
 800eda4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eda8:	4313      	orrs	r3, r2
 800edaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3714      	adds	r7, #20
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr

0800edba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800edba:	b480      	push	{r7}
 800edbc:	b087      	sub	sp, #28
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edcc:	689b      	ldr	r3, [r3, #8]
 800edce:	f003 0306 	and.w	r3, r3, #6
 800edd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d102      	bne.n	800ede0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800edda:	2300      	movs	r3, #0
 800eddc:	75fb      	strb	r3, [r7, #23]
 800edde:	e00a      	b.n	800edf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b02      	cmp	r3, #2
 800ede4:	d002      	beq.n	800edec <USB_GetDevSpeed+0x32>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b06      	cmp	r3, #6
 800edea:	d102      	bne.n	800edf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800edec:	2302      	movs	r3, #2
 800edee:	75fb      	strb	r3, [r7, #23]
 800edf0:	e001      	b.n	800edf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800edf2:	230f      	movs	r3, #15
 800edf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800edf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	371c      	adds	r7, #28
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	785b      	ldrb	r3, [r3, #1]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d139      	bne.n	800ee94 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee26:	69da      	ldr	r2, [r3, #28]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f003 030f 	and.w	r3, r3, #15
 800ee30:	2101      	movs	r1, #1
 800ee32:	fa01 f303 	lsl.w	r3, r1, r3
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	68f9      	ldr	r1, [r7, #12]
 800ee3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	015a      	lsls	r2, r3, #5
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	4413      	add	r3, r2
 800ee4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d153      	bne.n	800ef00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	015a      	lsls	r2, r3, #5
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	4413      	add	r3, r2
 800ee60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	791b      	ldrb	r3, [r3, #4]
 800ee72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	059b      	lsls	r3, r3, #22
 800ee7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee7c:	431a      	orrs	r2, r3
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	0159      	lsls	r1, r3, #5
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	440b      	add	r3, r1
 800ee86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	4b20      	ldr	r3, [pc, #128]	@ (800ef10 <USB_ActivateEndpoint+0x10c>)
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	600b      	str	r3, [r1, #0]
 800ee92:	e035      	b.n	800ef00 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee9a:	69da      	ldr	r2, [r3, #28]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 030f 	and.w	r3, r3, #15
 800eea4:	2101      	movs	r1, #1
 800eea6:	fa01 f303 	lsl.w	r3, r1, r3
 800eeaa:	041b      	lsls	r3, r3, #16
 800eeac:	68f9      	ldr	r1, [r7, #12]
 800eeae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	015a      	lsls	r2, r3, #5
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	4413      	add	r3, r2
 800eebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d119      	bne.n	800ef00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	015a      	lsls	r2, r3, #5
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	4413      	add	r3, r2
 800eed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	791b      	ldrb	r3, [r3, #4]
 800eee6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eee8:	430b      	orrs	r3, r1
 800eeea:	431a      	orrs	r2, r3
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	0159      	lsls	r1, r3, #5
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	440b      	add	r3, r1
 800eef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eef8:	4619      	mov	r1, r3
 800eefa:	4b05      	ldr	r3, [pc, #20]	@ (800ef10 <USB_ActivateEndpoint+0x10c>)
 800eefc:	4313      	orrs	r3, r2
 800eefe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	10008000 	.word	0x10008000

0800ef14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	785b      	ldrb	r3, [r3, #1]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d161      	bne.n	800eff4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	015a      	lsls	r2, r3, #5
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4413      	add	r3, r2
 800ef38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef46:	d11f      	bne.n	800ef88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	015a      	lsls	r2, r3, #5
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4413      	add	r3, r2
 800ef50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68ba      	ldr	r2, [r7, #8]
 800ef58:	0151      	lsls	r1, r2, #5
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	440a      	add	r2, r1
 800ef5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ef66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	015a      	lsls	r2, r3, #5
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4413      	add	r3, r2
 800ef70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	0151      	lsls	r1, r2, #5
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	440a      	add	r2, r1
 800ef7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ef86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	f003 030f 	and.w	r3, r3, #15
 800ef98:	2101      	movs	r1, #1
 800ef9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	43db      	mvns	r3, r3
 800efa2:	68f9      	ldr	r1, [r7, #12]
 800efa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800efa8:	4013      	ands	r3, r2
 800efaa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efb2:	69da      	ldr	r2, [r3, #28]
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	f003 030f 	and.w	r3, r3, #15
 800efbc:	2101      	movs	r1, #1
 800efbe:	fa01 f303 	lsl.w	r3, r1, r3
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	43db      	mvns	r3, r3
 800efc6:	68f9      	ldr	r1, [r7, #12]
 800efc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800efcc:	4013      	ands	r3, r2
 800efce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	015a      	lsls	r2, r3, #5
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	4413      	add	r3, r2
 800efd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	0159      	lsls	r1, r3, #5
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	440b      	add	r3, r1
 800efe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efea:	4619      	mov	r1, r3
 800efec:	4b35      	ldr	r3, [pc, #212]	@ (800f0c4 <USB_DeactivateEndpoint+0x1b0>)
 800efee:	4013      	ands	r3, r2
 800eff0:	600b      	str	r3, [r1, #0]
 800eff2:	e060      	b.n	800f0b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	015a      	lsls	r2, r3, #5
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	4413      	add	r3, r2
 800effc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f006:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f00a:	d11f      	bne.n	800f04c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	015a      	lsls	r2, r3, #5
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	4413      	add	r3, r2
 800f014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	0151      	lsls	r1, r2, #5
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	440a      	add	r2, r1
 800f022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f026:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f02a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	015a      	lsls	r2, r3, #5
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	4413      	add	r3, r2
 800f034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68ba      	ldr	r2, [r7, #8]
 800f03c:	0151      	lsls	r1, r2, #5
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	440a      	add	r2, r1
 800f042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f046:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f04a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	f003 030f 	and.w	r3, r3, #15
 800f05c:	2101      	movs	r1, #1
 800f05e:	fa01 f303 	lsl.w	r3, r1, r3
 800f062:	041b      	lsls	r3, r3, #16
 800f064:	43db      	mvns	r3, r3
 800f066:	68f9      	ldr	r1, [r7, #12]
 800f068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f06c:	4013      	ands	r3, r2
 800f06e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f076:	69da      	ldr	r2, [r3, #28]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	f003 030f 	and.w	r3, r3, #15
 800f080:	2101      	movs	r1, #1
 800f082:	fa01 f303 	lsl.w	r3, r1, r3
 800f086:	041b      	lsls	r3, r3, #16
 800f088:	43db      	mvns	r3, r3
 800f08a:	68f9      	ldr	r1, [r7, #12]
 800f08c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f090:	4013      	ands	r3, r2
 800f092:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	015a      	lsls	r2, r3, #5
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4413      	add	r3, r2
 800f09c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	0159      	lsls	r1, r3, #5
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	440b      	add	r3, r1
 800f0aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	4b05      	ldr	r3, [pc, #20]	@ (800f0c8 <USB_DeactivateEndpoint+0x1b4>)
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3714      	adds	r7, #20
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr
 800f0c4:	ec337800 	.word	0xec337800
 800f0c8:	eff37800 	.word	0xeff37800

0800f0cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08a      	sub	sp, #40	@ 0x28
 800f0d0:	af02      	add	r7, sp, #8
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	785b      	ldrb	r3, [r3, #1]
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	f040 8185 	bne.w	800f3f8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d132      	bne.n	800f15c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	015a      	lsls	r2, r3, #5
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f102:	691a      	ldr	r2, [r3, #16]
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	0159      	lsls	r1, r3, #5
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	440b      	add	r3, r1
 800f10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f110:	4619      	mov	r1, r3
 800f112:	4ba7      	ldr	r3, [pc, #668]	@ (800f3b0 <USB_EPStartXfer+0x2e4>)
 800f114:	4013      	ands	r3, r2
 800f116:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	015a      	lsls	r2, r3, #5
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	4413      	add	r3, r2
 800f120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	69ba      	ldr	r2, [r7, #24]
 800f128:	0151      	lsls	r1, r2, #5
 800f12a:	69fa      	ldr	r2, [r7, #28]
 800f12c:	440a      	add	r2, r1
 800f12e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f132:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f138:	69bb      	ldr	r3, [r7, #24]
 800f13a:	015a      	lsls	r2, r3, #5
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	4413      	add	r3, r2
 800f140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f144:	691a      	ldr	r2, [r3, #16]
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	0159      	lsls	r1, r3, #5
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	440b      	add	r3, r1
 800f14e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f152:	4619      	mov	r1, r3
 800f154:	4b97      	ldr	r3, [pc, #604]	@ (800f3b4 <USB_EPStartXfer+0x2e8>)
 800f156:	4013      	ands	r3, r2
 800f158:	610b      	str	r3, [r1, #16]
 800f15a:	e097      	b.n	800f28c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	015a      	lsls	r2, r3, #5
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	4413      	add	r3, r2
 800f164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f168:	691a      	ldr	r2, [r3, #16]
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	0159      	lsls	r1, r3, #5
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	440b      	add	r3, r1
 800f172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f176:	4619      	mov	r1, r3
 800f178:	4b8e      	ldr	r3, [pc, #568]	@ (800f3b4 <USB_EPStartXfer+0x2e8>)
 800f17a:	4013      	ands	r3, r2
 800f17c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	015a      	lsls	r2, r3, #5
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	4413      	add	r3, r2
 800f186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f18a:	691a      	ldr	r2, [r3, #16]
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	0159      	lsls	r1, r3, #5
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	440b      	add	r3, r1
 800f194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f198:	4619      	mov	r1, r3
 800f19a:	4b85      	ldr	r3, [pc, #532]	@ (800f3b0 <USB_EPStartXfer+0x2e4>)
 800f19c:	4013      	ands	r3, r2
 800f19e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d11a      	bne.n	800f1dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	691a      	ldr	r2, [r3, #16]
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d903      	bls.n	800f1ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	689a      	ldr	r2, [r3, #8]
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	015a      	lsls	r2, r3, #5
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1c6:	691b      	ldr	r3, [r3, #16]
 800f1c8:	69ba      	ldr	r2, [r7, #24]
 800f1ca:	0151      	lsls	r1, r2, #5
 800f1cc:	69fa      	ldr	r2, [r7, #28]
 800f1ce:	440a      	add	r2, r1
 800f1d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f1d8:	6113      	str	r3, [r2, #16]
 800f1da:	e044      	b.n	800f266 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	691a      	ldr	r2, [r3, #16]
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	1e5a      	subs	r2, r3, #1
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1f0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	015a      	lsls	r2, r3, #5
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1fe:	691a      	ldr	r2, [r3, #16]
 800f200:	8afb      	ldrh	r3, [r7, #22]
 800f202:	04d9      	lsls	r1, r3, #19
 800f204:	4b6c      	ldr	r3, [pc, #432]	@ (800f3b8 <USB_EPStartXfer+0x2ec>)
 800f206:	400b      	ands	r3, r1
 800f208:	69b9      	ldr	r1, [r7, #24]
 800f20a:	0148      	lsls	r0, r1, #5
 800f20c:	69f9      	ldr	r1, [r7, #28]
 800f20e:	4401      	add	r1, r0
 800f210:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f214:	4313      	orrs	r3, r2
 800f216:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	791b      	ldrb	r3, [r3, #4]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d122      	bne.n	800f266 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	015a      	lsls	r2, r3, #5
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	4413      	add	r3, r2
 800f228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	69ba      	ldr	r2, [r7, #24]
 800f230:	0151      	lsls	r1, r2, #5
 800f232:	69fa      	ldr	r2, [r7, #28]
 800f234:	440a      	add	r2, r1
 800f236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f23a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f23e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	015a      	lsls	r2, r3, #5
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	4413      	add	r3, r2
 800f248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f24c:	691a      	ldr	r2, [r3, #16]
 800f24e:	8afb      	ldrh	r3, [r7, #22]
 800f250:	075b      	lsls	r3, r3, #29
 800f252:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800f256:	69b9      	ldr	r1, [r7, #24]
 800f258:	0148      	lsls	r0, r1, #5
 800f25a:	69f9      	ldr	r1, [r7, #28]
 800f25c:	4401      	add	r1, r0
 800f25e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f262:	4313      	orrs	r3, r2
 800f264:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	015a      	lsls	r2, r3, #5
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	4413      	add	r3, r2
 800f26e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f272:	691a      	ldr	r2, [r3, #16]
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f27c:	69b9      	ldr	r1, [r7, #24]
 800f27e:	0148      	lsls	r0, r1, #5
 800f280:	69f9      	ldr	r1, [r7, #28]
 800f282:	4401      	add	r1, r0
 800f284:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f288:	4313      	orrs	r3, r2
 800f28a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f28c:	79fb      	ldrb	r3, [r7, #7]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d14b      	bne.n	800f32a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	69db      	ldr	r3, [r3, #28]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d009      	beq.n	800f2ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	69db      	ldr	r3, [r3, #28]
 800f2ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	791b      	ldrb	r3, [r3, #4]
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d128      	bne.n	800f308 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d110      	bne.n	800f2e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	015a      	lsls	r2, r3, #5
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	69ba      	ldr	r2, [r7, #24]
 800f2d6:	0151      	lsls	r1, r2, #5
 800f2d8:	69fa      	ldr	r2, [r7, #28]
 800f2da:	440a      	add	r2, r1
 800f2dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f2e4:	6013      	str	r3, [r2, #0]
 800f2e6:	e00f      	b.n	800f308 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	015a      	lsls	r2, r3, #5
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	69ba      	ldr	r2, [r7, #24]
 800f2f8:	0151      	lsls	r1, r2, #5
 800f2fa:	69fa      	ldr	r2, [r7, #28]
 800f2fc:	440a      	add	r2, r1
 800f2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f306:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	015a      	lsls	r2, r3, #5
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	4413      	add	r3, r2
 800f310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	69ba      	ldr	r2, [r7, #24]
 800f318:	0151      	lsls	r1, r2, #5
 800f31a:	69fa      	ldr	r2, [r7, #28]
 800f31c:	440a      	add	r2, r1
 800f31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f322:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	e169      	b.n	800f5fe <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	015a      	lsls	r2, r3, #5
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	4413      	add	r3, r2
 800f332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	69ba      	ldr	r2, [r7, #24]
 800f33a:	0151      	lsls	r1, r2, #5
 800f33c:	69fa      	ldr	r2, [r7, #28]
 800f33e:	440a      	add	r2, r1
 800f340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f344:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f348:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	791b      	ldrb	r3, [r3, #4]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d015      	beq.n	800f37e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 8151 	beq.w	800f5fe <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f003 030f 	and.w	r3, r3, #15
 800f36c:	2101      	movs	r1, #1
 800f36e:	fa01 f303 	lsl.w	r3, r1, r3
 800f372:	69f9      	ldr	r1, [r7, #28]
 800f374:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f378:	4313      	orrs	r3, r2
 800f37a:	634b      	str	r3, [r1, #52]	@ 0x34
 800f37c:	e13f      	b.n	800f5fe <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d116      	bne.n	800f3bc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	015a      	lsls	r2, r3, #5
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	4413      	add	r3, r2
 800f396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	0151      	lsls	r1, r2, #5
 800f3a0:	69fa      	ldr	r2, [r7, #28]
 800f3a2:	440a      	add	r2, r1
 800f3a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f3ac:	6013      	str	r3, [r2, #0]
 800f3ae:	e015      	b.n	800f3dc <USB_EPStartXfer+0x310>
 800f3b0:	e007ffff 	.word	0xe007ffff
 800f3b4:	fff80000 	.word	0xfff80000
 800f3b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	015a      	lsls	r2, r3, #5
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	69ba      	ldr	r2, [r7, #24]
 800f3cc:	0151      	lsls	r1, r2, #5
 800f3ce:	69fa      	ldr	r2, [r7, #28]
 800f3d0:	440a      	add	r2, r1
 800f3d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f3da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	68d9      	ldr	r1, [r3, #12]
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	781a      	ldrb	r2, [r3, #0]
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	b298      	uxth	r0, r3
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f000 f9b9 	bl	800f768 <USB_WritePacket>
 800f3f6:	e102      	b.n	800f5fe <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	015a      	lsls	r2, r3, #5
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	4413      	add	r3, r2
 800f400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f404:	691a      	ldr	r2, [r3, #16]
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	0159      	lsls	r1, r3, #5
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	440b      	add	r3, r1
 800f40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f412:	4619      	mov	r1, r3
 800f414:	4b7c      	ldr	r3, [pc, #496]	@ (800f608 <USB_EPStartXfer+0x53c>)
 800f416:	4013      	ands	r3, r2
 800f418:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	015a      	lsls	r2, r3, #5
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	4413      	add	r3, r2
 800f422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f426:	691a      	ldr	r2, [r3, #16]
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	0159      	lsls	r1, r3, #5
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	440b      	add	r3, r1
 800f430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f434:	4619      	mov	r1, r3
 800f436:	4b75      	ldr	r3, [pc, #468]	@ (800f60c <USB_EPStartXfer+0x540>)
 800f438:	4013      	ands	r3, r2
 800f43a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d12f      	bne.n	800f4a2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	689a      	ldr	r2, [r3, #8]
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	689a      	ldr	r2, [r3, #8]
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	015a      	lsls	r2, r3, #5
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	4413      	add	r3, r2
 800f462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f466:	691a      	ldr	r2, [r3, #16]
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	6a1b      	ldr	r3, [r3, #32]
 800f46c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f470:	69b9      	ldr	r1, [r7, #24]
 800f472:	0148      	lsls	r0, r1, #5
 800f474:	69f9      	ldr	r1, [r7, #28]
 800f476:	4401      	add	r1, r0
 800f478:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f47c:	4313      	orrs	r3, r2
 800f47e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	015a      	lsls	r2, r3, #5
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	4413      	add	r3, r2
 800f488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f48c:	691b      	ldr	r3, [r3, #16]
 800f48e:	69ba      	ldr	r2, [r7, #24]
 800f490:	0151      	lsls	r1, r2, #5
 800f492:	69fa      	ldr	r2, [r7, #28]
 800f494:	440a      	add	r2, r1
 800f496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f49a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f49e:	6113      	str	r3, [r2, #16]
 800f4a0:	e05f      	b.n	800f562 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d123      	bne.n	800f4f2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	015a      	lsls	r2, r3, #5
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4b6:	691a      	ldr	r2, [r3, #16]
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	689b      	ldr	r3, [r3, #8]
 800f4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4c0:	69b9      	ldr	r1, [r7, #24]
 800f4c2:	0148      	lsls	r0, r1, #5
 800f4c4:	69f9      	ldr	r1, [r7, #28]
 800f4c6:	4401      	add	r1, r0
 800f4c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	015a      	lsls	r2, r3, #5
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	69ba      	ldr	r2, [r7, #24]
 800f4e0:	0151      	lsls	r1, r2, #5
 800f4e2:	69fa      	ldr	r2, [r7, #28]
 800f4e4:	440a      	add	r2, r1
 800f4e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f4ee:	6113      	str	r3, [r2, #16]
 800f4f0:	e037      	b.n	800f562 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	691a      	ldr	r2, [r3, #16]
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	1e5a      	subs	r2, r3, #1
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	fbb2 f3f3 	udiv	r3, r2, r3
 800f506:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	8afa      	ldrh	r2, [r7, #22]
 800f50e:	fb03 f202 	mul.w	r2, r3, r2
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	015a      	lsls	r2, r3, #5
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	4413      	add	r3, r2
 800f51e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f522:	691a      	ldr	r2, [r3, #16]
 800f524:	8afb      	ldrh	r3, [r7, #22]
 800f526:	04d9      	lsls	r1, r3, #19
 800f528:	4b39      	ldr	r3, [pc, #228]	@ (800f610 <USB_EPStartXfer+0x544>)
 800f52a:	400b      	ands	r3, r1
 800f52c:	69b9      	ldr	r1, [r7, #24]
 800f52e:	0148      	lsls	r0, r1, #5
 800f530:	69f9      	ldr	r1, [r7, #28]
 800f532:	4401      	add	r1, r0
 800f534:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f538:	4313      	orrs	r3, r2
 800f53a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	015a      	lsls	r2, r3, #5
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	4413      	add	r3, r2
 800f544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f548:	691a      	ldr	r2, [r3, #16]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f552:	69b9      	ldr	r1, [r7, #24]
 800f554:	0148      	lsls	r0, r1, #5
 800f556:	69f9      	ldr	r1, [r7, #28]
 800f558:	4401      	add	r1, r0
 800f55a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f55e:	4313      	orrs	r3, r2
 800f560:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f562:	79fb      	ldrb	r3, [r7, #7]
 800f564:	2b01      	cmp	r3, #1
 800f566:	d10d      	bne.n	800f584 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	68d9      	ldr	r1, [r3, #12]
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	015a      	lsls	r2, r3, #5
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	4413      	add	r3, r2
 800f57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f580:	460a      	mov	r2, r1
 800f582:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	791b      	ldrb	r3, [r3, #4]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d128      	bne.n	800f5de <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d110      	bne.n	800f5be <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	015a      	lsls	r2, r3, #5
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	69ba      	ldr	r2, [r7, #24]
 800f5ac:	0151      	lsls	r1, r2, #5
 800f5ae:	69fa      	ldr	r2, [r7, #28]
 800f5b0:	440a      	add	r2, r1
 800f5b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f5ba:	6013      	str	r3, [r2, #0]
 800f5bc:	e00f      	b.n	800f5de <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	015a      	lsls	r2, r3, #5
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	69ba      	ldr	r2, [r7, #24]
 800f5ce:	0151      	lsls	r1, r2, #5
 800f5d0:	69fa      	ldr	r2, [r7, #28]
 800f5d2:	440a      	add	r2, r1
 800f5d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f5dc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	69ba      	ldr	r2, [r7, #24]
 800f5ee:	0151      	lsls	r1, r2, #5
 800f5f0:	69fa      	ldr	r2, [r7, #28]
 800f5f2:	440a      	add	r2, r1
 800f5f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5f8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f5fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3720      	adds	r7, #32
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	fff80000 	.word	0xfff80000
 800f60c:	e007ffff 	.word	0xe007ffff
 800f610:	1ff80000 	.word	0x1ff80000

0800f614 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f614:	b480      	push	{r7}
 800f616:	b087      	sub	sp, #28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f61e:	2300      	movs	r3, #0
 800f620:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f622:	2300      	movs	r3, #0
 800f624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	785b      	ldrb	r3, [r3, #1]
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d14a      	bne.n	800f6c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	015a      	lsls	r2, r3, #5
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	4413      	add	r3, r2
 800f63c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f64a:	f040 8086 	bne.w	800f75a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	015a      	lsls	r2, r3, #5
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	4413      	add	r3, r2
 800f658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	683a      	ldr	r2, [r7, #0]
 800f660:	7812      	ldrb	r2, [r2, #0]
 800f662:	0151      	lsls	r1, r2, #5
 800f664:	693a      	ldr	r2, [r7, #16]
 800f666:	440a      	add	r2, r1
 800f668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f66c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f670:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	015a      	lsls	r2, r3, #5
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	4413      	add	r3, r2
 800f67c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	683a      	ldr	r2, [r7, #0]
 800f684:	7812      	ldrb	r2, [r2, #0]
 800f686:	0151      	lsls	r1, r2, #5
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	440a      	add	r2, r1
 800f68c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f690:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f694:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	3301      	adds	r3, #1
 800f69a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d902      	bls.n	800f6ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	75fb      	strb	r3, [r7, #23]
          break;
 800f6aa:	e056      	b.n	800f75a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	015a      	lsls	r2, r3, #5
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f6c4:	d0e7      	beq.n	800f696 <USB_EPStopXfer+0x82>
 800f6c6:	e048      	b.n	800f75a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	015a      	lsls	r2, r3, #5
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f6e0:	d13b      	bne.n	800f75a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	015a      	lsls	r2, r3, #5
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	7812      	ldrb	r2, [r2, #0]
 800f6f6:	0151      	lsls	r1, r2, #5
 800f6f8:	693a      	ldr	r2, [r7, #16]
 800f6fa:	440a      	add	r2, r1
 800f6fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f704:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	015a      	lsls	r2, r3, #5
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	4413      	add	r3, r2
 800f710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	7812      	ldrb	r2, [r2, #0]
 800f71a:	0151      	lsls	r1, r2, #5
 800f71c:	693a      	ldr	r2, [r7, #16]
 800f71e:	440a      	add	r2, r1
 800f720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f728:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3301      	adds	r3, #1
 800f72e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f736:	4293      	cmp	r3, r2
 800f738:	d902      	bls.n	800f740 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f73a:	2301      	movs	r3, #1
 800f73c:	75fb      	strb	r3, [r7, #23]
          break;
 800f73e:	e00c      	b.n	800f75a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	015a      	lsls	r2, r3, #5
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	4413      	add	r3, r2
 800f74a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f754:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f758:	d0e7      	beq.n	800f72a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	371c      	adds	r7, #28
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f768:	b480      	push	{r7}
 800f76a:	b089      	sub	sp, #36	@ 0x24
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	4611      	mov	r1, r2
 800f774:	461a      	mov	r2, r3
 800f776:	460b      	mov	r3, r1
 800f778:	71fb      	strb	r3, [r7, #7]
 800f77a:	4613      	mov	r3, r2
 800f77c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f786:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d123      	bne.n	800f7d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f78e:	88bb      	ldrh	r3, [r7, #4]
 800f790:	3303      	adds	r3, #3
 800f792:	089b      	lsrs	r3, r3, #2
 800f794:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f796:	2300      	movs	r3, #0
 800f798:	61bb      	str	r3, [r7, #24]
 800f79a:	e018      	b.n	800f7ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f79c:	79fb      	ldrb	r3, [r7, #7]
 800f79e:	031a      	lsls	r2, r3, #12
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	61bb      	str	r3, [r7, #24]
 800f7ce:	69ba      	ldr	r2, [r7, #24]
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d3e2      	bcc.n	800f79c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3724      	adds	r7, #36	@ 0x24
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b08b      	sub	sp, #44	@ 0x2c
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f7fa:	88fb      	ldrh	r3, [r7, #6]
 800f7fc:	089b      	lsrs	r3, r3, #2
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f802:	88fb      	ldrh	r3, [r7, #6]
 800f804:	f003 0303 	and.w	r3, r3, #3
 800f808:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f80a:	2300      	movs	r3, #0
 800f80c:	623b      	str	r3, [r7, #32]
 800f80e:	e014      	b.n	800f83a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81a:	601a      	str	r2, [r3, #0]
    pDest++;
 800f81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81e:	3301      	adds	r3, #1
 800f820:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f824:	3301      	adds	r3, #1
 800f826:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f82a:	3301      	adds	r3, #1
 800f82c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f830:	3301      	adds	r3, #1
 800f832:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	3301      	adds	r3, #1
 800f838:	623b      	str	r3, [r7, #32]
 800f83a:	6a3a      	ldr	r2, [r7, #32]
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d3e6      	bcc.n	800f810 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f842:	8bfb      	ldrh	r3, [r7, #30]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d01e      	beq.n	800f886 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f848:	2300      	movs	r3, #0
 800f84a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f852:	461a      	mov	r2, r3
 800f854:	f107 0310 	add.w	r3, r7, #16
 800f858:	6812      	ldr	r2, [r2, #0]
 800f85a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	6a3b      	ldr	r3, [r7, #32]
 800f860:	b2db      	uxtb	r3, r3
 800f862:	00db      	lsls	r3, r3, #3
 800f864:	fa22 f303 	lsr.w	r3, r2, r3
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86c:	701a      	strb	r2, [r3, #0]
      i++;
 800f86e:	6a3b      	ldr	r3, [r7, #32]
 800f870:	3301      	adds	r3, #1
 800f872:	623b      	str	r3, [r7, #32]
      pDest++;
 800f874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f876:	3301      	adds	r3, #1
 800f878:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f87a:	8bfb      	ldrh	r3, [r7, #30]
 800f87c:	3b01      	subs	r3, #1
 800f87e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f880:	8bfb      	ldrh	r3, [r7, #30]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1ea      	bne.n	800f85c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f888:	4618      	mov	r0, r3
 800f88a:	372c      	adds	r7, #44	@ 0x2c
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	785b      	ldrb	r3, [r3, #1]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d12c      	bne.n	800f90a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	015a      	lsls	r2, r3, #5
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	db12      	blt.n	800f8e8 <USB_EPSetStall+0x54>
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00f      	beq.n	800f8e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	68ba      	ldr	r2, [r7, #8]
 800f8d8:	0151      	lsls	r1, r2, #5
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	440a      	add	r2, r1
 800f8de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f8e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f8e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	015a      	lsls	r2, r3, #5
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	0151      	lsls	r1, r2, #5
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	440a      	add	r2, r1
 800f8fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f902:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f906:	6013      	str	r3, [r2, #0]
 800f908:	e02b      	b.n	800f962 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	015a      	lsls	r2, r3, #5
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	4413      	add	r3, r2
 800f912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	db12      	blt.n	800f942 <USB_EPSetStall+0xae>
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d00f      	beq.n	800f942 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	015a      	lsls	r2, r3, #5
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	4413      	add	r3, r2
 800f92a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	0151      	lsls	r1, r2, #5
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	440a      	add	r2, r1
 800f938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f93c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f940:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	015a      	lsls	r2, r3, #5
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4413      	add	r3, r2
 800f94a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	0151      	lsls	r1, r2, #5
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	440a      	add	r2, r1
 800f958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f95c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f960:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f962:	2300      	movs	r3, #0
}
 800f964:	4618      	mov	r0, r3
 800f966:	3714      	adds	r7, #20
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	785b      	ldrb	r3, [r3, #1]
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d128      	bne.n	800f9de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	015a      	lsls	r2, r3, #5
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	4413      	add	r3, r2
 800f994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	68ba      	ldr	r2, [r7, #8]
 800f99c:	0151      	lsls	r1, r2, #5
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	440a      	add	r2, r1
 800f9a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f9aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	791b      	ldrb	r3, [r3, #4]
 800f9b0:	2b03      	cmp	r3, #3
 800f9b2:	d003      	beq.n	800f9bc <USB_EPClearStall+0x4c>
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	791b      	ldrb	r3, [r3, #4]
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d138      	bne.n	800fa2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	0151      	lsls	r1, r2, #5
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	440a      	add	r2, r1
 800f9d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	e027      	b.n	800fa2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	015a      	lsls	r2, r3, #5
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	0151      	lsls	r1, r2, #5
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	440a      	add	r2, r1
 800f9f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f9fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	791b      	ldrb	r3, [r3, #4]
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d003      	beq.n	800fa0e <USB_EPClearStall+0x9e>
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	791b      	ldrb	r3, [r3, #4]
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d10f      	bne.n	800fa2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	015a      	lsls	r2, r3, #5
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	4413      	add	r3, r2
 800fa16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	0151      	lsls	r1, r2, #5
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	440a      	add	r2, r1
 800fa24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fa2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fa2e:	2300      	movs	r3, #0
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3714      	adds	r7, #20
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	460b      	mov	r3, r1
 800fa46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fa5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800fa5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	78fb      	ldrb	r3, [r7, #3]
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800fa70:	68f9      	ldr	r1, [r7, #12]
 800fa72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa76:	4313      	orrs	r3, r2
 800fa78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3714      	adds	r7, #20
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68fa      	ldr	r2, [r7, #12]
 800fa9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800faa2:	f023 0303 	bic.w	r3, r3, #3
 800faa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	68fa      	ldr	r2, [r7, #12]
 800fab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fab6:	f023 0302 	bic.w	r3, r3, #2
 800faba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3714      	adds	r7, #20
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800faca:	b480      	push	{r7}
 800facc:	b085      	sub	sp, #20
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fae4:	f023 0303 	bic.w	r3, r3, #3
 800fae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800faf8:	f043 0302 	orr.w	r3, r3, #2
 800fafc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	695b      	ldr	r3, [r3, #20]
 800fb18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	699b      	ldr	r3, [r3, #24]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	4013      	ands	r3, r2
 800fb22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fb24:	68fb      	ldr	r3, [r7, #12]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3714      	adds	r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb32:	b480      	push	{r7}
 800fb34:	b085      	sub	sp, #20
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb44:	699b      	ldr	r3, [r3, #24]
 800fb46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb4e:	69db      	ldr	r3, [r3, #28]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	4013      	ands	r3, r2
 800fb54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	0c1b      	lsrs	r3, r3, #16
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3714      	adds	r7, #20
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr

0800fb66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb66:	b480      	push	{r7}
 800fb68:	b085      	sub	sp, #20
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb78:	699b      	ldr	r3, [r3, #24]
 800fb7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb82:	69db      	ldr	r3, [r3, #28]
 800fb84:	68ba      	ldr	r2, [r7, #8]
 800fb86:	4013      	ands	r3, r2
 800fb88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	b29b      	uxth	r3, r3
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3714      	adds	r7, #20
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb9a:	b480      	push	{r7}
 800fb9c:	b085      	sub	sp, #20
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
 800fba2:	460b      	mov	r3, r1
 800fba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fbaa:	78fb      	ldrb	r3, [r7, #3]
 800fbac:	015a      	lsls	r2, r3, #5
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbc0:	695b      	ldr	r3, [r3, #20]
 800fbc2:	68ba      	ldr	r2, [r7, #8]
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fbc8:	68bb      	ldr	r3, [r7, #8]
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3714      	adds	r7, #20
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fbd6:	b480      	push	{r7}
 800fbd8:	b087      	sub	sp, #28
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
 800fbde:	460b      	mov	r3, r1
 800fbe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbec:	691b      	ldr	r3, [r3, #16]
 800fbee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fbfa:	78fb      	ldrb	r3, [r7, #3]
 800fbfc:	f003 030f 	and.w	r3, r3, #15
 800fc00:	68fa      	ldr	r2, [r7, #12]
 800fc02:	fa22 f303 	lsr.w	r3, r2, r3
 800fc06:	01db      	lsls	r3, r3, #7
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	693a      	ldr	r2, [r7, #16]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc10:	78fb      	ldrb	r3, [r7, #3]
 800fc12:	015a      	lsls	r2, r3, #5
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	4413      	add	r3, r2
 800fc18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	693a      	ldr	r2, [r7, #16]
 800fc20:	4013      	ands	r3, r2
 800fc22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc24:	68bb      	ldr	r3, [r7, #8]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	371c      	adds	r7, #28
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr

0800fc32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc32:	b480      	push	{r7}
 800fc34:	b083      	sub	sp, #12
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	695b      	ldr	r3, [r3, #20]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr
	...

0800fc50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4b09      	ldr	r3, [pc, #36]	@ (800fc94 <USB_ActivateSetup+0x44>)
 800fc6e:	4013      	ands	r3, r2
 800fc70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fc80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fc84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc86:	2300      	movs	r3, #0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3714      	adds	r7, #20
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr
 800fc94:	fffff800 	.word	0xfffff800

0800fc98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b087      	sub	sp, #28
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	460b      	mov	r3, r1
 800fca2:	607a      	str	r2, [r7, #4]
 800fca4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	333c      	adds	r3, #60	@ 0x3c
 800fcae:	3304      	adds	r3, #4
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	4a26      	ldr	r2, [pc, #152]	@ (800fd50 <USB_EP0_OutStart+0xb8>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d90a      	bls.n	800fcd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fcc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fccc:	d101      	bne.n	800fcd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	e037      	b.n	800fd42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcd8:	461a      	mov	r2, r3
 800fcda:	2300      	movs	r3, #0
 800fcdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fcf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcf8:	691b      	ldr	r3, [r3, #16]
 800fcfa:	697a      	ldr	r2, [r7, #20]
 800fcfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd00:	f043 0318 	orr.w	r3, r3, #24
 800fd04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd0c:	691b      	ldr	r3, [r3, #16]
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd14:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800fd18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fd1a:	7afb      	ldrb	r3, [r7, #11]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d10f      	bne.n	800fd40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd26:	461a      	mov	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	697a      	ldr	r2, [r7, #20]
 800fd36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd3a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800fd3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	371c      	adds	r7, #28
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	4f54300a 	.word	0x4f54300a

0800fd54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	3301      	adds	r3, #1
 800fd64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fd6c:	d901      	bls.n	800fd72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fd6e:	2303      	movs	r3, #3
 800fd70:	e01b      	b.n	800fdaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	daf2      	bge.n	800fd60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	f043 0201 	orr.w	r2, r3, #1
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fd96:	d901      	bls.n	800fd9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fd98:	2303      	movs	r3, #3
 800fd9a:	e006      	b.n	800fdaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	f003 0301 	and.w	r3, r3, #1
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d0f0      	beq.n	800fd8a <USB_CoreReset+0x36>

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
	...

0800fdb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800fdbc:	4904      	ldr	r1, [pc, #16]	@ (800fdd0 <MX_FATFS_Init+0x18>)
 800fdbe:	4805      	ldr	r0, [pc, #20]	@ (800fdd4 <MX_FATFS_Init+0x1c>)
 800fdc0:	f004 ff4a 	bl	8014c58 <FATFS_LinkDriver>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	4b03      	ldr	r3, [pc, #12]	@ (800fdd8 <MX_FATFS_Init+0x20>)
 800fdca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fdcc:	bf00      	nop
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	24002ef8 	.word	0x24002ef8
 800fdd4:	24000014 	.word	0x24000014
 800fdd8:	24002ef4 	.word	0x24002ef4

0800fddc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fddc:	b480      	push	{r7}
 800fdde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fde0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800fdf6:	79fb      	ldrb	r3, [r7, #7]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f2 f961 	bl	80020c0 <USER_SPI_initialize>
 800fdfe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	4603      	mov	r3, r0
 800fe10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800fe12:	79fb      	ldrb	r3, [r7, #7]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7f2 fa3f 	bl	8002298 <USER_SPI_status>
 800fe1a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60b9      	str	r1, [r7, #8]
 800fe2c:	607a      	str	r2, [r7, #4]
 800fe2e:	603b      	str	r3, [r7, #0]
 800fe30:	4603      	mov	r3, r0
 800fe32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800fe34:	7bf8      	ldrb	r0, [r7, #15]
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	68b9      	ldr	r1, [r7, #8]
 800fe3c:	f7f2 fa42 	bl	80022c4 <USER_SPI_read>
 800fe40:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b084      	sub	sp, #16
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
 800fe54:	603b      	str	r3, [r7, #0]
 800fe56:	4603      	mov	r3, r0
 800fe58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800fe5a:	7bf8      	ldrb	r0, [r7, #15]
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	68b9      	ldr	r1, [r7, #8]
 800fe62:	f7f2 fa95 	bl	8002390 <USER_SPI_write>
 800fe66:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	603a      	str	r2, [r7, #0]
 800fe7a:	71fb      	strb	r3, [r7, #7]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800fe80:	79b9      	ldrb	r1, [r7, #6]
 800fe82:	79fb      	ldrb	r3, [r7, #7]
 800fe84:	683a      	ldr	r2, [r7, #0]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7f2 fafe 	bl	8002488 <USER_SPI_ioctl>
 800fe8c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
	...

0800fe98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fea4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fea8:	f008 f864 	bl	8017f74 <USBD_static_malloc>
 800feac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d109      	bne.n	800fec8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	32b0      	adds	r2, #176	@ 0xb0
 800febe:	2100      	movs	r1, #0
 800fec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fec4:	2302      	movs	r3, #2
 800fec6:	e0d4      	b.n	8010072 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fec8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fecc:	2100      	movs	r1, #0
 800fece:	68f8      	ldr	r0, [r7, #12]
 800fed0:	f008 f8a4 	bl	801801c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	32b0      	adds	r2, #176	@ 0xb0
 800fede:	68f9      	ldr	r1, [r7, #12]
 800fee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	32b0      	adds	r2, #176	@ 0xb0
 800feee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	7c1b      	ldrb	r3, [r3, #16]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d138      	bne.n	800ff72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ff00:	4b5e      	ldr	r3, [pc, #376]	@ (801007c <USBD_CDC_Init+0x1e4>)
 800ff02:	7819      	ldrb	r1, [r3, #0]
 800ff04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff08:	2202      	movs	r2, #2
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f007 ff0f 	bl	8017d2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ff10:	4b5a      	ldr	r3, [pc, #360]	@ (801007c <USBD_CDC_Init+0x1e4>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	f003 020f 	and.w	r2, r3, #15
 800ff18:	6879      	ldr	r1, [r7, #4]
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	4413      	add	r3, r2
 800ff20:	009b      	lsls	r3, r3, #2
 800ff22:	440b      	add	r3, r1
 800ff24:	3324      	adds	r3, #36	@ 0x24
 800ff26:	2201      	movs	r2, #1
 800ff28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ff2a:	4b55      	ldr	r3, [pc, #340]	@ (8010080 <USBD_CDC_Init+0x1e8>)
 800ff2c:	7819      	ldrb	r1, [r3, #0]
 800ff2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff32:	2202      	movs	r2, #2
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f007 fefa 	bl	8017d2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ff3a:	4b51      	ldr	r3, [pc, #324]	@ (8010080 <USBD_CDC_Init+0x1e8>)
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	f003 020f 	and.w	r2, r3, #15
 800ff42:	6879      	ldr	r1, [r7, #4]
 800ff44:	4613      	mov	r3, r2
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	4413      	add	r3, r2
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	440b      	add	r3, r1
 800ff4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ff52:	2201      	movs	r2, #1
 800ff54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ff56:	4b4b      	ldr	r3, [pc, #300]	@ (8010084 <USBD_CDC_Init+0x1ec>)
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	f003 020f 	and.w	r2, r3, #15
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	4613      	mov	r3, r2
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	4413      	add	r3, r2
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	440b      	add	r3, r1
 800ff6a:	3326      	adds	r3, #38	@ 0x26
 800ff6c:	2210      	movs	r2, #16
 800ff6e:	801a      	strh	r2, [r3, #0]
 800ff70:	e035      	b.n	800ffde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ff72:	4b42      	ldr	r3, [pc, #264]	@ (801007c <USBD_CDC_Init+0x1e4>)
 800ff74:	7819      	ldrb	r1, [r3, #0]
 800ff76:	2340      	movs	r3, #64	@ 0x40
 800ff78:	2202      	movs	r2, #2
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f007 fed7 	bl	8017d2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ff80:	4b3e      	ldr	r3, [pc, #248]	@ (801007c <USBD_CDC_Init+0x1e4>)
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	f003 020f 	and.w	r2, r3, #15
 800ff88:	6879      	ldr	r1, [r7, #4]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4413      	add	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	440b      	add	r3, r1
 800ff94:	3324      	adds	r3, #36	@ 0x24
 800ff96:	2201      	movs	r2, #1
 800ff98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ff9a:	4b39      	ldr	r3, [pc, #228]	@ (8010080 <USBD_CDC_Init+0x1e8>)
 800ff9c:	7819      	ldrb	r1, [r3, #0]
 800ff9e:	2340      	movs	r3, #64	@ 0x40
 800ffa0:	2202      	movs	r2, #2
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f007 fec3 	bl	8017d2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ffa8:	4b35      	ldr	r3, [pc, #212]	@ (8010080 <USBD_CDC_Init+0x1e8>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	f003 020f 	and.w	r2, r3, #15
 800ffb0:	6879      	ldr	r1, [r7, #4]
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	440b      	add	r3, r1
 800ffbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ffc4:	4b2f      	ldr	r3, [pc, #188]	@ (8010084 <USBD_CDC_Init+0x1ec>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 020f 	and.w	r2, r3, #15
 800ffcc:	6879      	ldr	r1, [r7, #4]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4413      	add	r3, r2
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	440b      	add	r3, r1
 800ffd8:	3326      	adds	r3, #38	@ 0x26
 800ffda:	2210      	movs	r2, #16
 800ffdc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ffde:	4b29      	ldr	r3, [pc, #164]	@ (8010084 <USBD_CDC_Init+0x1ec>)
 800ffe0:	7819      	ldrb	r1, [r3, #0]
 800ffe2:	2308      	movs	r3, #8
 800ffe4:	2203      	movs	r2, #3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f007 fea1 	bl	8017d2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ffec:	4b25      	ldr	r3, [pc, #148]	@ (8010084 <USBD_CDC_Init+0x1ec>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f003 020f 	and.w	r2, r3, #15
 800fff4:	6879      	ldr	r1, [r7, #4]
 800fff6:	4613      	mov	r3, r2
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	4413      	add	r3, r2
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	440b      	add	r3, r1
 8010000:	3324      	adds	r3, #36	@ 0x24
 8010002:	2201      	movs	r2, #1
 8010004:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	33b0      	adds	r3, #176	@ 0xb0
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	4413      	add	r3, r2
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2200      	movs	r2, #0
 8010026:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010038:	2b00      	cmp	r3, #0
 801003a:	d101      	bne.n	8010040 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801003c:	2302      	movs	r3, #2
 801003e:	e018      	b.n	8010072 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7c1b      	ldrb	r3, [r3, #16]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10a      	bne.n	801005e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010048:	4b0d      	ldr	r3, [pc, #52]	@ (8010080 <USBD_CDC_Init+0x1e8>)
 801004a:	7819      	ldrb	r1, [r3, #0]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f007 ff58 	bl	8017f0c <USBD_LL_PrepareReceive>
 801005c:	e008      	b.n	8010070 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801005e:	4b08      	ldr	r3, [pc, #32]	@ (8010080 <USBD_CDC_Init+0x1e8>)
 8010060:	7819      	ldrb	r1, [r3, #0]
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010068:	2340      	movs	r3, #64	@ 0x40
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f007 ff4e 	bl	8017f0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3710      	adds	r7, #16
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	240000af 	.word	0x240000af
 8010080:	240000b0 	.word	0x240000b0
 8010084:	240000b1 	.word	0x240000b1

08010088 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	460b      	mov	r3, r1
 8010092:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010094:	4b3a      	ldr	r3, [pc, #232]	@ (8010180 <USBD_CDC_DeInit+0xf8>)
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	4619      	mov	r1, r3
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f007 fe6d 	bl	8017d7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80100a0:	4b37      	ldr	r3, [pc, #220]	@ (8010180 <USBD_CDC_DeInit+0xf8>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	f003 020f 	and.w	r2, r3, #15
 80100a8:	6879      	ldr	r1, [r7, #4]
 80100aa:	4613      	mov	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	440b      	add	r3, r1
 80100b4:	3324      	adds	r3, #36	@ 0x24
 80100b6:	2200      	movs	r2, #0
 80100b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80100ba:	4b32      	ldr	r3, [pc, #200]	@ (8010184 <USBD_CDC_DeInit+0xfc>)
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	4619      	mov	r1, r3
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f007 fe5a 	bl	8017d7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80100c6:	4b2f      	ldr	r3, [pc, #188]	@ (8010184 <USBD_CDC_DeInit+0xfc>)
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	f003 020f 	and.w	r2, r3, #15
 80100ce:	6879      	ldr	r1, [r7, #4]
 80100d0:	4613      	mov	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	4413      	add	r3, r2
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	440b      	add	r3, r1
 80100da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80100de:	2200      	movs	r2, #0
 80100e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80100e2:	4b29      	ldr	r3, [pc, #164]	@ (8010188 <USBD_CDC_DeInit+0x100>)
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	4619      	mov	r1, r3
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f007 fe46 	bl	8017d7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80100ee:	4b26      	ldr	r3, [pc, #152]	@ (8010188 <USBD_CDC_DeInit+0x100>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f003 020f 	and.w	r2, r3, #15
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	4613      	mov	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4413      	add	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	440b      	add	r3, r1
 8010102:	3324      	adds	r3, #36	@ 0x24
 8010104:	2200      	movs	r2, #0
 8010106:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010108:	4b1f      	ldr	r3, [pc, #124]	@ (8010188 <USBD_CDC_DeInit+0x100>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	f003 020f 	and.w	r2, r3, #15
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	4613      	mov	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	440b      	add	r3, r1
 801011c:	3326      	adds	r3, #38	@ 0x26
 801011e:	2200      	movs	r2, #0
 8010120:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	32b0      	adds	r2, #176	@ 0xb0
 801012c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d01f      	beq.n	8010174 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	33b0      	adds	r3, #176	@ 0xb0
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4413      	add	r3, r2
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	32b0      	adds	r2, #176	@ 0xb0
 8010152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010156:	4618      	mov	r0, r3
 8010158:	f007 ff1a 	bl	8017f90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	32b0      	adds	r2, #176	@ 0xb0
 8010166:	2100      	movs	r1, #0
 8010168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	240000af 	.word	0x240000af
 8010184:	240000b0 	.word	0x240000b0
 8010188:	240000b1 	.word	0x240000b1

0801018c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b086      	sub	sp, #24
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	32b0      	adds	r2, #176	@ 0xb0
 80101a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80101a6:	2300      	movs	r3, #0
 80101a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80101aa:	2300      	movs	r3, #0
 80101ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80101ae:	2300      	movs	r3, #0
 80101b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80101b8:	2303      	movs	r3, #3
 80101ba:	e0bf      	b.n	801033c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d050      	beq.n	801026a <USBD_CDC_Setup+0xde>
 80101c8:	2b20      	cmp	r3, #32
 80101ca:	f040 80af 	bne.w	801032c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	88db      	ldrh	r3, [r3, #6]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d03a      	beq.n	801024c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	b25b      	sxtb	r3, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	da1b      	bge.n	8010218 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	33b0      	adds	r3, #176	@ 0xb0
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4413      	add	r3, r2
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80101f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80101f8:	683a      	ldr	r2, [r7, #0]
 80101fa:	88d2      	ldrh	r2, [r2, #6]
 80101fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	88db      	ldrh	r3, [r3, #6]
 8010202:	2b07      	cmp	r3, #7
 8010204:	bf28      	it	cs
 8010206:	2307      	movcs	r3, #7
 8010208:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	89fa      	ldrh	r2, [r7, #14]
 801020e:	4619      	mov	r1, r3
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f001 fd7d 	bl	8011d10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010216:	e090      	b.n	801033a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	785a      	ldrb	r2, [r3, #1]
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	88db      	ldrh	r3, [r3, #6]
 8010226:	2b3f      	cmp	r3, #63	@ 0x3f
 8010228:	d803      	bhi.n	8010232 <USBD_CDC_Setup+0xa6>
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	88db      	ldrh	r3, [r3, #6]
 801022e:	b2da      	uxtb	r2, r3
 8010230:	e000      	b.n	8010234 <USBD_CDC_Setup+0xa8>
 8010232:	2240      	movs	r2, #64	@ 0x40
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801023a:	6939      	ldr	r1, [r7, #16]
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010242:	461a      	mov	r2, r3
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f001 fd8f 	bl	8011d68 <USBD_CtlPrepareRx>
      break;
 801024a:	e076      	b.n	801033a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	33b0      	adds	r3, #176	@ 0xb0
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	4413      	add	r3, r2
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	683a      	ldr	r2, [r7, #0]
 8010260:	7850      	ldrb	r0, [r2, #1]
 8010262:	2200      	movs	r2, #0
 8010264:	6839      	ldr	r1, [r7, #0]
 8010266:	4798      	blx	r3
      break;
 8010268:	e067      	b.n	801033a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	785b      	ldrb	r3, [r3, #1]
 801026e:	2b0b      	cmp	r3, #11
 8010270:	d851      	bhi.n	8010316 <USBD_CDC_Setup+0x18a>
 8010272:	a201      	add	r2, pc, #4	@ (adr r2, 8010278 <USBD_CDC_Setup+0xec>)
 8010274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010278:	080102a9 	.word	0x080102a9
 801027c:	08010325 	.word	0x08010325
 8010280:	08010317 	.word	0x08010317
 8010284:	08010317 	.word	0x08010317
 8010288:	08010317 	.word	0x08010317
 801028c:	08010317 	.word	0x08010317
 8010290:	08010317 	.word	0x08010317
 8010294:	08010317 	.word	0x08010317
 8010298:	08010317 	.word	0x08010317
 801029c:	08010317 	.word	0x08010317
 80102a0:	080102d3 	.word	0x080102d3
 80102a4:	080102fd 	.word	0x080102fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	2b03      	cmp	r3, #3
 80102b2:	d107      	bne.n	80102c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80102b4:	f107 030a 	add.w	r3, r7, #10
 80102b8:	2202      	movs	r2, #2
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f001 fd27 	bl	8011d10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80102c2:	e032      	b.n	801032a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80102c4:	6839      	ldr	r1, [r7, #0]
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f001 fca5 	bl	8011c16 <USBD_CtlError>
            ret = USBD_FAIL;
 80102cc:	2303      	movs	r3, #3
 80102ce:	75fb      	strb	r3, [r7, #23]
          break;
 80102d0:	e02b      	b.n	801032a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	2b03      	cmp	r3, #3
 80102dc:	d107      	bne.n	80102ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80102de:	f107 030d 	add.w	r3, r7, #13
 80102e2:	2201      	movs	r2, #1
 80102e4:	4619      	mov	r1, r3
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f001 fd12 	bl	8011d10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80102ec:	e01d      	b.n	801032a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80102ee:	6839      	ldr	r1, [r7, #0]
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f001 fc90 	bl	8011c16 <USBD_CtlError>
            ret = USBD_FAIL;
 80102f6:	2303      	movs	r3, #3
 80102f8:	75fb      	strb	r3, [r7, #23]
          break;
 80102fa:	e016      	b.n	801032a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010302:	b2db      	uxtb	r3, r3
 8010304:	2b03      	cmp	r3, #3
 8010306:	d00f      	beq.n	8010328 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010308:	6839      	ldr	r1, [r7, #0]
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f001 fc83 	bl	8011c16 <USBD_CtlError>
            ret = USBD_FAIL;
 8010310:	2303      	movs	r3, #3
 8010312:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010314:	e008      	b.n	8010328 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010316:	6839      	ldr	r1, [r7, #0]
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f001 fc7c 	bl	8011c16 <USBD_CtlError>
          ret = USBD_FAIL;
 801031e:	2303      	movs	r3, #3
 8010320:	75fb      	strb	r3, [r7, #23]
          break;
 8010322:	e002      	b.n	801032a <USBD_CDC_Setup+0x19e>
          break;
 8010324:	bf00      	nop
 8010326:	e008      	b.n	801033a <USBD_CDC_Setup+0x1ae>
          break;
 8010328:	bf00      	nop
      }
      break;
 801032a:	e006      	b.n	801033a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f001 fc71 	bl	8011c16 <USBD_CtlError>
      ret = USBD_FAIL;
 8010334:	2303      	movs	r3, #3
 8010336:	75fb      	strb	r3, [r7, #23]
      break;
 8010338:	bf00      	nop
  }

  return (uint8_t)ret;
 801033a:	7dfb      	ldrb	r3, [r7, #23]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3718      	adds	r7, #24
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	460b      	mov	r3, r1
 801034e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010356:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	32b0      	adds	r2, #176	@ 0xb0
 8010362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d101      	bne.n	801036e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801036a:	2303      	movs	r3, #3
 801036c:	e065      	b.n	801043a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	32b0      	adds	r2, #176	@ 0xb0
 8010378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801037c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801037e:	78fb      	ldrb	r3, [r7, #3]
 8010380:	f003 020f 	and.w	r2, r3, #15
 8010384:	6879      	ldr	r1, [r7, #4]
 8010386:	4613      	mov	r3, r2
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	4413      	add	r3, r2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	440b      	add	r3, r1
 8010390:	3318      	adds	r3, #24
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d02f      	beq.n	80103f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010398:	78fb      	ldrb	r3, [r7, #3]
 801039a:	f003 020f 	and.w	r2, r3, #15
 801039e:	6879      	ldr	r1, [r7, #4]
 80103a0:	4613      	mov	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4413      	add	r3, r2
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	440b      	add	r3, r1
 80103aa:	3318      	adds	r3, #24
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	78fb      	ldrb	r3, [r7, #3]
 80103b0:	f003 010f 	and.w	r1, r3, #15
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	460b      	mov	r3, r1
 80103b8:	00db      	lsls	r3, r3, #3
 80103ba:	440b      	add	r3, r1
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4403      	add	r3, r0
 80103c0:	331c      	adds	r3, #28
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80103c8:	fb01 f303 	mul.w	r3, r1, r3
 80103cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d112      	bne.n	80103f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	f003 020f 	and.w	r2, r3, #15
 80103d8:	6879      	ldr	r1, [r7, #4]
 80103da:	4613      	mov	r3, r2
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	4413      	add	r3, r2
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	440b      	add	r3, r1
 80103e4:	3318      	adds	r3, #24
 80103e6:	2200      	movs	r2, #0
 80103e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80103ea:	78f9      	ldrb	r1, [r7, #3]
 80103ec:	2300      	movs	r3, #0
 80103ee:	2200      	movs	r2, #0
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f007 fd6a 	bl	8017eca <USBD_LL_Transmit>
 80103f6:	e01f      	b.n	8010438 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	33b0      	adds	r3, #176	@ 0xb0
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	4413      	add	r3, r2
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d010      	beq.n	8010438 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	33b0      	adds	r3, #176	@ 0xb0
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	4413      	add	r3, r2
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	691b      	ldr	r3, [r3, #16]
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801042e:	68ba      	ldr	r2, [r7, #8]
 8010430:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010434:	78fa      	ldrb	r2, [r7, #3]
 8010436:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3710      	adds	r7, #16
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b084      	sub	sp, #16
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
 801044a:	460b      	mov	r3, r1
 801044c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	32b0      	adds	r2, #176	@ 0xb0
 8010458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801045c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	32b0      	adds	r2, #176	@ 0xb0
 8010468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d101      	bne.n	8010474 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010470:	2303      	movs	r3, #3
 8010472:	e01a      	b.n	80104aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010474:	78fb      	ldrb	r3, [r7, #3]
 8010476:	4619      	mov	r1, r3
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f007 fd68 	bl	8017f4e <USBD_LL_GetRxDataSize>
 801047e:	4602      	mov	r2, r0
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	33b0      	adds	r3, #176	@ 0xb0
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	4413      	add	r3, r2
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80104a4:	4611      	mov	r1, r2
 80104a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3710      	adds	r7, #16
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b084      	sub	sp, #16
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	32b0      	adds	r2, #176	@ 0xb0
 80104c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d101      	bne.n	80104d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80104d0:	2303      	movs	r3, #3
 80104d2:	e024      	b.n	801051e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	33b0      	adds	r3, #176	@ 0xb0
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	4413      	add	r3, r2
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d019      	beq.n	801051c <USBD_CDC_EP0_RxReady+0x6a>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80104ee:	2bff      	cmp	r3, #255	@ 0xff
 80104f0:	d014      	beq.n	801051c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	33b0      	adds	r3, #176	@ 0xb0
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	4413      	add	r3, r2
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801050a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801050c:	68fa      	ldr	r2, [r7, #12]
 801050e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010512:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	22ff      	movs	r2, #255	@ 0xff
 8010518:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b086      	sub	sp, #24
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010530:	2182      	movs	r1, #130	@ 0x82
 8010532:	4818      	ldr	r0, [pc, #96]	@ (8010594 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010534:	f000 fd0f 	bl	8010f56 <USBD_GetEpDesc>
 8010538:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801053a:	2101      	movs	r1, #1
 801053c:	4815      	ldr	r0, [pc, #84]	@ (8010594 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801053e:	f000 fd0a 	bl	8010f56 <USBD_GetEpDesc>
 8010542:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010544:	2181      	movs	r1, #129	@ 0x81
 8010546:	4813      	ldr	r0, [pc, #76]	@ (8010594 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010548:	f000 fd05 	bl	8010f56 <USBD_GetEpDesc>
 801054c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d002      	beq.n	801055a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	2210      	movs	r2, #16
 8010558:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d006      	beq.n	801056e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	2200      	movs	r2, #0
 8010564:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010568:	711a      	strb	r2, [r3, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d006      	beq.n	8010582 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2200      	movs	r2, #0
 8010578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801057c:	711a      	strb	r2, [r3, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2243      	movs	r2, #67	@ 0x43
 8010586:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010588:	4b02      	ldr	r3, [pc, #8]	@ (8010594 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801058a:	4618      	mov	r0, r3
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	2400006c 	.word	0x2400006c

08010598 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b086      	sub	sp, #24
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80105a0:	2182      	movs	r1, #130	@ 0x82
 80105a2:	4818      	ldr	r0, [pc, #96]	@ (8010604 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80105a4:	f000 fcd7 	bl	8010f56 <USBD_GetEpDesc>
 80105a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80105aa:	2101      	movs	r1, #1
 80105ac:	4815      	ldr	r0, [pc, #84]	@ (8010604 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80105ae:	f000 fcd2 	bl	8010f56 <USBD_GetEpDesc>
 80105b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80105b4:	2181      	movs	r1, #129	@ 0x81
 80105b6:	4813      	ldr	r0, [pc, #76]	@ (8010604 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80105b8:	f000 fccd 	bl	8010f56 <USBD_GetEpDesc>
 80105bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d002      	beq.n	80105ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	2210      	movs	r2, #16
 80105c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d006      	beq.n	80105de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	2200      	movs	r2, #0
 80105d4:	711a      	strb	r2, [r3, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	f042 0202 	orr.w	r2, r2, #2
 80105dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d006      	beq.n	80105f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2200      	movs	r2, #0
 80105e8:	711a      	strb	r2, [r3, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f042 0202 	orr.w	r2, r2, #2
 80105f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2243      	movs	r2, #67	@ 0x43
 80105f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80105f8:	4b02      	ldr	r3, [pc, #8]	@ (8010604 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3718      	adds	r7, #24
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	2400006c 	.word	0x2400006c

08010608 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b086      	sub	sp, #24
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010610:	2182      	movs	r1, #130	@ 0x82
 8010612:	4818      	ldr	r0, [pc, #96]	@ (8010674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010614:	f000 fc9f 	bl	8010f56 <USBD_GetEpDesc>
 8010618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801061a:	2101      	movs	r1, #1
 801061c:	4815      	ldr	r0, [pc, #84]	@ (8010674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801061e:	f000 fc9a 	bl	8010f56 <USBD_GetEpDesc>
 8010622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010624:	2181      	movs	r1, #129	@ 0x81
 8010626:	4813      	ldr	r0, [pc, #76]	@ (8010674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010628:	f000 fc95 	bl	8010f56 <USBD_GetEpDesc>
 801062c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2210      	movs	r2, #16
 8010638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d006      	beq.n	801064e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	2200      	movs	r2, #0
 8010644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010648:	711a      	strb	r2, [r3, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d006      	beq.n	8010662 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2200      	movs	r2, #0
 8010658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801065c:	711a      	strb	r2, [r3, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2243      	movs	r2, #67	@ 0x43
 8010666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010668:	4b02      	ldr	r3, [pc, #8]	@ (8010674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801066a:	4618      	mov	r0, r3
 801066c:	3718      	adds	r7, #24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	2400006c 	.word	0x2400006c

08010678 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010678:	b480      	push	{r7}
 801067a:	b083      	sub	sp, #12
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	220a      	movs	r2, #10
 8010684:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010686:	4b03      	ldr	r3, [pc, #12]	@ (8010694 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010688:	4618      	mov	r0, r3
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr
 8010694:	24000028 	.word	0x24000028

08010698 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d101      	bne.n	80106ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80106a8:	2303      	movs	r3, #3
 80106aa:	e009      	b.n	80106c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	33b0      	adds	r3, #176	@ 0xb0
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4413      	add	r3, r2
 80106ba:	683a      	ldr	r2, [r7, #0]
 80106bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80106be:	2300      	movs	r3, #0
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b087      	sub	sp, #28
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	32b0      	adds	r2, #176	@ 0xb0
 80106e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d101      	bne.n	80106f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80106ee:	2303      	movs	r3, #3
 80106f0:	e008      	b.n	8010704 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010702:	2300      	movs	r3, #0
}
 8010704:	4618      	mov	r0, r3
 8010706:	371c      	adds	r7, #28
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010710:	b480      	push	{r7}
 8010712:	b085      	sub	sp, #20
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	32b0      	adds	r2, #176	@ 0xb0
 8010724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010728:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d101      	bne.n	8010734 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010730:	2303      	movs	r3, #3
 8010732:	e004      	b.n	801073e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	683a      	ldr	r2, [r7, #0]
 8010738:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
	...

0801074c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	32b0      	adds	r2, #176	@ 0xb0
 801075e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010762:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	32b0      	adds	r2, #176	@ 0xb0
 801076e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d101      	bne.n	801077a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010776:	2303      	movs	r3, #3
 8010778:	e018      	b.n	80107ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	7c1b      	ldrb	r3, [r3, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d10a      	bne.n	8010798 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010782:	4b0c      	ldr	r3, [pc, #48]	@ (80107b4 <USBD_CDC_ReceivePacket+0x68>)
 8010784:	7819      	ldrb	r1, [r3, #0]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801078c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f007 fbbb 	bl	8017f0c <USBD_LL_PrepareReceive>
 8010796:	e008      	b.n	80107aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010798:	4b06      	ldr	r3, [pc, #24]	@ (80107b4 <USBD_CDC_ReceivePacket+0x68>)
 801079a:	7819      	ldrb	r1, [r3, #0]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80107a2:	2340      	movs	r3, #64	@ 0x40
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f007 fbb1 	bl	8017f0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	240000b0 	.word	0x240000b0

080107b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b086      	sub	sp, #24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	4613      	mov	r3, r2
 80107c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d101      	bne.n	80107d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80107cc:	2303      	movs	r3, #3
 80107ce:	e01f      	b.n	8010810 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2200      	movs	r2, #0
 80107d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2200      	movs	r2, #0
 80107dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d003      	beq.n	80107f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	68ba      	ldr	r2, [r7, #8]
 80107f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2201      	movs	r2, #1
 80107fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	79fa      	ldrb	r2, [r7, #7]
 8010802:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f007 fa27 	bl	8017c58 <USBD_LL_Init>
 801080a:	4603      	mov	r3, r0
 801080c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801080e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3718      	adds	r7, #24
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010822:	2300      	movs	r3, #0
 8010824:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d101      	bne.n	8010830 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801082c:	2303      	movs	r3, #3
 801082e:	e025      	b.n	801087c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	32ae      	adds	r2, #174	@ 0xae
 8010842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010848:	2b00      	cmp	r3, #0
 801084a:	d00f      	beq.n	801086c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	32ae      	adds	r2, #174	@ 0xae
 8010856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801085a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801085c:	f107 020e 	add.w	r2, r7, #14
 8010860:	4610      	mov	r0, r2
 8010862:	4798      	blx	r3
 8010864:	4602      	mov	r2, r0
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010872:	1c5a      	adds	r2, r3, #1
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f007 fa33 	bl	8017cf8 <USBD_LL_Start>
 8010892:	4603      	mov	r3, r0
}
 8010894:	4618      	mov	r0, r3
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80108a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr

080108b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b084      	sub	sp, #16
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	460b      	mov	r3, r1
 80108bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d009      	beq.n	80108e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	78fa      	ldrb	r2, [r7, #3]
 80108d6:	4611      	mov	r1, r2
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	4798      	blx	r3
 80108dc:	4603      	mov	r3, r0
 80108de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3710      	adds	r7, #16
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b084      	sub	sp, #16
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	460b      	mov	r3, r1
 80108f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	78fa      	ldrb	r2, [r7, #3]
 8010904:	4611      	mov	r1, r2
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	4798      	blx	r3
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d001      	beq.n	8010914 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010910:	2303      	movs	r3, #3
 8010912:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010914:	7bfb      	ldrb	r3, [r7, #15]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}

0801091e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801091e:	b580      	push	{r7, lr}
 8010920:	b084      	sub	sp, #16
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
 8010926:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801092e:	6839      	ldr	r1, [r7, #0]
 8010930:	4618      	mov	r0, r3
 8010932:	f001 f936 	bl	8011ba2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2201      	movs	r2, #1
 801093a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010944:	461a      	mov	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010952:	f003 031f 	and.w	r3, r3, #31
 8010956:	2b02      	cmp	r3, #2
 8010958:	d01a      	beq.n	8010990 <USBD_LL_SetupStage+0x72>
 801095a:	2b02      	cmp	r3, #2
 801095c:	d822      	bhi.n	80109a4 <USBD_LL_SetupStage+0x86>
 801095e:	2b00      	cmp	r3, #0
 8010960:	d002      	beq.n	8010968 <USBD_LL_SetupStage+0x4a>
 8010962:	2b01      	cmp	r3, #1
 8010964:	d00a      	beq.n	801097c <USBD_LL_SetupStage+0x5e>
 8010966:	e01d      	b.n	80109a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801096e:	4619      	mov	r1, r3
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 fb63 	bl	801103c <USBD_StdDevReq>
 8010976:	4603      	mov	r3, r0
 8010978:	73fb      	strb	r3, [r7, #15]
      break;
 801097a:	e020      	b.n	80109be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010982:	4619      	mov	r1, r3
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 fbcb 	bl	8011120 <USBD_StdItfReq>
 801098a:	4603      	mov	r3, r0
 801098c:	73fb      	strb	r3, [r7, #15]
      break;
 801098e:	e016      	b.n	80109be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010996:	4619      	mov	r1, r3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 fc2d 	bl	80111f8 <USBD_StdEPReq>
 801099e:	4603      	mov	r3, r0
 80109a0:	73fb      	strb	r3, [r7, #15]
      break;
 80109a2:	e00c      	b.n	80109be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80109aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	4619      	mov	r1, r3
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f007 fa00 	bl	8017db8 <USBD_LL_StallEP>
 80109b8:	4603      	mov	r3, r0
 80109ba:	73fb      	strb	r3, [r7, #15]
      break;
 80109bc:	bf00      	nop
  }

  return ret;
 80109be:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	460b      	mov	r3, r1
 80109d2:	607a      	str	r2, [r7, #4]
 80109d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80109d6:	2300      	movs	r3, #0
 80109d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80109da:	7afb      	ldrb	r3, [r7, #11]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d16e      	bne.n	8010abe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80109e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	f040 8098 	bne.w	8010b24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	689a      	ldr	r2, [r3, #8]
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d913      	bls.n	8010a28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	689a      	ldr	r2, [r3, #8]
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	1ad2      	subs	r2, r2, r3
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	68da      	ldr	r2, [r3, #12]
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	4293      	cmp	r3, r2
 8010a18:	bf28      	it	cs
 8010a1a:	4613      	movcs	r3, r2
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	6879      	ldr	r1, [r7, #4]
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f001 f9be 	bl	8011da2 <USBD_CtlContinueRx>
 8010a26:	e07d      	b.n	8010b24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010a2e:	f003 031f 	and.w	r3, r3, #31
 8010a32:	2b02      	cmp	r3, #2
 8010a34:	d014      	beq.n	8010a60 <USBD_LL_DataOutStage+0x98>
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d81d      	bhi.n	8010a76 <USBD_LL_DataOutStage+0xae>
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d002      	beq.n	8010a44 <USBD_LL_DataOutStage+0x7c>
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d003      	beq.n	8010a4a <USBD_LL_DataOutStage+0x82>
 8010a42:	e018      	b.n	8010a76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010a44:	2300      	movs	r3, #0
 8010a46:	75bb      	strb	r3, [r7, #22]
            break;
 8010a48:	e018      	b.n	8010a7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	4619      	mov	r1, r3
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f000 fa64 	bl	8010f22 <USBD_CoreFindIF>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	75bb      	strb	r3, [r7, #22]
            break;
 8010a5e:	e00d      	b.n	8010a7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	4619      	mov	r1, r3
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f000 fa66 	bl	8010f3c <USBD_CoreFindEP>
 8010a70:	4603      	mov	r3, r0
 8010a72:	75bb      	strb	r3, [r7, #22]
            break;
 8010a74:	e002      	b.n	8010a7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010a76:	2300      	movs	r3, #0
 8010a78:	75bb      	strb	r3, [r7, #22]
            break;
 8010a7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010a7c:	7dbb      	ldrb	r3, [r7, #22]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d119      	bne.n	8010ab6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a88:	b2db      	uxtb	r3, r3
 8010a8a:	2b03      	cmp	r3, #3
 8010a8c:	d113      	bne.n	8010ab6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010a8e:	7dba      	ldrb	r2, [r7, #22]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	32ae      	adds	r2, #174	@ 0xae
 8010a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d00b      	beq.n	8010ab6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010a9e:	7dba      	ldrb	r2, [r7, #22]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010aa6:	7dba      	ldrb	r2, [r7, #22]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	32ae      	adds	r2, #174	@ 0xae
 8010aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f001 f984 	bl	8011dc4 <USBD_CtlSendStatus>
 8010abc:	e032      	b.n	8010b24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010abe:	7afb      	ldrb	r3, [r7, #11]
 8010ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f000 fa37 	bl	8010f3c <USBD_CoreFindEP>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ad2:	7dbb      	ldrb	r3, [r7, #22]
 8010ad4:	2bff      	cmp	r3, #255	@ 0xff
 8010ad6:	d025      	beq.n	8010b24 <USBD_LL_DataOutStage+0x15c>
 8010ad8:	7dbb      	ldrb	r3, [r7, #22]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d122      	bne.n	8010b24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	2b03      	cmp	r3, #3
 8010ae8:	d117      	bne.n	8010b1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010aea:	7dba      	ldrb	r2, [r7, #22]
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	32ae      	adds	r2, #174	@ 0xae
 8010af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af4:	699b      	ldr	r3, [r3, #24]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00f      	beq.n	8010b1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010afa:	7dba      	ldrb	r2, [r7, #22]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010b02:	7dba      	ldrb	r2, [r7, #22]
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	32ae      	adds	r2, #174	@ 0xae
 8010b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b0c:	699b      	ldr	r3, [r3, #24]
 8010b0e:	7afa      	ldrb	r2, [r7, #11]
 8010b10:	4611      	mov	r1, r2
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	4798      	blx	r3
 8010b16:	4603      	mov	r3, r0
 8010b18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010b1a:	7dfb      	ldrb	r3, [r7, #23]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d001      	beq.n	8010b24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010b20:	7dfb      	ldrb	r3, [r7, #23]
 8010b22:	e000      	b.n	8010b26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b086      	sub	sp, #24
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	60f8      	str	r0, [r7, #12]
 8010b36:	460b      	mov	r3, r1
 8010b38:	607a      	str	r2, [r7, #4]
 8010b3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010b3c:	7afb      	ldrb	r3, [r7, #11]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d16f      	bne.n	8010c22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	3314      	adds	r3, #20
 8010b46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010b4e:	2b02      	cmp	r3, #2
 8010b50:	d15a      	bne.n	8010c08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	689a      	ldr	r2, [r3, #8]
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	68db      	ldr	r3, [r3, #12]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d914      	bls.n	8010b88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	689a      	ldr	r2, [r3, #8]
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	1ad2      	subs	r2, r2, r3
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	689b      	ldr	r3, [r3, #8]
 8010b70:	461a      	mov	r2, r3
 8010b72:	6879      	ldr	r1, [r7, #4]
 8010b74:	68f8      	ldr	r0, [r7, #12]
 8010b76:	f001 f8e6 	bl	8011d46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	2100      	movs	r1, #0
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f007 f9c3 	bl	8017f0c <USBD_LL_PrepareReceive>
 8010b86:	e03f      	b.n	8010c08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	68da      	ldr	r2, [r3, #12]
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	689b      	ldr	r3, [r3, #8]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d11c      	bne.n	8010bce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	685a      	ldr	r2, [r3, #4]
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d316      	bcc.n	8010bce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	685a      	ldr	r2, [r3, #4]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d20f      	bcs.n	8010bce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010bae:	2200      	movs	r2, #0
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	68f8      	ldr	r0, [r7, #12]
 8010bb4:	f001 f8c7 	bl	8011d46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	68f8      	ldr	r0, [r7, #12]
 8010bc8:	f007 f9a0 	bl	8017f0c <USBD_LL_PrepareReceive>
 8010bcc:	e01c      	b.n	8010c08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	d10f      	bne.n	8010bfa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d009      	beq.n	8010bfa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bf4:	68db      	ldr	r3, [r3, #12]
 8010bf6:	68f8      	ldr	r0, [r7, #12]
 8010bf8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bfa:	2180      	movs	r1, #128	@ 0x80
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f007 f8db 	bl	8017db8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f001 f8f1 	bl	8011dea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d03a      	beq.n	8010c88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7ff fe42 	bl	801089c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010c20:	e032      	b.n	8010c88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010c22:	7afb      	ldrb	r3, [r7, #11]
 8010c24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	68f8      	ldr	r0, [r7, #12]
 8010c2e:	f000 f985 	bl	8010f3c <USBD_CoreFindEP>
 8010c32:	4603      	mov	r3, r0
 8010c34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c36:	7dfb      	ldrb	r3, [r7, #23]
 8010c38:	2bff      	cmp	r3, #255	@ 0xff
 8010c3a:	d025      	beq.n	8010c88 <USBD_LL_DataInStage+0x15a>
 8010c3c:	7dfb      	ldrb	r3, [r7, #23]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d122      	bne.n	8010c88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	2b03      	cmp	r3, #3
 8010c4c:	d11c      	bne.n	8010c88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010c4e:	7dfa      	ldrb	r2, [r7, #23]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	32ae      	adds	r2, #174	@ 0xae
 8010c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c58:	695b      	ldr	r3, [r3, #20]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d014      	beq.n	8010c88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010c5e:	7dfa      	ldrb	r2, [r7, #23]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010c66:	7dfa      	ldrb	r2, [r7, #23]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	32ae      	adds	r2, #174	@ 0xae
 8010c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c70:	695b      	ldr	r3, [r3, #20]
 8010c72:	7afa      	ldrb	r2, [r7, #11]
 8010c74:	4611      	mov	r1, r2
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	4798      	blx	r3
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010c7e:	7dbb      	ldrb	r3, [r7, #22]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d001      	beq.n	8010c88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010c84:	7dbb      	ldrb	r3, [r7, #22]
 8010c86:	e000      	b.n	8010c8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3718      	adds	r7, #24
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b084      	sub	sp, #16
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d014      	beq.n	8010cf8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d00e      	beq.n	8010cf8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	6852      	ldr	r2, [r2, #4]
 8010ce6:	b2d2      	uxtb	r2, r2
 8010ce8:	4611      	mov	r1, r2
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	4798      	blx	r3
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d001      	beq.n	8010cf8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010cf4:	2303      	movs	r3, #3
 8010cf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cf8:	2340      	movs	r3, #64	@ 0x40
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f007 f815 	bl	8017d2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2201      	movs	r2, #1
 8010d08:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2240      	movs	r2, #64	@ 0x40
 8010d10:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010d14:	2340      	movs	r3, #64	@ 0x40
 8010d16:	2200      	movs	r2, #0
 8010d18:	2180      	movs	r1, #128	@ 0x80
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f007 f807 	bl	8017d2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2201      	movs	r2, #1
 8010d24:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2240      	movs	r2, #64	@ 0x40
 8010d2a:	621a      	str	r2, [r3, #32]

  return ret;
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010d36:	b480      	push	{r7}
 8010d38:	b083      	sub	sp, #12
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	460b      	mov	r3, r1
 8010d40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	78fa      	ldrb	r2, [r7, #3]
 8010d46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010d48:	2300      	movs	r3, #0
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010d56:	b480      	push	{r7}
 8010d58:	b083      	sub	sp, #12
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	2b04      	cmp	r3, #4
 8010d68:	d006      	beq.n	8010d78 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2204      	movs	r2, #4
 8010d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	370c      	adds	r7, #12
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr

08010d8e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010d8e:	b480      	push	{r7}
 8010d90:	b083      	sub	sp, #12
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d9c:	b2db      	uxtb	r3, r3
 8010d9e:	2b04      	cmp	r3, #4
 8010da0:	d106      	bne.n	8010db0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010da8:	b2da      	uxtb	r2, r3
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b03      	cmp	r3, #3
 8010dd0:	d110      	bne.n	8010df4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00b      	beq.n	8010df4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010de2:	69db      	ldr	r3, [r3, #28]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d005      	beq.n	8010df4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010dee:	69db      	ldr	r3, [r3, #28]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010df4:	2300      	movs	r3, #0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b082      	sub	sp, #8
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	460b      	mov	r3, r1
 8010e08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	32ae      	adds	r2, #174	@ 0xae
 8010e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d101      	bne.n	8010e20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010e1c:	2303      	movs	r3, #3
 8010e1e:	e01c      	b.n	8010e5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	2b03      	cmp	r3, #3
 8010e2a:	d115      	bne.n	8010e58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	32ae      	adds	r2, #174	@ 0xae
 8010e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e3a:	6a1b      	ldr	r3, [r3, #32]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d00b      	beq.n	8010e58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	32ae      	adds	r2, #174	@ 0xae
 8010e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e4e:	6a1b      	ldr	r3, [r3, #32]
 8010e50:	78fa      	ldrb	r2, [r7, #3]
 8010e52:	4611      	mov	r1, r2
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e58:	2300      	movs	r3, #0
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3708      	adds	r7, #8
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}

08010e62 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010e62:	b580      	push	{r7, lr}
 8010e64:	b082      	sub	sp, #8
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	32ae      	adds	r2, #174	@ 0xae
 8010e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d101      	bne.n	8010e84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010e80:	2303      	movs	r3, #3
 8010e82:	e01c      	b.n	8010ebe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b03      	cmp	r3, #3
 8010e8e:	d115      	bne.n	8010ebc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	32ae      	adds	r2, #174	@ 0xae
 8010e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d00b      	beq.n	8010ebc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	32ae      	adds	r2, #174	@ 0xae
 8010eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010eb4:	78fa      	ldrb	r2, [r7, #3]
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3708      	adds	r7, #8
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	b083      	sub	sp, #12
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010ece:	2300      	movs	r3, #0
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr

08010edc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2201      	movs	r2, #1
 8010eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d00e      	beq.n	8010f18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	6852      	ldr	r2, [r2, #4]
 8010f06:	b2d2      	uxtb	r2, r2
 8010f08:	4611      	mov	r1, r2
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	4798      	blx	r3
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d001      	beq.n	8010f18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010f14:	2303      	movs	r3, #3
 8010f16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3710      	adds	r7, #16
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010f22:	b480      	push	{r7}
 8010f24:	b083      	sub	sp, #12
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010f2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	370c      	adds	r7, #12
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr

08010f3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	460b      	mov	r3, r1
 8010f46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010f48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b086      	sub	sp, #24
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	460b      	mov	r3, r1
 8010f60:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	885b      	ldrh	r3, [r3, #2]
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	7812      	ldrb	r2, [r2, #0]
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d91f      	bls.n	8010fbc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010f82:	e013      	b.n	8010fac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010f84:	f107 030a 	add.w	r3, r7, #10
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6978      	ldr	r0, [r7, #20]
 8010f8c:	f000 f81b 	bl	8010fc6 <USBD_GetNextDesc>
 8010f90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	785b      	ldrb	r3, [r3, #1]
 8010f96:	2b05      	cmp	r3, #5
 8010f98:	d108      	bne.n	8010fac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	789b      	ldrb	r3, [r3, #2]
 8010fa2:	78fa      	ldrb	r2, [r7, #3]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d008      	beq.n	8010fba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	885b      	ldrh	r3, [r3, #2]
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	897b      	ldrh	r3, [r7, #10]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d8e5      	bhi.n	8010f84 <USBD_GetEpDesc+0x2e>
 8010fb8:	e000      	b.n	8010fbc <USBD_GetEpDesc+0x66>
          break;
 8010fba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010fbc:	693b      	ldr	r3, [r7, #16]
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3718      	adds	r7, #24
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010fc6:	b480      	push	{r7}
 8010fc8:	b085      	sub	sp, #20
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	68fa      	ldr	r2, [r7, #12]
 8010fda:	7812      	ldrb	r2, [r2, #0]
 8010fdc:	4413      	add	r3, r2
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	461a      	mov	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4413      	add	r3, r2
 8010fee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3714      	adds	r7, #20
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010ffe:	b480      	push	{r7}
 8011000:	b087      	sub	sp, #28
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	3301      	adds	r3, #1
 8011014:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801101c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011020:	021b      	lsls	r3, r3, #8
 8011022:	b21a      	sxth	r2, r3
 8011024:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011028:	4313      	orrs	r3, r2
 801102a:	b21b      	sxth	r3, r3
 801102c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801102e:	89fb      	ldrh	r3, [r7, #14]
}
 8011030:	4618      	mov	r0, r3
 8011032:	371c      	adds	r7, #28
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b084      	sub	sp, #16
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011046:	2300      	movs	r3, #0
 8011048:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011052:	2b40      	cmp	r3, #64	@ 0x40
 8011054:	d005      	beq.n	8011062 <USBD_StdDevReq+0x26>
 8011056:	2b40      	cmp	r3, #64	@ 0x40
 8011058:	d857      	bhi.n	801110a <USBD_StdDevReq+0xce>
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00f      	beq.n	801107e <USBD_StdDevReq+0x42>
 801105e:	2b20      	cmp	r3, #32
 8011060:	d153      	bne.n	801110a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	32ae      	adds	r2, #174	@ 0xae
 801106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	6839      	ldr	r1, [r7, #0]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	4798      	blx	r3
 8011078:	4603      	mov	r3, r0
 801107a:	73fb      	strb	r3, [r7, #15]
      break;
 801107c:	e04a      	b.n	8011114 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	785b      	ldrb	r3, [r3, #1]
 8011082:	2b09      	cmp	r3, #9
 8011084:	d83b      	bhi.n	80110fe <USBD_StdDevReq+0xc2>
 8011086:	a201      	add	r2, pc, #4	@ (adr r2, 801108c <USBD_StdDevReq+0x50>)
 8011088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801108c:	080110e1 	.word	0x080110e1
 8011090:	080110f5 	.word	0x080110f5
 8011094:	080110ff 	.word	0x080110ff
 8011098:	080110eb 	.word	0x080110eb
 801109c:	080110ff 	.word	0x080110ff
 80110a0:	080110bf 	.word	0x080110bf
 80110a4:	080110b5 	.word	0x080110b5
 80110a8:	080110ff 	.word	0x080110ff
 80110ac:	080110d7 	.word	0x080110d7
 80110b0:	080110c9 	.word	0x080110c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80110b4:	6839      	ldr	r1, [r7, #0]
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 fa3c 	bl	8011534 <USBD_GetDescriptor>
          break;
 80110bc:	e024      	b.n	8011108 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80110be:	6839      	ldr	r1, [r7, #0]
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f000 fbcb 	bl	801185c <USBD_SetAddress>
          break;
 80110c6:	e01f      	b.n	8011108 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80110c8:	6839      	ldr	r1, [r7, #0]
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 fc0a 	bl	80118e4 <USBD_SetConfig>
 80110d0:	4603      	mov	r3, r0
 80110d2:	73fb      	strb	r3, [r7, #15]
          break;
 80110d4:	e018      	b.n	8011108 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80110d6:	6839      	ldr	r1, [r7, #0]
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fcad 	bl	8011a38 <USBD_GetConfig>
          break;
 80110de:	e013      	b.n	8011108 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 fcde 	bl	8011aa4 <USBD_GetStatus>
          break;
 80110e8:	e00e      	b.n	8011108 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80110ea:	6839      	ldr	r1, [r7, #0]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fd0d 	bl	8011b0c <USBD_SetFeature>
          break;
 80110f2:	e009      	b.n	8011108 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 fd31 	bl	8011b5e <USBD_ClrFeature>
          break;
 80110fc:	e004      	b.n	8011108 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80110fe:	6839      	ldr	r1, [r7, #0]
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fd88 	bl	8011c16 <USBD_CtlError>
          break;
 8011106:	bf00      	nop
      }
      break;
 8011108:	e004      	b.n	8011114 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801110a:	6839      	ldr	r1, [r7, #0]
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f000 fd82 	bl	8011c16 <USBD_CtlError>
      break;
 8011112:	bf00      	nop
  }

  return ret;
 8011114:	7bfb      	ldrb	r3, [r7, #15]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop

08011120 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801112a:	2300      	movs	r3, #0
 801112c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011136:	2b40      	cmp	r3, #64	@ 0x40
 8011138:	d005      	beq.n	8011146 <USBD_StdItfReq+0x26>
 801113a:	2b40      	cmp	r3, #64	@ 0x40
 801113c:	d852      	bhi.n	80111e4 <USBD_StdItfReq+0xc4>
 801113e:	2b00      	cmp	r3, #0
 8011140:	d001      	beq.n	8011146 <USBD_StdItfReq+0x26>
 8011142:	2b20      	cmp	r3, #32
 8011144:	d14e      	bne.n	80111e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801114c:	b2db      	uxtb	r3, r3
 801114e:	3b01      	subs	r3, #1
 8011150:	2b02      	cmp	r3, #2
 8011152:	d840      	bhi.n	80111d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	889b      	ldrh	r3, [r3, #4]
 8011158:	b2db      	uxtb	r3, r3
 801115a:	2b01      	cmp	r3, #1
 801115c:	d836      	bhi.n	80111cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	889b      	ldrh	r3, [r3, #4]
 8011162:	b2db      	uxtb	r3, r3
 8011164:	4619      	mov	r1, r3
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f7ff fedb 	bl	8010f22 <USBD_CoreFindIF>
 801116c:	4603      	mov	r3, r0
 801116e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011170:	7bbb      	ldrb	r3, [r7, #14]
 8011172:	2bff      	cmp	r3, #255	@ 0xff
 8011174:	d01d      	beq.n	80111b2 <USBD_StdItfReq+0x92>
 8011176:	7bbb      	ldrb	r3, [r7, #14]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d11a      	bne.n	80111b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801117c:	7bba      	ldrb	r2, [r7, #14]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	32ae      	adds	r2, #174	@ 0xae
 8011182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011186:	689b      	ldr	r3, [r3, #8]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00f      	beq.n	80111ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801118c:	7bba      	ldrb	r2, [r7, #14]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011194:	7bba      	ldrb	r2, [r7, #14]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	32ae      	adds	r2, #174	@ 0xae
 801119a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	6839      	ldr	r1, [r7, #0]
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	4798      	blx	r3
 80111a6:	4603      	mov	r3, r0
 80111a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80111aa:	e004      	b.n	80111b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80111ac:	2303      	movs	r3, #3
 80111ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80111b0:	e001      	b.n	80111b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80111b2:	2303      	movs	r3, #3
 80111b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	88db      	ldrh	r3, [r3, #6]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d110      	bne.n	80111e0 <USBD_StdItfReq+0xc0>
 80111be:	7bfb      	ldrb	r3, [r7, #15]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10d      	bne.n	80111e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f000 fdfd 	bl	8011dc4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80111ca:	e009      	b.n	80111e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80111cc:	6839      	ldr	r1, [r7, #0]
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f000 fd21 	bl	8011c16 <USBD_CtlError>
          break;
 80111d4:	e004      	b.n	80111e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80111d6:	6839      	ldr	r1, [r7, #0]
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f000 fd1c 	bl	8011c16 <USBD_CtlError>
          break;
 80111de:	e000      	b.n	80111e2 <USBD_StdItfReq+0xc2>
          break;
 80111e0:	bf00      	nop
      }
      break;
 80111e2:	e004      	b.n	80111ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80111e4:	6839      	ldr	r1, [r7, #0]
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fd15 	bl	8011c16 <USBD_CtlError>
      break;
 80111ec:	bf00      	nop
  }

  return ret;
 80111ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3710      	adds	r7, #16
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	889b      	ldrh	r3, [r3, #4]
 801120a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011214:	2b40      	cmp	r3, #64	@ 0x40
 8011216:	d007      	beq.n	8011228 <USBD_StdEPReq+0x30>
 8011218:	2b40      	cmp	r3, #64	@ 0x40
 801121a:	f200 817f 	bhi.w	801151c <USBD_StdEPReq+0x324>
 801121e:	2b00      	cmp	r3, #0
 8011220:	d02a      	beq.n	8011278 <USBD_StdEPReq+0x80>
 8011222:	2b20      	cmp	r3, #32
 8011224:	f040 817a 	bne.w	801151c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011228:	7bbb      	ldrb	r3, [r7, #14]
 801122a:	4619      	mov	r1, r3
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7ff fe85 	bl	8010f3c <USBD_CoreFindEP>
 8011232:	4603      	mov	r3, r0
 8011234:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011236:	7b7b      	ldrb	r3, [r7, #13]
 8011238:	2bff      	cmp	r3, #255	@ 0xff
 801123a:	f000 8174 	beq.w	8011526 <USBD_StdEPReq+0x32e>
 801123e:	7b7b      	ldrb	r3, [r7, #13]
 8011240:	2b00      	cmp	r3, #0
 8011242:	f040 8170 	bne.w	8011526 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011246:	7b7a      	ldrb	r2, [r7, #13]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801124e:	7b7a      	ldrb	r2, [r7, #13]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	32ae      	adds	r2, #174	@ 0xae
 8011254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011258:	689b      	ldr	r3, [r3, #8]
 801125a:	2b00      	cmp	r3, #0
 801125c:	f000 8163 	beq.w	8011526 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011260:	7b7a      	ldrb	r2, [r7, #13]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	32ae      	adds	r2, #174	@ 0xae
 8011266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	6839      	ldr	r1, [r7, #0]
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	4798      	blx	r3
 8011272:	4603      	mov	r3, r0
 8011274:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011276:	e156      	b.n	8011526 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	785b      	ldrb	r3, [r3, #1]
 801127c:	2b03      	cmp	r3, #3
 801127e:	d008      	beq.n	8011292 <USBD_StdEPReq+0x9a>
 8011280:	2b03      	cmp	r3, #3
 8011282:	f300 8145 	bgt.w	8011510 <USBD_StdEPReq+0x318>
 8011286:	2b00      	cmp	r3, #0
 8011288:	f000 809b 	beq.w	80113c2 <USBD_StdEPReq+0x1ca>
 801128c:	2b01      	cmp	r3, #1
 801128e:	d03c      	beq.n	801130a <USBD_StdEPReq+0x112>
 8011290:	e13e      	b.n	8011510 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011298:	b2db      	uxtb	r3, r3
 801129a:	2b02      	cmp	r3, #2
 801129c:	d002      	beq.n	80112a4 <USBD_StdEPReq+0xac>
 801129e:	2b03      	cmp	r3, #3
 80112a0:	d016      	beq.n	80112d0 <USBD_StdEPReq+0xd8>
 80112a2:	e02c      	b.n	80112fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112a4:	7bbb      	ldrb	r3, [r7, #14]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00d      	beq.n	80112c6 <USBD_StdEPReq+0xce>
 80112aa:	7bbb      	ldrb	r3, [r7, #14]
 80112ac:	2b80      	cmp	r3, #128	@ 0x80
 80112ae:	d00a      	beq.n	80112c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80112b0:	7bbb      	ldrb	r3, [r7, #14]
 80112b2:	4619      	mov	r1, r3
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f006 fd7f 	bl	8017db8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80112ba:	2180      	movs	r1, #128	@ 0x80
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f006 fd7b 	bl	8017db8 <USBD_LL_StallEP>
 80112c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80112c4:	e020      	b.n	8011308 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80112c6:	6839      	ldr	r1, [r7, #0]
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 fca4 	bl	8011c16 <USBD_CtlError>
              break;
 80112ce:	e01b      	b.n	8011308 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	885b      	ldrh	r3, [r3, #2]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d10e      	bne.n	80112f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80112d8:	7bbb      	ldrb	r3, [r7, #14]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d00b      	beq.n	80112f6 <USBD_StdEPReq+0xfe>
 80112de:	7bbb      	ldrb	r3, [r7, #14]
 80112e0:	2b80      	cmp	r3, #128	@ 0x80
 80112e2:	d008      	beq.n	80112f6 <USBD_StdEPReq+0xfe>
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	88db      	ldrh	r3, [r3, #6]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d104      	bne.n	80112f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80112ec:	7bbb      	ldrb	r3, [r7, #14]
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f006 fd61 	bl	8017db8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 fd64 	bl	8011dc4 <USBD_CtlSendStatus>

              break;
 80112fc:	e004      	b.n	8011308 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80112fe:	6839      	ldr	r1, [r7, #0]
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f000 fc88 	bl	8011c16 <USBD_CtlError>
              break;
 8011306:	bf00      	nop
          }
          break;
 8011308:	e107      	b.n	801151a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011310:	b2db      	uxtb	r3, r3
 8011312:	2b02      	cmp	r3, #2
 8011314:	d002      	beq.n	801131c <USBD_StdEPReq+0x124>
 8011316:	2b03      	cmp	r3, #3
 8011318:	d016      	beq.n	8011348 <USBD_StdEPReq+0x150>
 801131a:	e04b      	b.n	80113b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801131c:	7bbb      	ldrb	r3, [r7, #14]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d00d      	beq.n	801133e <USBD_StdEPReq+0x146>
 8011322:	7bbb      	ldrb	r3, [r7, #14]
 8011324:	2b80      	cmp	r3, #128	@ 0x80
 8011326:	d00a      	beq.n	801133e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011328:	7bbb      	ldrb	r3, [r7, #14]
 801132a:	4619      	mov	r1, r3
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f006 fd43 	bl	8017db8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011332:	2180      	movs	r1, #128	@ 0x80
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f006 fd3f 	bl	8017db8 <USBD_LL_StallEP>
 801133a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801133c:	e040      	b.n	80113c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801133e:	6839      	ldr	r1, [r7, #0]
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f000 fc68 	bl	8011c16 <USBD_CtlError>
              break;
 8011346:	e03b      	b.n	80113c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	885b      	ldrh	r3, [r3, #2]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d136      	bne.n	80113be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011350:	7bbb      	ldrb	r3, [r7, #14]
 8011352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011356:	2b00      	cmp	r3, #0
 8011358:	d004      	beq.n	8011364 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801135a:	7bbb      	ldrb	r3, [r7, #14]
 801135c:	4619      	mov	r1, r3
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f006 fd49 	bl	8017df6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 fd2d 	bl	8011dc4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801136a:	7bbb      	ldrb	r3, [r7, #14]
 801136c:	4619      	mov	r1, r3
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f7ff fde4 	bl	8010f3c <USBD_CoreFindEP>
 8011374:	4603      	mov	r3, r0
 8011376:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011378:	7b7b      	ldrb	r3, [r7, #13]
 801137a:	2bff      	cmp	r3, #255	@ 0xff
 801137c:	d01f      	beq.n	80113be <USBD_StdEPReq+0x1c6>
 801137e:	7b7b      	ldrb	r3, [r7, #13]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d11c      	bne.n	80113be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011384:	7b7a      	ldrb	r2, [r7, #13]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801138c:	7b7a      	ldrb	r2, [r7, #13]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	32ae      	adds	r2, #174	@ 0xae
 8011392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d010      	beq.n	80113be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801139c:	7b7a      	ldrb	r2, [r7, #13]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	32ae      	adds	r2, #174	@ 0xae
 80113a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	6839      	ldr	r1, [r7, #0]
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	4798      	blx	r3
 80113ae:	4603      	mov	r3, r0
 80113b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80113b2:	e004      	b.n	80113be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80113b4:	6839      	ldr	r1, [r7, #0]
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 fc2d 	bl	8011c16 <USBD_CtlError>
              break;
 80113bc:	e000      	b.n	80113c0 <USBD_StdEPReq+0x1c8>
              break;
 80113be:	bf00      	nop
          }
          break;
 80113c0:	e0ab      	b.n	801151a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	2b02      	cmp	r3, #2
 80113cc:	d002      	beq.n	80113d4 <USBD_StdEPReq+0x1dc>
 80113ce:	2b03      	cmp	r3, #3
 80113d0:	d032      	beq.n	8011438 <USBD_StdEPReq+0x240>
 80113d2:	e097      	b.n	8011504 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113d4:	7bbb      	ldrb	r3, [r7, #14]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d007      	beq.n	80113ea <USBD_StdEPReq+0x1f2>
 80113da:	7bbb      	ldrb	r3, [r7, #14]
 80113dc:	2b80      	cmp	r3, #128	@ 0x80
 80113de:	d004      	beq.n	80113ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 fc17 	bl	8011c16 <USBD_CtlError>
                break;
 80113e8:	e091      	b.n	801150e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	da0b      	bge.n	801140a <USBD_StdEPReq+0x212>
 80113f2:	7bbb      	ldrb	r3, [r7, #14]
 80113f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80113f8:	4613      	mov	r3, r2
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	4413      	add	r3, r2
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	3310      	adds	r3, #16
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	4413      	add	r3, r2
 8011406:	3304      	adds	r3, #4
 8011408:	e00b      	b.n	8011422 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801140a:	7bbb      	ldrb	r3, [r7, #14]
 801140c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011410:	4613      	mov	r3, r2
 8011412:	009b      	lsls	r3, r3, #2
 8011414:	4413      	add	r3, r2
 8011416:	009b      	lsls	r3, r3, #2
 8011418:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801141c:	687a      	ldr	r2, [r7, #4]
 801141e:	4413      	add	r3, r2
 8011420:	3304      	adds	r3, #4
 8011422:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2200      	movs	r2, #0
 8011428:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	2202      	movs	r2, #2
 801142e:	4619      	mov	r1, r3
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 fc6d 	bl	8011d10 <USBD_CtlSendData>
              break;
 8011436:	e06a      	b.n	801150e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801143c:	2b00      	cmp	r3, #0
 801143e:	da11      	bge.n	8011464 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011440:	7bbb      	ldrb	r3, [r7, #14]
 8011442:	f003 020f 	and.w	r2, r3, #15
 8011446:	6879      	ldr	r1, [r7, #4]
 8011448:	4613      	mov	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4413      	add	r3, r2
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	440b      	add	r3, r1
 8011452:	3324      	adds	r3, #36	@ 0x24
 8011454:	881b      	ldrh	r3, [r3, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d117      	bne.n	801148a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801145a:	6839      	ldr	r1, [r7, #0]
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 fbda 	bl	8011c16 <USBD_CtlError>
                  break;
 8011462:	e054      	b.n	801150e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011464:	7bbb      	ldrb	r3, [r7, #14]
 8011466:	f003 020f 	and.w	r2, r3, #15
 801146a:	6879      	ldr	r1, [r7, #4]
 801146c:	4613      	mov	r3, r2
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	4413      	add	r3, r2
 8011472:	009b      	lsls	r3, r3, #2
 8011474:	440b      	add	r3, r1
 8011476:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d104      	bne.n	801148a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011480:	6839      	ldr	r1, [r7, #0]
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f000 fbc7 	bl	8011c16 <USBD_CtlError>
                  break;
 8011488:	e041      	b.n	801150e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801148a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801148e:	2b00      	cmp	r3, #0
 8011490:	da0b      	bge.n	80114aa <USBD_StdEPReq+0x2b2>
 8011492:	7bbb      	ldrb	r3, [r7, #14]
 8011494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011498:	4613      	mov	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	4413      	add	r3, r2
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	3310      	adds	r3, #16
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	4413      	add	r3, r2
 80114a6:	3304      	adds	r3, #4
 80114a8:	e00b      	b.n	80114c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80114aa:	7bbb      	ldrb	r3, [r7, #14]
 80114ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114b0:	4613      	mov	r3, r2
 80114b2:	009b      	lsls	r3, r3, #2
 80114b4:	4413      	add	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	4413      	add	r3, r2
 80114c0:	3304      	adds	r3, #4
 80114c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80114c4:	7bbb      	ldrb	r3, [r7, #14]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d002      	beq.n	80114d0 <USBD_StdEPReq+0x2d8>
 80114ca:	7bbb      	ldrb	r3, [r7, #14]
 80114cc:	2b80      	cmp	r3, #128	@ 0x80
 80114ce:	d103      	bne.n	80114d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2200      	movs	r2, #0
 80114d4:	601a      	str	r2, [r3, #0]
 80114d6:	e00e      	b.n	80114f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80114d8:	7bbb      	ldrb	r3, [r7, #14]
 80114da:	4619      	mov	r1, r3
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f006 fca9 	bl	8017e34 <USBD_LL_IsStallEP>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d003      	beq.n	80114f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	2201      	movs	r2, #1
 80114ec:	601a      	str	r2, [r3, #0]
 80114ee:	e002      	b.n	80114f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	2200      	movs	r2, #0
 80114f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	2202      	movs	r2, #2
 80114fa:	4619      	mov	r1, r3
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 fc07 	bl	8011d10 <USBD_CtlSendData>
              break;
 8011502:	e004      	b.n	801150e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 fb85 	bl	8011c16 <USBD_CtlError>
              break;
 801150c:	bf00      	nop
          }
          break;
 801150e:	e004      	b.n	801151a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011510:	6839      	ldr	r1, [r7, #0]
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 fb7f 	bl	8011c16 <USBD_CtlError>
          break;
 8011518:	bf00      	nop
      }
      break;
 801151a:	e005      	b.n	8011528 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801151c:	6839      	ldr	r1, [r7, #0]
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 fb79 	bl	8011c16 <USBD_CtlError>
      break;
 8011524:	e000      	b.n	8011528 <USBD_StdEPReq+0x330>
      break;
 8011526:	bf00      	nop
  }

  return ret;
 8011528:	7bfb      	ldrb	r3, [r7, #15]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3710      	adds	r7, #16
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
	...

08011534 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801153e:	2300      	movs	r3, #0
 8011540:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011542:	2300      	movs	r3, #0
 8011544:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011546:	2300      	movs	r3, #0
 8011548:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	885b      	ldrh	r3, [r3, #2]
 801154e:	0a1b      	lsrs	r3, r3, #8
 8011550:	b29b      	uxth	r3, r3
 8011552:	3b01      	subs	r3, #1
 8011554:	2b0e      	cmp	r3, #14
 8011556:	f200 8152 	bhi.w	80117fe <USBD_GetDescriptor+0x2ca>
 801155a:	a201      	add	r2, pc, #4	@ (adr r2, 8011560 <USBD_GetDescriptor+0x2c>)
 801155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011560:	080115d1 	.word	0x080115d1
 8011564:	080115e9 	.word	0x080115e9
 8011568:	08011629 	.word	0x08011629
 801156c:	080117ff 	.word	0x080117ff
 8011570:	080117ff 	.word	0x080117ff
 8011574:	0801179f 	.word	0x0801179f
 8011578:	080117cb 	.word	0x080117cb
 801157c:	080117ff 	.word	0x080117ff
 8011580:	080117ff 	.word	0x080117ff
 8011584:	080117ff 	.word	0x080117ff
 8011588:	080117ff 	.word	0x080117ff
 801158c:	080117ff 	.word	0x080117ff
 8011590:	080117ff 	.word	0x080117ff
 8011594:	080117ff 	.word	0x080117ff
 8011598:	0801159d 	.word	0x0801159d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115a2:	69db      	ldr	r3, [r3, #28]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d00b      	beq.n	80115c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115ae:	69db      	ldr	r3, [r3, #28]
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	7c12      	ldrb	r2, [r2, #16]
 80115b4:	f107 0108 	add.w	r1, r7, #8
 80115b8:	4610      	mov	r0, r2
 80115ba:	4798      	blx	r3
 80115bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80115be:	e126      	b.n	801180e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 fb27 	bl	8011c16 <USBD_CtlError>
        err++;
 80115c8:	7afb      	ldrb	r3, [r7, #11]
 80115ca:	3301      	adds	r3, #1
 80115cc:	72fb      	strb	r3, [r7, #11]
      break;
 80115ce:	e11e      	b.n	801180e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	7c12      	ldrb	r2, [r2, #16]
 80115dc:	f107 0108 	add.w	r1, r7, #8
 80115e0:	4610      	mov	r0, r2
 80115e2:	4798      	blx	r3
 80115e4:	60f8      	str	r0, [r7, #12]
      break;
 80115e6:	e112      	b.n	801180e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	7c1b      	ldrb	r3, [r3, #16]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10d      	bne.n	801160c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115f8:	f107 0208 	add.w	r2, r7, #8
 80115fc:	4610      	mov	r0, r2
 80115fe:	4798      	blx	r3
 8011600:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	3301      	adds	r3, #1
 8011606:	2202      	movs	r2, #2
 8011608:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801160a:	e100      	b.n	801180e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011614:	f107 0208 	add.w	r2, r7, #8
 8011618:	4610      	mov	r0, r2
 801161a:	4798      	blx	r3
 801161c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	3301      	adds	r3, #1
 8011622:	2202      	movs	r2, #2
 8011624:	701a      	strb	r2, [r3, #0]
      break;
 8011626:	e0f2      	b.n	801180e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	885b      	ldrh	r3, [r3, #2]
 801162c:	b2db      	uxtb	r3, r3
 801162e:	2b05      	cmp	r3, #5
 8011630:	f200 80ac 	bhi.w	801178c <USBD_GetDescriptor+0x258>
 8011634:	a201      	add	r2, pc, #4	@ (adr r2, 801163c <USBD_GetDescriptor+0x108>)
 8011636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163a:	bf00      	nop
 801163c:	08011655 	.word	0x08011655
 8011640:	08011689 	.word	0x08011689
 8011644:	080116bd 	.word	0x080116bd
 8011648:	080116f1 	.word	0x080116f1
 801164c:	08011725 	.word	0x08011725
 8011650:	08011759 	.word	0x08011759
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00b      	beq.n	8011678 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	7c12      	ldrb	r2, [r2, #16]
 801166c:	f107 0108 	add.w	r1, r7, #8
 8011670:	4610      	mov	r0, r2
 8011672:	4798      	blx	r3
 8011674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011676:	e091      	b.n	801179c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011678:	6839      	ldr	r1, [r7, #0]
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 facb 	bl	8011c16 <USBD_CtlError>
            err++;
 8011680:	7afb      	ldrb	r3, [r7, #11]
 8011682:	3301      	adds	r3, #1
 8011684:	72fb      	strb	r3, [r7, #11]
          break;
 8011686:	e089      	b.n	801179c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00b      	beq.n	80116ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801169a:	689b      	ldr	r3, [r3, #8]
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	7c12      	ldrb	r2, [r2, #16]
 80116a0:	f107 0108 	add.w	r1, r7, #8
 80116a4:	4610      	mov	r0, r2
 80116a6:	4798      	blx	r3
 80116a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116aa:	e077      	b.n	801179c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80116ac:	6839      	ldr	r1, [r7, #0]
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fab1 	bl	8011c16 <USBD_CtlError>
            err++;
 80116b4:	7afb      	ldrb	r3, [r7, #11]
 80116b6:	3301      	adds	r3, #1
 80116b8:	72fb      	strb	r3, [r7, #11]
          break;
 80116ba:	e06f      	b.n	801179c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d00b      	beq.n	80116e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	7c12      	ldrb	r2, [r2, #16]
 80116d4:	f107 0108 	add.w	r1, r7, #8
 80116d8:	4610      	mov	r0, r2
 80116da:	4798      	blx	r3
 80116dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116de:	e05d      	b.n	801179c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80116e0:	6839      	ldr	r1, [r7, #0]
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f000 fa97 	bl	8011c16 <USBD_CtlError>
            err++;
 80116e8:	7afb      	ldrb	r3, [r7, #11]
 80116ea:	3301      	adds	r3, #1
 80116ec:	72fb      	strb	r3, [r7, #11]
          break;
 80116ee:	e055      	b.n	801179c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116f6:	691b      	ldr	r3, [r3, #16]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d00b      	beq.n	8011714 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011702:	691b      	ldr	r3, [r3, #16]
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	7c12      	ldrb	r2, [r2, #16]
 8011708:	f107 0108 	add.w	r1, r7, #8
 801170c:	4610      	mov	r0, r2
 801170e:	4798      	blx	r3
 8011710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011712:	e043      	b.n	801179c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011714:	6839      	ldr	r1, [r7, #0]
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f000 fa7d 	bl	8011c16 <USBD_CtlError>
            err++;
 801171c:	7afb      	ldrb	r3, [r7, #11]
 801171e:	3301      	adds	r3, #1
 8011720:	72fb      	strb	r3, [r7, #11]
          break;
 8011722:	e03b      	b.n	801179c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801172a:	695b      	ldr	r3, [r3, #20]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d00b      	beq.n	8011748 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011736:	695b      	ldr	r3, [r3, #20]
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	7c12      	ldrb	r2, [r2, #16]
 801173c:	f107 0108 	add.w	r1, r7, #8
 8011740:	4610      	mov	r0, r2
 8011742:	4798      	blx	r3
 8011744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011746:	e029      	b.n	801179c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011748:	6839      	ldr	r1, [r7, #0]
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f000 fa63 	bl	8011c16 <USBD_CtlError>
            err++;
 8011750:	7afb      	ldrb	r3, [r7, #11]
 8011752:	3301      	adds	r3, #1
 8011754:	72fb      	strb	r3, [r7, #11]
          break;
 8011756:	e021      	b.n	801179c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801175e:	699b      	ldr	r3, [r3, #24]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00b      	beq.n	801177c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801176a:	699b      	ldr	r3, [r3, #24]
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	7c12      	ldrb	r2, [r2, #16]
 8011770:	f107 0108 	add.w	r1, r7, #8
 8011774:	4610      	mov	r0, r2
 8011776:	4798      	blx	r3
 8011778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801177a:	e00f      	b.n	801179c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 fa49 	bl	8011c16 <USBD_CtlError>
            err++;
 8011784:	7afb      	ldrb	r3, [r7, #11]
 8011786:	3301      	adds	r3, #1
 8011788:	72fb      	strb	r3, [r7, #11]
          break;
 801178a:	e007      	b.n	801179c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801178c:	6839      	ldr	r1, [r7, #0]
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f000 fa41 	bl	8011c16 <USBD_CtlError>
          err++;
 8011794:	7afb      	ldrb	r3, [r7, #11]
 8011796:	3301      	adds	r3, #1
 8011798:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801179a:	bf00      	nop
      }
      break;
 801179c:	e037      	b.n	801180e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	7c1b      	ldrb	r3, [r3, #16]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d109      	bne.n	80117ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117ae:	f107 0208 	add.w	r2, r7, #8
 80117b2:	4610      	mov	r0, r2
 80117b4:	4798      	blx	r3
 80117b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80117b8:	e029      	b.n	801180e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80117ba:	6839      	ldr	r1, [r7, #0]
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f000 fa2a 	bl	8011c16 <USBD_CtlError>
        err++;
 80117c2:	7afb      	ldrb	r3, [r7, #11]
 80117c4:	3301      	adds	r3, #1
 80117c6:	72fb      	strb	r3, [r7, #11]
      break;
 80117c8:	e021      	b.n	801180e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	7c1b      	ldrb	r3, [r3, #16]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d10d      	bne.n	80117ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117da:	f107 0208 	add.w	r2, r7, #8
 80117de:	4610      	mov	r0, r2
 80117e0:	4798      	blx	r3
 80117e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	3301      	adds	r3, #1
 80117e8:	2207      	movs	r2, #7
 80117ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80117ec:	e00f      	b.n	801180e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80117ee:	6839      	ldr	r1, [r7, #0]
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f000 fa10 	bl	8011c16 <USBD_CtlError>
        err++;
 80117f6:	7afb      	ldrb	r3, [r7, #11]
 80117f8:	3301      	adds	r3, #1
 80117fa:	72fb      	strb	r3, [r7, #11]
      break;
 80117fc:	e007      	b.n	801180e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80117fe:	6839      	ldr	r1, [r7, #0]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fa08 	bl	8011c16 <USBD_CtlError>
      err++;
 8011806:	7afb      	ldrb	r3, [r7, #11]
 8011808:	3301      	adds	r3, #1
 801180a:	72fb      	strb	r3, [r7, #11]
      break;
 801180c:	bf00      	nop
  }

  if (err != 0U)
 801180e:	7afb      	ldrb	r3, [r7, #11]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d11e      	bne.n	8011852 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	88db      	ldrh	r3, [r3, #6]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d016      	beq.n	801184a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801181c:	893b      	ldrh	r3, [r7, #8]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00e      	beq.n	8011840 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	88da      	ldrh	r2, [r3, #6]
 8011826:	893b      	ldrh	r3, [r7, #8]
 8011828:	4293      	cmp	r3, r2
 801182a:	bf28      	it	cs
 801182c:	4613      	movcs	r3, r2
 801182e:	b29b      	uxth	r3, r3
 8011830:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011832:	893b      	ldrh	r3, [r7, #8]
 8011834:	461a      	mov	r2, r3
 8011836:	68f9      	ldr	r1, [r7, #12]
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fa69 	bl	8011d10 <USBD_CtlSendData>
 801183e:	e009      	b.n	8011854 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011840:	6839      	ldr	r1, [r7, #0]
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f9e7 	bl	8011c16 <USBD_CtlError>
 8011848:	e004      	b.n	8011854 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 faba 	bl	8011dc4 <USBD_CtlSendStatus>
 8011850:	e000      	b.n	8011854 <USBD_GetDescriptor+0x320>
    return;
 8011852:	bf00      	nop
  }
}
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop

0801185c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	889b      	ldrh	r3, [r3, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d131      	bne.n	80118d2 <USBD_SetAddress+0x76>
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	88db      	ldrh	r3, [r3, #6]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d12d      	bne.n	80118d2 <USBD_SetAddress+0x76>
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	885b      	ldrh	r3, [r3, #2]
 801187a:	2b7f      	cmp	r3, #127	@ 0x7f
 801187c:	d829      	bhi.n	80118d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	885b      	ldrh	r3, [r3, #2]
 8011882:	b2db      	uxtb	r3, r3
 8011884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011888:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b03      	cmp	r3, #3
 8011894:	d104      	bne.n	80118a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011896:	6839      	ldr	r1, [r7, #0]
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f000 f9bc 	bl	8011c16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801189e:	e01d      	b.n	80118dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	7bfa      	ldrb	r2, [r7, #15]
 80118a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80118a8:	7bfb      	ldrb	r3, [r7, #15]
 80118aa:	4619      	mov	r1, r3
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f006 faed 	bl	8017e8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 fa86 	bl	8011dc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80118b8:	7bfb      	ldrb	r3, [r7, #15]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d004      	beq.n	80118c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2202      	movs	r2, #2
 80118c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118c6:	e009      	b.n	80118dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2201      	movs	r2, #1
 80118cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118d0:	e004      	b.n	80118dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80118d2:	6839      	ldr	r1, [r7, #0]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 f99e 	bl	8011c16 <USBD_CtlError>
  }
}
 80118da:	bf00      	nop
 80118dc:	bf00      	nop
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}

080118e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80118ee:	2300      	movs	r3, #0
 80118f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	885b      	ldrh	r3, [r3, #2]
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	4b4e      	ldr	r3, [pc, #312]	@ (8011a34 <USBD_SetConfig+0x150>)
 80118fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80118fc:	4b4d      	ldr	r3, [pc, #308]	@ (8011a34 <USBD_SetConfig+0x150>)
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	2b01      	cmp	r3, #1
 8011902:	d905      	bls.n	8011910 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011904:	6839      	ldr	r1, [r7, #0]
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 f985 	bl	8011c16 <USBD_CtlError>
    return USBD_FAIL;
 801190c:	2303      	movs	r3, #3
 801190e:	e08c      	b.n	8011a2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011916:	b2db      	uxtb	r3, r3
 8011918:	2b02      	cmp	r3, #2
 801191a:	d002      	beq.n	8011922 <USBD_SetConfig+0x3e>
 801191c:	2b03      	cmp	r3, #3
 801191e:	d029      	beq.n	8011974 <USBD_SetConfig+0x90>
 8011920:	e075      	b.n	8011a0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011922:	4b44      	ldr	r3, [pc, #272]	@ (8011a34 <USBD_SetConfig+0x150>)
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d020      	beq.n	801196c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801192a:	4b42      	ldr	r3, [pc, #264]	@ (8011a34 <USBD_SetConfig+0x150>)
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	461a      	mov	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011934:	4b3f      	ldr	r3, [pc, #252]	@ (8011a34 <USBD_SetConfig+0x150>)
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	4619      	mov	r1, r3
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7fe ffb9 	bl	80108b2 <USBD_SetClassConfig>
 8011940:	4603      	mov	r3, r0
 8011942:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011944:	7bfb      	ldrb	r3, [r7, #15]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d008      	beq.n	801195c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801194a:	6839      	ldr	r1, [r7, #0]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f000 f962 	bl	8011c16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2202      	movs	r2, #2
 8011956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801195a:	e065      	b.n	8011a28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f000 fa31 	bl	8011dc4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2203      	movs	r2, #3
 8011966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801196a:	e05d      	b.n	8011a28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f000 fa29 	bl	8011dc4 <USBD_CtlSendStatus>
      break;
 8011972:	e059      	b.n	8011a28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011974:	4b2f      	ldr	r3, [pc, #188]	@ (8011a34 <USBD_SetConfig+0x150>)
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d112      	bne.n	80119a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2202      	movs	r2, #2
 8011980:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011984:	4b2b      	ldr	r3, [pc, #172]	@ (8011a34 <USBD_SetConfig+0x150>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	461a      	mov	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801198e:	4b29      	ldr	r3, [pc, #164]	@ (8011a34 <USBD_SetConfig+0x150>)
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	4619      	mov	r1, r3
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f7fe ffa8 	bl	80108ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fa12 	bl	8011dc4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80119a0:	e042      	b.n	8011a28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80119a2:	4b24      	ldr	r3, [pc, #144]	@ (8011a34 <USBD_SetConfig+0x150>)
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	461a      	mov	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d02a      	beq.n	8011a06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	4619      	mov	r1, r3
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f7fe ff96 	bl	80108ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80119be:	4b1d      	ldr	r3, [pc, #116]	@ (8011a34 <USBD_SetConfig+0x150>)
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	461a      	mov	r2, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80119c8:	4b1a      	ldr	r3, [pc, #104]	@ (8011a34 <USBD_SetConfig+0x150>)
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	4619      	mov	r1, r3
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7fe ff6f 	bl	80108b2 <USBD_SetClassConfig>
 80119d4:	4603      	mov	r3, r0
 80119d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80119d8:	7bfb      	ldrb	r3, [r7, #15]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d00f      	beq.n	80119fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80119de:	6839      	ldr	r1, [r7, #0]
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 f918 	bl	8011c16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	4619      	mov	r1, r3
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f7fe ff7b 	bl	80108ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2202      	movs	r2, #2
 80119f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80119fc:	e014      	b.n	8011a28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f9e0 	bl	8011dc4 <USBD_CtlSendStatus>
      break;
 8011a04:	e010      	b.n	8011a28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 f9dc 	bl	8011dc4 <USBD_CtlSendStatus>
      break;
 8011a0c:	e00c      	b.n	8011a28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 f900 	bl	8011c16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a16:	4b07      	ldr	r3, [pc, #28]	@ (8011a34 <USBD_SetConfig+0x150>)
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7fe ff64 	bl	80108ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011a22:	2303      	movs	r3, #3
 8011a24:	73fb      	strb	r3, [r7, #15]
      break;
 8011a26:	bf00      	nop
  }

  return ret;
 8011a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	24002efc 	.word	0x24002efc

08011a38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	88db      	ldrh	r3, [r3, #6]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d004      	beq.n	8011a54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011a4a:	6839      	ldr	r1, [r7, #0]
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f000 f8e2 	bl	8011c16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011a52:	e023      	b.n	8011a9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	dc02      	bgt.n	8011a66 <USBD_GetConfig+0x2e>
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	dc03      	bgt.n	8011a6c <USBD_GetConfig+0x34>
 8011a64:	e015      	b.n	8011a92 <USBD_GetConfig+0x5a>
 8011a66:	2b03      	cmp	r3, #3
 8011a68:	d00b      	beq.n	8011a82 <USBD_GetConfig+0x4a>
 8011a6a:	e012      	b.n	8011a92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	3308      	adds	r3, #8
 8011a76:	2201      	movs	r2, #1
 8011a78:	4619      	mov	r1, r3
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f000 f948 	bl	8011d10 <USBD_CtlSendData>
        break;
 8011a80:	e00c      	b.n	8011a9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	3304      	adds	r3, #4
 8011a86:	2201      	movs	r2, #1
 8011a88:	4619      	mov	r1, r3
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 f940 	bl	8011d10 <USBD_CtlSendData>
        break;
 8011a90:	e004      	b.n	8011a9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f8be 	bl	8011c16 <USBD_CtlError>
        break;
 8011a9a:	bf00      	nop
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d81e      	bhi.n	8011afa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	88db      	ldrh	r3, [r3, #6]
 8011ac0:	2b02      	cmp	r3, #2
 8011ac2:	d004      	beq.n	8011ace <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011ac4:	6839      	ldr	r1, [r7, #0]
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f8a5 	bl	8011c16 <USBD_CtlError>
        break;
 8011acc:	e01a      	b.n	8011b04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d005      	beq.n	8011aea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	f043 0202 	orr.w	r2, r3, #2
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	330c      	adds	r3, #12
 8011aee:	2202      	movs	r2, #2
 8011af0:	4619      	mov	r1, r3
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 f90c 	bl	8011d10 <USBD_CtlSendData>
      break;
 8011af8:	e004      	b.n	8011b04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011afa:	6839      	ldr	r1, [r7, #0]
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 f88a 	bl	8011c16 <USBD_CtlError>
      break;
 8011b02:	bf00      	nop
  }
}
 8011b04:	bf00      	nop
 8011b06:	3708      	adds	r7, #8
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	885b      	ldrh	r3, [r3, #2]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d107      	bne.n	8011b2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2201      	movs	r2, #1
 8011b22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f000 f94c 	bl	8011dc4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011b2c:	e013      	b.n	8011b56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	885b      	ldrh	r3, [r3, #2]
 8011b32:	2b02      	cmp	r3, #2
 8011b34:	d10b      	bne.n	8011b4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	889b      	ldrh	r3, [r3, #4]
 8011b3a:	0a1b      	lsrs	r3, r3, #8
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 f93c 	bl	8011dc4 <USBD_CtlSendStatus>
}
 8011b4c:	e003      	b.n	8011b56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011b4e:	6839      	ldr	r1, [r7, #0]
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f000 f860 	bl	8011c16 <USBD_CtlError>
}
 8011b56:	bf00      	nop
 8011b58:	3708      	adds	r7, #8
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}

08011b5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b082      	sub	sp, #8
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
 8011b66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	3b01      	subs	r3, #1
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	d80b      	bhi.n	8011b8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	885b      	ldrh	r3, [r3, #2]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d10c      	bne.n	8011b98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2200      	movs	r2, #0
 8011b82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 f91c 	bl	8011dc4 <USBD_CtlSendStatus>
      }
      break;
 8011b8c:	e004      	b.n	8011b98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 f840 	bl	8011c16 <USBD_CtlError>
      break;
 8011b96:	e000      	b.n	8011b9a <USBD_ClrFeature+0x3c>
      break;
 8011b98:	bf00      	nop
  }
}
 8011b9a:	bf00      	nop
 8011b9c:	3708      	adds	r7, #8
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b084      	sub	sp, #16
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
 8011baa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	781a      	ldrb	r2, [r3, #0]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	3301      	adds	r3, #1
 8011bbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	781a      	ldrb	r2, [r3, #0]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7ff fa16 	bl	8010ffe <SWAPBYTE>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	3301      	adds	r3, #1
 8011be4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f7ff fa09 	bl	8010ffe <SWAPBYTE>
 8011bec:	4603      	mov	r3, r0
 8011bee:	461a      	mov	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f7ff f9fc 	bl	8010ffe <SWAPBYTE>
 8011c06:	4603      	mov	r3, r0
 8011c08:	461a      	mov	r2, r3
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	80da      	strh	r2, [r3, #6]
}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b082      	sub	sp, #8
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
 8011c1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c20:	2180      	movs	r1, #128	@ 0x80
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f006 f8c8 	bl	8017db8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011c28:	2100      	movs	r1, #0
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f006 f8c4 	bl	8017db8 <USBD_LL_StallEP>
}
 8011c30:	bf00      	nop
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011c44:	2300      	movs	r3, #0
 8011c46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d042      	beq.n	8011cd4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011c52:	6938      	ldr	r0, [r7, #16]
 8011c54:	f000 f842 	bl	8011cdc <USBD_GetLen>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c62:	d808      	bhi.n	8011c76 <USBD_GetString+0x3e>
 8011c64:	6938      	ldr	r0, [r7, #16]
 8011c66:	f000 f839 	bl	8011cdc <USBD_GetLen>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	005b      	lsls	r3, r3, #1
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	e001      	b.n	8011c7a <USBD_GetString+0x42>
 8011c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011c7e:	7dfb      	ldrb	r3, [r7, #23]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	4413      	add	r3, r2
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	7812      	ldrb	r2, [r2, #0]
 8011c88:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c8a:	7dfb      	ldrb	r3, [r7, #23]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011c90:	7dfb      	ldrb	r3, [r7, #23]
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	4413      	add	r3, r2
 8011c96:	2203      	movs	r2, #3
 8011c98:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011ca0:	e013      	b.n	8011cca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011ca2:	7dfb      	ldrb	r3, [r7, #23]
 8011ca4:	68ba      	ldr	r2, [r7, #8]
 8011ca6:	4413      	add	r3, r2
 8011ca8:	693a      	ldr	r2, [r7, #16]
 8011caa:	7812      	ldrb	r2, [r2, #0]
 8011cac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	613b      	str	r3, [r7, #16]
    idx++;
 8011cb4:	7dfb      	ldrb	r3, [r7, #23]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011cba:	7dfb      	ldrb	r3, [r7, #23]
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	701a      	strb	r2, [r3, #0]
    idx++;
 8011cc4:	7dfb      	ldrb	r3, [r7, #23]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d1e7      	bne.n	8011ca2 <USBD_GetString+0x6a>
 8011cd2:	e000      	b.n	8011cd6 <USBD_GetString+0x9e>
    return;
 8011cd4:	bf00      	nop
  }
}
 8011cd6:	3718      	adds	r7, #24
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b085      	sub	sp, #20
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011cec:	e005      	b.n	8011cfa <USBD_GetLen+0x1e>
  {
    len++;
 8011cee:	7bfb      	ldrb	r3, [r7, #15]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1f5      	bne.n	8011cee <USBD_GetLen+0x12>
  }

  return len;
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	2202      	movs	r2, #2
 8011d20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	68ba      	ldr	r2, [r7, #8]
 8011d34:	2100      	movs	r1, #0
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	f006 f8c7 	bl	8017eca <USBD_LL_Transmit>

  return USBD_OK;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b084      	sub	sp, #16
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	60f8      	str	r0, [r7, #12]
 8011d4e:	60b9      	str	r1, [r7, #8]
 8011d50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	2100      	movs	r1, #0
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	f006 f8b6 	bl	8017eca <USBD_LL_Transmit>

  return USBD_OK;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3710      	adds	r7, #16
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2203      	movs	r2, #3
 8011d78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	2100      	movs	r1, #0
 8011d92:	68f8      	ldr	r0, [r7, #12]
 8011d94:	f006 f8ba 	bl	8017f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d98:	2300      	movs	r3, #0
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b084      	sub	sp, #16
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	60f8      	str	r0, [r7, #12]
 8011daa:	60b9      	str	r1, [r7, #8]
 8011dac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	68ba      	ldr	r2, [r7, #8]
 8011db2:	2100      	movs	r1, #0
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f006 f8a9 	bl	8017f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011dba:	2300      	movs	r3, #0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3710      	adds	r7, #16
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2204      	movs	r2, #4
 8011dd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	2100      	movs	r1, #0
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f006 f875 	bl	8017eca <USBD_LL_Transmit>

  return USBD_OK;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b082      	sub	sp, #8
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2205      	movs	r2, #5
 8011df6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	2100      	movs	r1, #0
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f006 f883 	bl	8017f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e06:	2300      	movs	r3, #0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	4603      	mov	r3, r0
 8011e18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011e1a:	79fb      	ldrb	r3, [r7, #7]
 8011e1c:	4a08      	ldr	r2, [pc, #32]	@ (8011e40 <disk_status+0x30>)
 8011e1e:	009b      	lsls	r3, r3, #2
 8011e20:	4413      	add	r3, r2
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	79fa      	ldrb	r2, [r7, #7]
 8011e28:	4905      	ldr	r1, [pc, #20]	@ (8011e40 <disk_status+0x30>)
 8011e2a:	440a      	add	r2, r1
 8011e2c:	7a12      	ldrb	r2, [r2, #8]
 8011e2e:	4610      	mov	r0, r2
 8011e30:	4798      	blx	r3
 8011e32:	4603      	mov	r3, r0
 8011e34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3710      	adds	r7, #16
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	24002f28 	.word	0x24002f28

08011e44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011e52:	79fb      	ldrb	r3, [r7, #7]
 8011e54:	4a0e      	ldr	r2, [pc, #56]	@ (8011e90 <disk_initialize+0x4c>)
 8011e56:	5cd3      	ldrb	r3, [r2, r3]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d114      	bne.n	8011e86 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011e5c:	79fb      	ldrb	r3, [r7, #7]
 8011e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8011e90 <disk_initialize+0x4c>)
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	4413      	add	r3, r2
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	79fa      	ldrb	r2, [r7, #7]
 8011e6a:	4909      	ldr	r1, [pc, #36]	@ (8011e90 <disk_initialize+0x4c>)
 8011e6c:	440a      	add	r2, r1
 8011e6e:	7a12      	ldrb	r2, [r2, #8]
 8011e70:	4610      	mov	r0, r2
 8011e72:	4798      	blx	r3
 8011e74:	4603      	mov	r3, r0
 8011e76:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8011e78:	7bfb      	ldrb	r3, [r7, #15]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d103      	bne.n	8011e86 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8011e7e:	79fb      	ldrb	r3, [r7, #7]
 8011e80:	4a03      	ldr	r2, [pc, #12]	@ (8011e90 <disk_initialize+0x4c>)
 8011e82:	2101      	movs	r1, #1
 8011e84:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8011e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3710      	adds	r7, #16
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	24002f28 	.word	0x24002f28

08011e94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011e94:	b590      	push	{r4, r7, lr}
 8011e96:	b087      	sub	sp, #28
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60b9      	str	r1, [r7, #8]
 8011e9c:	607a      	str	r2, [r7, #4]
 8011e9e:	603b      	str	r3, [r7, #0]
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011ea4:	7bfb      	ldrb	r3, [r7, #15]
 8011ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8011ed0 <disk_read+0x3c>)
 8011ea8:	009b      	lsls	r3, r3, #2
 8011eaa:	4413      	add	r3, r2
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	689c      	ldr	r4, [r3, #8]
 8011eb0:	7bfb      	ldrb	r3, [r7, #15]
 8011eb2:	4a07      	ldr	r2, [pc, #28]	@ (8011ed0 <disk_read+0x3c>)
 8011eb4:	4413      	add	r3, r2
 8011eb6:	7a18      	ldrb	r0, [r3, #8]
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	68b9      	ldr	r1, [r7, #8]
 8011ebe:	47a0      	blx	r4
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8011ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	371c      	adds	r7, #28
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd90      	pop	{r4, r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	24002f28 	.word	0x24002f28

08011ed4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011ed4:	b590      	push	{r4, r7, lr}
 8011ed6:	b087      	sub	sp, #28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	60b9      	str	r1, [r7, #8]
 8011edc:	607a      	str	r2, [r7, #4]
 8011ede:	603b      	str	r3, [r7, #0]
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011ee4:	7bfb      	ldrb	r3, [r7, #15]
 8011ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8011f10 <disk_write+0x3c>)
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	4413      	add	r3, r2
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	68dc      	ldr	r4, [r3, #12]
 8011ef0:	7bfb      	ldrb	r3, [r7, #15]
 8011ef2:	4a07      	ldr	r2, [pc, #28]	@ (8011f10 <disk_write+0x3c>)
 8011ef4:	4413      	add	r3, r2
 8011ef6:	7a18      	ldrb	r0, [r3, #8]
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	68b9      	ldr	r1, [r7, #8]
 8011efe:	47a0      	blx	r4
 8011f00:	4603      	mov	r3, r0
 8011f02:	75fb      	strb	r3, [r7, #23]
  return res;
 8011f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	371c      	adds	r7, #28
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd90      	pop	{r4, r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	24002f28 	.word	0x24002f28

08011f14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	603a      	str	r2, [r7, #0]
 8011f1e:	71fb      	strb	r3, [r7, #7]
 8011f20:	460b      	mov	r3, r1
 8011f22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	4a09      	ldr	r2, [pc, #36]	@ (8011f4c <disk_ioctl+0x38>)
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	4413      	add	r3, r2
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	79fa      	ldrb	r2, [r7, #7]
 8011f32:	4906      	ldr	r1, [pc, #24]	@ (8011f4c <disk_ioctl+0x38>)
 8011f34:	440a      	add	r2, r1
 8011f36:	7a10      	ldrb	r0, [r2, #8]
 8011f38:	79b9      	ldrb	r1, [r7, #6]
 8011f3a:	683a      	ldr	r2, [r7, #0]
 8011f3c:	4798      	blx	r3
 8011f3e:	4603      	mov	r3, r0
 8011f40:	73fb      	strb	r3, [r7, #15]
  return res;
 8011f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3710      	adds	r7, #16
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}
 8011f4c:	24002f28 	.word	0x24002f28

08011f50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011f50:	b480      	push	{r7}
 8011f52:	b085      	sub	sp, #20
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011f60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011f64:	021b      	lsls	r3, r3, #8
 8011f66:	b21a      	sxth	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	b21b      	sxth	r3, r3
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	b21b      	sxth	r3, r3
 8011f72:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011f74:	89fb      	ldrh	r3, [r7, #14]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3714      	adds	r7, #20
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr

08011f82 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011f82:	b480      	push	{r7}
 8011f84:	b085      	sub	sp, #20
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	3303      	adds	r3, #3
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	021b      	lsls	r3, r3, #8
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	3202      	adds	r2, #2
 8011f9a:	7812      	ldrb	r2, [r2, #0]
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	021b      	lsls	r3, r3, #8
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	3201      	adds	r2, #1
 8011fa8:	7812      	ldrb	r2, [r2, #0]
 8011faa:	4313      	orrs	r3, r2
 8011fac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	021b      	lsls	r3, r3, #8
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	7812      	ldrb	r2, [r2, #0]
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	60fb      	str	r3, [r7, #12]
	return rv;
 8011fba:	68fb      	ldr	r3, [r7, #12]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3714      	adds	r7, #20
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr

08011fc8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	1c5a      	adds	r2, r3, #1
 8011fd8:	607a      	str	r2, [r7, #4]
 8011fda:	887a      	ldrh	r2, [r7, #2]
 8011fdc:	b2d2      	uxtb	r2, r2
 8011fde:	701a      	strb	r2, [r3, #0]
 8011fe0:	887b      	ldrh	r3, [r7, #2]
 8011fe2:	0a1b      	lsrs	r3, r3, #8
 8011fe4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	1c5a      	adds	r2, r3, #1
 8011fea:	607a      	str	r2, [r7, #4]
 8011fec:	887a      	ldrh	r2, [r7, #2]
 8011fee:	b2d2      	uxtb	r2, r2
 8011ff0:	701a      	strb	r2, [r3, #0]
}
 8011ff2:	bf00      	nop
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr

08011ffe <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011ffe:	b480      	push	{r7}
 8012000:	b083      	sub	sp, #12
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
 8012006:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	1c5a      	adds	r2, r3, #1
 801200c:	607a      	str	r2, [r7, #4]
 801200e:	683a      	ldr	r2, [r7, #0]
 8012010:	b2d2      	uxtb	r2, r2
 8012012:	701a      	strb	r2, [r3, #0]
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	0a1b      	lsrs	r3, r3, #8
 8012018:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	1c5a      	adds	r2, r3, #1
 801201e:	607a      	str	r2, [r7, #4]
 8012020:	683a      	ldr	r2, [r7, #0]
 8012022:	b2d2      	uxtb	r2, r2
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	0a1b      	lsrs	r3, r3, #8
 801202a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	1c5a      	adds	r2, r3, #1
 8012030:	607a      	str	r2, [r7, #4]
 8012032:	683a      	ldr	r2, [r7, #0]
 8012034:	b2d2      	uxtb	r2, r2
 8012036:	701a      	strb	r2, [r3, #0]
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	0a1b      	lsrs	r3, r3, #8
 801203c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	1c5a      	adds	r2, r3, #1
 8012042:	607a      	str	r2, [r7, #4]
 8012044:	683a      	ldr	r2, [r7, #0]
 8012046:	b2d2      	uxtb	r2, r2
 8012048:	701a      	strb	r2, [r3, #0]
}
 801204a:	bf00      	nop
 801204c:	370c      	adds	r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr

08012056 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012056:	b480      	push	{r7}
 8012058:	b087      	sub	sp, #28
 801205a:	af00      	add	r7, sp, #0
 801205c:	60f8      	str	r0, [r7, #12]
 801205e:	60b9      	str	r1, [r7, #8]
 8012060:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00d      	beq.n	801208c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012070:	693a      	ldr	r2, [r7, #16]
 8012072:	1c53      	adds	r3, r2, #1
 8012074:	613b      	str	r3, [r7, #16]
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	1c59      	adds	r1, r3, #1
 801207a:	6179      	str	r1, [r7, #20]
 801207c:	7812      	ldrb	r2, [r2, #0]
 801207e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	3b01      	subs	r3, #1
 8012084:	607b      	str	r3, [r7, #4]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d1f1      	bne.n	8012070 <mem_cpy+0x1a>
	}
}
 801208c:	bf00      	nop
 801208e:	371c      	adds	r7, #28
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012098:	b480      	push	{r7}
 801209a:	b087      	sub	sp, #28
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	1c5a      	adds	r2, r3, #1
 80120ac:	617a      	str	r2, [r7, #20]
 80120ae:	68ba      	ldr	r2, [r7, #8]
 80120b0:	b2d2      	uxtb	r2, r2
 80120b2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	3b01      	subs	r3, #1
 80120b8:	607b      	str	r3, [r7, #4]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d1f3      	bne.n	80120a8 <mem_set+0x10>
}
 80120c0:	bf00      	nop
 80120c2:	bf00      	nop
 80120c4:	371c      	adds	r7, #28
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr

080120ce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80120ce:	b480      	push	{r7}
 80120d0:	b089      	sub	sp, #36	@ 0x24
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	60f8      	str	r0, [r7, #12]
 80120d6:	60b9      	str	r1, [r7, #8]
 80120d8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	61fb      	str	r3, [r7, #28]
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	1c5a      	adds	r2, r3, #1
 80120ea:	61fa      	str	r2, [r7, #28]
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	4619      	mov	r1, r3
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	61ba      	str	r2, [r7, #24]
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	1acb      	subs	r3, r1, r3
 80120fa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	3b01      	subs	r3, #1
 8012100:	607b      	str	r3, [r7, #4]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d002      	beq.n	801210e <mem_cmp+0x40>
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d0eb      	beq.n	80120e6 <mem_cmp+0x18>

	return r;
 801210e:	697b      	ldr	r3, [r7, #20]
}
 8012110:	4618      	mov	r0, r3
 8012112:	3724      	adds	r7, #36	@ 0x24
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr

0801211c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801211c:	b480      	push	{r7}
 801211e:	b083      	sub	sp, #12
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012126:	e002      	b.n	801212e <chk_chr+0x12>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	3301      	adds	r3, #1
 801212c:	607b      	str	r3, [r7, #4]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d005      	beq.n	8012142 <chk_chr+0x26>
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	461a      	mov	r2, r3
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	4293      	cmp	r3, r2
 8012140:	d1f2      	bne.n	8012128 <chk_chr+0xc>
	return *str;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	781b      	ldrb	r3, [r3, #0]
}
 8012146:	4618      	mov	r0, r3
 8012148:	370c      	adds	r7, #12
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr

08012152 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b082      	sub	sp, #8
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d009      	beq.n	8012174 <lock_fs+0x22>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	4618      	mov	r0, r3
 8012166:	f002 fdb2 	bl	8014cce <ff_req_grant>
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	d001      	beq.n	8012174 <lock_fs+0x22>
 8012170:	2301      	movs	r3, #1
 8012172:	e000      	b.n	8012176 <lock_fs+0x24>
 8012174:	2300      	movs	r3, #0
}
 8012176:	4618      	mov	r0, r3
 8012178:	3708      	adds	r7, #8
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b082      	sub	sp, #8
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	460b      	mov	r3, r1
 8012188:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00d      	beq.n	80121ac <unlock_fs+0x2e>
 8012190:	78fb      	ldrb	r3, [r7, #3]
 8012192:	2b0c      	cmp	r3, #12
 8012194:	d00a      	beq.n	80121ac <unlock_fs+0x2e>
 8012196:	78fb      	ldrb	r3, [r7, #3]
 8012198:	2b0b      	cmp	r3, #11
 801219a:	d007      	beq.n	80121ac <unlock_fs+0x2e>
 801219c:	78fb      	ldrb	r3, [r7, #3]
 801219e:	2b0f      	cmp	r3, #15
 80121a0:	d004      	beq.n	80121ac <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	4618      	mov	r0, r3
 80121a8:	f002 fda6 	bl	8014cf8 <ff_rel_grant>
	}
}
 80121ac:	bf00      	nop
 80121ae:	3708      	adds	r7, #8
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80121b4:	b480      	push	{r7}
 80121b6:	b085      	sub	sp, #20
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80121be:	2300      	movs	r3, #0
 80121c0:	60bb      	str	r3, [r7, #8]
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	60fb      	str	r3, [r7, #12]
 80121c6:	e029      	b.n	801221c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80121c8:	4a27      	ldr	r2, [pc, #156]	@ (8012268 <chk_lock+0xb4>)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	011b      	lsls	r3, r3, #4
 80121ce:	4413      	add	r3, r2
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d01d      	beq.n	8012212 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80121d6:	4a24      	ldr	r2, [pc, #144]	@ (8012268 <chk_lock+0xb4>)
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	011b      	lsls	r3, r3, #4
 80121dc:	4413      	add	r3, r2
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d116      	bne.n	8012216 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80121e8:	4a1f      	ldr	r2, [pc, #124]	@ (8012268 <chk_lock+0xb4>)
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	011b      	lsls	r3, r3, #4
 80121ee:	4413      	add	r3, r2
 80121f0:	3304      	adds	r3, #4
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d10c      	bne.n	8012216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80121fc:	4a1a      	ldr	r2, [pc, #104]	@ (8012268 <chk_lock+0xb4>)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	011b      	lsls	r3, r3, #4
 8012202:	4413      	add	r3, r2
 8012204:	3308      	adds	r3, #8
 8012206:	681a      	ldr	r2, [r3, #0]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801220c:	429a      	cmp	r2, r3
 801220e:	d102      	bne.n	8012216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012210:	e007      	b.n	8012222 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012212:	2301      	movs	r3, #1
 8012214:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	3301      	adds	r3, #1
 801221a:	60fb      	str	r3, [r7, #12]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2b01      	cmp	r3, #1
 8012220:	d9d2      	bls.n	80121c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	2b02      	cmp	r3, #2
 8012226:	d109      	bne.n	801223c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d102      	bne.n	8012234 <chk_lock+0x80>
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	2b02      	cmp	r3, #2
 8012232:	d101      	bne.n	8012238 <chk_lock+0x84>
 8012234:	2300      	movs	r3, #0
 8012236:	e010      	b.n	801225a <chk_lock+0xa6>
 8012238:	2312      	movs	r3, #18
 801223a:	e00e      	b.n	801225a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d108      	bne.n	8012254 <chk_lock+0xa0>
 8012242:	4a09      	ldr	r2, [pc, #36]	@ (8012268 <chk_lock+0xb4>)
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	011b      	lsls	r3, r3, #4
 8012248:	4413      	add	r3, r2
 801224a:	330c      	adds	r3, #12
 801224c:	881b      	ldrh	r3, [r3, #0]
 801224e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012252:	d101      	bne.n	8012258 <chk_lock+0xa4>
 8012254:	2310      	movs	r3, #16
 8012256:	e000      	b.n	801225a <chk_lock+0xa6>
 8012258:	2300      	movs	r3, #0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3714      	adds	r7, #20
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	24002f08 	.word	0x24002f08

0801226c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012272:	2300      	movs	r3, #0
 8012274:	607b      	str	r3, [r7, #4]
 8012276:	e002      	b.n	801227e <enq_lock+0x12>
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	3301      	adds	r3, #1
 801227c:	607b      	str	r3, [r7, #4]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b01      	cmp	r3, #1
 8012282:	d806      	bhi.n	8012292 <enq_lock+0x26>
 8012284:	4a09      	ldr	r2, [pc, #36]	@ (80122ac <enq_lock+0x40>)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	011b      	lsls	r3, r3, #4
 801228a:	4413      	add	r3, r2
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1f2      	bne.n	8012278 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2b02      	cmp	r3, #2
 8012296:	bf14      	ite	ne
 8012298:	2301      	movne	r3, #1
 801229a:	2300      	moveq	r3, #0
 801229c:	b2db      	uxtb	r3, r3
}
 801229e:	4618      	mov	r0, r3
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	24002f08 	.word	0x24002f08

080122b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b085      	sub	sp, #20
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80122ba:	2300      	movs	r3, #0
 80122bc:	60fb      	str	r3, [r7, #12]
 80122be:	e01f      	b.n	8012300 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80122c0:	4a41      	ldr	r2, [pc, #260]	@ (80123c8 <inc_lock+0x118>)
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	011b      	lsls	r3, r3, #4
 80122c6:	4413      	add	r3, r2
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d113      	bne.n	80122fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80122d2:	4a3d      	ldr	r2, [pc, #244]	@ (80123c8 <inc_lock+0x118>)
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	011b      	lsls	r3, r3, #4
 80122d8:	4413      	add	r3, r2
 80122da:	3304      	adds	r3, #4
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d109      	bne.n	80122fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80122e6:	4a38      	ldr	r2, [pc, #224]	@ (80123c8 <inc_lock+0x118>)
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	011b      	lsls	r3, r3, #4
 80122ec:	4413      	add	r3, r2
 80122ee:	3308      	adds	r3, #8
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d006      	beq.n	8012308 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	3301      	adds	r3, #1
 80122fe:	60fb      	str	r3, [r7, #12]
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d9dc      	bls.n	80122c0 <inc_lock+0x10>
 8012306:	e000      	b.n	801230a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012308:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2b02      	cmp	r3, #2
 801230e:	d132      	bne.n	8012376 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012310:	2300      	movs	r3, #0
 8012312:	60fb      	str	r3, [r7, #12]
 8012314:	e002      	b.n	801231c <inc_lock+0x6c>
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	3301      	adds	r3, #1
 801231a:	60fb      	str	r3, [r7, #12]
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2b01      	cmp	r3, #1
 8012320:	d806      	bhi.n	8012330 <inc_lock+0x80>
 8012322:	4a29      	ldr	r2, [pc, #164]	@ (80123c8 <inc_lock+0x118>)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	011b      	lsls	r3, r3, #4
 8012328:	4413      	add	r3, r2
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d1f2      	bne.n	8012316 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b02      	cmp	r3, #2
 8012334:	d101      	bne.n	801233a <inc_lock+0x8a>
 8012336:	2300      	movs	r3, #0
 8012338:	e040      	b.n	80123bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	4922      	ldr	r1, [pc, #136]	@ (80123c8 <inc_lock+0x118>)
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	011b      	lsls	r3, r3, #4
 8012344:	440b      	add	r3, r1
 8012346:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	689a      	ldr	r2, [r3, #8]
 801234c:	491e      	ldr	r1, [pc, #120]	@ (80123c8 <inc_lock+0x118>)
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	011b      	lsls	r3, r3, #4
 8012352:	440b      	add	r3, r1
 8012354:	3304      	adds	r3, #4
 8012356:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	695a      	ldr	r2, [r3, #20]
 801235c:	491a      	ldr	r1, [pc, #104]	@ (80123c8 <inc_lock+0x118>)
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	011b      	lsls	r3, r3, #4
 8012362:	440b      	add	r3, r1
 8012364:	3308      	adds	r3, #8
 8012366:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012368:	4a17      	ldr	r2, [pc, #92]	@ (80123c8 <inc_lock+0x118>)
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	011b      	lsls	r3, r3, #4
 801236e:	4413      	add	r3, r2
 8012370:	330c      	adds	r3, #12
 8012372:	2200      	movs	r2, #0
 8012374:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d009      	beq.n	8012390 <inc_lock+0xe0>
 801237c:	4a12      	ldr	r2, [pc, #72]	@ (80123c8 <inc_lock+0x118>)
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	011b      	lsls	r3, r3, #4
 8012382:	4413      	add	r3, r2
 8012384:	330c      	adds	r3, #12
 8012386:	881b      	ldrh	r3, [r3, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d001      	beq.n	8012390 <inc_lock+0xe0>
 801238c:	2300      	movs	r3, #0
 801238e:	e015      	b.n	80123bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d108      	bne.n	80123a8 <inc_lock+0xf8>
 8012396:	4a0c      	ldr	r2, [pc, #48]	@ (80123c8 <inc_lock+0x118>)
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	011b      	lsls	r3, r3, #4
 801239c:	4413      	add	r3, r2
 801239e:	330c      	adds	r3, #12
 80123a0:	881b      	ldrh	r3, [r3, #0]
 80123a2:	3301      	adds	r3, #1
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	e001      	b.n	80123ac <inc_lock+0xfc>
 80123a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80123ac:	4906      	ldr	r1, [pc, #24]	@ (80123c8 <inc_lock+0x118>)
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	011b      	lsls	r3, r3, #4
 80123b2:	440b      	add	r3, r1
 80123b4:	330c      	adds	r3, #12
 80123b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	3301      	adds	r3, #1
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3714      	adds	r7, #20
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr
 80123c8:	24002f08 	.word	0x24002f08

080123cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	3b01      	subs	r3, #1
 80123d8:	607b      	str	r3, [r7, #4]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d825      	bhi.n	801242c <dec_lock+0x60>
		n = Files[i].ctr;
 80123e0:	4a17      	ldr	r2, [pc, #92]	@ (8012440 <dec_lock+0x74>)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	011b      	lsls	r3, r3, #4
 80123e6:	4413      	add	r3, r2
 80123e8:	330c      	adds	r3, #12
 80123ea:	881b      	ldrh	r3, [r3, #0]
 80123ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80123ee:	89fb      	ldrh	r3, [r7, #14]
 80123f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80123f4:	d101      	bne.n	80123fa <dec_lock+0x2e>
 80123f6:	2300      	movs	r3, #0
 80123f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80123fa:	89fb      	ldrh	r3, [r7, #14]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d002      	beq.n	8012406 <dec_lock+0x3a>
 8012400:	89fb      	ldrh	r3, [r7, #14]
 8012402:	3b01      	subs	r3, #1
 8012404:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012406:	4a0e      	ldr	r2, [pc, #56]	@ (8012440 <dec_lock+0x74>)
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	011b      	lsls	r3, r3, #4
 801240c:	4413      	add	r3, r2
 801240e:	330c      	adds	r3, #12
 8012410:	89fa      	ldrh	r2, [r7, #14]
 8012412:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012414:	89fb      	ldrh	r3, [r7, #14]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d105      	bne.n	8012426 <dec_lock+0x5a>
 801241a:	4a09      	ldr	r2, [pc, #36]	@ (8012440 <dec_lock+0x74>)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	011b      	lsls	r3, r3, #4
 8012420:	4413      	add	r3, r2
 8012422:	2200      	movs	r2, #0
 8012424:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012426:	2300      	movs	r3, #0
 8012428:	737b      	strb	r3, [r7, #13]
 801242a:	e001      	b.n	8012430 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801242c:	2302      	movs	r3, #2
 801242e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012430:	7b7b      	ldrb	r3, [r7, #13]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3714      	adds	r7, #20
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop
 8012440:	24002f08 	.word	0x24002f08

08012444 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012444:	b480      	push	{r7}
 8012446:	b085      	sub	sp, #20
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801244c:	2300      	movs	r3, #0
 801244e:	60fb      	str	r3, [r7, #12]
 8012450:	e010      	b.n	8012474 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012452:	4a0d      	ldr	r2, [pc, #52]	@ (8012488 <clear_lock+0x44>)
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	011b      	lsls	r3, r3, #4
 8012458:	4413      	add	r3, r2
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	687a      	ldr	r2, [r7, #4]
 801245e:	429a      	cmp	r2, r3
 8012460:	d105      	bne.n	801246e <clear_lock+0x2a>
 8012462:	4a09      	ldr	r2, [pc, #36]	@ (8012488 <clear_lock+0x44>)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	011b      	lsls	r3, r3, #4
 8012468:	4413      	add	r3, r2
 801246a:	2200      	movs	r2, #0
 801246c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	3301      	adds	r3, #1
 8012472:	60fb      	str	r3, [r7, #12]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2b01      	cmp	r3, #1
 8012478:	d9eb      	bls.n	8012452 <clear_lock+0xe>
	}
}
 801247a:	bf00      	nop
 801247c:	bf00      	nop
 801247e:	3714      	adds	r7, #20
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr
 8012488:	24002f08 	.word	0x24002f08

0801248c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b086      	sub	sp, #24
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012494:	2300      	movs	r3, #0
 8012496:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	78db      	ldrb	r3, [r3, #3]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d034      	beq.n	801250a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	7858      	ldrb	r0, [r3, #1]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80124b0:	2301      	movs	r3, #1
 80124b2:	697a      	ldr	r2, [r7, #20]
 80124b4:	f7ff fd0e 	bl	8011ed4 <disk_write>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d002      	beq.n	80124c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80124be:	2301      	movs	r3, #1
 80124c0:	73fb      	strb	r3, [r7, #15]
 80124c2:	e022      	b.n	801250a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	1ad2      	subs	r2, r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	69db      	ldr	r3, [r3, #28]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d217      	bcs.n	801250a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	789b      	ldrb	r3, [r3, #2]
 80124de:	613b      	str	r3, [r7, #16]
 80124e0:	e010      	b.n	8012504 <sync_window+0x78>
					wsect += fs->fsize;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	69db      	ldr	r3, [r3, #28]
 80124e6:	697a      	ldr	r2, [r7, #20]
 80124e8:	4413      	add	r3, r2
 80124ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	7858      	ldrb	r0, [r3, #1]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80124f6:	2301      	movs	r3, #1
 80124f8:	697a      	ldr	r2, [r7, #20]
 80124fa:	f7ff fceb 	bl	8011ed4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	3b01      	subs	r3, #1
 8012502:	613b      	str	r3, [r7, #16]
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	2b01      	cmp	r3, #1
 8012508:	d8eb      	bhi.n	80124e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801250a:	7bfb      	ldrb	r3, [r7, #15]
}
 801250c:	4618      	mov	r0, r3
 801250e:	3718      	adds	r7, #24
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801251e:	2300      	movs	r3, #0
 8012520:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012526:	683a      	ldr	r2, [r7, #0]
 8012528:	429a      	cmp	r2, r3
 801252a:	d01b      	beq.n	8012564 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7ff ffad 	bl	801248c <sync_window>
 8012532:	4603      	mov	r3, r0
 8012534:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012536:	7bfb      	ldrb	r3, [r7, #15]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d113      	bne.n	8012564 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	7858      	ldrb	r0, [r3, #1]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012546:	2301      	movs	r3, #1
 8012548:	683a      	ldr	r2, [r7, #0]
 801254a:	f7ff fca3 	bl	8011e94 <disk_read>
 801254e:	4603      	mov	r3, r0
 8012550:	2b00      	cmp	r3, #0
 8012552:	d004      	beq.n	801255e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012554:	f04f 33ff 	mov.w	r3, #4294967295
 8012558:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801255a:	2301      	movs	r3, #1
 801255c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	683a      	ldr	r2, [r7, #0]
 8012562:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8012564:	7bfb      	ldrb	r3, [r7, #15]
}
 8012566:	4618      	mov	r0, r3
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
	...

08012570 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f7ff ff87 	bl	801248c <sync_window>
 801257e:	4603      	mov	r3, r0
 8012580:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012582:	7bfb      	ldrb	r3, [r7, #15]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d158      	bne.n	801263a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	2b03      	cmp	r3, #3
 801258e:	d148      	bne.n	8012622 <sync_fs+0xb2>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	791b      	ldrb	r3, [r3, #4]
 8012594:	2b01      	cmp	r3, #1
 8012596:	d144      	bne.n	8012622 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	3334      	adds	r3, #52	@ 0x34
 801259c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125a0:	2100      	movs	r1, #0
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff fd78 	bl	8012098 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	3334      	adds	r3, #52	@ 0x34
 80125ac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80125b0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7ff fd07 	bl	8011fc8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	3334      	adds	r3, #52	@ 0x34
 80125be:	4921      	ldr	r1, [pc, #132]	@ (8012644 <sync_fs+0xd4>)
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7ff fd1c 	bl	8011ffe <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	3334      	adds	r3, #52	@ 0x34
 80125ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80125ce:	491e      	ldr	r1, [pc, #120]	@ (8012648 <sync_fs+0xd8>)
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7ff fd14 	bl	8011ffe <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	3334      	adds	r3, #52	@ 0x34
 80125da:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	695b      	ldr	r3, [r3, #20]
 80125e2:	4619      	mov	r1, r3
 80125e4:	4610      	mov	r0, r2
 80125e6:	f7ff fd0a 	bl	8011ffe <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	3334      	adds	r3, #52	@ 0x34
 80125ee:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	691b      	ldr	r3, [r3, #16]
 80125f6:	4619      	mov	r1, r3
 80125f8:	4610      	mov	r0, r2
 80125fa:	f7ff fd00 	bl	8011ffe <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6a1b      	ldr	r3, [r3, #32]
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	7858      	ldrb	r0, [r3, #1]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012616:	2301      	movs	r3, #1
 8012618:	f7ff fc5c 	bl	8011ed4 <disk_write>
			fs->fsi_flag = 0;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2200      	movs	r2, #0
 8012620:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	785b      	ldrb	r3, [r3, #1]
 8012626:	2200      	movs	r2, #0
 8012628:	2100      	movs	r1, #0
 801262a:	4618      	mov	r0, r3
 801262c:	f7ff fc72 	bl	8011f14 <disk_ioctl>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d001      	beq.n	801263a <sync_fs+0xca>
 8012636:	2301      	movs	r3, #1
 8012638:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801263a:	7bfb      	ldrb	r3, [r7, #15]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	41615252 	.word	0x41615252
 8012648:	61417272 	.word	0x61417272

0801264c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	3b02      	subs	r3, #2
 801265a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	699b      	ldr	r3, [r3, #24]
 8012660:	3b02      	subs	r3, #2
 8012662:	683a      	ldr	r2, [r7, #0]
 8012664:	429a      	cmp	r2, r3
 8012666:	d301      	bcc.n	801266c <clust2sect+0x20>
 8012668:	2300      	movs	r3, #0
 801266a:	e008      	b.n	801267e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	895b      	ldrh	r3, [r3, #10]
 8012670:	461a      	mov	r2, r3
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	fb03 f202 	mul.w	r2, r3, r2
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801267c:	4413      	add	r3, r2
}
 801267e:	4618      	mov	r0, r3
 8012680:	370c      	adds	r7, #12
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr

0801268a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801268a:	b580      	push	{r7, lr}
 801268c:	b086      	sub	sp, #24
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
 8012692:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	2b01      	cmp	r3, #1
 801269e:	d904      	bls.n	80126aa <get_fat+0x20>
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	699b      	ldr	r3, [r3, #24]
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d302      	bcc.n	80126b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80126aa:	2301      	movs	r3, #1
 80126ac:	617b      	str	r3, [r7, #20]
 80126ae:	e08e      	b.n	80127ce <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80126b0:	f04f 33ff 	mov.w	r3, #4294967295
 80126b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	2b03      	cmp	r3, #3
 80126bc:	d061      	beq.n	8012782 <get_fat+0xf8>
 80126be:	2b03      	cmp	r3, #3
 80126c0:	dc7b      	bgt.n	80127ba <get_fat+0x130>
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d002      	beq.n	80126cc <get_fat+0x42>
 80126c6:	2b02      	cmp	r3, #2
 80126c8:	d041      	beq.n	801274e <get_fat+0xc4>
 80126ca:	e076      	b.n	80127ba <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	60fb      	str	r3, [r7, #12]
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	085b      	lsrs	r3, r3, #1
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	4413      	add	r3, r2
 80126d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	0a5b      	lsrs	r3, r3, #9
 80126e2:	4413      	add	r3, r2
 80126e4:	4619      	mov	r1, r3
 80126e6:	6938      	ldr	r0, [r7, #16]
 80126e8:	f7ff ff14 	bl	8012514 <move_window>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d166      	bne.n	80127c0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	1c5a      	adds	r2, r3, #1
 80126f6:	60fa      	str	r2, [r7, #12]
 80126f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126fc:	693a      	ldr	r2, [r7, #16]
 80126fe:	4413      	add	r3, r2
 8012700:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012704:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	0a5b      	lsrs	r3, r3, #9
 801270e:	4413      	add	r3, r2
 8012710:	4619      	mov	r1, r3
 8012712:	6938      	ldr	r0, [r7, #16]
 8012714:	f7ff fefe 	bl	8012514 <move_window>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	d152      	bne.n	80127c4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012724:	693a      	ldr	r2, [r7, #16]
 8012726:	4413      	add	r3, r2
 8012728:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801272c:	021b      	lsls	r3, r3, #8
 801272e:	68ba      	ldr	r2, [r7, #8]
 8012730:	4313      	orrs	r3, r2
 8012732:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	f003 0301 	and.w	r3, r3, #1
 801273a:	2b00      	cmp	r3, #0
 801273c:	d002      	beq.n	8012744 <get_fat+0xba>
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	091b      	lsrs	r3, r3, #4
 8012742:	e002      	b.n	801274a <get_fat+0xc0>
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801274a:	617b      	str	r3, [r7, #20]
			break;
 801274c:	e03f      	b.n	80127ce <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	0a1b      	lsrs	r3, r3, #8
 8012756:	4413      	add	r3, r2
 8012758:	4619      	mov	r1, r3
 801275a:	6938      	ldr	r0, [r7, #16]
 801275c:	f7ff feda 	bl	8012514 <move_window>
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	d130      	bne.n	80127c8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	005b      	lsls	r3, r3, #1
 8012770:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012774:	4413      	add	r3, r2
 8012776:	4618      	mov	r0, r3
 8012778:	f7ff fbea 	bl	8011f50 <ld_word>
 801277c:	4603      	mov	r3, r0
 801277e:	617b      	str	r3, [r7, #20]
			break;
 8012780:	e025      	b.n	80127ce <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	09db      	lsrs	r3, r3, #7
 801278a:	4413      	add	r3, r2
 801278c:	4619      	mov	r1, r3
 801278e:	6938      	ldr	r0, [r7, #16]
 8012790:	f7ff fec0 	bl	8012514 <move_window>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d118      	bne.n	80127cc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80127a8:	4413      	add	r3, r2
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7ff fbe9 	bl	8011f82 <ld_dword>
 80127b0:	4603      	mov	r3, r0
 80127b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80127b6:	617b      	str	r3, [r7, #20]
			break;
 80127b8:	e009      	b.n	80127ce <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80127ba:	2301      	movs	r3, #1
 80127bc:	617b      	str	r3, [r7, #20]
 80127be:	e006      	b.n	80127ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80127c0:	bf00      	nop
 80127c2:	e004      	b.n	80127ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80127c4:	bf00      	nop
 80127c6:	e002      	b.n	80127ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80127c8:	bf00      	nop
 80127ca:	e000      	b.n	80127ce <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80127cc:	bf00      	nop
		}
	}

	return val;
 80127ce:	697b      	ldr	r3, [r7, #20]
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3718      	adds	r7, #24
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80127d8:	b590      	push	{r4, r7, lr}
 80127da:	b089      	sub	sp, #36	@ 0x24
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80127e4:	2302      	movs	r3, #2
 80127e6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	f240 80d9 	bls.w	80129a2 <put_fat+0x1ca>
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	699b      	ldr	r3, [r3, #24]
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	f080 80d3 	bcs.w	80129a2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b03      	cmp	r3, #3
 8012802:	f000 8096 	beq.w	8012932 <put_fat+0x15a>
 8012806:	2b03      	cmp	r3, #3
 8012808:	f300 80cb 	bgt.w	80129a2 <put_fat+0x1ca>
 801280c:	2b01      	cmp	r3, #1
 801280e:	d002      	beq.n	8012816 <put_fat+0x3e>
 8012810:	2b02      	cmp	r3, #2
 8012812:	d06e      	beq.n	80128f2 <put_fat+0x11a>
 8012814:	e0c5      	b.n	80129a2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	61bb      	str	r3, [r7, #24]
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	085b      	lsrs	r3, r3, #1
 801281e:	69ba      	ldr	r2, [r7, #24]
 8012820:	4413      	add	r3, r2
 8012822:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	0a5b      	lsrs	r3, r3, #9
 801282c:	4413      	add	r3, r2
 801282e:	4619      	mov	r1, r3
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f7ff fe6f 	bl	8012514 <move_window>
 8012836:	4603      	mov	r3, r0
 8012838:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801283a:	7ffb      	ldrb	r3, [r7, #31]
 801283c:	2b00      	cmp	r3, #0
 801283e:	f040 80a9 	bne.w	8012994 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	1c59      	adds	r1, r3, #1
 801284c:	61b9      	str	r1, [r7, #24]
 801284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012852:	4413      	add	r3, r2
 8012854:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	f003 0301 	and.w	r3, r3, #1
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00d      	beq.n	801287c <put_fat+0xa4>
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	b25b      	sxtb	r3, r3
 8012866:	f003 030f 	and.w	r3, r3, #15
 801286a:	b25a      	sxtb	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	b25b      	sxtb	r3, r3
 8012870:	011b      	lsls	r3, r3, #4
 8012872:	b25b      	sxtb	r3, r3
 8012874:	4313      	orrs	r3, r2
 8012876:	b25b      	sxtb	r3, r3
 8012878:	b2db      	uxtb	r3, r3
 801287a:	e001      	b.n	8012880 <put_fat+0xa8>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	b2db      	uxtb	r3, r3
 8012880:	697a      	ldr	r2, [r7, #20]
 8012882:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2201      	movs	r2, #1
 8012888:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801288e:	69bb      	ldr	r3, [r7, #24]
 8012890:	0a5b      	lsrs	r3, r3, #9
 8012892:	4413      	add	r3, r2
 8012894:	4619      	mov	r1, r3
 8012896:	68f8      	ldr	r0, [r7, #12]
 8012898:	f7ff fe3c 	bl	8012514 <move_window>
 801289c:	4603      	mov	r3, r0
 801289e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80128a0:	7ffb      	ldrb	r3, [r7, #31]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d178      	bne.n	8012998 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80128ac:	69bb      	ldr	r3, [r7, #24]
 80128ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128b2:	4413      	add	r3, r2
 80128b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	f003 0301 	and.w	r3, r3, #1
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d003      	beq.n	80128c8 <put_fat+0xf0>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	091b      	lsrs	r3, r3, #4
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	e00e      	b.n	80128e6 <put_fat+0x10e>
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	b25b      	sxtb	r3, r3
 80128ce:	f023 030f 	bic.w	r3, r3, #15
 80128d2:	b25a      	sxtb	r2, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	0a1b      	lsrs	r3, r3, #8
 80128d8:	b25b      	sxtb	r3, r3
 80128da:	f003 030f 	and.w	r3, r3, #15
 80128de:	b25b      	sxtb	r3, r3
 80128e0:	4313      	orrs	r3, r2
 80128e2:	b25b      	sxtb	r3, r3
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	697a      	ldr	r2, [r7, #20]
 80128e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2201      	movs	r2, #1
 80128ee:	70da      	strb	r2, [r3, #3]
			break;
 80128f0:	e057      	b.n	80129a2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	0a1b      	lsrs	r3, r3, #8
 80128fa:	4413      	add	r3, r2
 80128fc:	4619      	mov	r1, r3
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f7ff fe08 	bl	8012514 <move_window>
 8012904:	4603      	mov	r3, r0
 8012906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012908:	7ffb      	ldrb	r3, [r7, #31]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d146      	bne.n	801299c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801291c:	4413      	add	r3, r2
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	b292      	uxth	r2, r2
 8012922:	4611      	mov	r1, r2
 8012924:	4618      	mov	r0, r3
 8012926:	f7ff fb4f 	bl	8011fc8 <st_word>
			fs->wflag = 1;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2201      	movs	r2, #1
 801292e:	70da      	strb	r2, [r3, #3]
			break;
 8012930:	e037      	b.n	80129a2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	09db      	lsrs	r3, r3, #7
 801293a:	4413      	add	r3, r2
 801293c:	4619      	mov	r1, r3
 801293e:	68f8      	ldr	r0, [r7, #12]
 8012940:	f7ff fde8 	bl	8012514 <move_window>
 8012944:	4603      	mov	r3, r0
 8012946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012948:	7ffb      	ldrb	r3, [r7, #31]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d128      	bne.n	80129a0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012962:	4413      	add	r3, r2
 8012964:	4618      	mov	r0, r3
 8012966:	f7ff fb0c 	bl	8011f82 <ld_dword>
 801296a:	4603      	mov	r3, r0
 801296c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012970:	4323      	orrs	r3, r4
 8012972:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	009b      	lsls	r3, r3, #2
 801297e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012982:	4413      	add	r3, r2
 8012984:	6879      	ldr	r1, [r7, #4]
 8012986:	4618      	mov	r0, r3
 8012988:	f7ff fb39 	bl	8011ffe <st_dword>
			fs->wflag = 1;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2201      	movs	r2, #1
 8012990:	70da      	strb	r2, [r3, #3]
			break;
 8012992:	e006      	b.n	80129a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012994:	bf00      	nop
 8012996:	e004      	b.n	80129a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012998:	bf00      	nop
 801299a:	e002      	b.n	80129a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801299c:	bf00      	nop
 801299e:	e000      	b.n	80129a2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80129a0:	bf00      	nop
		}
	}
	return res;
 80129a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3724      	adds	r7, #36	@ 0x24
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd90      	pop	{r4, r7, pc}

080129ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b088      	sub	sp, #32
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80129b8:	2300      	movs	r3, #0
 80129ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d904      	bls.n	80129d2 <remove_chain+0x26>
 80129c8:	69bb      	ldr	r3, [r7, #24]
 80129ca:	699b      	ldr	r3, [r3, #24]
 80129cc:	68ba      	ldr	r2, [r7, #8]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d301      	bcc.n	80129d6 <remove_chain+0x2a>
 80129d2:	2302      	movs	r3, #2
 80129d4:	e04b      	b.n	8012a6e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d00c      	beq.n	80129f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80129dc:	f04f 32ff 	mov.w	r2, #4294967295
 80129e0:	6879      	ldr	r1, [r7, #4]
 80129e2:	69b8      	ldr	r0, [r7, #24]
 80129e4:	f7ff fef8 	bl	80127d8 <put_fat>
 80129e8:	4603      	mov	r3, r0
 80129ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80129ec:	7ffb      	ldrb	r3, [r7, #31]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d001      	beq.n	80129f6 <remove_chain+0x4a>
 80129f2:	7ffb      	ldrb	r3, [r7, #31]
 80129f4:	e03b      	b.n	8012a6e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80129f6:	68b9      	ldr	r1, [r7, #8]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f7ff fe46 	bl	801268a <get_fat>
 80129fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d031      	beq.n	8012a6a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d101      	bne.n	8012a10 <remove_chain+0x64>
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	e02e      	b.n	8012a6e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a16:	d101      	bne.n	8012a1c <remove_chain+0x70>
 8012a18:	2301      	movs	r3, #1
 8012a1a:	e028      	b.n	8012a6e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	68b9      	ldr	r1, [r7, #8]
 8012a20:	69b8      	ldr	r0, [r7, #24]
 8012a22:	f7ff fed9 	bl	80127d8 <put_fat>
 8012a26:	4603      	mov	r3, r0
 8012a28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012a2a:	7ffb      	ldrb	r3, [r7, #31]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d001      	beq.n	8012a34 <remove_chain+0x88>
 8012a30:	7ffb      	ldrb	r3, [r7, #31]
 8012a32:	e01c      	b.n	8012a6e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012a34:	69bb      	ldr	r3, [r7, #24]
 8012a36:	695a      	ldr	r2, [r3, #20]
 8012a38:	69bb      	ldr	r3, [r7, #24]
 8012a3a:	699b      	ldr	r3, [r3, #24]
 8012a3c:	3b02      	subs	r3, #2
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d20b      	bcs.n	8012a5a <remove_chain+0xae>
			fs->free_clst++;
 8012a42:	69bb      	ldr	r3, [r7, #24]
 8012a44:	695b      	ldr	r3, [r3, #20]
 8012a46:	1c5a      	adds	r2, r3, #1
 8012a48:	69bb      	ldr	r3, [r7, #24]
 8012a4a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012a4c:	69bb      	ldr	r3, [r7, #24]
 8012a4e:	791b      	ldrb	r3, [r3, #4]
 8012a50:	f043 0301 	orr.w	r3, r3, #1
 8012a54:	b2da      	uxtb	r2, r3
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	699b      	ldr	r3, [r3, #24]
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d3c6      	bcc.n	80129f6 <remove_chain+0x4a>
 8012a68:	e000      	b.n	8012a6c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012a6a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3720      	adds	r7, #32
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}

08012a76 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012a76:	b580      	push	{r7, lr}
 8012a78:	b088      	sub	sp, #32
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
 8012a7e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d10d      	bne.n	8012aa8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	691b      	ldr	r3, [r3, #16]
 8012a90:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d004      	beq.n	8012aa2 <create_chain+0x2c>
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	699b      	ldr	r3, [r3, #24]
 8012a9c:	69ba      	ldr	r2, [r7, #24]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d31b      	bcc.n	8012ada <create_chain+0x64>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	61bb      	str	r3, [r7, #24]
 8012aa6:	e018      	b.n	8012ada <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012aa8:	6839      	ldr	r1, [r7, #0]
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f7ff fded 	bl	801268a <get_fat>
 8012ab0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d801      	bhi.n	8012abc <create_chain+0x46>
 8012ab8:	2301      	movs	r3, #1
 8012aba:	e070      	b.n	8012b9e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac2:	d101      	bne.n	8012ac8 <create_chain+0x52>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	e06a      	b.n	8012b9e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	699b      	ldr	r3, [r3, #24]
 8012acc:	68fa      	ldr	r2, [r7, #12]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d201      	bcs.n	8012ad6 <create_chain+0x60>
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	e063      	b.n	8012b9e <create_chain+0x128>
		scl = clst;
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	699b      	ldr	r3, [r3, #24]
 8012ae8:	69fa      	ldr	r2, [r7, #28]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d307      	bcc.n	8012afe <create_chain+0x88>
				ncl = 2;
 8012aee:	2302      	movs	r3, #2
 8012af0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012af2:	69fa      	ldr	r2, [r7, #28]
 8012af4:	69bb      	ldr	r3, [r7, #24]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d901      	bls.n	8012afe <create_chain+0x88>
 8012afa:	2300      	movs	r3, #0
 8012afc:	e04f      	b.n	8012b9e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012afe:	69f9      	ldr	r1, [r7, #28]
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7ff fdc2 	bl	801268a <get_fat>
 8012b06:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d00e      	beq.n	8012b2c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d003      	beq.n	8012b1c <create_chain+0xa6>
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1a:	d101      	bne.n	8012b20 <create_chain+0xaa>
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	e03e      	b.n	8012b9e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012b20:	69fa      	ldr	r2, [r7, #28]
 8012b22:	69bb      	ldr	r3, [r7, #24]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d1da      	bne.n	8012ade <create_chain+0x68>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	e038      	b.n	8012b9e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012b2c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b32:	69f9      	ldr	r1, [r7, #28]
 8012b34:	6938      	ldr	r0, [r7, #16]
 8012b36:	f7ff fe4f 	bl	80127d8 <put_fat>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012b3e:	7dfb      	ldrb	r3, [r7, #23]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d109      	bne.n	8012b58 <create_chain+0xe2>
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d006      	beq.n	8012b58 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012b4a:	69fa      	ldr	r2, [r7, #28]
 8012b4c:	6839      	ldr	r1, [r7, #0]
 8012b4e:	6938      	ldr	r0, [r7, #16]
 8012b50:	f7ff fe42 	bl	80127d8 <put_fat>
 8012b54:	4603      	mov	r3, r0
 8012b56:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012b58:	7dfb      	ldrb	r3, [r7, #23]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d116      	bne.n	8012b8c <create_chain+0x116>
		fs->last_clst = ncl;
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	69fa      	ldr	r2, [r7, #28]
 8012b62:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	695a      	ldr	r2, [r3, #20]
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	699b      	ldr	r3, [r3, #24]
 8012b6c:	3b02      	subs	r3, #2
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d804      	bhi.n	8012b7c <create_chain+0x106>
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	695b      	ldr	r3, [r3, #20]
 8012b76:	1e5a      	subs	r2, r3, #1
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	791b      	ldrb	r3, [r3, #4]
 8012b80:	f043 0301 	orr.w	r3, r3, #1
 8012b84:	b2da      	uxtb	r2, r3
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	711a      	strb	r2, [r3, #4]
 8012b8a:	e007      	b.n	8012b9c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012b8c:	7dfb      	ldrb	r3, [r7, #23]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d102      	bne.n	8012b98 <create_chain+0x122>
 8012b92:	f04f 33ff 	mov.w	r3, #4294967295
 8012b96:	e000      	b.n	8012b9a <create_chain+0x124>
 8012b98:	2301      	movs	r3, #1
 8012b9a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012b9c:	69fb      	ldr	r3, [r7, #28]
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3720      	adds	r7, #32
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012ba6:	b480      	push	{r7}
 8012ba8:	b087      	sub	sp, #28
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bba:	3304      	adds	r3, #4
 8012bbc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	0a5b      	lsrs	r3, r3, #9
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	8952      	ldrh	r2, [r2, #10]
 8012bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8012bca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	1d1a      	adds	r2, r3, #4
 8012bd0:	613a      	str	r2, [r7, #16]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d101      	bne.n	8012be0 <clmt_clust+0x3a>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	e010      	b.n	8012c02 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012be0:	697a      	ldr	r2, [r7, #20]
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d307      	bcc.n	8012bf8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012be8:	697a      	ldr	r2, [r7, #20]
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	1ad3      	subs	r3, r2, r3
 8012bee:	617b      	str	r3, [r7, #20]
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	3304      	adds	r3, #4
 8012bf4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012bf6:	e7e9      	b.n	8012bcc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012bf8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	4413      	add	r3, r2
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	371c      	adds	r7, #28
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b086      	sub	sp, #24
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
 8012c16:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012c24:	d204      	bcs.n	8012c30 <dir_sdi+0x22>
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	f003 031f 	and.w	r3, r3, #31
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d001      	beq.n	8012c34 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012c30:	2302      	movs	r3, #2
 8012c32:	e063      	b.n	8012cfc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	683a      	ldr	r2, [r7, #0]
 8012c38:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	689b      	ldr	r3, [r3, #8]
 8012c3e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d106      	bne.n	8012c54 <dir_sdi+0x46>
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	2b02      	cmp	r3, #2
 8012c4c:	d902      	bls.n	8012c54 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c52:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d10c      	bne.n	8012c74 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	095b      	lsrs	r3, r3, #5
 8012c5e:	693a      	ldr	r2, [r7, #16]
 8012c60:	8912      	ldrh	r2, [r2, #8]
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d301      	bcc.n	8012c6a <dir_sdi+0x5c>
 8012c66:	2302      	movs	r3, #2
 8012c68:	e048      	b.n	8012cfc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	61da      	str	r2, [r3, #28]
 8012c72:	e029      	b.n	8012cc8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	895b      	ldrh	r3, [r3, #10]
 8012c78:	025b      	lsls	r3, r3, #9
 8012c7a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012c7c:	e019      	b.n	8012cb2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6979      	ldr	r1, [r7, #20]
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7ff fd01 	bl	801268a <get_fat>
 8012c88:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c90:	d101      	bne.n	8012c96 <dir_sdi+0x88>
 8012c92:	2301      	movs	r3, #1
 8012c94:	e032      	b.n	8012cfc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	2b01      	cmp	r3, #1
 8012c9a:	d904      	bls.n	8012ca6 <dir_sdi+0x98>
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	699b      	ldr	r3, [r3, #24]
 8012ca0:	697a      	ldr	r2, [r7, #20]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d301      	bcc.n	8012caa <dir_sdi+0x9c>
 8012ca6:	2302      	movs	r3, #2
 8012ca8:	e028      	b.n	8012cfc <dir_sdi+0xee>
			ofs -= csz;
 8012caa:	683a      	ldr	r2, [r7, #0]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	1ad3      	subs	r3, r2, r3
 8012cb0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012cb2:	683a      	ldr	r2, [r7, #0]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d2e1      	bcs.n	8012c7e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012cba:	6979      	ldr	r1, [r7, #20]
 8012cbc:	6938      	ldr	r0, [r7, #16]
 8012cbe:	f7ff fcc5 	bl	801264c <clust2sect>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	697a      	ldr	r2, [r7, #20]
 8012ccc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	69db      	ldr	r3, [r3, #28]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d101      	bne.n	8012cda <dir_sdi+0xcc>
 8012cd6:	2302      	movs	r3, #2
 8012cd8:	e010      	b.n	8012cfc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	69da      	ldr	r2, [r3, #28]
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	0a5b      	lsrs	r3, r3, #9
 8012ce2:	441a      	add	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cf4:	441a      	add	r2, r3
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3718      	adds	r7, #24
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b086      	sub	sp, #24
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	695b      	ldr	r3, [r3, #20]
 8012d18:	3320      	adds	r3, #32
 8012d1a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	69db      	ldr	r3, [r3, #28]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d003      	beq.n	8012d2c <dir_next+0x28>
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012d2a:	d301      	bcc.n	8012d30 <dir_next+0x2c>
 8012d2c:	2304      	movs	r3, #4
 8012d2e:	e0aa      	b.n	8012e86 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	f040 8098 	bne.w	8012e6c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	69db      	ldr	r3, [r3, #28]
 8012d40:	1c5a      	adds	r2, r3, #1
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	699b      	ldr	r3, [r3, #24]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d10b      	bne.n	8012d66 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	095b      	lsrs	r3, r3, #5
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	8912      	ldrh	r2, [r2, #8]
 8012d56:	4293      	cmp	r3, r2
 8012d58:	f0c0 8088 	bcc.w	8012e6c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	61da      	str	r2, [r3, #28]
 8012d62:	2304      	movs	r3, #4
 8012d64:	e08f      	b.n	8012e86 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	0a5b      	lsrs	r3, r3, #9
 8012d6a:	68fa      	ldr	r2, [r7, #12]
 8012d6c:	8952      	ldrh	r2, [r2, #10]
 8012d6e:	3a01      	subs	r2, #1
 8012d70:	4013      	ands	r3, r2
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d17a      	bne.n	8012e6c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	699b      	ldr	r3, [r3, #24]
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	4610      	mov	r0, r2
 8012d80:	f7ff fc83 	bl	801268a <get_fat>
 8012d84:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d801      	bhi.n	8012d90 <dir_next+0x8c>
 8012d8c:	2302      	movs	r3, #2
 8012d8e:	e07a      	b.n	8012e86 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d96:	d101      	bne.n	8012d9c <dir_next+0x98>
 8012d98:	2301      	movs	r3, #1
 8012d9a:	e074      	b.n	8012e86 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	699b      	ldr	r3, [r3, #24]
 8012da0:	697a      	ldr	r2, [r7, #20]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d358      	bcc.n	8012e58 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d104      	bne.n	8012db6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	61da      	str	r2, [r3, #28]
 8012db2:	2304      	movs	r3, #4
 8012db4:	e067      	b.n	8012e86 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	699b      	ldr	r3, [r3, #24]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	4610      	mov	r0, r2
 8012dc0:	f7ff fe59 	bl	8012a76 <create_chain>
 8012dc4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d101      	bne.n	8012dd0 <dir_next+0xcc>
 8012dcc:	2307      	movs	r3, #7
 8012dce:	e05a      	b.n	8012e86 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	2b01      	cmp	r3, #1
 8012dd4:	d101      	bne.n	8012dda <dir_next+0xd6>
 8012dd6:	2302      	movs	r3, #2
 8012dd8:	e055      	b.n	8012e86 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012de0:	d101      	bne.n	8012de6 <dir_next+0xe2>
 8012de2:	2301      	movs	r3, #1
 8012de4:	e04f      	b.n	8012e86 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012de6:	68f8      	ldr	r0, [r7, #12]
 8012de8:	f7ff fb50 	bl	801248c <sync_window>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d001      	beq.n	8012df6 <dir_next+0xf2>
 8012df2:	2301      	movs	r3, #1
 8012df4:	e047      	b.n	8012e86 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	3334      	adds	r3, #52	@ 0x34
 8012dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dfe:	2100      	movs	r1, #0
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7ff f949 	bl	8012098 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012e06:	2300      	movs	r3, #0
 8012e08:	613b      	str	r3, [r7, #16]
 8012e0a:	6979      	ldr	r1, [r7, #20]
 8012e0c:	68f8      	ldr	r0, [r7, #12]
 8012e0e:	f7ff fc1d 	bl	801264c <clust2sect>
 8012e12:	4602      	mov	r2, r0
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8012e18:	e012      	b.n	8012e40 <dir_next+0x13c>
						fs->wflag = 1;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f7ff fb33 	bl	801248c <sync_window>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d001      	beq.n	8012e30 <dir_next+0x12c>
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	e02a      	b.n	8012e86 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	3301      	adds	r3, #1
 8012e34:	613b      	str	r3, [r7, #16]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e3a:	1c5a      	adds	r2, r3, #1
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	895b      	ldrh	r3, [r3, #10]
 8012e44:	461a      	mov	r2, r3
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d3e6      	bcc.n	8012e1a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	1ad2      	subs	r2, r2, r3
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	697a      	ldr	r2, [r7, #20]
 8012e5c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012e5e:	6979      	ldr	r1, [r7, #20]
 8012e60:	68f8      	ldr	r0, [r7, #12]
 8012e62:	f7ff fbf3 	bl	801264c <clust2sect>
 8012e66:	4602      	mov	r2, r0
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	68ba      	ldr	r2, [r7, #8]
 8012e70:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e7e:	441a      	add	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012e84:	2300      	movs	r3, #0
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b086      	sub	sp, #24
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012e9e:	2100      	movs	r1, #0
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f7ff feb4 	bl	8012c0e <dir_sdi>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012eaa:	7dfb      	ldrb	r3, [r7, #23]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d12b      	bne.n	8012f08 <dir_alloc+0x7a>
		n = 0;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	69db      	ldr	r3, [r3, #28]
 8012eb8:	4619      	mov	r1, r3
 8012eba:	68f8      	ldr	r0, [r7, #12]
 8012ebc:	f7ff fb2a 	bl	8012514 <move_window>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012ec4:	7dfb      	ldrb	r3, [r7, #23]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d11d      	bne.n	8012f06 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a1b      	ldr	r3, [r3, #32]
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	2be5      	cmp	r3, #229	@ 0xe5
 8012ed2:	d004      	beq.n	8012ede <dir_alloc+0x50>
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6a1b      	ldr	r3, [r3, #32]
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d107      	bne.n	8012eee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	613b      	str	r3, [r7, #16]
 8012ee4:	693a      	ldr	r2, [r7, #16]
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d102      	bne.n	8012ef2 <dir_alloc+0x64>
 8012eec:	e00c      	b.n	8012f08 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012eee:	2300      	movs	r3, #0
 8012ef0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012ef2:	2101      	movs	r1, #1
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f7ff ff05 	bl	8012d04 <dir_next>
 8012efa:	4603      	mov	r3, r0
 8012efc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012efe:	7dfb      	ldrb	r3, [r7, #23]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d0d7      	beq.n	8012eb4 <dir_alloc+0x26>
 8012f04:	e000      	b.n	8012f08 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012f06:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012f08:	7dfb      	ldrb	r3, [r7, #23]
 8012f0a:	2b04      	cmp	r3, #4
 8012f0c:	d101      	bne.n	8012f12 <dir_alloc+0x84>
 8012f0e:	2307      	movs	r3, #7
 8012f10:	75fb      	strb	r3, [r7, #23]
	return res;
 8012f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3718      	adds	r7, #24
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b084      	sub	sp, #16
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	331a      	adds	r3, #26
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff f810 	bl	8011f50 <ld_word>
 8012f30:	4603      	mov	r3, r0
 8012f32:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	2b03      	cmp	r3, #3
 8012f3a:	d109      	bne.n	8012f50 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	3314      	adds	r3, #20
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7ff f805 	bl	8011f50 <ld_word>
 8012f46:	4603      	mov	r3, r0
 8012f48:	041b      	lsls	r3, r3, #16
 8012f4a:	68fa      	ldr	r2, [r7, #12]
 8012f4c:	4313      	orrs	r3, r2
 8012f4e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012f50:	68fb      	ldr	r3, [r7, #12]
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b084      	sub	sp, #16
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	60f8      	str	r0, [r7, #12]
 8012f62:	60b9      	str	r1, [r7, #8]
 8012f64:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	331a      	adds	r3, #26
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	b292      	uxth	r2, r2
 8012f6e:	4611      	mov	r1, r2
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7ff f829 	bl	8011fc8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2b03      	cmp	r3, #3
 8012f7c:	d109      	bne.n	8012f92 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	f103 0214 	add.w	r2, r3, #20
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	0c1b      	lsrs	r3, r3, #16
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	4610      	mov	r0, r2
 8012f8e:	f7ff f81b 	bl	8011fc8 <st_word>
	}
}
 8012f92:	bf00      	nop
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b086      	sub	sp, #24
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012fa8:	2100      	movs	r1, #0
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7ff fe2f 	bl	8012c0e <dir_sdi>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012fb4:	7dfb      	ldrb	r3, [r7, #23]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d001      	beq.n	8012fbe <dir_find+0x24>
 8012fba:	7dfb      	ldrb	r3, [r7, #23]
 8012fbc:	e03e      	b.n	801303c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	69db      	ldr	r3, [r3, #28]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	6938      	ldr	r0, [r7, #16]
 8012fc6:	f7ff faa5 	bl	8012514 <move_window>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012fce:	7dfb      	ldrb	r3, [r7, #23]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d12f      	bne.n	8013034 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6a1b      	ldr	r3, [r3, #32]
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012fdc:	7bfb      	ldrb	r3, [r7, #15]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d102      	bne.n	8012fe8 <dir_find+0x4e>
 8012fe2:	2304      	movs	r3, #4
 8012fe4:	75fb      	strb	r3, [r7, #23]
 8012fe6:	e028      	b.n	801303a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6a1b      	ldr	r3, [r3, #32]
 8012fec:	330b      	adds	r3, #11
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012ff4:	b2da      	uxtb	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6a1b      	ldr	r3, [r3, #32]
 8012ffe:	330b      	adds	r3, #11
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	f003 0308 	and.w	r3, r3, #8
 8013006:	2b00      	cmp	r3, #0
 8013008:	d10a      	bne.n	8013020 <dir_find+0x86>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6a18      	ldr	r0, [r3, #32]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	3324      	adds	r3, #36	@ 0x24
 8013012:	220b      	movs	r2, #11
 8013014:	4619      	mov	r1, r3
 8013016:	f7ff f85a 	bl	80120ce <mem_cmp>
 801301a:	4603      	mov	r3, r0
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00b      	beq.n	8013038 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013020:	2100      	movs	r1, #0
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7ff fe6e 	bl	8012d04 <dir_next>
 8013028:	4603      	mov	r3, r0
 801302a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801302c:	7dfb      	ldrb	r3, [r7, #23]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d0c5      	beq.n	8012fbe <dir_find+0x24>
 8013032:	e002      	b.n	801303a <dir_find+0xa0>
		if (res != FR_OK) break;
 8013034:	bf00      	nop
 8013036:	e000      	b.n	801303a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013038:	bf00      	nop

	return res;
 801303a:	7dfb      	ldrb	r3, [r7, #23]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3718      	adds	r7, #24
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013052:	2101      	movs	r1, #1
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f7ff ff1a 	bl	8012e8e <dir_alloc>
 801305a:	4603      	mov	r3, r0
 801305c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801305e:	7bfb      	ldrb	r3, [r7, #15]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d11c      	bne.n	801309e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	69db      	ldr	r3, [r3, #28]
 8013068:	4619      	mov	r1, r3
 801306a:	68b8      	ldr	r0, [r7, #8]
 801306c:	f7ff fa52 	bl	8012514 <move_window>
 8013070:	4603      	mov	r3, r0
 8013072:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013074:	7bfb      	ldrb	r3, [r7, #15]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d111      	bne.n	801309e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6a1b      	ldr	r3, [r3, #32]
 801307e:	2220      	movs	r2, #32
 8013080:	2100      	movs	r1, #0
 8013082:	4618      	mov	r0, r3
 8013084:	f7ff f808 	bl	8012098 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6a18      	ldr	r0, [r3, #32]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	3324      	adds	r3, #36	@ 0x24
 8013090:	220b      	movs	r2, #11
 8013092:	4619      	mov	r1, r3
 8013094:	f7fe ffdf 	bl	8012056 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	2201      	movs	r2, #1
 801309c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3710      	adds	r7, #16
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b088      	sub	sp, #32
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	60fb      	str	r3, [r7, #12]
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	3324      	adds	r3, #36	@ 0x24
 80130bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80130be:	220b      	movs	r2, #11
 80130c0:	2120      	movs	r1, #32
 80130c2:	68b8      	ldr	r0, [r7, #8]
 80130c4:	f7fe ffe8 	bl	8012098 <mem_set>
	si = i = 0; ni = 8;
 80130c8:	2300      	movs	r3, #0
 80130ca:	613b      	str	r3, [r7, #16]
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	61fb      	str	r3, [r7, #28]
 80130d0:	2308      	movs	r3, #8
 80130d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	1c5a      	adds	r2, r3, #1
 80130d8:	61fa      	str	r2, [r7, #28]
 80130da:	68fa      	ldr	r2, [r7, #12]
 80130dc:	4413      	add	r3, r2
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80130e2:	7efb      	ldrb	r3, [r7, #27]
 80130e4:	2b20      	cmp	r3, #32
 80130e6:	d94e      	bls.n	8013186 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80130e8:	7efb      	ldrb	r3, [r7, #27]
 80130ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80130ec:	d006      	beq.n	80130fc <create_name+0x54>
 80130ee:	7efb      	ldrb	r3, [r7, #27]
 80130f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80130f2:	d110      	bne.n	8013116 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80130f4:	e002      	b.n	80130fc <create_name+0x54>
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	3301      	adds	r3, #1
 80130fa:	61fb      	str	r3, [r7, #28]
 80130fc:	68fa      	ldr	r2, [r7, #12]
 80130fe:	69fb      	ldr	r3, [r7, #28]
 8013100:	4413      	add	r3, r2
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	2b2f      	cmp	r3, #47	@ 0x2f
 8013106:	d0f6      	beq.n	80130f6 <create_name+0x4e>
 8013108:	68fa      	ldr	r2, [r7, #12]
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	4413      	add	r3, r2
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	2b5c      	cmp	r3, #92	@ 0x5c
 8013112:	d0f0      	beq.n	80130f6 <create_name+0x4e>
			break;
 8013114:	e038      	b.n	8013188 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013116:	7efb      	ldrb	r3, [r7, #27]
 8013118:	2b2e      	cmp	r3, #46	@ 0x2e
 801311a:	d003      	beq.n	8013124 <create_name+0x7c>
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	429a      	cmp	r2, r3
 8013122:	d30c      	bcc.n	801313e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	2b0b      	cmp	r3, #11
 8013128:	d002      	beq.n	8013130 <create_name+0x88>
 801312a:	7efb      	ldrb	r3, [r7, #27]
 801312c:	2b2e      	cmp	r3, #46	@ 0x2e
 801312e:	d001      	beq.n	8013134 <create_name+0x8c>
 8013130:	2306      	movs	r3, #6
 8013132:	e044      	b.n	80131be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013134:	2308      	movs	r3, #8
 8013136:	613b      	str	r3, [r7, #16]
 8013138:	230b      	movs	r3, #11
 801313a:	617b      	str	r3, [r7, #20]
			continue;
 801313c:	e022      	b.n	8013184 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801313e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013142:	2b00      	cmp	r3, #0
 8013144:	da04      	bge.n	8013150 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013146:	7efb      	ldrb	r3, [r7, #27]
 8013148:	3b80      	subs	r3, #128	@ 0x80
 801314a:	4a1f      	ldr	r2, [pc, #124]	@ (80131c8 <create_name+0x120>)
 801314c:	5cd3      	ldrb	r3, [r2, r3]
 801314e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013150:	7efb      	ldrb	r3, [r7, #27]
 8013152:	4619      	mov	r1, r3
 8013154:	481d      	ldr	r0, [pc, #116]	@ (80131cc <create_name+0x124>)
 8013156:	f7fe ffe1 	bl	801211c <chk_chr>
 801315a:	4603      	mov	r3, r0
 801315c:	2b00      	cmp	r3, #0
 801315e:	d001      	beq.n	8013164 <create_name+0xbc>
 8013160:	2306      	movs	r3, #6
 8013162:	e02c      	b.n	80131be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013164:	7efb      	ldrb	r3, [r7, #27]
 8013166:	2b60      	cmp	r3, #96	@ 0x60
 8013168:	d905      	bls.n	8013176 <create_name+0xce>
 801316a:	7efb      	ldrb	r3, [r7, #27]
 801316c:	2b7a      	cmp	r3, #122	@ 0x7a
 801316e:	d802      	bhi.n	8013176 <create_name+0xce>
 8013170:	7efb      	ldrb	r3, [r7, #27]
 8013172:	3b20      	subs	r3, #32
 8013174:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	1c5a      	adds	r2, r3, #1
 801317a:	613a      	str	r2, [r7, #16]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	4413      	add	r3, r2
 8013180:	7efa      	ldrb	r2, [r7, #27]
 8013182:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013184:	e7a6      	b.n	80130d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013186:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	441a      	add	r2, r3
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d101      	bne.n	801319c <create_name+0xf4>
 8013198:	2306      	movs	r3, #6
 801319a:	e010      	b.n	80131be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	2be5      	cmp	r3, #229	@ 0xe5
 80131a2:	d102      	bne.n	80131aa <create_name+0x102>
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	2205      	movs	r2, #5
 80131a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80131aa:	7efb      	ldrb	r3, [r7, #27]
 80131ac:	2b20      	cmp	r3, #32
 80131ae:	d801      	bhi.n	80131b4 <create_name+0x10c>
 80131b0:	2204      	movs	r2, #4
 80131b2:	e000      	b.n	80131b6 <create_name+0x10e>
 80131b4:	2200      	movs	r2, #0
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	330b      	adds	r3, #11
 80131ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80131bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3720      	adds	r7, #32
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	0801838c 	.word	0x0801838c
 80131cc:	080182b8 	.word	0x080182b8

080131d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80131e4:	e002      	b.n	80131ec <follow_path+0x1c>
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	3301      	adds	r3, #1
 80131ea:	603b      	str	r3, [r7, #0]
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80131f2:	d0f8      	beq.n	80131e6 <follow_path+0x16>
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80131fa:	d0f4      	beq.n	80131e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	2200      	movs	r2, #0
 8013200:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	2b1f      	cmp	r3, #31
 8013208:	d80a      	bhi.n	8013220 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2280      	movs	r2, #128	@ 0x80
 801320e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8013212:	2100      	movs	r1, #0
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7ff fcfa 	bl	8012c0e <dir_sdi>
 801321a:	4603      	mov	r3, r0
 801321c:	75fb      	strb	r3, [r7, #23]
 801321e:	e043      	b.n	80132a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013220:	463b      	mov	r3, r7
 8013222:	4619      	mov	r1, r3
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7ff ff3f 	bl	80130a8 <create_name>
 801322a:	4603      	mov	r3, r0
 801322c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801322e:	7dfb      	ldrb	r3, [r7, #23]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d134      	bne.n	801329e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7ff feb0 	bl	8012f9a <dir_find>
 801323a:	4603      	mov	r3, r0
 801323c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013244:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013246:	7dfb      	ldrb	r3, [r7, #23]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00a      	beq.n	8013262 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801324c:	7dfb      	ldrb	r3, [r7, #23]
 801324e:	2b04      	cmp	r3, #4
 8013250:	d127      	bne.n	80132a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013252:	7afb      	ldrb	r3, [r7, #11]
 8013254:	f003 0304 	and.w	r3, r3, #4
 8013258:	2b00      	cmp	r3, #0
 801325a:	d122      	bne.n	80132a2 <follow_path+0xd2>
 801325c:	2305      	movs	r3, #5
 801325e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013260:	e01f      	b.n	80132a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013262:	7afb      	ldrb	r3, [r7, #11]
 8013264:	f003 0304 	and.w	r3, r3, #4
 8013268:	2b00      	cmp	r3, #0
 801326a:	d11c      	bne.n	80132a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	799b      	ldrb	r3, [r3, #6]
 8013270:	f003 0310 	and.w	r3, r3, #16
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013278:	2305      	movs	r3, #5
 801327a:	75fb      	strb	r3, [r7, #23]
 801327c:	e014      	b.n	80132a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	695b      	ldr	r3, [r3, #20]
 8013288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801328c:	4413      	add	r3, r2
 801328e:	4619      	mov	r1, r3
 8013290:	68f8      	ldr	r0, [r7, #12]
 8013292:	f7ff fe43 	bl	8012f1c <ld_clust>
 8013296:	4602      	mov	r2, r0
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801329c:	e7c0      	b.n	8013220 <follow_path+0x50>
			if (res != FR_OK) break;
 801329e:	bf00      	nop
 80132a0:	e002      	b.n	80132a8 <follow_path+0xd8>
				break;
 80132a2:	bf00      	nop
 80132a4:	e000      	b.n	80132a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80132a6:	bf00      	nop
			}
		}
	}

	return res;
 80132a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3718      	adds	r7, #24
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80132b2:	b480      	push	{r7}
 80132b4:	b087      	sub	sp, #28
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80132ba:	f04f 33ff 	mov.w	r3, #4294967295
 80132be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d031      	beq.n	801332c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	617b      	str	r3, [r7, #20]
 80132ce:	e002      	b.n	80132d6 <get_ldnumber+0x24>
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	3301      	adds	r3, #1
 80132d4:	617b      	str	r3, [r7, #20]
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	2b20      	cmp	r3, #32
 80132dc:	d903      	bls.n	80132e6 <get_ldnumber+0x34>
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	781b      	ldrb	r3, [r3, #0]
 80132e2:	2b3a      	cmp	r3, #58	@ 0x3a
 80132e4:	d1f4      	bne.n	80132d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80132ec:	d11c      	bne.n	8013328 <get_ldnumber+0x76>
			tp = *path;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	1c5a      	adds	r2, r3, #1
 80132f8:	60fa      	str	r2, [r7, #12]
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	3b30      	subs	r3, #48	@ 0x30
 80132fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	2b09      	cmp	r3, #9
 8013304:	d80e      	bhi.n	8013324 <get_ldnumber+0x72>
 8013306:	68fa      	ldr	r2, [r7, #12]
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	429a      	cmp	r2, r3
 801330c:	d10a      	bne.n	8013324 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d107      	bne.n	8013324 <get_ldnumber+0x72>
					vol = (int)i;
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	3301      	adds	r3, #1
 801331c:	617b      	str	r3, [r7, #20]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	697a      	ldr	r2, [r7, #20]
 8013322:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	e002      	b.n	801332e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013328:	2300      	movs	r3, #0
 801332a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801332c:	693b      	ldr	r3, [r7, #16]
}
 801332e:	4618      	mov	r0, r3
 8013330:	371c      	adds	r7, #28
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr
	...

0801333c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2200      	movs	r2, #0
 801334a:	70da      	strb	r2, [r3, #3]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f04f 32ff 	mov.w	r2, #4294967295
 8013352:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff f8dc 	bl	8012514 <move_window>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d001      	beq.n	8013366 <check_fs+0x2a>
 8013362:	2304      	movs	r3, #4
 8013364:	e038      	b.n	80133d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	3334      	adds	r3, #52	@ 0x34
 801336a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801336e:	4618      	mov	r0, r3
 8013370:	f7fe fdee 	bl	8011f50 <ld_word>
 8013374:	4603      	mov	r3, r0
 8013376:	461a      	mov	r2, r3
 8013378:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801337c:	429a      	cmp	r2, r3
 801337e:	d001      	beq.n	8013384 <check_fs+0x48>
 8013380:	2303      	movs	r3, #3
 8013382:	e029      	b.n	80133d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801338a:	2be9      	cmp	r3, #233	@ 0xe9
 801338c:	d009      	beq.n	80133a2 <check_fs+0x66>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013394:	2beb      	cmp	r3, #235	@ 0xeb
 8013396:	d11e      	bne.n	80133d6 <check_fs+0x9a>
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801339e:	2b90      	cmp	r3, #144	@ 0x90
 80133a0:	d119      	bne.n	80133d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	3334      	adds	r3, #52	@ 0x34
 80133a6:	3336      	adds	r3, #54	@ 0x36
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fe fdea 	bl	8011f82 <ld_dword>
 80133ae:	4603      	mov	r3, r0
 80133b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80133b4:	4a0a      	ldr	r2, [pc, #40]	@ (80133e0 <check_fs+0xa4>)
 80133b6:	4293      	cmp	r3, r2
 80133b8:	d101      	bne.n	80133be <check_fs+0x82>
 80133ba:	2300      	movs	r3, #0
 80133bc:	e00c      	b.n	80133d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	3334      	adds	r3, #52	@ 0x34
 80133c2:	3352      	adds	r3, #82	@ 0x52
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7fe fddc 	bl	8011f82 <ld_dword>
 80133ca:	4603      	mov	r3, r0
 80133cc:	4a05      	ldr	r2, [pc, #20]	@ (80133e4 <check_fs+0xa8>)
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d101      	bne.n	80133d6 <check_fs+0x9a>
 80133d2:	2300      	movs	r3, #0
 80133d4:	e000      	b.n	80133d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80133d6:	2302      	movs	r3, #2
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	00544146 	.word	0x00544146
 80133e4:	33544146 	.word	0x33544146

080133e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b096      	sub	sp, #88	@ 0x58
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	60f8      	str	r0, [r7, #12]
 80133f0:	60b9      	str	r1, [r7, #8]
 80133f2:	4613      	mov	r3, r2
 80133f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	2200      	movs	r2, #0
 80133fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f7ff ff58 	bl	80132b2 <get_ldnumber>
 8013402:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013406:	2b00      	cmp	r3, #0
 8013408:	da01      	bge.n	801340e <find_volume+0x26>
 801340a:	230b      	movs	r3, #11
 801340c:	e235      	b.n	801387a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801340e:	4aa5      	ldr	r2, [pc, #660]	@ (80136a4 <find_volume+0x2bc>)
 8013410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013416:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341a:	2b00      	cmp	r3, #0
 801341c:	d101      	bne.n	8013422 <find_volume+0x3a>
 801341e:	230c      	movs	r3, #12
 8013420:	e22b      	b.n	801387a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8013422:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013424:	f7fe fe95 	bl	8012152 <lock_fs>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d101      	bne.n	8013432 <find_volume+0x4a>
 801342e:	230f      	movs	r3, #15
 8013430:	e223      	b.n	801387a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013436:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013438:	79fb      	ldrb	r3, [r7, #7]
 801343a:	f023 0301 	bic.w	r3, r3, #1
 801343e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d01a      	beq.n	801347e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801344a:	785b      	ldrb	r3, [r3, #1]
 801344c:	4618      	mov	r0, r3
 801344e:	f7fe fcdf 	bl	8011e10 <disk_status>
 8013452:	4603      	mov	r3, r0
 8013454:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013458:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801345c:	f003 0301 	and.w	r3, r3, #1
 8013460:	2b00      	cmp	r3, #0
 8013462:	d10c      	bne.n	801347e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d007      	beq.n	801347a <find_volume+0x92>
 801346a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801346e:	f003 0304 	and.w	r3, r3, #4
 8013472:	2b00      	cmp	r3, #0
 8013474:	d001      	beq.n	801347a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013476:	230a      	movs	r3, #10
 8013478:	e1ff      	b.n	801387a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 801347a:	2300      	movs	r3, #0
 801347c:	e1fd      	b.n	801387a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013480:	2200      	movs	r2, #0
 8013482:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013486:	b2da      	uxtb	r2, r3
 8013488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801348a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801348c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801348e:	785b      	ldrb	r3, [r3, #1]
 8013490:	4618      	mov	r0, r3
 8013492:	f7fe fcd7 	bl	8011e44 <disk_initialize>
 8013496:	4603      	mov	r3, r0
 8013498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801349c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80134a0:	f003 0301 	and.w	r3, r3, #1
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d001      	beq.n	80134ac <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80134a8:	2303      	movs	r3, #3
 80134aa:	e1e6      	b.n	801387a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80134ac:	79fb      	ldrb	r3, [r7, #7]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d007      	beq.n	80134c2 <find_volume+0xda>
 80134b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80134b6:	f003 0304 	and.w	r3, r3, #4
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d001      	beq.n	80134c2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80134be:	230a      	movs	r3, #10
 80134c0:	e1db      	b.n	801387a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80134c2:	2300      	movs	r3, #0
 80134c4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80134c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80134c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80134ca:	f7ff ff37 	bl	801333c <check_fs>
 80134ce:	4603      	mov	r3, r0
 80134d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80134d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80134d8:	2b02      	cmp	r3, #2
 80134da:	d149      	bne.n	8013570 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80134dc:	2300      	movs	r3, #0
 80134de:	643b      	str	r3, [r7, #64]	@ 0x40
 80134e0:	e01e      	b.n	8013520 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80134e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80134e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80134ea:	011b      	lsls	r3, r3, #4
 80134ec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80134f0:	4413      	add	r3, r2
 80134f2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80134f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f6:	3304      	adds	r3, #4
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d006      	beq.n	801350c <find_volume+0x124>
 80134fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013500:	3308      	adds	r3, #8
 8013502:	4618      	mov	r0, r3
 8013504:	f7fe fd3d 	bl	8011f82 <ld_dword>
 8013508:	4602      	mov	r2, r0
 801350a:	e000      	b.n	801350e <find_volume+0x126>
 801350c:	2200      	movs	r2, #0
 801350e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	3358      	adds	r3, #88	@ 0x58
 8013514:	443b      	add	r3, r7
 8013516:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801351a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801351c:	3301      	adds	r3, #1
 801351e:	643b      	str	r3, [r7, #64]	@ 0x40
 8013520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013522:	2b03      	cmp	r3, #3
 8013524:	d9dd      	bls.n	80134e2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013526:	2300      	movs	r3, #0
 8013528:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801352a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801352c:	2b00      	cmp	r3, #0
 801352e:	d002      	beq.n	8013536 <find_volume+0x14e>
 8013530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013532:	3b01      	subs	r3, #1
 8013534:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	3358      	adds	r3, #88	@ 0x58
 801353c:	443b      	add	r3, r7
 801353e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013542:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013546:	2b00      	cmp	r3, #0
 8013548:	d005      	beq.n	8013556 <find_volume+0x16e>
 801354a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801354c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801354e:	f7ff fef5 	bl	801333c <check_fs>
 8013552:	4603      	mov	r3, r0
 8013554:	e000      	b.n	8013558 <find_volume+0x170>
 8013556:	2303      	movs	r3, #3
 8013558:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801355c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013560:	2b01      	cmp	r3, #1
 8013562:	d905      	bls.n	8013570 <find_volume+0x188>
 8013564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013566:	3301      	adds	r3, #1
 8013568:	643b      	str	r3, [r7, #64]	@ 0x40
 801356a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801356c:	2b03      	cmp	r3, #3
 801356e:	d9e2      	bls.n	8013536 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013570:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013574:	2b04      	cmp	r3, #4
 8013576:	d101      	bne.n	801357c <find_volume+0x194>
 8013578:	2301      	movs	r3, #1
 801357a:	e17e      	b.n	801387a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801357c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013580:	2b01      	cmp	r3, #1
 8013582:	d901      	bls.n	8013588 <find_volume+0x1a0>
 8013584:	230d      	movs	r3, #13
 8013586:	e178      	b.n	801387a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801358a:	3334      	adds	r3, #52	@ 0x34
 801358c:	330b      	adds	r3, #11
 801358e:	4618      	mov	r0, r3
 8013590:	f7fe fcde 	bl	8011f50 <ld_word>
 8013594:	4603      	mov	r3, r0
 8013596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801359a:	d001      	beq.n	80135a0 <find_volume+0x1b8>
 801359c:	230d      	movs	r3, #13
 801359e:	e16c      	b.n	801387a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80135a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a2:	3334      	adds	r3, #52	@ 0x34
 80135a4:	3316      	adds	r3, #22
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fe fcd2 	bl	8011f50 <ld_word>
 80135ac:	4603      	mov	r3, r0
 80135ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80135b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d106      	bne.n	80135c4 <find_volume+0x1dc>
 80135b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b8:	3334      	adds	r3, #52	@ 0x34
 80135ba:	3324      	adds	r3, #36	@ 0x24
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fe fce0 	bl	8011f82 <ld_dword>
 80135c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80135c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80135c8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80135ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135cc:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80135d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80135d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d6:	789b      	ldrb	r3, [r3, #2]
 80135d8:	2b01      	cmp	r3, #1
 80135da:	d005      	beq.n	80135e8 <find_volume+0x200>
 80135dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135de:	789b      	ldrb	r3, [r3, #2]
 80135e0:	2b02      	cmp	r3, #2
 80135e2:	d001      	beq.n	80135e8 <find_volume+0x200>
 80135e4:	230d      	movs	r3, #13
 80135e6:	e148      	b.n	801387a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80135e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ea:	789b      	ldrb	r3, [r3, #2]
 80135ec:	461a      	mov	r2, r3
 80135ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135f0:	fb02 f303 	mul.w	r3, r2, r3
 80135f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80135f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80135fc:	461a      	mov	r2, r3
 80135fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013600:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013604:	895b      	ldrh	r3, [r3, #10]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d008      	beq.n	801361c <find_volume+0x234>
 801360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801360c:	895b      	ldrh	r3, [r3, #10]
 801360e:	461a      	mov	r2, r3
 8013610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013612:	895b      	ldrh	r3, [r3, #10]
 8013614:	3b01      	subs	r3, #1
 8013616:	4013      	ands	r3, r2
 8013618:	2b00      	cmp	r3, #0
 801361a:	d001      	beq.n	8013620 <find_volume+0x238>
 801361c:	230d      	movs	r3, #13
 801361e:	e12c      	b.n	801387a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013622:	3334      	adds	r3, #52	@ 0x34
 8013624:	3311      	adds	r3, #17
 8013626:	4618      	mov	r0, r3
 8013628:	f7fe fc92 	bl	8011f50 <ld_word>
 801362c:	4603      	mov	r3, r0
 801362e:	461a      	mov	r2, r3
 8013630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013632:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013636:	891b      	ldrh	r3, [r3, #8]
 8013638:	f003 030f 	and.w	r3, r3, #15
 801363c:	b29b      	uxth	r3, r3
 801363e:	2b00      	cmp	r3, #0
 8013640:	d001      	beq.n	8013646 <find_volume+0x25e>
 8013642:	230d      	movs	r3, #13
 8013644:	e119      	b.n	801387a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013648:	3334      	adds	r3, #52	@ 0x34
 801364a:	3313      	adds	r3, #19
 801364c:	4618      	mov	r0, r3
 801364e:	f7fe fc7f 	bl	8011f50 <ld_word>
 8013652:	4603      	mov	r3, r0
 8013654:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013658:	2b00      	cmp	r3, #0
 801365a:	d106      	bne.n	801366a <find_volume+0x282>
 801365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801365e:	3334      	adds	r3, #52	@ 0x34
 8013660:	3320      	adds	r3, #32
 8013662:	4618      	mov	r0, r3
 8013664:	f7fe fc8d 	bl	8011f82 <ld_dword>
 8013668:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366c:	3334      	adds	r3, #52	@ 0x34
 801366e:	330e      	adds	r3, #14
 8013670:	4618      	mov	r0, r3
 8013672:	f7fe fc6d 	bl	8011f50 <ld_word>
 8013676:	4603      	mov	r3, r0
 8013678:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801367a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801367c:	2b00      	cmp	r3, #0
 801367e:	d101      	bne.n	8013684 <find_volume+0x29c>
 8013680:	230d      	movs	r3, #13
 8013682:	e0fa      	b.n	801387a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013684:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013688:	4413      	add	r3, r2
 801368a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801368c:	8912      	ldrh	r2, [r2, #8]
 801368e:	0912      	lsrs	r2, r2, #4
 8013690:	b292      	uxth	r2, r2
 8013692:	4413      	add	r3, r2
 8013694:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801369a:	429a      	cmp	r2, r3
 801369c:	d204      	bcs.n	80136a8 <find_volume+0x2c0>
 801369e:	230d      	movs	r3, #13
 80136a0:	e0eb      	b.n	801387a <find_volume+0x492>
 80136a2:	bf00      	nop
 80136a4:	24002f00 	.word	0x24002f00
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80136a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80136aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80136b0:	8952      	ldrh	r2, [r2, #10]
 80136b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80136b6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80136b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d101      	bne.n	80136c2 <find_volume+0x2da>
 80136be:	230d      	movs	r3, #13
 80136c0:	e0db      	b.n	801387a <find_volume+0x492>
		fmt = FS_FAT32;
 80136c2:	2303      	movs	r3, #3
 80136c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80136c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ca:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80136ce:	4293      	cmp	r3, r2
 80136d0:	d802      	bhi.n	80136d8 <find_volume+0x2f0>
 80136d2:	2302      	movs	r3, #2
 80136d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80136d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136da:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80136de:	4293      	cmp	r3, r2
 80136e0:	d802      	bhi.n	80136e8 <find_volume+0x300>
 80136e2:	2301      	movs	r3, #1
 80136e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80136e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ea:	1c9a      	adds	r2, r3, #2
 80136ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ee:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80136f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80136f4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80136f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80136f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136fa:	441a      	add	r2, r3
 80136fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136fe:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8013700:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013704:	441a      	add	r2, r3
 8013706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013708:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801370a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801370e:	2b03      	cmp	r3, #3
 8013710:	d11e      	bne.n	8013750 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013714:	3334      	adds	r3, #52	@ 0x34
 8013716:	332a      	adds	r3, #42	@ 0x2a
 8013718:	4618      	mov	r0, r3
 801371a:	f7fe fc19 	bl	8011f50 <ld_word>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d001      	beq.n	8013728 <find_volume+0x340>
 8013724:	230d      	movs	r3, #13
 8013726:	e0a8      	b.n	801387a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372a:	891b      	ldrh	r3, [r3, #8]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d001      	beq.n	8013734 <find_volume+0x34c>
 8013730:	230d      	movs	r3, #13
 8013732:	e0a2      	b.n	801387a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013736:	3334      	adds	r3, #52	@ 0x34
 8013738:	332c      	adds	r3, #44	@ 0x2c
 801373a:	4618      	mov	r0, r3
 801373c:	f7fe fc21 	bl	8011f82 <ld_dword>
 8013740:	4602      	mov	r2, r0
 8013742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013744:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013748:	699b      	ldr	r3, [r3, #24]
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	647b      	str	r3, [r7, #68]	@ 0x44
 801374e:	e01f      	b.n	8013790 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013752:	891b      	ldrh	r3, [r3, #8]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d101      	bne.n	801375c <find_volume+0x374>
 8013758:	230d      	movs	r3, #13
 801375a:	e08e      	b.n	801387a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801375e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013762:	441a      	add	r2, r3
 8013764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013766:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801376c:	2b02      	cmp	r3, #2
 801376e:	d103      	bne.n	8013778 <find_volume+0x390>
 8013770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013772:	699b      	ldr	r3, [r3, #24]
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	e00a      	b.n	801378e <find_volume+0x3a6>
 8013778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801377a:	699a      	ldr	r2, [r3, #24]
 801377c:	4613      	mov	r3, r2
 801377e:	005b      	lsls	r3, r3, #1
 8013780:	4413      	add	r3, r2
 8013782:	085a      	lsrs	r2, r3, #1
 8013784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013786:	699b      	ldr	r3, [r3, #24]
 8013788:	f003 0301 	and.w	r3, r3, #1
 801378c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801378e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013792:	69da      	ldr	r2, [r3, #28]
 8013794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013796:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801379a:	0a5b      	lsrs	r3, r3, #9
 801379c:	429a      	cmp	r2, r3
 801379e:	d201      	bcs.n	80137a4 <find_volume+0x3bc>
 80137a0:	230d      	movs	r3, #13
 80137a2:	e06a      	b.n	801387a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80137a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a6:	f04f 32ff 	mov.w	r2, #4294967295
 80137aa:	615a      	str	r2, [r3, #20]
 80137ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ae:	695a      	ldr	r2, [r3, #20]
 80137b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80137b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b6:	2280      	movs	r2, #128	@ 0x80
 80137b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80137ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137be:	2b03      	cmp	r3, #3
 80137c0:	d149      	bne.n	8013856 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80137c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c4:	3334      	adds	r3, #52	@ 0x34
 80137c6:	3330      	adds	r3, #48	@ 0x30
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7fe fbc1 	bl	8011f50 <ld_word>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d140      	bne.n	8013856 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80137d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137d6:	3301      	adds	r3, #1
 80137d8:	4619      	mov	r1, r3
 80137da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80137dc:	f7fe fe9a 	bl	8012514 <move_window>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d137      	bne.n	8013856 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80137e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e8:	2200      	movs	r2, #0
 80137ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80137ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ee:	3334      	adds	r3, #52	@ 0x34
 80137f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7fe fbab 	bl	8011f50 <ld_word>
 80137fa:	4603      	mov	r3, r0
 80137fc:	461a      	mov	r2, r3
 80137fe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013802:	429a      	cmp	r2, r3
 8013804:	d127      	bne.n	8013856 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013808:	3334      	adds	r3, #52	@ 0x34
 801380a:	4618      	mov	r0, r3
 801380c:	f7fe fbb9 	bl	8011f82 <ld_dword>
 8013810:	4603      	mov	r3, r0
 8013812:	4a1c      	ldr	r2, [pc, #112]	@ (8013884 <find_volume+0x49c>)
 8013814:	4293      	cmp	r3, r2
 8013816:	d11e      	bne.n	8013856 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801381a:	3334      	adds	r3, #52	@ 0x34
 801381c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013820:	4618      	mov	r0, r3
 8013822:	f7fe fbae 	bl	8011f82 <ld_dword>
 8013826:	4603      	mov	r3, r0
 8013828:	4a17      	ldr	r2, [pc, #92]	@ (8013888 <find_volume+0x4a0>)
 801382a:	4293      	cmp	r3, r2
 801382c:	d113      	bne.n	8013856 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013830:	3334      	adds	r3, #52	@ 0x34
 8013832:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013836:	4618      	mov	r0, r3
 8013838:	f7fe fba3 	bl	8011f82 <ld_dword>
 801383c:	4602      	mov	r2, r0
 801383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013840:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013844:	3334      	adds	r3, #52	@ 0x34
 8013846:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe fb99 	bl	8011f82 <ld_dword>
 8013850:	4602      	mov	r2, r0
 8013852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013854:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013858:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801385c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801385e:	4b0b      	ldr	r3, [pc, #44]	@ (801388c <find_volume+0x4a4>)
 8013860:	881b      	ldrh	r3, [r3, #0]
 8013862:	3301      	adds	r3, #1
 8013864:	b29a      	uxth	r2, r3
 8013866:	4b09      	ldr	r3, [pc, #36]	@ (801388c <find_volume+0x4a4>)
 8013868:	801a      	strh	r2, [r3, #0]
 801386a:	4b08      	ldr	r3, [pc, #32]	@ (801388c <find_volume+0x4a4>)
 801386c:	881a      	ldrh	r2, [r3, #0]
 801386e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013870:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013872:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013874:	f7fe fde6 	bl	8012444 <clear_lock>
#endif
	return FR_OK;
 8013878:	2300      	movs	r3, #0
}
 801387a:	4618      	mov	r0, r3
 801387c:	3758      	adds	r7, #88	@ 0x58
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	41615252 	.word	0x41615252
 8013888:	61417272 	.word	0x61417272
 801388c:	24002f04 	.word	0x24002f04

08013890 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b084      	sub	sp, #16
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801389a:	2309      	movs	r3, #9
 801389c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d02e      	beq.n	8013902 <validate+0x72>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d02a      	beq.n	8013902 <validate+0x72>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d025      	beq.n	8013902 <validate+0x72>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	889a      	ldrh	r2, [r3, #4]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	88db      	ldrh	r3, [r3, #6]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d11e      	bne.n	8013902 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7fe fc42 	bl	8012152 <lock_fs>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d014      	beq.n	80138fe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	785b      	ldrb	r3, [r3, #1]
 80138da:	4618      	mov	r0, r3
 80138dc:	f7fe fa98 	bl	8011e10 <disk_status>
 80138e0:	4603      	mov	r3, r0
 80138e2:	f003 0301 	and.w	r3, r3, #1
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d102      	bne.n	80138f0 <validate+0x60>
				res = FR_OK;
 80138ea:	2300      	movs	r3, #0
 80138ec:	73fb      	strb	r3, [r7, #15]
 80138ee:	e008      	b.n	8013902 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2100      	movs	r1, #0
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fe fc41 	bl	801217e <unlock_fs>
 80138fc:	e001      	b.n	8013902 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80138fe:	230f      	movs	r3, #15
 8013900:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013902:	7bfb      	ldrb	r3, [r7, #15]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d102      	bne.n	801390e <validate+0x7e>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	e000      	b.n	8013910 <validate+0x80>
 801390e:	2300      	movs	r3, #0
 8013910:	683a      	ldr	r2, [r7, #0]
 8013912:	6013      	str	r3, [r2, #0]
	return res;
 8013914:	7bfb      	ldrb	r3, [r7, #15]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3710      	adds	r7, #16
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
	...

08013920 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b088      	sub	sp, #32
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	4613      	mov	r3, r2
 801392c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013932:	f107 0310 	add.w	r3, r7, #16
 8013936:	4618      	mov	r0, r3
 8013938:	f7ff fcbb 	bl	80132b2 <get_ldnumber>
 801393c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	2b00      	cmp	r3, #0
 8013942:	da01      	bge.n	8013948 <f_mount+0x28>
 8013944:	230b      	movs	r3, #11
 8013946:	e048      	b.n	80139da <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013948:	4a26      	ldr	r2, [pc, #152]	@ (80139e4 <f_mount+0xc4>)
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013950:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013952:	69bb      	ldr	r3, [r7, #24]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d00f      	beq.n	8013978 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013958:	69b8      	ldr	r0, [r7, #24]
 801395a:	f7fe fd73 	bl	8012444 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	68db      	ldr	r3, [r3, #12]
 8013962:	4618      	mov	r0, r3
 8013964:	f001 f9a7 	bl	8014cb6 <ff_del_syncobj>
 8013968:	4603      	mov	r3, r0
 801396a:	2b00      	cmp	r3, #0
 801396c:	d101      	bne.n	8013972 <f_mount+0x52>
 801396e:	2302      	movs	r3, #2
 8013970:	e033      	b.n	80139da <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	2200      	movs	r2, #0
 8013976:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00f      	beq.n	801399e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2200      	movs	r2, #0
 8013982:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	b2da      	uxtb	r2, r3
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	330c      	adds	r3, #12
 801398c:	4619      	mov	r1, r3
 801398e:	4610      	mov	r0, r2
 8013990:	f001 f971 	bl	8014c76 <ff_cre_syncobj>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d101      	bne.n	801399e <f_mount+0x7e>
 801399a:	2302      	movs	r3, #2
 801399c:	e01d      	b.n	80139da <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801399e:	68fa      	ldr	r2, [r7, #12]
 80139a0:	4910      	ldr	r1, [pc, #64]	@ (80139e4 <f_mount+0xc4>)
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d002      	beq.n	80139b4 <f_mount+0x94>
 80139ae:	79fb      	ldrb	r3, [r7, #7]
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d001      	beq.n	80139b8 <f_mount+0x98>
 80139b4:	2300      	movs	r3, #0
 80139b6:	e010      	b.n	80139da <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80139b8:	f107 010c 	add.w	r1, r7, #12
 80139bc:	f107 0308 	add.w	r3, r7, #8
 80139c0:	2200      	movs	r2, #0
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7ff fd10 	bl	80133e8 <find_volume>
 80139c8:	4603      	mov	r3, r0
 80139ca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	7dfa      	ldrb	r2, [r7, #23]
 80139d0:	4611      	mov	r1, r2
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fe fbd3 	bl	801217e <unlock_fs>
 80139d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3720      	adds	r7, #32
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	bf00      	nop
 80139e4:	24002f00 	.word	0x24002f00

080139e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b098      	sub	sp, #96	@ 0x60
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	4613      	mov	r3, r2
 80139f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <f_open+0x18>
 80139fc:	2309      	movs	r3, #9
 80139fe:	e1b0      	b.n	8013d62 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013a00:	79fb      	ldrb	r3, [r7, #7]
 8013a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013a08:	79fa      	ldrb	r2, [r7, #7]
 8013a0a:	f107 0110 	add.w	r1, r7, #16
 8013a0e:	f107 0308 	add.w	r3, r7, #8
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7ff fce8 	bl	80133e8 <find_volume>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	f040 818d 	bne.w	8013d42 <f_open+0x35a>
		dj.obj.fs = fs;
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013a2c:	68ba      	ldr	r2, [r7, #8]
 8013a2e:	f107 0314 	add.w	r3, r7, #20
 8013a32:	4611      	mov	r1, r2
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ff fbcb 	bl	80131d0 <follow_path>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013a40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d118      	bne.n	8013a7a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013a48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013a4c:	b25b      	sxtb	r3, r3
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	da03      	bge.n	8013a5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013a52:	2306      	movs	r3, #6
 8013a54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013a58:	e00f      	b.n	8013a7a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013a5a:	79fb      	ldrb	r3, [r7, #7]
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	bf8c      	ite	hi
 8013a60:	2301      	movhi	r3, #1
 8013a62:	2300      	movls	r3, #0
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	461a      	mov	r2, r3
 8013a68:	f107 0314 	add.w	r3, r7, #20
 8013a6c:	4611      	mov	r1, r2
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fe fba0 	bl	80121b4 <chk_lock>
 8013a74:	4603      	mov	r3, r0
 8013a76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013a7a:	79fb      	ldrb	r3, [r7, #7]
 8013a7c:	f003 031c 	and.w	r3, r3, #28
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d07f      	beq.n	8013b84 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013a84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d017      	beq.n	8013abc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a90:	2b04      	cmp	r3, #4
 8013a92:	d10e      	bne.n	8013ab2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013a94:	f7fe fbea 	bl	801226c <enq_lock>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d006      	beq.n	8013aac <f_open+0xc4>
 8013a9e:	f107 0314 	add.w	r3, r7, #20
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7ff face 	bl	8013044 <dir_register>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	e000      	b.n	8013aae <f_open+0xc6>
 8013aac:	2312      	movs	r3, #18
 8013aae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013ab2:	79fb      	ldrb	r3, [r7, #7]
 8013ab4:	f043 0308 	orr.w	r3, r3, #8
 8013ab8:	71fb      	strb	r3, [r7, #7]
 8013aba:	e010      	b.n	8013ade <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013abc:	7ebb      	ldrb	r3, [r7, #26]
 8013abe:	f003 0311 	and.w	r3, r3, #17
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d003      	beq.n	8013ace <f_open+0xe6>
					res = FR_DENIED;
 8013ac6:	2307      	movs	r3, #7
 8013ac8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013acc:	e007      	b.n	8013ade <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013ace:	79fb      	ldrb	r3, [r7, #7]
 8013ad0:	f003 0304 	and.w	r3, r3, #4
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d002      	beq.n	8013ade <f_open+0xf6>
 8013ad8:	2308      	movs	r3, #8
 8013ada:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013ade:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d168      	bne.n	8013bb8 <f_open+0x1d0>
 8013ae6:	79fb      	ldrb	r3, [r7, #7]
 8013ae8:	f003 0308 	and.w	r3, r3, #8
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d063      	beq.n	8013bb8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8013af0:	f7fc f974 	bl	800fddc <get_fattime>
 8013af4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013af8:	330e      	adds	r3, #14
 8013afa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fe fa7e 	bl	8011ffe <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b04:	3316      	adds	r3, #22
 8013b06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fe fa78 	bl	8011ffe <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b10:	330b      	adds	r3, #11
 8013b12:	2220      	movs	r2, #32
 8013b14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013b1a:	4611      	mov	r1, r2
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7ff f9fd 	bl	8012f1c <ld_clust>
 8013b22:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013b28:	2200      	movs	r2, #0
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7ff fa15 	bl	8012f5a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b32:	331c      	adds	r3, #28
 8013b34:	2100      	movs	r1, #0
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fe fa61 	bl	8011ffe <st_dword>
					fs->wflag = 1;
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	2201      	movs	r2, #1
 8013b40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d037      	beq.n	8013bb8 <f_open+0x1d0>
						dw = fs->winsect;
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b4c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013b4e:	f107 0314 	add.w	r3, r7, #20
 8013b52:	2200      	movs	r2, #0
 8013b54:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7fe ff28 	bl	80129ac <remove_chain>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8013b62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d126      	bne.n	8013bb8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fe fcd0 	bl	8012514 <move_window>
 8013b74:	4603      	mov	r3, r0
 8013b76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013b7e:	3a01      	subs	r2, #1
 8013b80:	611a      	str	r2, [r3, #16]
 8013b82:	e019      	b.n	8013bb8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013b84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d115      	bne.n	8013bb8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013b8c:	7ebb      	ldrb	r3, [r7, #26]
 8013b8e:	f003 0310 	and.w	r3, r3, #16
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d003      	beq.n	8013b9e <f_open+0x1b6>
					res = FR_NO_FILE;
 8013b96:	2304      	movs	r3, #4
 8013b98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013b9c:	e00c      	b.n	8013bb8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013b9e:	79fb      	ldrb	r3, [r7, #7]
 8013ba0:	f003 0302 	and.w	r3, r3, #2
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d007      	beq.n	8013bb8 <f_open+0x1d0>
 8013ba8:	7ebb      	ldrb	r3, [r7, #26]
 8013baa:	f003 0301 	and.w	r3, r3, #1
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d002      	beq.n	8013bb8 <f_open+0x1d0>
						res = FR_DENIED;
 8013bb2:	2307      	movs	r3, #7
 8013bb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d126      	bne.n	8013c0e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013bc0:	79fb      	ldrb	r3, [r7, #7]
 8013bc2:	f003 0308 	and.w	r3, r3, #8
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d003      	beq.n	8013bd2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8013bca:	79fb      	ldrb	r3, [r7, #7]
 8013bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013bda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013be0:	79fb      	ldrb	r3, [r7, #7]
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	bf8c      	ite	hi
 8013be6:	2301      	movhi	r3, #1
 8013be8:	2300      	movls	r3, #0
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	461a      	mov	r2, r3
 8013bee:	f107 0314 	add.w	r3, r7, #20
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7fe fb5b 	bl	80122b0 <inc_lock>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	691b      	ldr	r3, [r3, #16]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d102      	bne.n	8013c0e <f_open+0x226>
 8013c08:	2302      	movs	r3, #2
 8013c0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f040 8095 	bne.w	8013d42 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013c18:	693b      	ldr	r3, [r7, #16]
 8013c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c1c:	4611      	mov	r1, r2
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7ff f97c 	bl	8012f1c <ld_clust>
 8013c24:	4602      	mov	r2, r0
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c2c:	331c      	adds	r3, #28
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fe f9a7 	bl	8011f82 <ld_dword>
 8013c34:	4602      	mov	r2, r0
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013c40:	693a      	ldr	r2, [r7, #16]
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	88da      	ldrh	r2, [r3, #6]
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	79fa      	ldrb	r2, [r7, #7]
 8013c52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2200      	movs	r2, #0
 8013c58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	2200      	movs	r2, #0
 8013c64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	3330      	adds	r3, #48	@ 0x30
 8013c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c6e:	2100      	movs	r1, #0
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fe fa11 	bl	8012098 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013c76:	79fb      	ldrb	r3, [r7, #7]
 8013c78:	f003 0320 	and.w	r3, r3, #32
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d060      	beq.n	8013d42 <f_open+0x35a>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d05c      	beq.n	8013d42 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	68da      	ldr	r2, [r3, #12]
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	895b      	ldrh	r3, [r3, #10]
 8013c94:	025b      	lsls	r3, r3, #9
 8013c96:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	657b      	str	r3, [r7, #84]	@ 0x54
 8013ca4:	e016      	b.n	8013cd4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fe fced 	bl	801268a <get_fat>
 8013cb0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d802      	bhi.n	8013cbe <f_open+0x2d6>
 8013cb8:	2302      	movs	r3, #2
 8013cba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cc4:	d102      	bne.n	8013ccc <f_open+0x2e4>
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013ccc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013cd0:	1ad3      	subs	r3, r2, r3
 8013cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8013cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d103      	bne.n	8013ce4 <f_open+0x2fc>
 8013cdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d8e0      	bhi.n	8013ca6 <f_open+0x2be>
				}
				fp->clust = clst;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013ce8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013cea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d127      	bne.n	8013d42 <f_open+0x35a>
 8013cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d022      	beq.n	8013d42 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7fe fca3 	bl	801264c <clust2sect>
 8013d06:	6478      	str	r0, [r7, #68]	@ 0x44
 8013d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d103      	bne.n	8013d16 <f_open+0x32e>
						res = FR_INT_ERR;
 8013d0e:	2302      	movs	r3, #2
 8013d10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013d14:	e015      	b.n	8013d42 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d18:	0a5a      	lsrs	r2, r3, #9
 8013d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d1c:	441a      	add	r2, r3
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	7858      	ldrb	r0, [r3, #1]
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	6a1a      	ldr	r2, [r3, #32]
 8013d30:	2301      	movs	r3, #1
 8013d32:	f7fe f8af 	bl	8011e94 <disk_read>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d002      	beq.n	8013d42 <f_open+0x35a>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013d42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d002      	beq.n	8013d50 <f_open+0x368>
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8013d56:	4611      	mov	r1, r2
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fe fa10 	bl	801217e <unlock_fs>
 8013d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3760      	adds	r7, #96	@ 0x60
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b08e      	sub	sp, #56	@ 0x38
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	60f8      	str	r0, [r7, #12]
 8013d72:	60b9      	str	r1, [r7, #8]
 8013d74:	607a      	str	r2, [r7, #4]
 8013d76:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f107 0214 	add.w	r2, r7, #20
 8013d88:	4611      	mov	r1, r2
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7ff fd80 	bl	8013890 <validate>
 8013d90:	4603      	mov	r3, r0
 8013d92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013d96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d107      	bne.n	8013dae <f_read+0x44>
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	7d5b      	ldrb	r3, [r3, #21]
 8013da2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013da6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d009      	beq.n	8013dc2 <f_read+0x58>
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013db4:	4611      	mov	r1, r2
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fe f9e1 	bl	801217e <unlock_fs>
 8013dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013dc0:	e13d      	b.n	801403e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	7d1b      	ldrb	r3, [r3, #20]
 8013dc6:	f003 0301 	and.w	r3, r3, #1
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d106      	bne.n	8013ddc <f_read+0x72>
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	2107      	movs	r1, #7
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fe f9d3 	bl	801217e <unlock_fs>
 8013dd8:	2307      	movs	r3, #7
 8013dda:	e130      	b.n	801403e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	68da      	ldr	r2, [r3, #12]
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	699b      	ldr	r3, [r3, #24]
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013de8:	687a      	ldr	r2, [r7, #4]
 8013dea:	6a3b      	ldr	r3, [r7, #32]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	f240 811c 	bls.w	801402a <f_read+0x2c0>
 8013df2:	6a3b      	ldr	r3, [r7, #32]
 8013df4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013df6:	e118      	b.n	801402a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	699b      	ldr	r3, [r3, #24]
 8013dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f040 80e4 	bne.w	8013fce <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	699b      	ldr	r3, [r3, #24]
 8013e0a:	0a5b      	lsrs	r3, r3, #9
 8013e0c:	697a      	ldr	r2, [r7, #20]
 8013e0e:	8952      	ldrh	r2, [r2, #10]
 8013e10:	3a01      	subs	r2, #1
 8013e12:	4013      	ands	r3, r2
 8013e14:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013e16:	69fb      	ldr	r3, [r7, #28]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d139      	bne.n	8013e90 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	699b      	ldr	r3, [r3, #24]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d103      	bne.n	8013e2c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	689b      	ldr	r3, [r3, #8]
 8013e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e2a:	e013      	b.n	8013e54 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d007      	beq.n	8013e44 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	699b      	ldr	r3, [r3, #24]
 8013e38:	4619      	mov	r1, r3
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f7fe feb3 	bl	8012ba6 <clmt_clust>
 8013e40:	6338      	str	r0, [r7, #48]	@ 0x30
 8013e42:	e007      	b.n	8013e54 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	69db      	ldr	r3, [r3, #28]
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	4610      	mov	r0, r2
 8013e4e:	f7fe fc1c 	bl	801268a <get_fat>
 8013e52:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d809      	bhi.n	8013e6e <f_read+0x104>
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2202      	movs	r2, #2
 8013e5e:	755a      	strb	r2, [r3, #21]
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	2102      	movs	r1, #2
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7fe f98a 	bl	801217e <unlock_fs>
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	e0e7      	b.n	801403e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e74:	d109      	bne.n	8013e8a <f_read+0x120>
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2201      	movs	r2, #1
 8013e7a:	755a      	strb	r2, [r3, #21]
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	2101      	movs	r1, #1
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7fe f97c 	bl	801217e <unlock_fs>
 8013e86:	2301      	movs	r3, #1
 8013e88:	e0d9      	b.n	801403e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e8e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013e90:	697a      	ldr	r2, [r7, #20]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	69db      	ldr	r3, [r3, #28]
 8013e96:	4619      	mov	r1, r3
 8013e98:	4610      	mov	r0, r2
 8013e9a:	f7fe fbd7 	bl	801264c <clust2sect>
 8013e9e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ea0:	69bb      	ldr	r3, [r7, #24]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d109      	bne.n	8013eba <f_read+0x150>
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	755a      	strb	r2, [r3, #21]
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	2102      	movs	r1, #2
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fe f964 	bl	801217e <unlock_fs>
 8013eb6:	2302      	movs	r3, #2
 8013eb8:	e0c1      	b.n	801403e <f_read+0x2d4>
			sect += csect;
 8013eba:	69ba      	ldr	r2, [r7, #24]
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	4413      	add	r3, r2
 8013ec0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	0a5b      	lsrs	r3, r3, #9
 8013ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d03e      	beq.n	8013f4c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013ece:	69fa      	ldr	r2, [r7, #28]
 8013ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed2:	4413      	add	r3, r2
 8013ed4:	697a      	ldr	r2, [r7, #20]
 8013ed6:	8952      	ldrh	r2, [r2, #10]
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	d905      	bls.n	8013ee8 <f_read+0x17e>
					cc = fs->csize - csect;
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	895b      	ldrh	r3, [r3, #10]
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	1ad3      	subs	r3, r2, r3
 8013ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	7858      	ldrb	r0, [r3, #1]
 8013eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eee:	69ba      	ldr	r2, [r7, #24]
 8013ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013ef2:	f7fd ffcf 	bl	8011e94 <disk_read>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d009      	beq.n	8013f10 <f_read+0x1a6>
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2201      	movs	r2, #1
 8013f00:	755a      	strb	r2, [r3, #21]
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	2101      	movs	r1, #1
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fe f939 	bl	801217e <unlock_fs>
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e096      	b.n	801403e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	7d1b      	ldrb	r3, [r3, #20]
 8013f14:	b25b      	sxtb	r3, r3
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	da14      	bge.n	8013f44 <f_read+0x1da>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	6a1a      	ldr	r2, [r3, #32]
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d90d      	bls.n	8013f44 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6a1a      	ldr	r2, [r3, #32]
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	025b      	lsls	r3, r3, #9
 8013f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f34:	18d0      	adds	r0, r2, r3
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	3330      	adds	r3, #48	@ 0x30
 8013f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013f3e:	4619      	mov	r1, r3
 8013f40:	f7fe f889 	bl	8012056 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f46:	025b      	lsls	r3, r3, #9
 8013f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8013f4a:	e05a      	b.n	8014002 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	6a1b      	ldr	r3, [r3, #32]
 8013f50:	69ba      	ldr	r2, [r7, #24]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d038      	beq.n	8013fc8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	7d1b      	ldrb	r3, [r3, #20]
 8013f5a:	b25b      	sxtb	r3, r3
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	da1d      	bge.n	8013f9c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	7858      	ldrb	r0, [r3, #1]
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	6a1a      	ldr	r2, [r3, #32]
 8013f6e:	2301      	movs	r3, #1
 8013f70:	f7fd ffb0 	bl	8011ed4 <disk_write>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d009      	beq.n	8013f8e <f_read+0x224>
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	755a      	strb	r2, [r3, #21]
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	2101      	movs	r1, #1
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fe f8fa 	bl	801217e <unlock_fs>
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e057      	b.n	801403e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	7d1b      	ldrb	r3, [r3, #20]
 8013f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f96:	b2da      	uxtb	r2, r3
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	7858      	ldrb	r0, [r3, #1]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	69ba      	ldr	r2, [r7, #24]
 8013faa:	f7fd ff73 	bl	8011e94 <disk_read>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d009      	beq.n	8013fc8 <f_read+0x25e>
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	755a      	strb	r2, [r3, #21]
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	2101      	movs	r1, #1
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fe f8dd 	bl	801217e <unlock_fs>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	e03a      	b.n	801403e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	69ba      	ldr	r2, [r7, #24]
 8013fcc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	699b      	ldr	r3, [r3, #24]
 8013fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d901      	bls.n	8013fe8 <f_read+0x27e>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	699b      	ldr	r3, [r3, #24]
 8013ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ff6:	4413      	add	r3, r2
 8013ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ffe:	f7fe f82a 	bl	8012056 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014006:	4413      	add	r3, r2
 8014008:	627b      	str	r3, [r7, #36]	@ 0x24
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	699a      	ldr	r2, [r3, #24]
 801400e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014010:	441a      	add	r2, r3
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	619a      	str	r2, [r3, #24]
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401c:	441a      	add	r2, r3
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	601a      	str	r2, [r3, #0]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014026:	1ad3      	subs	r3, r2, r3
 8014028:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2b00      	cmp	r3, #0
 801402e:	f47f aee3 	bne.w	8013df8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	2100      	movs	r1, #0
 8014036:	4618      	mov	r0, r3
 8014038:	f7fe f8a1 	bl	801217e <unlock_fs>
 801403c:	2300      	movs	r3, #0
}
 801403e:	4618      	mov	r0, r3
 8014040:	3738      	adds	r7, #56	@ 0x38
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}

08014046 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014046:	b580      	push	{r7, lr}
 8014048:	b08c      	sub	sp, #48	@ 0x30
 801404a:	af00      	add	r7, sp, #0
 801404c:	60f8      	str	r0, [r7, #12]
 801404e:	60b9      	str	r1, [r7, #8]
 8014050:	607a      	str	r2, [r7, #4]
 8014052:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	2200      	movs	r2, #0
 801405c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	f107 0210 	add.w	r2, r7, #16
 8014064:	4611      	mov	r1, r2
 8014066:	4618      	mov	r0, r3
 8014068:	f7ff fc12 	bl	8013890 <validate>
 801406c:	4603      	mov	r3, r0
 801406e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014076:	2b00      	cmp	r3, #0
 8014078:	d107      	bne.n	801408a <f_write+0x44>
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	7d5b      	ldrb	r3, [r3, #21]
 801407e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014082:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014086:	2b00      	cmp	r3, #0
 8014088:	d009      	beq.n	801409e <f_write+0x58>
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8014090:	4611      	mov	r1, r2
 8014092:	4618      	mov	r0, r3
 8014094:	f7fe f873 	bl	801217e <unlock_fs>
 8014098:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801409c:	e173      	b.n	8014386 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	7d1b      	ldrb	r3, [r3, #20]
 80140a2:	f003 0302 	and.w	r3, r3, #2
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d106      	bne.n	80140b8 <f_write+0x72>
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	2107      	movs	r1, #7
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fe f865 	bl	801217e <unlock_fs>
 80140b4:	2307      	movs	r3, #7
 80140b6:	e166      	b.n	8014386 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	699a      	ldr	r2, [r3, #24]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	441a      	add	r2, r3
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	699b      	ldr	r3, [r3, #24]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	f080 814b 	bcs.w	8014360 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	699b      	ldr	r3, [r3, #24]
 80140ce:	43db      	mvns	r3, r3
 80140d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80140d2:	e145      	b.n	8014360 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	699b      	ldr	r3, [r3, #24]
 80140d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f040 8101 	bne.w	80142e4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	699b      	ldr	r3, [r3, #24]
 80140e6:	0a5b      	lsrs	r3, r3, #9
 80140e8:	693a      	ldr	r2, [r7, #16]
 80140ea:	8952      	ldrh	r2, [r2, #10]
 80140ec:	3a01      	subs	r2, #1
 80140ee:	4013      	ands	r3, r2
 80140f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d14d      	bne.n	8014194 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	699b      	ldr	r3, [r3, #24]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10c      	bne.n	801411a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	689b      	ldr	r3, [r3, #8]
 8014104:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014108:	2b00      	cmp	r3, #0
 801410a:	d11a      	bne.n	8014142 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2100      	movs	r1, #0
 8014110:	4618      	mov	r0, r3
 8014112:	f7fe fcb0 	bl	8012a76 <create_chain>
 8014116:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014118:	e013      	b.n	8014142 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801411e:	2b00      	cmp	r3, #0
 8014120:	d007      	beq.n	8014132 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	699b      	ldr	r3, [r3, #24]
 8014126:	4619      	mov	r1, r3
 8014128:	68f8      	ldr	r0, [r7, #12]
 801412a:	f7fe fd3c 	bl	8012ba6 <clmt_clust>
 801412e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014130:	e007      	b.n	8014142 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014132:	68fa      	ldr	r2, [r7, #12]
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	69db      	ldr	r3, [r3, #28]
 8014138:	4619      	mov	r1, r3
 801413a:	4610      	mov	r0, r2
 801413c:	f7fe fc9b 	bl	8012a76 <create_chain>
 8014140:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014144:	2b00      	cmp	r3, #0
 8014146:	f000 8110 	beq.w	801436a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801414c:	2b01      	cmp	r3, #1
 801414e:	d109      	bne.n	8014164 <f_write+0x11e>
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	2202      	movs	r2, #2
 8014154:	755a      	strb	r2, [r3, #21]
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	2102      	movs	r1, #2
 801415a:	4618      	mov	r0, r3
 801415c:	f7fe f80f 	bl	801217e <unlock_fs>
 8014160:	2302      	movs	r3, #2
 8014162:	e110      	b.n	8014386 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801416a:	d109      	bne.n	8014180 <f_write+0x13a>
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	2201      	movs	r2, #1
 8014170:	755a      	strb	r2, [r3, #21]
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	2101      	movs	r1, #1
 8014176:	4618      	mov	r0, r3
 8014178:	f7fe f801 	bl	801217e <unlock_fs>
 801417c:	2301      	movs	r3, #1
 801417e:	e102      	b.n	8014386 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014184:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	689b      	ldr	r3, [r3, #8]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d102      	bne.n	8014194 <f_write+0x14e>
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014192:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	7d1b      	ldrb	r3, [r3, #20]
 8014198:	b25b      	sxtb	r3, r3
 801419a:	2b00      	cmp	r3, #0
 801419c:	da1d      	bge.n	80141da <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	7858      	ldrb	r0, [r3, #1]
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	6a1a      	ldr	r2, [r3, #32]
 80141ac:	2301      	movs	r3, #1
 80141ae:	f7fd fe91 	bl	8011ed4 <disk_write>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d009      	beq.n	80141cc <f_write+0x186>
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	2201      	movs	r2, #1
 80141bc:	755a      	strb	r2, [r3, #21]
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	2101      	movs	r1, #1
 80141c2:	4618      	mov	r0, r3
 80141c4:	f7fd ffdb 	bl	801217e <unlock_fs>
 80141c8:	2301      	movs	r3, #1
 80141ca:	e0dc      	b.n	8014386 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	7d1b      	ldrb	r3, [r3, #20]
 80141d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141d4:	b2da      	uxtb	r2, r3
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141da:	693a      	ldr	r2, [r7, #16]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	69db      	ldr	r3, [r3, #28]
 80141e0:	4619      	mov	r1, r3
 80141e2:	4610      	mov	r0, r2
 80141e4:	f7fe fa32 	bl	801264c <clust2sect>
 80141e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d109      	bne.n	8014204 <f_write+0x1be>
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	2202      	movs	r2, #2
 80141f4:	755a      	strb	r2, [r3, #21]
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	2102      	movs	r1, #2
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fd ffbf 	bl	801217e <unlock_fs>
 8014200:	2302      	movs	r3, #2
 8014202:	e0c0      	b.n	8014386 <f_write+0x340>
			sect += csect;
 8014204:	697a      	ldr	r2, [r7, #20]
 8014206:	69bb      	ldr	r3, [r7, #24]
 8014208:	4413      	add	r3, r2
 801420a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	0a5b      	lsrs	r3, r3, #9
 8014210:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d041      	beq.n	801429c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014218:	69ba      	ldr	r2, [r7, #24]
 801421a:	6a3b      	ldr	r3, [r7, #32]
 801421c:	4413      	add	r3, r2
 801421e:	693a      	ldr	r2, [r7, #16]
 8014220:	8952      	ldrh	r2, [r2, #10]
 8014222:	4293      	cmp	r3, r2
 8014224:	d905      	bls.n	8014232 <f_write+0x1ec>
					cc = fs->csize - csect;
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	895b      	ldrh	r3, [r3, #10]
 801422a:	461a      	mov	r2, r3
 801422c:	69bb      	ldr	r3, [r7, #24]
 801422e:	1ad3      	subs	r3, r2, r3
 8014230:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	7858      	ldrb	r0, [r3, #1]
 8014236:	6a3b      	ldr	r3, [r7, #32]
 8014238:	697a      	ldr	r2, [r7, #20]
 801423a:	69f9      	ldr	r1, [r7, #28]
 801423c:	f7fd fe4a 	bl	8011ed4 <disk_write>
 8014240:	4603      	mov	r3, r0
 8014242:	2b00      	cmp	r3, #0
 8014244:	d009      	beq.n	801425a <f_write+0x214>
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	2201      	movs	r2, #1
 801424a:	755a      	strb	r2, [r3, #21]
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	2101      	movs	r1, #1
 8014250:	4618      	mov	r0, r3
 8014252:	f7fd ff94 	bl	801217e <unlock_fs>
 8014256:	2301      	movs	r3, #1
 8014258:	e095      	b.n	8014386 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6a1a      	ldr	r2, [r3, #32]
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	1ad3      	subs	r3, r2, r3
 8014262:	6a3a      	ldr	r2, [r7, #32]
 8014264:	429a      	cmp	r2, r3
 8014266:	d915      	bls.n	8014294 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	6a1a      	ldr	r2, [r3, #32]
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	1ad3      	subs	r3, r2, r3
 8014276:	025b      	lsls	r3, r3, #9
 8014278:	69fa      	ldr	r2, [r7, #28]
 801427a:	4413      	add	r3, r2
 801427c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014280:	4619      	mov	r1, r3
 8014282:	f7fd fee8 	bl	8012056 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	7d1b      	ldrb	r3, [r3, #20]
 801428a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801428e:	b2da      	uxtb	r2, r3
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014294:	6a3b      	ldr	r3, [r7, #32]
 8014296:	025b      	lsls	r3, r3, #9
 8014298:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801429a:	e044      	b.n	8014326 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	6a1b      	ldr	r3, [r3, #32]
 80142a0:	697a      	ldr	r2, [r7, #20]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d01b      	beq.n	80142de <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	699a      	ldr	r2, [r3, #24]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d215      	bcs.n	80142de <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	7858      	ldrb	r0, [r3, #1]
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80142bc:	2301      	movs	r3, #1
 80142be:	697a      	ldr	r2, [r7, #20]
 80142c0:	f7fd fde8 	bl	8011e94 <disk_read>
 80142c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d009      	beq.n	80142de <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	2201      	movs	r2, #1
 80142ce:	755a      	strb	r2, [r3, #21]
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	2101      	movs	r1, #1
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fd ff52 	bl	801217e <unlock_fs>
 80142da:	2301      	movs	r3, #1
 80142dc:	e053      	b.n	8014386 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	697a      	ldr	r2, [r7, #20]
 80142e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	699b      	ldr	r3, [r3, #24]
 80142e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142ec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80142f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80142f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d901      	bls.n	80142fe <f_write+0x2b8>
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	699b      	ldr	r3, [r3, #24]
 8014308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801430c:	4413      	add	r3, r2
 801430e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014310:	69f9      	ldr	r1, [r7, #28]
 8014312:	4618      	mov	r0, r3
 8014314:	f7fd fe9f 	bl	8012056 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	7d1b      	ldrb	r3, [r3, #20]
 801431c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014320:	b2da      	uxtb	r2, r3
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014326:	69fa      	ldr	r2, [r7, #28]
 8014328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801432a:	4413      	add	r3, r2
 801432c:	61fb      	str	r3, [r7, #28]
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	699a      	ldr	r2, [r3, #24]
 8014332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014334:	441a      	add	r2, r3
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	619a      	str	r2, [r3, #24]
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	68da      	ldr	r2, [r3, #12]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	699b      	ldr	r3, [r3, #24]
 8014342:	429a      	cmp	r2, r3
 8014344:	bf38      	it	cc
 8014346:	461a      	movcc	r2, r3
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	60da      	str	r2, [r3, #12]
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014352:	441a      	add	r2, r3
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	601a      	str	r2, [r3, #0]
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801435c:	1ad3      	subs	r3, r2, r3
 801435e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	f47f aeb6 	bne.w	80140d4 <f_write+0x8e>
 8014368:	e000      	b.n	801436c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801436a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	7d1b      	ldrb	r3, [r3, #20]
 8014370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014374:	b2da      	uxtb	r2, r3
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	2100      	movs	r1, #0
 801437e:	4618      	mov	r0, r3
 8014380:	f7fd fefd 	bl	801217e <unlock_fs>
 8014384:	2300      	movs	r3, #0
}
 8014386:	4618      	mov	r0, r3
 8014388:	3730      	adds	r7, #48	@ 0x30
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801438e:	b580      	push	{r7, lr}
 8014390:	b086      	sub	sp, #24
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f107 0208 	add.w	r2, r7, #8
 801439c:	4611      	mov	r1, r2
 801439e:	4618      	mov	r0, r3
 80143a0:	f7ff fa76 	bl	8013890 <validate>
 80143a4:	4603      	mov	r3, r0
 80143a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80143a8:	7dfb      	ldrb	r3, [r7, #23]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d16d      	bne.n	801448a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	7d1b      	ldrb	r3, [r3, #20]
 80143b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d067      	beq.n	801448a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	7d1b      	ldrb	r3, [r3, #20]
 80143be:	b25b      	sxtb	r3, r3
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	da1a      	bge.n	80143fa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	7858      	ldrb	r0, [r3, #1]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6a1a      	ldr	r2, [r3, #32]
 80143d2:	2301      	movs	r3, #1
 80143d4:	f7fd fd7e 	bl	8011ed4 <disk_write>
 80143d8:	4603      	mov	r3, r0
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d006      	beq.n	80143ec <f_sync+0x5e>
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	2101      	movs	r1, #1
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7fd fecb 	bl	801217e <unlock_fs>
 80143e8:	2301      	movs	r3, #1
 80143ea:	e055      	b.n	8014498 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	7d1b      	ldrb	r3, [r3, #20]
 80143f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143f4:	b2da      	uxtb	r2, r3
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80143fa:	f7fb fcef 	bl	800fddc <get_fattime>
 80143fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014400:	68ba      	ldr	r2, [r7, #8]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014406:	4619      	mov	r1, r3
 8014408:	4610      	mov	r0, r2
 801440a:	f7fe f883 	bl	8012514 <move_window>
 801440e:	4603      	mov	r3, r0
 8014410:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014412:	7dfb      	ldrb	r3, [r7, #23]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d138      	bne.n	801448a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801441c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	330b      	adds	r3, #11
 8014422:	781a      	ldrb	r2, [r3, #0]
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	330b      	adds	r3, #11
 8014428:	f042 0220 	orr.w	r2, r2, #32
 801442c:	b2d2      	uxtb	r2, r2
 801442e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6818      	ldr	r0, [r3, #0]
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	689b      	ldr	r3, [r3, #8]
 8014438:	461a      	mov	r2, r3
 801443a:	68f9      	ldr	r1, [r7, #12]
 801443c:	f7fe fd8d 	bl	8012f5a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f103 021c 	add.w	r2, r3, #28
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	4619      	mov	r1, r3
 801444c:	4610      	mov	r0, r2
 801444e:	f7fd fdd6 	bl	8011ffe <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	3316      	adds	r3, #22
 8014456:	6939      	ldr	r1, [r7, #16]
 8014458:	4618      	mov	r0, r3
 801445a:	f7fd fdd0 	bl	8011ffe <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	3312      	adds	r3, #18
 8014462:	2100      	movs	r1, #0
 8014464:	4618      	mov	r0, r3
 8014466:	f7fd fdaf 	bl	8011fc8 <st_word>
					fs->wflag = 1;
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	2201      	movs	r2, #1
 801446e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	4618      	mov	r0, r3
 8014474:	f7fe f87c 	bl	8012570 <sync_fs>
 8014478:	4603      	mov	r3, r0
 801447a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	7d1b      	ldrb	r3, [r3, #20]
 8014480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014484:	b2da      	uxtb	r2, r3
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	7dfa      	ldrb	r2, [r7, #23]
 801448e:	4611      	mov	r1, r2
 8014490:	4618      	mov	r0, r3
 8014492:	f7fd fe74 	bl	801217e <unlock_fs>
 8014496:	7dfb      	ldrb	r3, [r7, #23]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3718      	adds	r7, #24
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff ff70 	bl	801438e <f_sync>
 80144ae:	4603      	mov	r3, r0
 80144b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80144b2:	7bfb      	ldrb	r3, [r7, #15]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d11d      	bne.n	80144f4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f107 0208 	add.w	r2, r7, #8
 80144be:	4611      	mov	r1, r2
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7ff f9e5 	bl	8013890 <validate>
 80144c6:	4603      	mov	r3, r0
 80144c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80144ca:	7bfb      	ldrb	r3, [r7, #15]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d111      	bne.n	80144f4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	691b      	ldr	r3, [r3, #16]
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7fd ff79 	bl	80123cc <dec_lock>
 80144da:	4603      	mov	r3, r0
 80144dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80144de:	7bfb      	ldrb	r3, [r7, #15]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d102      	bne.n	80144ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2200      	movs	r2, #0
 80144e8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	2100      	movs	r1, #0
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fd fe45 	bl	801217e <unlock_fs>
#endif
		}
	}
	return res;
 80144f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}

080144fe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80144fe:	b580      	push	{r7, lr}
 8014500:	b090      	sub	sp, #64	@ 0x40
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
 8014506:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f107 0208 	add.w	r2, r7, #8
 801450e:	4611      	mov	r1, r2
 8014510:	4618      	mov	r0, r3
 8014512:	f7ff f9bd 	bl	8013890 <validate>
 8014516:	4603      	mov	r3, r0
 8014518:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801451c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014520:	2b00      	cmp	r3, #0
 8014522:	d103      	bne.n	801452c <f_lseek+0x2e>
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	7d5b      	ldrb	r3, [r3, #21]
 8014528:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801452c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014530:	2b00      	cmp	r3, #0
 8014532:	d009      	beq.n	8014548 <f_lseek+0x4a>
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801453a:	4611      	mov	r1, r2
 801453c:	4618      	mov	r0, r3
 801453e:	f7fd fe1e 	bl	801217e <unlock_fs>
 8014542:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014546:	e229      	b.n	801499c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801454c:	2b00      	cmp	r3, #0
 801454e:	f000 80ea 	beq.w	8014726 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014558:	d164      	bne.n	8014624 <f_lseek+0x126>
			tbl = fp->cltbl;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801455e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014562:	1d1a      	adds	r2, r3, #4
 8014564:	627a      	str	r2, [r7, #36]	@ 0x24
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	617b      	str	r3, [r7, #20]
 801456a:	2302      	movs	r3, #2
 801456c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	689b      	ldr	r3, [r3, #8]
 8014572:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014576:	2b00      	cmp	r3, #0
 8014578:	d044      	beq.n	8014604 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801457c:	613b      	str	r3, [r7, #16]
 801457e:	2300      	movs	r3, #0
 8014580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014584:	3302      	adds	r3, #2
 8014586:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801458a:	60fb      	str	r3, [r7, #12]
 801458c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801458e:	3301      	adds	r3, #1
 8014590:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014596:	4618      	mov	r0, r3
 8014598:	f7fe f877 	bl	801268a <get_fat>
 801459c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145a0:	2b01      	cmp	r3, #1
 80145a2:	d809      	bhi.n	80145b8 <f_lseek+0xba>
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2202      	movs	r2, #2
 80145a8:	755a      	strb	r2, [r3, #21]
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	2102      	movs	r1, #2
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7fd fde5 	bl	801217e <unlock_fs>
 80145b4:	2302      	movs	r3, #2
 80145b6:	e1f1      	b.n	801499c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80145b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145be:	d109      	bne.n	80145d4 <f_lseek+0xd6>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2201      	movs	r2, #1
 80145c4:	755a      	strb	r2, [r3, #21]
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	2101      	movs	r1, #1
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fd fdd7 	bl	801217e <unlock_fs>
 80145d0:	2301      	movs	r3, #1
 80145d2:	e1e3      	b.n	801499c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	3301      	adds	r3, #1
 80145d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145da:	429a      	cmp	r2, r3
 80145dc:	d0d4      	beq.n	8014588 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80145de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d809      	bhi.n	80145fa <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80145e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145e8:	1d1a      	adds	r2, r3, #4
 80145ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80145ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80145ee:	601a      	str	r2, [r3, #0]
 80145f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145f2:	1d1a      	adds	r2, r3, #4
 80145f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80145f6:	693a      	ldr	r2, [r7, #16]
 80145f8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	699b      	ldr	r3, [r3, #24]
 80145fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014600:	429a      	cmp	r2, r3
 8014602:	d3ba      	bcc.n	801457a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801460a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801460c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	429a      	cmp	r2, r3
 8014612:	d803      	bhi.n	801461c <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014616:	2200      	movs	r2, #0
 8014618:	601a      	str	r2, [r3, #0]
 801461a:	e1b6      	b.n	801498a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801461c:	2311      	movs	r3, #17
 801461e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014622:	e1b2      	b.n	801498a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	683a      	ldr	r2, [r7, #0]
 801462a:	429a      	cmp	r2, r3
 801462c:	d902      	bls.n	8014634 <f_lseek+0x136>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	683a      	ldr	r2, [r7, #0]
 8014638:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	f000 81a4 	beq.w	801498a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	3b01      	subs	r3, #1
 8014646:	4619      	mov	r1, r3
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7fe faac 	bl	8012ba6 <clmt_clust>
 801464e:	4602      	mov	r2, r0
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014654:	68ba      	ldr	r2, [r7, #8]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	69db      	ldr	r3, [r3, #28]
 801465a:	4619      	mov	r1, r3
 801465c:	4610      	mov	r0, r2
 801465e:	f7fd fff5 	bl	801264c <clust2sect>
 8014662:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014664:	69bb      	ldr	r3, [r7, #24]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d109      	bne.n	801467e <f_lseek+0x180>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2202      	movs	r2, #2
 801466e:	755a      	strb	r2, [r3, #21]
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	2102      	movs	r1, #2
 8014674:	4618      	mov	r0, r3
 8014676:	f7fd fd82 	bl	801217e <unlock_fs>
 801467a:	2302      	movs	r3, #2
 801467c:	e18e      	b.n	801499c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	3b01      	subs	r3, #1
 8014682:	0a5b      	lsrs	r3, r3, #9
 8014684:	68ba      	ldr	r2, [r7, #8]
 8014686:	8952      	ldrh	r2, [r2, #10]
 8014688:	3a01      	subs	r2, #1
 801468a:	4013      	ands	r3, r2
 801468c:	69ba      	ldr	r2, [r7, #24]
 801468e:	4413      	add	r3, r2
 8014690:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	699b      	ldr	r3, [r3, #24]
 8014696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801469a:	2b00      	cmp	r3, #0
 801469c:	f000 8175 	beq.w	801498a <f_lseek+0x48c>
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	6a1b      	ldr	r3, [r3, #32]
 80146a4:	69ba      	ldr	r2, [r7, #24]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	f000 816f 	beq.w	801498a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	7d1b      	ldrb	r3, [r3, #20]
 80146b0:	b25b      	sxtb	r3, r3
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	da1d      	bge.n	80146f2 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	7858      	ldrb	r0, [r3, #1]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	6a1a      	ldr	r2, [r3, #32]
 80146c4:	2301      	movs	r3, #1
 80146c6:	f7fd fc05 	bl	8011ed4 <disk_write>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d009      	beq.n	80146e4 <f_lseek+0x1e6>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2201      	movs	r2, #1
 80146d4:	755a      	strb	r2, [r3, #21]
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	2101      	movs	r1, #1
 80146da:	4618      	mov	r0, r3
 80146dc:	f7fd fd4f 	bl	801217e <unlock_fs>
 80146e0:	2301      	movs	r3, #1
 80146e2:	e15b      	b.n	801499c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	7d1b      	ldrb	r3, [r3, #20]
 80146e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80146ec:	b2da      	uxtb	r2, r3
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	7858      	ldrb	r0, [r3, #1]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80146fc:	2301      	movs	r3, #1
 80146fe:	69ba      	ldr	r2, [r7, #24]
 8014700:	f7fd fbc8 	bl	8011e94 <disk_read>
 8014704:	4603      	mov	r3, r0
 8014706:	2b00      	cmp	r3, #0
 8014708:	d009      	beq.n	801471e <f_lseek+0x220>
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2201      	movs	r2, #1
 801470e:	755a      	strb	r2, [r3, #21]
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	2101      	movs	r1, #1
 8014714:	4618      	mov	r0, r3
 8014716:	f7fd fd32 	bl	801217e <unlock_fs>
 801471a:	2301      	movs	r3, #1
 801471c:	e13e      	b.n	801499c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	69ba      	ldr	r2, [r7, #24]
 8014722:	621a      	str	r2, [r3, #32]
 8014724:	e131      	b.n	801498a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	683a      	ldr	r2, [r7, #0]
 801472c:	429a      	cmp	r2, r3
 801472e:	d908      	bls.n	8014742 <f_lseek+0x244>
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	7d1b      	ldrb	r3, [r3, #20]
 8014734:	f003 0302 	and.w	r3, r3, #2
 8014738:	2b00      	cmp	r3, #0
 801473a:	d102      	bne.n	8014742 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	699b      	ldr	r3, [r3, #24]
 8014746:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014748:	2300      	movs	r3, #0
 801474a:	637b      	str	r3, [r7, #52]	@ 0x34
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014750:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	f000 80c0 	beq.w	80148da <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	895b      	ldrh	r3, [r3, #10]
 801475e:	025b      	lsls	r3, r3, #9
 8014760:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014762:	6a3b      	ldr	r3, [r7, #32]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d01b      	beq.n	80147a0 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	1e5a      	subs	r2, r3, #1
 801476c:	69fb      	ldr	r3, [r7, #28]
 801476e:	fbb2 f2f3 	udiv	r2, r2, r3
 8014772:	6a3b      	ldr	r3, [r7, #32]
 8014774:	1e59      	subs	r1, r3, #1
 8014776:	69fb      	ldr	r3, [r7, #28]
 8014778:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801477c:	429a      	cmp	r2, r3
 801477e:	d30f      	bcc.n	80147a0 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014780:	6a3b      	ldr	r3, [r7, #32]
 8014782:	1e5a      	subs	r2, r3, #1
 8014784:	69fb      	ldr	r3, [r7, #28]
 8014786:	425b      	negs	r3, r3
 8014788:	401a      	ands	r2, r3
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	699b      	ldr	r3, [r3, #24]
 8014792:	683a      	ldr	r2, [r7, #0]
 8014794:	1ad3      	subs	r3, r2, r3
 8014796:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	69db      	ldr	r3, [r3, #28]
 801479c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801479e:	e02c      	b.n	80147fa <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	689b      	ldr	r3, [r3, #8]
 80147a4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80147a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d123      	bne.n	80147f4 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2100      	movs	r1, #0
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fe f960 	bl	8012a76 <create_chain>
 80147b6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80147b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d109      	bne.n	80147d2 <f_lseek+0x2d4>
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2202      	movs	r2, #2
 80147c2:	755a      	strb	r2, [r3, #21]
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	2102      	movs	r1, #2
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fd fcd8 	bl	801217e <unlock_fs>
 80147ce:	2302      	movs	r3, #2
 80147d0:	e0e4      	b.n	801499c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80147d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d8:	d109      	bne.n	80147ee <f_lseek+0x2f0>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2201      	movs	r2, #1
 80147de:	755a      	strb	r2, [r3, #21]
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	2101      	movs	r1, #1
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7fd fcca 	bl	801217e <unlock_fs>
 80147ea:	2301      	movs	r3, #1
 80147ec:	e0d6      	b.n	801499c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80147f2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80147f8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80147fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d06c      	beq.n	80148da <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8014800:	e044      	b.n	801488c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8014802:	683a      	ldr	r2, [r7, #0]
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	1ad3      	subs	r3, r2, r3
 8014808:	603b      	str	r3, [r7, #0]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	699a      	ldr	r2, [r3, #24]
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	441a      	add	r2, r3
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	7d1b      	ldrb	r3, [r3, #20]
 801481a:	f003 0302 	and.w	r3, r3, #2
 801481e:	2b00      	cmp	r3, #0
 8014820:	d00b      	beq.n	801483a <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014826:	4618      	mov	r0, r3
 8014828:	f7fe f925 	bl	8012a76 <create_chain>
 801482c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014830:	2b00      	cmp	r3, #0
 8014832:	d108      	bne.n	8014846 <f_lseek+0x348>
							ofs = 0; break;
 8014834:	2300      	movs	r3, #0
 8014836:	603b      	str	r3, [r7, #0]
 8014838:	e02c      	b.n	8014894 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801483e:	4618      	mov	r0, r3
 8014840:	f7fd ff23 	bl	801268a <get_fat>
 8014844:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014848:	f1b3 3fff 	cmp.w	r3, #4294967295
 801484c:	d109      	bne.n	8014862 <f_lseek+0x364>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2201      	movs	r2, #1
 8014852:	755a      	strb	r2, [r3, #21]
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2101      	movs	r1, #1
 8014858:	4618      	mov	r0, r3
 801485a:	f7fd fc90 	bl	801217e <unlock_fs>
 801485e:	2301      	movs	r3, #1
 8014860:	e09c      	b.n	801499c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014864:	2b01      	cmp	r3, #1
 8014866:	d904      	bls.n	8014872 <f_lseek+0x374>
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	699b      	ldr	r3, [r3, #24]
 801486c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801486e:	429a      	cmp	r2, r3
 8014870:	d309      	bcc.n	8014886 <f_lseek+0x388>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	2202      	movs	r2, #2
 8014876:	755a      	strb	r2, [r3, #21]
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	2102      	movs	r1, #2
 801487c:	4618      	mov	r0, r3
 801487e:	f7fd fc7e 	bl	801217e <unlock_fs>
 8014882:	2302      	movs	r3, #2
 8014884:	e08a      	b.n	801499c <f_lseek+0x49e>
					fp->clust = clst;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801488a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801488c:	683a      	ldr	r2, [r7, #0]
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	429a      	cmp	r2, r3
 8014892:	d8b6      	bhi.n	8014802 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	699a      	ldr	r2, [r3, #24]
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	441a      	add	r2, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d017      	beq.n	80148da <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7fd fecc 	bl	801264c <clust2sect>
 80148b4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80148b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d109      	bne.n	80148d0 <f_lseek+0x3d2>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2202      	movs	r2, #2
 80148c0:	755a      	strb	r2, [r3, #21]
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	2102      	movs	r1, #2
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7fd fc59 	bl	801217e <unlock_fs>
 80148cc:	2302      	movs	r3, #2
 80148ce:	e065      	b.n	801499c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	0a5b      	lsrs	r3, r3, #9
 80148d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80148d6:	4413      	add	r3, r2
 80148d8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	699a      	ldr	r2, [r3, #24]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d90a      	bls.n	80148fc <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	699a      	ldr	r2, [r3, #24]
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	7d1b      	ldrb	r3, [r3, #20]
 80148f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148f6:	b2da      	uxtb	r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	699b      	ldr	r3, [r3, #24]
 8014900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014904:	2b00      	cmp	r3, #0
 8014906:	d040      	beq.n	801498a <f_lseek+0x48c>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6a1b      	ldr	r3, [r3, #32]
 801490c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801490e:	429a      	cmp	r2, r3
 8014910:	d03b      	beq.n	801498a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	7d1b      	ldrb	r3, [r3, #20]
 8014916:	b25b      	sxtb	r3, r3
 8014918:	2b00      	cmp	r3, #0
 801491a:	da1d      	bge.n	8014958 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	7858      	ldrb	r0, [r3, #1]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6a1a      	ldr	r2, [r3, #32]
 801492a:	2301      	movs	r3, #1
 801492c:	f7fd fad2 	bl	8011ed4 <disk_write>
 8014930:	4603      	mov	r3, r0
 8014932:	2b00      	cmp	r3, #0
 8014934:	d009      	beq.n	801494a <f_lseek+0x44c>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2201      	movs	r2, #1
 801493a:	755a      	strb	r2, [r3, #21]
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	2101      	movs	r1, #1
 8014940:	4618      	mov	r0, r3
 8014942:	f7fd fc1c 	bl	801217e <unlock_fs>
 8014946:	2301      	movs	r3, #1
 8014948:	e028      	b.n	801499c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	7d1b      	ldrb	r3, [r3, #20]
 801494e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014952:	b2da      	uxtb	r2, r3
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	7858      	ldrb	r0, [r3, #1]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014962:	2301      	movs	r3, #1
 8014964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014966:	f7fd fa95 	bl	8011e94 <disk_read>
 801496a:	4603      	mov	r3, r0
 801496c:	2b00      	cmp	r3, #0
 801496e:	d009      	beq.n	8014984 <f_lseek+0x486>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2201      	movs	r2, #1
 8014974:	755a      	strb	r2, [r3, #21]
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	2101      	movs	r1, #1
 801497a:	4618      	mov	r0, r3
 801497c:	f7fd fbff 	bl	801217e <unlock_fs>
 8014980:	2301      	movs	r3, #1
 8014982:	e00b      	b.n	801499c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014988:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8014990:	4611      	mov	r1, r2
 8014992:	4618      	mov	r0, r3
 8014994:	f7fd fbf3 	bl	801217e <unlock_fs>
 8014998:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801499c:	4618      	mov	r0, r3
 801499e:	3740      	adds	r7, #64	@ 0x40
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b096      	sub	sp, #88	@ 0x58
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80149ac:	f107 0108 	add.w	r1, r7, #8
 80149b0:	1d3b      	adds	r3, r7, #4
 80149b2:	2202      	movs	r2, #2
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7fe fd17 	bl	80133e8 <find_volume>
 80149ba:	4603      	mov	r3, r0
 80149bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80149c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f040 80ec 	bne.w	8014ba6 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80149ce:	687a      	ldr	r2, [r7, #4]
 80149d0:	f107 030c 	add.w	r3, r7, #12
 80149d4:	4611      	mov	r1, r2
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7fe fbfa 	bl	80131d0 <follow_path>
 80149dc:	4603      	mov	r3, r0
 80149de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80149e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d102      	bne.n	80149f0 <f_mkdir+0x4c>
 80149ea:	2308      	movs	r3, #8
 80149ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80149f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80149f4:	2b04      	cmp	r3, #4
 80149f6:	f040 80d6 	bne.w	8014ba6 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80149fa:	f107 030c 	add.w	r3, r7, #12
 80149fe:	2100      	movs	r1, #0
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7fe f838 	bl	8012a76 <create_chain>
 8014a06:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	895b      	ldrh	r3, [r3, #10]
 8014a0c:	025b      	lsls	r3, r3, #9
 8014a0e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014a10:	2300      	movs	r3, #0
 8014a12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d102      	bne.n	8014a22 <f_mkdir+0x7e>
 8014a1c:	2307      	movs	r3, #7
 8014a1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d102      	bne.n	8014a2e <f_mkdir+0x8a>
 8014a28:	2302      	movs	r3, #2
 8014a2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a34:	d102      	bne.n	8014a3c <f_mkdir+0x98>
 8014a36:	2301      	movs	r3, #1
 8014a38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d106      	bne.n	8014a52 <f_mkdir+0xae>
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7fd fd20 	bl	801248c <sync_window>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8014a52:	f7fb f9c3 	bl	800fddc <get_fattime>
 8014a56:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014a58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d16a      	bne.n	8014b36 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fd fdf1 	bl	801264c <clust2sect>
 8014a6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	3334      	adds	r3, #52	@ 0x34
 8014a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8014a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a76:	2100      	movs	r1, #0
 8014a78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014a7a:	f7fd fb0d 	bl	8012098 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014a7e:	220b      	movs	r2, #11
 8014a80:	2120      	movs	r1, #32
 8014a82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014a84:	f7fd fb08 	bl	8012098 <mem_set>
					dir[DIR_Name] = '.';
 8014a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a8a:	222e      	movs	r2, #46	@ 0x2e
 8014a8c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a90:	330b      	adds	r3, #11
 8014a92:	2210      	movs	r2, #16
 8014a94:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a98:	3316      	adds	r3, #22
 8014a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7fd faae 	bl	8011ffe <st_dword>
					st_clust(fs, dir, dcl);
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014aa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7fe fa56 	bl	8012f5a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ab0:	3320      	adds	r3, #32
 8014ab2:	2220      	movs	r2, #32
 8014ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fd facd 	bl	8012056 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014abe:	3321      	adds	r3, #33	@ 0x21
 8014ac0:	222e      	movs	r2, #46	@ 0x2e
 8014ac2:	701a      	strb	r2, [r3, #0]
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	2b03      	cmp	r3, #3
 8014ace:	d106      	bne.n	8014ade <f_mkdir+0x13a>
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d101      	bne.n	8014ade <f_mkdir+0x13a>
 8014ada:	2300      	movs	r3, #0
 8014adc:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014ade:	68b8      	ldr	r0, [r7, #8]
 8014ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ae2:	3320      	adds	r3, #32
 8014ae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	f7fe fa37 	bl	8012f5a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	895b      	ldrh	r3, [r3, #10]
 8014af0:	653b      	str	r3, [r7, #80]	@ 0x50
 8014af2:	e01b      	b.n	8014b2c <f_mkdir+0x188>
					fs->winsect = dsc++;
 8014af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014af6:	1c5a      	adds	r2, r3, #1
 8014af8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8014afa:	68ba      	ldr	r2, [r7, #8]
 8014afc:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	2201      	movs	r2, #1
 8014b02:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7fd fcc0 	bl	801248c <sync_window>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8014b12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d10c      	bne.n	8014b34 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8014b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b1e:	2100      	movs	r1, #0
 8014b20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014b22:	f7fd fab9 	bl	8012098 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8014b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d1e0      	bne.n	8014af4 <f_mkdir+0x150>
 8014b32:	e000      	b.n	8014b36 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8014b34:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014b36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d107      	bne.n	8014b4e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014b3e:	f107 030c 	add.w	r3, r7, #12
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7fe fa7e 	bl	8013044 <dir_register>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8014b4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d120      	bne.n	8014b98 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b5c:	3316      	adds	r3, #22
 8014b5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7fd fa4c 	bl	8011ffe <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014b6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7fe f9f4 	bl	8012f5a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b74:	330b      	adds	r3, #11
 8014b76:	2210      	movs	r2, #16
 8014b78:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014b80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d10e      	bne.n	8014ba6 <f_mkdir+0x202>
					res = sync_fs(fs);
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7fd fcf0 	bl	8012570 <sync_fs>
 8014b90:	4603      	mov	r3, r0
 8014b92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8014b96:	e006      	b.n	8014ba6 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014b98:	f107 030c 	add.w	r3, r7, #12
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7fd ff03 	bl	80129ac <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8014bac:	4611      	mov	r1, r2
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7fd fae5 	bl	801217e <unlock_fs>
 8014bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3758      	adds	r7, #88	@ 0x58
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}

08014bc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b087      	sub	sp, #28
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	60f8      	str	r0, [r7, #12]
 8014bc8:	60b9      	str	r1, [r7, #8]
 8014bca:	4613      	mov	r3, r2
 8014bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014bd8:	7a5b      	ldrb	r3, [r3, #9]
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d131      	bne.n	8014c44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014be0:	4b1c      	ldr	r3, [pc, #112]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014be2:	7a5b      	ldrb	r3, [r3, #9]
 8014be4:	b2db      	uxtb	r3, r3
 8014be6:	461a      	mov	r2, r3
 8014be8:	4b1a      	ldr	r3, [pc, #104]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014bea:	2100      	movs	r1, #0
 8014bec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014bee:	4b19      	ldr	r3, [pc, #100]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014bf0:	7a5b      	ldrb	r3, [r3, #9]
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	4a17      	ldr	r2, [pc, #92]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	4413      	add	r3, r2
 8014bfa:	68fa      	ldr	r2, [r7, #12]
 8014bfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014bfe:	4b15      	ldr	r3, [pc, #84]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014c00:	7a5b      	ldrb	r3, [r3, #9]
 8014c02:	b2db      	uxtb	r3, r3
 8014c04:	461a      	mov	r2, r3
 8014c06:	4b13      	ldr	r3, [pc, #76]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014c08:	4413      	add	r3, r2
 8014c0a:	79fa      	ldrb	r2, [r7, #7]
 8014c0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014c0e:	4b11      	ldr	r3, [pc, #68]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014c10:	7a5b      	ldrb	r3, [r3, #9]
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	1c5a      	adds	r2, r3, #1
 8014c16:	b2d1      	uxtb	r1, r2
 8014c18:	4a0e      	ldr	r2, [pc, #56]	@ (8014c54 <FATFS_LinkDriverEx+0x94>)
 8014c1a:	7251      	strb	r1, [r2, #9]
 8014c1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014c1e:	7dbb      	ldrb	r3, [r7, #22]
 8014c20:	3330      	adds	r3, #48	@ 0x30
 8014c22:	b2da      	uxtb	r2, r3
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	223a      	movs	r2, #58	@ 0x3a
 8014c2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	3302      	adds	r3, #2
 8014c34:	222f      	movs	r2, #47	@ 0x2f
 8014c36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	3303      	adds	r3, #3
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014c40:	2300      	movs	r3, #0
 8014c42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	371c      	adds	r7, #28
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	24002f28 	.word	0x24002f28

08014c58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014c62:	2200      	movs	r2, #0
 8014c64:	6839      	ldr	r1, [r7, #0]
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f7ff ffaa 	bl	8014bc0 <FATFS_LinkDriverEx>
 8014c6c:	4603      	mov	r3, r0
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3708      	adds	r7, #8
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b086      	sub	sp, #24
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	6039      	str	r1, [r7, #0]
 8014c80:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8014c82:	2300      	movs	r3, #0
 8014c84:	60fb      	str	r3, [r7, #12]
 8014c86:	2300      	movs	r3, #0
 8014c88:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8014c8a:	f107 030c 	add.w	r3, r7, #12
 8014c8e:	2101      	movs	r1, #1
 8014c90:	4618      	mov	r0, r3
 8014c92:	f000 f8cd 	bl	8014e30 <osSemaphoreCreate>
 8014c96:	4602      	mov	r2, r0
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	bf14      	ite	ne
 8014ca4:	2301      	movne	r3, #1
 8014ca6:	2300      	moveq	r3, #0
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	617b      	str	r3, [r7, #20]

    return ret;
 8014cac:	697b      	ldr	r3, [r7, #20]
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3718      	adds	r7, #24
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}

08014cb6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014cb6:	b580      	push	{r7, lr}
 8014cb8:	b082      	sub	sp, #8
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f000 f96c 	bl	8014f9c <osSemaphoreDelete>
#endif
    return 1;
 8014cc4:	2301      	movs	r3, #1
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3708      	adds	r7, #8
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}

08014cce <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8014cce:	b580      	push	{r7, lr}
 8014cd0:	b084      	sub	sp, #16
 8014cd2:	af00      	add	r7, sp, #0
 8014cd4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8014cda:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f000 f8d8 	bl	8014e94 <osSemaphoreWait>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d101      	bne.n	8014cee <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8014cea:	2301      	movs	r3, #1
 8014cec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014cee:	68fb      	ldr	r3, [r7, #12]
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3710      	adds	r7, #16
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f000 f915 	bl	8014f30 <osSemaphoreRelease>
#endif
}
 8014d06:	bf00      	nop
 8014d08:	3708      	adds	r7, #8
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}

08014d0e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014d0e:	b480      	push	{r7}
 8014d10:	b085      	sub	sp, #20
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	4603      	mov	r3, r0
 8014d16:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d20:	2b84      	cmp	r3, #132	@ 0x84
 8014d22:	d005      	beq.n	8014d30 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014d24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	4413      	add	r3, r2
 8014d2c:	3303      	adds	r3, #3
 8014d2e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014d30:	68fb      	ldr	r3, [r7, #12]
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3714      	adds	r7, #20
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr

08014d3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014d3e:	b480      	push	{r7}
 8014d40:	b083      	sub	sp, #12
 8014d42:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d44:	f3ef 8305 	mrs	r3, IPSR
 8014d48:	607b      	str	r3, [r7, #4]
  return(result);
 8014d4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	bf14      	ite	ne
 8014d50:	2301      	movne	r3, #1
 8014d52:	2300      	moveq	r3, #0
 8014d54:	b2db      	uxtb	r3, r3
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014d62:	b580      	push	{r7, lr}
 8014d64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014d66:	f001 f9ab 	bl	80160c0 <vTaskStartScheduler>
  
  return osOK;
 8014d6a:	2300      	movs	r3, #0
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d72:	b089      	sub	sp, #36	@ 0x24
 8014d74:	af04      	add	r7, sp, #16
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	695b      	ldr	r3, [r3, #20]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d020      	beq.n	8014dc4 <osThreadCreate+0x54>
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	699b      	ldr	r3, [r3, #24]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d01c      	beq.n	8014dc4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	685c      	ldr	r4, [r3, #4]
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	691e      	ldr	r6, [r3, #16]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7ff ffb6 	bl	8014d0e <makeFreeRtosPriority>
 8014da2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	695b      	ldr	r3, [r3, #20]
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014dac:	9202      	str	r2, [sp, #8]
 8014dae:	9301      	str	r3, [sp, #4]
 8014db0:	9100      	str	r1, [sp, #0]
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	4632      	mov	r2, r6
 8014db6:	4629      	mov	r1, r5
 8014db8:	4620      	mov	r0, r4
 8014dba:	f000 ff93 	bl	8015ce4 <xTaskCreateStatic>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	60fb      	str	r3, [r7, #12]
 8014dc2:	e01c      	b.n	8014dfe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	685c      	ldr	r4, [r3, #4]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014dd0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7ff ff98 	bl	8014d0e <makeFreeRtosPriority>
 8014dde:	4602      	mov	r2, r0
 8014de0:	f107 030c 	add.w	r3, r7, #12
 8014de4:	9301      	str	r3, [sp, #4]
 8014de6:	9200      	str	r2, [sp, #0]
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	4632      	mov	r2, r6
 8014dec:	4629      	mov	r1, r5
 8014dee:	4620      	mov	r0, r4
 8014df0:	f000 ffd8 	bl	8015da4 <xTaskCreate>
 8014df4:	4603      	mov	r3, r0
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d001      	beq.n	8014dfe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	e000      	b.n	8014e00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3714      	adds	r7, #20
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d001      	beq.n	8014e1e <osDelay+0x16>
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	e000      	b.n	8014e20 <osDelay+0x18>
 8014e1e:	2301      	movs	r3, #1
 8014e20:	4618      	mov	r0, r3
 8014e22:	f001 f917 	bl	8016054 <vTaskDelay>
  
  return osOK;
 8014e26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3710      	adds	r7, #16
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}

08014e30 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b086      	sub	sp, #24
 8014e34:	af02      	add	r7, sp, #8
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d00f      	beq.n	8014e62 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d10a      	bne.n	8014e5e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	2203      	movs	r2, #3
 8014e4e:	9200      	str	r2, [sp, #0]
 8014e50:	2200      	movs	r2, #0
 8014e52:	2100      	movs	r1, #0
 8014e54:	2001      	movs	r0, #1
 8014e56:	f000 f9d3 	bl	8015200 <xQueueGenericCreateStatic>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	e016      	b.n	8014e8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	e014      	b.n	8014e8c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	2b01      	cmp	r3, #1
 8014e66:	d110      	bne.n	8014e8a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8014e68:	2203      	movs	r2, #3
 8014e6a:	2100      	movs	r1, #0
 8014e6c:	2001      	movs	r0, #1
 8014e6e:	f000 fa44 	bl	80152fa <xQueueGenericCreate>
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d005      	beq.n	8014e86 <osSemaphoreCreate+0x56>
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	2100      	movs	r1, #0
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f000 fa95 	bl	80153b0 <xQueueGenericSend>
      return sema;
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	e000      	b.n	8014e8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8014e8a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3710      	adds	r7, #16
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d101      	bne.n	8014eac <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014ea8:	2380      	movs	r3, #128	@ 0x80
 8014eaa:	e03a      	b.n	8014f22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8014eac:	2300      	movs	r3, #0
 8014eae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eb6:	d103      	bne.n	8014ec0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ebc:	60fb      	str	r3, [r7, #12]
 8014ebe:	e009      	b.n	8014ed4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d006      	beq.n	8014ed4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d101      	bne.n	8014ed4 <osSemaphoreWait+0x40>
      ticks = 1;
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014ed4:	f7ff ff33 	bl	8014d3e <inHandlerMode>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d017      	beq.n	8014f0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014ede:	f107 0308 	add.w	r3, r7, #8
 8014ee2:	461a      	mov	r2, r3
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f000 fd04 	bl	80158f4 <xQueueReceiveFromISR>
 8014eec:	4603      	mov	r3, r0
 8014eee:	2b01      	cmp	r3, #1
 8014ef0:	d001      	beq.n	8014ef6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8014ef2:	23ff      	movs	r3, #255	@ 0xff
 8014ef4:	e015      	b.n	8014f22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d011      	beq.n	8014f20 <osSemaphoreWait+0x8c>
 8014efc:	4b0b      	ldr	r3, [pc, #44]	@ (8014f2c <osSemaphoreWait+0x98>)
 8014efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f02:	601a      	str	r2, [r3, #0]
 8014f04:	f3bf 8f4f 	dsb	sy
 8014f08:	f3bf 8f6f 	isb	sy
 8014f0c:	e008      	b.n	8014f20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014f0e:	68f9      	ldr	r1, [r7, #12]
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 fbdf 	bl	80156d4 <xQueueSemaphoreTake>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d001      	beq.n	8014f20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014f1c:	23ff      	movs	r3, #255	@ 0xff
 8014f1e:	e000      	b.n	8014f22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014f20:	2300      	movs	r3, #0
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3710      	adds	r7, #16
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	e000ed04 	.word	0xe000ed04

08014f30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014f40:	f7ff fefd 	bl	8014d3e <inHandlerMode>
 8014f44:	4603      	mov	r3, r0
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d016      	beq.n	8014f78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014f4a:	f107 0308 	add.w	r3, r7, #8
 8014f4e:	4619      	mov	r1, r3
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f000 fb2f 	bl	80155b4 <xQueueGiveFromISR>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d001      	beq.n	8014f60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014f5c:	23ff      	movs	r3, #255	@ 0xff
 8014f5e:	e017      	b.n	8014f90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d013      	beq.n	8014f8e <osSemaphoreRelease+0x5e>
 8014f66:	4b0c      	ldr	r3, [pc, #48]	@ (8014f98 <osSemaphoreRelease+0x68>)
 8014f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f6c:	601a      	str	r2, [r3, #0]
 8014f6e:	f3bf 8f4f 	dsb	sy
 8014f72:	f3bf 8f6f 	isb	sy
 8014f76:	e00a      	b.n	8014f8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014f78:	2300      	movs	r3, #0
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f000 fa16 	bl	80153b0 <xQueueGenericSend>
 8014f84:	4603      	mov	r3, r0
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d001      	beq.n	8014f8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014f8a:	23ff      	movs	r3, #255	@ 0xff
 8014f8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3710      	adds	r7, #16
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	e000ed04 	.word	0xe000ed04

08014f9c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014fa4:	f7ff fecb 	bl	8014d3e <inHandlerMode>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d001      	beq.n	8014fb2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8014fae:	2382      	movs	r3, #130	@ 0x82
 8014fb0:	e003      	b.n	8014fba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 fd20 	bl	80159f8 <vQueueDelete>

  return osOK; 
 8014fb8:	2300      	movs	r3, #0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3708      	adds	r7, #8
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014fc2:	b480      	push	{r7}
 8014fc4:	b083      	sub	sp, #12
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f103 0208 	add.w	r2, r3, #8
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8014fda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f103 0208 	add.w	r2, r3, #8
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f103 0208 	add.w	r2, r3, #8
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014ff6:	bf00      	nop
 8014ff8:	370c      	adds	r7, #12
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015000:	4770      	bx	lr

08015002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015002:	b480      	push	{r7}
 8015004:	b083      	sub	sp, #12
 8015006:	af00      	add	r7, sp, #0
 8015008:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	2200      	movs	r2, #0
 801500e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015010:	bf00      	nop
 8015012:	370c      	adds	r7, #12
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr

0801501c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801501c:	b480      	push	{r7}
 801501e:	b085      	sub	sp, #20
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	68fa      	ldr	r2, [r7, #12]
 8015030:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	689a      	ldr	r2, [r3, #8]
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	683a      	ldr	r2, [r7, #0]
 8015040:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	683a      	ldr	r2, [r7, #0]
 8015046:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	1c5a      	adds	r2, r3, #1
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	601a      	str	r2, [r3, #0]
}
 8015058:	bf00      	nop
 801505a:	3714      	adds	r7, #20
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr

08015064 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015064:	b480      	push	{r7}
 8015066:	b085      	sub	sp, #20
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801507a:	d103      	bne.n	8015084 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	691b      	ldr	r3, [r3, #16]
 8015080:	60fb      	str	r3, [r7, #12]
 8015082:	e00c      	b.n	801509e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	3308      	adds	r3, #8
 8015088:	60fb      	str	r3, [r7, #12]
 801508a:	e002      	b.n	8015092 <vListInsert+0x2e>
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	60fb      	str	r3, [r7, #12]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	68ba      	ldr	r2, [r7, #8]
 801509a:	429a      	cmp	r2, r3
 801509c:	d2f6      	bcs.n	801508c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	685a      	ldr	r2, [r3, #4]
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	683a      	ldr	r2, [r7, #0]
 80150ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	68fa      	ldr	r2, [r7, #12]
 80150b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	683a      	ldr	r2, [r7, #0]
 80150b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	687a      	ldr	r2, [r7, #4]
 80150be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	1c5a      	adds	r2, r3, #1
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	601a      	str	r2, [r3, #0]
}
 80150ca:	bf00      	nop
 80150cc:	3714      	adds	r7, #20
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr

080150d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80150d6:	b480      	push	{r7}
 80150d8:	b085      	sub	sp, #20
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	691b      	ldr	r3, [r3, #16]
 80150e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	687a      	ldr	r2, [r7, #4]
 80150ea:	6892      	ldr	r2, [r2, #8]
 80150ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	689b      	ldr	r3, [r3, #8]
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	6852      	ldr	r2, [r2, #4]
 80150f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d103      	bne.n	801510a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	689a      	ldr	r2, [r3, #8]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	2200      	movs	r2, #0
 801510e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	1e5a      	subs	r2, r3, #1
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
}
 801511e:	4618      	mov	r0, r3
 8015120:	3714      	adds	r7, #20
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr
	...

0801512c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b084      	sub	sp, #16
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d10b      	bne.n	8015158 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015144:	f383 8811 	msr	BASEPRI, r3
 8015148:	f3bf 8f6f 	isb	sy
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015152:	bf00      	nop
 8015154:	bf00      	nop
 8015156:	e7fd      	b.n	8015154 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015158:	f001 ff26 	bl	8016fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015164:	68f9      	ldr	r1, [r7, #12]
 8015166:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015168:	fb01 f303 	mul.w	r3, r1, r3
 801516c:	441a      	add	r2, r3
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2200      	movs	r2, #0
 8015176:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015188:	3b01      	subs	r3, #1
 801518a:	68f9      	ldr	r1, [r7, #12]
 801518c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801518e:	fb01 f303 	mul.w	r3, r1, r3
 8015192:	441a      	add	r2, r3
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	22ff      	movs	r2, #255	@ 0xff
 801519c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	22ff      	movs	r2, #255	@ 0xff
 80151a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d114      	bne.n	80151d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	691b      	ldr	r3, [r3, #16]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d01a      	beq.n	80151ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	3310      	adds	r3, #16
 80151ba:	4618      	mov	r0, r3
 80151bc:	f001 f9da 	bl	8016574 <xTaskRemoveFromEventList>
 80151c0:	4603      	mov	r3, r0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d012      	beq.n	80151ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80151c6:	4b0d      	ldr	r3, [pc, #52]	@ (80151fc <xQueueGenericReset+0xd0>)
 80151c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151cc:	601a      	str	r2, [r3, #0]
 80151ce:	f3bf 8f4f 	dsb	sy
 80151d2:	f3bf 8f6f 	isb	sy
 80151d6:	e009      	b.n	80151ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	3310      	adds	r3, #16
 80151dc:	4618      	mov	r0, r3
 80151de:	f7ff fef0 	bl	8014fc2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	3324      	adds	r3, #36	@ 0x24
 80151e6:	4618      	mov	r0, r3
 80151e8:	f7ff feeb 	bl	8014fc2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80151ec:	f001 ff0e 	bl	801700c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80151f0:	2301      	movs	r3, #1
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3710      	adds	r7, #16
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	e000ed04 	.word	0xe000ed04

08015200 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015200:	b580      	push	{r7, lr}
 8015202:	b08e      	sub	sp, #56	@ 0x38
 8015204:	af02      	add	r7, sp, #8
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	607a      	str	r2, [r7, #4]
 801520c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d10b      	bne.n	801522c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8015214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015218:	f383 8811 	msr	BASEPRI, r3
 801521c:	f3bf 8f6f 	isb	sy
 8015220:	f3bf 8f4f 	dsb	sy
 8015224:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015226:	bf00      	nop
 8015228:	bf00      	nop
 801522a:	e7fd      	b.n	8015228 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d10b      	bne.n	801524a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8015232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015236:	f383 8811 	msr	BASEPRI, r3
 801523a:	f3bf 8f6f 	isb	sy
 801523e:	f3bf 8f4f 	dsb	sy
 8015242:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015244:	bf00      	nop
 8015246:	bf00      	nop
 8015248:	e7fd      	b.n	8015246 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d002      	beq.n	8015256 <xQueueGenericCreateStatic+0x56>
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d001      	beq.n	801525a <xQueueGenericCreateStatic+0x5a>
 8015256:	2301      	movs	r3, #1
 8015258:	e000      	b.n	801525c <xQueueGenericCreateStatic+0x5c>
 801525a:	2300      	movs	r3, #0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d10b      	bne.n	8015278 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8015260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015264:	f383 8811 	msr	BASEPRI, r3
 8015268:	f3bf 8f6f 	isb	sy
 801526c:	f3bf 8f4f 	dsb	sy
 8015270:	623b      	str	r3, [r7, #32]
}
 8015272:	bf00      	nop
 8015274:	bf00      	nop
 8015276:	e7fd      	b.n	8015274 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d102      	bne.n	8015284 <xQueueGenericCreateStatic+0x84>
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d101      	bne.n	8015288 <xQueueGenericCreateStatic+0x88>
 8015284:	2301      	movs	r3, #1
 8015286:	e000      	b.n	801528a <xQueueGenericCreateStatic+0x8a>
 8015288:	2300      	movs	r3, #0
 801528a:	2b00      	cmp	r3, #0
 801528c:	d10b      	bne.n	80152a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015292:	f383 8811 	msr	BASEPRI, r3
 8015296:	f3bf 8f6f 	isb	sy
 801529a:	f3bf 8f4f 	dsb	sy
 801529e:	61fb      	str	r3, [r7, #28]
}
 80152a0:	bf00      	nop
 80152a2:	bf00      	nop
 80152a4:	e7fd      	b.n	80152a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80152a6:	2348      	movs	r3, #72	@ 0x48
 80152a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	2b48      	cmp	r3, #72	@ 0x48
 80152ae:	d00b      	beq.n	80152c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80152b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152b4:	f383 8811 	msr	BASEPRI, r3
 80152b8:	f3bf 8f6f 	isb	sy
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	61bb      	str	r3, [r7, #24]
}
 80152c2:	bf00      	nop
 80152c4:	bf00      	nop
 80152c6:	e7fd      	b.n	80152c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80152c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80152ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d00d      	beq.n	80152f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80152d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d6:	2201      	movs	r2, #1
 80152d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80152dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80152e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	4613      	mov	r3, r2
 80152e6:	687a      	ldr	r2, [r7, #4]
 80152e8:	68b9      	ldr	r1, [r7, #8]
 80152ea:	68f8      	ldr	r0, [r7, #12]
 80152ec:	f000 f840 	bl	8015370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80152f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3730      	adds	r7, #48	@ 0x30
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b08a      	sub	sp, #40	@ 0x28
 80152fe:	af02      	add	r7, sp, #8
 8015300:	60f8      	str	r0, [r7, #12]
 8015302:	60b9      	str	r1, [r7, #8]
 8015304:	4613      	mov	r3, r2
 8015306:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d10b      	bne.n	8015326 <xQueueGenericCreate+0x2c>
	__asm volatile
 801530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015312:	f383 8811 	msr	BASEPRI, r3
 8015316:	f3bf 8f6f 	isb	sy
 801531a:	f3bf 8f4f 	dsb	sy
 801531e:	613b      	str	r3, [r7, #16]
}
 8015320:	bf00      	nop
 8015322:	bf00      	nop
 8015324:	e7fd      	b.n	8015322 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	68ba      	ldr	r2, [r7, #8]
 801532a:	fb02 f303 	mul.w	r3, r2, r3
 801532e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	3348      	adds	r3, #72	@ 0x48
 8015334:	4618      	mov	r0, r3
 8015336:	f001 ff59 	bl	80171ec <pvPortMalloc>
 801533a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d011      	beq.n	8015366 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	3348      	adds	r3, #72	@ 0x48
 801534a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801534c:	69bb      	ldr	r3, [r7, #24]
 801534e:	2200      	movs	r2, #0
 8015350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015354:	79fa      	ldrb	r2, [r7, #7]
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	4613      	mov	r3, r2
 801535c:	697a      	ldr	r2, [r7, #20]
 801535e:	68b9      	ldr	r1, [r7, #8]
 8015360:	68f8      	ldr	r0, [r7, #12]
 8015362:	f000 f805 	bl	8015370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015366:	69bb      	ldr	r3, [r7, #24]
	}
 8015368:	4618      	mov	r0, r3
 801536a:	3720      	adds	r7, #32
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b084      	sub	sp, #16
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	607a      	str	r2, [r7, #4]
 801537c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d103      	bne.n	801538c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	69ba      	ldr	r2, [r7, #24]
 8015388:	601a      	str	r2, [r3, #0]
 801538a:	e002      	b.n	8015392 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801538c:	69bb      	ldr	r3, [r7, #24]
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015392:	69bb      	ldr	r3, [r7, #24]
 8015394:	68fa      	ldr	r2, [r7, #12]
 8015396:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015398:	69bb      	ldr	r3, [r7, #24]
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801539e:	2101      	movs	r1, #1
 80153a0:	69b8      	ldr	r0, [r7, #24]
 80153a2:	f7ff fec3 	bl	801512c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80153a6:	bf00      	nop
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
	...

080153b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b08e      	sub	sp, #56	@ 0x38
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	607a      	str	r2, [r7, #4]
 80153bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80153be:	2300      	movs	r3, #0
 80153c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80153c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d10b      	bne.n	80153e4 <xQueueGenericSend+0x34>
	__asm volatile
 80153cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153d0:	f383 8811 	msr	BASEPRI, r3
 80153d4:	f3bf 8f6f 	isb	sy
 80153d8:	f3bf 8f4f 	dsb	sy
 80153dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80153de:	bf00      	nop
 80153e0:	bf00      	nop
 80153e2:	e7fd      	b.n	80153e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d103      	bne.n	80153f2 <xQueueGenericSend+0x42>
 80153ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d101      	bne.n	80153f6 <xQueueGenericSend+0x46>
 80153f2:	2301      	movs	r3, #1
 80153f4:	e000      	b.n	80153f8 <xQueueGenericSend+0x48>
 80153f6:	2300      	movs	r3, #0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d10b      	bne.n	8015414 <xQueueGenericSend+0x64>
	__asm volatile
 80153fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015400:	f383 8811 	msr	BASEPRI, r3
 8015404:	f3bf 8f6f 	isb	sy
 8015408:	f3bf 8f4f 	dsb	sy
 801540c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801540e:	bf00      	nop
 8015410:	bf00      	nop
 8015412:	e7fd      	b.n	8015410 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	2b02      	cmp	r3, #2
 8015418:	d103      	bne.n	8015422 <xQueueGenericSend+0x72>
 801541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801541e:	2b01      	cmp	r3, #1
 8015420:	d101      	bne.n	8015426 <xQueueGenericSend+0x76>
 8015422:	2301      	movs	r3, #1
 8015424:	e000      	b.n	8015428 <xQueueGenericSend+0x78>
 8015426:	2300      	movs	r3, #0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d10b      	bne.n	8015444 <xQueueGenericSend+0x94>
	__asm volatile
 801542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015430:	f383 8811 	msr	BASEPRI, r3
 8015434:	f3bf 8f6f 	isb	sy
 8015438:	f3bf 8f4f 	dsb	sy
 801543c:	623b      	str	r3, [r7, #32]
}
 801543e:	bf00      	nop
 8015440:	bf00      	nop
 8015442:	e7fd      	b.n	8015440 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015444:	f001 fa5c 	bl	8016900 <xTaskGetSchedulerState>
 8015448:	4603      	mov	r3, r0
 801544a:	2b00      	cmp	r3, #0
 801544c:	d102      	bne.n	8015454 <xQueueGenericSend+0xa4>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d101      	bne.n	8015458 <xQueueGenericSend+0xa8>
 8015454:	2301      	movs	r3, #1
 8015456:	e000      	b.n	801545a <xQueueGenericSend+0xaa>
 8015458:	2300      	movs	r3, #0
 801545a:	2b00      	cmp	r3, #0
 801545c:	d10b      	bne.n	8015476 <xQueueGenericSend+0xc6>
	__asm volatile
 801545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015462:	f383 8811 	msr	BASEPRI, r3
 8015466:	f3bf 8f6f 	isb	sy
 801546a:	f3bf 8f4f 	dsb	sy
 801546e:	61fb      	str	r3, [r7, #28]
}
 8015470:	bf00      	nop
 8015472:	bf00      	nop
 8015474:	e7fd      	b.n	8015472 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015476:	f001 fd97 	bl	8016fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801547c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015482:	429a      	cmp	r2, r3
 8015484:	d302      	bcc.n	801548c <xQueueGenericSend+0xdc>
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	2b02      	cmp	r3, #2
 801548a:	d129      	bne.n	80154e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801548c:	683a      	ldr	r2, [r7, #0]
 801548e:	68b9      	ldr	r1, [r7, #8]
 8015490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015492:	f000 faed 	bl	8015a70 <prvCopyDataToQueue>
 8015496:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801549c:	2b00      	cmp	r3, #0
 801549e:	d010      	beq.n	80154c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80154a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a2:	3324      	adds	r3, #36	@ 0x24
 80154a4:	4618      	mov	r0, r3
 80154a6:	f001 f865 	bl	8016574 <xTaskRemoveFromEventList>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d013      	beq.n	80154d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80154b0:	4b3f      	ldr	r3, [pc, #252]	@ (80155b0 <xQueueGenericSend+0x200>)
 80154b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80154b6:	601a      	str	r2, [r3, #0]
 80154b8:	f3bf 8f4f 	dsb	sy
 80154bc:	f3bf 8f6f 	isb	sy
 80154c0:	e00a      	b.n	80154d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80154c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d007      	beq.n	80154d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80154c8:	4b39      	ldr	r3, [pc, #228]	@ (80155b0 <xQueueGenericSend+0x200>)
 80154ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80154ce:	601a      	str	r2, [r3, #0]
 80154d0:	f3bf 8f4f 	dsb	sy
 80154d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80154d8:	f001 fd98 	bl	801700c <vPortExitCritical>
				return pdPASS;
 80154dc:	2301      	movs	r3, #1
 80154de:	e063      	b.n	80155a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d103      	bne.n	80154ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80154e6:	f001 fd91 	bl	801700c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80154ea:	2300      	movs	r3, #0
 80154ec:	e05c      	b.n	80155a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80154ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d106      	bne.n	8015502 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80154f4:	f107 0314 	add.w	r3, r7, #20
 80154f8:	4618      	mov	r0, r3
 80154fa:	f001 f89f 	bl	801663c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80154fe:	2301      	movs	r3, #1
 8015500:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015502:	f001 fd83 	bl	801700c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015506:	f000 fe45 	bl	8016194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801550a:	f001 fd4d 	bl	8016fa8 <vPortEnterCritical>
 801550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015514:	b25b      	sxtb	r3, r3
 8015516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801551a:	d103      	bne.n	8015524 <xQueueGenericSend+0x174>
 801551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801551e:	2200      	movs	r2, #0
 8015520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801552a:	b25b      	sxtb	r3, r3
 801552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015530:	d103      	bne.n	801553a <xQueueGenericSend+0x18a>
 8015532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015534:	2200      	movs	r2, #0
 8015536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801553a:	f001 fd67 	bl	801700c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801553e:	1d3a      	adds	r2, r7, #4
 8015540:	f107 0314 	add.w	r3, r7, #20
 8015544:	4611      	mov	r1, r2
 8015546:	4618      	mov	r0, r3
 8015548:	f001 f88e 	bl	8016668 <xTaskCheckForTimeOut>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d124      	bne.n	801559c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015554:	f000 fb84 	bl	8015c60 <prvIsQueueFull>
 8015558:	4603      	mov	r3, r0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d018      	beq.n	8015590 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015560:	3310      	adds	r3, #16
 8015562:	687a      	ldr	r2, [r7, #4]
 8015564:	4611      	mov	r1, r2
 8015566:	4618      	mov	r0, r3
 8015568:	f000 ffde 	bl	8016528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801556c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801556e:	f000 fb0f 	bl	8015b90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015572:	f000 fe1d 	bl	80161b0 <xTaskResumeAll>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	f47f af7c 	bne.w	8015476 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801557e:	4b0c      	ldr	r3, [pc, #48]	@ (80155b0 <xQueueGenericSend+0x200>)
 8015580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015584:	601a      	str	r2, [r3, #0]
 8015586:	f3bf 8f4f 	dsb	sy
 801558a:	f3bf 8f6f 	isb	sy
 801558e:	e772      	b.n	8015476 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015592:	f000 fafd 	bl	8015b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015596:	f000 fe0b 	bl	80161b0 <xTaskResumeAll>
 801559a:	e76c      	b.n	8015476 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801559c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801559e:	f000 faf7 	bl	8015b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80155a2:	f000 fe05 	bl	80161b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80155a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3738      	adds	r7, #56	@ 0x38
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	e000ed04 	.word	0xe000ed04

080155b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b08e      	sub	sp, #56	@ 0x38
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80155c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d10b      	bne.n	80155e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80155c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155cc:	f383 8811 	msr	BASEPRI, r3
 80155d0:	f3bf 8f6f 	isb	sy
 80155d4:	f3bf 8f4f 	dsb	sy
 80155d8:	623b      	str	r3, [r7, #32]
}
 80155da:	bf00      	nop
 80155dc:	bf00      	nop
 80155de:	e7fd      	b.n	80155dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80155e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00b      	beq.n	8015600 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80155e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155ec:	f383 8811 	msr	BASEPRI, r3
 80155f0:	f3bf 8f6f 	isb	sy
 80155f4:	f3bf 8f4f 	dsb	sy
 80155f8:	61fb      	str	r3, [r7, #28]
}
 80155fa:	bf00      	nop
 80155fc:	bf00      	nop
 80155fe:	e7fd      	b.n	80155fc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d103      	bne.n	8015610 <xQueueGiveFromISR+0x5c>
 8015608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801560a:	689b      	ldr	r3, [r3, #8]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d101      	bne.n	8015614 <xQueueGiveFromISR+0x60>
 8015610:	2301      	movs	r3, #1
 8015612:	e000      	b.n	8015616 <xQueueGiveFromISR+0x62>
 8015614:	2300      	movs	r3, #0
 8015616:	2b00      	cmp	r3, #0
 8015618:	d10b      	bne.n	8015632 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801561a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801561e:	f383 8811 	msr	BASEPRI, r3
 8015622:	f3bf 8f6f 	isb	sy
 8015626:	f3bf 8f4f 	dsb	sy
 801562a:	61bb      	str	r3, [r7, #24]
}
 801562c:	bf00      	nop
 801562e:	bf00      	nop
 8015630:	e7fd      	b.n	801562e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015632:	f001 fd99 	bl	8017168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015636:	f3ef 8211 	mrs	r2, BASEPRI
 801563a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801563e:	f383 8811 	msr	BASEPRI, r3
 8015642:	f3bf 8f6f 	isb	sy
 8015646:	f3bf 8f4f 	dsb	sy
 801564a:	617a      	str	r2, [r7, #20]
 801564c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801564e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015650:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015656:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801565c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801565e:	429a      	cmp	r2, r3
 8015660:	d22b      	bcs.n	80156ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801566e:	1c5a      	adds	r2, r3, #1
 8015670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015672:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015674:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015678:	f1b3 3fff 	cmp.w	r3, #4294967295
 801567c:	d112      	bne.n	80156a4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015682:	2b00      	cmp	r3, #0
 8015684:	d016      	beq.n	80156b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015688:	3324      	adds	r3, #36	@ 0x24
 801568a:	4618      	mov	r0, r3
 801568c:	f000 ff72 	bl	8016574 <xTaskRemoveFromEventList>
 8015690:	4603      	mov	r3, r0
 8015692:	2b00      	cmp	r3, #0
 8015694:	d00e      	beq.n	80156b4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d00b      	beq.n	80156b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	2201      	movs	r2, #1
 80156a0:	601a      	str	r2, [r3, #0]
 80156a2:	e007      	b.n	80156b4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80156a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80156a8:	3301      	adds	r3, #1
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	b25a      	sxtb	r2, r3
 80156ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80156b4:	2301      	movs	r3, #1
 80156b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80156b8:	e001      	b.n	80156be <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80156ba:	2300      	movs	r3, #0
 80156bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80156be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156c0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80156c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80156ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3738      	adds	r7, #56	@ 0x38
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b08e      	sub	sp, #56	@ 0x38
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80156de:	2300      	movs	r3, #0
 80156e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80156e6:	2300      	movs	r3, #0
 80156e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80156ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d10b      	bne.n	8015708 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80156f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156f4:	f383 8811 	msr	BASEPRI, r3
 80156f8:	f3bf 8f6f 	isb	sy
 80156fc:	f3bf 8f4f 	dsb	sy
 8015700:	623b      	str	r3, [r7, #32]
}
 8015702:	bf00      	nop
 8015704:	bf00      	nop
 8015706:	e7fd      	b.n	8015704 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801570c:	2b00      	cmp	r3, #0
 801570e:	d00b      	beq.n	8015728 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8015710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015714:	f383 8811 	msr	BASEPRI, r3
 8015718:	f3bf 8f6f 	isb	sy
 801571c:	f3bf 8f4f 	dsb	sy
 8015720:	61fb      	str	r3, [r7, #28]
}
 8015722:	bf00      	nop
 8015724:	bf00      	nop
 8015726:	e7fd      	b.n	8015724 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015728:	f001 f8ea 	bl	8016900 <xTaskGetSchedulerState>
 801572c:	4603      	mov	r3, r0
 801572e:	2b00      	cmp	r3, #0
 8015730:	d102      	bne.n	8015738 <xQueueSemaphoreTake+0x64>
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d101      	bne.n	801573c <xQueueSemaphoreTake+0x68>
 8015738:	2301      	movs	r3, #1
 801573a:	e000      	b.n	801573e <xQueueSemaphoreTake+0x6a>
 801573c:	2300      	movs	r3, #0
 801573e:	2b00      	cmp	r3, #0
 8015740:	d10b      	bne.n	801575a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8015742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015746:	f383 8811 	msr	BASEPRI, r3
 801574a:	f3bf 8f6f 	isb	sy
 801574e:	f3bf 8f4f 	dsb	sy
 8015752:	61bb      	str	r3, [r7, #24]
}
 8015754:	bf00      	nop
 8015756:	bf00      	nop
 8015758:	e7fd      	b.n	8015756 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801575a:	f001 fc25 	bl	8016fa8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801575e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015762:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015766:	2b00      	cmp	r3, #0
 8015768:	d024      	beq.n	80157b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801576c:	1e5a      	subs	r2, r3, #1
 801576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015770:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d104      	bne.n	8015784 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801577a:	f001 fa6d 	bl	8016c58 <pvTaskIncrementMutexHeldCount>
 801577e:	4602      	mov	r2, r0
 8015780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015782:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015786:	691b      	ldr	r3, [r3, #16]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d00f      	beq.n	80157ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801578c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801578e:	3310      	adds	r3, #16
 8015790:	4618      	mov	r0, r3
 8015792:	f000 feef 	bl	8016574 <xTaskRemoveFromEventList>
 8015796:	4603      	mov	r3, r0
 8015798:	2b00      	cmp	r3, #0
 801579a:	d007      	beq.n	80157ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801579c:	4b54      	ldr	r3, [pc, #336]	@ (80158f0 <xQueueSemaphoreTake+0x21c>)
 801579e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157a2:	601a      	str	r2, [r3, #0]
 80157a4:	f3bf 8f4f 	dsb	sy
 80157a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80157ac:	f001 fc2e 	bl	801700c <vPortExitCritical>
				return pdPASS;
 80157b0:	2301      	movs	r3, #1
 80157b2:	e098      	b.n	80158e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d112      	bne.n	80157e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80157ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d00b      	beq.n	80157d8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80157c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c4:	f383 8811 	msr	BASEPRI, r3
 80157c8:	f3bf 8f6f 	isb	sy
 80157cc:	f3bf 8f4f 	dsb	sy
 80157d0:	617b      	str	r3, [r7, #20]
}
 80157d2:	bf00      	nop
 80157d4:	bf00      	nop
 80157d6:	e7fd      	b.n	80157d4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80157d8:	f001 fc18 	bl	801700c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80157dc:	2300      	movs	r3, #0
 80157de:	e082      	b.n	80158e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80157e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d106      	bne.n	80157f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80157e6:	f107 030c 	add.w	r3, r7, #12
 80157ea:	4618      	mov	r0, r3
 80157ec:	f000 ff26 	bl	801663c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80157f0:	2301      	movs	r3, #1
 80157f2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80157f4:	f001 fc0a 	bl	801700c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80157f8:	f000 fccc 	bl	8016194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80157fc:	f001 fbd4 	bl	8016fa8 <vPortEnterCritical>
 8015800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015806:	b25b      	sxtb	r3, r3
 8015808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801580c:	d103      	bne.n	8015816 <xQueueSemaphoreTake+0x142>
 801580e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015810:	2200      	movs	r2, #0
 8015812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015818:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801581c:	b25b      	sxtb	r3, r3
 801581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015822:	d103      	bne.n	801582c <xQueueSemaphoreTake+0x158>
 8015824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015826:	2200      	movs	r2, #0
 8015828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801582c:	f001 fbee 	bl	801700c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015830:	463a      	mov	r2, r7
 8015832:	f107 030c 	add.w	r3, r7, #12
 8015836:	4611      	mov	r1, r2
 8015838:	4618      	mov	r0, r3
 801583a:	f000 ff15 	bl	8016668 <xTaskCheckForTimeOut>
 801583e:	4603      	mov	r3, r0
 8015840:	2b00      	cmp	r3, #0
 8015842:	d132      	bne.n	80158aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015844:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015846:	f000 f9f5 	bl	8015c34 <prvIsQueueEmpty>
 801584a:	4603      	mov	r3, r0
 801584c:	2b00      	cmp	r3, #0
 801584e:	d026      	beq.n	801589e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d109      	bne.n	801586c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8015858:	f001 fba6 	bl	8016fa8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	4618      	mov	r0, r3
 8015862:	f001 f86b 	bl	801693c <xTaskPriorityInherit>
 8015866:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015868:	f001 fbd0 	bl	801700c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801586e:	3324      	adds	r3, #36	@ 0x24
 8015870:	683a      	ldr	r2, [r7, #0]
 8015872:	4611      	mov	r1, r2
 8015874:	4618      	mov	r0, r3
 8015876:	f000 fe57 	bl	8016528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801587a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801587c:	f000 f988 	bl	8015b90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015880:	f000 fc96 	bl	80161b0 <xTaskResumeAll>
 8015884:	4603      	mov	r3, r0
 8015886:	2b00      	cmp	r3, #0
 8015888:	f47f af67 	bne.w	801575a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801588c:	4b18      	ldr	r3, [pc, #96]	@ (80158f0 <xQueueSemaphoreTake+0x21c>)
 801588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015892:	601a      	str	r2, [r3, #0]
 8015894:	f3bf 8f4f 	dsb	sy
 8015898:	f3bf 8f6f 	isb	sy
 801589c:	e75d      	b.n	801575a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801589e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158a0:	f000 f976 	bl	8015b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80158a4:	f000 fc84 	bl	80161b0 <xTaskResumeAll>
 80158a8:	e757      	b.n	801575a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80158aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158ac:	f000 f970 	bl	8015b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80158b0:	f000 fc7e 	bl	80161b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80158b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158b6:	f000 f9bd 	bl	8015c34 <prvIsQueueEmpty>
 80158ba:	4603      	mov	r3, r0
 80158bc:	2b00      	cmp	r3, #0
 80158be:	f43f af4c 	beq.w	801575a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80158c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d00d      	beq.n	80158e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80158c8:	f001 fb6e 	bl	8016fa8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80158cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158ce:	f000 f8b7 	bl	8015a40 <prvGetDisinheritPriorityAfterTimeout>
 80158d2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80158d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158d6:	689b      	ldr	r3, [r3, #8]
 80158d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80158da:	4618      	mov	r0, r3
 80158dc:	f001 f92c 	bl	8016b38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80158e0:	f001 fb94 	bl	801700c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80158e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3738      	adds	r7, #56	@ 0x38
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	e000ed04 	.word	0xe000ed04

080158f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b08e      	sub	sp, #56	@ 0x38
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015906:	2b00      	cmp	r3, #0
 8015908:	d10b      	bne.n	8015922 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801590e:	f383 8811 	msr	BASEPRI, r3
 8015912:	f3bf 8f6f 	isb	sy
 8015916:	f3bf 8f4f 	dsb	sy
 801591a:	623b      	str	r3, [r7, #32]
}
 801591c:	bf00      	nop
 801591e:	bf00      	nop
 8015920:	e7fd      	b.n	801591e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015922:	68bb      	ldr	r3, [r7, #8]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d103      	bne.n	8015930 <xQueueReceiveFromISR+0x3c>
 8015928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801592c:	2b00      	cmp	r3, #0
 801592e:	d101      	bne.n	8015934 <xQueueReceiveFromISR+0x40>
 8015930:	2301      	movs	r3, #1
 8015932:	e000      	b.n	8015936 <xQueueReceiveFromISR+0x42>
 8015934:	2300      	movs	r3, #0
 8015936:	2b00      	cmp	r3, #0
 8015938:	d10b      	bne.n	8015952 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801593a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801593e:	f383 8811 	msr	BASEPRI, r3
 8015942:	f3bf 8f6f 	isb	sy
 8015946:	f3bf 8f4f 	dsb	sy
 801594a:	61fb      	str	r3, [r7, #28]
}
 801594c:	bf00      	nop
 801594e:	bf00      	nop
 8015950:	e7fd      	b.n	801594e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015952:	f001 fc09 	bl	8017168 <vPortValidateInterruptPriority>
	__asm volatile
 8015956:	f3ef 8211 	mrs	r2, BASEPRI
 801595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801595e:	f383 8811 	msr	BASEPRI, r3
 8015962:	f3bf 8f6f 	isb	sy
 8015966:	f3bf 8f4f 	dsb	sy
 801596a:	61ba      	str	r2, [r7, #24]
 801596c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801596e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015970:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015976:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801597a:	2b00      	cmp	r3, #0
 801597c:	d02f      	beq.n	80159de <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015988:	68b9      	ldr	r1, [r7, #8]
 801598a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801598c:	f000 f8da 	bl	8015b44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015992:	1e5a      	subs	r2, r3, #1
 8015994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015996:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015998:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159a0:	d112      	bne.n	80159c8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159a4:	691b      	ldr	r3, [r3, #16]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d016      	beq.n	80159d8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80159aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159ac:	3310      	adds	r3, #16
 80159ae:	4618      	mov	r0, r3
 80159b0:	f000 fde0 	bl	8016574 <xTaskRemoveFromEventList>
 80159b4:	4603      	mov	r3, r0
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d00e      	beq.n	80159d8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d00b      	beq.n	80159d8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2201      	movs	r2, #1
 80159c4:	601a      	str	r2, [r3, #0]
 80159c6:	e007      	b.n	80159d8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80159c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159cc:	3301      	adds	r3, #1
 80159ce:	b2db      	uxtb	r3, r3
 80159d0:	b25a      	sxtb	r2, r3
 80159d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80159d8:	2301      	movs	r3, #1
 80159da:	637b      	str	r3, [r7, #52]	@ 0x34
 80159dc:	e001      	b.n	80159e2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80159de:	2300      	movs	r3, #0
 80159e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80159e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	f383 8811 	msr	BASEPRI, r3
}
 80159ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3738      	adds	r7, #56	@ 0x38
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}

080159f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b084      	sub	sp, #16
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d10b      	bne.n	8015a22 <vQueueDelete+0x2a>
	__asm volatile
 8015a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a0e:	f383 8811 	msr	BASEPRI, r3
 8015a12:	f3bf 8f6f 	isb	sy
 8015a16:	f3bf 8f4f 	dsb	sy
 8015a1a:	60bb      	str	r3, [r7, #8]
}
 8015a1c:	bf00      	nop
 8015a1e:	bf00      	nop
 8015a20:	e7fd      	b.n	8015a1e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	f000 f934 	bl	8015c90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d102      	bne.n	8015a38 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f001 fca8 	bl	8017388 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015a38:	bf00      	nop
 8015a3a:	3710      	adds	r7, #16
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015a40:	b480      	push	{r7}
 8015a42:	b085      	sub	sp, #20
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d006      	beq.n	8015a5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	f1c3 0307 	rsb	r3, r3, #7
 8015a5a:	60fb      	str	r3, [r7, #12]
 8015a5c:	e001      	b.n	8015a62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015a62:	68fb      	ldr	r3, [r7, #12]
	}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3714      	adds	r7, #20
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr

08015a70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b086      	sub	sp, #24
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d10d      	bne.n	8015aaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d14d      	bne.n	8015b32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	689b      	ldr	r3, [r3, #8]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f000 ffc4 	bl	8016a28 <xTaskPriorityDisinherit>
 8015aa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	609a      	str	r2, [r3, #8]
 8015aa8:	e043      	b.n	8015b32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d119      	bne.n	8015ae4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	6858      	ldr	r0, [r3, #4]
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ab8:	461a      	mov	r2, r3
 8015aba:	68b9      	ldr	r1, [r7, #8]
 8015abc:	f002 fb3a 	bl	8018134 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	685a      	ldr	r2, [r3, #4]
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ac8:	441a      	add	r2, r3
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	685a      	ldr	r2, [r3, #4]
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	689b      	ldr	r3, [r3, #8]
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d32b      	bcc.n	8015b32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	605a      	str	r2, [r3, #4]
 8015ae2:	e026      	b.n	8015b32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	68d8      	ldr	r0, [r3, #12]
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015aec:	461a      	mov	r2, r3
 8015aee:	68b9      	ldr	r1, [r7, #8]
 8015af0:	f002 fb20 	bl	8018134 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	68da      	ldr	r2, [r3, #12]
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015afc:	425b      	negs	r3, r3
 8015afe:	441a      	add	r2, r3
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	68da      	ldr	r2, [r3, #12]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d207      	bcs.n	8015b20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	689a      	ldr	r2, [r3, #8]
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b18:	425b      	negs	r3, r3
 8015b1a:	441a      	add	r2, r3
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2b02      	cmp	r3, #2
 8015b24:	d105      	bne.n	8015b32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d002      	beq.n	8015b32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	3b01      	subs	r3, #1
 8015b30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	1c5a      	adds	r2, r3, #1
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015b3a:	697b      	ldr	r3, [r7, #20]
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3718      	adds	r7, #24
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}

08015b44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d018      	beq.n	8015b88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	68da      	ldr	r2, [r3, #12]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b5e:	441a      	add	r2, r3
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	68da      	ldr	r2, [r3, #12]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	689b      	ldr	r3, [r3, #8]
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	d303      	bcc.n	8015b78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681a      	ldr	r2, [r3, #0]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	68d9      	ldr	r1, [r3, #12]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b80:	461a      	mov	r2, r3
 8015b82:	6838      	ldr	r0, [r7, #0]
 8015b84:	f002 fad6 	bl	8018134 <memcpy>
	}
}
 8015b88:	bf00      	nop
 8015b8a:	3708      	adds	r7, #8
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b084      	sub	sp, #16
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015b98:	f001 fa06 	bl	8016fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015ba2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ba4:	e011      	b.n	8015bca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d012      	beq.n	8015bd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	3324      	adds	r3, #36	@ 0x24
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f000 fcde 	bl	8016574 <xTaskRemoveFromEventList>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d001      	beq.n	8015bc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015bbe:	f000 fdb7 	bl	8016730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015bc2:	7bfb      	ldrb	r3, [r7, #15]
 8015bc4:	3b01      	subs	r3, #1
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	dce9      	bgt.n	8015ba6 <prvUnlockQueue+0x16>
 8015bd2:	e000      	b.n	8015bd6 <prvUnlockQueue+0x46>
					break;
 8015bd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	22ff      	movs	r2, #255	@ 0xff
 8015bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015bde:	f001 fa15 	bl	801700c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015be2:	f001 f9e1 	bl	8016fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015bec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015bee:	e011      	b.n	8015c14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	691b      	ldr	r3, [r3, #16]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d012      	beq.n	8015c1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	3310      	adds	r3, #16
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f000 fcb9 	bl	8016574 <xTaskRemoveFromEventList>
 8015c02:	4603      	mov	r3, r0
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d001      	beq.n	8015c0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015c08:	f000 fd92 	bl	8016730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015c0c:	7bbb      	ldrb	r3, [r7, #14]
 8015c0e:	3b01      	subs	r3, #1
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	dce9      	bgt.n	8015bf0 <prvUnlockQueue+0x60>
 8015c1c:	e000      	b.n	8015c20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015c1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	22ff      	movs	r2, #255	@ 0xff
 8015c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015c28:	f001 f9f0 	bl	801700c <vPortExitCritical>
}
 8015c2c:	bf00      	nop
 8015c2e:	3710      	adds	r7, #16
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b084      	sub	sp, #16
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015c3c:	f001 f9b4 	bl	8016fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d102      	bne.n	8015c4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	60fb      	str	r3, [r7, #12]
 8015c4c:	e001      	b.n	8015c52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015c52:	f001 f9db 	bl	801700c <vPortExitCritical>

	return xReturn;
 8015c56:	68fb      	ldr	r3, [r7, #12]
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b084      	sub	sp, #16
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015c68:	f001 f99e 	bl	8016fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d102      	bne.n	8015c7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015c78:	2301      	movs	r3, #1
 8015c7a:	60fb      	str	r3, [r7, #12]
 8015c7c:	e001      	b.n	8015c82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015c82:	f001 f9c3 	bl	801700c <vPortExitCritical>

	return xReturn;
 8015c86:	68fb      	ldr	r3, [r7, #12]
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3710      	adds	r7, #16
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}

08015c90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015c90:	b480      	push	{r7}
 8015c92:	b085      	sub	sp, #20
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015c98:	2300      	movs	r3, #0
 8015c9a:	60fb      	str	r3, [r7, #12]
 8015c9c:	e016      	b.n	8015ccc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015c9e:	4a10      	ldr	r2, [pc, #64]	@ (8015ce0 <vQueueUnregisterQueue+0x50>)
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	00db      	lsls	r3, r3, #3
 8015ca4:	4413      	add	r3, r2
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d10b      	bne.n	8015cc6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015cae:	4a0c      	ldr	r2, [pc, #48]	@ (8015ce0 <vQueueUnregisterQueue+0x50>)
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015cb8:	4a09      	ldr	r2, [pc, #36]	@ (8015ce0 <vQueueUnregisterQueue+0x50>)
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	4413      	add	r3, r2
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	605a      	str	r2, [r3, #4]
				break;
 8015cc4:	e006      	b.n	8015cd4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	60fb      	str	r3, [r7, #12]
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2b07      	cmp	r3, #7
 8015cd0:	d9e5      	bls.n	8015c9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015cd2:	bf00      	nop
 8015cd4:	bf00      	nop
 8015cd6:	3714      	adds	r7, #20
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr
 8015ce0:	24002f34 	.word	0x24002f34

08015ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b08e      	sub	sp, #56	@ 0x38
 8015ce8:	af04      	add	r7, sp, #16
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	607a      	str	r2, [r7, #4]
 8015cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d10b      	bne.n	8015d10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8015cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cfc:	f383 8811 	msr	BASEPRI, r3
 8015d00:	f3bf 8f6f 	isb	sy
 8015d04:	f3bf 8f4f 	dsb	sy
 8015d08:	623b      	str	r3, [r7, #32]
}
 8015d0a:	bf00      	nop
 8015d0c:	bf00      	nop
 8015d0e:	e7fd      	b.n	8015d0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d10b      	bne.n	8015d2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8015d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d1a:	f383 8811 	msr	BASEPRI, r3
 8015d1e:	f3bf 8f6f 	isb	sy
 8015d22:	f3bf 8f4f 	dsb	sy
 8015d26:	61fb      	str	r3, [r7, #28]
}
 8015d28:	bf00      	nop
 8015d2a:	bf00      	nop
 8015d2c:	e7fd      	b.n	8015d2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015d2e:	23a0      	movs	r3, #160	@ 0xa0
 8015d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015d32:	693b      	ldr	r3, [r7, #16]
 8015d34:	2ba0      	cmp	r3, #160	@ 0xa0
 8015d36:	d00b      	beq.n	8015d50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8015d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d3c:	f383 8811 	msr	BASEPRI, r3
 8015d40:	f3bf 8f6f 	isb	sy
 8015d44:	f3bf 8f4f 	dsb	sy
 8015d48:	61bb      	str	r3, [r7, #24]
}
 8015d4a:	bf00      	nop
 8015d4c:	bf00      	nop
 8015d4e:	e7fd      	b.n	8015d4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015d50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d01e      	beq.n	8015d96 <xTaskCreateStatic+0xb2>
 8015d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d01b      	beq.n	8015d96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015d66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d6a:	2202      	movs	r2, #2
 8015d6c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015d70:	2300      	movs	r3, #0
 8015d72:	9303      	str	r3, [sp, #12]
 8015d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d76:	9302      	str	r3, [sp, #8]
 8015d78:	f107 0314 	add.w	r3, r7, #20
 8015d7c:	9301      	str	r3, [sp, #4]
 8015d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d80:	9300      	str	r3, [sp, #0]
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	68b9      	ldr	r1, [r7, #8]
 8015d88:	68f8      	ldr	r0, [r7, #12]
 8015d8a:	f000 f851 	bl	8015e30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015d8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015d90:	f000 f8f6 	bl	8015f80 <prvAddNewTaskToReadyList>
 8015d94:	e001      	b.n	8015d9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8015d96:	2300      	movs	r3, #0
 8015d98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015d9a:	697b      	ldr	r3, [r7, #20]
	}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3728      	adds	r7, #40	@ 0x28
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}

08015da4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b08c      	sub	sp, #48	@ 0x30
 8015da8:	af04      	add	r7, sp, #16
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	603b      	str	r3, [r7, #0]
 8015db0:	4613      	mov	r3, r2
 8015db2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015db4:	88fb      	ldrh	r3, [r7, #6]
 8015db6:	009b      	lsls	r3, r3, #2
 8015db8:	4618      	mov	r0, r3
 8015dba:	f001 fa17 	bl	80171ec <pvPortMalloc>
 8015dbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00e      	beq.n	8015de4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015dc6:	20a0      	movs	r0, #160	@ 0xa0
 8015dc8:	f001 fa10 	bl	80171ec <pvPortMalloc>
 8015dcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d003      	beq.n	8015ddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015dd4:	69fb      	ldr	r3, [r7, #28]
 8015dd6:	697a      	ldr	r2, [r7, #20]
 8015dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8015dda:	e005      	b.n	8015de8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015ddc:	6978      	ldr	r0, [r7, #20]
 8015dde:	f001 fad3 	bl	8017388 <vPortFree>
 8015de2:	e001      	b.n	8015de8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015de4:	2300      	movs	r3, #0
 8015de6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d017      	beq.n	8015e1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015dee:	69fb      	ldr	r3, [r7, #28]
 8015df0:	2200      	movs	r2, #0
 8015df2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015df6:	88fa      	ldrh	r2, [r7, #6]
 8015df8:	2300      	movs	r3, #0
 8015dfa:	9303      	str	r3, [sp, #12]
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	9302      	str	r3, [sp, #8]
 8015e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e02:	9301      	str	r3, [sp, #4]
 8015e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e06:	9300      	str	r3, [sp, #0]
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	68b9      	ldr	r1, [r7, #8]
 8015e0c:	68f8      	ldr	r0, [r7, #12]
 8015e0e:	f000 f80f 	bl	8015e30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015e12:	69f8      	ldr	r0, [r7, #28]
 8015e14:	f000 f8b4 	bl	8015f80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015e18:	2301      	movs	r3, #1
 8015e1a:	61bb      	str	r3, [r7, #24]
 8015e1c:	e002      	b.n	8015e24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015e24:	69bb      	ldr	r3, [r7, #24]
	}
 8015e26:	4618      	mov	r0, r3
 8015e28:	3720      	adds	r7, #32
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd80      	pop	{r7, pc}
	...

08015e30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b088      	sub	sp, #32
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	607a      	str	r2, [r7, #4]
 8015e3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	461a      	mov	r2, r3
 8015e48:	21a5      	movs	r1, #165	@ 0xa5
 8015e4a:	f002 f8e7 	bl	801801c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015e52:	6879      	ldr	r1, [r7, #4]
 8015e54:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015e58:	440b      	add	r3, r1
 8015e5a:	009b      	lsls	r3, r3, #2
 8015e5c:	4413      	add	r3, r2
 8015e5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015e60:	69bb      	ldr	r3, [r7, #24]
 8015e62:	f023 0307 	bic.w	r3, r3, #7
 8015e66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015e68:	69bb      	ldr	r3, [r7, #24]
 8015e6a:	f003 0307 	and.w	r3, r3, #7
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d00b      	beq.n	8015e8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8015e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e76:	f383 8811 	msr	BASEPRI, r3
 8015e7a:	f3bf 8f6f 	isb	sy
 8015e7e:	f3bf 8f4f 	dsb	sy
 8015e82:	617b      	str	r3, [r7, #20]
}
 8015e84:	bf00      	nop
 8015e86:	bf00      	nop
 8015e88:	e7fd      	b.n	8015e86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d01f      	beq.n	8015ed0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015e90:	2300      	movs	r3, #0
 8015e92:	61fb      	str	r3, [r7, #28]
 8015e94:	e012      	b.n	8015ebc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015e96:	68ba      	ldr	r2, [r7, #8]
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	4413      	add	r3, r2
 8015e9c:	7819      	ldrb	r1, [r3, #0]
 8015e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	3334      	adds	r3, #52	@ 0x34
 8015ea6:	460a      	mov	r2, r1
 8015ea8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015eaa:	68ba      	ldr	r2, [r7, #8]
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	4413      	add	r3, r2
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d006      	beq.n	8015ec4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	3301      	adds	r3, #1
 8015eba:	61fb      	str	r3, [r7, #28]
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	2b0f      	cmp	r3, #15
 8015ec0:	d9e9      	bls.n	8015e96 <prvInitialiseNewTask+0x66>
 8015ec2:	e000      	b.n	8015ec6 <prvInitialiseNewTask+0x96>
			{
				break;
 8015ec4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ec8:	2200      	movs	r2, #0
 8015eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015ece:	e003      	b.n	8015ed8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eda:	2b06      	cmp	r3, #6
 8015edc:	d901      	bls.n	8015ee2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015ede:	2306      	movs	r3, #6
 8015ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015eec:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ef6:	3304      	adds	r3, #4
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7ff f882 	bl	8015002 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f00:	3318      	adds	r3, #24
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7ff f87d 	bl	8015002 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f10:	f1c3 0207 	rsb	r2, r3, #7
 8015f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f20:	2200      	movs	r2, #0
 8015f22:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f28:	2200      	movs	r2, #0
 8015f2a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f30:	334c      	adds	r3, #76	@ 0x4c
 8015f32:	224c      	movs	r2, #76	@ 0x4c
 8015f34:	2100      	movs	r1, #0
 8015f36:	4618      	mov	r0, r3
 8015f38:	f002 f870 	bl	801801c <memset>
 8015f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8015f74 <prvInitialiseNewTask+0x144>)
 8015f40:	651a      	str	r2, [r3, #80]	@ 0x50
 8015f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f44:	4a0c      	ldr	r2, [pc, #48]	@ (8015f78 <prvInitialiseNewTask+0x148>)
 8015f46:	655a      	str	r2, [r3, #84]	@ 0x54
 8015f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8015f7c <prvInitialiseNewTask+0x14c>)
 8015f4c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015f4e:	683a      	ldr	r2, [r7, #0]
 8015f50:	68f9      	ldr	r1, [r7, #12]
 8015f52:	69b8      	ldr	r0, [r7, #24]
 8015f54:	f000 fefa 	bl	8016d4c <pxPortInitialiseStack>
 8015f58:	4602      	mov	r2, r0
 8015f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d002      	beq.n	8015f6a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015f6a:	bf00      	nop
 8015f6c:	3720      	adds	r7, #32
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	240088a8 	.word	0x240088a8
 8015f78:	24008910 	.word	0x24008910
 8015f7c:	24008978 	.word	0x24008978

08015f80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b082      	sub	sp, #8
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015f88:	f001 f80e 	bl	8016fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8016038 <prvAddNewTaskToReadyList+0xb8>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	3301      	adds	r3, #1
 8015f92:	4a29      	ldr	r2, [pc, #164]	@ (8016038 <prvAddNewTaskToReadyList+0xb8>)
 8015f94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015f96:	4b29      	ldr	r3, [pc, #164]	@ (801603c <prvAddNewTaskToReadyList+0xbc>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d109      	bne.n	8015fb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015f9e:	4a27      	ldr	r2, [pc, #156]	@ (801603c <prvAddNewTaskToReadyList+0xbc>)
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015fa4:	4b24      	ldr	r3, [pc, #144]	@ (8016038 <prvAddNewTaskToReadyList+0xb8>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	2b01      	cmp	r3, #1
 8015faa:	d110      	bne.n	8015fce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015fac:	f000 fbe4 	bl	8016778 <prvInitialiseTaskLists>
 8015fb0:	e00d      	b.n	8015fce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015fb2:	4b23      	ldr	r3, [pc, #140]	@ (8016040 <prvAddNewTaskToReadyList+0xc0>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d109      	bne.n	8015fce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015fba:	4b20      	ldr	r3, [pc, #128]	@ (801603c <prvAddNewTaskToReadyList+0xbc>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d802      	bhi.n	8015fce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015fc8:	4a1c      	ldr	r2, [pc, #112]	@ (801603c <prvAddNewTaskToReadyList+0xbc>)
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015fce:	4b1d      	ldr	r3, [pc, #116]	@ (8016044 <prvAddNewTaskToReadyList+0xc4>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8016044 <prvAddNewTaskToReadyList+0xc4>)
 8015fd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fdc:	2201      	movs	r2, #1
 8015fde:	409a      	lsls	r2, r3
 8015fe0:	4b19      	ldr	r3, [pc, #100]	@ (8016048 <prvAddNewTaskToReadyList+0xc8>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	4a18      	ldr	r2, [pc, #96]	@ (8016048 <prvAddNewTaskToReadyList+0xc8>)
 8015fe8:	6013      	str	r3, [r2, #0]
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fee:	4613      	mov	r3, r2
 8015ff0:	009b      	lsls	r3, r3, #2
 8015ff2:	4413      	add	r3, r2
 8015ff4:	009b      	lsls	r3, r3, #2
 8015ff6:	4a15      	ldr	r2, [pc, #84]	@ (801604c <prvAddNewTaskToReadyList+0xcc>)
 8015ff8:	441a      	add	r2, r3
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	4619      	mov	r1, r3
 8016000:	4610      	mov	r0, r2
 8016002:	f7ff f80b 	bl	801501c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016006:	f001 f801 	bl	801700c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801600a:	4b0d      	ldr	r3, [pc, #52]	@ (8016040 <prvAddNewTaskToReadyList+0xc0>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d00e      	beq.n	8016030 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016012:	4b0a      	ldr	r3, [pc, #40]	@ (801603c <prvAddNewTaskToReadyList+0xbc>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801601c:	429a      	cmp	r2, r3
 801601e:	d207      	bcs.n	8016030 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016020:	4b0b      	ldr	r3, [pc, #44]	@ (8016050 <prvAddNewTaskToReadyList+0xd0>)
 8016022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016026:	601a      	str	r2, [r3, #0]
 8016028:	f3bf 8f4f 	dsb	sy
 801602c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016030:	bf00      	nop
 8016032:	3708      	adds	r7, #8
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	24003074 	.word	0x24003074
 801603c:	24002f74 	.word	0x24002f74
 8016040:	24003080 	.word	0x24003080
 8016044:	24003090 	.word	0x24003090
 8016048:	2400307c 	.word	0x2400307c
 801604c:	24002f78 	.word	0x24002f78
 8016050:	e000ed04 	.word	0xe000ed04

08016054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801605c:	2300      	movs	r3, #0
 801605e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d018      	beq.n	8016098 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016066:	4b14      	ldr	r3, [pc, #80]	@ (80160b8 <vTaskDelay+0x64>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d00b      	beq.n	8016086 <vTaskDelay+0x32>
	__asm volatile
 801606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016072:	f383 8811 	msr	BASEPRI, r3
 8016076:	f3bf 8f6f 	isb	sy
 801607a:	f3bf 8f4f 	dsb	sy
 801607e:	60bb      	str	r3, [r7, #8]
}
 8016080:	bf00      	nop
 8016082:	bf00      	nop
 8016084:	e7fd      	b.n	8016082 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016086:	f000 f885 	bl	8016194 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801608a:	2100      	movs	r1, #0
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f000 fdf7 	bl	8016c80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016092:	f000 f88d 	bl	80161b0 <xTaskResumeAll>
 8016096:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d107      	bne.n	80160ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801609e:	4b07      	ldr	r3, [pc, #28]	@ (80160bc <vTaskDelay+0x68>)
 80160a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80160a4:	601a      	str	r2, [r3, #0]
 80160a6:	f3bf 8f4f 	dsb	sy
 80160aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80160ae:	bf00      	nop
 80160b0:	3710      	adds	r7, #16
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	2400309c 	.word	0x2400309c
 80160bc:	e000ed04 	.word	0xe000ed04

080160c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b08a      	sub	sp, #40	@ 0x28
 80160c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80160c6:	2300      	movs	r3, #0
 80160c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80160ca:	2300      	movs	r3, #0
 80160cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80160ce:	463a      	mov	r2, r7
 80160d0:	1d39      	adds	r1, r7, #4
 80160d2:	f107 0308 	add.w	r3, r7, #8
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7ea fd6a 	bl	8000bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80160dc:	6839      	ldr	r1, [r7, #0]
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	68ba      	ldr	r2, [r7, #8]
 80160e2:	9202      	str	r2, [sp, #8]
 80160e4:	9301      	str	r3, [sp, #4]
 80160e6:	2300      	movs	r3, #0
 80160e8:	9300      	str	r3, [sp, #0]
 80160ea:	2300      	movs	r3, #0
 80160ec:	460a      	mov	r2, r1
 80160ee:	4921      	ldr	r1, [pc, #132]	@ (8016174 <vTaskStartScheduler+0xb4>)
 80160f0:	4821      	ldr	r0, [pc, #132]	@ (8016178 <vTaskStartScheduler+0xb8>)
 80160f2:	f7ff fdf7 	bl	8015ce4 <xTaskCreateStatic>
 80160f6:	4603      	mov	r3, r0
 80160f8:	4a20      	ldr	r2, [pc, #128]	@ (801617c <vTaskStartScheduler+0xbc>)
 80160fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80160fc:	4b1f      	ldr	r3, [pc, #124]	@ (801617c <vTaskStartScheduler+0xbc>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d002      	beq.n	801610a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016104:	2301      	movs	r3, #1
 8016106:	617b      	str	r3, [r7, #20]
 8016108:	e001      	b.n	801610e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801610a:	2300      	movs	r3, #0
 801610c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	2b01      	cmp	r3, #1
 8016112:	d11b      	bne.n	801614c <vTaskStartScheduler+0x8c>
	__asm volatile
 8016114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016118:	f383 8811 	msr	BASEPRI, r3
 801611c:	f3bf 8f6f 	isb	sy
 8016120:	f3bf 8f4f 	dsb	sy
 8016124:	613b      	str	r3, [r7, #16]
}
 8016126:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016128:	4b15      	ldr	r3, [pc, #84]	@ (8016180 <vTaskStartScheduler+0xc0>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	334c      	adds	r3, #76	@ 0x4c
 801612e:	4a15      	ldr	r2, [pc, #84]	@ (8016184 <vTaskStartScheduler+0xc4>)
 8016130:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016132:	4b15      	ldr	r3, [pc, #84]	@ (8016188 <vTaskStartScheduler+0xc8>)
 8016134:	f04f 32ff 	mov.w	r2, #4294967295
 8016138:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801613a:	4b14      	ldr	r3, [pc, #80]	@ (801618c <vTaskStartScheduler+0xcc>)
 801613c:	2201      	movs	r2, #1
 801613e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016140:	4b13      	ldr	r3, [pc, #76]	@ (8016190 <vTaskStartScheduler+0xd0>)
 8016142:	2200      	movs	r2, #0
 8016144:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016146:	f000 fe8b 	bl	8016e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801614a:	e00f      	b.n	801616c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801614c:	697b      	ldr	r3, [r7, #20]
 801614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016152:	d10b      	bne.n	801616c <vTaskStartScheduler+0xac>
	__asm volatile
 8016154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016158:	f383 8811 	msr	BASEPRI, r3
 801615c:	f3bf 8f6f 	isb	sy
 8016160:	f3bf 8f4f 	dsb	sy
 8016164:	60fb      	str	r3, [r7, #12]
}
 8016166:	bf00      	nop
 8016168:	bf00      	nop
 801616a:	e7fd      	b.n	8016168 <vTaskStartScheduler+0xa8>
}
 801616c:	bf00      	nop
 801616e:	3718      	adds	r7, #24
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	080182fc 	.word	0x080182fc
 8016178:	08016749 	.word	0x08016749
 801617c:	24003098 	.word	0x24003098
 8016180:	24002f74 	.word	0x24002f74
 8016184:	24000120 	.word	0x24000120
 8016188:	24003094 	.word	0x24003094
 801618c:	24003080 	.word	0x24003080
 8016190:	24003078 	.word	0x24003078

08016194 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016194:	b480      	push	{r7}
 8016196:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016198:	4b04      	ldr	r3, [pc, #16]	@ (80161ac <vTaskSuspendAll+0x18>)
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	3301      	adds	r3, #1
 801619e:	4a03      	ldr	r2, [pc, #12]	@ (80161ac <vTaskSuspendAll+0x18>)
 80161a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80161a2:	bf00      	nop
 80161a4:	46bd      	mov	sp, r7
 80161a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161aa:	4770      	bx	lr
 80161ac:	2400309c 	.word	0x2400309c

080161b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80161b6:	2300      	movs	r3, #0
 80161b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80161ba:	2300      	movs	r3, #0
 80161bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80161be:	4b42      	ldr	r3, [pc, #264]	@ (80162c8 <xTaskResumeAll+0x118>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d10b      	bne.n	80161de <xTaskResumeAll+0x2e>
	__asm volatile
 80161c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161ca:	f383 8811 	msr	BASEPRI, r3
 80161ce:	f3bf 8f6f 	isb	sy
 80161d2:	f3bf 8f4f 	dsb	sy
 80161d6:	603b      	str	r3, [r7, #0]
}
 80161d8:	bf00      	nop
 80161da:	bf00      	nop
 80161dc:	e7fd      	b.n	80161da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80161de:	f000 fee3 	bl	8016fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80161e2:	4b39      	ldr	r3, [pc, #228]	@ (80162c8 <xTaskResumeAll+0x118>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	3b01      	subs	r3, #1
 80161e8:	4a37      	ldr	r2, [pc, #220]	@ (80162c8 <xTaskResumeAll+0x118>)
 80161ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80161ec:	4b36      	ldr	r3, [pc, #216]	@ (80162c8 <xTaskResumeAll+0x118>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d161      	bne.n	80162b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80161f4:	4b35      	ldr	r3, [pc, #212]	@ (80162cc <xTaskResumeAll+0x11c>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d05d      	beq.n	80162b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80161fc:	e02e      	b.n	801625c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161fe:	4b34      	ldr	r3, [pc, #208]	@ (80162d0 <xTaskResumeAll+0x120>)
 8016200:	68db      	ldr	r3, [r3, #12]
 8016202:	68db      	ldr	r3, [r3, #12]
 8016204:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	3318      	adds	r3, #24
 801620a:	4618      	mov	r0, r3
 801620c:	f7fe ff63 	bl	80150d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	3304      	adds	r3, #4
 8016214:	4618      	mov	r0, r3
 8016216:	f7fe ff5e 	bl	80150d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801621e:	2201      	movs	r2, #1
 8016220:	409a      	lsls	r2, r3
 8016222:	4b2c      	ldr	r3, [pc, #176]	@ (80162d4 <xTaskResumeAll+0x124>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	4313      	orrs	r3, r2
 8016228:	4a2a      	ldr	r2, [pc, #168]	@ (80162d4 <xTaskResumeAll+0x124>)
 801622a:	6013      	str	r3, [r2, #0]
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016230:	4613      	mov	r3, r2
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	4413      	add	r3, r2
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	4a27      	ldr	r2, [pc, #156]	@ (80162d8 <xTaskResumeAll+0x128>)
 801623a:	441a      	add	r2, r3
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	3304      	adds	r3, #4
 8016240:	4619      	mov	r1, r3
 8016242:	4610      	mov	r0, r2
 8016244:	f7fe feea 	bl	801501c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801624c:	4b23      	ldr	r3, [pc, #140]	@ (80162dc <xTaskResumeAll+0x12c>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016252:	429a      	cmp	r2, r3
 8016254:	d302      	bcc.n	801625c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016256:	4b22      	ldr	r3, [pc, #136]	@ (80162e0 <xTaskResumeAll+0x130>)
 8016258:	2201      	movs	r2, #1
 801625a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801625c:	4b1c      	ldr	r3, [pc, #112]	@ (80162d0 <xTaskResumeAll+0x120>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d1cc      	bne.n	80161fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d001      	beq.n	801626e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801626a:	f000 fb29 	bl	80168c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801626e:	4b1d      	ldr	r3, [pc, #116]	@ (80162e4 <xTaskResumeAll+0x134>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d010      	beq.n	801629c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801627a:	f000 f837 	bl	80162ec <xTaskIncrementTick>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d002      	beq.n	801628a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016284:	4b16      	ldr	r3, [pc, #88]	@ (80162e0 <xTaskResumeAll+0x130>)
 8016286:	2201      	movs	r2, #1
 8016288:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	3b01      	subs	r3, #1
 801628e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d1f1      	bne.n	801627a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016296:	4b13      	ldr	r3, [pc, #76]	@ (80162e4 <xTaskResumeAll+0x134>)
 8016298:	2200      	movs	r2, #0
 801629a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801629c:	4b10      	ldr	r3, [pc, #64]	@ (80162e0 <xTaskResumeAll+0x130>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d009      	beq.n	80162b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80162a4:	2301      	movs	r3, #1
 80162a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80162a8:	4b0f      	ldr	r3, [pc, #60]	@ (80162e8 <xTaskResumeAll+0x138>)
 80162aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80162ae:	601a      	str	r2, [r3, #0]
 80162b0:	f3bf 8f4f 	dsb	sy
 80162b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80162b8:	f000 fea8 	bl	801700c <vPortExitCritical>

	return xAlreadyYielded;
 80162bc:	68bb      	ldr	r3, [r7, #8]
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3710      	adds	r7, #16
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	2400309c 	.word	0x2400309c
 80162cc:	24003074 	.word	0x24003074
 80162d0:	24003034 	.word	0x24003034
 80162d4:	2400307c 	.word	0x2400307c
 80162d8:	24002f78 	.word	0x24002f78
 80162dc:	24002f74 	.word	0x24002f74
 80162e0:	24003088 	.word	0x24003088
 80162e4:	24003084 	.word	0x24003084
 80162e8:	e000ed04 	.word	0xe000ed04

080162ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b086      	sub	sp, #24
 80162f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80162f2:	2300      	movs	r3, #0
 80162f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80162f6:	4b4f      	ldr	r3, [pc, #316]	@ (8016434 <xTaskIncrementTick+0x148>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	f040 808f 	bne.w	801641e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016300:	4b4d      	ldr	r3, [pc, #308]	@ (8016438 <xTaskIncrementTick+0x14c>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	3301      	adds	r3, #1
 8016306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016308:	4a4b      	ldr	r2, [pc, #300]	@ (8016438 <xTaskIncrementTick+0x14c>)
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d121      	bne.n	8016358 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8016314:	4b49      	ldr	r3, [pc, #292]	@ (801643c <xTaskIncrementTick+0x150>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d00b      	beq.n	8016336 <xTaskIncrementTick+0x4a>
	__asm volatile
 801631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016322:	f383 8811 	msr	BASEPRI, r3
 8016326:	f3bf 8f6f 	isb	sy
 801632a:	f3bf 8f4f 	dsb	sy
 801632e:	603b      	str	r3, [r7, #0]
}
 8016330:	bf00      	nop
 8016332:	bf00      	nop
 8016334:	e7fd      	b.n	8016332 <xTaskIncrementTick+0x46>
 8016336:	4b41      	ldr	r3, [pc, #260]	@ (801643c <xTaskIncrementTick+0x150>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	60fb      	str	r3, [r7, #12]
 801633c:	4b40      	ldr	r3, [pc, #256]	@ (8016440 <xTaskIncrementTick+0x154>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4a3e      	ldr	r2, [pc, #248]	@ (801643c <xTaskIncrementTick+0x150>)
 8016342:	6013      	str	r3, [r2, #0]
 8016344:	4a3e      	ldr	r2, [pc, #248]	@ (8016440 <xTaskIncrementTick+0x154>)
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	6013      	str	r3, [r2, #0]
 801634a:	4b3e      	ldr	r3, [pc, #248]	@ (8016444 <xTaskIncrementTick+0x158>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	3301      	adds	r3, #1
 8016350:	4a3c      	ldr	r2, [pc, #240]	@ (8016444 <xTaskIncrementTick+0x158>)
 8016352:	6013      	str	r3, [r2, #0]
 8016354:	f000 fab4 	bl	80168c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016358:	4b3b      	ldr	r3, [pc, #236]	@ (8016448 <xTaskIncrementTick+0x15c>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	693a      	ldr	r2, [r7, #16]
 801635e:	429a      	cmp	r2, r3
 8016360:	d348      	bcc.n	80163f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016362:	4b36      	ldr	r3, [pc, #216]	@ (801643c <xTaskIncrementTick+0x150>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d104      	bne.n	8016376 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801636c:	4b36      	ldr	r3, [pc, #216]	@ (8016448 <xTaskIncrementTick+0x15c>)
 801636e:	f04f 32ff 	mov.w	r2, #4294967295
 8016372:	601a      	str	r2, [r3, #0]
					break;
 8016374:	e03e      	b.n	80163f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016376:	4b31      	ldr	r3, [pc, #196]	@ (801643c <xTaskIncrementTick+0x150>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	68db      	ldr	r3, [r3, #12]
 801637c:	68db      	ldr	r3, [r3, #12]
 801637e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016380:	68bb      	ldr	r3, [r7, #8]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016386:	693a      	ldr	r2, [r7, #16]
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	429a      	cmp	r2, r3
 801638c:	d203      	bcs.n	8016396 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801638e:	4a2e      	ldr	r2, [pc, #184]	@ (8016448 <xTaskIncrementTick+0x15c>)
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016394:	e02e      	b.n	80163f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	3304      	adds	r3, #4
 801639a:	4618      	mov	r0, r3
 801639c:	f7fe fe9b 	bl	80150d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d004      	beq.n	80163b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	3318      	adds	r3, #24
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7fe fe92 	bl	80150d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80163b2:	68bb      	ldr	r3, [r7, #8]
 80163b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163b6:	2201      	movs	r2, #1
 80163b8:	409a      	lsls	r2, r3
 80163ba:	4b24      	ldr	r3, [pc, #144]	@ (801644c <xTaskIncrementTick+0x160>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	4313      	orrs	r3, r2
 80163c0:	4a22      	ldr	r2, [pc, #136]	@ (801644c <xTaskIncrementTick+0x160>)
 80163c2:	6013      	str	r3, [r2, #0]
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163c8:	4613      	mov	r3, r2
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	4413      	add	r3, r2
 80163ce:	009b      	lsls	r3, r3, #2
 80163d0:	4a1f      	ldr	r2, [pc, #124]	@ (8016450 <xTaskIncrementTick+0x164>)
 80163d2:	441a      	add	r2, r3
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	3304      	adds	r3, #4
 80163d8:	4619      	mov	r1, r3
 80163da:	4610      	mov	r0, r2
 80163dc:	f7fe fe1e 	bl	801501c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163e4:	4b1b      	ldr	r3, [pc, #108]	@ (8016454 <xTaskIncrementTick+0x168>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d3b9      	bcc.n	8016362 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80163ee:	2301      	movs	r3, #1
 80163f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80163f2:	e7b6      	b.n	8016362 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80163f4:	4b17      	ldr	r3, [pc, #92]	@ (8016454 <xTaskIncrementTick+0x168>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163fa:	4915      	ldr	r1, [pc, #84]	@ (8016450 <xTaskIncrementTick+0x164>)
 80163fc:	4613      	mov	r3, r2
 80163fe:	009b      	lsls	r3, r3, #2
 8016400:	4413      	add	r3, r2
 8016402:	009b      	lsls	r3, r3, #2
 8016404:	440b      	add	r3, r1
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	2b01      	cmp	r3, #1
 801640a:	d901      	bls.n	8016410 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801640c:	2301      	movs	r3, #1
 801640e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016410:	4b11      	ldr	r3, [pc, #68]	@ (8016458 <xTaskIncrementTick+0x16c>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d007      	beq.n	8016428 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016418:	2301      	movs	r3, #1
 801641a:	617b      	str	r3, [r7, #20]
 801641c:	e004      	b.n	8016428 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801641e:	4b0f      	ldr	r3, [pc, #60]	@ (801645c <xTaskIncrementTick+0x170>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	3301      	adds	r3, #1
 8016424:	4a0d      	ldr	r2, [pc, #52]	@ (801645c <xTaskIncrementTick+0x170>)
 8016426:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016428:	697b      	ldr	r3, [r7, #20]
}
 801642a:	4618      	mov	r0, r3
 801642c:	3718      	adds	r7, #24
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	2400309c 	.word	0x2400309c
 8016438:	24003078 	.word	0x24003078
 801643c:	2400302c 	.word	0x2400302c
 8016440:	24003030 	.word	0x24003030
 8016444:	2400308c 	.word	0x2400308c
 8016448:	24003094 	.word	0x24003094
 801644c:	2400307c 	.word	0x2400307c
 8016450:	24002f78 	.word	0x24002f78
 8016454:	24002f74 	.word	0x24002f74
 8016458:	24003088 	.word	0x24003088
 801645c:	24003084 	.word	0x24003084

08016460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016460:	b480      	push	{r7}
 8016462:	b087      	sub	sp, #28
 8016464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016466:	4b2a      	ldr	r3, [pc, #168]	@ (8016510 <vTaskSwitchContext+0xb0>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d003      	beq.n	8016476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801646e:	4b29      	ldr	r3, [pc, #164]	@ (8016514 <vTaskSwitchContext+0xb4>)
 8016470:	2201      	movs	r2, #1
 8016472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016474:	e045      	b.n	8016502 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8016476:	4b27      	ldr	r3, [pc, #156]	@ (8016514 <vTaskSwitchContext+0xb4>)
 8016478:	2200      	movs	r2, #0
 801647a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801647c:	4b26      	ldr	r3, [pc, #152]	@ (8016518 <vTaskSwitchContext+0xb8>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	fab3 f383 	clz	r3, r3
 8016488:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801648a:	7afb      	ldrb	r3, [r7, #11]
 801648c:	f1c3 031f 	rsb	r3, r3, #31
 8016490:	617b      	str	r3, [r7, #20]
 8016492:	4922      	ldr	r1, [pc, #136]	@ (801651c <vTaskSwitchContext+0xbc>)
 8016494:	697a      	ldr	r2, [r7, #20]
 8016496:	4613      	mov	r3, r2
 8016498:	009b      	lsls	r3, r3, #2
 801649a:	4413      	add	r3, r2
 801649c:	009b      	lsls	r3, r3, #2
 801649e:	440b      	add	r3, r1
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d10b      	bne.n	80164be <vTaskSwitchContext+0x5e>
	__asm volatile
 80164a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164aa:	f383 8811 	msr	BASEPRI, r3
 80164ae:	f3bf 8f6f 	isb	sy
 80164b2:	f3bf 8f4f 	dsb	sy
 80164b6:	607b      	str	r3, [r7, #4]
}
 80164b8:	bf00      	nop
 80164ba:	bf00      	nop
 80164bc:	e7fd      	b.n	80164ba <vTaskSwitchContext+0x5a>
 80164be:	697a      	ldr	r2, [r7, #20]
 80164c0:	4613      	mov	r3, r2
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	4413      	add	r3, r2
 80164c6:	009b      	lsls	r3, r3, #2
 80164c8:	4a14      	ldr	r2, [pc, #80]	@ (801651c <vTaskSwitchContext+0xbc>)
 80164ca:	4413      	add	r3, r2
 80164cc:	613b      	str	r3, [r7, #16]
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	685a      	ldr	r2, [r3, #4]
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	605a      	str	r2, [r3, #4]
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	685a      	ldr	r2, [r3, #4]
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	3308      	adds	r3, #8
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d104      	bne.n	80164ee <vTaskSwitchContext+0x8e>
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	685a      	ldr	r2, [r3, #4]
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	605a      	str	r2, [r3, #4]
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	68db      	ldr	r3, [r3, #12]
 80164f4:	4a0a      	ldr	r2, [pc, #40]	@ (8016520 <vTaskSwitchContext+0xc0>)
 80164f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80164f8:	4b09      	ldr	r3, [pc, #36]	@ (8016520 <vTaskSwitchContext+0xc0>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	334c      	adds	r3, #76	@ 0x4c
 80164fe:	4a09      	ldr	r2, [pc, #36]	@ (8016524 <vTaskSwitchContext+0xc4>)
 8016500:	6013      	str	r3, [r2, #0]
}
 8016502:	bf00      	nop
 8016504:	371c      	adds	r7, #28
 8016506:	46bd      	mov	sp, r7
 8016508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650c:	4770      	bx	lr
 801650e:	bf00      	nop
 8016510:	2400309c 	.word	0x2400309c
 8016514:	24003088 	.word	0x24003088
 8016518:	2400307c 	.word	0x2400307c
 801651c:	24002f78 	.word	0x24002f78
 8016520:	24002f74 	.word	0x24002f74
 8016524:	24000120 	.word	0x24000120

08016528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d10b      	bne.n	8016550 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8016538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801653c:	f383 8811 	msr	BASEPRI, r3
 8016540:	f3bf 8f6f 	isb	sy
 8016544:	f3bf 8f4f 	dsb	sy
 8016548:	60fb      	str	r3, [r7, #12]
}
 801654a:	bf00      	nop
 801654c:	bf00      	nop
 801654e:	e7fd      	b.n	801654c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016550:	4b07      	ldr	r3, [pc, #28]	@ (8016570 <vTaskPlaceOnEventList+0x48>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	3318      	adds	r3, #24
 8016556:	4619      	mov	r1, r3
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f7fe fd83 	bl	8015064 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801655e:	2101      	movs	r1, #1
 8016560:	6838      	ldr	r0, [r7, #0]
 8016562:	f000 fb8d 	bl	8016c80 <prvAddCurrentTaskToDelayedList>
}
 8016566:	bf00      	nop
 8016568:	3710      	adds	r7, #16
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	24002f74 	.word	0x24002f74

08016574 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b086      	sub	sp, #24
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	68db      	ldr	r3, [r3, #12]
 8016580:	68db      	ldr	r3, [r3, #12]
 8016582:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d10b      	bne.n	80165a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801658e:	f383 8811 	msr	BASEPRI, r3
 8016592:	f3bf 8f6f 	isb	sy
 8016596:	f3bf 8f4f 	dsb	sy
 801659a:	60fb      	str	r3, [r7, #12]
}
 801659c:	bf00      	nop
 801659e:	bf00      	nop
 80165a0:	e7fd      	b.n	801659e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	3318      	adds	r3, #24
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fe fd95 	bl	80150d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80165ac:	4b1d      	ldr	r3, [pc, #116]	@ (8016624 <xTaskRemoveFromEventList+0xb0>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d11c      	bne.n	80165ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	3304      	adds	r3, #4
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7fe fd8c 	bl	80150d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80165be:	693b      	ldr	r3, [r7, #16]
 80165c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165c2:	2201      	movs	r2, #1
 80165c4:	409a      	lsls	r2, r3
 80165c6:	4b18      	ldr	r3, [pc, #96]	@ (8016628 <xTaskRemoveFromEventList+0xb4>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	4313      	orrs	r3, r2
 80165cc:	4a16      	ldr	r2, [pc, #88]	@ (8016628 <xTaskRemoveFromEventList+0xb4>)
 80165ce:	6013      	str	r3, [r2, #0]
 80165d0:	693b      	ldr	r3, [r7, #16]
 80165d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165d4:	4613      	mov	r3, r2
 80165d6:	009b      	lsls	r3, r3, #2
 80165d8:	4413      	add	r3, r2
 80165da:	009b      	lsls	r3, r3, #2
 80165dc:	4a13      	ldr	r2, [pc, #76]	@ (801662c <xTaskRemoveFromEventList+0xb8>)
 80165de:	441a      	add	r2, r3
 80165e0:	693b      	ldr	r3, [r7, #16]
 80165e2:	3304      	adds	r3, #4
 80165e4:	4619      	mov	r1, r3
 80165e6:	4610      	mov	r0, r2
 80165e8:	f7fe fd18 	bl	801501c <vListInsertEnd>
 80165ec:	e005      	b.n	80165fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80165ee:	693b      	ldr	r3, [r7, #16]
 80165f0:	3318      	adds	r3, #24
 80165f2:	4619      	mov	r1, r3
 80165f4:	480e      	ldr	r0, [pc, #56]	@ (8016630 <xTaskRemoveFromEventList+0xbc>)
 80165f6:	f7fe fd11 	bl	801501c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80165fa:	693b      	ldr	r3, [r7, #16]
 80165fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80165fe:	4b0d      	ldr	r3, [pc, #52]	@ (8016634 <xTaskRemoveFromEventList+0xc0>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016604:	429a      	cmp	r2, r3
 8016606:	d905      	bls.n	8016614 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016608:	2301      	movs	r3, #1
 801660a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801660c:	4b0a      	ldr	r3, [pc, #40]	@ (8016638 <xTaskRemoveFromEventList+0xc4>)
 801660e:	2201      	movs	r2, #1
 8016610:	601a      	str	r2, [r3, #0]
 8016612:	e001      	b.n	8016618 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016614:	2300      	movs	r3, #0
 8016616:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016618:	697b      	ldr	r3, [r7, #20]
}
 801661a:	4618      	mov	r0, r3
 801661c:	3718      	adds	r7, #24
 801661e:	46bd      	mov	sp, r7
 8016620:	bd80      	pop	{r7, pc}
 8016622:	bf00      	nop
 8016624:	2400309c 	.word	0x2400309c
 8016628:	2400307c 	.word	0x2400307c
 801662c:	24002f78 	.word	0x24002f78
 8016630:	24003034 	.word	0x24003034
 8016634:	24002f74 	.word	0x24002f74
 8016638:	24003088 	.word	0x24003088

0801663c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801663c:	b480      	push	{r7}
 801663e:	b083      	sub	sp, #12
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016644:	4b06      	ldr	r3, [pc, #24]	@ (8016660 <vTaskInternalSetTimeOutState+0x24>)
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801664c:	4b05      	ldr	r3, [pc, #20]	@ (8016664 <vTaskInternalSetTimeOutState+0x28>)
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	605a      	str	r2, [r3, #4]
}
 8016654:	bf00      	nop
 8016656:	370c      	adds	r7, #12
 8016658:	46bd      	mov	sp, r7
 801665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665e:	4770      	bx	lr
 8016660:	2400308c 	.word	0x2400308c
 8016664:	24003078 	.word	0x24003078

08016668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b088      	sub	sp, #32
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d10b      	bne.n	8016690 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8016678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801667c:	f383 8811 	msr	BASEPRI, r3
 8016680:	f3bf 8f6f 	isb	sy
 8016684:	f3bf 8f4f 	dsb	sy
 8016688:	613b      	str	r3, [r7, #16]
}
 801668a:	bf00      	nop
 801668c:	bf00      	nop
 801668e:	e7fd      	b.n	801668c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016690:	683b      	ldr	r3, [r7, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d10b      	bne.n	80166ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8016696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801669a:	f383 8811 	msr	BASEPRI, r3
 801669e:	f3bf 8f6f 	isb	sy
 80166a2:	f3bf 8f4f 	dsb	sy
 80166a6:	60fb      	str	r3, [r7, #12]
}
 80166a8:	bf00      	nop
 80166aa:	bf00      	nop
 80166ac:	e7fd      	b.n	80166aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80166ae:	f000 fc7b 	bl	8016fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80166b2:	4b1d      	ldr	r3, [pc, #116]	@ (8016728 <xTaskCheckForTimeOut+0xc0>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	685b      	ldr	r3, [r3, #4]
 80166bc:	69ba      	ldr	r2, [r7, #24]
 80166be:	1ad3      	subs	r3, r2, r3
 80166c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ca:	d102      	bne.n	80166d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80166cc:	2300      	movs	r3, #0
 80166ce:	61fb      	str	r3, [r7, #28]
 80166d0:	e023      	b.n	801671a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	4b15      	ldr	r3, [pc, #84]	@ (801672c <xTaskCheckForTimeOut+0xc4>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	429a      	cmp	r2, r3
 80166dc:	d007      	beq.n	80166ee <xTaskCheckForTimeOut+0x86>
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	685b      	ldr	r3, [r3, #4]
 80166e2:	69ba      	ldr	r2, [r7, #24]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d302      	bcc.n	80166ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80166e8:	2301      	movs	r3, #1
 80166ea:	61fb      	str	r3, [r7, #28]
 80166ec:	e015      	b.n	801671a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	697a      	ldr	r2, [r7, #20]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d20b      	bcs.n	8016710 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	681a      	ldr	r2, [r3, #0]
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	1ad2      	subs	r2, r2, r3
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	f7ff ff99 	bl	801663c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801670a:	2300      	movs	r3, #0
 801670c:	61fb      	str	r3, [r7, #28]
 801670e:	e004      	b.n	801671a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	2200      	movs	r2, #0
 8016714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016716:	2301      	movs	r3, #1
 8016718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801671a:	f000 fc77 	bl	801700c <vPortExitCritical>

	return xReturn;
 801671e:	69fb      	ldr	r3, [r7, #28]
}
 8016720:	4618      	mov	r0, r3
 8016722:	3720      	adds	r7, #32
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}
 8016728:	24003078 	.word	0x24003078
 801672c:	2400308c 	.word	0x2400308c

08016730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016730:	b480      	push	{r7}
 8016732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016734:	4b03      	ldr	r3, [pc, #12]	@ (8016744 <vTaskMissedYield+0x14>)
 8016736:	2201      	movs	r2, #1
 8016738:	601a      	str	r2, [r3, #0]
}
 801673a:	bf00      	nop
 801673c:	46bd      	mov	sp, r7
 801673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016742:	4770      	bx	lr
 8016744:	24003088 	.word	0x24003088

08016748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016750:	f000 f852 	bl	80167f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016754:	4b06      	ldr	r3, [pc, #24]	@ (8016770 <prvIdleTask+0x28>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2b01      	cmp	r3, #1
 801675a:	d9f9      	bls.n	8016750 <prvIdleTask+0x8>
			{
				taskYIELD();
 801675c:	4b05      	ldr	r3, [pc, #20]	@ (8016774 <prvIdleTask+0x2c>)
 801675e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016762:	601a      	str	r2, [r3, #0]
 8016764:	f3bf 8f4f 	dsb	sy
 8016768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801676c:	e7f0      	b.n	8016750 <prvIdleTask+0x8>
 801676e:	bf00      	nop
 8016770:	24002f78 	.word	0x24002f78
 8016774:	e000ed04 	.word	0xe000ed04

08016778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801677e:	2300      	movs	r3, #0
 8016780:	607b      	str	r3, [r7, #4]
 8016782:	e00c      	b.n	801679e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	4613      	mov	r3, r2
 8016788:	009b      	lsls	r3, r3, #2
 801678a:	4413      	add	r3, r2
 801678c:	009b      	lsls	r3, r3, #2
 801678e:	4a12      	ldr	r2, [pc, #72]	@ (80167d8 <prvInitialiseTaskLists+0x60>)
 8016790:	4413      	add	r3, r2
 8016792:	4618      	mov	r0, r3
 8016794:	f7fe fc15 	bl	8014fc2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	3301      	adds	r3, #1
 801679c:	607b      	str	r3, [r7, #4]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2b06      	cmp	r3, #6
 80167a2:	d9ef      	bls.n	8016784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80167a4:	480d      	ldr	r0, [pc, #52]	@ (80167dc <prvInitialiseTaskLists+0x64>)
 80167a6:	f7fe fc0c 	bl	8014fc2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80167aa:	480d      	ldr	r0, [pc, #52]	@ (80167e0 <prvInitialiseTaskLists+0x68>)
 80167ac:	f7fe fc09 	bl	8014fc2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80167b0:	480c      	ldr	r0, [pc, #48]	@ (80167e4 <prvInitialiseTaskLists+0x6c>)
 80167b2:	f7fe fc06 	bl	8014fc2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80167b6:	480c      	ldr	r0, [pc, #48]	@ (80167e8 <prvInitialiseTaskLists+0x70>)
 80167b8:	f7fe fc03 	bl	8014fc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80167bc:	480b      	ldr	r0, [pc, #44]	@ (80167ec <prvInitialiseTaskLists+0x74>)
 80167be:	f7fe fc00 	bl	8014fc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80167c2:	4b0b      	ldr	r3, [pc, #44]	@ (80167f0 <prvInitialiseTaskLists+0x78>)
 80167c4:	4a05      	ldr	r2, [pc, #20]	@ (80167dc <prvInitialiseTaskLists+0x64>)
 80167c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80167c8:	4b0a      	ldr	r3, [pc, #40]	@ (80167f4 <prvInitialiseTaskLists+0x7c>)
 80167ca:	4a05      	ldr	r2, [pc, #20]	@ (80167e0 <prvInitialiseTaskLists+0x68>)
 80167cc:	601a      	str	r2, [r3, #0]
}
 80167ce:	bf00      	nop
 80167d0:	3708      	adds	r7, #8
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	24002f78 	.word	0x24002f78
 80167dc:	24003004 	.word	0x24003004
 80167e0:	24003018 	.word	0x24003018
 80167e4:	24003034 	.word	0x24003034
 80167e8:	24003048 	.word	0x24003048
 80167ec:	24003060 	.word	0x24003060
 80167f0:	2400302c 	.word	0x2400302c
 80167f4:	24003030 	.word	0x24003030

080167f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80167fe:	e019      	b.n	8016834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016800:	f000 fbd2 	bl	8016fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016804:	4b10      	ldr	r3, [pc, #64]	@ (8016848 <prvCheckTasksWaitingTermination+0x50>)
 8016806:	68db      	ldr	r3, [r3, #12]
 8016808:	68db      	ldr	r3, [r3, #12]
 801680a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	3304      	adds	r3, #4
 8016810:	4618      	mov	r0, r3
 8016812:	f7fe fc60 	bl	80150d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016816:	4b0d      	ldr	r3, [pc, #52]	@ (801684c <prvCheckTasksWaitingTermination+0x54>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	3b01      	subs	r3, #1
 801681c:	4a0b      	ldr	r2, [pc, #44]	@ (801684c <prvCheckTasksWaitingTermination+0x54>)
 801681e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016820:	4b0b      	ldr	r3, [pc, #44]	@ (8016850 <prvCheckTasksWaitingTermination+0x58>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	3b01      	subs	r3, #1
 8016826:	4a0a      	ldr	r2, [pc, #40]	@ (8016850 <prvCheckTasksWaitingTermination+0x58>)
 8016828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801682a:	f000 fbef 	bl	801700c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f000 f810 	bl	8016854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016834:	4b06      	ldr	r3, [pc, #24]	@ (8016850 <prvCheckTasksWaitingTermination+0x58>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d1e1      	bne.n	8016800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801683c:	bf00      	nop
 801683e:	bf00      	nop
 8016840:	3708      	adds	r7, #8
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	24003048 	.word	0x24003048
 801684c:	24003074 	.word	0x24003074
 8016850:	2400305c 	.word	0x2400305c

08016854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	334c      	adds	r3, #76	@ 0x4c
 8016860:	4618      	mov	r0, r3
 8016862:	f001 fbe3 	bl	801802c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801686c:	2b00      	cmp	r3, #0
 801686e:	d108      	bne.n	8016882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016874:	4618      	mov	r0, r3
 8016876:	f000 fd87 	bl	8017388 <vPortFree>
				vPortFree( pxTCB );
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f000 fd84 	bl	8017388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016880:	e019      	b.n	80168b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8016888:	2b01      	cmp	r3, #1
 801688a:	d103      	bne.n	8016894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f000 fd7b 	bl	8017388 <vPortFree>
	}
 8016892:	e010      	b.n	80168b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801689a:	2b02      	cmp	r3, #2
 801689c:	d00b      	beq.n	80168b6 <prvDeleteTCB+0x62>
	__asm volatile
 801689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168a2:	f383 8811 	msr	BASEPRI, r3
 80168a6:	f3bf 8f6f 	isb	sy
 80168aa:	f3bf 8f4f 	dsb	sy
 80168ae:	60fb      	str	r3, [r7, #12]
}
 80168b0:	bf00      	nop
 80168b2:	bf00      	nop
 80168b4:	e7fd      	b.n	80168b2 <prvDeleteTCB+0x5e>
	}
 80168b6:	bf00      	nop
 80168b8:	3710      	adds	r7, #16
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
	...

080168c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80168c0:	b480      	push	{r7}
 80168c2:	b083      	sub	sp, #12
 80168c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80168c6:	4b0c      	ldr	r3, [pc, #48]	@ (80168f8 <prvResetNextTaskUnblockTime+0x38>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d104      	bne.n	80168da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80168d0:	4b0a      	ldr	r3, [pc, #40]	@ (80168fc <prvResetNextTaskUnblockTime+0x3c>)
 80168d2:	f04f 32ff 	mov.w	r2, #4294967295
 80168d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80168d8:	e008      	b.n	80168ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168da:	4b07      	ldr	r3, [pc, #28]	@ (80168f8 <prvResetNextTaskUnblockTime+0x38>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	68db      	ldr	r3, [r3, #12]
 80168e0:	68db      	ldr	r3, [r3, #12]
 80168e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	685b      	ldr	r3, [r3, #4]
 80168e8:	4a04      	ldr	r2, [pc, #16]	@ (80168fc <prvResetNextTaskUnblockTime+0x3c>)
 80168ea:	6013      	str	r3, [r2, #0]
}
 80168ec:	bf00      	nop
 80168ee:	370c      	adds	r7, #12
 80168f0:	46bd      	mov	sp, r7
 80168f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f6:	4770      	bx	lr
 80168f8:	2400302c 	.word	0x2400302c
 80168fc:	24003094 	.word	0x24003094

08016900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016900:	b480      	push	{r7}
 8016902:	b083      	sub	sp, #12
 8016904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016906:	4b0b      	ldr	r3, [pc, #44]	@ (8016934 <xTaskGetSchedulerState+0x34>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d102      	bne.n	8016914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801690e:	2301      	movs	r3, #1
 8016910:	607b      	str	r3, [r7, #4]
 8016912:	e008      	b.n	8016926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016914:	4b08      	ldr	r3, [pc, #32]	@ (8016938 <xTaskGetSchedulerState+0x38>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d102      	bne.n	8016922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801691c:	2302      	movs	r3, #2
 801691e:	607b      	str	r3, [r7, #4]
 8016920:	e001      	b.n	8016926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016922:	2300      	movs	r3, #0
 8016924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016926:	687b      	ldr	r3, [r7, #4]
	}
 8016928:	4618      	mov	r0, r3
 801692a:	370c      	adds	r7, #12
 801692c:	46bd      	mov	sp, r7
 801692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016932:	4770      	bx	lr
 8016934:	24003080 	.word	0x24003080
 8016938:	2400309c 	.word	0x2400309c

0801693c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801693c:	b580      	push	{r7, lr}
 801693e:	b084      	sub	sp, #16
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016948:	2300      	movs	r3, #0
 801694a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d05e      	beq.n	8016a10 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016956:	4b31      	ldr	r3, [pc, #196]	@ (8016a1c <xTaskPriorityInherit+0xe0>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801695c:	429a      	cmp	r2, r3
 801695e:	d24e      	bcs.n	80169fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	699b      	ldr	r3, [r3, #24]
 8016964:	2b00      	cmp	r3, #0
 8016966:	db06      	blt.n	8016976 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016968:	4b2c      	ldr	r3, [pc, #176]	@ (8016a1c <xTaskPriorityInherit+0xe0>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801696e:	f1c3 0207 	rsb	r2, r3, #7
 8016972:	68bb      	ldr	r3, [r7, #8]
 8016974:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	6959      	ldr	r1, [r3, #20]
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801697e:	4613      	mov	r3, r2
 8016980:	009b      	lsls	r3, r3, #2
 8016982:	4413      	add	r3, r2
 8016984:	009b      	lsls	r3, r3, #2
 8016986:	4a26      	ldr	r2, [pc, #152]	@ (8016a20 <xTaskPriorityInherit+0xe4>)
 8016988:	4413      	add	r3, r2
 801698a:	4299      	cmp	r1, r3
 801698c:	d12f      	bne.n	80169ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	3304      	adds	r3, #4
 8016992:	4618      	mov	r0, r3
 8016994:	f7fe fb9f 	bl	80150d6 <uxListRemove>
 8016998:	4603      	mov	r3, r0
 801699a:	2b00      	cmp	r3, #0
 801699c:	d10a      	bne.n	80169b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801699e:	68bb      	ldr	r3, [r7, #8]
 80169a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169a2:	2201      	movs	r2, #1
 80169a4:	fa02 f303 	lsl.w	r3, r2, r3
 80169a8:	43da      	mvns	r2, r3
 80169aa:	4b1e      	ldr	r3, [pc, #120]	@ (8016a24 <xTaskPriorityInherit+0xe8>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	4013      	ands	r3, r2
 80169b0:	4a1c      	ldr	r2, [pc, #112]	@ (8016a24 <xTaskPriorityInherit+0xe8>)
 80169b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80169b4:	4b19      	ldr	r3, [pc, #100]	@ (8016a1c <xTaskPriorityInherit+0xe0>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169c2:	2201      	movs	r2, #1
 80169c4:	409a      	lsls	r2, r3
 80169c6:	4b17      	ldr	r3, [pc, #92]	@ (8016a24 <xTaskPriorityInherit+0xe8>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	4313      	orrs	r3, r2
 80169cc:	4a15      	ldr	r2, [pc, #84]	@ (8016a24 <xTaskPriorityInherit+0xe8>)
 80169ce:	6013      	str	r3, [r2, #0]
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80169d4:	4613      	mov	r3, r2
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	4413      	add	r3, r2
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	4a10      	ldr	r2, [pc, #64]	@ (8016a20 <xTaskPriorityInherit+0xe4>)
 80169de:	441a      	add	r2, r3
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	3304      	adds	r3, #4
 80169e4:	4619      	mov	r1, r3
 80169e6:	4610      	mov	r0, r2
 80169e8:	f7fe fb18 	bl	801501c <vListInsertEnd>
 80169ec:	e004      	b.n	80169f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80169ee:	4b0b      	ldr	r3, [pc, #44]	@ (8016a1c <xTaskPriorityInherit+0xe0>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80169f4:	68bb      	ldr	r3, [r7, #8]
 80169f6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80169f8:	2301      	movs	r3, #1
 80169fa:	60fb      	str	r3, [r7, #12]
 80169fc:	e008      	b.n	8016a10 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80169fe:	68bb      	ldr	r3, [r7, #8]
 8016a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016a02:	4b06      	ldr	r3, [pc, #24]	@ (8016a1c <xTaskPriorityInherit+0xe0>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d201      	bcs.n	8016a10 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016a10:	68fb      	ldr	r3, [r7, #12]
	}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3710      	adds	r7, #16
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}
 8016a1a:	bf00      	nop
 8016a1c:	24002f74 	.word	0x24002f74
 8016a20:	24002f78 	.word	0x24002f78
 8016a24:	2400307c 	.word	0x2400307c

08016a28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b086      	sub	sp, #24
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016a34:	2300      	movs	r3, #0
 8016a36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d070      	beq.n	8016b20 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8016b2c <xTaskPriorityDisinherit+0x104>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	693a      	ldr	r2, [r7, #16]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d00b      	beq.n	8016a60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a4c:	f383 8811 	msr	BASEPRI, r3
 8016a50:	f3bf 8f6f 	isb	sy
 8016a54:	f3bf 8f4f 	dsb	sy
 8016a58:	60fb      	str	r3, [r7, #12]
}
 8016a5a:	bf00      	nop
 8016a5c:	bf00      	nop
 8016a5e:	e7fd      	b.n	8016a5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d10b      	bne.n	8016a80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a6c:	f383 8811 	msr	BASEPRI, r3
 8016a70:	f3bf 8f6f 	isb	sy
 8016a74:	f3bf 8f4f 	dsb	sy
 8016a78:	60bb      	str	r3, [r7, #8]
}
 8016a7a:	bf00      	nop
 8016a7c:	bf00      	nop
 8016a7e:	e7fd      	b.n	8016a7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016a84:	1e5a      	subs	r2, r3, #1
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d044      	beq.n	8016b20 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016a96:	693b      	ldr	r3, [r7, #16]
 8016a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d140      	bne.n	8016b20 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a9e:	693b      	ldr	r3, [r7, #16]
 8016aa0:	3304      	adds	r3, #4
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7fe fb17 	bl	80150d6 <uxListRemove>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d115      	bne.n	8016ada <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ab2:	491f      	ldr	r1, [pc, #124]	@ (8016b30 <xTaskPriorityDisinherit+0x108>)
 8016ab4:	4613      	mov	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	4413      	add	r3, r2
 8016aba:	009b      	lsls	r3, r3, #2
 8016abc:	440b      	add	r3, r1
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d10a      	bne.n	8016ada <xTaskPriorityDisinherit+0xb2>
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ac8:	2201      	movs	r2, #1
 8016aca:	fa02 f303 	lsl.w	r3, r2, r3
 8016ace:	43da      	mvns	r2, r3
 8016ad0:	4b18      	ldr	r3, [pc, #96]	@ (8016b34 <xTaskPriorityDisinherit+0x10c>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	4013      	ands	r3, r2
 8016ad6:	4a17      	ldr	r2, [pc, #92]	@ (8016b34 <xTaskPriorityDisinherit+0x10c>)
 8016ad8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016ada:	693b      	ldr	r3, [r7, #16]
 8016adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016ade:	693b      	ldr	r3, [r7, #16]
 8016ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ae6:	f1c3 0207 	rsb	r2, r3, #7
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016af2:	2201      	movs	r2, #1
 8016af4:	409a      	lsls	r2, r3
 8016af6:	4b0f      	ldr	r3, [pc, #60]	@ (8016b34 <xTaskPriorityDisinherit+0x10c>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	4313      	orrs	r3, r2
 8016afc:	4a0d      	ldr	r2, [pc, #52]	@ (8016b34 <xTaskPriorityDisinherit+0x10c>)
 8016afe:	6013      	str	r3, [r2, #0]
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b04:	4613      	mov	r3, r2
 8016b06:	009b      	lsls	r3, r3, #2
 8016b08:	4413      	add	r3, r2
 8016b0a:	009b      	lsls	r3, r3, #2
 8016b0c:	4a08      	ldr	r2, [pc, #32]	@ (8016b30 <xTaskPriorityDisinherit+0x108>)
 8016b0e:	441a      	add	r2, r3
 8016b10:	693b      	ldr	r3, [r7, #16]
 8016b12:	3304      	adds	r3, #4
 8016b14:	4619      	mov	r1, r3
 8016b16:	4610      	mov	r0, r2
 8016b18:	f7fe fa80 	bl	801501c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016b20:	697b      	ldr	r3, [r7, #20]
	}
 8016b22:	4618      	mov	r0, r3
 8016b24:	3718      	adds	r7, #24
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}
 8016b2a:	bf00      	nop
 8016b2c:	24002f74 	.word	0x24002f74
 8016b30:	24002f78 	.word	0x24002f78
 8016b34:	2400307c 	.word	0x2400307c

08016b38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b088      	sub	sp, #32
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016b46:	2301      	movs	r3, #1
 8016b48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d079      	beq.n	8016c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016b50:	69bb      	ldr	r3, [r7, #24]
 8016b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d10b      	bne.n	8016b70 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8016b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b5c:	f383 8811 	msr	BASEPRI, r3
 8016b60:	f3bf 8f6f 	isb	sy
 8016b64:	f3bf 8f4f 	dsb	sy
 8016b68:	60fb      	str	r3, [r7, #12]
}
 8016b6a:	bf00      	nop
 8016b6c:	bf00      	nop
 8016b6e:	e7fd      	b.n	8016b6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016b70:	69bb      	ldr	r3, [r7, #24]
 8016b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b74:	683a      	ldr	r2, [r7, #0]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d902      	bls.n	8016b80 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	61fb      	str	r3, [r7, #28]
 8016b7e:	e002      	b.n	8016b86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016b80:	69bb      	ldr	r3, [r7, #24]
 8016b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b8a:	69fa      	ldr	r2, [r7, #28]
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d059      	beq.n	8016c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016b90:	69bb      	ldr	r3, [r7, #24]
 8016b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016b94:	697a      	ldr	r2, [r7, #20]
 8016b96:	429a      	cmp	r2, r3
 8016b98:	d154      	bne.n	8016c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8016c4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	69ba      	ldr	r2, [r7, #24]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d10b      	bne.n	8016bbc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8016ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ba8:	f383 8811 	msr	BASEPRI, r3
 8016bac:	f3bf 8f6f 	isb	sy
 8016bb0:	f3bf 8f4f 	dsb	sy
 8016bb4:	60bb      	str	r3, [r7, #8]
}
 8016bb6:	bf00      	nop
 8016bb8:	bf00      	nop
 8016bba:	e7fd      	b.n	8016bb8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016bbc:	69bb      	ldr	r3, [r7, #24]
 8016bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016bc2:	69bb      	ldr	r3, [r7, #24]
 8016bc4:	69fa      	ldr	r2, [r7, #28]
 8016bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016bc8:	69bb      	ldr	r3, [r7, #24]
 8016bca:	699b      	ldr	r3, [r3, #24]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	db04      	blt.n	8016bda <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	f1c3 0207 	rsb	r2, r3, #7
 8016bd6:	69bb      	ldr	r3, [r7, #24]
 8016bd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016bda:	69bb      	ldr	r3, [r7, #24]
 8016bdc:	6959      	ldr	r1, [r3, #20]
 8016bde:	693a      	ldr	r2, [r7, #16]
 8016be0:	4613      	mov	r3, r2
 8016be2:	009b      	lsls	r3, r3, #2
 8016be4:	4413      	add	r3, r2
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	4a19      	ldr	r2, [pc, #100]	@ (8016c50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016bea:	4413      	add	r3, r2
 8016bec:	4299      	cmp	r1, r3
 8016bee:	d129      	bne.n	8016c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016bf0:	69bb      	ldr	r3, [r7, #24]
 8016bf2:	3304      	adds	r3, #4
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f7fe fa6e 	bl	80150d6 <uxListRemove>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d10a      	bne.n	8016c16 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016c00:	69bb      	ldr	r3, [r7, #24]
 8016c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c04:	2201      	movs	r2, #1
 8016c06:	fa02 f303 	lsl.w	r3, r2, r3
 8016c0a:	43da      	mvns	r2, r3
 8016c0c:	4b11      	ldr	r3, [pc, #68]	@ (8016c54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	4013      	ands	r3, r2
 8016c12:	4a10      	ldr	r2, [pc, #64]	@ (8016c54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016c14:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016c16:	69bb      	ldr	r3, [r7, #24]
 8016c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c1a:	2201      	movs	r2, #1
 8016c1c:	409a      	lsls	r2, r3
 8016c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8016c54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4313      	orrs	r3, r2
 8016c24:	4a0b      	ldr	r2, [pc, #44]	@ (8016c54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016c26:	6013      	str	r3, [r2, #0]
 8016c28:	69bb      	ldr	r3, [r7, #24]
 8016c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c2c:	4613      	mov	r3, r2
 8016c2e:	009b      	lsls	r3, r3, #2
 8016c30:	4413      	add	r3, r2
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	4a06      	ldr	r2, [pc, #24]	@ (8016c50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016c36:	441a      	add	r2, r3
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	3304      	adds	r3, #4
 8016c3c:	4619      	mov	r1, r3
 8016c3e:	4610      	mov	r0, r2
 8016c40:	f7fe f9ec 	bl	801501c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016c44:	bf00      	nop
 8016c46:	3720      	adds	r7, #32
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}
 8016c4c:	24002f74 	.word	0x24002f74
 8016c50:	24002f78 	.word	0x24002f78
 8016c54:	2400307c 	.word	0x2400307c

08016c58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016c58:	b480      	push	{r7}
 8016c5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016c5c:	4b07      	ldr	r3, [pc, #28]	@ (8016c7c <pvTaskIncrementMutexHeldCount+0x24>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d004      	beq.n	8016c6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016c64:	4b05      	ldr	r3, [pc, #20]	@ (8016c7c <pvTaskIncrementMutexHeldCount+0x24>)
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016c6a:	3201      	adds	r2, #1
 8016c6c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8016c6e:	4b03      	ldr	r3, [pc, #12]	@ (8016c7c <pvTaskIncrementMutexHeldCount+0x24>)
 8016c70:	681b      	ldr	r3, [r3, #0]
	}
 8016c72:	4618      	mov	r0, r3
 8016c74:	46bd      	mov	sp, r7
 8016c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7a:	4770      	bx	lr
 8016c7c:	24002f74 	.word	0x24002f74

08016c80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016c8a:	4b29      	ldr	r3, [pc, #164]	@ (8016d30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c90:	4b28      	ldr	r3, [pc, #160]	@ (8016d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	3304      	adds	r3, #4
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7fe fa1d 	bl	80150d6 <uxListRemove>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d10b      	bne.n	8016cba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016ca2:	4b24      	ldr	r3, [pc, #144]	@ (8016d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ca8:	2201      	movs	r2, #1
 8016caa:	fa02 f303 	lsl.w	r3, r2, r3
 8016cae:	43da      	mvns	r2, r3
 8016cb0:	4b21      	ldr	r3, [pc, #132]	@ (8016d38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	4013      	ands	r3, r2
 8016cb6:	4a20      	ldr	r2, [pc, #128]	@ (8016d38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016cb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cc0:	d10a      	bne.n	8016cd8 <prvAddCurrentTaskToDelayedList+0x58>
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d007      	beq.n	8016cd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8016d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	3304      	adds	r3, #4
 8016cce:	4619      	mov	r1, r3
 8016cd0:	481a      	ldr	r0, [pc, #104]	@ (8016d3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016cd2:	f7fe f9a3 	bl	801501c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016cd6:	e026      	b.n	8016d26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016cd8:	68fa      	ldr	r2, [r7, #12]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4413      	add	r3, r2
 8016cde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016ce0:	4b14      	ldr	r3, [pc, #80]	@ (8016d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	68ba      	ldr	r2, [r7, #8]
 8016ce6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016ce8:	68ba      	ldr	r2, [r7, #8]
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d209      	bcs.n	8016d04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016cf0:	4b13      	ldr	r3, [pc, #76]	@ (8016d40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8016d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	3304      	adds	r3, #4
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	4610      	mov	r0, r2
 8016cfe:	f7fe f9b1 	bl	8015064 <vListInsert>
}
 8016d02:	e010      	b.n	8016d26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d04:	4b0f      	ldr	r3, [pc, #60]	@ (8016d44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016d06:	681a      	ldr	r2, [r3, #0]
 8016d08:	4b0a      	ldr	r3, [pc, #40]	@ (8016d34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	3304      	adds	r3, #4
 8016d0e:	4619      	mov	r1, r3
 8016d10:	4610      	mov	r0, r2
 8016d12:	f7fe f9a7 	bl	8015064 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016d16:	4b0c      	ldr	r3, [pc, #48]	@ (8016d48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	68ba      	ldr	r2, [r7, #8]
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d202      	bcs.n	8016d26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016d20:	4a09      	ldr	r2, [pc, #36]	@ (8016d48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	6013      	str	r3, [r2, #0]
}
 8016d26:	bf00      	nop
 8016d28:	3710      	adds	r7, #16
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}
 8016d2e:	bf00      	nop
 8016d30:	24003078 	.word	0x24003078
 8016d34:	24002f74 	.word	0x24002f74
 8016d38:	2400307c 	.word	0x2400307c
 8016d3c:	24003060 	.word	0x24003060
 8016d40:	24003030 	.word	0x24003030
 8016d44:	2400302c 	.word	0x2400302c
 8016d48:	24003094 	.word	0x24003094

08016d4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016d4c:	b480      	push	{r7}
 8016d4e:	b085      	sub	sp, #20
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	60f8      	str	r0, [r7, #12]
 8016d54:	60b9      	str	r1, [r7, #8]
 8016d56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	3b04      	subs	r3, #4
 8016d5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	3b04      	subs	r3, #4
 8016d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	f023 0201 	bic.w	r2, r3, #1
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	3b04      	subs	r3, #4
 8016d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8016db0 <pxPortInitialiseStack+0x64>)
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	3b14      	subs	r3, #20
 8016d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016d88:	687a      	ldr	r2, [r7, #4]
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	3b04      	subs	r3, #4
 8016d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	f06f 0202 	mvn.w	r2, #2
 8016d9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	3b20      	subs	r3, #32
 8016da0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016da2:	68fb      	ldr	r3, [r7, #12]
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3714      	adds	r7, #20
 8016da8:	46bd      	mov	sp, r7
 8016daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dae:	4770      	bx	lr
 8016db0:	08016db5 	.word	0x08016db5

08016db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016db4:	b480      	push	{r7}
 8016db6:	b085      	sub	sp, #20
 8016db8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016dbe:	4b13      	ldr	r3, [pc, #76]	@ (8016e0c <prvTaskExitError+0x58>)
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dc6:	d00b      	beq.n	8016de0 <prvTaskExitError+0x2c>
	__asm volatile
 8016dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dcc:	f383 8811 	msr	BASEPRI, r3
 8016dd0:	f3bf 8f6f 	isb	sy
 8016dd4:	f3bf 8f4f 	dsb	sy
 8016dd8:	60fb      	str	r3, [r7, #12]
}
 8016dda:	bf00      	nop
 8016ddc:	bf00      	nop
 8016dde:	e7fd      	b.n	8016ddc <prvTaskExitError+0x28>
	__asm volatile
 8016de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016de4:	f383 8811 	msr	BASEPRI, r3
 8016de8:	f3bf 8f6f 	isb	sy
 8016dec:	f3bf 8f4f 	dsb	sy
 8016df0:	60bb      	str	r3, [r7, #8]
}
 8016df2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016df4:	bf00      	nop
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d0fc      	beq.n	8016df6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016dfc:	bf00      	nop
 8016dfe:	bf00      	nop
 8016e00:	3714      	adds	r7, #20
 8016e02:	46bd      	mov	sp, r7
 8016e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e08:	4770      	bx	lr
 8016e0a:	bf00      	nop
 8016e0c:	240000b4 	.word	0x240000b4

08016e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016e10:	4b07      	ldr	r3, [pc, #28]	@ (8016e30 <pxCurrentTCBConst2>)
 8016e12:	6819      	ldr	r1, [r3, #0]
 8016e14:	6808      	ldr	r0, [r1, #0]
 8016e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e1a:	f380 8809 	msr	PSP, r0
 8016e1e:	f3bf 8f6f 	isb	sy
 8016e22:	f04f 0000 	mov.w	r0, #0
 8016e26:	f380 8811 	msr	BASEPRI, r0
 8016e2a:	4770      	bx	lr
 8016e2c:	f3af 8000 	nop.w

08016e30 <pxCurrentTCBConst2>:
 8016e30:	24002f74 	.word	0x24002f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016e34:	bf00      	nop
 8016e36:	bf00      	nop

08016e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016e38:	4808      	ldr	r0, [pc, #32]	@ (8016e5c <prvPortStartFirstTask+0x24>)
 8016e3a:	6800      	ldr	r0, [r0, #0]
 8016e3c:	6800      	ldr	r0, [r0, #0]
 8016e3e:	f380 8808 	msr	MSP, r0
 8016e42:	f04f 0000 	mov.w	r0, #0
 8016e46:	f380 8814 	msr	CONTROL, r0
 8016e4a:	b662      	cpsie	i
 8016e4c:	b661      	cpsie	f
 8016e4e:	f3bf 8f4f 	dsb	sy
 8016e52:	f3bf 8f6f 	isb	sy
 8016e56:	df00      	svc	0
 8016e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016e5a:	bf00      	nop
 8016e5c:	e000ed08 	.word	0xe000ed08

08016e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b086      	sub	sp, #24
 8016e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016e66:	4b47      	ldr	r3, [pc, #284]	@ (8016f84 <xPortStartScheduler+0x124>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	4a47      	ldr	r2, [pc, #284]	@ (8016f88 <xPortStartScheduler+0x128>)
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d10b      	bne.n	8016e88 <xPortStartScheduler+0x28>
	__asm volatile
 8016e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e74:	f383 8811 	msr	BASEPRI, r3
 8016e78:	f3bf 8f6f 	isb	sy
 8016e7c:	f3bf 8f4f 	dsb	sy
 8016e80:	60fb      	str	r3, [r7, #12]
}
 8016e82:	bf00      	nop
 8016e84:	bf00      	nop
 8016e86:	e7fd      	b.n	8016e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016e88:	4b3e      	ldr	r3, [pc, #248]	@ (8016f84 <xPortStartScheduler+0x124>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8016f8c <xPortStartScheduler+0x12c>)
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	d10b      	bne.n	8016eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8016e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e96:	f383 8811 	msr	BASEPRI, r3
 8016e9a:	f3bf 8f6f 	isb	sy
 8016e9e:	f3bf 8f4f 	dsb	sy
 8016ea2:	613b      	str	r3, [r7, #16]
}
 8016ea4:	bf00      	nop
 8016ea6:	bf00      	nop
 8016ea8:	e7fd      	b.n	8016ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016eaa:	4b39      	ldr	r3, [pc, #228]	@ (8016f90 <xPortStartScheduler+0x130>)
 8016eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	b2db      	uxtb	r3, r3
 8016eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016eb6:	697b      	ldr	r3, [r7, #20]
 8016eb8:	22ff      	movs	r2, #255	@ 0xff
 8016eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016ebc:	697b      	ldr	r3, [r7, #20]
 8016ebe:	781b      	ldrb	r3, [r3, #0]
 8016ec0:	b2db      	uxtb	r3, r3
 8016ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016ec4:	78fb      	ldrb	r3, [r7, #3]
 8016ec6:	b2db      	uxtb	r3, r3
 8016ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016ecc:	b2da      	uxtb	r2, r3
 8016ece:	4b31      	ldr	r3, [pc, #196]	@ (8016f94 <xPortStartScheduler+0x134>)
 8016ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016ed2:	4b31      	ldr	r3, [pc, #196]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016ed4:	2207      	movs	r2, #7
 8016ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016ed8:	e009      	b.n	8016eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8016eda:	4b2f      	ldr	r3, [pc, #188]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	3b01      	subs	r3, #1
 8016ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016ee4:	78fb      	ldrb	r3, [r7, #3]
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	005b      	lsls	r3, r3, #1
 8016eea:	b2db      	uxtb	r3, r3
 8016eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016eee:	78fb      	ldrb	r3, [r7, #3]
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ef6:	2b80      	cmp	r3, #128	@ 0x80
 8016ef8:	d0ef      	beq.n	8016eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016efa:	4b27      	ldr	r3, [pc, #156]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	f1c3 0307 	rsb	r3, r3, #7
 8016f02:	2b04      	cmp	r3, #4
 8016f04:	d00b      	beq.n	8016f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8016f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f0a:	f383 8811 	msr	BASEPRI, r3
 8016f0e:	f3bf 8f6f 	isb	sy
 8016f12:	f3bf 8f4f 	dsb	sy
 8016f16:	60bb      	str	r3, [r7, #8]
}
 8016f18:	bf00      	nop
 8016f1a:	bf00      	nop
 8016f1c:	e7fd      	b.n	8016f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	021b      	lsls	r3, r3, #8
 8016f24:	4a1c      	ldr	r2, [pc, #112]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016f28:	4b1b      	ldr	r3, [pc, #108]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016f30:	4a19      	ldr	r2, [pc, #100]	@ (8016f98 <xPortStartScheduler+0x138>)
 8016f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	b2da      	uxtb	r2, r3
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016f3c:	4b17      	ldr	r3, [pc, #92]	@ (8016f9c <xPortStartScheduler+0x13c>)
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	4a16      	ldr	r2, [pc, #88]	@ (8016f9c <xPortStartScheduler+0x13c>)
 8016f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016f48:	4b14      	ldr	r3, [pc, #80]	@ (8016f9c <xPortStartScheduler+0x13c>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	4a13      	ldr	r2, [pc, #76]	@ (8016f9c <xPortStartScheduler+0x13c>)
 8016f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016f54:	f000 f8da 	bl	801710c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016f58:	4b11      	ldr	r3, [pc, #68]	@ (8016fa0 <xPortStartScheduler+0x140>)
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016f5e:	f000 f8f9 	bl	8017154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016f62:	4b10      	ldr	r3, [pc, #64]	@ (8016fa4 <xPortStartScheduler+0x144>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	4a0f      	ldr	r2, [pc, #60]	@ (8016fa4 <xPortStartScheduler+0x144>)
 8016f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016f6e:	f7ff ff63 	bl	8016e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016f72:	f7ff fa75 	bl	8016460 <vTaskSwitchContext>
	prvTaskExitError();
 8016f76:	f7ff ff1d 	bl	8016db4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016f7a:	2300      	movs	r3, #0
}
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	3718      	adds	r7, #24
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd80      	pop	{r7, pc}
 8016f84:	e000ed00 	.word	0xe000ed00
 8016f88:	410fc271 	.word	0x410fc271
 8016f8c:	410fc270 	.word	0x410fc270
 8016f90:	e000e400 	.word	0xe000e400
 8016f94:	240030a0 	.word	0x240030a0
 8016f98:	240030a4 	.word	0x240030a4
 8016f9c:	e000ed20 	.word	0xe000ed20
 8016fa0:	240000b4 	.word	0x240000b4
 8016fa4:	e000ef34 	.word	0xe000ef34

08016fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016fa8:	b480      	push	{r7}
 8016faa:	b083      	sub	sp, #12
 8016fac:	af00      	add	r7, sp, #0
	__asm volatile
 8016fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fb2:	f383 8811 	msr	BASEPRI, r3
 8016fb6:	f3bf 8f6f 	isb	sy
 8016fba:	f3bf 8f4f 	dsb	sy
 8016fbe:	607b      	str	r3, [r7, #4]
}
 8016fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016fc2:	4b10      	ldr	r3, [pc, #64]	@ (8017004 <vPortEnterCritical+0x5c>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	3301      	adds	r3, #1
 8016fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8017004 <vPortEnterCritical+0x5c>)
 8016fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8017004 <vPortEnterCritical+0x5c>)
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	2b01      	cmp	r3, #1
 8016fd2:	d110      	bne.n	8016ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8017008 <vPortEnterCritical+0x60>)
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d00b      	beq.n	8016ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8016fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fe2:	f383 8811 	msr	BASEPRI, r3
 8016fe6:	f3bf 8f6f 	isb	sy
 8016fea:	f3bf 8f4f 	dsb	sy
 8016fee:	603b      	str	r3, [r7, #0]
}
 8016ff0:	bf00      	nop
 8016ff2:	bf00      	nop
 8016ff4:	e7fd      	b.n	8016ff2 <vPortEnterCritical+0x4a>
	}
}
 8016ff6:	bf00      	nop
 8016ff8:	370c      	adds	r7, #12
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017000:	4770      	bx	lr
 8017002:	bf00      	nop
 8017004:	240000b4 	.word	0x240000b4
 8017008:	e000ed04 	.word	0xe000ed04

0801700c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801700c:	b480      	push	{r7}
 801700e:	b083      	sub	sp, #12
 8017010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017012:	4b12      	ldr	r3, [pc, #72]	@ (801705c <vPortExitCritical+0x50>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d10b      	bne.n	8017032 <vPortExitCritical+0x26>
	__asm volatile
 801701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801701e:	f383 8811 	msr	BASEPRI, r3
 8017022:	f3bf 8f6f 	isb	sy
 8017026:	f3bf 8f4f 	dsb	sy
 801702a:	607b      	str	r3, [r7, #4]
}
 801702c:	bf00      	nop
 801702e:	bf00      	nop
 8017030:	e7fd      	b.n	801702e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017032:	4b0a      	ldr	r3, [pc, #40]	@ (801705c <vPortExitCritical+0x50>)
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	3b01      	subs	r3, #1
 8017038:	4a08      	ldr	r2, [pc, #32]	@ (801705c <vPortExitCritical+0x50>)
 801703a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801703c:	4b07      	ldr	r3, [pc, #28]	@ (801705c <vPortExitCritical+0x50>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d105      	bne.n	8017050 <vPortExitCritical+0x44>
 8017044:	2300      	movs	r3, #0
 8017046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017048:	683b      	ldr	r3, [r7, #0]
 801704a:	f383 8811 	msr	BASEPRI, r3
}
 801704e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017050:	bf00      	nop
 8017052:	370c      	adds	r7, #12
 8017054:	46bd      	mov	sp, r7
 8017056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705a:	4770      	bx	lr
 801705c:	240000b4 	.word	0x240000b4

08017060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017060:	f3ef 8009 	mrs	r0, PSP
 8017064:	f3bf 8f6f 	isb	sy
 8017068:	4b15      	ldr	r3, [pc, #84]	@ (80170c0 <pxCurrentTCBConst>)
 801706a:	681a      	ldr	r2, [r3, #0]
 801706c:	f01e 0f10 	tst.w	lr, #16
 8017070:	bf08      	it	eq
 8017072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801707a:	6010      	str	r0, [r2, #0]
 801707c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017084:	f380 8811 	msr	BASEPRI, r0
 8017088:	f3bf 8f4f 	dsb	sy
 801708c:	f3bf 8f6f 	isb	sy
 8017090:	f7ff f9e6 	bl	8016460 <vTaskSwitchContext>
 8017094:	f04f 0000 	mov.w	r0, #0
 8017098:	f380 8811 	msr	BASEPRI, r0
 801709c:	bc09      	pop	{r0, r3}
 801709e:	6819      	ldr	r1, [r3, #0]
 80170a0:	6808      	ldr	r0, [r1, #0]
 80170a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a6:	f01e 0f10 	tst.w	lr, #16
 80170aa:	bf08      	it	eq
 80170ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80170b0:	f380 8809 	msr	PSP, r0
 80170b4:	f3bf 8f6f 	isb	sy
 80170b8:	4770      	bx	lr
 80170ba:	bf00      	nop
 80170bc:	f3af 8000 	nop.w

080170c0 <pxCurrentTCBConst>:
 80170c0:	24002f74 	.word	0x24002f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80170c4:	bf00      	nop
 80170c6:	bf00      	nop

080170c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b082      	sub	sp, #8
 80170cc:	af00      	add	r7, sp, #0
	__asm volatile
 80170ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170d2:	f383 8811 	msr	BASEPRI, r3
 80170d6:	f3bf 8f6f 	isb	sy
 80170da:	f3bf 8f4f 	dsb	sy
 80170de:	607b      	str	r3, [r7, #4]
}
 80170e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80170e2:	f7ff f903 	bl	80162ec <xTaskIncrementTick>
 80170e6:	4603      	mov	r3, r0
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d003      	beq.n	80170f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80170ec:	4b06      	ldr	r3, [pc, #24]	@ (8017108 <SysTick_Handler+0x40>)
 80170ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170f2:	601a      	str	r2, [r3, #0]
 80170f4:	2300      	movs	r3, #0
 80170f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	f383 8811 	msr	BASEPRI, r3
}
 80170fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017100:	bf00      	nop
 8017102:	3708      	adds	r7, #8
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}
 8017108:	e000ed04 	.word	0xe000ed04

0801710c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801710c:	b480      	push	{r7}
 801710e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017110:	4b0b      	ldr	r3, [pc, #44]	@ (8017140 <vPortSetupTimerInterrupt+0x34>)
 8017112:	2200      	movs	r2, #0
 8017114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017116:	4b0b      	ldr	r3, [pc, #44]	@ (8017144 <vPortSetupTimerInterrupt+0x38>)
 8017118:	2200      	movs	r2, #0
 801711a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801711c:	4b0a      	ldr	r3, [pc, #40]	@ (8017148 <vPortSetupTimerInterrupt+0x3c>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	4a0a      	ldr	r2, [pc, #40]	@ (801714c <vPortSetupTimerInterrupt+0x40>)
 8017122:	fba2 2303 	umull	r2, r3, r2, r3
 8017126:	099b      	lsrs	r3, r3, #6
 8017128:	4a09      	ldr	r2, [pc, #36]	@ (8017150 <vPortSetupTimerInterrupt+0x44>)
 801712a:	3b01      	subs	r3, #1
 801712c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801712e:	4b04      	ldr	r3, [pc, #16]	@ (8017140 <vPortSetupTimerInterrupt+0x34>)
 8017130:	2207      	movs	r2, #7
 8017132:	601a      	str	r2, [r3, #0]
}
 8017134:	bf00      	nop
 8017136:	46bd      	mov	sp, r7
 8017138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	e000e010 	.word	0xe000e010
 8017144:	e000e018 	.word	0xe000e018
 8017148:	24000000 	.word	0x24000000
 801714c:	10624dd3 	.word	0x10624dd3
 8017150:	e000e014 	.word	0xe000e014

08017154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017164 <vPortEnableVFP+0x10>
 8017158:	6801      	ldr	r1, [r0, #0]
 801715a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801715e:	6001      	str	r1, [r0, #0]
 8017160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017162:	bf00      	nop
 8017164:	e000ed88 	.word	0xe000ed88

08017168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017168:	b480      	push	{r7}
 801716a:	b085      	sub	sp, #20
 801716c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801716e:	f3ef 8305 	mrs	r3, IPSR
 8017172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	2b0f      	cmp	r3, #15
 8017178:	d915      	bls.n	80171a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801717a:	4a18      	ldr	r2, [pc, #96]	@ (80171dc <vPortValidateInterruptPriority+0x74>)
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	4413      	add	r3, r2
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017184:	4b16      	ldr	r3, [pc, #88]	@ (80171e0 <vPortValidateInterruptPriority+0x78>)
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	7afa      	ldrb	r2, [r7, #11]
 801718a:	429a      	cmp	r2, r3
 801718c:	d20b      	bcs.n	80171a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017192:	f383 8811 	msr	BASEPRI, r3
 8017196:	f3bf 8f6f 	isb	sy
 801719a:	f3bf 8f4f 	dsb	sy
 801719e:	607b      	str	r3, [r7, #4]
}
 80171a0:	bf00      	nop
 80171a2:	bf00      	nop
 80171a4:	e7fd      	b.n	80171a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80171a6:	4b0f      	ldr	r3, [pc, #60]	@ (80171e4 <vPortValidateInterruptPriority+0x7c>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80171ae:	4b0e      	ldr	r3, [pc, #56]	@ (80171e8 <vPortValidateInterruptPriority+0x80>)
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	429a      	cmp	r2, r3
 80171b4:	d90b      	bls.n	80171ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80171b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171ba:	f383 8811 	msr	BASEPRI, r3
 80171be:	f3bf 8f6f 	isb	sy
 80171c2:	f3bf 8f4f 	dsb	sy
 80171c6:	603b      	str	r3, [r7, #0]
}
 80171c8:	bf00      	nop
 80171ca:	bf00      	nop
 80171cc:	e7fd      	b.n	80171ca <vPortValidateInterruptPriority+0x62>
	}
 80171ce:	bf00      	nop
 80171d0:	3714      	adds	r7, #20
 80171d2:	46bd      	mov	sp, r7
 80171d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d8:	4770      	bx	lr
 80171da:	bf00      	nop
 80171dc:	e000e3f0 	.word	0xe000e3f0
 80171e0:	240030a0 	.word	0x240030a0
 80171e4:	e000ed0c 	.word	0xe000ed0c
 80171e8:	240030a4 	.word	0x240030a4

080171ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b08a      	sub	sp, #40	@ 0x28
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80171f4:	2300      	movs	r3, #0
 80171f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80171f8:	f7fe ffcc 	bl	8016194 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80171fc:	4b5c      	ldr	r3, [pc, #368]	@ (8017370 <pvPortMalloc+0x184>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d101      	bne.n	8017208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017204:	f000 f924 	bl	8017450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017208:	4b5a      	ldr	r3, [pc, #360]	@ (8017374 <pvPortMalloc+0x188>)
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	4013      	ands	r3, r2
 8017210:	2b00      	cmp	r3, #0
 8017212:	f040 8095 	bne.w	8017340 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d01e      	beq.n	801725a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801721c:	2208      	movs	r2, #8
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	4413      	add	r3, r2
 8017222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f003 0307 	and.w	r3, r3, #7
 801722a:	2b00      	cmp	r3, #0
 801722c:	d015      	beq.n	801725a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	f023 0307 	bic.w	r3, r3, #7
 8017234:	3308      	adds	r3, #8
 8017236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	f003 0307 	and.w	r3, r3, #7
 801723e:	2b00      	cmp	r3, #0
 8017240:	d00b      	beq.n	801725a <pvPortMalloc+0x6e>
	__asm volatile
 8017242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017246:	f383 8811 	msr	BASEPRI, r3
 801724a:	f3bf 8f6f 	isb	sy
 801724e:	f3bf 8f4f 	dsb	sy
 8017252:	617b      	str	r3, [r7, #20]
}
 8017254:	bf00      	nop
 8017256:	bf00      	nop
 8017258:	e7fd      	b.n	8017256 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d06f      	beq.n	8017340 <pvPortMalloc+0x154>
 8017260:	4b45      	ldr	r3, [pc, #276]	@ (8017378 <pvPortMalloc+0x18c>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	687a      	ldr	r2, [r7, #4]
 8017266:	429a      	cmp	r2, r3
 8017268:	d86a      	bhi.n	8017340 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801726a:	4b44      	ldr	r3, [pc, #272]	@ (801737c <pvPortMalloc+0x190>)
 801726c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801726e:	4b43      	ldr	r3, [pc, #268]	@ (801737c <pvPortMalloc+0x190>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017274:	e004      	b.n	8017280 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8017276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	687a      	ldr	r2, [r7, #4]
 8017286:	429a      	cmp	r2, r3
 8017288:	d903      	bls.n	8017292 <pvPortMalloc+0xa6>
 801728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d1f1      	bne.n	8017276 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017292:	4b37      	ldr	r3, [pc, #220]	@ (8017370 <pvPortMalloc+0x184>)
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017298:	429a      	cmp	r2, r3
 801729a:	d051      	beq.n	8017340 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801729c:	6a3b      	ldr	r3, [r7, #32]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	2208      	movs	r2, #8
 80172a2:	4413      	add	r3, r2
 80172a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80172a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	6a3b      	ldr	r3, [r7, #32]
 80172ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80172ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172b0:	685a      	ldr	r2, [r3, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	1ad2      	subs	r2, r2, r3
 80172b6:	2308      	movs	r3, #8
 80172b8:	005b      	lsls	r3, r3, #1
 80172ba:	429a      	cmp	r2, r3
 80172bc:	d920      	bls.n	8017300 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80172be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	4413      	add	r3, r2
 80172c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80172c6:	69bb      	ldr	r3, [r7, #24]
 80172c8:	f003 0307 	and.w	r3, r3, #7
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d00b      	beq.n	80172e8 <pvPortMalloc+0xfc>
	__asm volatile
 80172d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172d4:	f383 8811 	msr	BASEPRI, r3
 80172d8:	f3bf 8f6f 	isb	sy
 80172dc:	f3bf 8f4f 	dsb	sy
 80172e0:	613b      	str	r3, [r7, #16]
}
 80172e2:	bf00      	nop
 80172e4:	bf00      	nop
 80172e6:	e7fd      	b.n	80172e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80172e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172ea:	685a      	ldr	r2, [r3, #4]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	1ad2      	subs	r2, r2, r3
 80172f0:	69bb      	ldr	r3, [r7, #24]
 80172f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80172f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172f6:	687a      	ldr	r2, [r7, #4]
 80172f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80172fa:	69b8      	ldr	r0, [r7, #24]
 80172fc:	f000 f90a 	bl	8017514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017300:	4b1d      	ldr	r3, [pc, #116]	@ (8017378 <pvPortMalloc+0x18c>)
 8017302:	681a      	ldr	r2, [r3, #0]
 8017304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017306:	685b      	ldr	r3, [r3, #4]
 8017308:	1ad3      	subs	r3, r2, r3
 801730a:	4a1b      	ldr	r2, [pc, #108]	@ (8017378 <pvPortMalloc+0x18c>)
 801730c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801730e:	4b1a      	ldr	r3, [pc, #104]	@ (8017378 <pvPortMalloc+0x18c>)
 8017310:	681a      	ldr	r2, [r3, #0]
 8017312:	4b1b      	ldr	r3, [pc, #108]	@ (8017380 <pvPortMalloc+0x194>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	429a      	cmp	r2, r3
 8017318:	d203      	bcs.n	8017322 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801731a:	4b17      	ldr	r3, [pc, #92]	@ (8017378 <pvPortMalloc+0x18c>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	4a18      	ldr	r2, [pc, #96]	@ (8017380 <pvPortMalloc+0x194>)
 8017320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017324:	685a      	ldr	r2, [r3, #4]
 8017326:	4b13      	ldr	r3, [pc, #76]	@ (8017374 <pvPortMalloc+0x188>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	431a      	orrs	r2, r3
 801732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801732e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017332:	2200      	movs	r2, #0
 8017334:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017336:	4b13      	ldr	r3, [pc, #76]	@ (8017384 <pvPortMalloc+0x198>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	3301      	adds	r3, #1
 801733c:	4a11      	ldr	r2, [pc, #68]	@ (8017384 <pvPortMalloc+0x198>)
 801733e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017340:	f7fe ff36 	bl	80161b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017344:	69fb      	ldr	r3, [r7, #28]
 8017346:	f003 0307 	and.w	r3, r3, #7
 801734a:	2b00      	cmp	r3, #0
 801734c:	d00b      	beq.n	8017366 <pvPortMalloc+0x17a>
	__asm volatile
 801734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017352:	f383 8811 	msr	BASEPRI, r3
 8017356:	f3bf 8f6f 	isb	sy
 801735a:	f3bf 8f4f 	dsb	sy
 801735e:	60fb      	str	r3, [r7, #12]
}
 8017360:	bf00      	nop
 8017362:	bf00      	nop
 8017364:	e7fd      	b.n	8017362 <pvPortMalloc+0x176>
	return pvReturn;
 8017366:	69fb      	ldr	r3, [r7, #28]
}
 8017368:	4618      	mov	r0, r3
 801736a:	3728      	adds	r7, #40	@ 0x28
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}
 8017370:	24006cb0 	.word	0x24006cb0
 8017374:	24006cc4 	.word	0x24006cc4
 8017378:	24006cb4 	.word	0x24006cb4
 801737c:	24006ca8 	.word	0x24006ca8
 8017380:	24006cb8 	.word	0x24006cb8
 8017384:	24006cbc 	.word	0x24006cbc

08017388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d04f      	beq.n	801743a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801739a:	2308      	movs	r3, #8
 801739c:	425b      	negs	r3, r3
 801739e:	697a      	ldr	r2, [r7, #20]
 80173a0:	4413      	add	r3, r2
 80173a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80173a8:	693b      	ldr	r3, [r7, #16]
 80173aa:	685a      	ldr	r2, [r3, #4]
 80173ac:	4b25      	ldr	r3, [pc, #148]	@ (8017444 <vPortFree+0xbc>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	4013      	ands	r3, r2
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d10b      	bne.n	80173ce <vPortFree+0x46>
	__asm volatile
 80173b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173ba:	f383 8811 	msr	BASEPRI, r3
 80173be:	f3bf 8f6f 	isb	sy
 80173c2:	f3bf 8f4f 	dsb	sy
 80173c6:	60fb      	str	r3, [r7, #12]
}
 80173c8:	bf00      	nop
 80173ca:	bf00      	nop
 80173cc:	e7fd      	b.n	80173ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80173ce:	693b      	ldr	r3, [r7, #16]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d00b      	beq.n	80173ee <vPortFree+0x66>
	__asm volatile
 80173d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173da:	f383 8811 	msr	BASEPRI, r3
 80173de:	f3bf 8f6f 	isb	sy
 80173e2:	f3bf 8f4f 	dsb	sy
 80173e6:	60bb      	str	r3, [r7, #8]
}
 80173e8:	bf00      	nop
 80173ea:	bf00      	nop
 80173ec:	e7fd      	b.n	80173ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80173ee:	693b      	ldr	r3, [r7, #16]
 80173f0:	685a      	ldr	r2, [r3, #4]
 80173f2:	4b14      	ldr	r3, [pc, #80]	@ (8017444 <vPortFree+0xbc>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	4013      	ands	r3, r2
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d01e      	beq.n	801743a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80173fc:	693b      	ldr	r3, [r7, #16]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d11a      	bne.n	801743a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017404:	693b      	ldr	r3, [r7, #16]
 8017406:	685a      	ldr	r2, [r3, #4]
 8017408:	4b0e      	ldr	r3, [pc, #56]	@ (8017444 <vPortFree+0xbc>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	43db      	mvns	r3, r3
 801740e:	401a      	ands	r2, r3
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017414:	f7fe febe 	bl	8016194 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	685a      	ldr	r2, [r3, #4]
 801741c:	4b0a      	ldr	r3, [pc, #40]	@ (8017448 <vPortFree+0xc0>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	4413      	add	r3, r2
 8017422:	4a09      	ldr	r2, [pc, #36]	@ (8017448 <vPortFree+0xc0>)
 8017424:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017426:	6938      	ldr	r0, [r7, #16]
 8017428:	f000 f874 	bl	8017514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801742c:	4b07      	ldr	r3, [pc, #28]	@ (801744c <vPortFree+0xc4>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	3301      	adds	r3, #1
 8017432:	4a06      	ldr	r2, [pc, #24]	@ (801744c <vPortFree+0xc4>)
 8017434:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017436:	f7fe febb 	bl	80161b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801743a:	bf00      	nop
 801743c:	3718      	adds	r7, #24
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}
 8017442:	bf00      	nop
 8017444:	24006cc4 	.word	0x24006cc4
 8017448:	24006cb4 	.word	0x24006cb4
 801744c:	24006cc0 	.word	0x24006cc0

08017450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017450:	b480      	push	{r7}
 8017452:	b085      	sub	sp, #20
 8017454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017456:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801745a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801745c:	4b27      	ldr	r3, [pc, #156]	@ (80174fc <prvHeapInit+0xac>)
 801745e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	f003 0307 	and.w	r3, r3, #7
 8017466:	2b00      	cmp	r3, #0
 8017468:	d00c      	beq.n	8017484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	3307      	adds	r3, #7
 801746e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	f023 0307 	bic.w	r3, r3, #7
 8017476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017478:	68ba      	ldr	r2, [r7, #8]
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	1ad3      	subs	r3, r2, r3
 801747e:	4a1f      	ldr	r2, [pc, #124]	@ (80174fc <prvHeapInit+0xac>)
 8017480:	4413      	add	r3, r2
 8017482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017488:	4a1d      	ldr	r2, [pc, #116]	@ (8017500 <prvHeapInit+0xb0>)
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801748e:	4b1c      	ldr	r3, [pc, #112]	@ (8017500 <prvHeapInit+0xb0>)
 8017490:	2200      	movs	r2, #0
 8017492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	68ba      	ldr	r2, [r7, #8]
 8017498:	4413      	add	r3, r2
 801749a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801749c:	2208      	movs	r2, #8
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	1a9b      	subs	r3, r3, r2
 80174a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	f023 0307 	bic.w	r3, r3, #7
 80174aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	4a15      	ldr	r2, [pc, #84]	@ (8017504 <prvHeapInit+0xb4>)
 80174b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80174b2:	4b14      	ldr	r3, [pc, #80]	@ (8017504 <prvHeapInit+0xb4>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	2200      	movs	r2, #0
 80174b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80174ba:	4b12      	ldr	r3, [pc, #72]	@ (8017504 <prvHeapInit+0xb4>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	2200      	movs	r2, #0
 80174c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	68fa      	ldr	r2, [r7, #12]
 80174ca:	1ad2      	subs	r2, r2, r3
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80174d0:	4b0c      	ldr	r3, [pc, #48]	@ (8017504 <prvHeapInit+0xb4>)
 80174d2:	681a      	ldr	r2, [r3, #0]
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	4a0a      	ldr	r2, [pc, #40]	@ (8017508 <prvHeapInit+0xb8>)
 80174de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	4a09      	ldr	r2, [pc, #36]	@ (801750c <prvHeapInit+0xbc>)
 80174e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80174e8:	4b09      	ldr	r3, [pc, #36]	@ (8017510 <prvHeapInit+0xc0>)
 80174ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80174ee:	601a      	str	r2, [r3, #0]
}
 80174f0:	bf00      	nop
 80174f2:	3714      	adds	r7, #20
 80174f4:	46bd      	mov	sp, r7
 80174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fa:	4770      	bx	lr
 80174fc:	240030a8 	.word	0x240030a8
 8017500:	24006ca8 	.word	0x24006ca8
 8017504:	24006cb0 	.word	0x24006cb0
 8017508:	24006cb8 	.word	0x24006cb8
 801750c:	24006cb4 	.word	0x24006cb4
 8017510:	24006cc4 	.word	0x24006cc4

08017514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017514:	b480      	push	{r7}
 8017516:	b085      	sub	sp, #20
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801751c:	4b28      	ldr	r3, [pc, #160]	@ (80175c0 <prvInsertBlockIntoFreeList+0xac>)
 801751e:	60fb      	str	r3, [r7, #12]
 8017520:	e002      	b.n	8017528 <prvInsertBlockIntoFreeList+0x14>
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	60fb      	str	r3, [r7, #12]
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	687a      	ldr	r2, [r7, #4]
 801752e:	429a      	cmp	r2, r3
 8017530:	d8f7      	bhi.n	8017522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	685b      	ldr	r3, [r3, #4]
 801753a:	68ba      	ldr	r2, [r7, #8]
 801753c:	4413      	add	r3, r2
 801753e:	687a      	ldr	r2, [r7, #4]
 8017540:	429a      	cmp	r2, r3
 8017542:	d108      	bne.n	8017556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	685a      	ldr	r2, [r3, #4]
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	441a      	add	r2, r3
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	685b      	ldr	r3, [r3, #4]
 801755e:	68ba      	ldr	r2, [r7, #8]
 8017560:	441a      	add	r2, r3
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	429a      	cmp	r2, r3
 8017568:	d118      	bne.n	801759c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	681a      	ldr	r2, [r3, #0]
 801756e:	4b15      	ldr	r3, [pc, #84]	@ (80175c4 <prvInsertBlockIntoFreeList+0xb0>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	429a      	cmp	r2, r3
 8017574:	d00d      	beq.n	8017592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	685a      	ldr	r2, [r3, #4]
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	441a      	add	r2, r3
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	681a      	ldr	r2, [r3, #0]
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	601a      	str	r2, [r3, #0]
 8017590:	e008      	b.n	80175a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017592:	4b0c      	ldr	r3, [pc, #48]	@ (80175c4 <prvInsertBlockIntoFreeList+0xb0>)
 8017594:	681a      	ldr	r2, [r3, #0]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	601a      	str	r2, [r3, #0]
 801759a:	e003      	b.n	80175a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80175a4:	68fa      	ldr	r2, [r7, #12]
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d002      	beq.n	80175b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80175b2:	bf00      	nop
 80175b4:	3714      	adds	r7, #20
 80175b6:	46bd      	mov	sp, r7
 80175b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175bc:	4770      	bx	lr
 80175be:	bf00      	nop
 80175c0:	24006ca8 	.word	0x24006ca8
 80175c4:	24006cb0 	.word	0x24006cb0

080175c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80175cc:	2200      	movs	r2, #0
 80175ce:	4913      	ldr	r1, [pc, #76]	@ (801761c <MX_USB_DEVICE_Init+0x54>)
 80175d0:	4813      	ldr	r0, [pc, #76]	@ (8017620 <MX_USB_DEVICE_Init+0x58>)
 80175d2:	f7f9 f8f1 	bl	80107b8 <USBD_Init>
 80175d6:	4603      	mov	r3, r0
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d001      	beq.n	80175e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80175dc:	f7e9 fefc 	bl	80013d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80175e0:	4910      	ldr	r1, [pc, #64]	@ (8017624 <MX_USB_DEVICE_Init+0x5c>)
 80175e2:	480f      	ldr	r0, [pc, #60]	@ (8017620 <MX_USB_DEVICE_Init+0x58>)
 80175e4:	f7f9 f918 	bl	8010818 <USBD_RegisterClass>
 80175e8:	4603      	mov	r3, r0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d001      	beq.n	80175f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80175ee:	f7e9 fef3 	bl	80013d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80175f2:	490d      	ldr	r1, [pc, #52]	@ (8017628 <MX_USB_DEVICE_Init+0x60>)
 80175f4:	480a      	ldr	r0, [pc, #40]	@ (8017620 <MX_USB_DEVICE_Init+0x58>)
 80175f6:	f7f9 f84f 	bl	8010698 <USBD_CDC_RegisterInterface>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d001      	beq.n	8017604 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017600:	f7e9 feea 	bl	80013d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017604:	4806      	ldr	r0, [pc, #24]	@ (8017620 <MX_USB_DEVICE_Init+0x58>)
 8017606:	f7f9 f93d 	bl	8010884 <USBD_Start>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d001      	beq.n	8017614 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017610:	f7e9 fee2 	bl	80013d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017614:	f7ef ffca 	bl	80075ac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017618:	bf00      	nop
 801761a:	bd80      	pop	{r7, pc}
 801761c:	240000cc 	.word	0x240000cc
 8017620:	24006cc8 	.word	0x24006cc8
 8017624:	24000034 	.word	0x24000034
 8017628:	240000b8 	.word	0x240000b8

0801762c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017630:	2200      	movs	r2, #0
 8017632:	4905      	ldr	r1, [pc, #20]	@ (8017648 <CDC_Init_FS+0x1c>)
 8017634:	4805      	ldr	r0, [pc, #20]	@ (801764c <CDC_Init_FS+0x20>)
 8017636:	f7f9 f849 	bl	80106cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801763a:	4905      	ldr	r1, [pc, #20]	@ (8017650 <CDC_Init_FS+0x24>)
 801763c:	4803      	ldr	r0, [pc, #12]	@ (801764c <CDC_Init_FS+0x20>)
 801763e:	f7f9 f867 	bl	8010710 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017642:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017644:	4618      	mov	r0, r3
 8017646:	bd80      	pop	{r7, pc}
 8017648:	240077a4 	.word	0x240077a4
 801764c:	24006cc8 	.word	0x24006cc8
 8017650:	24006fa4 	.word	0x24006fa4

08017654 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017654:	b480      	push	{r7}
 8017656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017658:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801765a:	4618      	mov	r0, r3
 801765c:	46bd      	mov	sp, r7
 801765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017662:	4770      	bx	lr

08017664 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017664:	b480      	push	{r7}
 8017666:	b083      	sub	sp, #12
 8017668:	af00      	add	r7, sp, #0
 801766a:	4603      	mov	r3, r0
 801766c:	6039      	str	r1, [r7, #0]
 801766e:	71fb      	strb	r3, [r7, #7]
 8017670:	4613      	mov	r3, r2
 8017672:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017674:	79fb      	ldrb	r3, [r7, #7]
 8017676:	2b23      	cmp	r3, #35	@ 0x23
 8017678:	d84a      	bhi.n	8017710 <CDC_Control_FS+0xac>
 801767a:	a201      	add	r2, pc, #4	@ (adr r2, 8017680 <CDC_Control_FS+0x1c>)
 801767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017680:	08017711 	.word	0x08017711
 8017684:	08017711 	.word	0x08017711
 8017688:	08017711 	.word	0x08017711
 801768c:	08017711 	.word	0x08017711
 8017690:	08017711 	.word	0x08017711
 8017694:	08017711 	.word	0x08017711
 8017698:	08017711 	.word	0x08017711
 801769c:	08017711 	.word	0x08017711
 80176a0:	08017711 	.word	0x08017711
 80176a4:	08017711 	.word	0x08017711
 80176a8:	08017711 	.word	0x08017711
 80176ac:	08017711 	.word	0x08017711
 80176b0:	08017711 	.word	0x08017711
 80176b4:	08017711 	.word	0x08017711
 80176b8:	08017711 	.word	0x08017711
 80176bc:	08017711 	.word	0x08017711
 80176c0:	08017711 	.word	0x08017711
 80176c4:	08017711 	.word	0x08017711
 80176c8:	08017711 	.word	0x08017711
 80176cc:	08017711 	.word	0x08017711
 80176d0:	08017711 	.word	0x08017711
 80176d4:	08017711 	.word	0x08017711
 80176d8:	08017711 	.word	0x08017711
 80176dc:	08017711 	.word	0x08017711
 80176e0:	08017711 	.word	0x08017711
 80176e4:	08017711 	.word	0x08017711
 80176e8:	08017711 	.word	0x08017711
 80176ec:	08017711 	.word	0x08017711
 80176f0:	08017711 	.word	0x08017711
 80176f4:	08017711 	.word	0x08017711
 80176f8:	08017711 	.word	0x08017711
 80176fc:	08017711 	.word	0x08017711
 8017700:	08017711 	.word	0x08017711
 8017704:	08017711 	.word	0x08017711
 8017708:	08017711 	.word	0x08017711
 801770c:	08017711 	.word	0x08017711
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017710:	bf00      	nop
  }

  return (USBD_OK);
 8017712:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017714:	4618      	mov	r0, r3
 8017716:	370c      	adds	r7, #12
 8017718:	46bd      	mov	sp, r7
 801771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771e:	4770      	bx	lr

08017720 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b082      	sub	sp, #8
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801772a:	6879      	ldr	r1, [r7, #4]
 801772c:	4805      	ldr	r0, [pc, #20]	@ (8017744 <CDC_Receive_FS+0x24>)
 801772e:	f7f8 ffef 	bl	8010710 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017732:	4804      	ldr	r0, [pc, #16]	@ (8017744 <CDC_Receive_FS+0x24>)
 8017734:	f7f9 f80a 	bl	801074c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017738:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801773a:	4618      	mov	r0, r3
 801773c:	3708      	adds	r7, #8
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	24006cc8 	.word	0x24006cc8

08017748 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017748:	b480      	push	{r7}
 801774a:	b087      	sub	sp, #28
 801774c:	af00      	add	r7, sp, #0
 801774e:	60f8      	str	r0, [r7, #12]
 8017750:	60b9      	str	r1, [r7, #8]
 8017752:	4613      	mov	r3, r2
 8017754:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017756:	2300      	movs	r3, #0
 8017758:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801775a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801775e:	4618      	mov	r0, r3
 8017760:	371c      	adds	r7, #28
 8017762:	46bd      	mov	sp, r7
 8017764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017768:	4770      	bx	lr
	...

0801776c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801776c:	b480      	push	{r7}
 801776e:	b083      	sub	sp, #12
 8017770:	af00      	add	r7, sp, #0
 8017772:	4603      	mov	r3, r0
 8017774:	6039      	str	r1, [r7, #0]
 8017776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	2212      	movs	r2, #18
 801777c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801777e:	4b03      	ldr	r3, [pc, #12]	@ (801778c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017780:	4618      	mov	r0, r3
 8017782:	370c      	adds	r7, #12
 8017784:	46bd      	mov	sp, r7
 8017786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778a:	4770      	bx	lr
 801778c:	240000ec 	.word	0x240000ec

08017790 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017790:	b480      	push	{r7}
 8017792:	b083      	sub	sp, #12
 8017794:	af00      	add	r7, sp, #0
 8017796:	4603      	mov	r3, r0
 8017798:	6039      	str	r1, [r7, #0]
 801779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	2204      	movs	r2, #4
 80177a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80177a2:	4b03      	ldr	r3, [pc, #12]	@ (80177b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	370c      	adds	r7, #12
 80177a8:	46bd      	mov	sp, r7
 80177aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ae:	4770      	bx	lr
 80177b0:	24000100 	.word	0x24000100

080177b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	4603      	mov	r3, r0
 80177bc:	6039      	str	r1, [r7, #0]
 80177be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80177c0:	79fb      	ldrb	r3, [r7, #7]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d105      	bne.n	80177d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80177c6:	683a      	ldr	r2, [r7, #0]
 80177c8:	4907      	ldr	r1, [pc, #28]	@ (80177e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80177ca:	4808      	ldr	r0, [pc, #32]	@ (80177ec <USBD_FS_ProductStrDescriptor+0x38>)
 80177cc:	f7fa fa34 	bl	8011c38 <USBD_GetString>
 80177d0:	e004      	b.n	80177dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80177d2:	683a      	ldr	r2, [r7, #0]
 80177d4:	4904      	ldr	r1, [pc, #16]	@ (80177e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80177d6:	4805      	ldr	r0, [pc, #20]	@ (80177ec <USBD_FS_ProductStrDescriptor+0x38>)
 80177d8:	f7fa fa2e 	bl	8011c38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80177dc:	4b02      	ldr	r3, [pc, #8]	@ (80177e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
 80177e6:	bf00      	nop
 80177e8:	24007fa4 	.word	0x24007fa4
 80177ec:	08018304 	.word	0x08018304

080177f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b082      	sub	sp, #8
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	4603      	mov	r3, r0
 80177f8:	6039      	str	r1, [r7, #0]
 80177fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80177fc:	683a      	ldr	r2, [r7, #0]
 80177fe:	4904      	ldr	r1, [pc, #16]	@ (8017810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017800:	4804      	ldr	r0, [pc, #16]	@ (8017814 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017802:	f7fa fa19 	bl	8011c38 <USBD_GetString>
  return USBD_StrDesc;
 8017806:	4b02      	ldr	r3, [pc, #8]	@ (8017810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017808:	4618      	mov	r0, r3
 801780a:	3708      	adds	r7, #8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}
 8017810:	24007fa4 	.word	0x24007fa4
 8017814:	0801831c 	.word	0x0801831c

08017818 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
 801781e:	4603      	mov	r3, r0
 8017820:	6039      	str	r1, [r7, #0]
 8017822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	221a      	movs	r2, #26
 8017828:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801782a:	f000 f843 	bl	80178b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801782e:	4b02      	ldr	r3, [pc, #8]	@ (8017838 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017830:	4618      	mov	r0, r3
 8017832:	3708      	adds	r7, #8
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}
 8017838:	24000104 	.word	0x24000104

0801783c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b082      	sub	sp, #8
 8017840:	af00      	add	r7, sp, #0
 8017842:	4603      	mov	r3, r0
 8017844:	6039      	str	r1, [r7, #0]
 8017846:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017848:	79fb      	ldrb	r3, [r7, #7]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d105      	bne.n	801785a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801784e:	683a      	ldr	r2, [r7, #0]
 8017850:	4907      	ldr	r1, [pc, #28]	@ (8017870 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017852:	4808      	ldr	r0, [pc, #32]	@ (8017874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017854:	f7fa f9f0 	bl	8011c38 <USBD_GetString>
 8017858:	e004      	b.n	8017864 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801785a:	683a      	ldr	r2, [r7, #0]
 801785c:	4904      	ldr	r1, [pc, #16]	@ (8017870 <USBD_FS_ConfigStrDescriptor+0x34>)
 801785e:	4805      	ldr	r0, [pc, #20]	@ (8017874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017860:	f7fa f9ea 	bl	8011c38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017864:	4b02      	ldr	r3, [pc, #8]	@ (8017870 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017866:	4618      	mov	r0, r3
 8017868:	3708      	adds	r7, #8
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	24007fa4 	.word	0x24007fa4
 8017874:	08018330 	.word	0x08018330

08017878 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	4603      	mov	r3, r0
 8017880:	6039      	str	r1, [r7, #0]
 8017882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017884:	79fb      	ldrb	r3, [r7, #7]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d105      	bne.n	8017896 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801788a:	683a      	ldr	r2, [r7, #0]
 801788c:	4907      	ldr	r1, [pc, #28]	@ (80178ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801788e:	4808      	ldr	r0, [pc, #32]	@ (80178b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017890:	f7fa f9d2 	bl	8011c38 <USBD_GetString>
 8017894:	e004      	b.n	80178a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017896:	683a      	ldr	r2, [r7, #0]
 8017898:	4904      	ldr	r1, [pc, #16]	@ (80178ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801789a:	4805      	ldr	r0, [pc, #20]	@ (80178b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801789c:	f7fa f9cc 	bl	8011c38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80178a0:	4b02      	ldr	r3, [pc, #8]	@ (80178ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	24007fa4 	.word	0x24007fa4
 80178b0:	0801833c 	.word	0x0801833c

080178b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80178ba:	4b0f      	ldr	r3, [pc, #60]	@ (80178f8 <Get_SerialNum+0x44>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80178c0:	4b0e      	ldr	r3, [pc, #56]	@ (80178fc <Get_SerialNum+0x48>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80178c6:	4b0e      	ldr	r3, [pc, #56]	@ (8017900 <Get_SerialNum+0x4c>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80178cc:	68fa      	ldr	r2, [r7, #12]
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	4413      	add	r3, r2
 80178d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d009      	beq.n	80178ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80178da:	2208      	movs	r2, #8
 80178dc:	4909      	ldr	r1, [pc, #36]	@ (8017904 <Get_SerialNum+0x50>)
 80178de:	68f8      	ldr	r0, [r7, #12]
 80178e0:	f000 f814 	bl	801790c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80178e4:	2204      	movs	r2, #4
 80178e6:	4908      	ldr	r1, [pc, #32]	@ (8017908 <Get_SerialNum+0x54>)
 80178e8:	68b8      	ldr	r0, [r7, #8]
 80178ea:	f000 f80f 	bl	801790c <IntToUnicode>
  }
}
 80178ee:	bf00      	nop
 80178f0:	3710      	adds	r7, #16
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop
 80178f8:	1ff1e800 	.word	0x1ff1e800
 80178fc:	1ff1e804 	.word	0x1ff1e804
 8017900:	1ff1e808 	.word	0x1ff1e808
 8017904:	24000106 	.word	0x24000106
 8017908:	24000116 	.word	0x24000116

0801790c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801790c:	b480      	push	{r7}
 801790e:	b087      	sub	sp, #28
 8017910:	af00      	add	r7, sp, #0
 8017912:	60f8      	str	r0, [r7, #12]
 8017914:	60b9      	str	r1, [r7, #8]
 8017916:	4613      	mov	r3, r2
 8017918:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801791a:	2300      	movs	r3, #0
 801791c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801791e:	2300      	movs	r3, #0
 8017920:	75fb      	strb	r3, [r7, #23]
 8017922:	e027      	b.n	8017974 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	0f1b      	lsrs	r3, r3, #28
 8017928:	2b09      	cmp	r3, #9
 801792a:	d80b      	bhi.n	8017944 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	0f1b      	lsrs	r3, r3, #28
 8017930:	b2da      	uxtb	r2, r3
 8017932:	7dfb      	ldrb	r3, [r7, #23]
 8017934:	005b      	lsls	r3, r3, #1
 8017936:	4619      	mov	r1, r3
 8017938:	68bb      	ldr	r3, [r7, #8]
 801793a:	440b      	add	r3, r1
 801793c:	3230      	adds	r2, #48	@ 0x30
 801793e:	b2d2      	uxtb	r2, r2
 8017940:	701a      	strb	r2, [r3, #0]
 8017942:	e00a      	b.n	801795a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	0f1b      	lsrs	r3, r3, #28
 8017948:	b2da      	uxtb	r2, r3
 801794a:	7dfb      	ldrb	r3, [r7, #23]
 801794c:	005b      	lsls	r3, r3, #1
 801794e:	4619      	mov	r1, r3
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	440b      	add	r3, r1
 8017954:	3237      	adds	r2, #55	@ 0x37
 8017956:	b2d2      	uxtb	r2, r2
 8017958:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	011b      	lsls	r3, r3, #4
 801795e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017960:	7dfb      	ldrb	r3, [r7, #23]
 8017962:	005b      	lsls	r3, r3, #1
 8017964:	3301      	adds	r3, #1
 8017966:	68ba      	ldr	r2, [r7, #8]
 8017968:	4413      	add	r3, r2
 801796a:	2200      	movs	r2, #0
 801796c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801796e:	7dfb      	ldrb	r3, [r7, #23]
 8017970:	3301      	adds	r3, #1
 8017972:	75fb      	strb	r3, [r7, #23]
 8017974:	7dfa      	ldrb	r2, [r7, #23]
 8017976:	79fb      	ldrb	r3, [r7, #7]
 8017978:	429a      	cmp	r2, r3
 801797a:	d3d3      	bcc.n	8017924 <IntToUnicode+0x18>
  }
}
 801797c:	bf00      	nop
 801797e:	bf00      	nop
 8017980:	371c      	adds	r7, #28
 8017982:	46bd      	mov	sp, r7
 8017984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017988:	4770      	bx	lr
	...

0801798c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b0ba      	sub	sp, #232	@ 0xe8
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017994:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017998:	2200      	movs	r2, #0
 801799a:	601a      	str	r2, [r3, #0]
 801799c:	605a      	str	r2, [r3, #4]
 801799e:	609a      	str	r2, [r3, #8]
 80179a0:	60da      	str	r2, [r3, #12]
 80179a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80179a4:	f107 0310 	add.w	r3, r7, #16
 80179a8:	22c0      	movs	r2, #192	@ 0xc0
 80179aa:	2100      	movs	r1, #0
 80179ac:	4618      	mov	r0, r3
 80179ae:	f000 fb35 	bl	801801c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	4a2c      	ldr	r2, [pc, #176]	@ (8017a68 <HAL_PCD_MspInit+0xdc>)
 80179b8:	4293      	cmp	r3, r2
 80179ba:	d151      	bne.n	8017a60 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80179bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80179c0:	f04f 0300 	mov.w	r3, #0
 80179c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80179c8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80179cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80179d0:	f107 0310 	add.w	r3, r7, #16
 80179d4:	4618      	mov	r0, r3
 80179d6:	f7f0 fe21 	bl	800861c <HAL_RCCEx_PeriphCLKConfig>
 80179da:	4603      	mov	r3, r0
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d001      	beq.n	80179e4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80179e0:	f7e9 fcfa 	bl	80013d8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80179e4:	f7ef fde2 	bl	80075ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80179e8:	4b20      	ldr	r3, [pc, #128]	@ (8017a6c <HAL_PCD_MspInit+0xe0>)
 80179ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80179ee:	4a1f      	ldr	r2, [pc, #124]	@ (8017a6c <HAL_PCD_MspInit+0xe0>)
 80179f0:	f043 0301 	orr.w	r3, r3, #1
 80179f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80179f8:	4b1c      	ldr	r3, [pc, #112]	@ (8017a6c <HAL_PCD_MspInit+0xe0>)
 80179fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80179fe:	f003 0301 	and.w	r3, r3, #1
 8017a02:	60fb      	str	r3, [r7, #12]
 8017a04:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8017a06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a0e:	2302      	movs	r3, #2
 8017a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a14:	2300      	movs	r3, #0
 8017a16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017a20:	230a      	movs	r3, #10
 8017a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017a26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017a2a:	4619      	mov	r1, r3
 8017a2c:	4810      	ldr	r0, [pc, #64]	@ (8017a70 <HAL_PCD_MspInit+0xe4>)
 8017a2e:	f7ed ffb1 	bl	8005994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017a32:	4b0e      	ldr	r3, [pc, #56]	@ (8017a6c <HAL_PCD_MspInit+0xe0>)
 8017a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017a38:	4a0c      	ldr	r2, [pc, #48]	@ (8017a6c <HAL_PCD_MspInit+0xe0>)
 8017a3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017a3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017a42:	4b0a      	ldr	r3, [pc, #40]	@ (8017a6c <HAL_PCD_MspInit+0xe0>)
 8017a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017a4c:	60bb      	str	r3, [r7, #8]
 8017a4e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017a50:	2200      	movs	r2, #0
 8017a52:	2105      	movs	r1, #5
 8017a54:	2065      	movs	r0, #101	@ 0x65
 8017a56:	f7eb fafb 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017a5a:	2065      	movs	r0, #101	@ 0x65
 8017a5c:	f7eb fb12 	bl	8003084 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017a60:	bf00      	nop
 8017a62:	37e8      	adds	r7, #232	@ 0xe8
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	40080000 	.word	0x40080000
 8017a6c:	58024400 	.word	0x58024400
 8017a70:	58020000 	.word	0x58020000

08017a74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017a88:	4619      	mov	r1, r3
 8017a8a:	4610      	mov	r0, r2
 8017a8c:	f7f8 ff47 	bl	801091e <USBD_LL_SetupStage>
}
 8017a90:	bf00      	nop
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	460b      	mov	r3, r1
 8017aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017aaa:	78fa      	ldrb	r2, [r7, #3]
 8017aac:	6879      	ldr	r1, [r7, #4]
 8017aae:	4613      	mov	r3, r2
 8017ab0:	00db      	lsls	r3, r3, #3
 8017ab2:	4413      	add	r3, r2
 8017ab4:	009b      	lsls	r3, r3, #2
 8017ab6:	440b      	add	r3, r1
 8017ab8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017abc:	681a      	ldr	r2, [r3, #0]
 8017abe:	78fb      	ldrb	r3, [r7, #3]
 8017ac0:	4619      	mov	r1, r3
 8017ac2:	f7f8 ff81 	bl	80109c8 <USBD_LL_DataOutStage>
}
 8017ac6:	bf00      	nop
 8017ac8:	3708      	adds	r7, #8
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}

08017ace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ace:	b580      	push	{r7, lr}
 8017ad0:	b082      	sub	sp, #8
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	6078      	str	r0, [r7, #4]
 8017ad6:	460b      	mov	r3, r1
 8017ad8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017ae0:	78fa      	ldrb	r2, [r7, #3]
 8017ae2:	6879      	ldr	r1, [r7, #4]
 8017ae4:	4613      	mov	r3, r2
 8017ae6:	00db      	lsls	r3, r3, #3
 8017ae8:	4413      	add	r3, r2
 8017aea:	009b      	lsls	r3, r3, #2
 8017aec:	440b      	add	r3, r1
 8017aee:	3320      	adds	r3, #32
 8017af0:	681a      	ldr	r2, [r3, #0]
 8017af2:	78fb      	ldrb	r3, [r7, #3]
 8017af4:	4619      	mov	r1, r3
 8017af6:	f7f9 f81a 	bl	8010b2e <USBD_LL_DataInStage>
}
 8017afa:	bf00      	nop
 8017afc:	3708      	adds	r7, #8
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}

08017b02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b02:	b580      	push	{r7, lr}
 8017b04:	b082      	sub	sp, #8
 8017b06:	af00      	add	r7, sp, #0
 8017b08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7f9 f954 	bl	8010dbe <USBD_LL_SOF>
}
 8017b16:	bf00      	nop
 8017b18:	3708      	adds	r7, #8
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}

08017b1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b1e:	b580      	push	{r7, lr}
 8017b20:	b084      	sub	sp, #16
 8017b22:	af00      	add	r7, sp, #0
 8017b24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017b26:	2301      	movs	r3, #1
 8017b28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	79db      	ldrb	r3, [r3, #7]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d102      	bne.n	8017b38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017b32:	2300      	movs	r3, #0
 8017b34:	73fb      	strb	r3, [r7, #15]
 8017b36:	e008      	b.n	8017b4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	79db      	ldrb	r3, [r3, #7]
 8017b3c:	2b02      	cmp	r3, #2
 8017b3e:	d102      	bne.n	8017b46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017b40:	2301      	movs	r3, #1
 8017b42:	73fb      	strb	r3, [r7, #15]
 8017b44:	e001      	b.n	8017b4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017b46:	f7e9 fc47 	bl	80013d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b50:	7bfa      	ldrb	r2, [r7, #15]
 8017b52:	4611      	mov	r1, r2
 8017b54:	4618      	mov	r0, r3
 8017b56:	f7f9 f8ee 	bl	8010d36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7f9 f896 	bl	8010c92 <USBD_LL_Reset>
}
 8017b66:	bf00      	nop
 8017b68:	3710      	adds	r7, #16
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}
	...

08017b70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7f9 f8e9 	bl	8010d56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	687a      	ldr	r2, [r7, #4]
 8017b90:	6812      	ldr	r2, [r2, #0]
 8017b92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017b96:	f043 0301 	orr.w	r3, r3, #1
 8017b9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	7adb      	ldrb	r3, [r3, #11]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d005      	beq.n	8017bb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017ba4:	4b04      	ldr	r3, [pc, #16]	@ (8017bb8 <HAL_PCD_SuspendCallback+0x48>)
 8017ba6:	691b      	ldr	r3, [r3, #16]
 8017ba8:	4a03      	ldr	r2, [pc, #12]	@ (8017bb8 <HAL_PCD_SuspendCallback+0x48>)
 8017baa:	f043 0306 	orr.w	r3, r3, #6
 8017bae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017bb0:	bf00      	nop
 8017bb2:	3708      	adds	r7, #8
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}
 8017bb8:	e000ed00 	.word	0xe000ed00

08017bbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b082      	sub	sp, #8
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f7f9 f8df 	bl	8010d8e <USBD_LL_Resume>
}
 8017bd0:	bf00      	nop
 8017bd2:	3708      	adds	r7, #8
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}

08017bd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b082      	sub	sp, #8
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
 8017be0:	460b      	mov	r3, r1
 8017be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bea:	78fa      	ldrb	r2, [r7, #3]
 8017bec:	4611      	mov	r1, r2
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7f9 f937 	bl	8010e62 <USBD_LL_IsoOUTIncomplete>
}
 8017bf4:	bf00      	nop
 8017bf6:	3708      	adds	r7, #8
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}

08017bfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b082      	sub	sp, #8
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
 8017c04:	460b      	mov	r3, r1
 8017c06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c0e:	78fa      	ldrb	r2, [r7, #3]
 8017c10:	4611      	mov	r1, r2
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7f9 f8f3 	bl	8010dfe <USBD_LL_IsoINIncomplete>
}
 8017c18:	bf00      	nop
 8017c1a:	3708      	adds	r7, #8
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}

08017c20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b082      	sub	sp, #8
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f7f9 f949 	bl	8010ec6 <USBD_LL_DevConnected>
}
 8017c34:	bf00      	nop
 8017c36:	3708      	adds	r7, #8
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	bd80      	pop	{r7, pc}

08017c3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b082      	sub	sp, #8
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f7f9 f946 	bl	8010edc <USBD_LL_DevDisconnected>
}
 8017c50:	bf00      	nop
 8017c52:	3708      	adds	r7, #8
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d13e      	bne.n	8017ce6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017c68:	4a21      	ldr	r2, [pc, #132]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	4a1f      	ldr	r2, [pc, #124]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c74:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017c78:	4b1d      	ldr	r3, [pc, #116]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8017cf4 <USBD_LL_Init+0x9c>)
 8017c7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8017c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c80:	2209      	movs	r2, #9
 8017c82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017c84:	4b1a      	ldr	r3, [pc, #104]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c86:	2202      	movs	r2, #2
 8017c88:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017c8a:	4b19      	ldr	r3, [pc, #100]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017c90:	4b17      	ldr	r3, [pc, #92]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c92:	2202      	movs	r2, #2
 8017c94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017c96:	4b16      	ldr	r3, [pc, #88]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c98:	2200      	movs	r2, #0
 8017c9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017c9c:	4b14      	ldr	r3, [pc, #80]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017ca2:	4b13      	ldr	r3, [pc, #76]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017ca8:	4b11      	ldr	r3, [pc, #68]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017caa:	2200      	movs	r2, #0
 8017cac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017cae:	4b10      	ldr	r3, [pc, #64]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017cba:	480d      	ldr	r0, [pc, #52]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017cbc:	f7ee f99b 	bl	8005ff6 <HAL_PCD_Init>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d001      	beq.n	8017cca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017cc6:	f7e9 fb87 	bl	80013d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017cca:	2180      	movs	r1, #128	@ 0x80
 8017ccc:	4808      	ldr	r0, [pc, #32]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017cce:	f7ef fbf2 	bl	80074b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017cd2:	2240      	movs	r2, #64	@ 0x40
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	4806      	ldr	r0, [pc, #24]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017cd8:	f7ef fba6 	bl	8007428 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017cdc:	2280      	movs	r2, #128	@ 0x80
 8017cde:	2101      	movs	r1, #1
 8017ce0:	4803      	ldr	r0, [pc, #12]	@ (8017cf0 <USBD_LL_Init+0x98>)
 8017ce2:	f7ef fba1 	bl	8007428 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8017ce6:	2300      	movs	r3, #0
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	3708      	adds	r7, #8
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bd80      	pop	{r7, pc}
 8017cf0:	240081a4 	.word	0x240081a4
 8017cf4:	40080000 	.word	0x40080000

08017cf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b084      	sub	sp, #16
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d00:	2300      	movs	r3, #0
 8017d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d04:	2300      	movs	r3, #0
 8017d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7ee fa7d 	bl	800620e <HAL_PCD_Start>
 8017d14:	4603      	mov	r3, r0
 8017d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d18:	7bfb      	ldrb	r3, [r7, #15]
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	f000 f942 	bl	8017fa4 <USBD_Get_USB_Status>
 8017d20:	4603      	mov	r3, r0
 8017d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d26:	4618      	mov	r0, r3
 8017d28:	3710      	adds	r7, #16
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bd80      	pop	{r7, pc}

08017d2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017d2e:	b580      	push	{r7, lr}
 8017d30:	b084      	sub	sp, #16
 8017d32:	af00      	add	r7, sp, #0
 8017d34:	6078      	str	r0, [r7, #4]
 8017d36:	4608      	mov	r0, r1
 8017d38:	4611      	mov	r1, r2
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	70fb      	strb	r3, [r7, #3]
 8017d40:	460b      	mov	r3, r1
 8017d42:	70bb      	strb	r3, [r7, #2]
 8017d44:	4613      	mov	r3, r2
 8017d46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d48:	2300      	movs	r3, #0
 8017d4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017d56:	78bb      	ldrb	r3, [r7, #2]
 8017d58:	883a      	ldrh	r2, [r7, #0]
 8017d5a:	78f9      	ldrb	r1, [r7, #3]
 8017d5c:	f7ee ff7e 	bl	8006c5c <HAL_PCD_EP_Open>
 8017d60:	4603      	mov	r3, r0
 8017d62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d64:	7bfb      	ldrb	r3, [r7, #15]
 8017d66:	4618      	mov	r0, r3
 8017d68:	f000 f91c 	bl	8017fa4 <USBD_Get_USB_Status>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	3710      	adds	r7, #16
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}

08017d7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d7a:	b580      	push	{r7, lr}
 8017d7c:	b084      	sub	sp, #16
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	6078      	str	r0, [r7, #4]
 8017d82:	460b      	mov	r3, r1
 8017d84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d86:	2300      	movs	r3, #0
 8017d88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d94:	78fa      	ldrb	r2, [r7, #3]
 8017d96:	4611      	mov	r1, r2
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f7ee ffc9 	bl	8006d30 <HAL_PCD_EP_Close>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017da2:	7bfb      	ldrb	r3, [r7, #15]
 8017da4:	4618      	mov	r0, r3
 8017da6:	f000 f8fd 	bl	8017fa4 <USBD_Get_USB_Status>
 8017daa:	4603      	mov	r3, r0
 8017dac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dae:	7bbb      	ldrb	r3, [r7, #14]
}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3710      	adds	r7, #16
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}

08017db8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b084      	sub	sp, #16
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
 8017dc0:	460b      	mov	r3, r1
 8017dc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dc8:	2300      	movs	r3, #0
 8017dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017dd2:	78fa      	ldrb	r2, [r7, #3]
 8017dd4:	4611      	mov	r1, r2
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7ef f881 	bl	8006ede <HAL_PCD_EP_SetStall>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017de0:	7bfb      	ldrb	r3, [r7, #15]
 8017de2:	4618      	mov	r0, r3
 8017de4:	f000 f8de 	bl	8017fa4 <USBD_Get_USB_Status>
 8017de8:	4603      	mov	r3, r0
 8017dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dee:	4618      	mov	r0, r3
 8017df0:	3710      	adds	r7, #16
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}

08017df6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017df6:	b580      	push	{r7, lr}
 8017df8:	b084      	sub	sp, #16
 8017dfa:	af00      	add	r7, sp, #0
 8017dfc:	6078      	str	r0, [r7, #4]
 8017dfe:	460b      	mov	r3, r1
 8017e00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e02:	2300      	movs	r3, #0
 8017e04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e06:	2300      	movs	r3, #0
 8017e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e10:	78fa      	ldrb	r2, [r7, #3]
 8017e12:	4611      	mov	r1, r2
 8017e14:	4618      	mov	r0, r3
 8017e16:	f7ef f8c5 	bl	8006fa4 <HAL_PCD_EP_ClrStall>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e1e:	7bfb      	ldrb	r3, [r7, #15]
 8017e20:	4618      	mov	r0, r3
 8017e22:	f000 f8bf 	bl	8017fa4 <USBD_Get_USB_Status>
 8017e26:	4603      	mov	r3, r0
 8017e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	3710      	adds	r7, #16
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e34:	b480      	push	{r7}
 8017e36:	b085      	sub	sp, #20
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
 8017e3c:	460b      	mov	r3, r1
 8017e3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	da0b      	bge.n	8017e68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017e50:	78fb      	ldrb	r3, [r7, #3]
 8017e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017e56:	68f9      	ldr	r1, [r7, #12]
 8017e58:	4613      	mov	r3, r2
 8017e5a:	00db      	lsls	r3, r3, #3
 8017e5c:	4413      	add	r3, r2
 8017e5e:	009b      	lsls	r3, r3, #2
 8017e60:	440b      	add	r3, r1
 8017e62:	3316      	adds	r3, #22
 8017e64:	781b      	ldrb	r3, [r3, #0]
 8017e66:	e00b      	b.n	8017e80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017e68:	78fb      	ldrb	r3, [r7, #3]
 8017e6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017e6e:	68f9      	ldr	r1, [r7, #12]
 8017e70:	4613      	mov	r3, r2
 8017e72:	00db      	lsls	r3, r3, #3
 8017e74:	4413      	add	r3, r2
 8017e76:	009b      	lsls	r3, r3, #2
 8017e78:	440b      	add	r3, r1
 8017e7a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017e7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017e80:	4618      	mov	r0, r3
 8017e82:	3714      	adds	r7, #20
 8017e84:	46bd      	mov	sp, r7
 8017e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8a:	4770      	bx	lr

08017e8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b084      	sub	sp, #16
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
 8017e94:	460b      	mov	r3, r1
 8017e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e98:	2300      	movs	r3, #0
 8017e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ea6:	78fa      	ldrb	r2, [r7, #3]
 8017ea8:	4611      	mov	r1, r2
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7ee feb2 	bl	8006c14 <HAL_PCD_SetAddress>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017eb4:	7bfb      	ldrb	r3, [r7, #15]
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f000 f874 	bl	8017fa4 <USBD_Get_USB_Status>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	3710      	adds	r7, #16
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bd80      	pop	{r7, pc}

08017eca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017eca:	b580      	push	{r7, lr}
 8017ecc:	b086      	sub	sp, #24
 8017ece:	af00      	add	r7, sp, #0
 8017ed0:	60f8      	str	r0, [r7, #12]
 8017ed2:	607a      	str	r2, [r7, #4]
 8017ed4:	603b      	str	r3, [r7, #0]
 8017ed6:	460b      	mov	r3, r1
 8017ed8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017eda:	2300      	movs	r3, #0
 8017edc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ede:	2300      	movs	r3, #0
 8017ee0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017ee8:	7af9      	ldrb	r1, [r7, #11]
 8017eea:	683b      	ldr	r3, [r7, #0]
 8017eec:	687a      	ldr	r2, [r7, #4]
 8017eee:	f7ee ffbc 	bl	8006e6a <HAL_PCD_EP_Transmit>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ef6:	7dfb      	ldrb	r3, [r7, #23]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f000 f853 	bl	8017fa4 <USBD_Get_USB_Status>
 8017efe:	4603      	mov	r3, r0
 8017f00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017f02:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f04:	4618      	mov	r0, r3
 8017f06:	3718      	adds	r7, #24
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}

08017f0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b086      	sub	sp, #24
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	60f8      	str	r0, [r7, #12]
 8017f14:	607a      	str	r2, [r7, #4]
 8017f16:	603b      	str	r3, [r7, #0]
 8017f18:	460b      	mov	r3, r1
 8017f1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f20:	2300      	movs	r3, #0
 8017f22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f2a:	7af9      	ldrb	r1, [r7, #11]
 8017f2c:	683b      	ldr	r3, [r7, #0]
 8017f2e:	687a      	ldr	r2, [r7, #4]
 8017f30:	f7ee ff48 	bl	8006dc4 <HAL_PCD_EP_Receive>
 8017f34:	4603      	mov	r3, r0
 8017f36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f38:	7dfb      	ldrb	r3, [r7, #23]
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f000 f832 	bl	8017fa4 <USBD_Get_USB_Status>
 8017f40:	4603      	mov	r3, r0
 8017f42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017f44:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3718      	adds	r7, #24
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}

08017f4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f4e:	b580      	push	{r7, lr}
 8017f50:	b082      	sub	sp, #8
 8017f52:	af00      	add	r7, sp, #0
 8017f54:	6078      	str	r0, [r7, #4]
 8017f56:	460b      	mov	r3, r1
 8017f58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f60:	78fa      	ldrb	r2, [r7, #3]
 8017f62:	4611      	mov	r1, r2
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7ee ff68 	bl	8006e3a <HAL_PCD_EP_GetRxCount>
 8017f6a:	4603      	mov	r3, r0
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3708      	adds	r7, #8
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}

08017f74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017f74:	b480      	push	{r7}
 8017f76:	b083      	sub	sp, #12
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017f7c:	4b03      	ldr	r3, [pc, #12]	@ (8017f8c <USBD_static_malloc+0x18>)
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	370c      	adds	r7, #12
 8017f82:	46bd      	mov	sp, r7
 8017f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f88:	4770      	bx	lr
 8017f8a:	bf00      	nop
 8017f8c:	24008688 	.word	0x24008688

08017f90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017f90:	b480      	push	{r7}
 8017f92:	b083      	sub	sp, #12
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017f98:	bf00      	nop
 8017f9a:	370c      	adds	r7, #12
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa2:	4770      	bx	lr

08017fa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	b085      	sub	sp, #20
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	4603      	mov	r3, r0
 8017fac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017fb2:	79fb      	ldrb	r3, [r7, #7]
 8017fb4:	2b03      	cmp	r3, #3
 8017fb6:	d817      	bhi.n	8017fe8 <USBD_Get_USB_Status+0x44>
 8017fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8017fc0 <USBD_Get_USB_Status+0x1c>)
 8017fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fbe:	bf00      	nop
 8017fc0:	08017fd1 	.word	0x08017fd1
 8017fc4:	08017fd7 	.word	0x08017fd7
 8017fc8:	08017fdd 	.word	0x08017fdd
 8017fcc:	08017fe3 	.word	0x08017fe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8017fd4:	e00b      	b.n	8017fee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017fd6:	2303      	movs	r3, #3
 8017fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8017fda:	e008      	b.n	8017fee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017fdc:	2301      	movs	r3, #1
 8017fde:	73fb      	strb	r3, [r7, #15]
    break;
 8017fe0:	e005      	b.n	8017fee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017fe2:	2303      	movs	r3, #3
 8017fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8017fe6:	e002      	b.n	8017fee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017fe8:	2303      	movs	r3, #3
 8017fea:	73fb      	strb	r3, [r7, #15]
    break;
 8017fec:	bf00      	nop
  }
  return usb_status;
 8017fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	3714      	adds	r7, #20
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffa:	4770      	bx	lr

08017ffc <memcmp>:
 8017ffc:	b510      	push	{r4, lr}
 8017ffe:	3901      	subs	r1, #1
 8018000:	4402      	add	r2, r0
 8018002:	4290      	cmp	r0, r2
 8018004:	d101      	bne.n	801800a <memcmp+0xe>
 8018006:	2000      	movs	r0, #0
 8018008:	e005      	b.n	8018016 <memcmp+0x1a>
 801800a:	7803      	ldrb	r3, [r0, #0]
 801800c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018010:	42a3      	cmp	r3, r4
 8018012:	d001      	beq.n	8018018 <memcmp+0x1c>
 8018014:	1b18      	subs	r0, r3, r4
 8018016:	bd10      	pop	{r4, pc}
 8018018:	3001      	adds	r0, #1
 801801a:	e7f2      	b.n	8018002 <memcmp+0x6>

0801801c <memset>:
 801801c:	4402      	add	r2, r0
 801801e:	4603      	mov	r3, r0
 8018020:	4293      	cmp	r3, r2
 8018022:	d100      	bne.n	8018026 <memset+0xa>
 8018024:	4770      	bx	lr
 8018026:	f803 1b01 	strb.w	r1, [r3], #1
 801802a:	e7f9      	b.n	8018020 <memset+0x4>

0801802c <_reclaim_reent>:
 801802c:	4b2d      	ldr	r3, [pc, #180]	@ (80180e4 <_reclaim_reent+0xb8>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	4283      	cmp	r3, r0
 8018032:	b570      	push	{r4, r5, r6, lr}
 8018034:	4604      	mov	r4, r0
 8018036:	d053      	beq.n	80180e0 <_reclaim_reent+0xb4>
 8018038:	69c3      	ldr	r3, [r0, #28]
 801803a:	b31b      	cbz	r3, 8018084 <_reclaim_reent+0x58>
 801803c:	68db      	ldr	r3, [r3, #12]
 801803e:	b163      	cbz	r3, 801805a <_reclaim_reent+0x2e>
 8018040:	2500      	movs	r5, #0
 8018042:	69e3      	ldr	r3, [r4, #28]
 8018044:	68db      	ldr	r3, [r3, #12]
 8018046:	5959      	ldr	r1, [r3, r5]
 8018048:	b9b1      	cbnz	r1, 8018078 <_reclaim_reent+0x4c>
 801804a:	3504      	adds	r5, #4
 801804c:	2d80      	cmp	r5, #128	@ 0x80
 801804e:	d1f8      	bne.n	8018042 <_reclaim_reent+0x16>
 8018050:	69e3      	ldr	r3, [r4, #28]
 8018052:	4620      	mov	r0, r4
 8018054:	68d9      	ldr	r1, [r3, #12]
 8018056:	f000 f87b 	bl	8018150 <_free_r>
 801805a:	69e3      	ldr	r3, [r4, #28]
 801805c:	6819      	ldr	r1, [r3, #0]
 801805e:	b111      	cbz	r1, 8018066 <_reclaim_reent+0x3a>
 8018060:	4620      	mov	r0, r4
 8018062:	f000 f875 	bl	8018150 <_free_r>
 8018066:	69e3      	ldr	r3, [r4, #28]
 8018068:	689d      	ldr	r5, [r3, #8]
 801806a:	b15d      	cbz	r5, 8018084 <_reclaim_reent+0x58>
 801806c:	4629      	mov	r1, r5
 801806e:	4620      	mov	r0, r4
 8018070:	682d      	ldr	r5, [r5, #0]
 8018072:	f000 f86d 	bl	8018150 <_free_r>
 8018076:	e7f8      	b.n	801806a <_reclaim_reent+0x3e>
 8018078:	680e      	ldr	r6, [r1, #0]
 801807a:	4620      	mov	r0, r4
 801807c:	f000 f868 	bl	8018150 <_free_r>
 8018080:	4631      	mov	r1, r6
 8018082:	e7e1      	b.n	8018048 <_reclaim_reent+0x1c>
 8018084:	6961      	ldr	r1, [r4, #20]
 8018086:	b111      	cbz	r1, 801808e <_reclaim_reent+0x62>
 8018088:	4620      	mov	r0, r4
 801808a:	f000 f861 	bl	8018150 <_free_r>
 801808e:	69e1      	ldr	r1, [r4, #28]
 8018090:	b111      	cbz	r1, 8018098 <_reclaim_reent+0x6c>
 8018092:	4620      	mov	r0, r4
 8018094:	f000 f85c 	bl	8018150 <_free_r>
 8018098:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801809a:	b111      	cbz	r1, 80180a2 <_reclaim_reent+0x76>
 801809c:	4620      	mov	r0, r4
 801809e:	f000 f857 	bl	8018150 <_free_r>
 80180a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80180a4:	b111      	cbz	r1, 80180ac <_reclaim_reent+0x80>
 80180a6:	4620      	mov	r0, r4
 80180a8:	f000 f852 	bl	8018150 <_free_r>
 80180ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80180ae:	b111      	cbz	r1, 80180b6 <_reclaim_reent+0x8a>
 80180b0:	4620      	mov	r0, r4
 80180b2:	f000 f84d 	bl	8018150 <_free_r>
 80180b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80180b8:	b111      	cbz	r1, 80180c0 <_reclaim_reent+0x94>
 80180ba:	4620      	mov	r0, r4
 80180bc:	f000 f848 	bl	8018150 <_free_r>
 80180c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80180c2:	b111      	cbz	r1, 80180ca <_reclaim_reent+0x9e>
 80180c4:	4620      	mov	r0, r4
 80180c6:	f000 f843 	bl	8018150 <_free_r>
 80180ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80180cc:	b111      	cbz	r1, 80180d4 <_reclaim_reent+0xa8>
 80180ce:	4620      	mov	r0, r4
 80180d0:	f000 f83e 	bl	8018150 <_free_r>
 80180d4:	6a23      	ldr	r3, [r4, #32]
 80180d6:	b11b      	cbz	r3, 80180e0 <_reclaim_reent+0xb4>
 80180d8:	4620      	mov	r0, r4
 80180da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180de:	4718      	bx	r3
 80180e0:	bd70      	pop	{r4, r5, r6, pc}
 80180e2:	bf00      	nop
 80180e4:	24000120 	.word	0x24000120

080180e8 <__libc_init_array>:
 80180e8:	b570      	push	{r4, r5, r6, lr}
 80180ea:	4d0d      	ldr	r5, [pc, #52]	@ (8018120 <__libc_init_array+0x38>)
 80180ec:	4c0d      	ldr	r4, [pc, #52]	@ (8018124 <__libc_init_array+0x3c>)
 80180ee:	1b64      	subs	r4, r4, r5
 80180f0:	10a4      	asrs	r4, r4, #2
 80180f2:	2600      	movs	r6, #0
 80180f4:	42a6      	cmp	r6, r4
 80180f6:	d109      	bne.n	801810c <__libc_init_array+0x24>
 80180f8:	4d0b      	ldr	r5, [pc, #44]	@ (8018128 <__libc_init_array+0x40>)
 80180fa:	4c0c      	ldr	r4, [pc, #48]	@ (801812c <__libc_init_array+0x44>)
 80180fc:	f000 f87e 	bl	80181fc <_init>
 8018100:	1b64      	subs	r4, r4, r5
 8018102:	10a4      	asrs	r4, r4, #2
 8018104:	2600      	movs	r6, #0
 8018106:	42a6      	cmp	r6, r4
 8018108:	d105      	bne.n	8018116 <__libc_init_array+0x2e>
 801810a:	bd70      	pop	{r4, r5, r6, pc}
 801810c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018110:	4798      	blx	r3
 8018112:	3601      	adds	r6, #1
 8018114:	e7ee      	b.n	80180f4 <__libc_init_array+0xc>
 8018116:	f855 3b04 	ldr.w	r3, [r5], #4
 801811a:	4798      	blx	r3
 801811c:	3601      	adds	r6, #1
 801811e:	e7f2      	b.n	8018106 <__libc_init_array+0x1e>
 8018120:	08018414 	.word	0x08018414
 8018124:	08018414 	.word	0x08018414
 8018128:	08018414 	.word	0x08018414
 801812c:	08018418 	.word	0x08018418

08018130 <__retarget_lock_acquire_recursive>:
 8018130:	4770      	bx	lr

08018132 <__retarget_lock_release_recursive>:
 8018132:	4770      	bx	lr

08018134 <memcpy>:
 8018134:	440a      	add	r2, r1
 8018136:	4291      	cmp	r1, r2
 8018138:	f100 33ff 	add.w	r3, r0, #4294967295
 801813c:	d100      	bne.n	8018140 <memcpy+0xc>
 801813e:	4770      	bx	lr
 8018140:	b510      	push	{r4, lr}
 8018142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018146:	f803 4f01 	strb.w	r4, [r3, #1]!
 801814a:	4291      	cmp	r1, r2
 801814c:	d1f9      	bne.n	8018142 <memcpy+0xe>
 801814e:	bd10      	pop	{r4, pc}

08018150 <_free_r>:
 8018150:	b538      	push	{r3, r4, r5, lr}
 8018152:	4605      	mov	r5, r0
 8018154:	2900      	cmp	r1, #0
 8018156:	d041      	beq.n	80181dc <_free_r+0x8c>
 8018158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801815c:	1f0c      	subs	r4, r1, #4
 801815e:	2b00      	cmp	r3, #0
 8018160:	bfb8      	it	lt
 8018162:	18e4      	addlt	r4, r4, r3
 8018164:	f000 f83e 	bl	80181e4 <__malloc_lock>
 8018168:	4a1d      	ldr	r2, [pc, #116]	@ (80181e0 <_free_r+0x90>)
 801816a:	6813      	ldr	r3, [r2, #0]
 801816c:	b933      	cbnz	r3, 801817c <_free_r+0x2c>
 801816e:	6063      	str	r3, [r4, #4]
 8018170:	6014      	str	r4, [r2, #0]
 8018172:	4628      	mov	r0, r5
 8018174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018178:	f000 b83a 	b.w	80181f0 <__malloc_unlock>
 801817c:	42a3      	cmp	r3, r4
 801817e:	d908      	bls.n	8018192 <_free_r+0x42>
 8018180:	6820      	ldr	r0, [r4, #0]
 8018182:	1821      	adds	r1, r4, r0
 8018184:	428b      	cmp	r3, r1
 8018186:	bf01      	itttt	eq
 8018188:	6819      	ldreq	r1, [r3, #0]
 801818a:	685b      	ldreq	r3, [r3, #4]
 801818c:	1809      	addeq	r1, r1, r0
 801818e:	6021      	streq	r1, [r4, #0]
 8018190:	e7ed      	b.n	801816e <_free_r+0x1e>
 8018192:	461a      	mov	r2, r3
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	b10b      	cbz	r3, 801819c <_free_r+0x4c>
 8018198:	42a3      	cmp	r3, r4
 801819a:	d9fa      	bls.n	8018192 <_free_r+0x42>
 801819c:	6811      	ldr	r1, [r2, #0]
 801819e:	1850      	adds	r0, r2, r1
 80181a0:	42a0      	cmp	r0, r4
 80181a2:	d10b      	bne.n	80181bc <_free_r+0x6c>
 80181a4:	6820      	ldr	r0, [r4, #0]
 80181a6:	4401      	add	r1, r0
 80181a8:	1850      	adds	r0, r2, r1
 80181aa:	4283      	cmp	r3, r0
 80181ac:	6011      	str	r1, [r2, #0]
 80181ae:	d1e0      	bne.n	8018172 <_free_r+0x22>
 80181b0:	6818      	ldr	r0, [r3, #0]
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	6053      	str	r3, [r2, #4]
 80181b6:	4408      	add	r0, r1
 80181b8:	6010      	str	r0, [r2, #0]
 80181ba:	e7da      	b.n	8018172 <_free_r+0x22>
 80181bc:	d902      	bls.n	80181c4 <_free_r+0x74>
 80181be:	230c      	movs	r3, #12
 80181c0:	602b      	str	r3, [r5, #0]
 80181c2:	e7d6      	b.n	8018172 <_free_r+0x22>
 80181c4:	6820      	ldr	r0, [r4, #0]
 80181c6:	1821      	adds	r1, r4, r0
 80181c8:	428b      	cmp	r3, r1
 80181ca:	bf04      	itt	eq
 80181cc:	6819      	ldreq	r1, [r3, #0]
 80181ce:	685b      	ldreq	r3, [r3, #4]
 80181d0:	6063      	str	r3, [r4, #4]
 80181d2:	bf04      	itt	eq
 80181d4:	1809      	addeq	r1, r1, r0
 80181d6:	6021      	streq	r1, [r4, #0]
 80181d8:	6054      	str	r4, [r2, #4]
 80181da:	e7ca      	b.n	8018172 <_free_r+0x22>
 80181dc:	bd38      	pop	{r3, r4, r5, pc}
 80181de:	bf00      	nop
 80181e0:	240089e4 	.word	0x240089e4

080181e4 <__malloc_lock>:
 80181e4:	4801      	ldr	r0, [pc, #4]	@ (80181ec <__malloc_lock+0x8>)
 80181e6:	f7ff bfa3 	b.w	8018130 <__retarget_lock_acquire_recursive>
 80181ea:	bf00      	nop
 80181ec:	240089e0 	.word	0x240089e0

080181f0 <__malloc_unlock>:
 80181f0:	4801      	ldr	r0, [pc, #4]	@ (80181f8 <__malloc_unlock+0x8>)
 80181f2:	f7ff bf9e 	b.w	8018132 <__retarget_lock_release_recursive>
 80181f6:	bf00      	nop
 80181f8:	240089e0 	.word	0x240089e0

080181fc <_init>:
 80181fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181fe:	bf00      	nop
 8018200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018202:	bc08      	pop	{r3}
 8018204:	469e      	mov	lr, r3
 8018206:	4770      	bx	lr

08018208 <_fini>:
 8018208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801820a:	bf00      	nop
 801820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801820e:	bc08      	pop	{r3}
 8018210:	469e      	mov	lr, r3
 8018212:	4770      	bx	lr
